    Imports System
    Imports System.Data
    Imports System.Data.SqlClient
    Imports System.Data.Sql
    Imports System.IO
    Imports System.Collections
    Imports System.Collections.Generic
    Imports System.IO.Compression
    Imports System.Web.UI.WebControls


    '' <summary>
    '' This is a LINKED class lib.
    '' clsDatabase: A set of standard utilities to perform repetitive database tasks through a public class
    '' Copyright @ DMA, Limited, Chicago, IL., June 2003, all rights reserved.
    '' Licensed on a use only basis for clients of DMA, Limited.
    '' </summary>
    '' <remarks></remarks>
    Public Class clsDatabase
    '    Inherits System.Web.UI.Page

    Dim TimeOutSecs As String = "90"

    Private CompanyID As String = ""
    Private RepoID As String = ""

    Dim ThesaurusConnectionString As String = ""
    Dim getCountOnly As Boolean = Nothing
    Dim UseExistingRecordsOnly As Boolean = Nothing
    Dim GeneratedSQL As String = Nothing
    Dim UseCommandProcessForInventory As Boolean = False
    Public dDebug As Boolean = False
    Dim IXV1 As Integer = 0

    Dim SQLGEN As New clsSql
    Dim GEN As New clsGenerator
    Dim CF As New clsFile
    Dim ENC As New clsEncrypt
    Dim ENC2 As New clsEncryptV2
    Dim LOG As New clsLogging
    Dim UTIL As New clsUtility
    Dim DMA As New clsDma

    Dim KGEN As New clsKeyGen

    Dim ThesaurusList As New ArrayList
    Dim ThesaurusWords As New ArrayList

    '** Public ConnectionStringID As String = "XOMR1.1ConnectionString"
    '** Do not forget that this is a global access var to thte DB
    '** and MUST be changed to run on different platforms.
    Public ConnectionStringID As String = ""
    Public ServerName$ = ""
    Public TgtGuid$ = ""

    Public slProjects As New Dictionary(Of String, String)
    Public slProjectTeams As New Dictionary(Of String, String)
    Public slMetricPeriods As New Dictionary(Of String, String)
    Public slExcelColNames As New Dictionary(Of String, String)
    Public slGrowthPlatform As New Dictionary(Of String, String)
    Public slOperatingGroup As New Dictionary(Of String, String)
    Public slOperatingUnit As New Dictionary(Of String, String)
    Public slGeography As New Dictionary(Of String, String)
    Public slGeographicUnit As New Dictionary(Of String, String)
    Public slClientServiceGroup As New Dictionary(Of String, String)
    Public slDeliveryCenter As New Dictionary(Of String, String)
    Public slTypeOfWork As New Dictionary(Of String, String)
    Public slProjectTeamTypeOfWork As New Dictionary(Of String, String)
    Public slSubmissionStatus As New Dictionary(Of String, String)
    Public slSubmittedBy As New Dictionary(Of String, String)
    Public EL As New ArrayList


    Public TblCols$(4, 0)

    ' Dim owner As IWin32Window
    Dim gConnStr As String = ""
    Dim DBDIR As String = "C:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Data\org_db.mdf"
    Dim DQ$ = Chr(34)
    'Private gCurrUserGuidID = ""
    Private CurrUserPW$ = ""
    Dim gConn As New SqlConnection

    Dim OverwriteOnce As Boolean = False
    Dim OverwriteAlways As Boolean = False

        Sub New()

            'Dim sDebug$ = getUserParm("debug_ClsDatabase")
            'Dim sDebug$ = Nothing
            'If sDebug.Equals("1") Then
            '    dDebug = True
            'Else
            '    dDebug = False
            'End If

        End Sub

        Public Sub setSecureLoginParms(Byref SecureID As Integer, ByVal sCompanyID As String, ByVal sRepoID As String, ByRef RC As Boolean)
            RC = True
            Try
                CompanyID = sCompanyID
                RepoID = sRepoID
            Catch ex As Exception
                RC = False
            End Try
        End Sub


    ''' <summary>
    ''' Gets the secure attach CS.
    ''' </summary>
    ''' <param name="SecureID">The secure ID#.</param>
    ''' <returns></returns>
    Public Function getSecureAttachCS(ByRef SecureID As Integer) As String

        If InStr(gDecryptedCS, "ECM.SecureLogin") > 0 Then
            GoTo StartHere
        End If

        If gDecryptedCS.Length > 0 Then
            Return gDecryptedCS
        End If

        Dim S As String = ""
        Dim UseSecurityDB As String = System.Configuration.ConfigurationManager.AppSettings("UseSecurityDB")
        Dim UseEncrypted As String = System.Configuration.ConfigurationManager.AppSettings("UseEncrypted")

        If UseSecurityDB.Equals("0") Then
            If UseEncrypted.Equals("1") Then
                S = System.Configuration.ConfigurationManager.AppSettings("ENC.ECMREPO")
                S = ENC.AES256DecryptString(S)
            Else
                S = System.Configuration.ConfigurationManager.AppSettings("ECMREPO")
            End If
            Return S
        End If

StartHere:

        Dim EncryptedCS As String = ""
        Dim DecryptedCS As String = ""
        Dim SecurityCS As String = System.Configuration.ConfigurationManager.AppSettings("ECMSecureLogin")
        Dim GateWayCS As String = ENC.AES256DecryptString(SecurityCS)

        'S = "select cs from SecureAttach where CompanyID = '" + CompanyID + "' and RepoID = '" + RepoID + "'"
        S = "select cs from SecureAttach where RowID = " + SecureID.ToString
        Dim i As Integer = 0

        Dim rsData As SqlDataReader = Nothing
        Dim CONN As New SqlConnection(GateWayCS)
        Dim command As New SqlCommand

        Try
            CONN.Open()
            command.Connection = CONN
            command.CommandText = S

            rsData = command.ExecuteReader()

            If rsData.HasRows Then
                rsData.Read()
                EncryptedCS = rsData.GetValue(0).ToString
                DecryptedCS = ENC.AES256DecryptString(EncryptedCS)
            Else
                DecryptedCS = ""
            End If
        Catch ex As Exception
            DecryptedCS = ""
            LOG.WriteToSaveSql("ERROR: getSecureAttach 100 - " + ex.Message)
        Finally
            If rsData IsNot Nothing Then
                If Not rsData.IsClosed Then
                    rsData.Close()
                End If
                rsData = Nothing
            End If

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
            command.Dispose()
        End Try

        GC.Collect()
        GC.WaitForFullGCApproach()

        gDecryptedCS = DecryptedCS

        Return DecryptedCS

    End Function

    '** Web Server Side
    Public Function getConnStr(Byref SecureID As Integer) As String
        Return setConnStr(SecureID)
    End Function

        Public Function UseEncrypted(SecureID as integer) As Boolean
            Dim I As Integer = CInt(System.Configuration.ConfigurationManager.AppSettings("UseEncrypted"))
            If I = 1 Then
                Return True
            Else
                Return False
            End If
        End Function

    Private Function setConnStr(Byref SecureID As Integer) As String
        Dim S As String = getSecureAttachCS(SecureID)
        Return S
    End Function

    Sub setSearchParms(ByVal Secureid As Integer, ByRef SearchParmList As SortedList(Of String, String), ByVal SearchParms As List(Of DS_SearchTerms))
        Dim SearchTerms As String = ""
        Dim SearchHistory As String = ""
        Dim SearchParm As New DS_SearchTerms

        Dim SearchParmTerm As String = ""
        Dim SearchParmTermDatatype As String = ""
        Dim SearchParmTermVal As String = ""
        Dim SearchParmSearchTypeCode As String = ""

        For Each SearchParm In SearchParms
            If SearchParm.Term IsNot Nothing Then
                SearchParmTerm = SearchParm.Term.ToString
            Else
                SearchParmTerm = ""
            End If
            If SearchParm.TermDatatype IsNot Nothing Then
                SearchParmTermDatatype = SearchParm.TermDatatype.ToString
            Else
                SearchParmTermDatatype = ""
            End If
            If SearchParm.TermVal IsNot Nothing Then
                SearchParmTermVal = SearchParm.TermVal.ToString
            Else
                SearchParmTermVal = ""
            End If
            If SearchParm.SearchTypeCode IsNot Nothing Then
                SearchParmSearchTypeCode = SearchParm.SearchTypeCode
            Else
                SearchParmSearchTypeCode = ""
            End If
            SearchHistory += SearchParmTerm + " | " + SearchParmTermDatatype + " | " + SearchParmTermVal + " | " + SearchParmSearchTypeCode + " " + Chr(254) + " "
            SearchTerms += SearchParmTermVal + "|"
            Try
                If Not SearchParmList.ContainsKey(SearchParmTerm) Then
                    SearchParmList.Add(SearchParmTerm, SearchParmTermVal)
                End If
            Catch ex As Exception
                Console.WriteLine(ex.Message)
            End Try
        Next

        Dim bSAve As Boolean = saveSearchParmsHistory(Secureid, SearchHistory)
        If Not bSAve Then
            LOG.WriteToSqlLog("Faled to save search history.")
        End If
        Dim UID As String = ""
        If SearchParmList.ContainsKey("UID") Then
            Dim IDX As Integer = SearchParmList.IndexOfKey("UID")
            UID = SearchParmList.Values(IDX)
        Else
            UID = "UKN"
        End If
        AlertSearch(Secureid, SearchTerms, UID)

    End Sub
    Sub ExecuteSearch(ByRef SecureID As Integer,
                      ByRef currSearchCnt As Integer, _
                        ByVal bGenSql As Boolean, _
                        ByRef EmailGenSql As String, _
                        ByVal SearchParms As List(Of DS_SearchTerms), _
                        ByRef ContentGenSql As String, _
                        ByRef ListOEmailRows As List(Of DS_EMAIL), _
                        ByRef ListOfContentRows As List(Of DS_CONTENT), _
                        ByRef bFirstEmailSearchSubmit As Boolean, _
                        ByRef bFirstContentSearchSubmit As Boolean, _
                        ByRef EmailRowCnt As Integer, _
                        ByRef ContentRowCnt As Integer)

        currSearchCnt += 1
        If currSearchCnt > 1 Then
            bFirstEmailSearchSubmit = False
            bFirstContentSearchSubmit = False
        Else
            bFirstEmailSearchSubmit = True
            bFirstContentSearchSubmit = True
        End If


        Dim CurrentDocPage As Integer = 0
        Dim CurrentEmailPage As Integer = 0
        Dim CalledFromScreen As String = ""
        Dim UID As String = ""
        Dim txtSearch As String = ""
        Dim bNeedRowCount As Boolean = Nothing
        Dim rbAll As Boolean = Nothing
        Dim rbEmails As Boolean = Nothing
        Dim rbContent As Boolean = Nothing
        Dim ckWeights As Boolean = Nothing
        Dim ckLimitToLib As Boolean = Nothing
        Dim cbLibrary As String = Nothing
        Dim MinWeight As Integer = Nothing
        Dim LowerPageNbr As Integer = Nothing
        Dim UpperPageNbr As Integer = Nothing

        Dim StartingEmailRow As Integer = 0
        Dim EndingEmailRow As Integer = 0
        Dim StartingContentRow As Integer = 0
        Dim EndingContentRow As Integer = 0

        Dim SearchParmList As New SortedList(Of String, String)

        setSearchParms(SecureID, SearchParmList, SearchParms)


        Dim sTerm As New DS_SearchTerms
        For iTerms = 0 To SearchParms.Count - 1
            Dim SearchTypeCode As String = ""
            Dim Term As String = ""
            Dim TermVal As String = ""
            Dim TermDatatype As String = ""
            sTerm = SearchParms.Item(iTerms)
            SearchTypeCode = sTerm.SearchTypeCode
            Term = sTerm.Term
            TermVal = sTerm.TermVal
            TermDatatype = sTerm.TermDatatype

            Console.WriteLine(Term & " : " & TermVal)

            Select Case Term
                Case "EndingContentRow"
                    Try
                        EndingContentRow = CInt(TermVal)
                    Catch ex As Exception
                        EndingContentRow = Nothing
                    End Try
                Case "StartingContentRow"
                    Try
                        StartingContentRow = CInt(TermVal)
                    Catch ex As Exception
                        StartingContentRow = Nothing
                    End Try
                Case "StartingEmailRow"
                    Try
                        StartingEmailRow = CInt(TermVal)
                    Catch ex As Exception
                        StartingEmailRow = Nothing
                    End Try
                Case "EndingEmailRow"
                    Try
                        EndingEmailRow = CInt(TermVal)
                    Catch ex As Exception
                        EndingEmailRow = Nothing
                    End Try
                Case "UpperPageNbr"
                    UpperPageNbr = CInt(TermVal)
                Case "LowerPageNbr"
                    Try
                        LowerPageNbr = CInt(TermVal)
                    Catch ex As Exception
                        LowerPageNbr = Nothing
                    End Try
                Case "MinWeight"
                    Try
                        MinWeight = CInt(TermVal)
                    Catch ex As Exception
                        MinWeight = Nothing
                    End Try
                Case "cbLibrary"
                    If cbLibrary IsNot Nothing Then
                        cbLibrary = TermVal
                    End If
                Case "ckLimitToLib"
                    ckLimitToLib = CBool(TermVal)
                Case "ckWeights"
                    ckWeights = CBool(TermVal)
                Case "rbContent"
                    rbContent = CBool(TermVal)
                Case "rbEmails"
                    rbEmails = CBool(TermVal)
                Case "rbAll"
                    rbAll = CBool(TermVal)
                Case "bNeedRowCount"
                    bNeedRowCount = CBool(TermVal)
                Case "txtSearch"
                    If txtSearch IsNot Nothing Then
                        txtSearch = TermVal
                    End If
                Case "CurrentEmailPage"
                    Try
                        CurrentEmailPage = CInt(TermVal)
                    Catch ex As Exception
                        CurrentEmailPage = Nothing
                    End Try
                Case "CurrentDocPage"
                    Try
                        CurrentDocPage = CInt(TermVal)
                    Catch ex As Exception
                        CurrentDocPage = Nothing
                    End Try
                Case "CalledFromScreen"
                    If CalledFromScreen IsNot Nothing Then
                        CalledFromScreen = TermVal
                    End If
                Case "UID"
                    If UID IsNot Nothing Then
                        UID = TermVal
                    End If
                Case Else
                    Term = "XXX"
                    TermVal = ""
                    TermDatatype = ""
            End Select

            If Term.Equals("CalledFromScreen") Then
                CalledFromScreen = Term
            End If
        Next

        ListOEmailRows.Clear()
        ListOfContentRows.Clear()

        Dim gIsAdmin As Boolean = isAdmin(SecureID, UID)

        Dim bIncludeAllLibs As Boolean = True

        bIncludeLibraryFilesInSearch = True

        Dim LastChar As String = ""
        Dim NewLastChar As String = ""
        If txtSearch.Trim.Length > 0 Then
            LastChar$ = Mid(txtSearch.Trim, txtSearch.Trim.Length, 1)
            NewLastChar$ = ""
        End If
        

        txtSearch = txtSearch.Trim

        SQLGEN.PreProcessSearch(txtSearch, False)

        If txtSearch.Trim.Length > 0 Then
            NewLastChar$ = Mid(txtSearch.Trim, txtSearch.Trim.Length, 1)
        End If

        If Not NewLastChar.Equals(LastChar) Then
            txtSearch = txtSearch + LastChar
        End If
        txtSearch = DMA.formatTextSearch(txtSearch)

        Dim B As Boolean = False
        Dim SS$ = ""
        Dim BB As Boolean = True

        ContentGenSql = String.Empty
        Dim TempGeneratedSql As String = ""
        If bNeedRowCount = False Then
            If rbAll Or rbEmails Then
                SearchEmails(SearchParmList, SecureID, UID, MinWeight, CalledFromScreen, txtSearch.Trim, False, bIncludeAllLibs, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, StartingEmailRow, EndingEmailRow, EmailGenSql, ListOEmailRows, bFirstEmailSearchSubmit, EmailRowCnt)
                bFirstEmailSearchSubmit = False
            End If
            If rbAll Or rbContent Then
                SearchContent(SearchParmList, SecureID, UID, CalledFromScreen, False, txtSearch.Trim, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, ckWeights, StartingContentRow, EndingContentRow, ContentGenSql, ListOfContentRows, bFirstContentSearchSubmit, ContentRowCnt)
                bFirstContentSearchSubmit = False
            End If
        Else
            If rbAll Then
                If EndingContentRow < EmailRowCnt Then
                    SearchEmails(SearchParmList, SecureID, UID, MinWeight, CalledFromScreen, txtSearch.Trim, False, bIncludeAllLibs, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, StartingEmailRow, EndingEmailRow, EmailGenSql, ListOEmailRows, bFirstEmailSearchSubmit, EmailRowCnt)
                Else
                    bFirstEmailSearchSubmit = False
                End If
                If EndingContentRow < ContentRowCnt Then
                    SearchContent(SearchParmList, SecureID, UID, CalledFromScreen, False, txtSearch.Trim, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, ckWeights, StartingContentRow, EndingContentRow, ContentGenSql, ListOfContentRows, bFirstContentSearchSubmit, ContentRowCnt)
                Else
                    bFirstContentSearchSubmit = False
                End If
            ElseIf rbEmails Then
                If EndingContentRow < EmailRowCnt Then
                    SearchEmails(SearchParmList, SecureID, UID, MinWeight, CalledFromScreen, txtSearch.Trim, False, bIncludeAllLibs, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, StartingEmailRow, EndingEmailRow, EmailGenSql, ListOEmailRows, bFirstEmailSearchSubmit, EmailRowCnt)
                Else
                    bFirstEmailSearchSubmit = False
                End If
            ElseIf rbContent Then
                If EndingContentRow < ContentRowCnt Then
                    SearchContent(SearchParmList, SecureID, UID, CalledFromScreen, False, txtSearch.Trim, ckWeights, gIsAdmin, ckLimitToLib, cbLibrary, ckWeights, StartingContentRow, EndingContentRow, ContentGenSql, ListOfContentRows, bFirstContentSearchSubmit, ContentRowCnt)
                Else
                    bFirstContentSearchSubmit = False
                End If
            End If
        End If

        EmailRowCnt = ListOEmailRows.Count
        ContentRowCnt = ListOfContentRows.Count

        If EmailRowCnt > 0 Then
            bFirstEmailSearchSubmit = True
        End If

        If ContentRowCnt > 0 Then
            bFirstContentSearchSubmit = True
        End If

        GC.Collect()
        GC.WaitForPendingFinalizers()

    End Sub

    Sub SearchContent(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer, ByVal UID As String, _
                        ByVal Calledfrom As String, _
                        ByVal ZeroizeGrid As Boolean, _
                        ByVal SearchString As String, _
                        ByVal ApplyWeights As Boolean, _
                        ByVal IsAdmin As Boolean, _
                        ByVal LimitToLib As Boolean, _
                        ByVal SelectedLibrary As String, _
                        ByVal ckWeights As Boolean, _
                        ByVal DocLowerPageNbr As Integer, _
                        ByVal DocUpperPageNbr As Integer,
                        ByRef QryToExecute As String, _
                        ByRef ListOfRows As List(Of DS_CONTENT), _
                        ByRef bNewRow As Boolean, _
                        ByRef ContentRowCnt As Integer)

        '**********************************
        gPaginateData = False
        '**********************************

        Dim BB As Boolean = False
        Dim AutoGeneratedSQL As String = ""
        Dim StartTime As Date = Now
        Dim ckLimitToExisting As Boolean = False
        Dim bCkBusiness As Boolean = False
        Dim RC As Boolean = True
        SQLGEN.pTxtSearch = SearchString.Trim
        SQLGEN.pCkBusiness = False 'Me.ckBusiness.isChecked
        SQLGEN.pGetCountOnly = False     '**Me.ckCountOnly.isChecked
        SQLGEN.pUseExistingRecordsOnly = False 'Me.ckLimitToExisting.isChecked
        SQLGEN.pCkWeighted = ApplyWeights
        'SQLGEN.pGeneratedSQL = AutoGeneratedSQL
        SQLGEN.pIsAdmin = IsAdmin
        SQLGEN.pCkBusiness = False 'ckBusiness.isChecked

        SaveClickStats(1, UID, RC)
        SaveSearchWords(SearchString, UID, "C")

        ZeroizeGrid = False
        If ZeroizeGrid = True Then
            AutoGeneratedSQL = "Select * from DataSource where 1 = 2 "
        Else
            AutoGeneratedSQL = GenDocSearchSql(SearchParmList, SecureID)
        End If

        If gPaginateData = True Then
            SQLGEN.AddPaging(DocLowerPageNbr, DocUpperPageNbr, AutoGeneratedSQL, False)
        End If

        UTIL.ckSqlQryForDoubleKeyWords(AutoGeneratedSQL)

        If gHiveEnabled = True Then
            If gHiveServersList.Count > 0 Then
                UTIL.AddHiveSearch(AutoGeneratedSQL, gHiveServersList)
            End If
        End If

        If ApplyWeights Then
            '** Removed by WDM 6/22/2011
            'If InStr(AutoGeneratedSQL, "WITH xContent AS") = 0 Then
            '    AutoGeneratedSQL = "WITH xContent AS (SELECT " + vbCrLf + AutoGeneratedSQL
            '    AutoGeneratedSQL = AutoGeneratedSQL + vbCrLf + "order by rank desc"
            'End If
            ListOfRows = PopulateSourceGridWithWeights(SecureID, DocLowerPageNbr, DocUpperPageNbr, Calledfrom, AutoGeneratedSQL, bNewRow, ContentRowCnt)
        Else
            '** Removed by WDM 6/22/2011
            'If InStr(AutoGeneratedSQL, "WITH xContent AS") = 0 Then
            '    AutoGeneratedSQL = "WITH xContent AS (SELECT " + vbCrLf + AutoGeneratedSQL
            'End If
            ListOfRows = PopulateSourceGridNoWeights(SecureID, DocLowerPageNbr, DocUpperPageNbr, Calledfrom, AutoGeneratedSQL, bNewRow, ContentRowCnt)
        End If

        GeneratedSQL = AutoGeneratedSQL
        QryToExecute = AutoGeneratedSQL

    End Sub

    Sub SearchEmails(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer, ByVal UID As String, _
        ByVal MinWeight As Integer, _
        ByVal Calledfrom As String, _
        ByVal SearchString As String, _
        ByVal ZeroizeGrid As Boolean, _
        ByVal bIncludeAllLibs As Boolean, _
        ByVal IncludeWeights As Boolean, _
        ByVal IsUserAdmin As Boolean, _
        ByVal ckLimitToLib As Boolean, _
        ByVal LibraryName As String, _
        ByVal LowerPageNbr As Integer, _
        ByVal UpperPageNbr As Integer, _
        ByRef GeneratedSql As String, _
        ByRef ListOfRows As List(Of DS_EMAIL), ByRef bFirstEmailSearchSubmit As Boolean, ByRef EmailRowCount As Integer)

        gPaginateData = False
        Dim BB As Boolean = False
        Dim AutoGeneratedSQL As String = ""
        Dim StartTime As Date = Now

        SQLGEN.pTxtSearch = SearchString.Trim
        SQLGEN.pCkBusiness = False 'Me.ckBusiness.isChecked
        SQLGEN.pGetCountOnly = False     '**Me.ckCountOnly.isChecked
        SQLGEN.pUseExistingRecordsOnly = False 'Me.ckLimitToExisting.isChecked
        SQLGEN.pCkWeighted = IncludeWeights
        'SQLGEN.pGeneratedSQL = AutoGeneratedSQL
        SQLGEN.pIsAdmin = IsUserAdmin
        SQLGEN.pCkBusiness = False 'ckBusiness.isChecked

        Dim bCkLimitToExisting As Boolean = False
        Dim bCkBusiness As Boolean = False
        Dim RC As Boolean = True

        '********************************************************************************************************************************************************************************************************
        SaveClickStats(2, UID, RC)
        SaveSearchWords(SearchString, UID, "E")
        AutoGeneratedSQL = GenEmailGeneratedSQL(SearchParmList, SecureID)
        '*******************************************************************************************************************************************************************************************************

        If bIncludeLibraryFilesInSearch = True Then
            Dim a$()
            a = AutoGeneratedSQL.Split(vbCrLf)
            AutoGeneratedSQL = ""
            For ii As Integer = 0 To UBound(a)
                If a(ii).Trim.Length = 0 Then
                Else
                    AutoGeneratedSQL += a(ii).Trim + vbCrLf
                End If
            Next
        End If

        'PopulateEmailGrid(AutoGeneratedSQL)
        Dim SSX$ = AutoGeneratedSQL
        AutoGeneratedSQL = SSX
        If gPaginateData = True Then

            SQLGEN.AddPaging(LowerPageNbr, UpperPageNbr, AutoGeneratedSQL, bIncludeLibraryFilesInSearch)

            '** Now at this point today, there is a rogue ORDER BY clause in the email paging query.
            '** Of course, it has to be removed or in this case, commented out
            '** I do not want to troubleshoot the generator, I will just do it in a simplistic manner.
            AutoGeneratedSQL = AutoGeneratedSQL.Replace("order by [ShortSubj]", "/*order by [ShortSubj]*/")
            Console.WriteLine("Replaced Order by here")
        End If

        UTIL.ckSqlQryForDoubleKeyWords(AutoGeneratedSQL)

        If gHiveEnabled = True Then
            If gHiveServersList.Count > 0 Then
                UTIL.AddHiveSearch(AutoGeneratedSQL, gHiveServersList)
            End If
        End If


        '***************************************************
        Dim SS As String = AutoGeneratedSQL.Replace(",", "," + vbCrLf)
        GeneratedSql = AutoGeneratedSQL

        If IncludeWeights Then
            ListOfRows = PopulateEmailGridWithWeights(SecureID, UID, Calledfrom, AutoGeneratedSQL, MinWeight, LowerPageNbr, UpperPageNbr, bFirstEmailSearchSubmit, EmailRowCount)
        Else
            ListOfRows = PopulateEmailGridWithNoWeights(SecureID, UID, Calledfrom, AutoGeneratedSQL, LowerPageNbr, UpperPageNbr, bFirstEmailSearchSubmit, EmailRowCount)
        End If
        GeneratedSql = AutoGeneratedSQL
    End Sub


        Function CkColData(Byref SecureID As Integer, ByVal TblName$, ByVal ColName$, ByVal tData$) As String
            Dim xData$ = ""
            Dim K As Integer
            Dim CurrLen As Integer = tData.Length
            Dim MaxLen As Integer = 0
            Dim table_name$ = ""
            Dim column_name$ = ""
            Dim data_type$ = ""
            Dim character_maximum_length As Integer = 0
            Dim B As Boolean = False

            For K = 1 To UBound(TblCols, 2)
                table_name$ = UCase(TblCols(0, K))
                column_name$ = UCase(TblCols(1, K))
                data_type$ = TblCols(2, K)
                character_maximum_length = Val(TblCols(3, K))
                If table_name.Equals(UCase(TblName)) Then
                    If column_name$.Equals(UCase(ColName)) Then
                        B = True
                        xData = tData
                        Exit For
                    End If
                End If
            Next
            If B Then
                If character_maximum_length < CurrLen Then
                    'tData$ = Mid(tData, 1, MaxLen)
                    xData = Mid(tData, 1, character_maximum_length)
                    ''Session("ErrMsgs") = 'Session("ErrMsgs") + "<br>" + "" + ColName + " > " + Str(character_maximum_length) + " characters - truncated."
                Else
                    xData = tData
                End If
            End If
            Return xData
        End Function

        ''' <summary>
        ''' LoadColInfo reads table_name, column_name, data_type, character_maximum_length
        ''' from INFORMATION_SCHEMA.COLUMNS.
        ''' </summary>
        ''' <remarks></remarks>
        Sub LoadColInfo(Byref SecureID As Integer)

            Dim S$ = ""
            S = S + " select table_name, column_name, data_type, character_maximum_length  "
            S = S + " from INFORMATION_SCHEMA.COLUMNS "
            'S = S + " where table_name = 'Project' "
            S = S + " order by table_name, column_name"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim table_name$ = ""
            Dim column_name$ = ""
            Dim data_type$ = ""
            Dim character_maximum_length$ = ""

            If UBound(TblCols, 2) > 2 Then
                Return
            End If

            ReDim TblCols$(4, 0)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    table_name = RSData.GetValue(0).ToString
                    column_name = RSData.GetValue(1).ToString
                    data_type = RSData.GetValue(2).ToString
                    character_maximum_length = RSData.GetValue(3).ToString
                    II = UBound(TblCols, 2) + 1
                    ReDim Preserve TblCols(4, II)
                    TblCols(0, II) = table_name
                    TblCols(1, II) = column_name
                    TblCols(2, II) = data_type
                    TblCols(3, II) = character_maximum_length
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

        ''' <summary>
        ''' LoadColInfo reads table_name, column_name, data_type, character_maximum_length
        ''' from INFORMATION_SCHEMA.COLUMNS based on the provided Table Name.
        ''' </summary>
        ''' <param name="TableName">The name of the table to retrieve column information about.</param>
        ''' <remarks></remarks>
        Sub LoadColInfo(Byref SecureID As Integer, ByVal TableName$)

            Dim S$ = ""
            S = S + " select table_name, column_name, data_type, character_maximum_length  "
            S = S + " from INFORMATION_SCHEMA.COLUMNS "
            S = S + " where table_name = '" + TableName + "' "
            S = S + " order by table_name, column_name"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim table_name$ = ""
            Dim column_name$ = ""
            Dim data_type$ = ""
            Dim character_maximum_length$ = ""

            If UBound(TblCols, 2) > 2 Then
                Return
            End If

            ReDim TblCols$(4, 0)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    table_name = RSData.GetValue(0).ToString
                    column_name = RSData.GetValue(1).ToString
                    data_type = RSData.GetValue(2).ToString
                    character_maximum_length = RSData.GetValue(3).ToString
                    II = UBound(TblCols, 2) + 1
                    ReDim Preserve TblCols(4, II)
                    TblCols(0, II) = table_name
                    TblCols(1, II) = column_name
                    TblCols(2, II) = data_type
                    TblCols(3, II) = character_maximum_length
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

        Sub Audit(Byref SecureID As Integer, ByVal sql$, ByVal UserID$)
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim s$ = sql.Trim

            Dim Tbl As String = GetTableNameFromSql(SecureID, sql)
            'Dim wc As String = GetWhereClauseFromSql(sql)
            Dim TypeStmt As String = GetTypeSqlStmt(SecureID, sql)

            Tbl = UCase(Tbl)

            sql$ = UTIL.RemoveSingleQuotes(sql$)
            Dim A$() = Split(sql, " ")

            gCurrUserGuidID = UserID

            Dim b As Boolean = AuditInsert(SecureID, Date.Today.ToString, gCurrUserGuidID, sql$, Tbl, TypeStmt, Now())

            If Not b Then
                Console.WriteLine("Audit Failed: " + sql)
            End If

        End Sub

        Public Function ckNull(Byref SecureID As Integer, ByVal tVal$) As String
            If tVal.Trim.Length = 0 Then
                Return "null"
            Else
                Return tVal
            End If
        End Function

        Public Function AuditInsert(Byref SecureID As Integer, ByVal ChangeID$, ByVal UserID$, ByVal Msg$, ByVal TableName$, ByVal TypeChange$, ByVal ChangeDate$) As Boolean
            Dim b As Boolean = False

            Dim S$ = ""
            S = S + " INSERT INTO audit("
            S = S + "UserID,"
            S = S + "SqlStmt,"
            S = S + "TableName,"
            S = S + "TypeChange,"
            S = S + "ChangeDate, ChangeID) values ("
            S = S + "'" + UserID + "'" + ","
            S = S + "'" + Msg$ + "'" + ","
            S = S + "'" + TableName + "'" + ","
            S = S + "'" + TypeChange + "'" + ","
            S = S + "'" + ChangeDate + "',"
            S = S + "'" + ChangeID$ + "'" + ")"

            b = ExecuteSqlNoAudit(SecureID, S)

            If Not b Then
                Console.WriteLine("Audit Failed: " + S)
            End If

            Return b

        End Function

    Sub Refactor(ByVal SecureID As Integer, ByVal NewOwnerID As String, ByVal OldOwnerID As String, ByRef RC As Boolean, ByRef RetMsg As String)

        Dim B As Boolean = False
        'Dim RefactorUserID As String = cbCurrentOwner.Text


        If NewOwnerID$.Trim.Length = 0 Then
            RetMsg = "A new owner must be selected..."
            RC = False
            Return
        End If

        If OldOwnerID$.Trim.Length = 0 Then
            RetMsg = "A current owner must be selected..."
            RC = False
            Return
        End If

        Dim elapsed_time As TimeSpan = Nothing
        Dim start_time As DateTime = Now

        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess NOCHECK CONSTRAINT LibraryOwnerUserID")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibDirectory NOCHECK CONSTRAINT RefLibrary124")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibEmail NOCHECK CONSTRAINT RefLibrary123")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess NOCHECK CONSTRAINT RefUserGroup64")

        '*****************************************************************
        changeOwnership(SecureID, "OwnerHistory", "Userid", NewOwnerID$, OldOwnerID$)
        changeOwnership(SecureID, "ArchiveFrom", "Userid", NewOwnerID$, OldOwnerID$)
        changeOwnership(SecureID, "ActiveDirUser", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ActiveSearchGuids", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ArchiveFrom", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ArchiveStats", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ContactFrom", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ContactsArchive", "UserID", NewOwnerID, OldOwnerID)
        'CoOwner	dbo	PreviousOwnerUserID
        'CoOwner	dbo	CurrentOwnerUserID
        changeOwnership(SecureID, "DataOwners", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DataOwners", "GroupOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DataOwners", "UserID", NewOwnerID, OldOwnerID)
        'DataSource	dbo	UserID
        changeOwnership(SecureID, "DataSource", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DataSourceCheckOut", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DataSourceCheckOut", "CheckedOutByUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DataSourceOwner", "UserID", NewOwnerID, OldOwnerID)
        'DataSourceRestoreHistory	dbo	DataSourceOwnerUserID
        'DataSourceRestoreHistory	dbo	RestoreUserID
        'DeleteFrom	dbo	UserID
        changeOwnership(SecureID, "DirArchLib", "DirOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DirArchLib", "LibOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "Directory", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DirectoryListener", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "DirectoryListenerFiles", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "Email", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailArchParms", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailAttachment", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailAttachmentSearchList", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailFolder", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailFolder_BAK", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailFolder_BAK2", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "EmailToDelete", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ExchangeHostPop", "Userid", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ExcludedFiles", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ExcludeFrom", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "FilesToDelete", "UserID", NewOwnerID, OldOwnerID)

        changeOwnership(SecureID, "Library", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "LibraryItems", "LibraryOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "LibraryItems", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "LibraryUsers", "LibraryOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "LibraryUsers", "UserID", NewOwnerID, OldOwnerID)

        changeOwnership(SecureID, "LibEmail", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "LibDirectory", "UserID", NewOwnerID, OldOwnerID)

        changeOwnership(SecureID, "GroupLibraryAccess", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "GroupLibraryAccess", "GroupOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "GroupUsers", "GroupOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "GroupUsers", "UserID", NewOwnerID, OldOwnerID)

        
        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess CHECK CONSTRAINT LibraryOwnerUserID")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibDirectory CHECK CONSTRAINT RefLibrary124")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibEmail CHECK CONSTRAINT RefLibrary123")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess CHECK CONSTRAINT RefUserGroup64")

        changeOwnership(SecureID, "HelpTextUser", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "IncludedFiles", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "IncludeImmediate", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "OutlookFrom", "UserID", NewOwnerID, OldOwnerID)
        '** The following do not seem appropriate to change as they are most likely MACHINE location dependent.
        changeOwnership(SecureID, "QuickDirectory", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "QuickRef", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "QuickRefItems", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "SourceAttribute", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "SubDir", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "SubLibrary", "UserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "SubLibrary", "SubUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "UserGroup", "GroupOwnerUserID", NewOwnerID, OldOwnerID)
        changeOwnership(SecureID, "ZippedFiles", "DataSourceOwnerUserID", NewOwnerID, OldOwnerID)

        '**********************************************************************************************
        Dim s As String = ""
        s = s + " INSERT INTO OwnerHistory("
        s = s + "PreviousOwnerUserID,"
        s = s + "CurrentOwnerUserID,"
        s = s + "CreateDate) values ("
        s = s + "'" + NewOwnerID + "'" + ","
        s = s + "'" + OldOwnerID + "'" + ","
        s = s + "'" + Now + "'" + ")"

        ExecuteSqlNewConn(SecureID, s)

        RC = True

    End Sub
    Private Function changeOwnership(ByVal SecureID As Integer, ByVal TBL As String, ByVal tgtCol As String, ByVal NewOwnerID As String, ByVal OldOwnerID As String) As String

        Dim S As String = "update " + TBL + " set " + tgtCol$ + " = '" + NewOwnerID$ + "' where " + tgtCol$ + " = '" + OldOwnerID$ + "'" + vbCrLf

        Me.ExecuteSqlNewConn(SecureID, S)

        Return S

    End Function

        Public Function AddNulls(Byref SecureID As Integer, ByVal S$) As String
            Dim i As Integer = 0
            Dim j As Integer = 0

            Do While InStr(S, ",,", CompareMethod.Text) > 0
                i = InStr(S, ",,", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 1)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, ",)", CompareMethod.Text) > 0
                i = InStr(S, ",)", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 1)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, "=)", CompareMethod.Text) > 0
                i = InStr(S, "=)", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 1)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, "= ,", CompareMethod.Text) > 0
                i = InStr(S, "= ,", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 2)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, "= )", CompareMethod.Text) > 0
                i = InStr(S, "= )", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 2)
                S = s1 + "null" + s2
            Loop
            Return S
        End Function

        Public Function AddNullsToUpdate(Byref SecureID As Integer, ByVal S$) As String
            Dim i As Integer = 0
            Dim j As Integer = 0

            Do While InStr(S, "= ,", CompareMethod.Text) > 0
                i = InStr(S, "= ,", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 2)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, "= )", CompareMethod.Text) > 0
                i = InStr(S, "= )", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 2)
                S = s1 + "null" + s2
            Loop

            Do While InStr(S, "=,", CompareMethod.Text) > 0
                i = InStr(S, "=,", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 1)
                S = s1 + "null" + s2
            Loop
            Do While InStr(S, "=)", CompareMethod.Text) > 0
                i = InStr(S, "=)", CompareMethod.Text)
                j = i + 1
                Dim s1 = Mid(S, 1, i)
                Dim s2 = Mid(S, i + 1)
                S = s1 + "null" + s2
            Loop

            Return S
        End Function

        Public Function ckDbConnection(Byref SecureID As Integer, ByVal From$) As Boolean
            Dim b As Boolean = False
            If dDebug Then LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ckDbConnection : 100 : " + gConn.ConnectionString)
            Dim CS as string = ""
            Try
                If gConn Is Nothing Then
                    If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 20 : " + gConn.ConnectionString)
                    Try
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 21 : " + gConn.ConnectionString)
                        gConn.ConnectionString = getConnStr(SecureID)
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 22 : " + gConn.ConnectionString)
                        gConn.Open()
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 23 : " + gConn.ConnectionString)
                        b = True
                    Catch ex As Exception
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 24 : " + gConn.ConnectionString)
                        Me.xTrace(SecureID, 28000, "ckDbConnection", "clsDatabase", ex)
                        b = False
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR From '" + From$ + "' clsDatabase : ckDbConnection : 243a : " + gConn.ConnectionString)
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 25 : " + gConn.ConnectionString)
                    End Try
                End If
                If gConn.State = Data.ConnectionState.Closed Then
                    If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 26 : " + gConn.ConnectionString)
                    Try
                        CS$ = getConnStr(SecureID)
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 27 : " + CS)
                        If CS = Nothing Then
                            CS = System.Configuration.ConfigurationManager.AppSettings("ECMREPO")
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 28 : " + CS)
                        End If
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 29 : " + CS)
                        If gConn.State = ConnectionState.Open Then
                            gConn.Close()
                        End If
                        gConn.ConnectionString = CS
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 30 : " + CS)
                        gConn.Open()
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 31 : " + CS)
                        b = True
                        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 32 : " + CS)
                    Catch ex As Exception
                        Try
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 33 : " + CS)
                            If gConn.State = ConnectionState.Open Then
                                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 34 : " + CS)
                                gConn.Close()
                                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 35 : " + CS)
                            End If
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 36 : " + CS)
                            CS = System.Configuration.ConfigurationManager.AppSettings("ECMREPO")
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 37 : " + CS)
                            If gConn.State = ConnectionState.Open Then
                                gConn.Close()
                            End If
                            gConn.ConnectionString = CS
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 38 : " + CS)
                            gConn.Open()
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 39 : " + CS)
                            Return True
                        Catch ex2 As Exception
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 40 : " + CS)
                            LogMessage(SecureID,gCurrUserGuidID, "ERROR From '" + From$ + " ' clsDatabase : ckDbConnection : 23e: " + ex.Message + vbCrLf + CS$)
                            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 40a : " + CS)
                        End Try
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR From '" + From$ + " ' clsDatabase : ckDbConnection : 23b: " + ex.Message + vbCrLf + CS$)
                        b = False
                        Dim ShowBox As Boolean = False
                        LogMessage(SecureID,gCurrUserGuidID, "The database connection failed at error marker 2301.23.34.1 : " + vbCrLf + ex.Message)
                    End Try
                Else
                    b = True
                End If
            Catch ex As Exception
                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 43 : " + CS)
                Me.xTrace(SecureID, 28002, "ckDbConnection", "clsDatabase", ex)
                b = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 313 : " + ex.Message)
            End Try
            If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckDbConnection : 44 : " + CS)
            Return b
        End Function

    'Public Sub setConnStr(SecureID)
    '    Dim S As String = ""
    '    S = System.Configuration.ConfigurationManager.AppSettings("ECMREPO")
    '    Dim bUseConfig As Boolean = True
    '    UTIL.setConnectionStringTimeout(S, TimeOutSecs)
    '    gConnStr = S
    'End Sub



        Public Sub setpW(Byref SecureID As Integer, ByVal tVal$)
            CurrUserPW = tVal
        End Sub

        Public Function GetConnection(Byref SecureID As Integer) As SqlConnection

            CkConn(SecureID)
            Return gConn
        End Function

        Public Function getSqlAdaptor(Byref SecureID As Integer, ByVal Sql$) As SqlDataAdapter
            CkConn(SecureID)
            Dim sSelect$ = Sql
            Dim da As New SqlDataAdapter(sSelect, gConn)
            'da.MissingSchemaAction = MissingSchemaAction.AddWithKey
            Dim cmd As New SqlCommandBuilder(da)
            Return da
        End Function

    Public Sub CkConn(ByRef SecureID As Integer)
        If gConn Is Nothing Then
            Try
                gConn = New SqlConnection
                gConn.ConnectionString = getConnStr(SecureID)
                gConn.Open()
            Catch ex As Exception
                'WDM Write to log
                Me.xTrace(SecureID, 29000, "CkConn", "clsDatabase", ex)
                If gClipBoardActive = True Then Console.WriteLine("Error 121.21")
                If gClipBoardActive = True Then Console.WriteLine(ex.Source)
                If gClipBoardActive = True Then Console.WriteLine(ex.StackTrace)
                If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : CkConn : 338 : " + ex.Message)
            End Try
        End If
        If gConn.State = Data.ConnectionState.Closed Then
            Try
                gConn.ConnectionString = getConnStr(SecureID)
                gConn.Open()
            Catch ex As Exception
                Me.xTrace(SecureID, 29001, "CkConn", "clsDatabase", ex)
                If gClipBoardActive = True Then Console.WriteLine("Error 121.21")
                If gClipBoardActive = True Then Console.WriteLine(ex.Source)
                If gClipBoardActive = True Then Console.WriteLine(ex.StackTrace)
                If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : CkConn : 348.1 : " + ex.Message)
            End Try
        End If
    End Sub

        Public Sub CloseConn(Byref SecureID As Integer)
            If gConn Is Nothing Then
            Else
                If gConn.State = ConnectionState.Open Then
                    gConn.Close()
                End If
                gConn.Dispose()
            End If
            GC.Collect()
        End Sub


        Public Sub ResetConn(Byref SecureID As Integer)
            If gConn Is Nothing Then
                Try
                    gConn.ConnectionString = getConnStr(SecureID)
                    gConn.Open()
                Catch ex As Exception
                    'WDM Write to log
                    Me.xTrace(SecureID, 29010, "ResetConn", "clsDatabase", ex)
                    If gClipBoardActive = True Then Console.WriteLine("Error 121.21")
                    If gClipBoardActive = True Then Console.WriteLine(ex.Source)
                    If gClipBoardActive = True Then Console.WriteLine(ex.StackTrace)
                    If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ResetConn : 378 : " + ex.Message)
                End Try
            Else
                If gConn.State = Data.ConnectionState.Open Then
                    gConn.Close()
                End If
                Try
                    gConn.ConnectionString = getConnStr(SecureID)
                    gConn.Open()
                Catch ex As Exception
                    'WDM Write to log
                    Me.xTrace(SecureID, 29020, "ResetConn", "clsDatabase", ex)
                    If gClipBoardActive = True Then Console.WriteLine("Error 121.21")
                    If gClipBoardActive = True Then Console.WriteLine(ex.Source)
                    If gClipBoardActive = True Then Console.WriteLine(ex.StackTrace)
                    If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ResetConn : 390 : " + ex.Message)
                End Try
            End If
            If gConn.State = Data.ConnectionState.Closed Then
                Try
                    gConn.ConnectionString = getConnStr(SecureID)
                    gConn.Open()
                Catch ex As Exception
                    'WDM Write to log
                    Me.xTrace(SecureID, 29021, "ResetConn", "clsDatabase", ex)
                    If gClipBoardActive = True Then Console.WriteLine("Error 121.21")
                    If gClipBoardActive = True Then Console.WriteLine(ex.Source)
                    If gClipBoardActive = True Then Console.WriteLine(ex.StackTrace)
                    If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ResetConn : 400 : " + ex.Message)
                End Try
            End If
        End Sub

        Public Function iExecCountStmt(Byref SecureID As Integer, ByVal S As String) As Integer

            Dim tQuery As String = ""
            Dim s1 As String = ""
            Dim s2 As String = ""
            Dim s3 As String = ""

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim wc$ = ""

            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open()
                    Dim command As New SqlCommand(S, CONN)
                    RSData = command.ExecuteReader()

                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                Me.xTrace(SecureID, 30021, "iExecCountStmt", "clsDatabase", ex)
                cnt = -1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iExecCountStmt : 100 : " + ex.Message)
            End Try

            Return cnt

        End Function

        Public Function iGetRowCount(Byref SecureID As Integer, ByVal S As String) As Integer

            Dim tQuery As String = ""
            Dim s1 As String = ""
            Dim s2 As String = ""
            Dim s3 As String = ""
            Dim queryString As String = S

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim i As Integer
            Dim cnt As Integer = -1
            Dim wc$ = ""

            i = InStr(S, "order by", CompareMethod.Text)
            If i > 0 Then
                S = Mid(S, 1, i - 1)
            End If
            i = InStr(S, " WHERE", CompareMethod.Text)
            If i > 0 Then
                wc$ = Mid(S, i)
            End If
            i = InStr(S, "select", CompareMethod.Text)
            If i > 0 Then
                s1 = "Select count(*) as CNT from"
                i = InStr(S, " from", CompareMethod.Text)
                If i > 0 Then
                    s2 = Mid(S, i + 5)
                    s2 = Trim(s2)
                    i = InStr(1, s2, " ")
                    If i > 0 Then
                        s2 = Mid(s2, 1, i)
                        s2 = Trim(s2)
                    End If
                Else
                    Return -1
                End If
            Else
                Return -1
            End If

            S = s1 + " " + s2 + wc
            Try
                Using gConn
                    'Console.WriteLine(gConnStr)

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN)
                    RSData = command.ExecuteReader()
                    ' Call Read before accessing data.
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    'Dim ss As String = ""
                    'ss = RSData.GetValue(0).ToString
                    'cnt = RSData.Item(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                'WDM Write to log
                Me.xTrace(SecureID, 30021, "iGetRowCount", "clsDatabase", ex)
                cnt = -1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iGetRowCount : 449 : " + ex.Message)
            End Try

            Return cnt

        End Function

        Public Function iDataExist(Byref SecureID As Integer, ByVal S As String) As Integer

            Dim tQuery As String = ""
            Dim s1 As String = ""
            Dim s2 As String = ""
            Dim s3 As String = ""
            Dim queryString As String = S

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = 0

            Using gConn
                'Console.WriteLine(gConnStr)



                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

                ' Call Read before accessing data.
                RSData.Read()
                cnt = RSData.GetInt32(0)
                'Dim ss As String = ""
                'ss = RSData.GetValue(0).ToString
                'cnt = RSData.Item(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function iGetMaxRowNbrFromXml(Byref SecureID As Integer) As Integer

            Dim tQuery As String = ""
            Dim s1 As String = ""
            Dim s2 As String = ""
            Dim s3 As String = ""
            Dim S$ = " select max(RowNbr) from InitialLoadData"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = 1

            Using gConn
                'Console.WriteLine(gConnStr)

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                ' Call Read before accessing data.
                RSData.Read()
                cnt = RSData.GetInt32(0)
                'Dim ss As String = ""
                'ss = RSData.GetValue(0).ToString
                'cnt = RSData.Item(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function getOneVal(Byref SecureID As Integer, ByVal S As String) As String

            Dim tVal As String = S

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                tVal = RSData.GetValue(0).ToString
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return tVal

        End Function

        Public Function xckEmailExists(Byref SecureID As Integer, ByVal SenderEmailAddress As String, _
        ByVal ReceivedByName As String, ByVal ReceivedTime As String, ByVal SenderName As String, ByVal SentOn As String) As Boolean
            Dim tQuery As String = ""
            Dim S As String = ""

            S = S + " SELECT [SenderEmailAddress]     "
            S = S + " ,[ReceivedByName]"
            S = S + " ,[ReceivedTime]     "
            S = S + " ,[SenderName]"
            S = S + " ,[SentOn]"
            S = S + " FROM  [Email]"
            S = S + " where [UserID] = '" + gCurrUserGuidID + "'"
            S = S + " and [SenderEmailAddress] = 'XXX'"
            S = S + " and [ReceivedByName] = 'XXX'"
            S = S + " and [ReceivedTime] = '2008-01-10 12:22:06.000'"
            S = S + " and [SenderName] = 'XXX'"
            S = S + " and [SentOn] = '2008-01-10 12:19:14.000'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            If cnt > 0 Then
                Return True
            Else
                Return False
            End If
        End Function

        Public Function ckEmailGuidExists(Byref SecureID As Integer, ByVal EmailGuid As String) As Integer

            Dim S As String = ""
            S = S + " SELECT count(*) from Email where EmailGuid = '" + EmailGuid + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function

        Public Function ckContentGuidExists(Byref SecureID As Integer, ByVal SourceGuid As String) As Integer

            Dim S As String = ""
            S = S + " SELECT count(*) from DataSource where SourceGuid = '" + SourceGuid + "'"
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function

        Public Function getSourceDatatypeByGuid(Byref SecureID As Integer, ByVal SourceGuid As String) As Integer

            Dim S As String = ""
            S = S + " SELECT[SourceTypeCode] from DataSource where SourceGuid = '" + SourceGuid + "'"
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim tVal$ = ""
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                tVal$ = RSData.GetValue(0).ToString
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
                GC.Collect()
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return tVal$
        End Function

        Public Sub IncrementNextID(Byref SecureID As Integer)
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim S$ = "update [NextIdNbr] set IdNbr = IdNbr + 1 "
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
        End Sub

        Public Function SetFolderAsActive(Byref SecureID As Integer, ByVal FolderName$, ByVal sAction$) As Boolean
            Dim SS As String = " "
            SS = "update  [EmailFolder] set [SelectedForArchive] = '" + sAction$ + "' where FolderName = '" + FolderName$ + "'"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, SS)
            Return b
        End Function

        Public Function getNextID(Byref SecureID As Integer) As Integer
            Dim tQuery As String = ""
            Dim S As String = "Select max([IdNbr]) FROM [NextIdNbr] "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                cnt = cnt + 1
            End Using

            Return cnt

        End Function

        Public Sub SetUserDefaultNotifications(Byref SecureID As Integer, ByVal UserID$)
            Dim S$ = "INSERT INTO [OwnerNotifications]"
            S = S + " ([OwnerNotificationID]"
            S = S + " ,[NotifyText]"
            S = S + " ,[NotifyType]"
            S = S + " ,[ImportanceLevel]"
            S = S + " ,[CreateDate]"
            S = S + " , [ExpireDate]"
            S = S + " ,[ResponseRequired]"
            S = S + " ,[OwnerNotificationDate]"
            S = S + " ,[EnteredById]"
            S = S + " )"
            S = S + " VALUES "
            S = S + " ('" + UserID + "'"
            S = S + " ,'Please Setup your account'"
            S = S + " ,'O'"
            S = S + " ,'H'"
            S = S + " ,getdate()"
            S = S + " ,getdate() + 360"
            S = S + " ,'Y'"
            S = S + " ,getdate()"
            S = S + " ,'AutoUpdate')"

            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S)

        End Sub

        Public Function CountUserEntries(Byref SecureID As Integer) As Integer
            Dim tQuery As String = ""
            Dim S As String = "Select count(*) from UserData "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function getGlobalSeachCnt(Byref SecureID As Integer, ByVal UID As String) As Integer
            Dim tQuery As String = ""
            Dim S As String = "Select count(*) FROM [GlobalSeachResults] where userid = '" + UID + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Sub ckUserInfoData(Byref SecureID As Integer)

            Dim tQuery As String = ""
            Dim S As String = "Select count(*) from UserData where UserID = '" + gCurrUserGuidID + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using
            If cnt < 100 Then
                For i As Integer = 100 To 705
                    Dim tUid$ = "PP" + Str(i).Trim
                    If i = 700 Then
                        tUid = "PPADMIN"
                    End If
                    If i = 701 Then
                        tUid = "PPDEV"
                    End If
                    Dim S1$ = "Select count(*) from UserData where UserID = '" + tUid + "'"
                    Dim k As Integer = SelCount(SecureID, S1)
                    If k = 0 Then
                        S1 = "INSERT INTO Userdata"
                        S1 = S1 + " (UserID"
                        S1 = S1 + " ,UserPW"
                        S1 = S1 + " ,ExpireDate"
                        S1 = S1 + " ,UserLevel"
                        S1 = S1 + " ,UserClassification"
                        S1 = S1 + " ,CreateDate"
                        S1 = S1 + " ,UserName"
                        S1 = S1 + " ,UserEmail"
                        S1 = S1 + " ,SecurityQuestion"
                        S1 = S1 + " ,SecurityAnswer"
                        S1 = S1 + " ,EmergencyPhoneNbr)"
                        S1 = S1 + " VALUES "
                        S1 = S1 + " ('" + tUid + "'"

                        If tUid.Equals("PP621") Or tUid.Equals("PPADMIN") Or tUid.Equals("PPDEV") Then
                            S1 = S1 + " ,'junebug'"
                        Else
                            S1 = S1 + " ,'password'"
                        End If
                        S1 = S1 + " ,getdate() + 720"

                        If tUid.Equals("PP621") Or tUid.Equals("PPADMIN") Or tUid.Equals("PPDEV") Then
                            S1 = S1 + " ,'" + "A" + "'"
                        Else
                            S1 = S1 + " ,'" + "U" + "'"
                        End If

                        S1 = S1 + " ,'" + "O" + "'"

                        S1 = S1 + " ,'" + Now + "'"
                        S1 = S1 + " ,'Owner Name'"
                        S1 = S1 + " ,'" + tUid + ".PassagePoint.org" + "'"
                        S1 = S1 + " ,'" + "You need to set this up." + "'"
                        S1 = S1 + " ,'" + "You need to set this up." + "'"
                        S1 = S1 + " ,'" + "555-555-1212" + "')"
                        Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S1, False)
                        If b Then
                            SetUserDefaultNotifications(SecureID, tUid)
                        End If
                    End If
                Next
            End If
        End Sub

        Public Function SelCount(Byref SecureID As Integer, ByVal S As String) As Integer

            Dim tQuery As String = ""
            Dim s1 As String = ""
            Dim s2 As String = ""
            Dim s3 As String = ""
            Dim queryString As String = S

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function ckAdminUser(Byref SecureID As Integer, ByVal Userid$, ByVal PW$) As Boolean
            Dim b As Boolean = True
            Dim S As String = "Select userid from dco.<SchemaName>.admin_user where userid = '" + Userid + "' and password = '" + PW + "'"
            S = "Select userid from ADMIN_USER where userid = '" + Userid + "' and password = '" + PW + "'"
            Dim i As Integer = 0

            Dim rsData As SqlDataReader

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
            If rsData.HasRows Then
                b = True
            Else
                b = False
            End If
            rsData.Close()
            rsData = Nothing
            Return b
        End Function

        Public Function getAdminUserId(Byref SecureID As Integer, ByVal Userid$, ByVal PW$) As String
        Dim b As Boolean = True
        Dim S As String = "Select useridnbr from admin_user where userid = '" + Userid + "' and password = '" + PW + "'"
        S = "Select useridnbr from ADMIN_USER where userid = '" + Userid + "' and password = '" + PW + "'"
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function

        Public Function getDocCatIdByName(Byref SecureID As Integer, ByVal CatName$) As String
        Dim b As Boolean = True
        Dim S$ = "Select CategoryID  FROM DocumentCategories  where CategoryName = '" + CatName + "' "
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function

        Public Function getUserNameByID(Byref SecureID As Integer, ByVal Userid$) As String
        Dim b As Boolean = True
        Dim S$ = "Select UserName FROM Users where UserID = '" + Userid$ + "' "
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function
        Public Function getUserLoginByUserid(Byref SecureID As Integer, ByVal Userid$) As String
        Dim b As Boolean = True
        Dim S$ = "Select UserLoginID FROM Users where UserID = '" + Userid$ + "' "
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function
        Public Sub AddProfileFileTypes(Byref SecureID As Integer, ByVal ProfileName$, ByVal LB As ListBox)
        Dim rsData As SqlDataReader = Nothing
        Try
        Dim b As Boolean = True
        Dim S$ = "Select [SourceTypeCode] FROM  [LoadProfileItem] where ProfileName = '" + ProfileName$ + "' order by [SourceTypeCode]"
        Dim i As Integer = 0
        Dim FileType$ = ""
        Dim II As Integer = 0
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        Do While rsData.Read()
        b = True
        FileType = rsData.GetValue(0).ToString
        For II = 0 To LB.Items.Count - 1
        Dim tStr$ = LB.Items(II).ToString
        If tStr = FileType Then
        b = False
        Exit For
        End If
        Next
        If b = True Then
        LB.Items.Add(FileType)
        End If
        Loop
        End If
        Catch ex As Exception
        'WDM Write to log
        Me.xTrace(SecureID, 30021, "AddProfileFileTypes", "clsDatabase", ex)
        If gRunUnattended = False Then MsgBox("ERROR AddProfileFileTypes: " + ex.Message)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : AddProfileFileTypes : 816 : " + ex.Message)
        End Try

        rsData.Close()
        rsData = Nothing

        End Sub
        Public Sub GetSkipWords(Byref SecureID As Integer, ByRef A As ArrayList)
        Dim rsData As SqlDataReader = Nothing
        Try
        Dim b As Boolean = True
        Dim S$ = "Select [tgtWord] FROM [SkipWords] order by [tgtWord]"
        Dim i As Integer = 0
        Dim SkipWord$ = ""
        Dim II As Integer = 0
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        Do While rsData.Read()
        b = True
        SkipWord = rsData.GetValue(0).ToString.ToUpper
        A.Add(SkipWord)
        Loop
        End If
        Catch ex As Exception
        'WDM Write to log
        Me.xTrace(SecureID, 30021, "GetSkipWords", "clsDatabase", ex)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetSkipWords : 100 : " + ex.Message)
        End Try

        rsData.Close()
        rsData = Nothing

        End Sub
        Public Function getDeviceIDByVal(Byref SecureID As Integer, ByVal InventoryNo$) As String
        Dim b As Boolean = True
        Dim S As String = "Select DEVICEID FROM INVENTORY WHERE INVENTORYNO = " + InventoryNo
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function

        Public Function getPhotoTitle(Byref SecureID As Integer, ByRef PhotoID As Integer, ByRef pTitle$) As String
        Dim b As Boolean = True
        Dim S As String = "Select Caption, PhotoID from photos "
        Dim i As Integer = 0
        Dim tempTitle$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        Do While rsData.Read
        If i = PhotoID Then
        PhotoID = rsData.GetInt32(1)
        pTitle = rsData.GetValue(0).ToString
        Exit Do
        End If
        i = i + 1
        Loop
        tempTitle = pTitle
        Else
        tempTitle = "No Photo Found"
        End If
        rsData.Close()
        rsData = Nothing
        Return tempTitle
        End Function

        Public Function getPhotoTitle(Byref SecureID As Integer, ByRef PhotoID As Integer) As String
        Dim b As Boolean = True
        Dim S As String = "Select Caption from photos where PhotoID = " & PhotoID
        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(1).ToString
        Else
        id = "No Photo Found"
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function

        Public Function getContactID(Byref SecureID As Integer, ByVal FirstName$, ByVal LastName$) As String
        Dim b As Boolean = True
        Dim SS$ = "Select ContactID FROM Contacts "
        SS = SS + " where NameFirst = '" + FirstName$ + "' "
        SS = SS + " 	and NameLast = '" + LastName$ + "'"

        Dim i As Integer = 0
        Dim id$ = ""

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(SS, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        id = rsData.GetValue(0).ToString
        Else
        id = ""
        End If
        rsData.Close()
        rsData = Nothing
        Return id
        End Function

        Public Function RecordExists(Byref SecureID As Integer, ByVal Tbl$, ByVal WhereVar$, ByVal CompareVal$) As Boolean
        Dim b As Boolean = True
        Dim SQL As String = "Select * from " + Tbl + " where " + WhereVar + " = '" + CompareVal$ + "'"
        Dim i As Integer = 0

        i = iGetRowCount(SecureID, SQL)
        If i = 0 Then
        b = False
        End If
        Return b
        End Function

        Public Function getNextKey(Byref SecureID As Integer, ByVal TBL$, ByVal tCol$) As String

        CloseConn(SecureID)
        CkConn(SecureID)
        Dim tQuery As String = ""
        Dim s1 As String = ""
        Dim s2 As String = ""
        Dim s3 As String = ""
        Dim S As String = "Select max(" + tCol + ") + 1 from " + TBL
        Dim d As String = ""

        'Dim cnt As Double = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Try
        'rsData = SqlQry(sql, rsData)
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        d = rsData.GetValue(0).ToString
        If Len(d) = 0 Then
        d = "0"
        End If
        'Dim ss As String = ""
        'ss = rsData.GetValue(0).ToString
        'cnt = rsData.Item(0)
        rsData.Close()
        'End Using
        Catch ex As Exception
        'WDM Write to log
        xTrace(SecureID, 10101, "Error 99.23.1x - " + S, "getNextKey", ex)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getNextKey : 908 : " + ex.Message)
        End Try

        Return d
        End Function

        Public Function getNextKey(Byref SecureID As Integer, ByVal TBL$, ByVal tCol$, ByVal SQL$) As String

        Dim tQuery As String = ""
        Dim s1 As String = ""
        Dim s2 As String = ""
        Dim s3 As String = ""
        'Dim sql As String = "Select max(" + tCol + ") + 1 from " + TBL
        Dim d As String = ""

        'Dim cnt As Double = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False

        b = SqlQry(SecureID, SQL, rsData)

        rsData.Read()
        d = rsData.GetValue(0).ToString

        rsData.Close()

        Return d
        End Function

        Public Function getKeyByLookupCol(Byref SecureID As Integer, ByVal TBL$, ByVal kCol$, ByVal tCol$, ByVal LookUpVal$) As String

        Dim tQuery As String = ""
        Dim s1 As String = ""
        Dim s2 As String = ""
        Dim s3 As String = ""
        Dim sql As String = "Select " + kCol + " from " + TBL + " where " + tCol + " = '" + LookUpVal + "'"
        Dim d As String = ""

        'Dim cnt As Double = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False

        b = SqlQry(SecureID, sql, rsData)

        If rsData.HasRows Then
        rsData.Read()
        d = rsData.GetValue(0).ToString
        Else
        d = ""
        End If
        rsData.Close()
        'End Using
        Return d
        End Function

        Public Function getKeyByLookupCol(Byref SecureID As Integer, ByVal TBL$, ByVal kCol$, ByVal tCol$, ByVal LookUpVal As Integer) As String

        Dim tQuery As String = ""
        Dim s1 As String = ""
        Dim s2 As String = ""
        Dim s3 As String = ""
        Dim sql As String = "Select " + kCol + " from " + TBL + " where " + tCol + " = " + LookUpVal
        Dim d As String = ""

        'Dim cnt As Double = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        b = SqlQry(SecureID, sql, rsData)
        If rsData.HasRows Then
        rsData.Read()
        d = rsData.GetValue(0).ToString
        Else
        d = ""
        End If
        rsData.Close()
        'End Using
        Return d
        End Function

        Public Function ValidateUserByUid(Byref SecureID As Integer, ByVal uid As String, ByVal EncryptedPW As String) As Integer

        Dim S As String = "Select count(*) as CNT from Userdata where UserID = '" + uid + "' and UserPW = '" + EncryptedPW + "'"
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        RSData.Read()
        i = RSData.GetInt32(0)
        'Dim ss As String = ""
        'ss = RSData.GetValue(0).ToString
        'cnt = RSData.Item(0)
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateUserByUid : 965 : " + ex.Message)
        End Try

        End Using
        Return i
        End Function
        Public Function ValidateContentOwnership(Byref SecureID As Integer, ByVal tgtGuid$, ByVal contentTypeCode As String) As Boolean

        Dim S As String = ""
        Dim uid As String = gCurrUserGuidID

        If contentTypeCode.ToUpper.Equals(".MSG") Then
        S = "Select count(*) as CNT from EMAIL where Emailguid = '" + tgtGuid$ + "' and UserID = '" + uid + "' "
        Else
        S = "Select count(*) as CNT from DataSource where SourceGuid = '" + tgtGuid$ + "' and DataSourceOwnerUserID = '" + uid + "' "
        End If

        Dim isOwner As Boolean = False
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        RSData.Read()
        i = RSData.GetInt32(0)
        'Dim ss As String = ""
        'ss = RSData.GetValue(0).ToString
        'cnt = RSData.Item(0)
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        If i > 0 Then
        isOwner = True
        Else
        isOwner = False
        End If
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateContentOwnership : 100 : " + ex.Message)
        isOwner = False
        End Try

        End Using
        Return isOwner
        End Function

        Public Function ValidateCoOwnerByVal(Byref SecureID As Integer, ByVal OwnerGuid$) As Boolean

        Dim S As String = "Select count(*) from CoOwner where PreviousOwnerUserID = '" + OwnerGuid$ + "' and CurrentOwnerUserID = '" + gCurrUserGuidID + "'"
        Dim uid As String = gCurrUserGuidID

        'If contentTypeCode.ToUpper.Equals(".MSG") Then
        '    S = "Select count(*) as from EMAIL where Emailguid = '" + tgtGuid$ + "' and UserID = '" + uid + "' "
        'Else
        '    S = "Select count(*) as from DataSource where SourceGuid = '" + tgtGuid$ + "' and DataSourceOwnerUserID = '" + uid + "' "
        'End If

        Dim isCoOwner As Boolean = False
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        RSData.Read()
        i = RSData.GetInt32(0)
        'Dim ss As String = ""
        'ss = RSData.GetValue(0).ToString
        'cnt = RSData.Item(0)
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        If i > 0 Then
        isCoOwner = True
        Else
        isCoOwner = False
        End If
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateContentOwnership : 100 : " + ex.Message)
        isCoOwner = False
        End Try

        End Using
        Return isCoOwner
        End Function
        Public Function ValidateCoOwnerOfContent(Byref SecureID As Integer, ByVal ContentGuid$, ByVal ContentType$) As Boolean

        Dim OwnerGuid$ = getContentOwnerGuid(SecureID, ContentGuid$, ContentType$)

        If OwnerGuid$.Trim.Length = 0 Then
        Return False
        End If

        Dim S As String = "Select count(*) from CoOwner where PreviousOwnerUserID = '" + OwnerGuid$ + "' and CurrentOwnerUserID = '" + gCurrUserGuidID + "'"
        Dim uid As String = gCurrUserGuidID

        Dim isCoOwner As Boolean = False
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        RSData.Read()
        i = RSData.GetInt32(0)
        'Dim ss As String = ""
        'ss = RSData.GetValue(0).ToString
        'cnt = RSData.Item(0)
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        If i > 0 Then
        isCoOwner = True
        Else
        isCoOwner = False
        End If
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateContentOwnership : 100 : " + ex.Message)
        isCoOwner = False
        End Try

        End Using
        Return isCoOwner
        End Function
        Public Function getContentOwnerGuid(Byref SecureID As Integer, ByVal tgtGuid$, ByVal contentTypeCode As String) As String

        Dim S As String = ""
        Dim OwnerGuid As String = ""

        If contentTypeCode.ToUpper.Equals(".MSG") Then
        S = "Select Userid from EMAIL where Emailguid = '" + tgtGuid$ + "'"
        Else
        S = "Select DataSourceOwnerUserID from DataSource where SourceGuid = '" + tgtGuid$ + "' "
        End If

        Dim isOwner As Boolean = False
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        If RSData.HasRows Then
        RSData.Read()
        OwnerGuid = RSData.GetValue(0).ToString
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Else
        OwnerGuid = ""
        End If
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateContentOwnership : 100 : " + ex.Message)
        End Try
        End Using
        Return OwnerGuid
        End Function
        Public Function ValidateUserId(Byref SecureID As Integer, ByVal uid As String) As Integer

        Dim S As String = "Select count(*) as CNT from Userdata where UserID = '" + uid + "'"
        Dim i As Integer = -1

        Using gConn

        Dim RSData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
        ' Call Read before accessing data.
        RSData.Read()
        i = RSData.GetInt32(0)
        'Dim ss As String = ""
        'ss = RSData.GetValue(0).ToString
        'cnt = RSData.Item(0)
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Catch ex As Exception
        'WDM Write to log
        i = 0
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ValidateUserId : 980 : " + ex.Message)
        End Try

        End Using
        Return i
        End Function

        Public Function getAuthority(Byref SecureID As Integer, ByVal uid As String) As String
        If uid = Nothing Then
        '"Error","User id has not been set...")
        Return ""
        End If
        Dim S As String = ""
        S = S + " Select Admin "
        S = S + " FROM Users "
        S = S + " where UserID = '" + uid + "'"
        Dim Auth$ = ""
        Dim queryString As String = S

        CloseConn(SecureID)
        CkConn(SecureID)

        Dim cnt As Integer = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(S, CONN)
        rsData = command.ExecuteReader()

        rsData.Read()
        Auth = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Dim AuthDesc As String = "User"
        If Auth.ToUpper.Equals("A") Then
        AuthDesc = "Admin"
        End If
        If Auth.ToUpper.Equals("G") Then
        AuthDesc = "Global Searcher"
        End If
        If Auth.ToUpper.Equals("S") Then
        AuthDesc = "Super Admin"
        End If

        Return AuthDesc

        Return Auth

        End Function

        Public Function getPhotoExt(Byref SecureID As Integer, ByVal pid As String) As String
        If pid = Nothing Then
        '"Error","User id has not been set...")
        Return ""
        End If
        Dim S As String = ""
        S = S + " Select [PhotoFqn]"
        S = S + " FROM Photos "
        S = S + " where PhotoID = '" + pid + "'"
        Dim Auth$ = ""
        Dim queryString As String = S

        CloseConn(SecureID)
        CkConn(SecureID)

        Dim cnt As Integer = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        Auth = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing

        Return Auth

        End Function

        Public Function getPhotoImgType(Byref SecureID As Integer, ByVal pid As String) As String
        If pid = Nothing Then
        '"Error","User id has not been set...")
        Return ""
        End If
        Dim S As String = ""
        S = S + " Select ImgType "
        S = S + " FROM Photos "
        S = S + " where PhotoID = '" + pid + "'"
        Dim Auth$ = ""
        Dim queryString As String = S

        CloseConn(SecureID)
        CkConn(SecureID)

        Dim cnt As Integer = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        Auth = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing

        Return Auth

        End Function

        Public Function getUserType(Byref SecureID As Integer, ByVal uid As String) As String

        Dim S As String = ""
        S = S + " Select [UserID]"
        S = S + " ,[UserPW]"
        S = S + " ,[ExpireDate]"
        S = S + " ,[UserLevel]"
        S = S + " ,[UserNbr]"
        S = S + " ,[UserClassification]"
        S = S + " ,[CreateDate]"
        S = S + " FROM Userdata"
        S = S + " where UserID = '" + uid + "'"
        Dim Auth$ = ""
        Dim queryString As String = S

        CloseConn(SecureID)
        CkConn(SecureID)

        Dim cnt As Integer = -1

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        Auth = rsData.GetValue(5).ToString
        rsData.Close()
        rsData = Nothing

        Return Auth.Trim

        End Function
        Public Function getSourceCrc(Byref SecureID As Integer, ByVal SourceGuid$, ByVal SourceType$) As String

        Try
        Dim S As String = ""
        If SourceType.Equals("EMAIL") Then
        S = "Select CRC from email where EmailGuid = '" + SourceGuid$ + "'"
        Else
        S = "Select AttributeValue from SourceAttribute where SourceGuid = '" + SourceGuid$ + "' AND AttributeName = 'CRC'"
        End If
        Dim CRC$ = ""
        Dim queryString As String = S
        CloseConn(SecureID)
        CkConn(SecureID)
        Dim cnt As Integer = -1
        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        CRC$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Return CRC$.Trim
        Catch ex As Exception
        Return ""
        End Try
        End Function

        Public Function getSourceLength(Byref SecureID As Integer, ByVal SourceGuid$, ByVal SourceType$) As Integer

        Try
        Dim S As String = ""
        If SourceType.Equals("EMAIL") Then
        S = "Select MsgSize from Email where EmailGuid = '" + SourceGuid$ + "'"
        Else
        S = "Select FileLength from DataSource where SourceGuid = '" + SourceGuid$ + "'"
        End If
        Dim CRC$ = ""
        Dim queryString As String = S
        CloseConn(SecureID)
        CkConn(SecureID)
        Dim cnt As Integer = -1
        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        rsData.Read()
        CRC$ = rsData.GetInt32(0)
        rsData.Close()
        rsData = Nothing
        Return CRC$.Trim
        Catch ex As Exception
        Return ""
        End Try
        End Function

        Public Function SqlQry(Byref SecureID As Integer, ByVal sql As String, ByRef rsData As SqlDataReader) As Boolean


        If dDebug Then
        LogMessage(SecureID,gCurrUserGuidID, "____________________________________________")
        LogMessage(SecureID,gCurrUserGuidID, "Started: " + Now)
        LogMessage(SecureID,gCurrUserGuidID, sql)

        Console.WriteLine("____________________________________________")
        Console.WriteLine("Started: " + Now)
        Console.WriteLine(sql)
        End If

        Dim CMDX As New SqlCommand

        Dim queryString As String = sql
        Dim rc As Boolean = False

        rsData = Nothing

        If gConn.State = Data.ConnectionState.Open Then
        gConn.Close()
        End If

        CloseConn(SecureID)
        CkConn(SecureID)

        If dDebug Then Console.WriteLine("SQLQRY Started: " + Now)
        If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "SQLQRY Started: " + Now)

        Try
        'Dim CMDX As New SqlCommand(sql, gConn)
        CMDX.Connection = gConn
        CMDX.ExecuteReader()

        rsData = CMDX.ExecuteReader()
        CMDX.Dispose()
        CMDX = Nothing
        Return True
        Catch ex As Exception
        Me.xTrace(SecureID, 31001, "SqlQry", "clsDatabase", ex)
        'WDM Write to log
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQry : 1085 : " + ex.Message)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQry : 1021 : " + ex.Message)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQry : 1022 : " + ex.Message)
        Return False
        End Try
        End Function

        Public Function NewID(Byref SecureID As Integer, ByVal Tbl$, ByVal idCol$) As Integer
        Dim s$ = ""
        s = "Select max(" + idCol + ")+1 from " + Tbl
        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr As Integer = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Return Val(iStr)
        Else
        rsData.Close()
        rsData = Nothing
        Return 0
        End If

        End Function

        Public Function getMaxPhotoID(Byref SecureID As Integer) As String
        Dim s$ = ""
        s = "Select max(photoid) from photos "
        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Return iStr
        Else
        rsData.Close()
        rsData = Nothing
        Return "0"
        End If

        End Function

        Public Function getPhotoIDBycaption(Byref SecureID As Integer, ByVal Caption$) As String
        Dim s$ = ""
        s = "Select photoid from photos where caption = '" + Caption + "'"
        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Return iStr
        Else
        rsData.Close()
        rsData = Nothing
        Return "0"
        End If

        End Function

        Public Function getUserPW(Byref SecureID As Integer, ByVal UID$) As String
        Dim s$ = ""
        s = "Select UserPW from userdata where userid = '" + UID + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        iStr$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Else
        rsData.Close()
        rsData = Nothing
        End If
        Return iStr.Trim
        End Function

        Public Function getFqnFromGuid(Byref SecureID As Integer, ByVal SourceGuid$) As String
        Dim s$ = ""
        s = "Select FQN FROM DataSource Where SourceGuid = '" + SourceGuid + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""

        Dim CS as string = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(s, CONN)
        rsData = command.ExecuteReader()

        If rsData.HasRows Then
        rsData.Read()
        iStr$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Else
        rsData.Close()
        rsData = Nothing
        End If

        If Not rsData.IsClosed Then
        rsData.Close()
        End If
        rsData = Nothing
        command.Dispose()
        command = Nothing

        If CONN.State = ConnectionState.Open Then
        CONN.Close()
        End If
        CONN.Dispose()

        Return iStr.Trim
        End Function

        Public Function getFilenameByGuid(Byref SecureID As Integer, ByVal SourceGuid$) As String
        Dim s$ = ""
        s = "Select SourceName FROM DataSource Where SourceGuid = '" + SourceGuid + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        iStr$ = rsData.GetValue(0).ToString
        rsData.Close()
        rsData = Nothing
        Else
        rsData.Close()
        rsData = Nothing
        End If
        Return iStr.Trim
        End Function

    Public Function getUserGuidID(Byref SecureID As Integer, ByVal UserLoginId$) As String
        Dim s$ = ""
        s = "Select [UserID] FROM  [Users] Where UserLoginID = '" + UserLoginId$ + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""

        Dim CS as string = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(s, CONN)
        rsData = command.ExecuteReader()

        If rsData.HasRows Then
            rsData.Read()
            iStr$ = rsData.GetValue(0).ToString
            rsData.Close()
            rsData = Nothing
        Else
            rsData.Close()
            rsData = Nothing
        End If
        Return iStr.Trim
    End Function

    Public Function getQuickRefIdNbr(Byref SecureID As Integer, ByVal QuickRefName$, ByVal UserGuidID As String) As String
        Dim s$ = ""
        s = "Select  [QuickRefIdNbr] FROM [QuickRef] where QuickRefName = '" + QuickRefName$ + "' and UserID = '" + UserGuidID$ + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
            rsData.Read()
            iStr$ = rsData.GetValue(0).ToString
            rsData.Close()
            rsData = Nothing
        Else
            iStr$ = "-1"
            rsData.Close()
            rsData = Nothing
        End If
        Return iStr.Trim
    End Function

    Public Function getNextDocID(Byref SecureID As Integer) As String

        Dim s$ = ""
        s = "Select max (DocumentID) FROM [Documents]"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
            rsData.Read()
            iStr$ = rsData.GetValue(0).ToString
            rsData.Close()
            rsData = Nothing
        Else
            rsData.Close()
            rsData = Nothing
        End If
        Return iStr.Trim

    End Function

    Public Function getDocIdByFqn(Byref SecureID As Integer, ByVal FQN$) As String
        FQN = UTIL.RemoveSingleQuotes(FQN)
        Dim s$ = ""
        s = "Select DocumentID FROM [Documents] where DocFqn = '" + FQN + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim iStr$ = ""
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
            rsData.Read()
            iStr$ = rsData.GetValue(0).ToString
            rsData.Close()
            rsData = Nothing
        Else
            rsData.Close()
            rsData = Nothing
        End If
        Return iStr.Trim

    End Function

    Public Function ckDocExistByFqn(Byref SecureID As Integer, ByVal FQN$) As Boolean
        FQN = UTIL.RemoveSingleQuotes(FQN)
        Dim s$ = ""
        s = "Select DocumentID FROM [Documents] where DocFqn = '" + FQN + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0
        Dim B As Boolean = False
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
            rsData.Close()
            rsData = Nothing
            B = True
        Else
            rsData.Close()
            rsData = Nothing
            B = False
        End If
        Return B

    End Function

        Public Function ExecCountSQL(Byref SecureID As Integer, ByVal S$) As Integer
        Dim I As Integer = 0
        Try
        Dim rsData As SqlDataReader = Nothing
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr$ = rsData.GetValue(0).ToString
        I = Val(iStr)
        rsData.Close()
        rsData = Nothing
        Else
        rsData.Close()
        rsData = Nothing
        I = 0
        End If
        Catch ex As Exception
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecCountSQL : 0001 : " + ex.Message)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecCountSQL : 0001a : " + S)
        I = -1
        End Try
        Return I
        End Function

        Public Function VerifyUserID(Byref SecureID As Integer, ByVal UID$) As Boolean
        Dim s$ = ""
        s = "Select count(*) from Userdata where Userid = '" + UID + "'"
        Dim rsData As SqlDataReader = Nothing
        Dim I As Integer = 0

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr$ = rsData.GetValue(0).ToString
        I = Val(iStr)
        rsData.Close()
        rsData = Nothing
        If I > 0 Then
        Return True
        Else
        Return False
        End If
        Else
        rsData.Close()
        rsData = Nothing
        Return False
        End If

        End Function

        Public Function ItemExists(Byref SecureID As Integer, ByVal Tbl$, ByVal idCol$, ByVal ColVal$, ByVal ColType$) As Boolean
        Dim s$ = ""
        Dim b As Boolean = False
        CloseConn(SecureID)
        CkConn(SecureID)
        If ColType = "N" Then
        s = "Select count(*) from " + Tbl + " where " + idCol + " = " + ColVal
        Else
        s = "Select count(*) from " + Tbl + " where " + idCol + " = '" + ColVal + "'"
        End If

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr As Integer = rsData.GetValue(0).ToString
        If Val(iStr) > 0 Then
        b = True
        Else
        b = False
        End If
        Else
        Return b
        End If
        rsData.Close()
        rsData = Nothing
        Return b
        End Function

        Public Function ValidateDeviceID(Byref SecureID As Integer, ByVal ID$) As Boolean
        Dim s$ = ""
        If ID.Length = 0 Then
        Return False
        End If
        Dim b As Boolean = False
        s = "Select count(*) from Devices where deviceid = " + ID

        Dim rsData As SqlDataReader = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
        If rsData.HasRows Then
        rsData.Read()
        Dim iStr As Integer = rsData.GetValue(0).ToString
        If Val(iStr) > 0 Then
        b = True
        Else
        b = False
        End If
        Else
        Return b
        End If
        rsData.Close()
        rsData = Nothing
        Return b
        End Function

    Public Function xxSqlQry(ByRef SecureID As Integer, ByVal sql As String) As SqlDataReader
        Dim B As Boolean = True
        Dim rsDataQry As SqlDataReader = Nothing
        SyncLock Me

            Try
                ''Session("ActiveError") = False

                Dim queryString As String = sql
                Dim rc As Boolean = False


                CloseConn(SecureID)
                CkConn(SecureID)

                If gConn.State = Data.ConnectionState.Open Then
                    gConn.Close()
                End If

                CloseConn(SecureID)
                CkConn(SecureID)

                Dim command As New SqlCommand(sql, gConn)

                Try
                    rsDataQry = command.ExecuteReader()
                Catch ex As Exception
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SqlQry : 1319 : " + ex.Message)
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SqlQry : 1319 Server too Busy : " + vbCrLf + sql)
                End Try

                command.Dispose()
                command = Nothing

                Return rsDataQry
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: SqlQry 100 - Server too busy: " + ex.Message)
            End Try
        End SyncLock
        Return rsDataQry
    End Function

    Public Sub SqlQryNewThread(ByRef SecureID As Integer, ByVal tSql As String, ByRef tConn As SqlConnection, ByRef rsDataQry As SqlDataReader)

        Dim rc As Boolean = False

        'SyncLock Me
        'Dim tConn As New SqlConnection
        Dim CS As String = getConnStr(SecureID)
        Dim xConn As New SqlConnection(CS)
        xConn.Open()

        Dim command As New SqlCommand(tSql, xConn)

        Try
            rsDataQry = command.ExecuteReader()
        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:SqlQry", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:SqlQry", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:SqlQry", tSql)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SqlQryNewThread : 1337 : " + ex.Message)
        End Try

        command.Dispose()
        command = Nothing

        'End SyncLock


    End Sub

        Public Function SqlQry(Byref SecureID As Integer, ByVal sql As String, ByVal Conn As SqlConnection) As SqlDataReader
        ''Session("ActiveError") = False
        Dim dDebug As Boolean = False
        Dim queryString As String = sql
        Dim rc As Boolean = False
        Dim rsDataQry As SqlDataReader = Nothing

        If Conn.State <> Data.ConnectionState.Open Then
        Conn.Open()
        End If

        Dim command As New SqlCommand(sql, Conn)

        Try
        rsDataQry = command.ExecuteReader()
        Catch ex As Exception
        ''Session("ActiveError") = True
        ''Session("ErrMsg") = ex.Message
        ''Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
        xTrace(SecureID, 1001, "clsDataBase:SqlQry", ex.Message)
        xTrace(SecureID, 1002, "clsDataBase:SqlQry", ex.StackTrace)
        xTrace(SecureID, 1003, "clsDataBase:SqlQry", sql)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQry : 1352 : " + ex.Message)
        End Try

        'If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "SQLQRY Ended: " + Now)
        'If dDebug Then Console.WriteLine("SQLQRY Ended: " + Now)

        command.Dispose()
        command = Nothing

        Return rsDataQry
        End Function

        Public Function SqlQryNewConn(Byref SecureID As Integer, ByVal sql As String) As SqlDataReader
        ''Session("ActiveError") = False
        Dim dDebug As Boolean = False
        Dim queryString As String = sql
        Dim rc As Boolean = False
        Dim rsDataQry As SqlDataReader = Nothing

            Dim CN As New SqlConnection(Me.getConnStr(SecureID))

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim command As New SqlCommand(sql, CN)

            Try
                rsDataQry = command.ExecuteReader()
            Catch ex As Exception
                ''Session("ActiveError") = True
                ''Session("ErrMsg") = ex.Message
                ''Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                xTrace(SecureID, 1001, "clsDataBase:SqlQry", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:SqlQry", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:SqlQry", sql)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryNewConn : 1368a : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryNewConn : 1368b : " + sql)
            End Try

            'If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "SQLQRY Ended: " + Now)
            'If dDebug Then Console.WriteLine("SQLQRY Ended: " + Now)

            command.Dispose()
            command = Nothing

            Return rsDataQry
        End Function
        Public Sub UpdateRemoteMachine(Byref SecureID As Integer, ByVal CompanyID$, ByVal MachineID$, ByVal Applied$, ByVal LicenseID$)
            Dim RemoteConnStr$ = ""

            CompanyID$ = UTIL.RemoveSingleQuotes(CompanyID$)
            MachineID$ = UTIL.RemoveSingleQuotes(MachineID$)

            RemoteConnStr$ = System.Configuration.ConfigurationManager.AppSettings("HELP.DB")
            RemoteConnStr$ = ENC.AES256DecryptString(RemoteConnStr$)

            Dim CN As New SqlConnection(RemoteConnStr$)

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim QrySql$ = "UPDATE [License] SET [MachineID] = '" + MachineID$ + "' ,[Applied] = " + Applied$ + " WHERE CompanyID = '" + CompanyID + "' and LicenseID = " + LicenseID

            Dim command As New SqlCommand(QrySql, CN)
            Dim iRows As Integer = command.ExecuteNonQuery

            If iRows = 0 Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 132.34.1 - Failed to udpate remote Machine ID.")
            End If

            'UPDATE [License] SET [MachineID] = 'XX' ,[Applied] = 1 WHERE CompanyID = 'XX' and LicenseID = 0
        End Sub
        Public Function SqlQryRemoteConn(Byref SecureID As Integer, ByVal QrySql As String) As SqlDataReader
            ''Session("ActiveError") = False
            Dim dDebug As Boolean = False
            Dim rc As Boolean = False
            Dim rsDataQry As SqlDataReader = Nothing
            Dim RemoteConnStr$ = ""

            RemoteConnStr$ = System.Configuration.ConfigurationManager.AppSettings("HELP.DB")
            RemoteConnStr$ = ENC.AES256DecryptString(RemoteConnStr$)

            Dim CN As New SqlConnection(RemoteConnStr$)

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim command As New SqlCommand(QrySql, CN)

            Try
                rsDataQry = command.ExecuteReader()
            Catch ex As Exception
                ''Session("ActiveError") = True
                ''Session("ErrMsg") = ex.Message
                ''Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                xTrace(SecureID, 1001, "clsDataBase:SqlQryRemoteConn", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:SqlQryRemoteConn", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:SqlQryRemoteConn", QrySql)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryRemoteConn : 1368 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryRemoteConn : 1368a : " + QrySql)
            End Try

            'If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "SQLQRY Ended: " + Now)
            'If dDebug Then Console.WriteLine("SQLQRY Ended: " + Now)

            command.Dispose()
            command = Nothing

            Return rsDataQry
        End Function

        Public Function SqlQryNewConn(Byref SecureID As Integer, ByVal sql As String, ByVal ConnectionString$) As SqlDataReader
            ''Session("ActiveError") = False
            Dim dDebug As Boolean = False
            Dim queryString As String = sql
            Dim rc As Boolean = False
            Dim rsDataQry As SqlDataReader = Nothing

            Dim CN As New SqlConnection(ConnectionString$)

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim command As New SqlCommand(sql, CN)

            Try
                rsDataQry = command.ExecuteReader()
            Catch ex As Exception
                ''Session("ActiveError") = True
                ''Session("ErrMsg") = ex.Message
                ''Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                xTrace(SecureID, 8001, "clsDataBase:SqlQry", ex.Message)
                xTrace(SecureID, 8002, "clsDataBase:SqlQry", ex.StackTrace)
                xTrace(SecureID, 8003, "clsDataBase:SqlQry", sql)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryNewConn : 1368aa : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SqlQryNewConn : 1368bb : " + sql)
            End Try

            'If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "SQLQRY Ended: " + Now)
            'If dDebug Then Console.WriteLine("SQLQRY Ended: " + Now)

            command.Dispose()
            command = Nothing

            Return rsDataQry
        End Function

        Public Sub setGlobalConection(Byref SecureID As Integer)
            CloseConn(SecureID)
            CkConn(SecureID)
        End Sub

        Public Sub closeGlobalConection(Byref SecureID As Integer)
            If gConn.State = Data.ConnectionState.Open Then
                gConn.Close()
            End If
        End Sub

        Public Sub ckSiteFacility(Byref SecureID As Integer, ByVal FacilityID$)
            Dim NewKey$ = Trim(FacilityID)
            Dim H$ = Hex$(Val(NewKey))

            Dim iCnt As Integer = SelCount(SecureID, "Select count(*) from sites where facilityID = " + FacilityID$)
            If iCnt > 0 Then
                Return
            End If

            iCnt = SelCount(SecureID, "Select count(*) from sites where sitecode = '?" + H + "'")
            If iCnt > 0 Then
                Return
            End If

            Dim NextDispOrder$ = NewID(SecureID, "SITES", "SiteDisplayOrder")

            Dim S$ = ""
            S = S + " insert into sites (sitecode, sitename, facilityid, sitemenuname, SiteDisplayOrder)"
            S = S + " values "
            S = S + " ('?" + H + "', 'Undefined Site', " + FacilityID$ + ", 'NA','" + NextDispOrder$ + "')"

            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)

        End Sub

        Public Function ExecuteSqlTx(Byref SecureID As Integer, ByVal sql As String) As Boolean

            Dim TxName As String = "TX001"
            Dim rc As Boolean = False

            ''Session("ActiveError") = False
            ''Session("ErrMsg") = ""
            ''Session("ErrStack") = ""

            CloseConn(SecureID)
            CkConn(SecureID)

            Using gConn
                Dim dbCmd As SqlCommand = gConn.CreateCommand()
                Dim transaction As SqlTransaction

                ' Start a local transaction
                transaction = gConn.BeginTransaction(TxName)

                ' Must assign both transaction object and connection
                ' to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn
                dbCmd.Transaction = transaction

                Try
                    dbCmd.CommandText = sql
                    dbCmd.ExecuteNonQuery()
                    ' Attempt to commit the transaction.
                    transaction.Commit()

                    'Audit(sql)

                    'Dim debug As Boolean = False
                    'If debug Then
                    '    Console.WriteLine("Successful execution: " + vbCrLf + sql)
                    'End If
                    rc = True
                Catch ex As Exception
                    rc = False

                    ''Session("ActiveError") = True
                    ''Session("ErrMsg") = "SQL Error check table PgmTrace: " + ex.Message
                    ''Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlTx : 1412.1 : " + ex.Message)
                    xTrace(SecureID, 0, "ExecuteSql: ", "-----------------------")
                    xtrace(SecureID, 1, "ExecuteSql: ", ex.Message.ToString)
                    xTrace(SecureID, 2, "ExecuteSql: ", ex.StackTrace.ToString)
                    xTrace(SecureID, 3, "ExecuteSql: ", sql)

                    EL.Add("error 12.23.67: " + ex.Message)

                    ' Attempt to roll back the transaction.
                    Try
                        transaction.Rollback()
                    Catch ex2 As Exception
                        ' This catch block will handle any errors that may have occurred
                        ' on the server that would cause the rollback to fail, such as
                        ' a closed connection.
                        Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType())
                        Console.WriteLine("  Message: {0}", ex2.Message)
                        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlTx : 1412 : " + ex2.Message)
                    End Try
                End Try
            End Using

            Return rc
        End Function

        Public Function ExecuteSqlNoTx(Byref SecureID As Integer, ByVal sql As String) As Boolean

            Dim rc As Boolean = False

            ''Session("ActiveError") = False
            ''Session("ErrMsg") = ""
            ''Session("ErrStack") = ""

            CloseConn(SecureID)
            CkConn(SecureID)

            Using gConn

                Dim dbCmd As SqlCommand = gConn.CreateCommand()

                ' Must assign both transaction object and connection
                ' to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn

                Try
                    dbCmd.CommandText = sql
                    dbCmd.ExecuteNonQuery()
                    rc = True
                Catch ex As Exception
                    rc = False

                    ''Session("ActiveError") = True
                    ''Session("ErrMsg") = "ExecuteNoTx SQL: " + vbCrLf + sql + vbCrLf + vbCrLf + ex.Message
                    ''Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace

                    xTrace(SecureID, 0, "ExecuteSqlNoTx: ", "-----------------------")
                    xtrace(SecureID, 1, "ExecuteSqlNoTx: ", ex.Message.ToString)
                    xTrace(SecureID, 2, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                    xTrace(SecureID, 3, "ExecuteSqlNoTx: ", sql)

                    EL.Add("error 12.23.68: " + ex.Message)

                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNoTx : 1428 : " + ex.Message)
                End Try
            End Using

            Return rc
        End Function

    Public Function ExecuteSqlNewConn(ByRef SecureID As Integer, ByVal sql As String, ByVal ValidateOwnerShip As Boolean) As Boolean
        If ValidateOwnerShip = True Then
            If TgtGuid$.Length = 0 Then
                If gRunUnattended = False Then MsgBox("ERROR 666.01 - TgtGuid left blank and is required, contact Dale as this is an error.")
                LogMessage(SecureID, gCurrUserGuidID, "ERROR 666.01 - TgtGuid left blank and is required, contact Dale as this is an error.")
                Return False
            End If
            Dim isOwner As Boolean = ckContentOwnership(SecureID, TgtGuid$, gCurrUserGuidID)
            If isOwner = False Then
                If gRunUnattended = False Then MsgBox("ERROR 666.01a - This will be removed - tried to update content you do not own, ABORTED!")
                LOG.WriteToTraceLog("ExecuteSql: User '" + gCurrUserGuidID + "' tried to change '" + TgtGuid$ + "' w/o ownership.")
                Return False
            End If
        End If

        Dim rc As Boolean = False
        CloseConn(SecureID)
        CkConn(SecureID)
        Using gConn
            Dim dbCmd As SqlCommand = gConn.CreateCommand()
            ' Must assign both transaction object and connection
            ' to dbCmd object for a pending local transaction.
            dbCmd.Connection = gConn
            Try
                dbCmd.CommandText = sql
                dbCmd.ExecuteNonQuery()
                Return True
            Catch ex As Exception
                rc = False
                If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                    MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSql : 1442.a : " + ex.Message)
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSql : 1442.a : " + sql)
                    Return True
                End If
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSql : 1442.x : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSql : 1442.x : " + vbCrLf + sql + vbCrLf)
            End Try
        End Using

        Return rc
    End Function

    Public Function xExecuteSqlNewConn(ByRef SecureID As Integer, ByRef MySql As String, ByVal ValidateOwnerShip As Boolean) As Boolean
        If ValidateOwnerShip = True Then
            If TgtGuid$.Length = 0 Then
                If gTgtGuid.Length > 0 Then
                    TgtGuid$ = gTgtGuid
                Else
                    If gRunUnattended = False Then MsgBox("ERROR 666.04x1 - TgtGuid left blank and is required, contact ADMINISTRATOR as this is an error.")
                    LogMessage(SecureID, gCurrUserGuidID, "ERROR 666.04x1 - TgtGuid left blank and is required, contact ADMINISTRATOR as this is an error.")
                    Return False
                End If
            End If
            Dim isOwner As Boolean = ckContentOwnership(SecureID, TgtGuid$, gCurrUserGuidID)
            If isOwner = False Then
                'MsgBox("ERROR 666.04a - This will be removed - tried to update content you do not own, ABORTED!")
                LOG.WriteToTraceLog("ExecuteSqlNewConn: User '" + gCurrUserGuidID + "' tried to change '" + TgtGuid$ + "' w/o ownership.")
                Return False
            End If
        End If
        Dim rc As Boolean = False
        Dim CnStr As String = Me.getConnStr(SecureID)
        Dim CN As New SqlConnection(CnStr)
        CN.Open()
        Dim dbCmd As SqlCommand = CN.CreateCommand()
        Dim BB As Boolean = True

        Using CN
            dbCmd.Connection = CN
            Try
                dbCmd.CommandText = MySql
                dbCmd.ExecuteNonQuery()
                BB = True
            Catch ex As Exception
                rc = False

                If InStr(ex.Message, "Could not allocate space", CompareMethod.Text) > 0 And InStr(ex.Message, "is full", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c0 Could not allocate space:" + vbCrLf + ex.Message)
                End If
                If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                    If gRunUnattended = False Then MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c0 It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    BB = False
                ElseIf InStr(ex.Message, "HelpText", CompareMethod.Text) > 0 Then
                    BB = True
                ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c1 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1464c1 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1464c1 : " + MySql)
                    BB = True
                ElseIf InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c2 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1465c2 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1465c2 : " + MySql)
                    BB = True
                ElseIf InStr(ex.Message, "duplicate", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c3 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1466c3 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1466c3 : " + MySql)
                    BB = True
                Else
                    'MsgBox("Execute MySql: " + ex.Message + vbCrLf + "Please review the trace log." + vbCrLf + MySql)
                    BB = False
                    xTrace(SecureID, 1, "ExecuteSqlNoTx: ", ex.Message.ToString)
                    xTrace(SecureID, 2, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                    xTrace(SecureID, 3, "ExecuteSqlNoTx: ", Mid(MySql, 1, 2000))
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 9448a2x.1: " + ex.Message + vbCrLf + ex.StackTrace.ToString)
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 9448a2x.2: " + vbCrLf + MySql + vbCrLf)
                End If
            Finally
                If CN IsNot Nothing Then
                    If CN.State = ConnectionState.Open Then
                        CN.Close()
                    End If
                    CN = Nothing
                End If
                If dbCmd IsNot Nothing Then
                    dbCmd = Nothing
                End If
            End Try
        End Using

        GC.Collect()
        GC.WaitForPendingFinalizers()
        GC.WaitForFullGCComplete()

        Return BB
    End Function
    Public Function ExecuteSqlSameConn(ByRef SecureID As Integer, ByVal sql As String, ByVal CN As SqlConnection) As Boolean
        Dim rc As Boolean = False

        Dim dbCmd As SqlCommand = CN.CreateCommand()
        Dim BB As Boolean = True
        Using CN
            dbCmd.Connection = CN
            Try
                dbCmd.CommandText = sql
                dbCmd.ExecuteNonQuery()
                BB = True
            Catch ex As Exception
                rc = False

                If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                    If gRunUnattended = False Then MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c0 It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    BB = False
                ElseIf InStr(ex.Message, "HelpText", CompareMethod.Text) > 0 Then
                    BB = True
                ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c1 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1464c1 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1464c1 : " + sql)
                    BB = True
                ElseIf InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c2 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1465c2 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1465c2 : " + sql)
                    BB = True
                ElseIf InStr(ex.Message, "duplicate", CompareMethod.Text) > 0 Then
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 1464c3 - NOT AN ERROR, JUST RI PROTECTING THE me.")
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1466c3 : " + ex.Message)
                    LOG.WriteToEbExecLog("Notification - clsDatabase : ExecuteSqlNewConn : 1466c3 : " + sql)
                    BB = True
                Else
                    'MsgBox("Execute SQL: " + ex.Message + vbCrLf + "Please review the trace log." + vbCrLf + sql)
                    BB = False
                    xTrace(SecureID, 1, "ExecuteSqlNoTx: ", ex.Message.ToString)
                    xTrace(SecureID, 2, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                    xTrace(SecureID, 3, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 9442a2x.1: " + ex.Message)
                    LOG.WriteToEbExecLog("clsDatabase : ExecuteSqlNewConn : 9442a2x.2: " + vbCrLf + sql + vbCrLf)
                End If
            End Try
        End Using

        GC.Collect()

        Return BB
    End Function

    Public Function ExecuteSqlNewConn(ByRef SecureID As Integer, ByRef MySql As String) As Boolean

        Dim BB As Boolean = True

        SyncLock Me

            If SecureID < 0 Then
                Return False
            End If

            Dim rc As Boolean = False
            Dim CN As New SqlConnection(Me.getConnStr(SecureID))
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()

            Using CN
                dbCmd.Connection = CN
                Try
                    dbCmd.CommandText = MySql
                    dbCmd.ExecuteNonQuery()
                    BB = True
                Catch ex As Exception
                    rc = False

                    If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                        If gRunUnattended = False Then MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                        LogMessage(SecureID, gCurrUserGuidID, "It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    ElseIf InStr(ex.Message, "HelpText", CompareMethod.Text) > 0 Then
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c1 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c1 : " + MySql)
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1465c2 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c2 : " + MySql)
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1466c3 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c3 : " + MySql)
                        BB = True
                    Else
                        'MsgBox("Execute MySql: " + ex.Message + vbCrLf + "Please review the trace log." + vbCrLf + MySql)
                        BB = False
                        xTrace(SecureID, 1, "ExecuteSqlNoTx: ", ex.Message.ToString)
                        If dDebug Then Debug.Print(ex.Message.ToString)
                        xTrace(SecureID, 2, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                        xTrace(SecureID, 3, "ExecuteSqlNoTx: ", Mid(MySql, 1, 2000))
                        LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 9442a1p1: " + ex.Message)
                        LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 9442a1p2: " + vbCrLf + MySql + vbCrLf)
                    End If

                End Try
            End Using

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If

            CN = Nothing
            dbCmd = Nothing
            GC.Collect()
        End SyncLock

        Return BB
    End Function

    Public Function ExecuteSqlStack(ByRef SecureID As Integer, ByRef SqlStack As Dictionary(Of Integer, String)) As Boolean

        Dim MySql As String = ""
        Dim BB As Boolean = True

        SyncLock Me

            If SecureID < 0 Then
                Return False
            End If

            Dim rc As Boolean = False
            Dim CN As New SqlConnection(Me.getConnStr(SecureID))
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()

            Using CN
                dbCmd.Connection = CN
                Try
                    Dim iKey As Integer = -1
                    Try
                        BB = True
                        For Each iKey In SqlStack.Keys
                            MySql = SqlStack.Item(iKey)
                            dbCmd.CommandText = MySql
                            dbCmd.ExecuteNonQuery()
                        Next
                    Catch ex As Exception
                        xTrace(SecureID, 2, "ExecuteSqlStack: ", ex.StackTrace.ToString + vbCrLf + MySql)
                        BB = False
                    End Try

                Catch ex As Exception
                    rc = False

                    If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                        If gRunUnattended = False Then MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                        LogMessage(SecureID, gCurrUserGuidID, "It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                    ElseIf InStr(ex.Message, "HelpText", CompareMethod.Text) > 0 Then
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c1 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c1 : " + MySql)
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1465c2 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c2 : " + MySql)
                        BB = True
                    ElseIf InStr(ex.Message, "duplicate", CompareMethod.Text) > 0 Then
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1466c3 : " + ex.Message)
                        'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464c3 : " + MySql)
                        BB = True
                    Else
                        'MsgBox("Execute MySql: " + ex.Message + vbCrLf + "Please review the trace log." + vbCrLf + MySql)
                        BB = False
                        xTrace(SecureID, 1, "ExecuteSqlStack: ", ex.Message.ToString)
                        If dDebug Then Debug.Print(ex.Message.ToString)
                        xTrace(SecureID, 2, "ExecuteSqlStack: ", ex.StackTrace.ToString)
                        xTrace(SecureID, 3, "ExecuteSqlStack: ", Mid(MySql, 1, 2000))
                        LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 9442a1p1: " + ex.Message)
                        LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 9442a1p2: " + vbCrLf + MySql + vbCrLf)
                    End If

                End Try
            End Using

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If

            CN = Nothing
            dbCmd = Nothing
            GC.Collect()
        End SyncLock

        Return BB
    End Function

        Public Function ApplySqlStmt(Byref SecureID As Integer, ByVal sql As String, ByRef ErrMsg$) As Boolean

            Dim rc As Boolean = False

            Dim CN As New SqlConnection(Me.getConnStr(SecureID))
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()

            Using CN
                dbCmd.Connection = CN
                Try
                    dbCmd.CommandText = sql
                    dbCmd.ExecuteNonQuery()
                    rc = True
                    ErrMsg$ = ""
                Catch ex As Exception
                    ErrMsg = ex.Message
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ApplySqlStmt : 100: " + ex.Message)
                End Try
            End Using

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If
            CN = Nothing
            dbCmd = Nothing
            Return rc
        End Function
        Public Function ExecuteSqlLookupTable(Byref SecureID As Integer, ByVal MySql As String) As Boolean

            Dim rc As Boolean = False

            Dim CN As New SqlConnection(Me.getConnStr(SecureID))
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()

            Using CN
                dbCmd.Connection = CN
                Try
                    dbCmd.CommandText = MySql
                    dbCmd.ExecuteNonQuery()
                    rc = True
                Catch ex As Exception
                    rc = False
                    If InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                        Return True
                    End If
                    xtrace(SecureID, 1, "ExecuteSqlLookupTable: ", ex.Message.ToString)
                    'xtrace(SecureID,2, "ExecuteSqlLookupTable: ", ex.StackTrace.ToString)
                    xtrace(SecureID, 2, "ExecuteSqlLookupTable: ", Mid(MySql, 1, 2000))
                End Try
            End Using

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If
            CN = Nothing
            dbCmd = Nothing
            Return rc
        End Function
        Public Function ExecuteSql(Byref SecureID As Integer, ByRef MySql As String, ByVal NewConnectionStr$, ByVal ValidateOwnerShip As Boolean) As Boolean
            If ValidateOwnerShip = True Then
                If TgtGuid$.Length = 0 Then
                    If gRunUnattended = False Then MsgBox("ERROR 666.05 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR 666.05 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    Return False
                End If
                Dim isOwner As Boolean = ckContentOwnership(SecureID, TgtGuid$, gCurrUserGuidID)
                If isOwner = False Then
                    If gRunUnattended = False Then MsgBox("ERROR 666.05a - This will be removed - tried to update content you do not own, ABORTED!")
                    LOG.WriteToTraceLog("ExecuteSqlNewConn2: User '" + gCurrUserGuidID + "' tried to change '" + TgtGuid$ + "' w/o ownership.")
                    Return False
                End If
            End If
            Try
                Dim rc As Boolean = False

                Dim CN As New SqlConnection(NewConnectionStr)
                CN.Open()
                Dim dbCmd As SqlCommand = CN.CreateCommand()

                Using CN
                    dbCmd.Connection = CN
                    Try
                        dbCmd.CommandText = MySql
                        dbCmd.ExecuteNonQuery()
                        rc = True
                    Catch ex As Exception
                        rc = False
                        If InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0 Then
                            If gRunUnattended = False Then MsgBox("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                            LogMessage(SecureID,gCurrUserGuidID, "It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                        ElseIf InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0 Then
                            LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1464 : " + ex.Message + vbCrLf + MySql)
                            LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1408 : " + ex.Message)
                            LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNewConn : 1411 : " + ex.Message)
                            Return True
                        End If
                        xTrace(SecureID, 0, "ExecuteSqlNoTx: ", "-----------------------")
                        xtrace(SecureID, 1, "ExecuteSqlNoTx: ", ex.Message.ToString)
                        xtrace(SecureID, 2, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                        xtrace(SecureID, 3, "ExecuteSqlNoTx: ", Mid(MySql, 1, 2000))
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR: ExecuteSql 2001 - " + MySql)
                    End Try
                End Using

                If CN.State = ConnectionState.Open Then
                    CN.Close()
                End If
                CN = Nothing
                dbCmd = Nothing
                Return rc
            Catch ex As Exception
                xTrace(SecureID, 9914, "ExecuteSqlNewConn", "ExecuteSqlNewConn Failed", ex)
                If gRunUnattended = False Then MsgBox(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "ERROR ExecuteSql 100a1: " + ex.Message + vbCrLf + ex.StackTrace)
                Return False
            End Try

    End Function
    
        Public Function ExecSP(Byref SecureID As Integer, ByVal spName$) As Boolean
            Dim B As Boolean = False
            Dim TimeTrk As Boolean = True
            Try
                CloseConn(SecureID)
                CkConn(SecureID)
                If TimeTrk Then
                    System.Console.WriteLine(spName + " Start: " + DateTime.Today.ToString)
                End If
                Dim command As SqlCommand = New SqlCommand(spName, gConn)
                command.CommandType = Data.CommandType.StoredProcedure
                command.CommandText = spName
                command.CommandTimeout = 3600
                command.ExecuteNonQuery()
                command = Nothing
                gConn.Close()
                B = True
                If TimeTrk Then
                    System.Console.WriteLine(spName + " End: " + DateTime.Today.ToString)
                End If
            Catch ex As Exception
                'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
                xTrace(SecureID, 3014, spName$, "Stored Procedure Failed", ex)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecSP : 1498 : " + ex.Message)
            End Try
            Return B
        End Function
        Public Function SP_ApplyUpdate(Byref SecureID As Integer, ByVal UpdateSql$) As Boolean
            Dim spName$ = ""

            spName = "funcEcmUpdateDB " + UpdateSql
            Dim B As Boolean = False
            'Dim TimeTrk As Boolean = True
            Try
                CloseConn(SecureID)
                CkConn(SecureID)
                'If TimeTrk Then
                '    System.Console.WriteLine(spName + " Start: " + DateTime.Today.ToString)
                'End If
                'Dim command As SqlCommand = New SqlCommand(spName, gConn)
                'command.CommandType = Data.CommandType.StoredProcedure
                'command.CommandText = spName
                'command.CommandTimeout = 3600
                'command.ExecuteNonQuery()
                'command = Nothing
                'gConn.Close()


                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("funcEcmUpdateDB", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@pSql", UpdateSql$))
                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        connection.Dispose()
                        command.Dispose()
                    End Using
                End Using
                B = True
                'If TimeTrk Then
                '    System.Console.WriteLine(spName + " End: " + DateTime.Today.ToString)
                'End If
            Catch ex As Exception
                'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
                Console.WriteLine(ex.Message)
                xTrace(SecureID, 3014, spName$, "SP_ApplyUpdate: Stored Procedure Failed", ex)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : SP_ApplyUpdate : 100 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function ExecuteSqlNoAudit(Byref SecureID As Integer, ByVal sql As String) As Boolean

            Dim TxName As String = "TX001"
            Dim rc As Boolean = False

            CloseConn(SecureID)
            CkConn(SecureID)

            Using gConn

                Dim dbCmd As SqlCommand = gConn.CreateCommand()

                'Dim transaction As SqlTransaction

                'transaction = gConn.BeginTransaction(TxName)

                ' Must assign both transaction object and connection
                ' to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn
                'dbCmd.Transaction = transaction

                Try
                    dbCmd.CommandText = sql
                    dbCmd.ExecuteNonQuery()
                    ' Attempt to commit the transaction.
                    'transaction.Commit()
                    'Dim debug As Boolean = False
                    'If debug Then
                    '    Console.WriteLine("Successful execution: " + vbCrLf + sql)
                    'End If
                    rc = True
                Catch ex As Exception
                    rc = False
                    Console.WriteLine("Exception Type: {0}", ex.GetType())
                    Console.WriteLine("  Message: {0}", ex)
                    Console.WriteLine(sql)

                    ''Session("ActiveError") = True
                    ''Session("ErrMsg") = "ExecuteSqlNoAudit - SQL Error check table PgmTrace: " + ex.Message
                    ''Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace

                    xTrace(SecureID, 0, "ExecuteSql: ", "-----------------------")
                    xtrace(SecureID, 1, "ExecuteSql: ", ex.Message.ToString)
                    xtrace(SecureID, 2, "ExecuteSql: ", ex.StackTrace.ToString)
                    xtrace(SecureID, 3, "ExecuteSql: ", sql)

                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSqlNoAudit : 1516 : " + ex.Message)
                End Try
            End Using

            Return rc
        End Function

        Public Function saveHistory(Byref SecureID As Integer, ByVal SQL$) As Boolean
            Dim b As Boolean = True
            Dim typeSql As String = ""
            Dim tbl As String = ""
            Dim i As Integer = 0
            Dim j As Integer = 0

            i = InStr(1, SQL, " ", CompareMethod.Text)
            typeSql = Mid(SQL, 1, i - 1)
            typeSql = UCase(typeSql)

            If typeSql = "INSERT" Then
                i = InStr(1, SQL, "into", CompareMethod.Text)
                i = i + Len("into ")
                j = InStr(i, SQL, " ")
                tbl = Mid(SQL, i, j - i)
            End If
            If typeSql = "DELETE" Then
                i = InStr(1, SQL, "from", CompareMethod.Text)
                i = i + Len("from ")
                j = InStr(i, SQL, " ")
                tbl = Mid(SQL, i, j - i)
            End If
            If typeSql = "UPDATE" Then
                i = InStr(1, SQL, " ", CompareMethod.Text)
                i = i + Len(" ")
                j = InStr(i, SQL, " ")
                tbl = Mid(SQL, i, j - i)
            End If

            tbl = UCase(tbl)
            If tbl = "USER_ACCESS" Then
                Return True
            End If
            If tbl = "HISTORY" Then
                Return True
            End If

            SQL = UTIL.RemoveSingleQuotes(SQL)
            '** select tbl, sqlstmt,LAST_MOD_DATE,user_name,action from history
            'Public MachineName As String = ""
            'Public MachineIP As String = ""
            'Public UserID As String = ""

            Dim S$ = "insert into HISTORY (tbl, sqlstmt,LAST_MOD_DATE,user_name,action, HostName, IPAddr, Last_Mod_User, Create_user) values ("
            S = S + "'" + tbl + "',"
            S = S + "'" + SQL + "', "
            S = S + " getdate(), "
            'S = S + "'" + Now() + "',"
            S = S + "'" + LOG.getEnvVarUserID + "',"
            S = S + "'" + typeSql + "',"
            S = S + "'" + DMA.getHostname() + "',"
            S = S + "'" + DMA.getIpAddr() + "',"
            S = S + "'" + LOG.getEnvVarUserID + "',"
            S = S + "'" + LOG.getEnvVarUserID + "')"

            ''Clipboard.Clear()
            ''Clipboard.SetText(S)

            b = ExecuteSqlNewConn(SecureID, S, False)

            Return b
        End Function

        Public Function getCpuTime(Byref SecureID As Integer) As String
            '** You can browse the available performance counters by
            '** going to Control Panel | Administrative Tools | Performance and clicking Add.
            Dim perfCounter As New System.Diagnostics.PerformanceCounter()
            Dim loopCount As Integer
            Dim CPU$ = ""

            perfCounter.CategoryName = "Processor"
            perfCounter.CounterName = "% Processor Time"
            perfCounter.InstanceName = "_Total"

            For loopCount = 1 To 2
                'Debug.WriteLine(perfCounter.NextValue.ToString())
                CPU = perfCounter.NextValue.ToString()
            Next

            perfCounter.Close()

            Return CPU

        End Function

        Function GetTableNameFromSql(Byref SecureID As Integer, ByVal Sql$) As String
            Dim b As Boolean = True
            Dim typeSql As String = ""
            Dim tbl As String = ""
            Dim i As Integer = 0
            Dim j As Integer = 0

            Sql = Trim(Sql)

            Dim s1$ = ""
            Dim s2$ = ""
            Dim ch$ = ""

            For i = 1 To Len(Sql)
                ch = Mid(Sql, i, 1)
                If ch = "(" Then
                    s1 = s1 + " " + ch
                ElseIf ch = ")" Then
                    s1 = s1 + ch + " "
                Else
                    s1 = s1 + ch
                End If
            Next

            Sql = s1

            i = InStr(1, Sql, " ", CompareMethod.Text)
            typeSql = Mid(Sql, 1, i - 1)
            typeSql = UCase(typeSql)

            If typeSql = "INSERT" Then
                i = InStr(1, Sql, "into", CompareMethod.Text)
                i = i + Len("into ")
                j = InStr(i, Sql, " ")
                tbl = Mid(Sql, i, j - i)
            End If
            If typeSql = "DELETE" Then
                i = InStr(1, Sql, "from", CompareMethod.Text)
                i = i + Len("from ")
                j = InStr(i, Sql, " ")
                tbl = Mid(Sql, i, j - i)
            End If
            If typeSql = "UPDATE" Then
                i = InStr(1, Sql, " ", CompareMethod.Text)
                i = i + Len(" ")
                j = InStr(i, Sql, " ")
                tbl = Mid(Sql, i, j - i)
            End If

            Return tbl

        End Function

        Function GetWhereClauseFromSql(Byref SecureID As Integer, ByVal Sql$) As String
            Dim b As Boolean = True
            Dim typeSql As String = ""
            Dim wc As String = ""
            Dim tbl As String = ""
            Dim i As Integer = 0
            Dim j As Integer = 0

            i = InStr(1, Sql, " where", CompareMethod.Text)
            If i > 0 Then
                wc = Mid(Sql, i)
            End If

            Return wc

        End Function

        Function GetTypeSqlStmt(Byref SecureID As Integer, ByVal Sql$) As String
            Dim b As Boolean = True
            Dim typeSql As String = ""
            Dim tbl As String = ""
            Dim i As Integer = 0
            Dim j As Integer = 0
            Dim SqlType As String = ""

            Sql = Trim(Sql)
            i = InStr(1, Sql, " ", CompareMethod.Text)
            typeSql = Mid(Sql, 1, i - 1)
            typeSql = UCase(typeSql)

            If typeSql = "INSERT" Then
                SqlType = typeSql
            End If
            If typeSql = "DELETE" Then
                SqlType = typeSql
            End If
            If typeSql = "UPDATE" Then
                SqlType = typeSql
            End If
            If typeSql = "SELECT" Then
                SqlType = typeSql
            End If
            Return SqlType
        End Function

        Public Function ckModuleAuth(Byref SecureID As Integer, ByVal UID$, ByVal AuthCode$) As Boolean
            AuthCode = UCase(AuthCode)
            Dim AuthGranted As Boolean = False
            Select Case AuthCode
                Case "DBA"
                    AuthGranted = False
                Case "GRAPHICS"
                    AuthGranted = False
                Case "INVENTORY"
                    AuthGranted = False
                Case "STANDARDS"
                    AuthGranted = False
                Case "ACCESS"
                    AuthGranted = False
                Case "ACTION"
                    AuthGranted = False
                Case "REPORTS"
                    AuthGranted = False
                Case "COMPLAINTS"
                    AuthGranted = False
                Case "COMPLAINANTS"
                    AuthGranted = False
                Case "EMPLOYMENT"
                    AuthGranted = False
                Case Else
                    AuthGranted = False
                    'DMA.SaveErrMsg(, "Error 121.99.2", "100.10c - Incorrect authority code entered, returning...")
                    ''Session("ErrMsg") = "Error 121.99.2"
                    ''Session("ErrStack") = "100.10c - Incorrect authority code entered, returning..."
                    'Response.Redirect("frmErrDisplay.aspx")
                    Return AuthGranted
            End Select

            Dim Level$ = ""

            Dim s As String = "Select * from user_rights where user_name = '" + UID + "'"
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
            Try
                If rsData.IsClosed Then
                    Console.WriteLine("ckModuleAuth HERE it is closed: " + UID)
                Else
                    Console.WriteLine("ckModuleAuth HERE it is OPEN: " + UID)
                End If
            Catch ex As Exception
                'DMA.SaveErrMsg(, ex.Message, ex.StackTrace.ToString)
                ''Session("ErrMsg") = ex.Message
                ''Session("ErrStack") = ex.StackTrace
                'Response.Redirect("frmErrDisplay.aspx")
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckModuleAuth : 1680 : " + ex.Message)
            End Try

            If rsData.HasRows Then
                rsData.Read()
                Level = rsData.GetValue(rsData.GetOrdinal(AuthCode)).ToString
                If Level <> "0" Then
                    AuthGranted = True
                Else
                    AuthGranted = False
                End If
            Else
                AuthGranted = False
            End If
            rsData.Close()
            'connection.Close()

            Return AuthGranted
        End Function

        Public Function getServerDbName(Byref SecureID As Integer) As String

            Dim s As String = "Select DB_NAME() AS DataBaseName"
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim ServerDbName$ = ""
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
            Try
                If rsData.IsClosed Then
                    Console.WriteLine("getServerName HERE it is closed.")
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getServerDbName : 10 : " + ex.Message)
            End Try

            If rsData.HasRows Then
                rsData.Read()
                ServerDbName$ = rsData.GetValue(0).ToString
            End If
            rsData.Close()
            rsData = Nothing
            Return ServerDbName$
        End Function
        Public Function ckAuthority(Byref SecureID As Integer, ByVal UID$, ByVal AuthCode$) As Boolean
            Dim AuthGranted As Boolean = False
            AuthCode = UCase(AuthCode)
            Select Case AuthCode
                Case "ADMIN"
                    AuthGranted = False
                Case "SUPER USER"
                    AuthGranted = False
                Case "USER"
                    AuthGranted = False
                Case Else
                    AuthGranted = False
                    LogMessage(SecureID,gCurrUserGuidID, "Error 100.10a - Incorrect authority code entered, returning.")
                    Return AuthGranted
            End Select
            Dim Auth$ = ""
            Dim s As String = "Select user_type_cd from user_database where user_name = '" + UID + "' "
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()

            rsData.Read()
            Auth = rsData.GetValue(rsData.GetOrdinal(AuthCode)).ToString
            If Auth = AuthCode Then
                AuthGranted = True
            Else
                AuthGranted = False
            End If
            rsData.Close()

            Return AuthGranted
        End Function

        Public Function UserHasAuthority(Byref SecureID As Integer, ByVal UID$, ByVal AuthCode$) As Boolean
            Dim AuthGranted As Boolean = False
            AuthCode = UCase(AuthCode)
            Select Case AuthCode
                Case "EDIT"
                    AuthGranted = False
                Case "INSERT"
                    AuthGranted = False
                Case "UPDATE"
                    AuthGranted = False
                Case "DELETE"
                    AuthGranted = False
                Case "READ"
                    AuthGranted = False
                Case "MAINT"
                    AuthGranted = False
                Case "EXECUTE"
                    AuthGranted = False
                Case Else
                    AuthGranted = False
                    LogMessage(SecureID,gCurrUserGuidID, "Error 100.10t - Incorrect authority code entered, returning.")
                    Return AuthGranted
            End Select
            Dim Auth$ = ""
            Dim s As String = "Select user_type_cd from user_database where user_name = '" + UID + "' "
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
            rsData.Read()
            Auth = rsData.GetValue(0).ToString
            If Auth = "ADMIN" Then
                AuthGranted = True
            Else
                Select Case AuthCode
                    Case "INSERT"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case "EDIT"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case "UPDATE"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case "DELETE"
                        If Auth = "SUPER USER" Then
                            AuthGranted = False
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case "READ"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = True
                        Else
                            AuthGranted = False
                        End If
                    Case "MAINT"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case "EXECUTE"
                        If Auth = "SUPER USER" Then
                            AuthGranted = True
                        ElseIf Auth = "USER" Then
                            AuthGranted = False
                        Else
                            AuthGranted = False
                        End If
                    Case Else
                        AuthGranted = False
                End Select
            End If
            rsData.Close()

            Return AuthGranted
        End Function

        Public Function ckFldLen(Byref SecureID As Integer, ByVal Title$, ByVal fld$) As Boolean
            If Len(fld) = 0 Then
                LogMessage(SecureID,gCurrUserGuidID, "Error ckFldLen 100.10i - " + Title + " is a required field.")
                Return False
            Else
                Return True
            End If
        End Function

        'Public Sub lOGMESSAGE(ByVal Msg$)

        '    Dim cPath As String = GetCurrDir()
        '    Dim tFQN$ = cPath + "\AdmsApp.Log"
        '    ' Create an instance of StreamWriter to write text to a file.
        '    Using sw As StreamWriter = New StreamWriter(tFQN, True)
        '        ' Add some text to the file.
        '        sw.WriteLine(Now() + ": " + Msg)
        '        sw.Close()
        '    End Using

        'End Sub

        Public Function GetCurrDir(Byref SecureID As Integer) As String
            Dim s As String = ""
            Dim ch As String = ""
            Dim i As Integer = 0
            's = Application.ExecutablePath
            s = System.Reflection.Assembly.GetExecutingAssembly.Location.ToString
            If InStr(1, s, "\") > 0 Then
                i = Len(s)
                ch = ""
                Do While ch <> "\"
                    i = i - 1
                    ch = Mid(s, i, 1)
                Loop
            End If
            Dim cPath As String = ""
            cPath = Mid(s, 1, i - 1)
            Return cPath
        End Function

        Public Function RetrieveDocument(Byref SecureID As Integer, ByVal DocID$) As Byte()

            Dim cn As SqlConnection = Nothing
            cn.ConnectionString = gConnStr
            cn.Open()

            Dim sql$ = "Select DocumentText from documents where documentid = " & DocID$
            Dim cmd As New SqlCommand(sql, cn)
            Dim da As New SqlDataAdapter(cmd)
            Dim ds As New Data.DataSet

            da.Fill(ds, "BLOBIMAGE")

            Dim c As Integer = ds.Tables("BLOBIMAGE").Rows.Count

            If c > 0 Then
                Try
                    Dim bytBLOBData() As Byte = ds.Tables("BLOBIMAGE").Rows(c - 1)("DocumentText")
                    'Dim stmBLOBData As New MemoryStream(bytBLOBData)
                    'MS = stmBLOBData
                    If gClipBoardActive = True Then Console.WriteLine("Document Bytes Retrieved: " & bytBLOBData.Length)
                    cn.Close()
                    cn = Nothing
                    Return bytBLOBData
                Catch ex As Exception
                    xTrace(SecureID, 12304, "clsDataBase:RetrieveDocument", ex.Message)
                    Console.Write(ex.StackTrace)
                    If gClipBoardActive = True Then Console.WriteLine("*************************************")
                    If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                    If gClipBoardActive = True Then Console.WriteLine("********Inner Exception *********")
                    If gClipBoardActive = True Then Console.WriteLine(ex.InnerException.Message)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : RetrieveDocument : 1856 : " + ex.Message)
                End Try

            End If
            cn.Close()
            cn = Nothing
            Return Nothing
        End Function

        Public Function getDocumentFqnById(Byref SecureID As Integer, ByVal DocID$) As String

            Dim cn As SqlConnection = Nothing

            'gConnStr = ConfigurationManager.ConnectionStrings(ConnectionStringID).ConnectionString

            cn.ConnectionString = gConnStr
            cn.Open()

            Dim sql$ = "Select DocFqn from documents where documentid = " & DocID$
            Dim cmd As New SqlCommand(sql, cn)
            Dim da As New SqlDataAdapter(cmd)
            Dim ds As New Data.DataSet

            da.Fill(ds, "DocFqn")

            Dim c As Integer = ds.Tables("DocFqn").Rows.Count

            If c > 0 Then
                Try
                    Dim FQN$ = ds.Tables("DocFqn").Rows(c - 1)("DocFqn")
                    'Dim stmBLOBData As New MemoryStream(bytBLOBData)
                    'MS = stmBLOBData
                    If gClipBoardActive = True Then Console.WriteLine("Graphic Bytes Retrieved: " & FQN.Length)
                    cn.Close()
                    cn = Nothing
                    Return FQN$
                Catch ex As Exception
                    xTrace(SecureID, 12305, "clsDataBase:GetDocumentFqnById", ex.Message)
                    Console.Write(ex.StackTrace)
                    If gClipBoardActive = True Then Console.WriteLine("*************************************")
                    If gClipBoardActive = True Then Console.WriteLine(ex.Message)
                    If gClipBoardActive = True Then Console.WriteLine("********Inner Exception *********")
                    If gClipBoardActive = True Then Console.WriteLine(ex.InnerException.Message)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getDocumentFqnById : 1880 : " + ex.Message)
                End Try

            End If
            cn.Close()
            cn = Nothing
            Return Nothing
        End Function

        Sub xTrace(Byref SecureID As Integer, ByVal StmtID As Integer, ByVal Stmt$, ByVal PgmName$, ByVal ex As Exception)

            Dim ErrStack$ = ex.StackTrace.ToString
            Dim ErrorSource$ = ex.Source.ToString
            ' Dim InnerException = ex.InnerException.Message.ToString
            Dim ErrMsg$ = ex.Message.ToString
            'Dim exData As Collection = ex.Data
            Dim ConnectiveGuid$ = Me.getGuid(SecureID)

            PgmName = UTIL.RemoveSingleQuotes(PgmName)
            Dim S$ = ""
            Stmt = UTIL.RemoveSingleQuotes(Stmt)
            S$ = "INSERT INTO PgmTrace ([StmtID] ,[PgmName], ConnectiveGuid, stmt, UserID) VALUES(" & StmtID & ", '" & PgmName & "' , '" + ConnectiveGuid$ + "', '" + Stmt + "', '" + gCurrUserGuidID + "')"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            If b = False Then
                ''Session("ErrMsg") = "StmtId Call: " + 'Session("ErrMsg")
                ''Session("ErrStack") = "StmtId Call Stack: " + ''Session("ErrStack")
            End If

            NbrOfErrors += 1
            'FrmMDIMain.TSSB2.Text = "WARNINGS: " + NbrOfErrors.ToString
            SaveErrMsg(SecureID, ErrMsg$, ErrStack$, StmtID.ToString, ConnectiveGuid$)

        End Sub
    Sub FixSingleQuotes(ByRef SecureID As Integer, ByRef Stmt$)
        Dim I As Integer = 0
        Dim CH$ = ""
        For I = 1 To Stmt.Length
            CH = Mid(Stmt, I, 1)
            If CH = "'" Then
                Mid(Stmt, I, 1) = "`"
            End If
        Next
    End Sub
    Public Sub xTrace(ByRef SecureID As Integer, ByVal StmtID As Integer, ByVal PgmName$, ByVal Stmt$)

        If Stmt.Contains("Failed to save search results") Then
            Return
        End If
        If Stmt.Contains("Column names in each table must be unique") Then
            Return
        End If
        If Stmt.Contains("clsArchiver:ArchiveQuickRefItems") Then
            Return
        End If

        Try
            FixSingleQuotes(SecureID, Stmt$)
            Dim S$ = ""
            PgmName = UTIL.RemoveSingleQuotes(PgmName)
            S$ = "INSERT INTO PgmTrace (StmtID ,PgmName, Stmt) VALUES(" & StmtID & ", '" & PgmName & "','" & Stmt & "')"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
            If b = False Then
                ''Session("ErrMsg") = "StmtId Call: " + 'Session("ErrMsg")
                ''Session("ErrStack") = "StmtId Call Stack: " + ''Session("ErrStack")
            End If
        Catch ex As Exception

            If dDebug Then Debug.Print(ex.Message)
            If gClipBoardActive = True Then Console.WriteLine(ex.Message)
            'LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : xTrace : 1907 : " + ex.Message)

        End Try

    End Sub

    Sub ZeroTrace(ByRef SecureID As Integer)
        Dim S$ = ""
        S$ = "delete from PgmTrace "
        Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
        If b = False Then
            ''Session("ErrMsg") = "ZeroTrace Call: " + 'Session("ErrMsg")
            ''Session("ErrStack") = "ZeroTrace Call Stack: " + ''Session("ErrStack")
            'Response.Redirect("frmErrDisplay.aspx")
        End If
    End Sub

        Sub ZeroizeEmailToDelete(Byref SecureID As Integer, ByVal Userid$)
            Dim S$ = ""
            S$ = "delete from EmailToDelete where UserID = '" + Userid + "'"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            If b = False Then
                ''Session("ErrMsg") = "ZeroTrace Call: " + 'Session("ErrMsg")
                ''Session("ErrStack") = "ZeroTrace Call Stack: " + ''Session("ErrStack")
                'Response.Redirect("frmErrDisplay.aspx")
            End If
        End Sub

        Public Function LogEntryNew(Byref SecureID As Integer, ByVal IPADDR$) As Integer

            Dim NextKey$ = getNextKey(SecureID, "LOGINS", "LoginTrackingNbr")
            Dim S$ = ""

            S = S + "INSERT INTO [Logins]"
            S = S + "([LoginID]"
            S = S + ",[LoginDate]"
            S = S + ",[LoginTrackingNbr]"
            S = S + ",[Duration]"
            S = S + ",[IPAddress])"
            S = S + "VALUES( "
            S = S + "'VISITOR'"
            S = S + ",getdate()"
            S = S + "," + NextKey$
            S = S + ",getdate()"
            S = S + ",'" + IPADDR$ + "')"

            Dim b As Boolean = ExecuteSqlNoTx(SecureID, S)
            If b Then
                Return NextKey$
            Else
                Return ""
            End If

        End Function

        Public Sub LogEntryUpdate(Byref SecureID As Integer, ByVal UID$, ByVal LoginTrackingNbr As Integer)

            If UID$ = Nothing Then
                If Not LoginTrackingNbr = Nothing Then
                    LogEntryUpdate(SecureID, LoginTrackingNbr)
                End If
                Return
            End If

            If UID$.Length = 0 Then
                Return
            End If

            Dim S$ = ""

            S = S + "UPDATE [Logins]"
            S = S + " SET [LoginID] = '" + UID + "'"
            S = S + " ,[Duration] = getdate()      "
            S = S + " WHERE (LoginTrackingNbr = " + Str(LoginTrackingNbr) + ") "

            Dim b As Boolean = ExecuteSqlNoTx(SecureID, S)

        End Sub

        Public Sub LogEntryUpdate(Byref SecureID As Integer, ByVal LoginTrackingNbr As Integer)

            Dim S$ = ""

            S = S + "UPDATE [Logins]"
            S = S + " SET [Duration] = getdate()      "
            S = S + " WHERE (LoginTrackingNbr = " + Str(LoginTrackingNbr) + ") "

            Dim b As Boolean = ExecuteSqlNoTx(SecureID, S)

        End Sub

        Public Function InsertEmail(Byref SecureID As Integer, ByVal EmailFrom$, ByVal EmailTo$, ByVal EmailSubj$, ByVal EmailCC$, ByVal EmailBCC$, ByVal EMailBody$, ByVal EMailBody2$, ByVal EmailDate As Date) As Boolean

            Dim S$ = ""
            S = S + " INSERT INTO [Emails]"
            S = S + " ([EmailTo]"
            S = S + " ,[EmailFrom]"
            S = S + " ,[EmailSubj]"
            S = S + " ,[EmailBody]"
            S = S + " ,[EmailBody2]"
            S = S + " ,[EmailDate]"
            S = S + " ,[EmailCC]"
            S = S + " ,[EmailBcc])"
            S = S + " VALUES"
            S = S + " ('" + EmailTo + "','"
            S = S + EmailFrom + "','"
            S = S + EmailSubj + "','"
            S = S + EMailBody + "','"
            S = S + EMailBody2 + "','"
            S = S + EmailDate + "','"
            S = S + EmailCC + "','"
            S = S + EmailBCC + "')"

            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            Return b
        End Function

        Public Sub AddUploadFileData(Byref SecureID As Integer, ByVal FQN$, ByVal UploadedBy$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = ckDatasourceExists(SecureID, FQN$, UploadedBy$)
            If Not B Then
                InsertFileAudit(SecureID, FQN$, UploadedBy$)
            End If
        End Sub

        Public Function InsertFileAudit(Byref SecureID As Integer, ByVal FN$, ByVal UploadedBy$) As Boolean

            Dim b As Boolean = False
            Dim s As String = ""

            b = ckDatasourceExists(SecureID, FN$, UploadedBy$)

            If b Then
                Return True
            End If

            s = s + " INSERT INTO [FileUpload] ([FileName],[UploadedBy]) VALUES( "
            s = s + "'" + FN + "',"
            s = s + "'" + UploadedBy + "')"

            b = ExecuteSqlNoAudit(SecureID, s)

            If Not b Then
                Console.WriteLine("Audit Failed: " + s)
            End If

            Return b

        End Function

        Public Function setUploadSuccessTrue(Byref SecureID As Integer, ByVal UploadID As Integer) As Boolean

            Dim b As Boolean = False
            Dim s As String = ""

            s = " Update FileUpload set SuccessfulLoad = 1 where UploadID = " & UploadID
            b = ExecuteSqlNoAudit(SecureID, s)
            s = " Update FileUpload set EndTime = getdate() where UploadID = " & UploadID
            b = ExecuteSqlNoAudit(SecureID, s)
            s = " update FileUpload set ElapsedTime = DATEDIFF(second, StartTime, GETDATE()) where UploadID = " & UploadID
            b = ExecuteSqlNoAudit(SecureID, s)
            If Not b Then
                Console.WriteLine("Audit Failed: " + s)
            End If
            Return b
        End Function

        Function GetLastUploadTime(Byref SecureID As Integer) As String

            CloseConn(SecureID)
            CkConn(SecureID)
            Dim S$ = ""
            S = "Select max(UploadID) from FileUpload where SuccessfulLoad = 1 "
            Dim rsData As SqlDataReader = Nothing
            Dim I As Integer = 0
            Dim iStr$ = ""
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
            If rsData.HasRows Then
                rsData.Read()
                iStr$ = rsData.GetValue(0).ToString
                rsData.Close()
                rsData = Nothing
            Else
                rsData.Close()
                rsData = Nothing
            End If

            If iStr$.Length = 0 Then
                Return "No file has been loaded as of now..."
            End If

            Dim FN$ = ""
            Dim ET$ = ""
            GetElapsedTime(SecureID, iStr$, FN, ET)

            If FN.Length > 0 Then
                Return "The last upload, '" + FN + "', took " + ET + " seconds."
            Else
                Return "The current load could possibly take several minutes..."
            End If

        End Function

        Public Sub GetElapsedTime(Byref SecureID As Integer, ByVal UploadID$, ByRef FN$, ByRef ET$)

            Try
                Dim S$ = ""
                S = "Select FileName, ElapsedTime from FileUpload where UploadID = " + UploadID$
                Dim rsData As SqlDataReader = Nothing
                Dim I As Integer = 0
                Dim iStr$ = ""
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    FN = rsData.GetValue(0).ToString
                    ET = rsData.GetValue(1).ToString
                    rsData.Close()
                    rsData = Nothing
                Else
                    rsData.Close()
                    rsData = Nothing
                End If
            Catch ex As Exception
                FN = ""
                ET = ""
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetElapsedTime : 2043 : " + ex.Message)
            End Try
        End Sub

        Function ckAttributeExists(Byref SecureID As Integer, ByVal AttributeName$, ByVal PropVal$) As Boolean

            Dim s As String = "Select count(*) from Attribute where AttributeName = '" + AttributeName$ + "'"
            Dim Cnt As Integer
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()

            rsData.Read()
            Cnt = rsData.GetInt32(0)
            If Cnt > 0 Then
                b = True
            Else
                b = False
            End If
            rsData.Close()

            Return b
        End Function

        '' <summary>
        '' Determines of a file has alraedy been loaded into the system or not.
        '' </summary>
        '' <param name="FN"></param>
        '' <returns>TRUE if the file has been loaded, FALSE if not.</returns>
        '' <remarks></remarks>
        Public Function ckDatasourceExists(Byref SecureID As Integer, ByVal FQN$, ByVal UID$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim Cnt As Integer
            Dim s As String = "Select count(*) FROM DataSource "
            s = s + " where FQN = '" + FQN + "' and UserID = '" + UID + "'"
            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()

            rsData.Read()
            Cnt = rsData.GetInt32(0)
            If Cnt > 0 Then
                b = True
            Else
                b = False
            End If
            rsData.Close()

            Return b

        End Function

        Public Function getTableCount(Byref SecureID As Integer, ByVal TblName$) As Integer
            Try
                Dim S$ = "Select  count(*) FROM " + TblName
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()

                rsData.Read()
                Cnt = rsData.GetInt32(0)

                rsData.Close()

                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12306, "clsDataBase:getTableCount", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getTableCount : 2083 : " + ex.Message)

                Return 0
            End Try

        End Function

    Public Function iCount(ByRef SecureID As Integer, ByVal S As String) As Integer
        SyncLock Me
            Try
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS As String = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()
                rsData.Read()
                Cnt = rsData.GetInt32(0)
                rsData.Close()
                rsData = Nothing
                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12307, "clsDataBase:iCount", ex.Message)
                xTrace(SecureID, 12308, "clsDataBase:iCount", S$)
                LogMessage(SecureID, gCurrUserGuidID, "ERROR 1993.21: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : iCount : 2054 : " + ex.Message)
                Return -1
            End Try
        End SyncLock
    End Function

        Public Function iCountContent(Byref SecureID As Integer, ByVal S$) As Integer

            Dim I As Integer = 0
            Dim J As Integer = 0
            Dim K As Integer = 0
            Dim S1$ = ""
            Dim S2$ = ""
            S = S.Trim
            Dim NewSql$ = ""
            Dim A$() = S.Split(vbCrLf)
            For I = 0 To UBound(A)
                If InStr(A(I), "and KEY_TBL.RANK", CompareMethod.Text) > 0 Then
                    'Console.WriteLine(A(I))
                Else
                    NewSql = NewSql + A(I) + vbCrLf
                End If
                S = NewSql
            Next

            If InStr(1, S, "FROM ", CompareMethod.Text) > 0 Then
                I = InStr(1, S, "select", CompareMethod.Text)
                'I = I + 5
                'I = InStr(I, S, "select", CompareMethod.Text)
                If I <= 0 Then
                    Return -1
                End If
                J = InStr(1, S, "FROM ", CompareMethod.Text)
                S1 = ""
                S2 = Mid(S, J)
                Dim SS$ = "Select count(*) " + S2
                J = InStr(1, SS$, "order by", CompareMethod.Text)
                If J > 0 Then
                    SS$ = Mid(SS$, 1, J - 1)
                End If
                S = SS
                ''Clipboard.Clear()
                ''Clipboard.SetText(S)
                'Console.WriteLine(S)
            Else
                Return 1
            End If

            K = InStr(S, "order by", CompareMethod.Text)
            If K > 0 Then
                S = Mid(S, 1, K - 1)
            End If

            Try

                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                rsData.Read()
                Cnt = rsData.GetInt32(0)
                rsData.Close()
                rsData = Nothing
                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12309, "clsDataBase:iCountContent", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "Warning - clsDatabase : iCountContent : 2150 : " + ex.Message + vbCrLf + S)
                Return 1
            End Try

        End Function

        Public Function getCountDataSourceFiles(Byref SecureID As Integer, ByVal SourceName$, ByVal OriginalFileType$, ByVal FileLength As Integer, ByVal CRC$) As String

            Try
                SourceName$ = UTIL.RemoveSingleQuotes(SourceName$)

                Dim S$ = "Select top 1 SourceGuid from DataSource"
                S = S + " where "
                S = S + " [SourceName] = '" + SourceName$ + "'"
                S = S + " and [OriginalFileType] = '" + OriginalFileType$ + "'"
                'S = S + " and [VersionNbr] = " + VersionNbr.ToString
                S = S + " and [FileLength] = " + FileLength.ToString
                S = S + " and CRC = '" + CRC + "'"
                Try
                    CloseConn(SecureID)
                    CkConn(SecureID)
                    Dim SourceGuid$ = ""
                    Dim rsData As SqlDataReader = Nothing
                    Dim b As Boolean = False
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                    rsData.Read()
                    SourceGuid = rsData.GetValue(0).ToString
                    rsData.Close()
                    Return SourceGuid
                Catch ex As Exception
                    Return ""
                End Try
            Catch ex As Exception
                xTrace(SecureID, 12309, "clsDataBase:getCountDataSourceFiles", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getCountDataSourceFiles : 2162a : " + ex.Message)
                Return ""
            End Try

        End Function

        Public Function getCountDataSourceFiles(Byref SecureID As Integer, ByVal UserID$, ByVal FQN$) As Integer

            Try
                FQN$ = UTIL.RemoveSingleQuotes(FQN$)

                Dim S$ = "Select  count(*) FROM DataSource where FQN = '" + FQN + "' and DataSourceOwnerUserID = '" + UserID$ + "'"
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False


                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()

                rsData.Read()
                Cnt = rsData.GetInt32(0)

                If Not rsData.IsClosed Then
                    rsData.Close()
                End If
                rsData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12309, "clsDataBase:getCountDataSourceFiles", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getCountDataSourceFiles : 2162 : " + ex.Message)
                Return -1
            End Try

        End Function

        Public Function getCountDataSourceFiles(Byref SecureID As Integer, ByVal UserID$, ByVal FQN$, ByVal VerNO As Integer) As Integer
            Try
                FQN$ = UTIL.RemoveSingleQuotes(FQN$)

                Dim S$ = "Select  count(*) FROM DataSource where FQN = '" + FQN + "' and DataSourceOwnerUserID = '" + UserID$ + "' and VersionNbr = " + VerNO.ToString
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()

                rsData.Read()
                Cnt = rsData.GetInt32(0)

                rsData.Close()

                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12311, "clsDataBase:getCountDataSourceFiles", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getCountDataSourceFiles : 2174 : " + ex.Message)

                Return -1
            End Try

        End Function

        Function GetMaxDataSourceVersionNbr(Byref SecureID As Integer, ByVal UserID$, ByVal FQN$) As Integer
            Try
                FQN$ = UTIL.RemoveSingleQuotes(FQN$)

                Dim S$ = "Select  max ([VersionNbr]) FROM DataSource where FQN = '" + FQN + "' and DataSourceOwnerUserID = '" + UserID$ + "'"
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer

                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()

                Try
                    If rsData.HasRows Then
                        rsData.Read()
                        Cnt = rsData.GetInt32(0)
                    Else
                        Cnt = -1
                    End If
                Catch ex As Exception
                    Cnt = -1
                End Try



                If Not rsData.IsClosed Then
                    rsData.Close()
                End If
                rsData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12311, "clsDataBase:GetMaxDataSourceVersionNbr", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetMaxDataSourceVersionNbr : 2157 : " + ex.Message)
                Return 0
            End Try
        End Function
        Function GetMaxDataSourceVersionNbr(Byref SecureID As Integer, ByVal SourceName$, ByVal CRC$, ByVal FileLength$) As Integer
            Try
                SourceName$ = UTIL.RemoveSingleQuotes(SourceName$)

                Dim S$ = "Select  max ([VersionNbr]) FROM DataSource  where  SourceName = '" + SourceName + "' and FIleLength = " + FileLength + " and CRC = '" + CRC + "'"
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim Cnt As Integer

                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()

                If rsData.HasRows Then
                    rsData.Read()
                    Cnt = rsData.GetInt32(0)
                Else
                    Cnt = -1
                End If

                rsData.Close()
                rsData = Nothing

                Return Cnt
            Catch ex As Exception
                xTrace(SecureID, 12311, "clsDataBase:GetMaxDataSourceVersionNbr", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetMaxDataSourceVersionNbr : 2157 : " + ex.Message)
                Return 0
            End Try
        End Function

        Function getGuid(Byref SecureID As Integer) As String
            Dim MyGuid As Guid = Guid.NewGuid()
            Return MyGuid.ToString
        End Function

        '' <summary>
        '' Bilds the sorted lists for blazing fast lookup speeds.
        '' </summary>
        '' <remarks></remarks>
        Public Sub PopulateSortedLists(Byref SecureID As Integer)
            PopulateProjectSortedList(SecureID)
            PopulateProjectTeamSortedList(SecureID)
        End Sub

        '' <summary>
        '' The subroutine PopulateProjectSortedList populates a sorted list with all projects
        '' from the input Excel spreadsheet. This list allows us to verify that a project exists
        '' without having to access the database thus giving us extreme speed.
        '' </summary>
        '' <remarks></remarks>
        Sub PopulateProjectSortedList(Byref SecureID As Integer)
            Dim PID As Integer = 0
            Dim s As String = "Select RomID, ProjectID from Project"
            Dim rsData As SqlDataReader = Nothing

            slProjects.Clear()

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then
                Do While rsData.Read()
                    Dim RomID$ = rsData.GetValue(0).ToString
                    Dim ProjectID As Integer = rsData.GetInt32(1)
                    slProjects.Add(ProjectID, RomID)
                Loop
            Else
                slProjects.Add(-1, "$$New Project")
            End If

            rsData.Close()
        End Sub

        Sub PopulateProjectTeamSortedList(Byref SecureID As Integer)

            slProjectTeams.Clear()
            Dim PID As Integer = 0
            Dim s As String = "Select [ProjectTeamIdentifier] +'|'+ cast([ProjectID] as varchar(50)), ProjectTeamID FROM [ProjectTeam]"
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then
                Do While rsData.Read()
                    Dim TeamKey$ = rsData.GetValue(0).ToString
                    Dim ProjectTeamID As Integer = rsData.GetInt32(1)
                    slProjectTeams.Add(ProjectTeamID, TeamKey$)
                Loop
            Else
                slProjectTeams.Add(-1, "XXXX")
            End If

            rsData.Close()
        End Sub

        Sub PopulateMetricPeriodSortedList(Byref SecureID As Integer)

            slMetricPeriods.Clear()
            Dim PID As Integer = 0
            Dim s As String = "Select cast([MetricPeriod] as varchar(50)) + '|' + cast([ProjectTeamID] as varchar(50)), [MetricRowGuid] FROM [MetricPeriodData]"
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then
                Do While rsData.Read()
                    Dim MetricKey$ = rsData.GetValue(0).ToString
                    Dim MetricID As Integer = rsData.GetInt32(1)
                    slMetricPeriods.Add(MetricID, MetricKey$)
                Loop
            Else
                slMetricPeriods.Add(-1, "~~~~")
            End If

            rsData.Close()
        End Sub

        Function getMetricPeriodIdByKey(Byref SecureID As Integer, ByVal MetricPeriod$, ByVal ProjectTeamID$) As String

            slMetricPeriods.Clear()
            Dim PID As Integer = 0
            Dim s As String = ""
            Dim tKey$ = ""

            s = s + "Select [MetricRowGuid] "
            s = s + "FROM [MetricPeriodData]"
            s = s + "where MetricPeriod= '" + MetricPeriod$ + "'"
            s = s + "and ProjectTeamID = " + ProjectTeamID$
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then
                Do While rsData.Read()
                    tKey = rsData.GetValue(0).ToString
                Loop
            Else
                tKey = ""
            End If

            rsData.Close()
            Return tKey
        End Function

        Sub LinkRunId(Byref SecureID As Integer)
            Dim LoadID As Integer = 0
            Dim s As String = "Select max([UploadID]) FROM [FileUpload]"
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then

                LoadID = rsData.GetInt32(0)

                rsData.Close()

                s = s + "update MetricPeriodData set UploadID = " & LoadID & " where UploadID is null"

                Dim b As Boolean = ExecuteSqlNoAudit(SecureID, s)

            End If

            If Not rsData.IsClosed Then
                rsData.Close()
            End If

        End Sub

        Function getLastUploadID(Byref SecureID As Integer) As Integer

            Dim LoadID As Integer = -1
            Dim s As String = "Select max([UploadID]) FROM [FileUpload]"
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then

                LoadID = rsData.GetInt32(0)

                rsData.Close()

            End If

            If Not rsData.IsClosed Then
                rsData.Close()
            End If

            Return LoadID

        End Function

        Function getLastProjectID(Byref SecureID As Integer) As Integer

            Dim LoadID As Integer = -1
            Dim s As String = "Select max([ProjectID]) FROM [Project]"
            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
            rsData.Read()

            If rsData.HasRows Then

                LoadID = rsData.GetInt32(0)

                rsData.Close()

            End If

            If Not rsData.IsClosed Then
                rsData.Close()
            End If

            Return LoadID

        End Function

        Public Function ckExcelColName(Byref SecureID As Integer, ByVal ColName$) As Boolean
            Dim B As Boolean = False
            B = Me.slExcelColNames.ContainsKey(ColName)
            Return B
        End Function

        Sub populateSortedLists(Byref SecureID As Integer, ByVal ListName$, ByVal tKey$, ByVal tDesc$)

            If ListName.Equals("GrowthPlatform") Then
                slGrowthPlatform.Add(tKey, tDesc)
            ElseIf ListName.Equals("OperatingGroup") Then
                slOperatingGroup.Add(tKey, tDesc)
            ElseIf ListName.Equals("OperatingUnit") Then
                slOperatingUnit.Add(tKey, tDesc)
            ElseIf ListName.Equals("Geography") Then
                slGeography.Add(tKey, tDesc)
            ElseIf ListName.Equals("GeographicUnit") Then
                slGeographicUnit.Add(tKey, tDesc)
            ElseIf ListName.Equals("ClientServiceGroup") Then
                slClientServiceGroup.Add(tKey, tDesc)
            ElseIf ListName.Equals("DeliveryCenter") Then
                slDeliveryCenter.Add(tKey, tDesc)
            ElseIf ListName.Equals("TypeOfWork") Then
                slTypeOfWork.Add(tKey, tDesc)
            ElseIf ListName.Equals("ProjectTeamTypeOfWork") Then
                slProjectTeamTypeOfWork.Add(tKey, tDesc)
            ElseIf ListName.Equals("SubmissionStatus") Then
                slSubmissionStatus.Add(tKey, tDesc)
            ElseIf ListName.Equals("SubmittedBy") Then
                slSubmittedBy.Add(tKey, tDesc)
            End If
        End Sub

        Sub AddLookupData(Byref SecureID As Integer, ByVal TBL$, ByVal CodeCol$, ByVal DescCol$, ByVal tCode$, ByVal tDesc$)
            Dim S$ = ""

            PopulateSortedLists(SecureID, TBL, tCode$, tDesc$)

            Dim b As Boolean = ItemExists(SecureID, TBL$, CodeCol$, tCode$, "S")

            If Not b Then
                S = ""
                S = S + " insert into " + TBL + " (" + CodeCol$ + "," + DescCol + ")"
                S = S + " values "
                S = S + " ('" + tCode + "','" + tDesc + "')"

                b = ExecuteSqlNewConn(SecureID, S, False)

            End If

        End Sub

        Public Sub SetConfigDb(Byref SecureID As Integer, ByVal DbId$)
            ConnectionStringID = DbId$
        End Sub

        Function GetDsValue(Byref SecureID As Integer, ByVal RS As SqlDataReader, ByVal I As Integer) As String
            Dim tVal$ = RS.GetValue(I).ToString
            tVal = UTIL.RemoveSingleQuotes(tVal)
            Return tVal
        End Function

        Sub AddToSL(Byref SecureID As Integer, ByRef SL As Dictionary(Of String, String), ByVal S$, ByRef dups As Integer)
            Try
                Dim B As Boolean = SL.ContainsKey(S)
                If B Then
                    dups = dups + 1
                Else
                    SL.Add(S, S)
                End If
            Catch ex As Exception
                Console.WriteLine("Duplicate SQL statement, skipping and continuing.")
                dups = dups + 1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : AddToSL : 2351 : " + ex.Message)
            End Try
        End Sub

        Public Sub spCkNextID(Byref SecureID As Integer, ByVal ID$)
            Dim B As Boolean = False
            Dim TimeTrk As Boolean = True
            Try
                CloseConn(SecureID)
                CkConn(SecureID)
                Dim command As SqlCommand = New SqlCommand("exec spCkNextID " + ID, gConn)
                command.CommandType = Data.CommandType.Text
                'command.CommandText = "spCkNextID " + ID
                command.CommandTimeout = 3600
                command.ExecuteNonQuery()
                command = Nothing
                gConn.Close()
            Catch ex As Exception
                'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : spCkNextID : 2361 : " + ex.Message)
            End Try
        End Sub

        Public Function InsertEmailMsg(Byref SecureID As Integer, ByVal FQN$, ByVal EmailGUID As String, ByVal UserID$, ByVal ReceivedByName As String, ByVal ReceivedTime As DateTime, ByVal SenderEmailAddress As String, ByVal SenderName As String, ByVal SentOn As DateTime) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = False
            Try
                Dim EmailBinary() As Byte = CF.FileToByte(FQN)
                'UserID, ReceivedByName As String, ReceivedTime As DateTime, SenderEmailAddress As String, SenderName As String, SentOn As DateTime
                Using connection As New SqlConnection(getConnStr(SecureID))
                    Using command As New SqlCommand("spInsertEmailMsg", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@EmailImage", EmailBinary))

                        command.Parameters.Add(New SqlParameter("@UserID", UserID))
                        command.Parameters.Add(New SqlParameter("@ReceivedByName", ReceivedByName))
                        command.Parameters.Add(New SqlParameter("@ReceivedTime", ReceivedTime))
                        command.Parameters.Add(New SqlParameter("@SenderEmailAddress", SenderEmailAddress))
                        command.Parameters.Add(New SqlParameter("@SenderName", SenderName))
                        command.Parameters.Add(New SqlParameter("@SentOn", SentOn))

                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        connection.Dispose()
                        command.Dispose()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 12315, "clsDataBase:InsertEmailMsg", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : InsertEmailMsg : 2386 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function UpdateEmailMsg(Byref SecureID As Integer, ByVal FQN$, ByVal EmailGUID As String) As Boolean
            Dim LL As Integer = 0
            FQN = UTIL.RemoveSingleQuotes(FQN)
            LL = 1
            Dim B As Boolean = False
            LL = 2
            Try
                Dim EmailBinary() As Byte = CF.FileToByte(FQN)
                LL = 3
                If EmailBinary.Length = 0 Then
                    LL = 4
                    Return False
                End If
                LL = 5
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    LL = 6
                    Using command As New SqlCommand("spUpdateEmailMsg", connection)
                        LL = 7
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@EmailImage", EmailBinary))
                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        command.Dispose()
                        LL = 8
                    End Using
                    LL = 9
                End Using
                LL = 10
                B = True
                LL = 11
            Catch ex As Exception
                xTrace(SecureID, 12315, "clsDataBase:UpdateEmailMsg", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : UpdateEmailMsg : 2404 : LL = " + LL.ToString + " : " + ex.Message + vbCrLf + " : " + FQN$ + vbCrLf + " : " + EmailGUID)
            End Try
            Return B
        End Function

        Public Function UpdateAttachment(Byref SecureID As Integer, ByVal EmailGUID As String, ByVal AttachmentBinary() As Byte, ByVal AttachmentName$, ByVal AttachmentCode$) As Boolean

            Dim bExtendTime As Boolean = False
            If AttachmentBinary.Length > 4000000000 Then
                LOG.WriteToArchiveLog("Notification : InsertSourcefile : 661b : Loading extremely large file: " + AttachmentName + vbCrLf + "File Length: " + AttachmentBinary.Length.ToString)
            End If

            Dim InsertConnStr$ = Me.getConnStr(SecureID)
            UTIL.ExtendTimeoutBySize(InsertConnStr$, AttachmentBinary.Length)

            Dim B As Boolean = False
            Try
                Using connection As New SqlConnection(InsertConnStr)
                    Using command As New SqlCommand("UpdateAttachment", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@Attachment", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@AttachmentName", AttachmentName))
                        command.Parameters.Add(New SqlParameter("@AttachmentCode", AttachmentCode))
                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        command.Dispose()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 12315, "clsDataBase:UpdateAttachment", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : UpdateAttachment : 2423 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function UpdateAttachmentByFQN(Byref SecureID As Integer, ByVal FQN$, ByVal EmailGUID As String, ByVal AttachmentName$, ByVal AttachmentCode$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = False
            Try
                Dim AttachmentBinary() As Byte = CF.FileToByte(FQN)
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("UpdateAttachment", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@Attachment", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@AttachmentName", AttachmentName))
                        command.Parameters.Add(New SqlParameter("@AttachmentCode", AttachmentCode))
                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        command.Dispose()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 12315, "clsDataBase:UpdateAttachmentByFQN", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : UpdateAttachmentByFQN : 2443 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function xInsertAttachment(Byref SecureID As Integer, ByVal EmailGUID As String, ByVal AttachmentBinary() As Byte, ByVal AttachmentName$, ByVal AttachmentCode$) As Boolean
            Dim B As Boolean = False
            Try
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("InsertAttachment", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@Attachment", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@AttachmentName", AttachmentName))
                        command.Parameters.Add(New SqlParameter("@AttachmentCode", AttachmentCode))
                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 82711, "clsDatabase:InsertAttachment: ", ex.Message.ToString, ex)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : InsertAttachment : 2460 : " + ex.Message)
            End Try
            Return B
        End Function
        Sub ValidateExtExists(Byref SecureID As Integer, ByVal FQN$)
            Dim ATYPE As New clsATTACHMENTTYPE(SecureID)
            Dim FileExt$ = "." + UTIL.getFileSuffix(FQN$)
            Dim bCnt As Integer = ATYPE.cnt_PK29(FileExt)
            If bCnt = 0 Then
                ATYPE.setDescription("Auto added this code.")
                ATYPE.setAttachmentcode(FileExt)
                ATYPE.Insert()
            End If
            ATYPE = Nothing
        End Sub
        Public Function InsertAttachmentFqn(Byref SecureID As Integer, ByVal FQN$, ByVal EmailGUID As String, ByVal AttachmentName$, ByVal AttachmentCode$, ByVal UserGuidID$) As Boolean

            ValidateExtExists(SecureID, FQN)
            Dim iCnt As Integer = iCount(SecureID, "Select count(*) from email where EmailGuid = '" + EmailGUID + "' ")
            If iCnt = 0 Then
                LogMessage(SecureID,gCurrUserGuidID, "NOTIFICATION: InsertAttachmentFqn 100: could not add attachment " + AttachmentName$ + ", EMAIL Guid not found.")
                Return False
            End If

            Dim fExt$ = DMA.getFileExtension(FQN)
            '**WDM HEART
            If fExt.Length = 0 Then
                FQN$ = FQN$ + ".UKN"
                AttachmentCode$ = ".txt"
            Else
                Dim SubstituteFileType$ = getProcessFileAsExt(SecureID, fExt$)
                If SubstituteFileType$.Trim.Length > 0 Then
                    AttachmentCode$ = SubstituteFileType$
                End If
            End If

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = False
            Dim AttachmentBinary() As Byte = CF.FileToByte(FQN)

            If AttachmentBinary.Length = 0 Then
                LogMessage(SecureID,gCurrUserGuidID, "NOTICE: File '" + FQN + "' did not load properly, ignoring.")
            End If

            Try
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("InsertAttachment", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@Attachment", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@AttachmentName", AttachmentName))
                        command.Parameters.Add(New SqlParameter("@AttachmentCode", AttachmentCode))
                        command.Parameters.Add(New SqlParameter("@UserID", UserGuidID$))
                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 82712, "InsertAttachmentFqn: ", ex.Message.ToString, ex)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : InsertAttachmentFqn : 2479 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function UpdateEmailBinary(Byref SecureID As Integer, ByVal FQN$, ByVal EmailGUID As String) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = False
            Dim EmailBinary() As Byte = CF.FileToByte(FQN)
            Try
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("spUpdateEmailMsg", connection)
                        command.CommandType = CommandType.StoredProcedure
                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGUID))
                        command.Parameters.Add(New SqlParameter("@EmailImage", EmailBinary))
                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 82713, "UpdateEmailBinary: ", ex.Message.ToString, ex)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : UpdateEmailBinary : 2495a : " + ex.Message)
            End Try
            Return B
        End Function

        Function ckDocumentExists(Byref SecureID As Integer, ByVal FQN$, ByVal VersionNbr As Integer, ByVal DataSourceOwnerUserID$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Try
                S = " select count(*) from DataSource where FQN = '" + FQN$ + "' and VersionNbr = " + VersionNbr.ToString + " and DataSourceOwnerUserID = '" + DataSourceOwnerUserID$ + "'"
                CloseConn(SecureID)
                CkConn(SecureID)
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error 199.99.1 - clsDatabase : ckDocumentExists: " + ex.Message + vbCrLf + S)
                B = False
            End Try


            Return B

        End Function
        Function ckDocumentExists(Byref SecureID As Integer, ByVal FQN$, ByVal MachineID$, ByVal DataSourceOwnerUserID$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Try
                S = " select count(*) from DataSource where FQN = '" + FQN$ + "' and DataSourceOwnerUserID = '" + DataSourceOwnerUserID$ + "' and MachineID = '" + MachineID + "'"
                CloseConn(SecureID)
                CkConn(SecureID)
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error 199.99.1 - clsDatabase : ckDocumentExists: " + ex.Message + vbCrLf + S)
                B = False
            End Try


            Return B

        End Function

        Public Function InsertSourcefile(Byref SecureID As Integer, ByVal SourceGuid As String, _
        ByVal UploadFQN As String, _
        ByVal SourceName As String, _
        ByVal SourceTypeCode As String, _
        ByVal sLastAccessDate As String, _
        ByVal sCreateDate As String, _
        ByVal sLastWriteTime As String, _
        ByVal DataSourceOwnerUserID As String, _
        ByVal VersionNbr As Integer) As Boolean

            Dim LastAccessDate As Date = Nothing
            Dim CreateDate As Date = Nothing
            Dim LastWriteTime As Date = Nothing

            Try
                LastWriteTime = CDate(sLastWriteTime)
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: InsertSourceFile 100 - LastWriteTime: " + ex.Message + vbCrLf + sLastWriteTime)
            End Try
            Try
                LastAccessDate = CDate(sLastAccessDate)
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: InsertSourceFile 101 - LastAccessDate: " + ex.Message + vbCrLf + sLastAccessDate)
            End Try
        Try
            If sCreateDate.Length = 0 Then
                sCreateDate = LastWriteTime
            End If
            CreateDate = CDate(sCreateDate)
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "ERROR: InsertSourceFile 102 - CreateDate: " + ex.Message + vbCrLf + sCreateDate)
        End Try


            Dim fExt As String = DMA.getFileExtension(UploadFQN)
            '**WDM HEART
            If fExt.Length = 0 Then
                UploadFQN = UploadFQN + ".UKN"
                SourceTypeCode = ".txt"
            Else
                Dim SubstituteFileType = getProcessFileAsExt(SecureID, fExt)
                If SubstituteFileType.Trim.Length > 0 Then
                    SourceTypeCode = SubstituteFileType
                End If
            End If

            UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN)

            Dim B As Boolean = False
            B = ckDocumentExists(SecureID, UploadFQN, VersionNbr, DataSourceOwnerUserID)
            If B = True Then
                LogMessage(SecureID,gCurrUserGuidID, "Info: clsDatabase : InsertSourcefile: file exists, did not update or overwrite." + vbCrLf + UploadFQN)
                Return True
            End If

            SourceName = UTIL.RemoveSingleQuotes(SourceName)
            SourceTypeCode = UTIL.RemoveSingleQuotes(SourceTypeCode)
            'LastAccessDate = UTIL.RemoveSingleQuotes(LastAccessDate)
            'CreateDate = UTIL.RemoveSingleQuotes(CreateDate)
            'LastWriteTime = UTIL.RemoveSingleQuotes(LastWriteTime)
            DataSourceOwnerUserID = UTIL.RemoveSingleQuotes(DataSourceOwnerUserID)

            UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN)

            Dim F As File
            If Not F.Exists(UploadFQN) Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR - UpdateSourcefile : 2519.2 : could not find file {" + UploadFQN + "}, skipped.")
                Return False
            End If

            F = Nothing

            Dim AttachmentBinary() As Byte = CF.FileToByte(UploadFQN)
            If AttachmentBinary Is Nothing Then
                LOG.WriteToArchiveLog("Notification : InsertSourcefile : 661c1 : FILE Failed to load: " + UploadFQN + ".")
                Return False
            End If
            If AttachmentBinary.Length > 4000000000 Then
                LOG.WriteToArchiveLog("Notification : InsertSourcefile : 661b : Loading extremely large file: " + UploadFQN + vbCrLf + "File Length: " + AttachmentBinary.Length.ToString)
            End If

            Dim InsertConnStr = Me.getConnStr(SecureID)
            UTIL.ExtendTimeoutBySize(InsertConnStr, AttachmentBinary.Length)

            Try
                Using connection As New SqlConnection(InsertConnStr)
                    Using command As New SqlCommand("InsertDataSource", connection)
                        command.CommandTimeout = 0
                        command.CommandType = CommandType.StoredProcedure

                        '@SourceGuid nvarchar(50),
                        '@FQN nvarchar(50),
                        '@SourceName varchar(254),
                        '@SourceImage image,
                        '@SourceTypeCode varchar(50),
                        '@LastAccessDate datetime,
                        '@CreateDate datetime,
                        '@LastWriteTime datetime,
                        '@VersionNbr int,
                        '@DataSourceOwnerUserID varchar(50)

                        command.Parameters.Add(New SqlParameter("@SourceGuid", SourceGuid))
                        command.Parameters.Add(New SqlParameter("@FQN", UploadFQN))
                        command.Parameters.Add(New SqlParameter("@SourceName", SourceName))
                        command.Parameters.Add(New SqlParameter("@SourceImage", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@SourceTypeCode", SourceTypeCode))

                        command.Parameters.Add(New SqlParameter("@LastAccessDate", LastAccessDate))
                        command.Parameters.Add(New SqlParameter("@CreateDate", CreateDate))
                        command.Parameters.Add(New SqlParameter("@LastWriteTime", LastWriteTime))

                        command.Parameters.Add(New SqlParameter("@DataSourceOwnerUserID", DataSourceOwnerUserID))
                        command.Parameters.Add(New SqlParameter("@VersionNbr", VersionNbr))

                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                    If connection.State = ConnectionState.Open Then
                        connection.Close()
                    End If
                    GC.Collect()
                End Using

                B = True
            Catch ex As Exception
                B = False
                xTrace(SecureID, 82715, "InsertSourcefile: ", ex.Message.ToString, ex)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : xInsertSourcefile : 2495b : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : xInsertSourcefile : 2495b File: " + UploadFQN)
            End Try
            Return B
        End Function

        Public Function UpdateSourceImage(Byref SecureID As Integer, ByVal SourceGuid As String, ByVal LastAccessDate$, ByVal CreateDate$, ByVal LastWriteTime$, ByVal VersionNbr As Integer, ByVal UploadFQN$) As Boolean
            Dim LL As Integer = 0
            Dim B As Boolean = False
            Try
                LL = 1
                LastAccessDate$ = UTIL.RemoveSingleQuotes(LastAccessDate$)
                CreateDate$ = UTIL.RemoveSingleQuotes(CreateDate$)
                LastWriteTime$ = UTIL.RemoveSingleQuotes(LastWriteTime$)
                LL = 2
                Dim F As File
                LL = 3
                If InStr(UploadFQN, "''") > 0 Then
                    UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN)
                End If
                LL = 4
                If Not F.Exists(UploadFQN) Then
                    LogMessage(SecureID,gCurrUserGuidID, "NOTICE: Cannot update '" + UploadFQN + "' as it does not appear to exist.")
                    Return False
                End If
                LL = 5
                F = Nothing

                Dim AttachmentBinary() As Byte = CF.FileToByte(UploadFQN)
                Dim bExtendTime As Boolean = False
                LL = 6
                If AttachmentBinary.Length > 1000000 Then
                    bExtendTime = True
                End If
                LL = 7
                If AttachmentBinary.Length > 4000000000 Then
                    LOG.WriteToArchiveLog("Notification : InsertSourcefile : 661b : Loading extremely large file: " + UploadFQN + vbCrLf + "File Length: " + AttachmentBinary.Length.ToString)
                End If
                LL = 8

                Dim InsertConnStr$ = Me.getConnStr(SecureID)
                UTIL.ExtendTimeoutBySize(InsertConnStr$, AttachmentBinary.Length)
                LL = 9
                UploadFQN = UTIL.RemoveSingleQuotes(UploadFQN)
                Dim connection As New SqlConnection(InsertConnStr$)
                Dim command As New SqlCommand("UpdateDataSourceImage", connection)
                LL = 10
                command.CommandType = CommandType.StoredProcedure

                LL = 11
                command.Parameters.Add(New SqlParameter("@SourceGuid", SourceGuid))
                command.Parameters.Add(New SqlParameter("@SourceImage", AttachmentBinary))
                command.Parameters.Add(New SqlParameter("@LastAccessDate", LastAccessDate))
                command.Parameters.Add(New SqlParameter("@LastWriteTime", LastWriteTime))
                command.Parameters.Add(New SqlParameter("@VersionNbr", VersionNbr))
                LL = 12

                If connection.State = ConnectionState.Closed Then
                    LL = 13
                    connection.Open()
                    LL = 14
                End If
                LL = 15

                command.ExecuteNonQuery()
                LL = 16
                connection.Close()
                LL = 17
                connection.Dispose()
                LL = 18
                command.Dispose()
                LL = 19
                GC.Collect()
                LL = 20
                Dim ImageSize As Integer = GetImageSize(SecureID, SourceGuid$)

                If ImageSize = 0 Then
                    B = False
                    LogMessage(SecureID,gCurrUserGuidID, "WARNING! - clsDatabase : UpdateSourcefile : 2519 : " + UploadFQN + " image failed to load or may be empty file.")
                Else
                    LL = 21
                    Dim S$ = "Update DataSource set MachineID = '" + gMachineID + "' where SourceGuid = '" + SourceGuid + "'"
                    LL = 22
                    B = ExecuteSqlNewConn(SecureID, S)
                    LL = 23
                End If
                LL = 24
            Catch ex As Exception
                xTrace(7321, "Unrecoverable Error - clsDatabase : UpdateSourcefile: ", ex.Message.ToString, ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "Unrecoverable Error - clsDatabase : UpdateSourcefile : 2517a LL= '" + LL.ToString + "' : SourceGuid = '" + SourceGuid + "' " + vbCrLf + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "ERROR         UpdateSourcefile : 2517a : " + UploadFQN)
            End Try

            Return B
        End Function

        Public Function UpdateSourceImageCompressed(Byref SecureID As Integer, ByVal UploadFQN As String, ByVal SourceGuid As String, ByVal LastAccessDate$, ByVal CreateDate$, ByVal LastWriteTime$, ByVal VersionNbr As Integer, ByVal CompressedDataBuffer() As Byte) As Boolean
            Dim LL As Integer = 0
            Dim B As Boolean = False
            Try
                LastAccessDate$ = UTIL.RemoveSingleQuotes(LastAccessDate$)
                CreateDate$ = UTIL.RemoveSingleQuotes(CreateDate$)
                LastWriteTime$ = UTIL.RemoveSingleQuotes(LastWriteTime$)

                Dim AttachmentBinary() As Byte = Decompress(CompressedDataBuffer)
                Dim bExtendTime As Boolean = False

                If AttachmentBinary.Length > 1000000 Then
                    bExtendTime = True
                End If
                LL = 7
                If AttachmentBinary.Length > 4000000000 Then
                    LOG.WriteToArchiveLog("Notification : InsertSourcefile : 661b : Loading extremely large file: " + UploadFQN + vbCrLf + "File Length: " + AttachmentBinary.Length.ToString)
                End If
                LL = 8

                Dim InsertConnStr$ = Me.getConnStr(SecureID)
                UTIL.ExtendTimeoutBySize(InsertConnStr$, AttachmentBinary.Length)
                LL = 9
                UploadFQN = UTIL.RemoveSingleQuotes(UploadFQN)
                Dim connection As New SqlConnection(InsertConnStr$)
                Dim command As New SqlCommand("UpdateDataSourceImage", connection)
                LL = 10
                command.CommandType = CommandType.StoredProcedure

                LL = 11
                command.Parameters.Add(New SqlParameter("@SourceGuid", SourceGuid))
                command.Parameters.Add(New SqlParameter("@SourceImage", AttachmentBinary))
                command.Parameters.Add(New SqlParameter("@LastAccessDate", LastAccessDate))
                command.Parameters.Add(New SqlParameter("@LastWriteTime", LastWriteTime))
                command.Parameters.Add(New SqlParameter("@VersionNbr", VersionNbr))
                LL = 12

                If connection.State = ConnectionState.Closed Then
                    LL = 13
                    connection.Open()
                    LL = 14
                End If
                LL = 15

                command.ExecuteNonQuery()
                LL = 16
                connection.Close()
                LL = 17
                connection.Dispose()
                LL = 18
                command.Dispose()
                LL = 19
                GC.Collect()
                LL = 20
                Dim ImageSize As Integer = GetImageSize(SecureID, SourceGuid$)

                If ImageSize = 0 Then
                    B = False
                    LogMessage(SecureID,gCurrUserGuidID, "WARNING! - clsDatabase : UpdateSourcefile : 2519 : " + UploadFQN + " image failed to load or may be empty file.")
                Else
                    LL = 21
                    Dim S$ = "Update DataSource set MachineID = '" + gMachineID + "' where SourceGuid = '" + SourceGuid + "'"
                    LL = 22
                    B = ExecuteSqlNewConn(SecureID, S)
                    LL = 23
                End If
                LL = 24
            Catch ex As Exception
                xTrace(7321, "Unrecoverable Error - clsDatabase : UpdateSourcefile: ", ex.Message.ToString, ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "Unrecoverable Error - clsDatabase : UpdateSourcefile : 2517a LL= '" + LL.ToString + "' : SourceGuid = '" + SourceGuid + "' " + vbCrLf + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "ERROR         UpdateSourcefile : 2517a : " + UploadFQN)
            End Try

            Return B
        End Function

        Public Function UpdateUrlBinaryHtml(Byref SecureID As Integer, ByVal SourceGuid As String, ByVal LastAccessDate$, ByVal CreateDate$, ByVal LastWriteTime$, ByVal VersionNbr As Integer, ByVal HTML$) As Boolean

            Dim B As Boolean = False

            'LastAccessDate$ = UTIL.RemoveSingleQuotes(LastAccessDate$)
            'CreateDate$ = UTIL.RemoveSingleQuotes(CreateDate$)
            'LastWriteTime$ = UTIL.RemoveSingleQuotes(LastWriteTime$)

            'StrToByteArray(ByVal str As String) As Byte()


            'UploadFQN = UTIL.RemoveSingleQuotes(UploadFQN)

            Dim AttachmentBinary() As Byte = StrToByteArray(HTML)

            Try
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("UpdateDataSourceImage", connection)
                        command.CommandType = CommandType.StoredProcedure

                        '@SourceGuid nvarchar(50),
                        '@SourceImage image,
                        '@LastAccessDate datetime,
                        '@LastWriteTime datetime,
                        '@VersionNbr int

                        command.Parameters.Add(New SqlParameter("@SourceGuid", SourceGuid))
                        command.Parameters.Add(New SqlParameter("@SourceImage", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@LastAccessDate", LastAccessDate))
                        command.Parameters.Add(New SqlParameter("@LastWriteTime", LastWriteTime))
                        command.Parameters.Add(New SqlParameter("@VersionNbr", VersionNbr))

                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                If dDebug Then Debug.Print(ex.Message)
                xTrace(7321, "UpdateSourcefile: ", ex.Message.ToString, ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : UpdateSourcefile : 2517 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function updateSourcefile(Byref SecureID As Integer, ByVal SourceGuid As String, _
        ByVal UploadFQN$, _
        ByVal StoredExternally As Boolean, _
        ByVal SourceName$, _
        ByVal SourceTypeCode$, _
        ByVal LastAccessDate$, _
        ByVal CreateDate$, _
        ByVal LastWriteTime$) As Boolean

            'create PROCEDURE [dbo].[UpdateDataSource]
            '@SourceGuid nvarchar(50),
            '@FQN nvarchar(50),
            '@SourceName varchar(254),
            '@SourceImage image,
            '@SourceTypeCode varchar(50),
            '@LastAccessDate datetime,
            '@CreateDate datetime,
            '@LastWriteTime datetime

            Dim B As Boolean = False

            Dim AttachmentBinary() As Byte = CF.FileToByte(UploadFQN)

            Try
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("UpdateDataSource", connection)
                        command.CommandType = CommandType.StoredProcedure

                        'ALTER PROCEDURE [dbo].[InsertDataSource]
                        '@SourceGuid nvarchar(50),
                        '@FQN nvarchar(50),
                        '@SourceName varchar(254),
                        '@SourceImage image,
                        '@SourceTypeCode varchar(50),
                        '@LastAccessDate datetime,
                        '@CreateDate datetime,
                        '@LastWriteTime datetime

                        command.Parameters.Add(New SqlParameter("@SourceGuid", SourceGuid))
                        command.Parameters.Add(New SqlParameter("@FQN", UploadFQN))
                        command.Parameters.Add(New SqlParameter("@StoredExternally", StoredExternally))
                        command.Parameters.Add(New SqlParameter("@SourceName", SourceName))
                        command.Parameters.Add(New SqlParameter("@SourceImage", AttachmentBinary))
                        command.Parameters.Add(New SqlParameter("@SourceTypeCode", SourceTypeCode))

                        command.Parameters.Add(New SqlParameter("@LastAccessDate", LastAccessDate))
                        command.Parameters.Add(New SqlParameter("@CreateDate", CreateDate))
                        command.Parameters.Add(New SqlParameter("@LastWriteTime", LastWriteTime))

                        connection.Open()
                        command.ExecuteNonQuery()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 12320, "clsDataBase:updateSourcefile", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase :  : 2517 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Function isSourcefileOlderThanLastEntry(Byref SecureID As Integer, ByVal UserID$, ByVal SourceGuid As String, _
        ByVal UploadFQN$, _
        ByVal SourceName$, _
        ByVal SourceTypeCode$, _
        ByVal FileLength$, _
        ByVal LastAccessDate$, _
        ByVal CreateDate$, _
        ByVal LastWriteTime$, ByVal VersionNbr$) As Boolean

            Dim B As Boolean = False
            Dim S As String = ""
            Dim rsData As SqlDataReader = Nothing

            Try
                UploadFQN$ = UTIL.RemoveSingleQuotes(UploadFQN$)

                S = "Select  "
                S = S + "  [FileLength]"
                S = S + " ,[LastAccessDate]"
                S = S + " ,[CreateDate]"
                S = S + " ,[LastWriteTime]"
                S = S + " FROM DataSource "
                S = S + " where FQN = '" + UploadFQN$ + "' "
                S = S + " and VersionNbr = " + VersionNbr$
                S = S + " and DataSourceOwnerUserID = '" + UserID$ + "'"

                Dim i As Integer = 0
                Dim id$ = ""

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()

                If rsData.HasRows Then

                    rsData.Read()

                    Dim tFileLength$ = rsData.GetValue(0).ToString
                    Dim tLastAccessDate$ = rsData.GetValue(1).ToString
                    Dim tCreateDate$ = rsData.GetValue(2).ToString
                    Dim tLastWriteTime$ = rsData.GetValue(3).ToString

                    If Val(FileLength$) <> Val(tFileLength$) Then
                        B = True
                    ElseIf CreateDate$ <> tCreateDate$ Then
                        B = True
                    ElseIf CDate(LastWriteTime) > CDate(tLastWriteTime$) Then
                        B = True
                    End If

                Else
                    id = ""
                End If

                rsData.Close()
                rsData = Nothing

                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: 9755.21cx - " + ex.Message + vbCrLf + S)
                B = True
            Finally
                rsData = Nothing
            End Try

            Return B
        End Function

        Public Function GetAttachmentFromDB(Byref SecureID As Integer, ByVal EmailGuid$) As Byte()

            Dim con As New SqlConnection(Me.getConnStr(SecureID))
            Dim da As New SqlDataAdapter("Select * From EmailAttachment where EmailGuid = '" & EmailGuid & "'", con)
            Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
            Dim ds As New System.Data.DataSet
            Dim TypeAttachmentCode$ = ""

            con.Open()
            da.Fill(ds, "Attachments")
            Dim myRow As System.Data.DataRow
            myRow = ds.Tables("Attachments").Rows(0)

            Dim MyData() As Byte
            MyData = myRow("Attachment")
            TypeAttachmentCode = myRow("AttachmentCode")

            MyCB = Nothing
            ds = Nothing
            da = Nothing

            con.Close()
            con = Nothing
            Return MyData

        End Function

        ''' <summary>
        ''' Determines if an email has already been stored based on the short subject, received time, and the sender's email address.
        ''' </summary>
        ''' <param name="EmailSubj">The subject of the email.</param>
        ''' <param name="EmailReceivedTime">The time the email was received.</param>
        ''' <param name="SenderEmailAddress">The email addres of the sender.</param>
        ''' <returns>Boolean</returns>
        ''' <remarks>This funcition, if extended to include other parms in the lookup will be overloaded.</remarks>
        Public Function isEmailStored(Byref SecureID As Integer, ByVal EmailSubj$, ByVal EmailCreationTime$, ByVal EmailReceivedTime$, ByVal EmailSentOn$, ByVal SenderEmailAddress$) As Boolean

            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            EmailSubj$ = UTIL.RemoveSingleQuotes(EmailSubj$)
            SenderEmailAddress = UTIL.RemoveSingleQuotes(SenderEmailAddress)

            S = " SELECT count(*)"
            S = S + " FROM [Email] "
            S = S + " where [ShortSubj] = '" + EmailSubj$ + "' "
            S = S + " and creationtime = '" + EmailCreationTime$ + "' "
            S = S + " and SentOn = '" + EmailSentOn$ + "' "
            S = S + " and [ReceivedTime] = '" + EmailReceivedTime$ + "' "
            S = S + " and [SenderEmailAddress] = '" + SenderEmailAddress + "' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B

        End Function

        Public Function ckBackupFolder(Byref SecureID As Integer, ByVal UserID$, ByVal FolderName$) As Boolean

            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)


            S = " SELECT count(*)"
            S = S + " FROM [EmailFolder] "
            S = S + " WHERE [UserID] = '" + UserID + "' "
            S = S + " AND [FolderName] = '" + FolderName + "' "
            S = S + " AND [ArchiveEmails] = 'Y' "

            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)

            Using CONN

                Dim RSData As SqlDataReader = Nothing
                CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            If Conn.State = ConnectionState.Open Then
                Conn.Close()
            End If

            Conn = Nothing

            Return B

        End Function

        Public Sub delSubDirs(Byref SecureID As Integer, ByVal UID$, ByVal FQN$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "delete FROM [SubDir] where [UserID] = '" + UID + "' and [FQN] = '" + FQN + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Me.ExecuteSqlNewConn(SecureID, S, False)
            End Using

        End Sub

        Public Sub delFileParms(Byref SecureID As Integer, ByVal SGUID$)
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            CloseConn(SecureID)
            CkConn(SecureID)

            'Dim ConnStr$ = System.Configuration.ConfigurationManager.AppSettings(ConnStrID)
            'Dim Conn As New SqlConnection(ConnStr)

            S = "DELETE FROM [SourceAttribute] WHERE SourceGuid = '" + SGUID + "'"

            Using gConn
                If gConn.State = ConnectionState.Closed Then
                    gConn.Open()
                End If
                B = Me.ExecuteSqlNewConn(SecureID, S, False)
            End Using

        End Sub

        ''' <summary>
        ''' Looks to see what filetypes have been defined to the system It
        ''' looks in table AvailFileTypes.
        ''' </summary>
        ''' <returns>Bolean True/False</returns>
        ''' <remarks></remarks>
        Public Function ckFileExtExists(Byref SecureID As Integer) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) FROM [AvailFileTypes]"

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B

        End Function

        Public Function ckUserExists(Byref SecureID As Integer, ByVal UserID$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) FROM [Users] where UserID = '" + UserID$ + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Try
                        Conn.Open()
                    Catch ex As Exception
                        xTrace(SecureID, 12325, "clsDataBase:ckUserExists", ex.Message)
                        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckUserExists : 2656 : " + ex.Message)

                        Return False
                    End Try

                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B

        End Function

        Public Function ckUserLoginExists(Byref SecureID As Integer, ByVal UserLogin$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) FROM [Users] where UserLoginID = '" + UserLogin$ + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Try
                        Conn.Open()
                    Catch ex As Exception
                        xTrace(SecureID, 12325, "clsDataBase:ckUserExists", ex.Message)
                        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckUserExists : 2656 : " + ex.Message)

                        Return False
                    End Try

                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B

        End Function

    Public Function validateLogin(ByRef SecureID As Integer, ByVal UserLogin As String, ByVal PW As String, ByRef UserGuidID As String) As Boolean

        GC.Collect()
        GC.WaitForFullGCComplete()

        Dim RC As Boolean = True
        SaveClickStats(1001, UserLogin, RC)

        Dim ENC2 As New clsEncryptV2
        SaveClickStats(1002, UserLogin, RC)

        PW = ENC2.DecryptPhrase(PW)
        SaveClickStats(1003, UserLogin, RC)

        ENC2 = Nothing

        SaveClickStats(1004, UserLogin, RC)

        Dim EncPW As String = ENC.AES256EncryptString(PW)

        SaveClickStats(1005, UserLogin, RC)

        Dim BPW As String = getBinaryPassword(SecureID, UserLogin)

        If Not EncPW.Equals(BPW) Then
            Return False
        End If

        If BPW = Nothing Then
            Return False
        End If

        If BPW.Length = 0 Then
            Return False
        End If

        Dim S As String = ""
        Dim cnt As Integer = -1

        Dim ConnStr$ = Me.getConnStr(SecureID)
        Dim Conn As New SqlConnection(ConnStr)

        S = "Select UserID FROM [Users] where UserLoginID = '" + UserLogin + "' and UserPassword = '" + BPW + "'"
        RC = False

        Using Conn
            If Conn.State = ConnectionState.Closed Then
                Try
                    Conn.Open()
                    RC = True
                Catch ex As Exception
                    xTrace(SecureID, 12325, "clsDataBase:validateLogin", ex.Message)
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : validateLogin : 2656 : " + ex.Message)
                    RC = False
                End Try
            End If

            If RC Then
                Try
                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        RSData.Read()
                        UserGuidID = RSData.GetValue(0).ToString
                        cnt = 1
                        RC = True
                    Else
                        RSData.Read()
                        cnt = 0
                        RC = False
                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                Catch ex As Exception
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : validateLogin : 2657 : " + ex.Message)
                    RC = False
                End Try
            End If

        End Using

        'If cnt > 0 Then
        '    RC = True
        'Else
        '    RC = False
        'End If

        GC.Collect()
        GC.WaitForFullGCComplete()

        Return RC

    End Function

    Function ChangeUserPassword(Byref SecureID As Integer, ByVal UserLogin As String, ByVal OldPW As String, ByVal NewPw1 As String, ByVal NewPw2 As String) As Boolean

        Dim PW1 As String = ""
        Dim PW2 As String = ""
        Dim OldPw1 As String = ""

        Dim ENC2 As New clsEncryptV2
        PW1 = ENC2.DecryptPhrase(NewPw1)
        PW2 = ENC2.DecryptPhrase(NewPw2)
        OldPw1 = ENC2.DecryptPhrase(OldPW)
        ENC2 = Nothing

        If Not PW1.Equals(PW2) Then
            Return False
        End If

        Dim EncPW As String = ENC.AES256EncryptString(OldPw1)

        PW1 = ENC.AES256EncryptString(PW1)
        PW2 = ENC.AES256EncryptString(PW2)

        Dim RC As Boolean = False

        Dim S As String = ""
        Dim ConnStr$ = Me.getConnStr(SecureID)
        Dim Conn As New SqlConnection(ConnStr)

        S = "Update [Users] set UserPassword = '" + PW2 + "' where UserLoginID = '" + UserLogin + "' and UserPassword = '" + EncPW + "' "

        Using Conn
            If Conn.State = ConnectionState.Closed Then
                Try
                    Conn.Open()
                    RC = True
                Catch ex As Exception
                    xTrace(SecureID, 12325, "clsDataBase:ChangeUserPassword", ex.Message)
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ChangeUserPassword : 2656 : " + ex.Message)
                    RC = False
                End Try
            End If
            If RC Then
                RC = ExecuteSqlNewConn(SecureID, S)
            End If

        End Using

        Return RC
    End Function

        Public Function getBinaryPassword(Byref SecureID As Integer, ByVal UserLogin As String) As String
            Dim S As String = ""
            Dim B As Boolean = False
            Dim BPW As String = ""
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select UserPassword FROM [Users] where UserLoginID = '" + UserLogin + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Try
                        Conn.Open()
                    Catch ex As Exception
                        xTrace(SecureID, 12325, "clsDataBase:ckUserExists", ex.Message)
                        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckUserExists : 2656 : " + ex.Message)

                        Return False
                    End Try

                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    BPW$ = RSData.GetValue(0).ToString
                Else
                    BPW$ = "X!X!X!X!X!"
                End If

                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using


            Return BPW

        End Function

    Public Function validateAttachSecureLogin(ByRef SecureID As Integer, ByVal CompanyID As String, _
    ByVal RepoID As String, _
    ByVal UserLogin As String, _
    ByVal PW As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean

        RetMsg = ""
        Dim ENC2 As New clsEncryptV2
        PW = ENC2.DecryptPhrase(PW)
        ENC2 = Nothing

        Dim S As String = ""
        Dim cnt As Integer = -1

        PW = ENC.AES256EncryptString(PW)

        Dim ConnStr As String = System.Configuration.ConfigurationManager.AppSettings("ECMSecureLogin")
        ConnStr = ENC.AES256DecryptString(ConnStr)

        Dim Conn As New SqlConnection(ConnStr)
        Dim RSData As SqlDataReader = Nothing
        Dim command As New SqlCommand

        S = "Select RowID from SecureAttach where CompanyID = '" + CompanyID + "' and RepoID = '" + RepoID + "' and EncPW = '" + PW + "' "
        'Dim iCnt As Integer = 0

        'iCnt = iCount(SecureID, S)

        'If iCnt = 0 Then
        '    Return False
        'End If

        Using Conn
            If Conn.State = ConnectionState.Closed Then
                Try
                    Conn.Open()
                    RC = True
                Catch ex As Exception
                    xTrace(SecureID, 12325, "clsDataBase:validateAttachSecureLogin", ex.Message)
                    RetMsg = "clsDatabase : validateAttachSecureLogin : 2656 : " + ex.Message
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : validateAttachSecureLogin : 2656 : " + ex.Message)
                    RC = False
                End Try

            End If
            If RC Then
                Try
                    command.Connection = Conn
                    command.CommandText = S

                    RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        RSData.Read()
                        SecureID = RSData.GetInt32(0)
                        RC = True
                    Else
                        SecureID = -1
                        RetMsg = "clsDatabase : validateAttachSecureLogin : 2658 : No rows found."
                        RC = False
                    End If

                Catch ex As Exception
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : validateAttachSecureLogin : 2657 : " + ex.Message)
                    RetMsg = "clsDatabase : validateAttachSecureLogin : 2657 : " + ex.Message
                    RC = False
                Finally
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                    ENC2 = Nothing
                End Try
            End If
        End Using

        Return RC

    End Function

    Public Function getGatewayCS(SecureID As Integer, CompanyID As String, RepoID As String, PW As String, ByRef RetMsg As String, ByRef RC As Boolean) As String

        Dim strVal As String = ""
        Dim ENC2 As New clsEncryptV2
        PW = ENC2.DecryptPhrase(PW)
        ENC2 = Nothing

        Dim S As String = ""
        Dim cnt As Integer = -1

        PW = ENC.AES256EncryptString(PW)

        Dim ConnStr As String = System.Configuration.ConfigurationManager.AppSettings("ECMSecureLogin")
        ConnStr = ENC.AES256DecryptString(ConnStr)

        Dim Conn As New SqlConnection(ConnStr)
        Dim RSData As SqlDataReader = Nothing
        Dim command As New SqlCommand

        S = "Select CS from SecureAttach where CompanyID = '" + CompanyID + "' and RepoID = '" + RepoID + "' and EncPW = '" + PW + "' "

        Using Conn
            If Conn.State = ConnectionState.Closed Then
                Try
                    Conn.Open()
                    RC = True
                Catch ex As Exception
                    xTrace(SecureID, 12325, "clsDataBase:getGatewayCS", ex.Message)
                    RetMsg = "clsDatabase : getGatewayCS : 2656 : " + ex.Message
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getGatewayCS : 2656 : " + ex.Message)
                    RC = False
                End Try

            End If
            If RC Then
                Try
                    command.Connection = Conn
                    command.CommandText = S

                    RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        RSData.Read()
                        strVal = RSData.GetString(0)
                        RC = True
                    Else
                        strVal = ""
                        SecureID = -1
                        RetMsg = "clsDatabase : getGatewayCS : 2658 : No rows found."
                        RC = False
                    End If

                Catch ex As Exception
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getGatewayCS : 2657 : " + ex.Message)
                    RetMsg = "clsDatabase : getGatewayCS : 2657 : " + ex.Message
                    RC = False
                Finally
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                    ENC2 = Nothing
                End Try
            End If
        End Using

        Return strVal

    End Function

        Public Function ckFolderExists(Byref SecureID As Integer, ByVal ContainerName$, ByVal UserID$, ByVal FolderName$) As Boolean
            Try
                Dim S As String = ""
                Dim B As Boolean = False
                Dim cnt As Integer = -1

                Dim ConnStr$ = Me.getConnStr(SecureID)
                Dim Conn As New SqlConnection(ConnStr)

                ContainerName$ = UTIL.RemoveSingleQuotes(ContainerName$)

                S = "Select count(*) FROM [EmailArchParms] where ContainerName = '" + ContainerName + "' and [UserID] = '" + UserID$ + "' and [FolderName] = '" + FolderName$ + "' "
                'S = "Select count(*) FROM [EmailFolder] where [UserID] = '" + UserID$ + "' and [FolderName] = '" + FolderName$ + "' "
                'SELECT COUNT(*)  FROM EmailArchParms where UserID = 'wmiller' and FolderName = 'Personal Folders|Dale''s Stuff'
                Using Conn
                    If Conn.State = ConnectionState.Closed Then
                        Conn.Open()
                    End If

                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                Return B

            Catch ex As Exception
                xTrace(SecureID, 12325, "clsDataBase:ckFolderExists", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckFolderExists : 2704 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckFolderExists : 2670 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckFolderExists : 2681 : " + ex.Message)
                Return False
            End Try

        End Function
        Public Function ckUrlExists(Byref SecureID As Integer, ByVal FQN$) As Boolean
            Try
                Dim S As String = ""
                Dim B As Boolean = False
                Dim cnt As Integer = -1

                Dim ConnStr$ = Me.getConnStr(SecureID)
                Dim Conn As New SqlConnection(ConnStr)

                S = "Select count(*) FROM DataSource where FQN = '" + FQN + "' "

                Using Conn
                    If Conn.State = ConnectionState.Closed Then
                        Conn.Open()
                    End If

                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                Return B

            Catch ex As Exception
                xTrace(SecureID, 12325, "clsDataBase:ckFolderExists", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckFolderExists : 2681 : " + ex.Message)
                Return False
            End Try

        End Function
        Public Function ckMasterExists(Byref SecureID As Integer, ByVal FileName$, ByVal TblName$, ByVal ColName$, Optional ByVal SourceGuid$ = Nothing) As Boolean
            'SELECT count(*) FROM  [DataSource] where [SourceName] = 'Current State of ECM.docx' and [isMaster] = 'Y'

            'SELECT SourceName FROM  [DataSource] where SourceGuid = 'XX'

            If SourceGuid = Nothing Then
            Else
                FileName$ = Me.getFilenameByGuid(SecureID, SourceGuid)
            End If

            Try
                Dim S As String = ""
                Dim B As Boolean = False
                Dim cnt As Integer = -1

                Dim ConnStr$ = Me.getConnStr(SecureID)
                Dim Conn As New SqlConnection(ConnStr)

                S = "Select count(*) FROM  [DataSource] where [SourceName] = '" + FileName$ + "' and [isMaster] = 'Y'"

                Using Conn
                    If Conn.State = ConnectionState.Closed Then
                        Conn.Open()
                    End If

                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                Return B

            Catch ex As Exception
                xTrace(SecureID, 12326, "clsDataBase:ckMasterExists", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckMasterExists : 2738 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckMasterExists : 2704 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckMasterExists : 2716 : " + ex.Message)
                Return False
            End Try

        End Function

        Public Function ckParmsFolderExists(Byref SecureID As Integer, ByVal UserID$, ByVal FolderName$) As Boolean
            Try
                Dim S As String = ""
                Dim B As Boolean = False
                Dim cnt As Integer = -1

                Dim ConnStr$ = Me.getConnStr(SecureID)
                Dim Conn As New SqlConnection(ConnStr)

                S = "Select count(*) FROM [EmailArchParms] where [UserID] = '" + UserID$ + "' and [FolderName] = '" + FolderName$ + "' "

                Using Conn
                    If Conn.State = ConnectionState.Closed Then
                        Conn.Open()
                    End If

                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                Return B

            Catch ex As Exception
                xTrace(SecureID, 12326, "clsDataBase:ckParmsFolderExists", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckParmsFolderExists : 2768 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckParmsFolderExists : 2734 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckParmsFolderExists : 2747 : " + ex.Message)
                Return False
            End Try

        End Function

        Public Function SelectOneEmailParm(Byref SecureID As Integer, ByVal WhereClause$) As Array

            Dim A$(11)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            Dim b As Boolean = False
            Dim s As String = ""

            s = s + " SELECT "
            s = s + "UserID,"
            s = s + "ArchiveEmails,"
            s = s + "RemoveAfterArchive,"
            s = s + "SetAsDefaultFolder,"
            s = s + "ArchiveAfterXDays,"
            s = s + "RemoveAfterXDays,"
            s = s + "RemoveXDays,"
            s = s + "ArchiveXDays,"
            s = s + "FolderName,"
            s = s + "DB_ID ,"
            s = s + "ArchiveOnlyIfRead, isSysDefault "
            s = s + " FROM EmailArchParms "
            s = s + WhereClause

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    A(0) = RSData.GetValue(0).ToString
                    A(1) = RSData.GetValue(1).ToString
                    A(2) = RSData.GetValue(2).ToString
                    A(3) = RSData.GetValue(3).ToString
                    A(4) = RSData.GetValue(4).ToString
                    A(5) = RSData.GetValue(5).ToString
                    A(6) = RSData.GetValue(6).ToString
                    A(7) = RSData.GetValue(7).ToString
                    A(8) = RSData.GetValue(8).ToString
                    A(9) = RSData.GetValue(9).ToString
                    A(10) = RSData.GetValue(10).ToString
                    A(11) = RSData.GetValue(11).ToString
                    'UserID = a(0)
                    'ArchiveEmails = a(1)
                    'RemoveAfterArchive = a(2)
                    'SetAsDefaultFolder = a(3)
                    'ArchiveAfterXDays = a(4)
                    'RemoveAfterXDays = a(5)
                    'RemoveXDays = a(6)
                    'ArchiveXDays = a(7)
                    'FolderName = a(8)
                    'DB_ID = a(9)
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            Return A
        End Function

        Public Sub LoadAvailFileTypes(Byref SecureID As Integer, ByRef CB As List(Of String))
            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            s = " SELECT distinct [ExtCode] FROM [AvailFileTypes] order by [ExtCode]"
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        CB.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Public Sub LoadAvailUsers(Byref SecureID As Integer, ByRef CB As List(Of String))
            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            s = " SELECT UserLoginID FROM Users "
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        CB.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Public Sub LoadRetentionCodes(Byref SecureID As Integer, ByRef CB As List(Of String))
            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            Dim iCnt As Integer = 0

            s = " select RetentionCode from Retention order by RetentionCode"
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        iCnt += 1
                        Dim SS$ = RSData.GetValue(0).ToString
                        CB.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
                If iCnt = 0 Then
                    If gRunUnattended = False Then MsgBox("Failed to load the retention codes, this will cause issues.")
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR - Failed to load the retention codes, this will cause issues.")
                End If
            End Using
        End Sub

        Public Sub LoadAvailFileTypes(Byref SecureID As Integer, ByRef LB As ListBox)
            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            s = " SELECT distinct [ExtCode] FROM [AvailFileTypes] order by ExtCode"
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        LB.Items.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Public Sub LoadFileTypeProfiles(Byref SecureID As Integer, ByRef CB As List(Of String))

            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            s = " SELECT [ProfileName] FROM [LoadProfile] order by [ProfileName] "
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        CB.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Public Sub LoadIncludedFileTypes(Byref SecureID As Integer, ByRef LB As ListBox, ByVal UserID$, ByVal DirName$)
            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            DirName = UTIL.RemoveSingleQuotes(DirName)

            s = " SELECT [UserID]"
            s = s + " ,[ExtCode]"
            s = s + " ,[FQN]"
            s = s + " FROM IncludedFiles "
            s = s + " where Userid = '" + UserID + "' "
            s = s + " and FQN = '" + DirName + "'"

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(1).ToString
                        LB.Items.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Public Sub LoadExcludedFileTypes(Byref SecureID As Integer, ByRef LB As ListBox, ByVal UserID$, ByVal DirName$)
            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim s As String = ""

            DirName = UTIL.RemoveSingleQuotes(DirName)

            s = " SELECT [UserID]"
            s = s + " ,[ExtCode]"
            s = s + " ,[FQN]"
            s = s + " FROM ExcludedFiles "
            s = s + " where Userid = '" + UserID + "' "
            s = s + " and FQN = '" + DirName + "'"

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(s, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(1).ToString
                        LB.Items.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
        End Sub

        Sub GetActiveEmailFolders(Byref SecureID As Integer, ByVal TopLevelOutlookFolderName$, ByRef LB As ListBox, ByVal UserID$, ByVal CF As Dictionary(Of String, String), ByVal ArchivedEmailFolders As ArrayList)

            ArchivedEmailFolders.Clear()

            Dim S$ = " "
            S = " Select distinct FolderName "
            S = S + " FROM EmailFolder "
            S = S + " where (UserID = '" + gCurrUserGuidID + "' "
            S = S + " and SelectedForArchive = 'Y' "
            S = S + " and ContainerName like '" + TopLevelOutlookFolderName$ + "') "
            S = S + " or isSysDefault = 1 "
            S = S + " order by FolderName "

            ''Clipboard.Clear()
            ''Clipboard.SetText(S)

            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        Dim A2$() = SS.Split("|")
                        SS = A2(UBound(A2))
                        LB.Items.Add(SS)
                        ArchivedEmailFolders.Add(SS)
                        'If CF.ContainsKey(SS) Then
                        '    LB.Items.Add(SS)
                        'End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing

                'Dim S$ = "Update EmailFolder set SelectedForArchive = NULL where UserID = '" + gCurrUserGuidID + "'"
                'Dim BB As Boolean = ExecuteSqlNoTx(SecureID,S)


                Dim BB As Boolean = True

                Dim B1 As Boolean = False
                If BB Then
                    For II As Integer = 0 To LB.Items.Count - 1
                        ActivateArchiveFolder(SecureID, TopLevelOutlookFolderName$, LB.Items(II).ToString, UserID$)
                    Next
                End If

            End Using

        End Sub

        Sub ActivateArchiveFolder(Byref SecureID As Integer, ByVal ParentFolder$, ByVal FolderName$, ByVal UserID$)
            'Update EmailFolder set
            'SelectedForArchive = 'Y'
            'where UserID = 'wmiller'
            'and FolderName = '_Passage'
            'and ParentFolderName = 'Personal Folders'
            Dim FolderFQN$ = ParentFolder + "|" + FolderName
            FolderFQN$ = UTIL.RemoveSingleQuotes(FolderFQN$)
            Dim S$ = "Update EmailFolder set SelectedForArchive = 'Y' where UserID = '" + UserID$ + "' and FolderName = '" + FolderFQN$ + "' and ContainerName = '" + ParentFolder$ + "' "
            Dim B1 As Boolean = ExecuteSqlNoTx(SecureID, S)
            If Not B1 Then
                MsgBox("Failed to Activate folder " + FolderName$)
            End If
        End Sub

        Sub deActivateArchiveFolder(Byref SecureID As Integer, ByVal FolderName$, ByVal UserID$)
            Dim S$ = "Update EmailFolder set SelectedForArchive = 'N' where UserID = '" + UserID$ + "' and FolderName = '" + FolderName$ + "'"
            Dim B1 As Boolean = ExecuteSqlNoTx(SecureID, S)
            If Not B1 Then
                MsgBox("Failed to Activate folder " + FolderName$)
            End If
        End Sub

        Function setActiveEmailFolders(Byref SecureID As Integer, ByVal TopLevelOutlookFolder$, ByVal UserID$) As Integer

            Dim SubFoldersToProcess As Integer = 0

            Dim SLB As New Dictionary(Of String, String)
            Dim S$ = " Select distinct FolderName "
            S = S + " FROM EmailFolder "
            S = S + " where UserID = '" + UserID + "' and FolderName like '" + TopLevelOutlookFolder$ + "|%'  "
            S = S + " and SelectedForArchive = 'Y' "
            S = S + " or isSysDefault = 1 "
            S = S + " order by FolderName "

            '        select distinct FolderName from EmailFolder
            'where FolderName like 'Personal Folders|%' and UserID = 'wmiller'

            'Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SubFoldersToProcess += 1
                        Dim SS$ = RSData.GetValue(0).ToString
                        Dim bKeyExists As Boolean
                        bKeyExists = SLB.ContainsKey(SS)
                        If Not bKeyExists Then
                            SLB.Add(SS, SS)
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing

            End Using
            Return SubFoldersToProcess
        End Function

        Sub GetDirectoryData(Byref SecureID As Integer, ByVal UserID$, _
        ByVal FQN$, _
        ByRef DBID$, _
        ByRef IncludeSubDirs$, _
        ByRef VersionFiles$, _
        ByRef FolderDisabled$, _
        ByRef ckMetaData$, _
        ByRef ckPublic$, _
        ByRef OcrDirectory$, _
        ByRef isSysDefault$, _
        ByRef ArchiveSkipBit As Boolean, _
        ByRef ListenForChanges As Boolean, _
        ByRef ListenDirectory As Boolean, _
        ByRef ListenSubDirectory As Boolean, _
        ByRef DirGuid As String, ByRef OcrPdf As String)

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = "Select IncludeSubDirs, DB_ID, VersionFiles, ckDisableDir, ckMetaData, ckPublic, OcrDirectory,isSysDefault, ArchiveSkipBit, DirGuid, ListenDirectory,ListenSubDirectory, OcrPdf FROM [Directory] where [UserID] = '" + UserID + "' and FQN = '" + FQN + "'"
            'Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        IncludeSubDirs = RSData.GetValue(0).ToString
                        DBID = RSData.GetValue(1).ToString
                        VersionFiles$ = RSData.GetValue(2).ToString
                        FolderDisabled$ = RSData.GetValue(3).ToString
                        ckMetaData = RSData.GetValue(4).ToString
                        ckPublic = RSData.GetValue(5).ToString
                        OcrDirectory = RSData.GetValue(6).ToString
                        isSysDefault = RSData.GetValue(7).ToString
                        ArchiveSkipBit = RSData.GetBoolean(8)
                        DirGuid = RSData.GetValue(9).ToString
                        Dim SX As String = RSData.GetValue(10).ToString
                        SX = RSData.GetValue(11).ToString
                        OcrPdf = RSData.GetValue(12).ToString
                        Try
                            ListenDirectory = RSData.GetBoolean(10)
                        Catch ex As Exception
                            ListenDirectory = False
                        End Try
                        Try
                            ListenSubDirectory = RSData.GetBoolean(11)
                        Catch ex As Exception
                            ListenSubDirectory = False
                        End Try

                        'If sArchiveSkipBit Then
                        '    ArchiveSkipBit = True
                        'Else
                        '    ArchiveSkipBit = False
                        'End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Function isSubDirProcessed(Byref SecureID As Integer, ByVal UserID$, ByVal DirFQN$) As Boolean

            DirFQN = UTIL.RemoveSingleQuotes(DirFQN)
            Dim S$ = "Select IncludeSubDirs FROM [Directory] where [UserID] = '" + UserID + "' and FQN = '" + DirFQN$ + "'"
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim B As Boolean = False
            Dim IncludeSubDirs As String = ""
            Try
                Using Conn
                    If Conn.State = ConnectionState.Closed Then
                        Conn.Open()
                    End If

                    Dim command As New SqlCommand(S, Conn)
                    Dim RSData As SqlDataReader = Nothing
                    RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read()
                            IncludeSubDirs = RSData.GetValue(0).ToString
                            If IncludeSubDirs.ToUpper.Equals("Y") Then
                                B = True
                            Else
                                B = False
                            End If
                        Loop
                    End If
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                End Using
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR isSubDirProcessed 100: " + ex.Message + vbCrLf + S)
                B = False
            End Try

            Return B

        End Function

        Sub GetDirectories(Byref SecureID As Integer, ByRef LB As ListBox, ByVal UserID$, ByVal ShowDisabled As Boolean)
            '*WDM 7/20/2009 - Modified query to bring back DISTINCT directories
            Dim S$ = ""
            S = "update Directory set ckDisableDir = 'N'  where [UserID] = '" + gCurrUserGuidID + "' and ckDisableDir is null "
            ExecuteSqlNewConn(SecureID, S)

            S = ""
            If ShowDisabled = True Then
                S = "Select    distinct [FQN], ckDisableDir " + vbCrLf
                S = S + "             FROM [Directory] " + vbCrLf
                S = S + " where [UserID] = '" + gCurrUserGuidID + "' " + vbCrLf
                S = S + " and (QuickRefEntry = 0  or QuickRefEntry is null) and ckDisableDir = 'Y'" + vbCrLf
                S = S + " or isSysDefault = 1" + vbCrLf
                S = S + " group by FQN, ckDisableDir " + vbCrLf
                S = S + " order by fqn " + vbCrLf
            Else
                S = "Select    distinct [FQN], ckDisableDir " + vbCrLf
                S = S + "             FROM [Directory] " + vbCrLf
                S = S + " where [UserID] = '" + gCurrUserGuidID + "' " + vbCrLf
                S = S + " and (QuickRefEntry = 0  or QuickRefEntry is null) and ckDisableDir <> 'Y'  " + vbCrLf
                '** S = S + " or isSysDefault = 1" + vbCrLf
                S = S + " group by FQN, ckDisableDir " + vbCrLf
                S = S + " order by fqn " + vbCrLf
            End If

            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                Dim II As Integer = 0
                If RSData.HasRows Then
                    Do While RSData.Read()
                        II += 1
                        Dim SS$ = RSData.GetValue(0).ToString
                        'frmReconMain.SB2.Text = "Processing Dir/File # " + II.ToString
                        'frmReconMain.Refresh()
                        'Application.DoEvents()
                        If InStr(SS$, "%userid%", CompareMethod.Text) > 0 Then
                            LB.Items.Add(SS)
                        ElseIf System.IO.Directory.Exists(SS$) Then
                            LB.Items.Add(SS)
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Sub GetIncludedFiles(Byref SecureID As Integer, ByRef LB As ListBox, ByVal UserID$, ByVal FQN$)
            FQN$ = UTIL.RemoveSingleQuotes(FQN$)
            Dim S$ = "Select [ExtCode] FROM [IncludedFiles] where [UserID] = '" + UserID$ + "'  and [FQN] = '" + FQN$ + "'"

            LB.Items.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False
            Dim II As Integer = 0
            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        II += 1
    #If frmReconShow Then
        frmReconMain.SB2.Text = "Processing Extension# " + II.ToString
        frmReconMain.Refresh()
    #End If
                        'Application.DoEvents()
                        Dim SS$ = RSData.GetValue(0).ToString
                        LB.Items.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Sub GetActiveDatabases(Byref SecureID As Integer, ByRef CB As List(Of String))

            Dim S$ = " SELECT [DB_ID] FROM [Databases] "

            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim SS$ = RSData.GetValue(0).ToString
                        CB.Add(SS)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Public Sub GetProcessAsList(Byref SecureID As Integer, ByRef CB As List(Of String))

            Dim S$ = "Select [ExtCode] ,[ProcessExtCode] FROM [ProcessFileAs] order by [ExtCode],[ProcessExtCode]"

            CB.Clear()
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim P$ = RSData.GetValue(0).ToString
                        Dim C$ = RSData.GetValue(1).ToString
                        CB.Add(P + " --> " + C)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Public Function ckRunParmExists(Byref SecureID As Integer, ByVal UserID$, ByVal ReconParm$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) FROM [RunParms] "
            S = S + " where Parm = '" + ReconParm$ + "' "
            S = S + " and UserID = '" + UserID$ + "'"

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B
        End Function

        Public Function ckProcessAsExists(Byref SecureID As Integer, ByVal Pext$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) FROM [ProcessFileAs] where [ExtCode] = '" + Pext$ + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B
        End Function

        Public Function ckExtExists(Byref SecureID As Integer, ByVal tExt$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            S = "Select count(*) from AvailFileTypes where ExtCode = '" + tExt + "' "

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B
        End Function

        Public Function ckDirectoryExists(Byref SecureID As Integer, ByVal UserID$, ByVal FQN$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)

            FQN = UTIL.RemoveSingleQuotes(FQN)

            S = "Select count(*) FROM [Directory] "
            S = S + " where FQN = '" + FQN$ + "' "
            S = S + " and UserID = '" + UserID$ + "'"

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                RSData.Read()
                cnt = Val(RSData.GetValue(0).ToString)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B
        End Function

        Public Function SaveRunParm(Byref SecureID As Integer, ByVal UserID As String, ByRef ParmID As String, ByRef ParmVal As String) As Boolean
            Dim B As Boolean = False
            Dim S As String = ""
            Try

                S = "Select Count(*) from runparms where Parm = '" + ParmID$ + "' and UserID = '" + UserID$ + "'"
                Dim iCnt As Integer = iCount(SecureID, S)

                If iCnt = 0 Then
                    S = ""
                    S += " INSERT INTO [RunParms]" + vbCrLf
                    S += " ([Parm]" + vbCrLf
                    S += " ,[ParmValue]" + vbCrLf
                    S += " ,[UserID]" + vbCrLf
                    S += " ,[ParmDesc]" + vbCrLf
                    S += " ,[HiveConnectionName]" + vbCrLf
                    S += " ,[HiveActive]" + vbCrLf
                    S += " ,[RepoSvrName]" + vbCrLf
                    S += " ,[RowCreationDate]" + vbCrLf
                    S += " ,[RowLastModDate])" + vbCrLf
                    S += " VALUES( " + vbCrLf
                    S += " '" + ParmID + "'" + vbCrLf
                    S += " ,'" + ParmVal + "'" + vbCrLf
                    S += " ,'" + UserID + "'" + vbCrLf
                    S += " ,null" + vbCrLf
                    S += " ,null" + vbCrLf
                    S += " ,0" + vbCrLf
                    S += " ,null" + vbCrLf
                    S += " ,GETDATE()" + vbCrLf
                    S += " ,GETDATE()" + vbCrLf
                    S += ")" + vbCrLf

                    B = ExecuteSqlNewConn(SecureID, S)
                    If Not B Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR SaveRunParm 100: Failed to add parm: " + vbCrLf + S)
                    End If
                Else
                    S = ""
                    S += " UPDATE [RunParms]" + vbCrLf
                    S += " SET [ParmValue] = '" + ParmVal + "'" + vbCrLf
                    S += " ,[UserID] = 'UserID'" + vbCrLf
                    S += " ,[ParmDesc] = null" + vbCrLf
                    S += " ,[HiveConnectionName] = null" + vbCrLf
                    S += " ,[HiveActive] = 0" + vbCrLf
                    S += " ,[RepoSvrName] = null" + vbCrLf
                    S += " ,[RowLastModDate] = GETDATE()" + vbCrLf
                    S += " WHERE [Parm] = '" + ParmID + "'" + vbCrLf
                    S += " and [UserID] = '" + UserID + "'" + vbCrLf

                    B = ExecuteSqlNewConn(SecureID, S)
                    If Not B Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR SaveRunParm 200: Failed to update parm: " + vbCrLf + S)
                    End If
                End If

            Catch ex As Exception
                B = False
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR SaveRunParm 300:  " + ex.Message + vbCrLf + S)
                End If
            End Try

            Return B

        End Function

        Public Function getRunParm(Byref SecureID As Integer, ByVal UserID$, ByVal ParmID$) As String

            Dim S$ = " SELECT [ParmValue] FROM [RunParms] where Parm = '" + ParmID$ + "' and UserID = '" + UserID$ + "'"
            Dim SS$ = ""

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SS$ = RSData.GetValue(0).ToString
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            Return SS
        End Function

        Public Function ExecuteSqlNewConn(Byref SecureID As Integer, ByRef MySql As String, ByVal ConnStr$, ByVal ValidateOwnerShip As Boolean) As Boolean
            If ValidateOwnerShip = True Then
                If TgtGuid$.Length = 0 Then
                    If gRunUnattended = False Then MsgBox("ERROR 666.02 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR 666.02 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    Return False
                End If
                Dim isOwner As Boolean = ckContentOwnership(SecureID, TgtGuid$, gCurrUserGuidID)
                If isOwner = False Then
                    If gRunUnattended = False Then MsgBox("ERROR 666.02b - This will be removed - tried to update content you do not own, ABORTED!")
                    LOG.WriteToTraceLog("ExecuteSql2: User '" + gCurrUserGuidID + "' tried to change '" + TgtGuid$ + "' w/o ownership.")
                    Return False
                End If
            End If
            Dim TxName As String = "TX001"
            Dim rc As Boolean = False
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim dbCmd As SqlCommand = Conn.CreateCommand()
                dbCmd.Connection = Conn
                Try
                    dbCmd.CommandText = MySql
                    dbCmd.ExecuteNonQuery()
                    Dim debug As Boolean = True
                    rc = True
                Catch ex As Exception
                    rc = False
                    Console.WriteLine("Exception Type: {0}", ex.GetType())
                    Console.WriteLine("  Message: {0}", ex)
                    Console.WriteLine(MySql)
                    xTrace(SecureID, 0, "ExecuteSql: ", "-----------------------")
                    xtrace(SecureID, 1, "ExecuteSql: ", ex.Message.ToString)
                    xtrace(SecureID, 2, "ExecuteSql: ", ex.StackTrace.ToString)
                    xtrace(SecureID, 3, "ExecuteSql: ", MySql)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ExecuteSql : 3382 : " + ex.Message)
                End Try
            End Using
            If Conn.State = ConnectionState.Closed Then
                Conn.Close()
            End If
            Conn = Nothing
            Return rc
        End Function

        Function GetEmailDBConnStr(Byref SecureID As Integer, ByRef DBID$) As String

            Dim S$ = "Select DB_CONN_STR from databases where DB_ID = '" + DBID + "' "
            Dim A$(9)
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        DbConnStr$ = RSData.GetValue(0).ToString
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            Return DbConnStr$

        End Function

        Sub GetEmailFolders(Byref SecureID As Integer, ByRef UID$, ByRef aFolders$())

            Dim S$ = "Select "
            S = S + "  [FolderName]"
            S = S + " FROM Email "
            S = S + " where UserID = '" + UID + "' "

            ReDim aFolders$(0)
            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        DbConnStr$ = RSData.GetValue(0).ToString
                        If I = 0 Then
                            aFolders$(0) = DbConnStr$
                        Else
                            ReDim Preserve aFolders$(I)
                            aFolders$(I) = DbConnStr$
                        End If
                        I = I + 1
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

    #If frmReconShow Then
        Public Sub GetContentArchiveFileFolders(SecureID as integer,ByVal UID$, ByRef aFolders$())
        IXV1 = 0
        DMA.IXV1 = 0
        Dim S$ = " "
        S = S + " SELECT Directory.FQN, "
        S = S + " Directory.IncludeSubDirs, "
        S = S + " Directory.DB_ID,"
        S = S + " Directory.VersionFiles, "
        S = S + " Directory.ckDisableDir, "
        S = S + " Directory.OcrDirectory, "
        S = S + " Directory.RetentionCode, "
        S = S + " SubDir.SUBFQN "
        S = S + " FROM  Directory FULL OUTER JOIN"
        S = S + " SubDir ON Directory.FQN = SubDir.FQN"
        S = S + " WHERE (Directory.UserID = '" + UID$ + "') OR"
        S = S + " (Directory.isSysDefault = 1) "
        S = S + " order by Directory.fqn"

        ReDim aFolders$(0)
        Dim I As Integer = 0

        Dim ConnStr$ = Me.getConnStr(SecureID)
        Dim Conn As New SqlConnection(ConnStr)
        Dim b As Boolean = False

        Dim FQN$ = ""
        Dim IncludeSubDirs$ = ""
        Dim DB_ID$ = ""
        Dim VersionFiles$ = ""
        Dim DisableFolder$ = ""
        Dim OcrDirectory$ = ""
        Dim RetentionCode$ = ""
        Dim FirstEntryComplete As Boolean = False
        Dim SUBFQN$ = ""

        Dim ListOfFiles As New List(Of String)

        Dim DbConnStr$ = ""

        Using Conn
        If Conn.State = ConnectionState.Closed Then
        Conn.Open()
        End If

        Dim command As New SqlCommand(S, Conn)
        Dim RSData As SqlDataReader = Nothing
        RSData = command.ExecuteReader()
        I = 0
        If RSData.HasRows Then
        Do While RSData.Read()

        FQN$ = RSData.GetValue(0).ToString
        FQN$ = UTIL.RemoveSingleQuotes(FQN$)

        Dim D As Directory
        If Not D.Exists(FQN) Then
        GoTo SkipThisOne
        End If

        IncludeSubDirs$ = RSData.GetValue(1).ToString
        DB_ID$ = RSData.GetValue(2).ToString
        VersionFiles$ = RSData.GetValue(3).ToString
        DisableFolder$ = RSData.GetValue(4).ToString
        OcrDirectory = RSData.GetValue(5).ToString
        RetentionCode = RSData.GetValue(6).ToString
        SUBFQN = RSData.GetValue(7).ToString

        If DisableFolder$.ToUpper.Equals("Y") Then
        GoTo SkipThisOne
        End If

        If SUBFQN.Length = 0 Then
        '** do nothing
        ElseIf SUBFQN.Trim.Length > 0 Then
        FQN = SUBFQN
        End If

        ListOfFiles.Clear()
        If IncludeSubDirs$.Equals("Y") Then
        'ListOfFiles = DMA.GetFilesRecursive(FQN)
        'DMA.GetAllDirs(FQN, ListOfFiles)
        If UseCommandProcessForInventory = True Then
        Dim BB As Boolean = DMA.getSubDirs(FQN, ListOfFiles)
        If BB = False Then
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        Else
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        End If

        If Not ListOfFiles.Contains(FQN) Then
        ListOfFiles.Add(FQN)
        End If

        For k As Integer = 0 To ListOfFiles.Count - 1
        Dim tFqn$ = ListOfFiles.Item(k)
        If FirstEntryComplete = False Then
        FirstEntryComplete = True
        aFolders$(0) = FQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode
        Else
        Dim X As Integer = UBound(aFolders$) + 1
        ReDim Preserve aFolders$(X)
        aFolders$(X) = FQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode
        End If
        Next
        SkipThisOne:
        I = I + 1
        Loop
        End If
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Conn.Close()
        Conn = Nothing
        End Using

        End Sub
    #End If

    #If frmReconShow Then
        Public Sub GetContentArchiveFileFolders(SecureID as integer,ByVal UID$, ByRef tgtFolders As List(Of String), ByVal TgtFolder$)
        ', ByRef tgtFolders As List(Of String)

        TgtFolder$ = UTIL.RemoveSingleQuotes(TgtFolder$)


        Dim S$ = " "
        IXV1 = 0
        DMA.IXV1 = 0
        Dim AutoIncludeSubDirs$ = System.Configuration.ConfigurationManager.AppSettings("AutoIncludeSubDirs")

        'S = "delete FROM [DirectoryTemp] where [gCurrUserGuidID] = '" + gCurrUserGuidID + "' "
        'Me.ExecuteSqlNewConn(SecureID,S, False)

        S = S + " SELECT Directory.FQN, "
        S = S + " Directory.IncludeSubDirs, "
        S = S + " Directory.DB_ID,"
        S = S + " Directory.VersionFiles, "
        S = S + " Directory.ckDisableDir, "
        S = S + " Directory.OcrDirectory, "
        S = S + " Directory.RetentionCode, "
        S = S + " Directory.ArchiveSkipBit, "
        S = S + " Directory.OcrPdf "
        S = S + " FROM  Directory "
        If TgtFolder$.Trim.Length > 0 Then
        S = S + " WHERE Directory.UserID = '" + UID$ + "' and (AdminDisabled = 0 or AdminDisabled is null) and FQN = '" + TgtFolder$ + "' or isSysDefault = 1 "
        Else
        S = S + " WHERE Directory.UserID = '" + UID$ + "' and (AdminDisabled = 0 or AdminDisabled is null)  or isSysDefault = 1 "
        End If

        S = S + " order by Directory.fqn"

        tgtFolders.Clear()

        Dim I As Integer = 0

        Dim ConnStr$ = Me.getConnStr(SecureID)
        Dim Conn As New SqlConnection(ConnStr)
        Dim b As Boolean = False

        Dim FQN$ = ""
        Dim IncludeSubDirs$ = ""
        Dim DB_ID$ = ""
        Dim VersionFiles$ = ""
        Dim DisableFolder$ = ""
        Dim OcrDirectory$ = ""
        Dim OcrPdf As String = ""
        Dim RetentionCode$ = ""
        Dim FirstEntryComplete As Boolean = False
        Dim SUBFQN$ = ""
        Dim ArchiveSkipBit$ = ""

        Dim ListOfFiles As New List(Of String)

        Dim DbConnStr$ = ""

        Using Conn
        If Conn.State = ConnectionState.Closed Then
        Conn.Open()
        End If

        Dim command As New SqlCommand(S, Conn)
        Dim RSData As SqlDataReader = Nothing
        RSData = command.ExecuteReader()
        I = 0
        If RSData.HasRows Then
        Do While RSData.Read()
        If gTerminateImmediately Then
        Return
        End If
        FQN$ = RSData.GetValue(0).ToString
        FQN$ = UTIL.RemoveSingleQuotes(FQN$)

        Dim ParentDir$ = FQN

        'If InStr(FQN, "xuser", CompareMethod.Text) > 0 Then
        '    Console.WriteLine("Here 999")
        'End If

        If InStr(FQN, "%userid%", CompareMethod.Text) > 0 And Not gCurrLoginID.ToUpper.Equals("SERVICEMANAGER") Then
        If gClipBoardActive = True Then Console.WriteLine("Wildcard directory: " + FQN)
        Dim S1$ = ""
        Dim S2$ = ""
        Dim iLoc As Integer = InStr(FQN, "%userid%", CompareMethod.Text)
        S1 = Mid(FQN, 1, iLoc - 1)
        S2 = Mid(FQN, iLoc + Len("%userid%"))
        Dim UserName As String = System.Environment.UserName
        FQN = S1 + UserName + S2
        ParentDir$ = FQN
        Else
        Dim D As Directory
        FQN = UTIL.ReplaceSingleQuotes(FQN)
        If Not D.Exists(FQN) Then
        GoTo SkipThisOne
        End If
        End If

        IncludeSubDirs$ = RSData.GetValue(1).ToString
        DB_ID$ = RSData.GetValue(2).ToString
        VersionFiles$ = RSData.GetValue(3).ToString
        DisableFolder$ = RSData.GetValue(4).ToString
        OcrDirectory = RSData.GetValue(5).ToString
        RetentionCode = RSData.GetValue(6).ToString
        ArchiveSkipBit$ = RSData.GetValue(7).ToString
        OcrPdf = RSData.GetValue(8).ToString

        If DisableFolder$.ToUpper.Equals("Y") Then
        GoTo SkipThisOne
        End If

        AddArchiveDir(FQN$)

        If SUBFQN.Length = 0 Then
        '** do nothing
        ElseIf SUBFQN.Trim.Length > 0 Then
        FQN = SUBFQN
        End If

        ListOfFiles.Clear()
        If IncludeSubDirs$.Equals("Y") And TgtFolder$.Trim.Length = 0 Then
        If UseCommandProcessForInventory = True Then
        Dim BB As Boolean = DMA.getSubDirs(FQN, ListOfFiles)
        If BB = False Then
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        Else
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        End If

        If Not ListOfFiles.Contains(FQN) Then
        ListOfFiles.Add(FQN)
        End If

        For k As Integer = 0 To ListOfFiles.Count - 1
        Dim tFqn$ = ListOfFiles.Item(k)
        Dim SS$ = tFqn$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode + "|" + ParentDir$ + "|" + ArchiveSkipBit$ + "|" + OcrPdf
        If tgtFolders.Contains(SS) Then
        'Console.WriteLine("Duplicate: " + FQN)
        Else
        tgtFolders.Add(SS)
        End If
        Next
        SkipThisOne:
        I = I + 1
        Loop
        End If
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Conn.Close()
        Conn = Nothing
        End Using

        End Sub
    #End If


    #If frmReconShow Then
        Public Function setContentArchiveFileFolder(Byref SecureID As Integer, ByVal UID$, ByRef tgtFolders As List(Of String), ByVal TgtFolder$) As Boolean

        TgtFolder$ = UTIL.RemoveSingleQuotes(TgtFolder$)

        Dim isGood As Boolean = False

        Dim S$ = " "
        IXV1 = 0
        DMA.IXV1 = 0
        Dim AutoIncludeSubDirs$ = System.Configuration.ConfigurationManager.AppSettings("AutoIncludeSubDirs")

        'S = "delete FROM [DirectoryTemp] where [gCurrUserGuidID] = '" + gCurrUserGuidID + "' "
        'Me.ExecuteSqlNewConn(SecureID,S, False)

        S = S + " SELECT Directory.FQN, "
        S = S + " Directory.IncludeSubDirs, "
        S = S + " Directory.DB_ID,"
        S = S + " Directory.VersionFiles, "
        S = S + " Directory.ckDisableDir, "
        S = S + " Directory.OcrDirectory, "
        S = S + " Directory.RetentionCode, "
        S = S + " Directory.ArchiveSkipBit "
        S = S + " FROM  Directory "
        If TgtFolder$.Trim.Length > 0 Then
        S = S + " WHERE Directory.UserID = '" + UID$ + "' and (AdminDisabled = 0 or AdminDisabled is null) and FQN = '" + TgtFolder$ + "' "
        Else
        S = S + " WHERE Directory.UserID = '" + UID$ + "' and (AdminDisabled = 0 or AdminDisabled is null) "
        End If

        S = S + " order by Directory.fqn"

        tgtFolders.Clear()

        Dim I As Integer = 0

        Dim ConnStr$ = Me.getConnStr(SecureID)
        Dim Conn As New SqlConnection(ConnStr)
        Dim b As Boolean = False

        Dim FQN$ = ""
        Dim IncludeSubDirs$ = ""
        Dim DB_ID$ = ""
        Dim VersionFiles$ = ""
        Dim DisableFolder$ = ""
        Dim OcrDirectory$ = ""
        Dim RetentionCode$ = ""
        Dim FirstEntryComplete As Boolean = False
        Dim SUBFQN$ = ""
        Dim ArchiveSkipBit$ = ""

        Dim ListOfFiles As New List(Of String)

        Dim DbConnStr$ = ""

        Using Conn
        If Conn.State = ConnectionState.Closed Then
        Conn.Open()
        End If

        Dim command As New SqlCommand(S, Conn)
        Dim RSData As SqlDataReader = Nothing
        RSData = command.ExecuteReader()
        I = 0
        If RSData.HasRows Then
        Do While RSData.Read()
        isGood = True
        If gTerminateImmediately Then
        Return False
        End If
        FQN$ = RSData.GetValue(0).ToString
        FQN$ = UTIL.RemoveSingleQuotes(FQN$)

        Dim ParentDir$ = FQN

        'If InStr(FQN, "xuser", CompareMethod.Text) > 0 Then
        '    Console.WriteLine("Here 999")
        'End If

        If InStr(FQN, "%userid%", CompareMethod.Text) > 0 And Not gCurrLoginID.ToUpper.Equals("SERVICEMANAGER") Then
        If gClipBoardActive = True Then Console.WriteLine("Wildcard directory: " + FQN)
        Dim S1$ = ""
        Dim S2$ = ""
        Dim iLoc As Integer = InStr(FQN, "%userid%", CompareMethod.Text)
        S1 = Mid(FQN, 1, iLoc - 1)
        S2 = Mid(FQN, iLoc + Len("%userid%"))
        Dim UserName As String = System.Environment.UserName
        FQN = S1 + UserName + S2
        ParentDir$ = FQN
        Else
        Dim D As Directory
        FQN = UTIL.ReplaceSingleQuotes(FQN)
        If Not D.Exists(FQN) Then
        GoTo SkipThisOne
        End If
        End If

        IncludeSubDirs$ = RSData.GetValue(1).ToString
        DB_ID$ = RSData.GetValue(2).ToString
        VersionFiles$ = RSData.GetValue(3).ToString
        DisableFolder$ = RSData.GetValue(4).ToString
        OcrDirectory = RSData.GetValue(5).ToString
        RetentionCode = RSData.GetValue(6).ToString
        ArchiveSkipBit$ = RSData.GetValue(7).ToString

        If DisableFolder$.ToUpper.Equals("Y") Then
        GoTo SkipThisOne
        End If

        AddArchiveDir(FQN$)

        If SUBFQN.Length = 0 Then
        '** do nothing
        ElseIf SUBFQN.Trim.Length > 0 Then
        FQN = SUBFQN
        End If

        ListOfFiles.Clear()
        If IncludeSubDirs$.Equals("Y") And TgtFolder$.Trim.Length = 0 Then
        If UseCommandProcessForInventory = True Then
        Dim BB As Boolean = DMA.getSubDirs(FQN, ListOfFiles)
        If BB = False Then
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        Else
        ListOfFiles = DMA.GetDirsRecursive(FQN)
        End If
        End If

        If Not ListOfFiles.Contains(FQN) Then
        ListOfFiles.Add(FQN)
        End If

        For k As Integer = 0 To ListOfFiles.Count - 1
        Dim tFqn$ = ListOfFiles.Item(k)
        Dim SS$ = tFqn$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode + "|" + ParentDir$ + "|" + ArchiveSkipBit$
        If tgtFolders.Contains(SS) Then
        'Console.WriteLine("Duplicate: " + FQN)
        Else
        tgtFolders.Add(SS)
        End If
        Next
        SkipThisOne:
        I = I + 1
        Loop
        End If
        RSData.Close()
        RSData = Nothing
        command.Connection.Close()
        command = Nothing
        Conn.Close()
        Conn = Nothing
        End Using
        Return isGood
        End Function
    #End If

        Public Sub xGetContentArchiveFileFolders(Byref SecureID As Integer, ByVal UID$, ByRef aFolders$())

            Dim S$ = " "
            S = S + " select FQN, IncludeSubDirs, DB_ID, VersionFiles, ckDisableDir, OcrDirectory, RetentionCode"
            S = S + " from Directory where UserID = '" + UID + "' or isSysDefault = 1 "
            S = S + " UNION ALL "
            S = S + " select subFQN as FQN, 'N' as IncludeSubDirs, 'na' AS DB_ID, VersionFiles, ckDisableDir, OcrDirectory, ' '  as RetentionCode "
            S = S + " from SubDir where UserID = '" + UID + "' or isSysDefault = 1 "
            S = S + " and subFQN not in (select FQN from Directory)"
            S = S + " ORDER BY FQN"

            ReDim aFolders$(0)
            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim SUBFQN$ = ""
            Dim IncludeSubDirs$ = ""
            Dim DB_ID$ = ""
            Dim VersionFiles$ = ""
            Dim DisableFolder$ = ""
            Dim OcrDirectory$ = ""
            Dim RetentionCode$ = ""

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                I = 0
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SUBFQN$ = RSData.GetValue(0).ToString
                        SUBFQN$ = UTIL.RemoveSingleQuotes(SUBFQN$)
                        IncludeSubDirs$ = RSData.GetValue(1).ToString
                        DB_ID$ = RSData.GetValue(2).ToString
                        VersionFiles$ = RSData.GetValue(3).ToString
                        DisableFolder$ = RSData.GetValue(4).ToString
                        OcrDirectory = RSData.GetValue(5).ToString
                        RetentionCode = RSData.GetValue(6).ToString

                        If I = 0 Then
                            aFolders$(0) = SUBFQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode
                        Else
                            ReDim Preserve aFolders$(I)
                            aFolders$(I) = SUBFQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + OcrDirectory + "|" + RetentionCode
                        End If
                        I = I + 1
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

        End Sub

        Public Sub GetContentArchiveFileFolders(Byref SecureID As Integer, ByVal UID$, ByRef aFolders$(), ByVal DirPath$)

            Dim S$ = "Select     S.SUBFQN, D.IncludeSubDirs, D.DB_ID, D.VersionFiles, D.ckDisableDir, D.FQN"
            S = S + " FROM         Directory AS D FULL OUTER JOIN"
            S = S + "                       SubDir AS S ON D.UserID = S.UserID AND D.FQN = S.FQN"
            S = S + " WHERE     (D.UserID = '" + UID$ + "')"
            S = S + " ORDER BY S.SUBFQN"

            ReDim aFolders$(0)
            Dim I As Integer = 0
            Dim DirFound As Boolean = False

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim SUBFQN$ = ""
            Dim IncludeSubDirs$ = ""
            Dim DB_ID$ = ""
            Dim VersionFiles$ = ""
            Dim DisableFolder$ = ""
            Dim ParentDir$ = ""

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                I = 0
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SUBFQN$ = RSData.GetValue(0).ToString
                        SUBFQN$ = UTIL.RemoveSingleQuotes(SUBFQN$)
                        IncludeSubDirs$ = RSData.GetValue(1).ToString
                        DB_ID$ = RSData.GetValue(2).ToString
                        VersionFiles$ = RSData.GetValue(3).ToString
                        DisableFolder$ = RSData.GetValue(4).ToString
                        ParentDir$ = RSData.GetValue(5).ToString
                        ParentDir$ = UTIL.RemoveSingleQuotes(ParentDir$)
                        If UCase(SUBFQN).Equals(UCase(DirPath$)) Then
                            aFolders$(0) = SUBFQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$
                            DirFound = True
                            Exit Do
                        End If
                        If SUBFQN$.Length = 0 And (UCase(ParentDir$).Equals(UCase(DirPath$))) Then
                            aFolders$(0) = ParentDir$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$
                            DirFound = True
                            Exit Do
                        End If
                        I = I + 1
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
                If Not DirFound Then
                    aFolders$(0) = DirPath$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$
                End If
            End Using

        End Sub

        Public Sub GetQuickArchiveFileFolders(Byref SecureID As Integer, ByVal UID$, ByRef aFolders$(), ByVal DirPath$)

            Dim S$ = "Select     S.SUBFQN, D.IncludeSubDirs, D.DB_ID, D.VersionFiles, D.ckDisableDir, D.FQN, D.RetentionCode"
            S = S + " FROM         QuickDirectory AS D FULL OUTER JOIN"
            S = S + "                       SubDir AS S ON D.UserID = S.UserID AND D.FQN = S.FQN"
            S = S + " WHERE     (D.UserID = '" + UID$ + "')"
            S = S + " ORDER BY S.SUBFQN"

            ReDim aFolders$(0)
            Dim I As Integer = 0
            Dim DirFound As Boolean = False

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim SUBFQN$ = ""
            Dim IncludeSubDirs$ = ""
            Dim DB_ID$ = ""
            Dim VersionFiles$ = ""
            Dim DisableFolder$ = ""
            Dim ParentDir$ = ""
            Dim RetentionCode$ = ""

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                I = 0
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SUBFQN$ = RSData.GetValue(0).ToString
                        SUBFQN$ = UTIL.RemoveSingleQuotes(SUBFQN$)
                        IncludeSubDirs$ = RSData.GetValue(1).ToString
                        DB_ID$ = RSData.GetValue(2).ToString
                        VersionFiles$ = RSData.GetValue(3).ToString
                        DisableFolder$ = RSData.GetValue(4).ToString
                        ParentDir$ = RSData.GetValue(5).ToString
                        ParentDir$ = UTIL.RemoveSingleQuotes(ParentDir$)
                        RetentionCode = RSData.GetValue(6).ToString
                        If UCase(SUBFQN).Equals(UCase(DirPath$)) Then
                            aFolders$(0) = SUBFQN$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + RetentionCode
                            DirFound = True
                            Exit Do
                        End If
                        If SUBFQN$.Length = 0 And (UCase(ParentDir$).Equals(UCase(DirPath$))) Then
                            aFolders$(0) = ParentDir$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$ + "|" + RetentionCode
                            DirFound = True
                            Exit Do
                        End If
                        I = I + 1
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
                If Not DirFound Then
                    aFolders$(0) = DirPath$ + "|" + IncludeSubDirs$ + "|" + DB_ID$ + "|" + VersionFiles$ + "|" + DisableFolder$
                End If
            End Using

        End Sub

        '     SELECT [ArchiveEmails]
        '      ,[RemoveAfterArchive]
        '      ,[SetAsDefaultFolder]
        '      ,[ArchiveAfterXDays]
        '      ,[RemoveAfterXDays]
        '      ,[RemoveXDays]
        '      ,[ArchiveXDays]
        '      ,[DB_ID]
        '  FROM [Email]
        'where UserID = 'wmiller'
        Function GetEmailFolderParms(Byref SecureID As Integer, ByVal TopFolder$, ByVal UID$, ByVal FolderName$, ByRef ArchiveEmails$, ByRef RemoveAfterArchive$, ByRef SetAsDefaultFolder$, ByRef ArchiveAfterXDays$, ByRef RemoveAfterXDays$, ByRef RemoveXDays$, ByRef ArchiveXDays$, ByRef DB_ID$, ByRef ArchiveOnlyIfRead$) As Boolean

            ArchiveEmails$ = ""
            RemoveAfterArchive$ = ""
            SetAsDefaultFolder$ = ""
            ArchiveAfterXDays$ = ""
            RemoveAfterXDays$ = ""
            RemoveXDays$ = ""
            ArchiveXDays$ = ""
            DB_ID$ = ""

            Dim BB As Boolean = False

            FolderName$ = UTIL.RemoveSingleQuotes(FolderName$)

            '** Sometimes, the full name includeing the "|" is passed in -
            '** If so, just remove the string up to the "|" and fix it,
            '** and continue.

            If InStr(FolderName$, "|", CompareMethod.Text) > 0 Then
                FolderName = Mid(FolderName, InStr(FolderName$, "|", CompareMethod.Text) + 1)
            End If

            Dim S$ = "Select [ArchiveEmails]"
            S = S + " ,[RemoveAfterArchive]"
            S = S + " ,[SetAsDefaultFolder]"
            S = S + " ,[ArchiveAfterXDays]"
            S = S + " ,[RemoveAfterXDays]"
            S = S + " ,[RemoveXDays]"
            S = S + " ,[ArchiveXDays]"
            S = S + " ,[DB_ID], ArchiveOnlyIfRead "
            S = S + " from [EmailArchParms] "
            S = S + " where UserID = '" + UID + "' "
            S = S + " and  [FolderName] = '" + TopFolder$ + "|" + FolderName$ + "'"

            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        BB = True
                        ArchiveEmails$ = RSData.GetValue(0).ToString
                        RemoveAfterArchive$ = RSData.GetValue(1).ToString
                        SetAsDefaultFolder$ = RSData.GetValue(2).ToString
                        ArchiveAfterXDays$ = RSData.GetValue(3).ToString
                        RemoveAfterXDays$ = RSData.GetValue(4).ToString
                        RemoveXDays$ = RSData.GetValue(5).ToString
                        ArchiveXDays$ = RSData.GetValue(6).ToString
                        DB_ID$ = RSData.GetValue(7).ToString
                        ArchiveOnlyIfRead$ = RSData.GetValue(8).ToString
                    Loop
                Else
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR GetEmailFolderParms 100: - could not find: " + S)
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            Return BB
        End Function

        Function GetEmailSubject(Byref SecureID As Integer, ByVal EmailGuid$) As String

            Dim Subject$ = ""

            Dim BB As Boolean = False

            Dim S$ = "Select [Subject]"
            S = S + " from [Email] "
            S = S + " where EmailGuid = '" + EmailGuid + "' "

            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        BB = True
                        Subject = RSData.GetValue(0).ToString
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            Return Subject$
        End Function


        Function GetEmailBody(Byref SecureID As Integer, ByVal EmailGuid$) As String

            Dim Subject$ = ""

            Dim BB As Boolean = False

            Dim S$ = "Select [Body]"
            S = S + " from [Email] "
            S = S + " where EmailGuid = '" + EmailGuid + "' "

            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        BB = True
                        Subject = RSData.GetValue(0).ToString
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            Return Subject$
        End Function

        Function GetDocTitle(Byref SecureID As Integer, ByVal SourceGuid$) As String

            Dim TitleFound As Boolean = False

            Dim Subject$ = ""

            Dim BB As Boolean = False

            Dim S$ = "Select [AttributeValue]     "
            S = S + "   FROM [SourceAttribute]"
            S = S + " where [AttributeName] like 'Title'"
            S = S + " and [SourceGuid] = '" + SourceGuid + "'"

            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    TitleFound = True

                    BB = True
                    Subject = RSData.GetValue(0).ToString

                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using

            If TitleFound = False Then
                Subject = "No subject metadata found, document name is: " + GetDocFilename(SecureID, SourceGuid$)
            End If

            Return Subject$
        End Function

        Function GetDocFilename(Byref SecureID As Integer, ByVal SourceGuid$) As String

            Dim FileName$ = ""

            Dim BB As Boolean = False

            Dim S$ = "Select [SourceName] FROM  [DataSource] where [SourceGuid] = '" + SourceGuid$ + "'"

            Dim I As Integer = 0

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim DbConnStr$ = ""

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If
                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    BB = True
                    RSData.Read()
                    FileName = RSData.GetValue(0).ToString
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
            End Using
            If BB = False Then
                FileName = "No file name supplied for this content."
            Else
                FileName = vbCrLf + FileName
            End If
            Return FileName
        End Function
        Public Sub AddIncludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByVal L As ArrayList, ByVal IncludeSubDirs$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim AllDirs$(0)
            Dim tDir$ = ""
            IncludeSubDirs$ = IncludeSubDirs$.ToUpper
            If IncludeSubDirs$.Equals("N") Then
                tDir$ = FQN
                GetIncludedFiletypes(SecureID, tDir, L)
            Else
                AllDirs = FQN.Split("\")
                For i As Integer = 0 To UBound(AllDirs)
                    tDir = tDir + AllDirs(i)
                    GetIncludedFiletypes(SecureID, tDir, L)
                    tDir = tDir + "\"
                Next
            End If
        End Sub

        Public Sub AddExcludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByVal L As ArrayList, ByVal IncludeSubDirs$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim AllDirs$(0)
            Dim tDir$ = ""
            IncludeSubDirs$ = IncludeSubDirs$.ToUpper
            If IncludeSubDirs$.Equals("N") Then
                tDir$ = FQN
                GetExcludedFiletypes(SecureID, tDir, L)
            Else
                AllDirs = FQN.Split("\")
                For i As Integer = 0 To UBound(AllDirs)
                    tDir = tDir + AllDirs(i)
                    Me.GetExcludedFiletypes(SecureID, tDir, L)
                    tDir = tDir + "\"
                Next
            End If
        End Sub

        Public Sub GetAllIncludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByVal L As ArrayList, ByVal IncludeSubDirs$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            L.Clear()
            Dim AllDirs$(0)
            Dim tDir$ = ""
            IncludeSubDirs$ = IncludeSubDirs$.ToUpper
            If IncludeSubDirs$.Equals("N") Then
                tDir$ = FQN
                GetIncludedFiletypes(SecureID, tDir, L)
            Else
                AllDirs = FQN.Split("\")
                For i As Integer = 0 To UBound(AllDirs)
                    tDir = tDir + AllDirs(i)
                    GetIncludedFiletypes(SecureID, tDir, L)
                    tDir = tDir + "\"
                Next
            End If
        End Sub
        Public Sub GetAllExcludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByVal L As ArrayList, ByVal IncludeSubDirs$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            L.Clear()
            Dim AllDirs$(0)
            Dim tDir$ = ""
            IncludeSubDirs$ = IncludeSubDirs$.ToUpper
            If IncludeSubDirs$.Equals("N") Then
                tDir$ = FQN
                GetExcludedFiletypes(SecureID, tDir, L)
            Else
                AllDirs = FQN.Split("\")
                For i As Integer = 0 To UBound(AllDirs)
                    tDir = tDir + AllDirs(i)
                    Me.GetExcludedFiletypes(SecureID, tDir, L)
                    tDir = tDir + "\"
                Next
            End If
        End Sub

        Public Sub GetIncludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByVal L As ArrayList)
            L.Clear()

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = ""

            If FQN.Length = 0 Then
                S$ = "Select distinct [ExtCode] FROM [IncludedFiles] order by [ExtCode]"
            Else
                FQN = UTIL.RemoveSingleQuotes(FQN)
                S$ = "Select [ExtCode] FROM [IncludedFiles] where FQN = '" + FQN$ + "' order by [ExtCode]"
            End If

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim IncludeExt$ = ""
            L.Clear()

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        IncludeExt$ = RSData.GetValue(0).ToString
                        IncludeExt$ = UCase(IncludeExt$)
                        IncludeExt$ = IncludeExt$.Trim
                        If Mid(IncludeExt$, 1, 1) = "." Then
                            IncludeExt$ = Mid(IncludeExt$, 2)
                            IncludeExt$ = IncludeExt$.Trim
                        End If
                        If Not L.Contains(IncludeExt$) Then
                            L.Add(IncludeExt$)
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
                L.Sort()
            End Using

        End Sub

        Public Sub GetExcludedFiletypes(Byref SecureID As Integer, ByVal FQN$, ByRef L As ArrayList)

            L.Clear()

            FQN = UTIL.RemoveSingleQuotes(FQN)

            Dim S$ = "Select [ExtCode] FROM [ExcludedFiles] where FQN = '" + FQN$ + "' order by [ExtCode]"

            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Dim IncludeExt$ = ""
            L.Clear()

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        IncludeExt$ = RSData.GetValue(0).ToString
                        IncludeExt$ = UCase(IncludeExt$)
                        IncludeExt$ = IncludeExt$.Trim
                        If Mid(IncludeExt$, 1, 1) = "." Then
                            IncludeExt$ = Mid(IncludeExt$, 2)
                            IncludeExt$ = IncludeExt$.Trim
                        End If
                        If Not L.Contains(IncludeExt$) Then
                            L.Add(IncludeExt$)
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
                Conn.Close()
                Conn = Nothing
                L.Sort()
            End Using

        End Sub

        Sub AddSecondarySOURCETYPE(Byref SecureID As Integer, ByVal Sourcetypecode$, ByVal Sourcetypedesc$, ByVal Storeexternal$, ByVal Indexable$)

            Dim ST As New clsSOURCETYPE(SecureID)
            ST.setSourcetypecode(Sourcetypecode)
            ST.setSourcetypedesc(Sourcetypedesc)
            ST.setStoreexternal(Storeexternal)
            ST.setIndexable(Indexable)
            ST.Insert()

        End Sub

        Sub delSecondarySOURCETYPE(Byref SecureID As Integer, ByVal Sourcetypecode$)
            Dim ST As New clsSOURCETYPE(SecureID)
            ST.setSourcetypecode(Sourcetypecode)
            Dim WhereClause$ = "Where SourceTypeCode = '" + Sourcetypecode + "'"
            ST.Delete(WhereClause$)
        End Sub

        Function FindAllTableIndexes(Byref SecureID As Integer, ByVal TBL$) As Array
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = ""
            S = S + " select distinct si.name"
            S = S + " from sys.indexes si"
            S = S + " inner join sys.index_columns ic on si.object_id = ic.object_id and si.index_id = ic.index_id"
            S = S + " inner join information_schema.tables st on object_name(si.object_id) = st.table_name"
            S = S + " inner join information_schema.columns sc on ic.column_id = sc.ordinal_position and sc.table_name = st.table_name"
            S = S + " where si.name Is Not null And si.index_id > 0 And si.is_hypothetical = 0 "
            S = S + " and sc.table_name = '" + TBL$ + "'"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim IndexName$ = ""

            Dim TblIndexes$(0)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    IndexName = RSData.GetValue(0).ToString
                    II = UBound(TblIndexes) + 1
                    ReDim Preserve TblIndexes(II)
                    TblIndexes(II) = IndexName$
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            Return TblIndexes$

        End Function

        Function FindAllIndexCols(Byref SecureID As Integer, ByVal TBL$, ByVal IdxName$) As Array
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = ""
            S = S + " select distinct sc.table_name,si.name,si.type_desc,sc.column_name"
            S = S + " from sys.indexes si"
            S = S + " inner join sys.index_columns ic on si.object_id = ic.object_id and si.index_id = ic.index_id"
            S = S + " inner join information_schema.tables st on object_name(si.object_id) = st.table_name"
            S = S + " inner join information_schema.columns sc on ic.column_id = sc.ordinal_position and sc.table_name = st.table_name"
            S = S + " where si.name Is Not null And si.index_id > 0 And si.is_hypothetical = 0 "
            S = S + " and sc.table_name = '" + TBL$ + "'"
            S = S + " and name = '" + IdxName$ + "'"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim ColName$ = ""

            Dim IndexColumns$(0)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    ColName = RSData.GetValue(3).ToString
                    ColName = TBL + "|" + ColName
                    II = UBound(IndexColumns$) + 1
                    ReDim Preserve IndexColumns$(II)
                    IndexColumns$(II) = ColName$
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            Return IndexColumns$

        End Function

        Function getColumnDataType(Byref SecureID As Integer, ByVal TBL$, ByVal ColName$) As String
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = ""
            S = S + " SELECT table_name, column_name, is_nullable, data_type, character_maximum_length"
            S = S + " FROM information_schema.columns "
            S = S + " where  table_name = '" + TBL$ + "'"
            S = S + " AND column_name = '" + ColName$ + "'"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim DataType$ = ""
            Dim IsNullable$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    IsNullable$ = RSData.GetValue(2).ToString
                    DataType$ = RSData.GetValue(3).ToString
                    DataType$ = DataType$ + "|" + IsNullable$
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            Return DataType$

        End Function

        Public Function GetRowByKey(Byref SecureID As Integer, ByVal TBL$, ByVal WC$) As SqlDataReader
            Try
                Dim Auth$ = ""
                Dim s As String = "Select * from " + TBL + " " + WC
                Dim rsData As SqlDataReader = Nothing
                Dim b As Boolean = False
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    Auth = rsData.GetValue(0).ToString
                    Return rsData
                Else
                    Return Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12330, "clsDataBase:GetRowByKey", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetRowByKey : 3963 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetRowByKey : 3931 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetRowByKey : 3945 : " + ex.Message)
                Return Nothing
            End Try

        End Function



        Public Function ckArchEmailFolder(Byref SecureID As Integer, ByVal KeyFolder$, ByVal UserID$) As Integer

            Dim b As Boolean = True
            Dim S As String = "Select count(*) "
            S = S + "   FROM [EmailFolder]"
            S = S + " where [SelectedForArchive] = 'Y'"
            S = S + " and FolderName ='" + KeyFolder$ + "'"
            S = S + " and UserID ='" + UserID$ + "'"
            Dim i As Integer = 0
            Dim tQuery As String = ""

            'Dim i As Integer
            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function getArchEmailFolderIDByFolder(Byref SecureID As Integer, ByVal KeyFolder$, ByVal UserID$) As String

            Dim b As Boolean = True
            Dim S As String = "Select FolderID "
            S = S + "   FROM [EmailFolder]"
            S = S + " where [SelectedForArchive] = 'Y'"
            S = S + " and FolderName ='" + KeyFolder$ + "'"
            S = S + " and UserID ='" + UserID$ + "'"
            Dim i As Integer = 0
            Dim tQuery As String = ""

            'Dim i As Integer
            Dim VAL$ = ""

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                RSData.Read()
                Try
                    VAL = RSData.GetValue(0).ToString
                Catch ex As Exception
                    VAL = ""
                End Try

                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return VAL

        End Function
        Public Function ckArchChildEmailFolder(Byref SecureID As Integer, ByVal FolderID$, ByVal UserID$) As Integer

            Dim b As Boolean = True
            Dim S As String = "Select COUNT(*) from EmailFolder "
            S = S + " where FolderID = '" + FolderID$ + "'"
            S = S + " and UserID = '" + UserID$ + "'"
            Dim i As Integer = 0
            Dim tQuery As String = ""

            'Dim i As Integer
            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return cnt

        End Function

        Public Function getArchEmailFolderRetentionCode(Byref SecureID As Integer, ByVal FolderID$, ByVal UserID$) As String
            Dim rCode$ = ""
            Dim b As Boolean = True
            Dim S As String = "Select RetentionCode "
            S = S + "   FROM [EmailFolder]"
            S = S + " where "
            S = S + " FolderID ='" + FolderID$ + "'"
            S = S + " and UserID ='" + UserID$ + "'"
            Dim i As Integer = 0
            Dim tQuery As String = ""

            'Dim i As Integer
            Dim cnt As Integer = -1

            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                RSData.Read()
                rCode$ = RSData.GetValue(0).ToString
                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using

            Return rCode$

        End Function

        Public Function iCount(Byref SecureID As Integer, ByVal Tbl$, ByVal WhereClause$) As Boolean
            Dim b As Boolean = True
            Dim SQL As String = "Select count(*) from " + Tbl + " " + WhereClause
            Dim i As Integer = 0

            i = iGetRowCount(SecureID, SQL)
            If i = 0 Then
                b = False
            End If
            Return b
        End Function

        Public Function iGetRowCount(Byref SecureID As Integer, ByVal TBL$, ByVal WhereClause$) As Integer

            Dim cnt As Integer = -1

            Try
                Dim tQuery As String = ""
                Dim s As String = ""

                s = "Select count(*) as CNT from " + TBL + " " + WhereClause

                Using gConn

                    Dim RSData As SqlDataReader = Nothing

                    Dim CS as string = getConnStr(SecureID)
                    Dim CONN As New SqlConnection(CS)
                    CONN.Open()
                    Dim command As New SqlCommand(s, CONN)
                    RSData = command.ExecuteReader()


                    RSData.Read()
                    cnt = RSData.GetInt32(0)

                    If Not RSData.IsClosed Then
                        RSData.Close()
                    End If
                    RSData = Nothing
                    command.Dispose()
                    command = Nothing

                    If CONN.State = ConnectionState.Open Then
                        CONN.Close()
                    End If
                    CONN.Dispose()
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12335, "clsDataBase:iGetRowCount", ex.Message)
                'MsgBox("Error 3932.11: " + ex.Message)
                If dDebug Then Debug.Print("Error .11: " + ex.Message)
                Console.WriteLine("Error 3932.11.11: " + ex.Message)
                cnt = 0
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iGetRowCount : 4010 : " + ex.Message)
            End Try

            Return cnt

        End Function

        Public Function iGetRowCount(Byref SecureID As Integer, ByVal TBL$, ByVal WhereClause$, ByVal ConnectionStr$) As Integer

            Dim cnt As Integer = -1

            Dim tConn As New SqlConnection(ConnectionStr)
            If tConn.State = ConnectionState.Closed Then
                tConn.Open()
            End If

            Try
                Dim tQuery As String = ""
                Dim s As String = ""

                s = "Select count(*) as CNT from " + TBL + " " + WhereClause

                Using tConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12335, "clsDataBase:iGetRowCount", ex.Message)
                'MsgBox("Error 3932.11: " + ex.Message)
                If dDebug Then Debug.Print("Error 3932.11.12: " + ex.Message)
                Console.WriteLine("Error 3932.11.12: " + ex.Message)
                cnt = 0
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iGetRowCount : 4010 : " + ex.Message)
            End Try
            If tConn.State = ConnectionState.Open Then
                tConn.Close()
            End If

            tConn = Nothing
            Return cnt

        End Function

        Public Function ArchiveEmail(Byref SecureID As Integer, ByVal FqnEmailImage As String, ByVal EmailGuid As String, ByVal SUBJECT As String, ByVal SentTO As String, ByVal Body As String, ByVal Bcc As String, ByVal BillingInformation As String, ByVal CC As String, ByVal Companies As String, ByVal CreationTime As DateTime, ByVal ReadReceiptRequested As String, ByVal ReceivedByName As String, ByVal ReceivedTime As DateTime, ByVal AllRecipients As String, ByVal UserID As String, ByVal SenderEmailAddress As String, ByVal SenderName As String, ByVal Sensitivity As String, ByVal SentOn As DateTime, ByVal MsgSize$, ByVal DeferredDeliveryTime As DateTime, ByVal EntryID As String, ByVal ExpiryTime As DateTime, ByVal LastModificationTime As DateTime, ByVal ShortSubj As String, ByVal SourceTypeCode As String, ByVal OriginalFolder As String) As Boolean
            FqnEmailImage = UTIL.RemoveSingleQuotes(FqnEmailImage)
            Dim B As Boolean = False

            EmailGuid = UTIL.RemoveSingleQuotes(EmailGuid)
            SUBJECT = UTIL.RemoveSingleQuotes(SUBJECT)
            SentTO = UTIL.RemoveSingleQuotes(SentTO)
            Body = UTIL.RemoveSingleQuotes(Body)
            Bcc = UTIL.RemoveSingleQuotes(Bcc)
            BillingInformation = UTIL.RemoveSingleQuotes(BillingInformation)
            CC = UTIL.RemoveSingleQuotes(CC)
            Companies = UTIL.RemoveSingleQuotes(Companies)
            CreationTime = UTIL.RemoveSingleQuotes(CreationTime)
            ReadReceiptRequested = UTIL.RemoveSingleQuotes(ReadReceiptRequested)
            ReceivedByName = UTIL.RemoveSingleQuotes(ReceivedByName)
            ReceivedTime = UTIL.RemoveSingleQuotes(ReceivedTime)
            AllRecipients = UTIL.RemoveSingleQuotes(AllRecipients)
            UserID = UTIL.RemoveSingleQuotes(UserID)
            SenderEmailAddress = UTIL.RemoveSingleQuotes(SenderEmailAddress)
            SenderName = UTIL.RemoveSingleQuotes(SenderName)
            Sensitivity = UTIL.RemoveSingleQuotes(Sensitivity)
            SentOn = UTIL.RemoveSingleQuotes(SentOn)
            MsgSize = UTIL.RemoveSingleQuotes(MsgSize)
            DeferredDeliveryTime = UTIL.RemoveSingleQuotes(DeferredDeliveryTime)
            EntryID = UTIL.RemoveSingleQuotes(EntryID)
            ExpiryTime = UTIL.RemoveSingleQuotes(ExpiryTime)
            LastModificationTime = UTIL.RemoveSingleQuotes(LastModificationTime)

            Try
                Dim EmailBinary() As Byte = CF.FileToByte(FqnEmailImage)
                'UserID, ReceivedByName As String, ReceivedTime As DateTime, SenderEmailAddress As String, SenderName As String, SentOn As DateTime
                Using connection As New SqlConnection(Me.getConnStr(SecureID))
                    Using command As New SqlCommand("EmailInsProc", connection)
                        command.CommandType = CommandType.StoredProcedure

                        command.Parameters.Add(New SqlParameter("@EmailGuid", EmailGuid))
                        command.Parameters.Add(New SqlParameter("@SUBJECT", SUBJECT))
                        command.Parameters.Add(New SqlParameter("@SentTO", SentTO))
                        command.Parameters.Add(New SqlParameter("@Body", Body))
                        command.Parameters.Add(New SqlParameter("@Bcc", Bcc))
                        command.Parameters.Add(New SqlParameter("@BillingInformation", BillingInformation))
                        command.Parameters.Add(New SqlParameter("@CC", CC))
                        command.Parameters.Add(New SqlParameter("@Companies", Companies))
                        command.Parameters.Add(New SqlParameter("@CreationTime", CreationTime))
                        command.Parameters.Add(New SqlParameter("@ReadReceiptRequested", ReadReceiptRequested))
                        command.Parameters.Add(New SqlParameter("@ReceivedByName", ReceivedByName))
                        command.Parameters.Add(New SqlParameter("@ReceivedTime", ReceivedTime))
                        command.Parameters.Add(New SqlParameter("@AllRecipients", AllRecipients))
                        command.Parameters.Add(New SqlParameter("@UserID", UserID))
                        command.Parameters.Add(New SqlParameter("@SenderEmailAddress", SenderEmailAddress))
                        command.Parameters.Add(New SqlParameter("@SenderName", SenderName))
                        command.Parameters.Add(New SqlParameter("@Sensitivity", Sensitivity))
                        command.Parameters.Add(New SqlParameter("@SentOn", SentOn))
                        command.Parameters.Add(New SqlParameter("@MsgSize", MsgSize))
                        command.Parameters.Add(New SqlParameter("@DeferredDeliveryTime", DeferredDeliveryTime))
                        command.Parameters.Add(New SqlParameter("@EntryID", EntryID))
                        command.Parameters.Add(New SqlParameter("@ExpiryTime", ExpiryTime))
                        command.Parameters.Add(New SqlParameter("@LastModificationTime", LastModificationTime))
                        command.Parameters.Add(New SqlParameter("@EmailImage", EmailBinary))
                        command.Parameters.Add(New SqlParameter("@ShortSubj", ShortSubj))
                        command.Parameters.Add(New SqlParameter("@SourceTypeCode", SourceTypeCode))
                        command.Parameters.Add(New SqlParameter("@OriginalFolder", OriginalFolder))

                        connection.Open()
                        command.ExecuteNonQuery()
                        connection.Close()
                        connection.Dispose()
                        command.Dispose()
                    End Using
                End Using
                B = True
            Catch ex As Exception
                xTrace(SecureID, 12340, "clsDataBase:ArchiveEmail", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                'Debug.Print(ex.StackTrace)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase :  : 4076 : " + ex.Message)
            End Try
            Return B
        End Function

        Public Sub InsertEmailBinary(Byref SecureID As Integer, ByVal FQN$, ByVal tGuid$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            ' Read a bitmap contents in a stream
            Dim fs As FileStream = New FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read)
            Dim rawData() As Byte = New Byte(fs.Length) {}
            fs.Read(rawData, 0, System.Convert.ToInt32(fs.Length))
            fs.Close()
            ' Construct a SQL string and a connection object
            Dim S As String = " "
            S = S + " select * "
            S = S + " FROM  [Email]"
            S = S + " where [EmailGuid] = '" + tGuid$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            ' Open connection
            If gConn.State <> ConnectionState.Open Then
                gConn.Open()
            End If
            ' Create a data adapter and data set
            'Dim cmd As New SqlCommand(S, gConn)
            'Dim da As New SqlDataAdapter(cmd)
            'Dim ds As New Data.DataSet

            Dim con As New SqlConnection(Me.getConnStr(SecureID))
            Dim da As New SqlDataAdapter(S, con)
            Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
            Dim ds As New System.Data.DataSet

            da.Fill(ds, "Emails")
            Dim myRow As System.Data.DataRow
            myRow = ds.Tables("Emails").Rows(0)

            myRow("EmailImage") = rawData
            ds.AcceptChanges()

            MyCB = Nothing
            ds = Nothing
            da = Nothing

            con.Close()
            con = Nothing

        End Sub

        Sub ApplyCC(Byref SecureID As Integer)
            Dim L As New List(Of String)
            Dim RECIPS As New clsRECIPIENTS(SecureID)
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = " SELECT [EmailGuid]     "
            S = S + " ,[CC]      "
            S = S + " FROM  [Email]"
            S = S + " where CC Is Not null "
            S = S + " and len(cc) > 0 "

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim CC$ = ""
            Dim EmailGuid$ = ""

            SL.Clear()

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    EmailGuid = RSData.GetValue(0).ToString
                    CC = RSData.GetValue(1).ToString
                    If Not CC Is Nothing Then
                        SL.Clear()
                        If CC.Trim.Length > 0 Then
                            Dim A$(0)
                            If InStr(1, CC, ";") > 0 Then
                                A = Split(CC, ";")
                            Else
                                A(0) = CC
                            End If
                            For KK As Integer = 0 To UBound(A)
                                Dim SKEY$ = A(KK)
                                If Not SKEY Is Nothing Then
                                    Dim BX As Boolean = SL.ContainsKey(SKEY)
                                    If Not BX Then
                                        SL.Add(SKEY, SKEY)
                                    End If
                                End If
                            Next
                        End If
                        For KK As Integer = 0 To SL.Count - 1
                            Dim Addr$ = SL.Item(KK)

                            RECIPS.setEmailguid(EmailGuid)
                            RECIPS.setRecipient(Addr$)

                            Dim BX As Integer = RECIPS.cnt_PK32A(EmailGuid, Addr)
                            If BX = 0 Then
                                RECIPS.setTyperecp("RECIP")
                                RECIPS.Insert()
                            Else
                                RECIPS.setTyperecp("CC")
                                Dim SS$ = "UPDATE  [Recipients]"
                                SS = SS + " SET [TypeRecp] = 'CC'"
                                SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' "
                                SS = SS + " and Recipient = '" + Addr$ + "'"
                                L.Add(SS)
                            End If

                        Next
                    End If
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            For II = 0 To L.Count - 1
                S = L.Item(II).ToString
                Dim bb As Boolean = ExecuteSqlNewConn(SecureID, S, False)
                If Not bb Then
                    If dDebug Then Debug.Print("ERROR: " + S)
                End If
            Next

        End Sub

        Sub BuildAllRecips(Byref SecureID As Integer)
            Dim L As New List(Of String)
            Dim RECIPS As New clsRECIPIENTS(SecureID)
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = " SELECT [EmailGuid] ,[Recipient] ,[TypeRecp] FROM  [Recipients] order by EmailGuid "

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim CC$ = ""
            Dim EmailGuid$ = ""
            Dim Recipient$ = ""
            Dim TypeRecp$ = ""
            Dim CurrGuid$ = ""
            Dim PrevGuid$ = ""
            Dim AllRecipients$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    EmailGuid = RSData.GetValue(0).ToString
                    Recipient$ = RSData.GetValue(1).ToString
                    TypeRecp$ = RSData.GetValue(2).ToString
                    If II = 1 Then
                        PrevGuid$ = EmailGuid
                    End If
                    If Not EmailGuid.Equals(PrevGuid$) Then
                        Dim SS$ = "UPDATE  [Email]"
                        SS = SS + " SET [AllRecipients] = '" + Mid(AllRecipients$, 2) + "'"
                        SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' "
                        L.Add(SS)
                        AllRecipients$ = ""
                        AllRecipients$ = AllRecipients$ + ";" + Recipient$
                    Else
                        AllRecipients$ = AllRecipients$ + ";" + Recipient$
                    End If
                    PrevGuid$ = EmailGuid
    #If frmReconShow Then
        frmReconMain.SB.Text = "Recips: " + II.ToString
    #End If
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            For II = 0 To L.Count - 1
                S = L.Item(II).ToString
                Dim bb As Boolean = ExecuteSqlNewConn(SecureID, S, False)
                If Not bb Then
                    If dDebug Then Debug.Print("ERROR: " + S)
                End If
    #If frmReconShow Then
        frmReconMain.SB.Text = "Applying Recips: " + II.ToString
    #End If
                'Application.DoEvents()
            Next

        End Sub

        Sub BuildAllMissingData(Byref SecureID As Integer)
            Dim L As New List(Of String)
            Dim RECIPS As New clsRECIPIENTS(SecureID)
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = " SELECT SourceGuid, FQN FROM DataSource "

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim CC$ = ""
            Dim SourceGuid$ = ""
            Dim FQN = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    SourceGuid = RSData.GetValue(0).ToString
                    FQN = RSData.GetValue(1).ToString
                    FQN = DMA.GetFilePath(FQN)

                    Dim SS$ = "UPDATE [DataSource] "
                    SS = SS + " SET [FileDirectory] = '" + FQN + "'"
                    SS = SS + " WHERE SourceGuid = '" + SourceGuid + "' "
                    L.Add(SS)
    #If frmReconShow Then
        frmReconMain.SB.Text = "Files Read: " + II.ToString
    #End If
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            For II = 0 To L.Count - 1
                S = L.Item(II).ToString
                Dim bb As Boolean = ExecuteSqlNewConn(SecureID, S, False)
                If Not bb Then
                    If dDebug Then Debug.Print("ERROR: " + S)
                End If
    #If frmReconShow Then
        frmReconMain.SB.Text = "Applying Files: " + II.ToString
    #End If

                'Application.DoEvents()
            Next

        End Sub

        Sub BuildAllCCs(Byref SecureID As Integer)
            Dim L As New List(Of String)
            Dim RECIPS As New clsRECIPIENTS(SecureID)
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = " SELECT [EmailGuid] ,[Recipient] ,[TypeRecp] FROM  [Recipients] where TypeRecp = 'CC' order by EmailGuid "

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim CC$ = ""
            Dim EmailGuid$ = ""
            Dim Recipient$ = ""
            Dim TypeRecp$ = ""
            Dim CurrGuid$ = ""
            Dim PrevGuid$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    EmailGuid = RSData.GetValue(0).ToString
                    Recipient$ = RSData.GetValue(1).ToString
                    TypeRecp$ = RSData.GetValue(2).ToString
                    If II = 1 Then
                        PrevGuid$ = EmailGuid
                    End If
                    If Not EmailGuid.Equals(PrevGuid$) Then
                        Dim SS$ = "UPDATE  [Email]"
                        SS = SS + " SET [CC] = '" + Mid(CC, 2) + "'"
                        SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' "
                        L.Add(SS)
                        CC = ""
                        CC = CC + ";" + Recipient$
                    Else
                        CC = CC + ";" + Recipient$
                    End If
                    PrevGuid$ = EmailGuid
    #If frmReconShow Then
        frmReconMain.SB.Text = "CC: " + II.ToString
    #End If
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            For II = 0 To L.Count - 1
                S = L.Item(II).ToString
                Dim bb As Boolean = ExecuteSqlNewConn(SecureID, S, False)
                If Not bb Then
                    If dDebug Then Debug.Print("ERROR: " + S)
                End If
    #If frmReconShow Then
        frmReconMain.SB.Text = "Applying CC: " + II.ToString
    #End If
                'Application.DoEvents()
            Next

        End Sub

        Sub getExcludedEmails(Byref SecureID As Integer, ByVal UserID$)
            Dim L As New List(Of String)
            Dim RECIPS As New clsRECIPIENTS(SecureID)
            Dim SL As New Dictionary(Of String, String)
            Dim S$ = " SELECT [FromEmailAddr] FROM  [ExcludeFrom] where  Userid = '" + gCurrUserGuidID + "' "

            zeroizeExcludedEmailAddr()

            Dim b As Boolean = True
            Dim Email$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Email = RSData.GetValue(0).ToString
                    AddExcludedEmailAddr(Email$)
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Public Function getDirectoryParms(Byref SecureID As Integer, ByRef A$(), ByVal FQN As String, ByVal UserID As String) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim B As Boolean = False
            ReDim A(0)
            Dim IncludeSubDirs$ = ""
            Dim VersionFiles$ = ""
            Dim ckMetaData$ = ""
            Dim NumberOfDirs As Integer = 0
            Dim CurrDir As Integer = 0
            Dim I As Integer = 0
            Dim OcrDirectory$ = ""
            Dim OcrPdf As String = ""
            Dim RetentionCode$ = ""

            For I = 1 To FQN.Length
                Dim ch$ = Mid(FQN, I, 1)
                If ch = "\" Then
                    NumberOfDirs += 1
                End If
            Next
            CurrDir = NumberOfDirs
            Dim DIRS$() = Split(FQN, "\")
    REDO:
            Dim CurrFqn$ = ""
            For I = 0 To CurrDir
                If I = 0 Then
                    CurrFqn$ = DIRS(0)
                Else
                    CurrFqn$ = CurrFqn$ + "\" + DIRS(I)
                End If
            Next

            Try
                Dim rsData As SqlDataReader = Nothing
                Dim S$ = ""
                S = S + " SELECT [UserID]"
                S = S + " ,[IncludeSubDirs]"
                S = S + " ,[FQN]"
                S = S + " ,[DB_ID]"
                S = S + " ,[VersionFiles]"
                S = S + " ,[ckMetaData] "
                S = S + " ,OcrDirectory "
                S = S + " ,RetentionCode"
                S = S + " ,OcrPdf"
                S = S + " FROM [Directory]"
                S = S + " where fqn = '" + CurrFqn$ + "' and Userid = '" + UserID + "'"

                Dim CS as string = getConnStr(SecureID)

                Dim CONN As New SqlConnection(CS)
                CONN.Open()

                setConnStr(SecureID)
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()

                If rsData.HasRows Then
                    Do While rsData.Read()
                        B = True
                        IncludeSubDirs$ = rsData.GetValue(1).ToString
                        VersionFiles$ = rsData.GetValue(4).ToString
                        ckMetaData$ = rsData.GetValue(5).ToString
                        OcrDirectory = rsData.GetValue(6).ToString
                        RetentionCode = rsData.GetValue(7).ToString
                        OcrPdf = rsData.GetValue(8).ToString
                        ReDim A(6)
                        A(0) = IncludeSubDirs$
                        A(1) = VersionFiles$
                        A(2) = ckMetaData$
                        A(3) = OcrDirectory
                        A(4) = RetentionCode
                        A(5) = Ocrpdf
                    Loop
                End If
                rsData.Close()
                rsData = Nothing

                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            Catch ex As Exception
                xTrace(SecureID, 12341, "clsDataBase:getDirectoryParms", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getDirectoryParms : 4390 : " + ex.Message)
            End Try
            If B Then
                Return True
            Else
                ReDim A(6)
                A(0) = IncludeSubDirs$
                A(1) = VersionFiles$
                A(2) = ckMetaData$
                A(3) = OcrDirectory
                If RetentionCode.Length = 0 Then
                    RetentionCode = getFirstRetentionCode(SecureID)
                End If
                A(4) = RetentionCode
                A(5) = OcrPdf
                If CurrDir = 1 Then
                    Return False
                Else
                    CurrDir = CurrDir - 1
                    If CurrDir <= 0 Then
                        A(0) = "N"   'IncludeSubDirs$
                        A(1) = "Y"   'VersionFiles$
                        A(2) = "N"   'ckMetaData$
                        A(3) = "Y"   'OcrDirectory
                        A(4) = getFirstRetentionCode(SecureID)
                        A(5) = "Y"   'OcrPdf
                        Return False
                    Else
                        GoTo REDO
                    End If

                End If
            End If
        End Function
        Public Function getFirstRetentionCode(Byref SecureID As Integer) As String
            Dim rCode$ = ""
            Dim S$ = "Select RetentionCode "
            S = S + " FROM [Retention]"
            Dim I As Integer = 0
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()

                If RSData.HasRows Then
                    RSData.Read()
                    rCode$ = RSData.GetValue(0).ToString
                End If

                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()


            Catch ex As Exception
                xTrace(SecureID, 12341, "clsDataBase:getFirstRetentionCode", ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getFirstRetentionCode : 4419 : " + ex.Message)
            End Try
            Return rCode$
        End Function
        Public Function getNextDocVersionNbr(Byref SecureID As Integer, ByVal Userid$, ByVal FQN$) As Integer
            FQN$ = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = "Select max([VersionNbr]) "
            S = S + " FROM DataSource"
            S = S + " where fqn = '" + FQN + "'"
            S = S + " and [DataSourceOwnerUserID] = '" + Userid$ + "'"
            Dim I As Integer = 0
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    I = Val(RSData.GetValue(0).ToString)
                End If
                RSData.Close()
                RSData = Nothing
                Return I + 1
            Catch ex As Exception
                xTrace(SecureID, 12341, "clsDataBase:getNextDocVersionNbr", ex.Message)
                I = -1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : getNextDocVersionNbr : 4419 : " + ex.Message)
            End Try
            Return I
        End Function

        Public Function DeleteDocumentByName(Byref SecureID As Integer, ByVal Userid$, ByVal FQN$, ByVal SourceGuid$) As Boolean
            FQN$ = UTIL.RemoveSingleQuotes(FQN)
            Dim b As Boolean = False

            Dim S$ = "delete "

            S = S + " FROM DataSource"
            S = S + " where fqn = '" + FQN + "'"
            S = S + " and [DataSourceOwnerUserID] = '" + Userid$ + "' or SourceGuid = '" + SourceGuid$ + "'"

            Try
                b = ExecuteSqlNewConn(SecureID, S, False)
                Return b
            Catch ex As Exception
                xTrace(SecureID, 12345, "clsDataBase:DeleteDocumentByName", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : DeleteDocumentByName : 4429 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : DeleteDocumentByName : 4402 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : DeleteDocumentByName : 4417 : " + ex.Message)
                Return b
            End Try

            'S = " delete FROM DataSource"
            'S = S + " where SourceGuid = '" + SourceGuid$ + "'"

            'Try
            '    b = ExecuteSqlNewConn(SecureID,S,false)
            '    Return b
            'Catch ex As Exception
            ' if ddebug then    Debug.Print(ex.Message)
            '    Return b
            'End Try

        End Function

        Public Function DeleteDocumentByGuid(Byref SecureID As Integer, ByVal SourceGuid$) As Boolean
            Dim SHIST As New clsSEARCHHISTORY(SecureID)
            Dim b As Boolean = False

            Dim S$ = "delete "

            S = S + " FROM DataSource"
            S = S + " where SourceGuid = '" + SourceGuid$ + "'"
            Dim I As Integer = 0
            Try
                b = ExecuteSqlNewConn(SecureID, S, False)
                S = "DELETE FROM [SourceAttribute] WHERE SourceGuid = '" + SourceGuid + "' "
                b = ExecuteSqlNewConn(SecureID, S, False)

                SHIST.setCalledfrom("clsDatabase:DeleteDocumentByGuid")
                SHIST.setEndtime(Now.ToString)
                SHIST.setReturnedrows("1")
                SHIST.setTypesearch("Delete")
                SHIST.setStarttime(Now.ToString)
                SHIST.setSearchdate(Now.ToString)
                SHIST.setSearchsql(S)
                SHIST.setUserid(gCurrUserGuidID)
                b = SHIST.Insert
                If Not b Then
                    Console.WriteLine("Error 1943.244 - Failed to save history of search.")
                End If
                b = True
            Catch ex As Exception
                xTrace(SecureID, 12345, "clsDataBase:DeleteDocumentByGuid", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : DeleteDocumentByGuid : 4438 : " + ex.Message)
                b = False
            End Try

            SHIST = Nothing
            Return b
        End Function

        Public Function hasDocumentBeenUpdated(Byref SecureID As Integer, ByVal Userid$, ByVal FQN$) As Boolean
            FQN$ = UTIL.RemoveSingleQuotes(FQN)
            Dim b As Boolean = False

            Dim S$ = "delete "

            S = S + " FROM DataSource"
            S = S + " where fqn = '" + FQN + "'"
            S = S + " and [DataSourceOwnerUserID] = '" + Userid$ + "'"
            Dim I As Integer = 0
            Try
                b = ExecuteSqlNewConn(SecureID, S, False)
                Return b
            Catch ex As Exception
                xTrace(SecureID, 12345, "clsDataBase:hasDocumentBeenUpdated", ex.Message)
                If dDebug Then Debug.Print(ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : hasDocumentBeenUpdated : 4449 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : hasDocumentBeenUpdated : 4424 : " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : hasDocumentBeenUpdated : 4441 : " + ex.Message)
                Return b
            End Try

        End Function

        Public Sub UpdateDocSize(Byref SecureID As Integer, ByVal DocGuid$, ByVal fSize$)
            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [FileLength] = " + fSize
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "Failed to update File Size for GUID '" + DocGuid + "'.")
            End If

        End Sub

        Public Sub UpdateDocSize(Byref SecureID As Integer, ByVal FQN$, ByVal UID$, ByVal fSize$)

            FQN = UTIL.RemoveSingleQuotes(FQN)

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [FileLength] = " + fSize
            S = S + "  WHERE [DataSourceOwnerUserID] = '" + UID$ + "' and FQN = '" + FQN + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "Failed to update File Size for FQN '" + FQN + "'.")
            End If

        End Sub

        Public Sub UpdateDocFqn(Byref SecureID As Integer, ByVal DocGuid$, ByVal FQN$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [FQN] = '" + FQN + "' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "Failed to update File FQN '" + FQN + "'.")
            End If

        End Sub

        Public Sub UpdateDocCrc(Byref SecureID As Integer, ByVal DocGuid$, ByVal CRC$)

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [CRC] = '" + CRC + "' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LOG.WriteToSaveSql("Failed to update File FQN '" + CRC + "'.")
            End If

        End Sub
        Public Sub xUpdateAllDocCrc(Byref SecureID As Integer, ByVal FQN As String, ByVal CRC$)

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [CRC] = '" + CRC + "' "
            S = S + "  WHERE [FQN] = '" + FQN + "'"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LOG.WriteToSaveSql("Failed to update File FQN '" + CRC + "'.")
            End If

        End Sub
        Public Sub UpdateDocOriginalFileType(Byref SecureID As Integer, ByVal DocGuid$, ByVal OriginalFileType$)
            OriginalFileType = UTIL.RemoveSingleQuotes(OriginalFileType)
            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [OriginalFileType] = '" + OriginalFileType + "' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "Failed to update OriginalFileType '" + OriginalFileType + "'.")
            End If

        End Sub

        Public Sub UpdateZipFileIndicator(Byref SecureID As Integer, ByVal DocGuid$, ByVal cZipFile As Boolean)

            Dim C As String = ""
            If cZipFile Then
                C = "Y"
            Else
                C = "N"
            End If

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [IsZipFile] = '" + C + "' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 285.34.2 Failed to update ZIPFILE flag: '" + DocGuid$ + "'.")
            End If

        End Sub
        Public Sub UpdateEmailIndicator(Byref SecureID As Integer, ByVal DocGuid$, ByVal EmailGuid$)
            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [EmailGuid] = '" + EmailGuid + "', isEmailAttachment = 1 "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 285.34.2 UpdateEmailIndicator: Failed to update EMAIL flag: '" + DocGuid$ + "'.")
            End If

        End Sub

        Public Sub UpdateZipFileOwnerGuid(Byref SecureID As Integer, ByVal ParentGuid$, ByVal ZipFileGuid$, ByVal ZipFileFQN$)

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [ZipFileGuid] = '" + ParentGuid$ + "', ZipFileFQN = '" + ZipFileFQN$ + "' "
            S = S + "  WHERE [SourceGuid] = '" + ZipFileGuid$ + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 2858.34.2 Failed to update ZIPFILE FQN: '" + ParentGuid$ + "'.")
            End If

        End Sub

        Public Sub UpdateIsContainedWithinZipFile(Byref SecureID As Integer, ByVal DocGuid$)

            Dim C As String = ""

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [isContainedWithinZipFile] = 'Y' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 285.34.21 Failed to update ZIPFILE flag: '" + DocGuid$ + "'.")
            End If

        End Sub

        Public Sub UpdateDocDir(Byref SecureID As Integer, ByVal DocGuid$, ByVal DocDir$)

            DocDir$ = UTIL.RemoveSingleQuotes(DocDir$)
            DocDir = DMA.GetFilePath(DocDir)

            Dim S$ = ""
            S = S + "  UPDATE [DataSource]"
            S = S + "  set [FileDirectory] = '" + DocDir$ + "' "
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "Failed to update File Size for GUID '" + DocGuid + "'.")
            End If

        End Sub

        Public Function DeleteDataSourceAndAttrs(Byref SecureID As Integer, ByVal WhereClause$) As Boolean
            Dim s$ = ""
            Dim B As Boolean = False
            s = "delete from SourceAttribute where [SourceGuid] in (SELECT [SourceGuid] FROM DataSource " + WhereClause$ + ")"
            B = ExecuteSqlNewConn(SecureID, S, False)
            If B Then
                s = "delete from datasource " + WhereClause$
                B = ExecuteSqlNewConn(SecureID, S, False)
            Else
                B = False
            End If
            Return B
        End Function

        Public Function getProcessFileAsExt(Byref SecureID As Integer, ByVal FileExt$) As String
            If FileExt.Trim.Length = 0 Then
                Return ".UKN"
            End If
            Dim NexExt$ = ""
            Dim ProcessExtCode$ = ""
            Dim S$ = "Select [ExtCode]"
            S = S + " ,[ProcessExtCode]"
            S = S + " FROM  [ProcessFileAs]"
            S = S + " where ExtCode = '" + FileExt$ + "'"

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()

            If RSData.HasRows Then
                RSData.Read()
                NexExt$ = RSData.GetValue(0).ToString
                ProcessExtCode = RSData.GetValue(1).ToString
            Else
                NexExt$ = Nothing
            End If
            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            Return ProcessExtCode
        End Function

        Sub SetDocumentPublicFlagByOwnerDir(Byref SecureID As Integer, ByVal FQN$, ByVal PublicFlag As Boolean, ByVal bDisableDir As Boolean, ByVal OcrDirectory$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim UID$ = gCurrUserGuidID

            Dim S$ = ""
            Dim sFlag$ = ""
            'Dim iFlag$ = ""
            Dim B As Boolean
            Dim DisableDir$ = ""

            If PublicFlag Then
                sFlag$ = "Y"
                'iFlag$ = "1"
            Else
                sFlag$ = "N"
                'iFlag$ = "0"
            End If
            If bDisableDir Then
                DisableDir$ = "Y"
            Else
                DisableDir$ = "N"
            End If

            Dim SS$ = ""

            '*******************************************************
            S = "update [Directory] set [ckPublic] = '" + sFlag$ + "', ckDisableDir = '" + DisableDir$ + "' where Userid = '" + UID$ + "' and [FQN] = '" + FQN + "'"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                LogMessage(SecureID,gCurrUserGuidID, "Info 01 : SetDocPubFlg: " + S)
            End If

            S = "update [Directory] set [ckPublic] = '" + sFlag$ + "', ckDisableDir = '" + DisableDir$ + "' where Userid = '" + UID$ + "' and [FQN] = '" + FQN$ + "'"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                LogMessage(SecureID,gCurrUserGuidID, "Info 02 : SetDocPubFlg: " + S)
            End If

            S = "update [Directory] set [OcrDirectory] = '" + OcrDirectory$ + "' where Userid = '" + UID$ + "' and [FQN] = '" + FQN$ + "'"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                LogMessage(SecureID,gCurrUserGuidID, "Info 03 : SetDocPubFlg: " + S)
            End If

            '*******************************************************
            S = "update [SubDir] set ckPublic = '" + sFlag$ + "', ckDisableDir = '" + DisableDir$ + "' where Userid = '" + UID$ + "' "
            S = S + " and ([FQN] = '" + FQN$ + "' or [SUBFQN] = '" + FQN$ + "')"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "Info 04 : SetDocPubFlg: " + S)
            End If

            S = "update [SubDir] set ckPublic = '" + sFlag$ + "', ckDisableDir = '" + DisableDir$ + "' where Userid = '" + UID$ + "' "
            S = S + " and ([FQN] = '" + FQN$ + "' or [SUBFQN] = '" + FQN$ + "')"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "Info 05 : SetDocPubFlg: " + S)
            End If
            '*******************************************************
            S = "update [DataSource] set [isPublic] = '" + sFlag$ + "'"
            S = S + " where FileDirectory = '" + FQN$ + "'"
            S = S + " and DataSourceOwnerUserID = '" + UID$ + "'"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "Info 06 : SetDocPubFlg: " + S)
            End If

            S = "update [DataSource] set [isPublic] = '" + sFlag$ + "'"
            S = S + " where FileDirectory = '" + FQN$ + "'"
            S = S + " and DataSourceOwnerUserID = '" + UID$ + "'"
            SS = SS + vbCrLf + vbCrLf + S
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            Else
                If dDebug Then LogMessage(SecureID,gCurrUserGuidID, "Info 07 : SetDocPubFlg: " + S)
            End If

        End Sub

        Sub SetDocumentPublicFlag(Byref SecureID As Integer, ByVal UID$, ByVal FQN$, ByVal PublicFlag As Boolean)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = ""
            Dim sFlag$ = ""
            Dim iFlag$ = ""
            Dim B As Boolean
            Dim DisableDir$ = ""

            If PublicFlag Then
                sFlag$ = "Y"
                'iFlag$ = "1"
            Else
                sFlag$ = "N"
                'iFlag$ = "0"
            End If

            S = "update [Directory] set [ckPublic] = '" + sFlag$ + "' where Userid = '" + UID$ + "' and [FQN] = '" + FQN$ + "'"
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
                xtrace(SecureID, 93925, "clsDataBase:SetDocumentPublicFlag", S)
            End If

            S = "update [SubDir] set ckPublic = '" + sFlag$ + "' where Userid = '" + UID$ + "' "
            S = S + " and ([FQN] = '" + FQN$ + "' or [SUBFQN] = '" + FQN$ + "')"
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            End If

            S = "update [DataSource] set [isPublic] = '" + sFlag$ + "'"
            S = S + " where FileDirectory = '" + FQN$ + "'"
            S = S + " and DataSourceOwnerUserID = '" + UID$ + "'"
            B = ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
                xtrace(SecureID, 93926, "clsDataBase:SetDocumentPublicFlag", S)
            End If

        End Sub
        Function ckMasterAlreadyDefined(Byref SecureID As Integer, ByVal SourceName$) As Integer

            Dim con As New SqlConnection(Me.getConnStr(SecureID))
            con.Open()
            'Dim command As New SqlCommand(s, con)
            Dim RSData As SqlDataReader = Nothing

            Dim cnt As Integer = -1

            Try
                Dim tQuery As String = ""

                Dim S$ = "Select COUNT(*) from DataSource where SourceName = '" + SourceName$ + "' and isMaster ='Y'"

                Using con
                    RSData = SqlQry(SecureID, S, con)
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12360, "clsDataBase:ckMasterAlreadyDefined", ex.Message)
                Console.WriteLine("Error ckMasterAlreadyDefined 3932.11.14: " + ex.Message)
                cnt = 0
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : ckMasterAlreadyDefined : 5163 : " + ex.Message)
            Finally
                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                'command.Connection.Close()
                'command = Nothing
                If con.State = ConnectionState.Open Then
                    con.Close()
                End If
                con = Nothing

            End Try

            Return cnt

        End Function
        Sub SetDocumentToMaster(Byref SecureID As Integer, ByVal SourceGuid$, ByVal MasterFlag As Boolean)

        Dim S$ = ""
        Dim sFlag$ = ""
        Dim iFlag$ = ""
        Dim B As Boolean
        Dim DisableDir$ = ""

        If MasterFlag Then
        sFlag$ = "Y"
        'iFlag$ = "1"
        Else
        sFlag$ = "N"
        'iFlag$ = "0"
        End If

        S = "update [DataSource] set [isMaster] = '" + sFlag$ + "'"
        S = S + " where SourceGuid = '" + SourceGuid$ + "'"
        B = ExecuteSqlNewConn(SecureID, S, False)
        If Not B Then
        xtrace(SecureID, 93926, "clsDataBase:SetDocumentToMaster", "Failed to set public flag in DataSource table.")
        xtrace(SecureID, 93926, "clsDataBase:SetDocumentToMaster", S)
        End If

        End Sub
        Sub SetDocumentPublicFlag(Byref SecureID As Integer, ByVal SourceGuid$, ByVal isPublic As Boolean)

        Dim S$ = ""
        Dim sFlag$ = ""
        Dim iFlag$ = ""
        Dim B As Boolean
        Dim DisableDir$ = ""

        If isPublic Then
        sFlag$ = "Y"
        'iFlag$ = "1"
        Else
        sFlag$ = "N"
        'iFlag$ = "0"
        End If

        S = "update [DataSource] set [isPublic] = '" + sFlag$ + "'"
        S = S + " where SourceGuid = '" + SourceGuid$ + "'"
        B = ExecuteSqlNewConn(SecureID, S, False)
        If Not B Then
        xtrace(SecureID, 939288, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
        xtrace(SecureID, 939288, "clsDataBase:SetDocumentPublicFlag", S)
        End If

        End Sub
        Sub SetEmailPublicFlag(Byref SecureID As Integer, ByVal EmailGuid$, ByVal isPublic As Boolean)

        Dim S$ = ""
        Dim sFlag$ = ""
        Dim iFlag$ = ""
        Dim B As Boolean
        Dim DisableDir$ = ""

        If isPublic Then
        sFlag$ = "Y"
        'iFlag$ = "1"
        Else
        sFlag$ = "N"
        'iFlag$ = "0"
        End If

        S = "update [Email] set [isPublic] = '" + sFlag$ + "'"
        S = S + " where EmailGuid = '" + EmailGuid$ + "'"
        B = ExecuteSqlNewConn(SecureID, S, False)
        If Not B Then
        xTrace(SecureID, 939288, "clsDataBase:SetEmailPublicFlag", "Failed to set public flag in Email table.")
        xTrace(SecureID, 939288, "clsDataBase:SetEmailPublicFlag", S)
        End If

        End Sub
        Sub addImageUsingDataset(Byref SecureID As Integer, ByVal S$, ByVal FQN$, ByVal SrcTable$)
        FQN = UTIL.RemoveSingleQuotes(FQN)
        'Dim da As New SqlDataAdapter("Select SourceImage From SourceImage where SourceGuid = 'SourceGuid' and DataSourceOwnerUserID = 'DataSourceOwnerUserID'", gConn)
        'FQN = "C:\winnt\Gone Fishing.BMP"
        CloseConn(SecureID)
        CkConn(SecureID)

        Dim da As New SqlDataAdapter(S, gConn)
        Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
        Dim ds As New DataSet()

        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        Dim fs As New FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read)
        Dim MyData(fs.Length) As Byte
        fs.Read(MyData, 0, fs.Length)
        fs.Close()
        gConn.Open()
        da.Fill(ds, SrcTable$)
        Dim myRow As DataRow

        myRow = ds.Tables(SrcTable$).NewRow()
        myRow("SourceImage") = MyData

        ds.Tables(SrcTable$).Rows.Add(myRow)
        da.Update(ds, SrcTable$)

        fs = Nothing
        MyCB = Nothing
        ds = Nothing
        da = Nothing

        gConn.Close()
        gConn = Nothing
        If gRunUnattended = False Then MsgBox("Image saved to database")
        End Sub

        Sub updateImageUsingDataset(Byref SecureID As Integer, ByVal S$, ByVal FQN$, ByVal SrcTable$)
        FQN = UTIL.RemoveSingleQuotes(FQN)
        'Dim da As New SqlDataAdapter("Select SourceImage From SourceImage where SourceGuid = 'SourceGuid' and DataSourceOwnerUserID = 'DataSourceOwnerUserID'", gConn)
        'FQN = "C:\winnt\Gone Fishing.BMP"
        CloseConn(SecureID)
        CkConn(SecureID)

        Dim da As New SqlDataAdapter(S, gConn)
        Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
        Dim ds As New DataSet()

        da.MissingSchemaAction = MissingSchemaAction.AddWithKey

        Dim fs As New FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read)
        Dim MyData(fs.Length) As Byte
        fs.Read(MyData, 0, fs.Length)
        fs.Close()
        gConn.Open()
        da.Fill(ds, SrcTable$)
        Dim myRow As DataRow

        '.NewRow()
        myRow = ds.Tables(SrcTable$).NewRow
        myRow("SourceImage") = MyData

        '.Add(myRow)
        ds.Tables("MyImages").Rows.Add(myRow)
        da.Update(ds, "MyImages")

        fs = Nothing
        MyCB = Nothing
        ds = Nothing
        da = Nothing

        gConn.Close()
        gConn = Nothing
        If gRunUnattended = False Then MsgBox("Image saved to database")
        End Sub

        ''' <summary>
        '''
        ''' </summary>
        ''' <param name="SourceGuid">The Source GUID to download</param>
        ''' <param name="FQN">The returned name of the selected file including the file extension.</param>
        ''' <param name="CompressedDataBuffer">The buffer to receive the compressed binary file data</param>
        ''' <param name="OriginalSize">the Original size fo the file</param>
        ''' <param name="CompressedSize">the Compressed size fo the file</param>
        ''' <param name="RC">True indicates success, False indicates failure</param>
        ''' <remarks></remarks>
        Sub writeImageSourceDataFromDbWriteToFile(Byref SecureID As Integer, ByVal SourceGuid As String, ByRef FQN As String, ByRef CompressedDataBuffer() As Byte, ByRef OriginalSize As Integer, ByRef CompressedSize As Integer, ByRef RC As Boolean)

        FQN = ""
        Dim B As Boolean = True
        Dim SourceTblName As String = "DataSource"
        Dim ImageFieldName As String = "SourceImage"

        Try
        Dim S$ = ""
        S = S + " SELECT " + vbCrLf
        S = S + " SourceName, SourceImage " + vbCrLf
        S = S + " FROM  [DataSource]" + vbCrLf
        S = S + " where [SourceGuid] = '" + SourceGuid$ + "'" + vbCrLf

                Dim CN As New SqlConnection(getConnStr(SecureID))

        If CN.State = ConnectionState.Closed Then
        CN.Open()
        End If

        Dim da As New SqlDataAdapter(S, CN)
        Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
        Dim ds As New DataSet()

        da.Fill(ds, SourceTblName$)
        Dim myRow As DataRow
        myRow = ds.Tables(SourceTblName).Rows(1)

        FQN = myRow("SourceName")
        CompressedDataBuffer = myRow(ImageFieldName)

        If CompressedDataBuffer.Length = 0 Then
        RC = False
        CompressedDataBuffer = Nothing
        Return
        End If

        OriginalSize = CompressedDataBuffer.Length

        Dim gzBuffer() As Byte = Compress(CompressedDataBuffer)

        CompressedDataBuffer = gzBuffer

        MyCB = Nothing
        ds = Nothing
        da = Nothing

        CN.Close()
        CN = Nothing
        GC.Collect()
        Catch ex As Exception
        B = False
        Dim AppName$ = ex.Source
                xTrace(SecureID, 58342.1, "clsDataBase:imageDataReadFromDbWriteToFile", ex.Message)
        LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : writeImageSourceDataFromDbWriteToFile : 4757 : " + ex.Message)
        End Try

        RC = True

        End Sub

        Sub writeAttachmentFromDbWriteToFile(Byref SecureID As Integer, ByVal RowID As String, ByRef FQN As String, ByRef CompressedDataBuffer() As Byte, ByRef OriginalSize As Integer, ByRef CompressedSize As Integer, ByRef RC As Boolean)

        FQN = ""
        Dim B As Boolean = True
        Dim SourceTblName As String = "EmailAttachment"
        Dim ImageFieldName As String = "Attachment"

        Try
        Dim S$ = ""
        S = S + " SELECT " + vbCrLf
        S = S + " AttachmentName, Attachment " + vbCrLf
        S = S + " FROM  [EmailAttachment]" + vbCrLf
        S = S + " where [RowID] = " + RowID + vbCrLf

                Dim CN As New SqlConnection(getConnStr(SecureID))

                If CN.State = ConnectionState.Closed Then
                    CN.Open()
                End If

                Dim da As New SqlDataAdapter(S, CN)
                Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
                Dim ds As New DataSet()

                da.Fill(ds, SourceTblName$)
                Dim myRow As DataRow
                myRow = ds.Tables(SourceTblName$).Rows(1)

                FQN = myRow("AttachmentName")
                CompressedDataBuffer = myRow(ImageFieldName)

                If CompressedDataBuffer.Length = 0 Then
                    RC = False
                    Return
                End If

                FQN = myRow("AttachmentName")

                OriginalSize = CompressedDataBuffer.Length

                Dim gzBuffer() As Byte = Compress(CompressedDataBuffer)

                CompressedDataBuffer = gzBuffer

                MyCB = Nothing
                ds = Nothing
                da = Nothing

                CN.Close()
                CN = Nothing
                GC.Collect()
                RC = True
            Catch ex As Exception
                Dim AppName$ = ex.Source
                xTrace(SecureID, 58342.1, "clsDataBase:imageDataReadFromDbWriteToFile", ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : writeAttachmentFromDbWriteToFile : 4803 : " + ex.Message)
                RC = False
            End Try

        End Sub

        Sub writeEmailFromDbToFile(Byref SecureID As Integer, ByVal EmailGuid As String, ByRef SourceTypeCode As String, ByRef CompressedDataBuffer() As Byte, ByRef OriginalSize As Integer, ByRef CompressedSize As Integer, ByRef RC As Boolean)


            Dim SourceTblName As String = "Email"
            Dim ImageFieldName As String = "EmailImage"
            Try
                'CloseConn(SecureID)
                CkConn(SecureID)

                Dim S$ = ""
                S = S + " SELECT " + vbCrLf
                S = S + " SourceTypeCode, EmailImage " + vbCrLf
                S = S + " FROM  [Email]" + vbCrLf
                S = S + " where [EmailGuid] = '" + EmailGuid + "'" + vbCrLf

                Dim NewConnStr$ = getConnStr(SecureID)
                UTIL.ExtendTimeoutBySize(NewConnStr, 0)

                Dim CN As New SqlConnection(NewConnStr)

                If CN.State = ConnectionState.Closed Then
                    CN.Open()
                End If

                Dim da As New SqlDataAdapter(S, CN)
                Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
                Dim ds As New DataSet()

                da.Fill(ds, SourceTblName$)
                Dim myRow As DataRow
                SourceTypeCode = ds.Tables(SourceTblName).Rows(0).ToString
                myRow = ds.Tables(SourceTblName$).Rows(1)

                Dim MyData() As Byte
                MyData = myRow(ImageFieldName)
                SourceTypeCode = myRow("SourceTypeCode")

                CompressedDataBuffer = myRow(ImageFieldName)

                If CompressedDataBuffer.Length = 0 Then
                    RC = False
                    Return
                End If

                OriginalSize = CompressedDataBuffer.Length

                Dim gzBuffer() As Byte = Compress(CompressedDataBuffer)

                CompressedDataBuffer = gzBuffer

                MyCB = Nothing
                ds = Nothing
                da = Nothing

                CN.Close()
                CN = Nothing
                GC.Collect()
                RC = True
            Catch ex As Exception
                Dim AppName$ = ex.Source
                xTrace(SecureID, 42342.1, "clsDataBase:writeEmailFromDbToFile", ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : writeEmailFromDbToFile : 4879 : " + ex.Message)
                RC = False
            End Try

        End Sub

        Function DbWriteToFile(Byref SecureID As Integer, ByVal UID As String, ByVal SourceGuid As String, ByRef FileName As String) As Boolean

            Dim FQN As String = "\TempContent\"
            Dim B As Boolean = True
            Dim SourceTblName As String = "DataSource"
            Dim ImageFieldName As String = "SourceImage"
            Dim FileBuffer() As Byte
            Dim fExt As String = ""

            Dim ServerPath As String = Path.GetFullPath(Path.Combine(System.AppDomain.CurrentDomain.BaseDirectory, "TempContent/Dale.txt"))
            'MsgBox("Server Path: " + ServerPath)
            Dim FI As New FileInfo(ServerPath)
            Dim dirName As String = FI.DirectoryName
            FI = Nothing

            Try
                Dim S$ = ""
                S = S + " SELECT SourceName, SourceImage, OriginalFileType FROM  [DataSource] where [SourceGuid] = '" + SourceGuid$ + "'"

                Dim CN As New SqlConnection(getConnStr(SecureID))

                If CN.State = ConnectionState.Closed Then
                    CN.Open()
                End If

                Dim da As New SqlDataAdapter(S, CN)
                Dim MyCB As SqlCommandBuilder = New SqlCommandBuilder(da)
                Dim ds As New DataSet()

                da.Fill(ds, SourceTblName$)
                Dim myRow As DataRow
                myRow = ds.Tables(SourceTblName).Rows(0)

                fExt = myRow("OriginalFileType")
                FileName = myRow("SourceName")
                FQN = dirName + "\" + FileName

                FileBuffer = myRow(ImageFieldName)

                If FileBuffer.Length = 0 Then
                    B = False
                    Return B
                End If

                MyCB = Nothing
                ds = Nothing
                da = Nothing

                CN.Close()
                CN = Nothing
                GC.Collect()

                ' Create a file and write the byte data to a file.
                Dim oFileStream As System.IO.FileStream
                oFileStream = New System.IO.FileStream(FQN, System.IO.FileMode.Create)
                oFileStream.Write(FileBuffer, 0, FileBuffer.Length)
                oFileStream.Close()
                oFileStream.Dispose()
                GC.Collect()

                'SendFileToClientV2(FileBuffer, FileName, fExt)

            Catch ex As Exception
                B = False
                Dim AppName$ = ex.Source
                xTrace(SecureID, 58342.1, "clsDataBase:imageDataReadFromDbWriteToFile", ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : writeImageSourceDataFromDbWriteToFile : 4757 : " + ex.Message)
            End Try

            Return B

        End Function

        Private Sub SendFileToClientV2(ByVal file As Byte(), ByVal fileName As String, ByVal fExt As String)

            Dim MimeType As String = UTIL.getMimeType(fExt)

            HttpContext.Current.Response.Clear()
            HttpContext.Current.Response.ContentType = MimeType
            HttpContext.Current.Response.Buffer = True
            HttpContext.Current.Response.Charset = "utf-8"
            HttpContext.Current.Response.Cache.SetCacheability(HttpCacheability.NoCache)
            HttpContext.Current.Response.BinaryWrite(file)
            HttpContext.Current.Response.End()

        End Sub

        Private Sub SendFileToClient(ByVal file As Byte(), ByVal fileName As String, ByVal fExt As String)
            Dim Response As HttpResponse = HttpContext.Current.Response
            Response.Clear()
            Response.AddHeader("Content-Disposition", String.Format("attachment; filename={0}", fileName))
            ' Add a HTTP header to the output stream that contains the
            ' content length(File Size). This lets the browser know how much data is being transfered
            Response.AddHeader("Content-Length", file.Length.ToString())
            ' Set the HTTP MIME type of the output stream
            Dim MimeType As String = UTIL.getMimeType(fExt)
            Response.ContentType = MimeType
            ' Write the data out to the client.
            Response.BinaryWrite(file)
            Response.End()
        End Sub

        Sub getEmailRestoreFqnParms(Byref SecureID As Integer, ByVal EmailGuid$, ByRef Subject$, ByRef CreationTime$, ByRef SentOn$, ByRef MsgSize$)
            Dim S$ = ""
            S = S + " select Subject, CreationTime, SentOn, MsgSize, EmailGuid"
            S = S + " from Email "
            S = S + " where EmailGuid = '" + EmailGuid$ + "'"

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Subject$ = RSData.GetValue(0).ToString
                    CreationTime$ = RSData.GetValue(1).ToString
                    SentOn$ = RSData.GetValue(2).ToString
                    MsgSize$ = RSData.GetValue(3).ToString
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Function getEmailFileRestoreName(Byref SecureID As Integer, ByVal EmailGuid$, ByVal WorkingDirectory$, ByVal Suffix$) As String

            Dim SkipExistingFiles As Boolean = False
            Dim OverwriteExistingFiles As Boolean = False
            Dim doThisForAllFiles As Boolean = False
            Dim VersionFiles As Boolean = False

            Dim FQN$
            Dim Subject$ = ""
            Dim SourceName$ = ""
            Dim CreationTime$ = ""
            Dim SentOn$ = ""
            Dim MsgSize$ = ""
            Dim K As Integer = 1

            getEmailRestoreFqnParms(SecureID, EmailGuid$, Subject$, CreationTime$, SentOn$, MsgSize$)
            If Subject$.Trim.Length = 0 Then
                Subject$ = "NO SUBJECT"
            End If
            SourceName$ = Subject + "." + CreationTime + "." + SentOn + "." + MsgSize
            '** WDM 3/12/2010 SourceName$ = DMA.CheckFileName(SourceName$)
            UTIL.StripUnwantedChars(SourceName)

            SourceName$ += Suffix$.ToUpper

            Dim CH$ = Mid(WorkingDirectory, WorkingDirectory.Trim.Length, 1)
            If CH.Equals("\") Then
            Else
                WorkingDirectory = WorkingDirectory + "\"
            End If

            FQN = WorkingDirectory + SourceName$

            Dim F As File
            If F.Exists(FQN) Then

                '** WDM This section to be incorporated at a later time
                'If doThisForAllFiles = True Then
                '    If SkipExistingFiles = True Then

                '    End If
                '    If OverwriteExistingFiles = True Then

                '    End If

                '    If VersionFiles = True Then

                '    End If
                'Else
                '    If SkipExistingFiles = True Then

                '    End If
                '    If OverwriteExistingFiles = True Then

                '    End If

                '    If VersionFiles = True Then

                '    End If
                'End If

                Do While File.Exists(FQN)
                    K += 1

                    Subject$ = Mid(Subject, 1, 80)
                    Subject = Trim(Subject)
                    SourceName$ = Subject + "." + CreationTime + "." + SentOn + "." + MsgSize + ".Ver" + K.ToString + Suffix$
                    SourceName$ = DMA.CheckFileName(SourceName$)
                    CH = Mid(WorkingDirectory, WorkingDirectory.Trim.Length, 1)
                    If CH.Equals("\") Then
                    Else
                        WorkingDirectory = WorkingDirectory + "\"
                    End If
                    SourceName$ = DMA.CheckFileName(SourceName$)
                    FQN = WorkingDirectory + SourceName$
                Loop
            End If
            Return FQN
        End Function

        Sub PopulateComboBox(Byref SecureID As Integer, ByRef CB As List(Of String), ByVal TblColName As String, ByVal S As String)

            CB.Clear()

            Dim tConn As New SqlConnection(getConnStr(SecureID))
            Dim DA As New SqlDataAdapter(S, tConn)
            Dim DS As New DataSet

            Try

                If tConn.State = ConnectionState.Closed Then
                    tConn.Open()
                End If

                DA.Fill(DS, TblColName)

                'Create and populate the DataTable to bind to the ComboBox:
                Dim dt As New DataTable
                dt.Columns.Add(TblColName, GetType(System.String))

                ' Populate the DataTable to bind to the Combobox.
                Dim drDSRow As DataRow
                Dim drNewRow As DataRow
                Dim iRowCnt As Integer = 0
                For Each drDSRow In DS.Tables(TblColName).Rows()
                    drNewRow = dt.NewRow()
                    drNewRow(TblColName) = drDSRow(TblColName)
                    dt.Rows.Add(drNewRow)
                    iRowCnt += 1
                    Dim tItem$ = drDSRow(0).ToString
                    tItem = UTIL.RemoveSingleQuotes(tItem)
                    CB.Add(tItem)
                Next
                If iRowCnt = 0 Then
                    Return
                End If

                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12350, "clsDataBase:PopulateComboBox", ex.Message)
                If dDebug Then Debug.Print("Error 2194.23: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : PopulateComboBox : 4928.b : " + ex.Message)
            Finally
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If
                GC.Collect()

            End Try
        End Sub
        Sub PopulateComboBoxMerge(Byref SecureID As Integer, ByRef CB As List(Of String), ByVal TblColName$, ByVal S$)

            Dim tConn As New SqlConnection(getConnStr(SecureID))
            Dim DA As New SqlDataAdapter(S, tConn)
            Dim DS As New DataSet

            Try

                If tConn.State = ConnectionState.Closed Then
                    tConn.Open()
                End If

                DA.Fill(DS, TblColName$)

                'Create and populate the DataTable to bind to the ComboBox:
                Dim dt As New DataTable
                dt.Columns.Add(TblColName$, GetType(System.String))

                ' Populate the DataTable to bind to the Combobox.
                Dim drDSRow As DataRow
                Dim drNewRow As DataRow
                Dim iRowCnt As Integer = 0
                For Each drDSRow In DS.Tables(TblColName$).Rows()
                    drNewRow = dt.NewRow()
                    drNewRow(TblColName$) = drDSRow(TblColName$)
                    dt.Rows.Add(drNewRow)
                    iRowCnt += 1
                    Dim tItem$ = drDSRow(0).ToString
                    tItem = UTIL.RemoveSingleQuotes(tItem)
                    Dim bAdd As Boolean = True
                    For II As Integer = 0 To CB.Count - 1
                        If CB(II).ToString.Equals(tItem) Then
                            bAdd = False
                            Exit For
                        End If
                    Next
                    If bAdd = True Then
                        CB.Add(tItem)
                    End If
                Next
                If iRowCnt = 0 Then
                    Return
                End If


                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12350, "clsDataBase:PopulateComboBox", ex.Message)
                If dDebug Then Debug.Print("Error 2194.23: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : PopulateComboBox : 4928.c : " + ex.Message)
            Finally
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If
                GC.Collect()

            End Try
        End Sub

        Sub PopulateListBoxMerge(Byref SecureID As Integer, ByRef LB As List(Of String), ByVal TblColName$, ByVal S$)

            Dim tConn As New SqlConnection(getConnStr(SecureID))
            Dim DA As New SqlDataAdapter(S, tConn)
            Dim DS As New DataSet

            Try

                If tConn.State = ConnectionState.Closed Then
                    tConn.Open()
                End If

                DA.Fill(DS, TblColName$)

                'Create and populate the DataTable to bind to the ComboBox:
                Dim dt As New DataTable
                dt.Columns.Add(TblColName$, GetType(System.String))

                ' Populate the DataTable to bind to the Combobox.
                Dim drDSRow As DataRow
                Dim drNewRow As DataRow
                Dim iRowCnt As Integer = 0
                For Each drDSRow In DS.Tables(TblColName$).Rows()
                    drNewRow = dt.NewRow()
                    drNewRow(TblColName$) = drDSRow(TblColName$)
                    dt.Rows.Add(drNewRow)
                    iRowCnt += 1
                    Dim tItem$ = drDSRow(0).ToString
                    tItem = UTIL.RemoveSingleQuotes(tItem)
                    Dim bAdd As Boolean = True
                    For II As Integer = 0 To LB.Count - 1
                        If LB(II).ToString.Equals(tItem) Then
                            bAdd = False
                            Exit For
                        End If
                    Next
                    If bAdd = True Then
                        LB.Add(tItem)
                    End If
                Next
                If iRowCnt = 0 Then
                    Return
                End If


                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12350, "clsDataBase:PopulateComboBox", ex.Message)
                If dDebug Then Debug.Print("Error 2194.23: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : PopulateComboBox : 4928.d : " + ex.Message)
            Finally
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If
                GC.Collect()

            End Try
        End Sub
        Sub PopulateListBoxRemove(Byref SecureID As Integer, ByRef LB As ListBox, ByVal TblColName$, ByVal S$)

            Dim tConn As New SqlConnection(getConnStr(SecureID))
            Dim DA As New SqlDataAdapter(S, tConn)
            Dim DS As New DataSet

            Try

                If tConn.State = ConnectionState.Closed Then
                    tConn.Open()
                End If

                DA.Fill(DS, TblColName$)

                'Create and populate the DataTable to bind to the ComboBox:
                Dim dt As New DataTable
                dt.Columns.Add(TblColName$, GetType(System.String))

                ' Populate the DataTable to bind to the Combobox.
                Dim drDSRow As DataRow
                Dim drNewRow As DataRow
                Dim iRowCnt As Integer = 0
                For Each drDSRow In DS.Tables(TblColName$).Rows()
                    drNewRow = dt.NewRow()
                    drNewRow(TblColName$) = drDSRow(TblColName$)
                    dt.Rows.Add(drNewRow)
                    iRowCnt += 1
                    Dim tItem$ = drDSRow(0).ToString
                    tItem = UTIL.RemoveSingleQuotes(tItem)
                    Dim bAdd As Boolean = True
                    For II As Integer = 0 To LB.Items.Count - 1
                        If LB.Items(II).ToString.Equals(tItem) Then
                            LB.Items.RemoveAt(II)
                            Exit For
                        End If
                    Next
                Next
                If iRowCnt = 0 Then
                    Return
                End If

                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12350, "clsDataBase:PopulateComboBox", ex.Message)
                If dDebug Then Debug.Print("Error 2194.23: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : PopulateComboBox : 4928.a : " + ex.Message)
            Finally
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not tConn Is Nothing Then
                    tConn.Close()
                    tConn = Nothing
                End If
                GC.Collect()

            End Try
        End Sub
        Sub PopulateListBox(Byref SecureID As Integer, ByRef LB As ListBox, ByVal TblColName$, ByVal SelectionSql$)
            Try
                LB.DataSource = Nothing
                LB.Items.Clear()
                CloseConn(SecureID)
                CkConn(SecureID)
                If gConn.State = ConnectionState.Closed Then
                    gConn.Open()
                End If
                Dim DA As New SqlDataAdapter(SelectionSql, gConn)
                Dim DS As New DataSet
                DA.Fill(DS, TblColName$)

                'Create and populate the DataTable to bind to the ComboBox:
                Dim dt As New DataTable
                dt.Columns.Add(TblColName$, GetType(System.String))

                ' Populate the DataTable to bind to the Combobox.
                Dim drDSRow As DataRow
                Dim drNewRow As DataRow
                Dim iRowCnt As Integer = 0
                For Each drDSRow In DS.Tables(TblColName$).Rows()
                    drNewRow = dt.NewRow()
                    drNewRow(TblColName$) = drDSRow(TblColName$)
                    dt.Rows.Add(drNewRow)
                    iRowCnt += 1
                Next
                If iRowCnt = 0 Then
                    Return
                End If
                'Bind the DataTable to the ComboBox by setting the Combobox's DataSource property to the DataTable.
                'To display the "Description" column in the Combobox's list, set the Combobox's DisplayMember property
                'to the name of column. Likewise, to use the "Code" column as the value of an item in the Combobox set
                'the ValueMember property.
                LB.DataSource = dt
                LB.SelectedIndex = 0

                If Not DS Is Nothing Then
                    DS = Nothing
                End If
                If Not DA Is Nothing Then
                    DA = Nothing
                End If
                If Not gConn Is Nothing Then
                    gConn.Close()
                    gConn = Nothing
                End If

            Catch ex As Exception
                xTrace(SecureID, 12350, "clsDataBase:PopulateListBox", ex.Message)
                If dDebug Then Debug.Print("Error 2194.23: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : PopulateListBox : 4968 : " + ex.Message)
            Finally
                GC.Collect()

            End Try
        End Sub

        Sub PopulateUserSL(Byref SecureID As Integer, ByRef SL As Dictionary(Of String, String))
            SL.Clear()
            Dim S$ = "Select [UserName], [UserID]  FROM [Users] order by [UserName]"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim UserName$ = ""
            Dim UserID$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    UserName$ = RSData.GetValue(0).ToString
                    UserID$ = RSData.GetValue(1).ToString
                    SL.Add(UserID, UserName)
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Function getDatasourceParm(Byref SecureID As Integer, ByVal AttributeName As String, ByVal SourceGuid As String) As String

            Dim S$ = ""
            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim UserName$ = ""
            Dim UserID$ = ""
            Dim ColVAl$ = ""

            S = "Select AttributeValue "
            S = S + " FROM [SourceAttribute]"
            S = S + " where AttributeName = '" + AttributeName$ + "'"
            S = S + " and SourceGuid = '" + SourceGuid$ + "'"

            'Dim dDebug As Boolean = False
            'Dim queryString As String = Sql
            'Dim rc As Boolean = False
            Dim rsDataQry As SqlDataReader = Nothing
            Dim CN As New SqlConnection(Me.getConnStr(SecureID))

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim command As New SqlCommand(S, CN)

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read()
                        ColVAl$ = rsDataQry.GetValue(0).ToString
                    Loop
                Else
                    ColVAl$ = ""
                End If
            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:getDatasourceParm", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:getDatasourceParm", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:getDatasourceParm", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getDatasourceParm : 5019 : " + ex.Message)
            End Try

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If

            CN = Nothing
            command.Dispose()
            command = Nothing
            rsDataQry.Close()
            rsDataQry = Nothing
            Return ColVAl$

        End Function
        Function getTblColString(Byref SecureID As Integer, ByVal S$) As String

            'Select AttributeValue
            '  FROM [SourceAttribute]
            'where AttributeName = 'Author'
            'and SourceGuid = '6ff1c120-66cd-4aac-b2ec-85dda9f48bc8'
            'go


            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim UserName$ = ""
            Dim UserID$ = ""
            Dim ColVAl$ = ""



            'Dim dDebug As Boolean = False
            'Dim queryString As String = Sql
            'Dim rc As Boolean = False
            Dim rsDataQry As SqlDataReader = Nothing
            Dim CN As New SqlConnection(Me.getConnStr(SecureID))

            If CN.State = ConnectionState.Closed Then
                CN.Open()
            End If

            Dim command As New SqlCommand(S, CN)

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read()
                        ColVAl$ = rsDataQry.GetValue(0).ToString
                    Loop
                Else
                    ColVAl$ = ""
                End If
            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:getTblColString", ex.Message)
                xtrace(SecureID, 1002, "clsDataBase:getTblColString", ex.StackTrace)
                xtrace(SecureID, 1003, "clsDataBase:getTblColString", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getTblColString : 5019 : " + ex.Message)
            End Try

            If CN.State = ConnectionState.Open Then
                CN.Close()
            End If

            CN = Nothing
            command.Dispose()
            command = Nothing
            rsDataQry.Close()
            rsDataQry = Nothing
            Return ColVAl$

        End Function
        Function getSavedValue(Byref SecureID As Integer, ByVal userid$, ByVal SaveName$, ByVal SaveTypeCode$, ByVal ValName$) As String
            Dim S$ = ""
            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim UserName$ = ""
            Dim ColVAl$ = ""

            S = S + " Select [ValName]"
            S = S + " ,[ValValue]"
            S = S + " FROM [SavedItems]"
            S = S + " where userid = '" + userid + "'"
            S = S + " and SaveName = '" + SaveName$ + "'"
            S = S + " and SaveTypeCode = '" + SaveTypeCode$ + "'"
            S = S + " and ValName = '" + ValName$ + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    ColVAl$ = RSData.GetValue(1).ToString
                    ColVAl$ = ColVAl$.Trim
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl)
                Loop
            Else
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getSavedValue : Error 0000 : Did not find library item: " + SaveName$ + " : " + SaveTypeCode$ + " : " + ValName$)
                ColVAl$ = ""
            End If
            RSData.Close()
            RSData = Nothing

            If LCase(ColVAl$).Equals("null") Then
                ColVAl$ = ""
            End If

            Return ColVAl$

        End Function

        Function getLastSuccessfulArchiveDate(Byref SecureID As Integer, ByVal ArchiveType$, ByVal UserID$) As String

            Dim S$ = "Select  max(archiveEndDate)"
            S = S + " FROM  [ArchiveStats]"
            S = S + " where "
            S = S + " [ArchiveType] = '" + ArchiveType + "'"
            S = S + " and [UserID] = '" + UserID + "'"
            S = S + " and Status = 'Successful'"

            Dim ColVAl$ = ""

            Dim RSData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    ColVAl$ = RSData.GetValue(0).ToString
                    ColVAl$ = ColVAl$.Trim
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl)
                Loop
            Else
                ColVAl$ = ""
            End If
            'RSData.Close()
            'RSData = Nothing

            If LCase(ColVAl$).Equals("null") Then
                ColVAl$ = ""
            End If

            Dim d1 As Date

            If ColVAl.Trim.Length = 0 Then
                'd1 = CDate("01/01/1900")
                d1 = Nothing
            Else
                d1 = CDate(ColVAl)
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            RSData = Nothing
            command.Dispose()
            command = Nothing

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()

            Return d1

        End Function

        Function ckUserStartUpParameter(Byref SecureID As Integer, ByVal Userid$, ByVal ValName$) As Integer

            '        where [SaveName] = 'UserStartUpParameters'
            'and [SaveTypeCode] = 'StartUpParm'
            'and ValName = 'Temp Directory'
            'and userid = 'smiller'

            Dim S$ = ""
            S = S + " where [SaveName] = 'UserStartUpParameters'"
            S = S + " and [SaveTypeCode] = 'StartUpParm'"
            S = S + " and ValName = '" + ValName$ + "'"
            S = S + " and userid = '" + Userid$ + "'"
            Dim B As Integer = iGetRowCount("SavedItems", S)

            Return B

        End Function

        Function getWorkingDirectory(Byref SecureID As Integer, ByVal Userid$, ByVal ValName$) As String
            Dim ColVAl$ = ""
            Dim S$ = ""

            Try
                S = S + "Select [ValValue]"
                S = S + " FROM [SavedItems]"
                S = S + " where [SaveName] = 'UserStartUpParameters'"
                S = S + " and [SaveTypeCode] = 'StartUpParm'"
                S = S + " and ValName = '" + ValName$ + "'"
                S = S + " and userid = '" + Userid$ + "'"



                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        ColVAl$ = RSData.GetValue(0).ToString
                        ColVAl$ = ColVAl$.Trim
                        ColVAl = UTIL.RemoveSingleQuotes(ColVAl)
                    Loop
                Else
                    ColVAl$ = ""
                End If
                RSData.Close()
                RSData = Nothing

                If LCase(ColVAl$).Equals("null") Then
                    ColVAl$ = ""
                End If

                If ValName$ = "CONTENT WORKING DIRECTORY" Then
                    If ColVAl.Length > 0 Then
                        If Not System.IO.Directory.Exists(ColVAl$) Then
                            ColVAl = System.IO.Path.GetTempPath()
                        End If
                    End If
                ElseIf ValName$ = "EMAIL WORKING DIRECTORY" Then
                    If ColVAl.Length > 0 Then
                        If Not System.IO.Directory.Exists(ColVAl$) Then
                            ColVAl = System.IO.Path.GetTempPath()
                        End If
                    End If
                ElseIf ValName$ = "DB WARNING LEVEL" Then
                    If ColVAl.Length = 0 Then
                        ColVAl = "250"
                    End If
                ElseIf ValName$ = "DB RETURN INCREMENT" Then
                    If ColVAl.Length = 0 Then
                        ColVAl = "100"
                    End If
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR clsDatabase:getWorkingDirectory 100 - " + ex.Message + vbCrLf + ex.StackTrace)
            End Try

            Return ColVAl$

        End Function

        Function iCountNbrEmailAttachments(Byref SecureID As Integer, ByVal EMailGuid$) As Integer

            Dim con As New SqlConnection(Me.getConnStr(SecureID))
            con.Open()
            'Dim command As New SqlCommand(s, con)
            Dim RSData As SqlDataReader = Nothing

            Dim cnt As Integer = -1

            Try
                Dim tQuery As String = ""
                Dim s As String = ""

                s = "Select count(*) as TheCount From EmailAttachment where EmailGuid = '" & EMailGuid & "'"

                Using con
                    RSData = SqlQry(SecureID, s, con)
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12360, "clsDataBase:iCountNbrEmailAttachments", ex.Message)
                If dDebug Then Debug.Print("Error 3932.11.13: " + ex.Message)
                Console.WriteLine("Error 3932.11.13: " + ex.Message)
                cnt = 0
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : iCountNbrEmailAttachments : 5163 : " + ex.Message)
            Finally
                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                'command.Connection.Close()
                'command = Nothing
                If con.State = ConnectionState.Open Then
                    con.Close()
                End If
                con = Nothing

            End Try

            Return cnt

        End Function

        Sub DefineFileExt(Byref SecureID As Integer, ByRef LB As List(Of String))
            Dim ColVAl$ = ""
            Dim S$ = ""
            S = S + " SELECT distinct [OriginalFileType]"
            S = S + " FROM DataSource"
            S = S + " order by OriginalFileType"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    ColVAl$ = RSData.GetValue(0).ToString
                    ColVAl$ = ColVAl$.Trim
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl)
                    DMA.ListRegistryKeys(ColVAl, LB)
                Loop
            End If

        End Sub

        Function UpdateBlob(Byref SecureID As Integer, ByVal TblName$, ByVal ImageColumnName$, ByVal WhereClause$, ByVal FQN$) As Boolean
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim b As Boolean = False
            Try
                Dim ConnStr$ = getConnStr(SecureID)
                Dim connection As New SqlConnection(ConnStr)

                Dim command As New SqlCommand("UPDATE " + TblName + " SET " + ImageColumnName$ + " = @FileContents " + WhereClause$, connection)
                command.Parameters.Add("@FileContents", SqlDbType.VarBinary).Value = IO.File.ReadAllBytes(FQN)
                connection.Open()
                command.ExecuteNonQuery()
                connection.Close()
                b = True
            Catch ex As Exception
                xTrace(SecureID, 12365, "clsDataBase:UpdateBlob", ex.Message)
                b = False
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : UpdateBlob : 5190 : " + ex.Message)
            End Try
            Return b
        End Function

        Sub RebuildFulltextCatalog(Byref SecureID As Integer)
            Dim S$ = ""
            S = "EXEC sp_fulltext_catalog 'ftCatalog', 'start_full' "
            ExecuteSqlNewConn(SecureID, S, False)
            S = "EXEC sp_fulltext_catalog 'EMAIL_CATELOG', 'start_full' "
            ExecuteSqlNewConn(SecureID, S, False)
        End Sub

    Function getUserAuth(ByRef SecureID As Integer, ByVal Userid As String) As String
        Dim B As Boolean = False

        Dim ColVAl As String = ""
        Dim S$ = "Select [Admin] FROM [Users] where userid = '" + Userid + "'"

        Dim RSData As SqlDataReader = Nothing
        'Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
        Dim CS As String = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(S, CONN)
        RSData = command.ExecuteReader()

        If RSData.HasRows Then
            RSData.Read()
            ColVAl = RSData.GetValue(0).ToString
            ColVAl = ColVAl.Trim
            If ColVAl.Trim.Length = 0 Then
                ColVAl = "U"
                B = True
            End If
            If ColVAl.Equals("Y") Then
                ColVAl = "A"
                B = True
            End If
            If ColVAl.Equals("1") Then
                ColVAl = "A"
                B = True
            End If
        End If

        If Not RSData.IsClosed Then
            RSData.Close()
        End If
        RSData = Nothing
        command.Dispose()
        command = Nothing

        If CONN.State = ConnectionState.Open Then
            CONN.Close()
        End If
        CONN.Dispose()

        Return ColVAl
    End Function

        Function isAdmin(Byref SecureID As Integer, ByVal Userid$) As Boolean
            Dim B As Boolean = False

            Dim ColVAl$ = ""
        Dim S$ = "Select [Admin] FROM [Users] where userid = '" + Userid + "'"

            Dim RSData As SqlDataReader = Nothing
            'Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()


            If RSData.HasRows Then
                RSData.Read()
                ColVAl$ = RSData.GetValue(0).ToString
                ColVAl$ = ColVAl$.Trim
                If ColVAl.Equals("True") Then
                    B = True
                End If
                If ColVAl.Equals("0") Then
                    B = False
                End If
                If ColVAl.Equals("1") Then
                    B = True
                End If
                If ColVAl.Equals("") Then
                    B = False
                End If
                If ColVAl.Equals("Y") Then
                    B = True
                End If
                If ColVAl.Equals("N") Then
                    B = False
                End If
                If ColVAl.Equals("A") Then
                    B = True
                End If
                If ColVAl.Equals("S") Then
                    B = True
                End If
                If ColVAl.Equals("G") Then
                    B = False
                End If
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            RSData = Nothing
            command.Dispose()
            command = Nothing

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()

            Return B
        End Function
        Function isGlobalSearcher(Byref SecureID As Integer, ByVal Userid$) As Boolean
            Dim B As Boolean = False

            Dim ColVAl$ = ""
            Dim S$ = "Select [Admin] FROM [Users] where userid = '" + Userid$ + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                RSData.Read()
                ColVAl$ = RSData.GetValue(0).ToString
                ColVAl$ = ColVAl$.Trim
                If ColVAl.Equals("G") Or ColVAl.Equals("A") Or ColVAl.Equals("S") Then
                    B = True
                End If
            End If
            Return B
        End Function
        Function isSuperAdmin(Byref SecureID As Integer, ByVal Userid$) As Boolean
            Dim B As Boolean = False

            Dim ColVAl$ = ""
            Dim S$ = "Select [Admin] FROM [Users] where userid = '" + Userid$ + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                RSData.Read()
                ColVAl$ = RSData.GetValue(0).ToString
                ColVAl$ = ColVAl$.Trim
                If ColVAl.Equals("S") Then
                    B = True
                End If
            End If
            Return B
        End Function

        Function isImageFile(Byref SecureID As Integer, ByVal tFileType$) As Boolean


            If InStr(tFileType, "\") > 0 Then
                tFileType = DMA.getFileExtension(tFileType)
            End If

            Dim B As Boolean = False

            Dim I As Integer = 0
            Dim S$ = "Select count(*) FROM [ImageTypeCodes] where [ImageTypeCode] = '" + tFileType + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                RSData.Read()
                I = RSData.GetInt32(0)

                If I > 0 Then
                    B = True
                Else
                    B = False
                End If
            End If
            Return B
        End Function

        Function getEmailSize(Byref SecureID As Integer, ByVal EmailGuid$) As Integer

            Dim I As Integer = 0
            Dim B As Boolean = False
            Dim S$ = "Select msgsize from Email where EmailGuid = '" + EmailGuid + "'"
            Dim RSData As SqlDataReader = Nothing

            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    I = RSData.GetInt32(0)
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "getEmailSize - Warning: email - no msgsize found: " + ex.Message)
                I = 0
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try

            Return I
        End Function
        Function getDirGuid(Byref SecureID As Integer, ByVal DirFQN$, ByVal MachineName$) As String

            DirFQN$ = UTIL.RemoveSingleQuotes(DirFQN$)

            Dim B As Boolean = False
            Dim tGuid$ = ""
            Dim S$ = ""
            S = " SELECT [DirGuid] FROM [DirectoryGuids] where [DirFQN]   = '" + DirFQN$ + "' "

            Dim RSData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tGuid$ = RSData.GetValue(0).ToString
                Else
                    tGuid = Guid.NewGuid.ToString
                    S = "Insert into DirectoryGuids (DirFQN,DirGuid) values ('" + DirFQN + "','" + tGuid + "') "
                    Dim BB As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If BB = False Then
                        tGuid = ""
                    End If
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR getDirGuid - : " + ex.Message)
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try
            Return tGuid$
        End Function

        Function getDirListenerNameByGuid(Byref SecureID As Integer, ByVal DirGuid$) As String

            Dim B As Boolean = False
            Dim DirName$ = ""
            Dim S$ = ""
            S = " SELECT [DirFqn] FROM [DirectoryGuids] where [DirGuid]   = '" + DirGuid + "' "

            Dim RSData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    DirName$ = RSData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR getDirListenerNameByGuid - Warning: : " + ex.Message)
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try
            Return DirName$
        End Function

        Function getDescription(Byref SecureID As Integer, ByVal SourceGuid$) As String
            Dim B As Boolean = False
            Dim sData$ = ""
            Dim S$ = "Select Description from DataSource where SourceGuid = '" + SourceGuid + "'"
            Dim RSData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    sData$ = RSData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "getDocSize - Warning: email - no msgsize found: " + ex.Message)
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try

            sData$ = UTIL.RemoveSingleQuotes(sData$)

            Return sData$
        End Function

        Function getSdCols(Byref SecureID As Integer, ByVal ConnstrName$, ByVal TableName$) As String

            ConnstrName$ = UTIL.RemoveSingleQuotes(ConnstrName$)
            TableName$ = UTIL.RemoveSingleQuotes(TableName$)

            Dim B As Boolean = False
            Dim sData$ = ""
            Dim S$ = "Select [SelectedColumns] FROM [ConnectionStringsSaved] where ConnstrName  = '" + ConnstrName + "' and TableName = '" + TableName + "' "
            Dim RSData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    sData$ = RSData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "getDocSize - Warning: email - no msgsize found: " + ex.Message)
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try

            sData$ = UTIL.RemoveSingleQuotes(sData$)

            Return sData$
        End Function
        Function RefactorUserid(Byref SecureID As Integer, ByVal FromUserid$, ByVal ToUserid$) As String

            Dim Msg$ = ""

            Dim myConnection As New SqlConnection("Data Source=localhost;Initial Catalog=Northwind;uid=sa;pwd=sa;")
            myConnection.Open()

            Dim myTrans = myConnection.BeginTransaction()
            Dim myCommand As New SqlCommand()
            myCommand.Connection = myConnection
            myCommand.Transaction = myTrans
            Try
                myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')"
                myCommand.ExecuteNonQuery()
                myCommand.CommandText = "delete * from Region where RegionID=101"
                myCommand.ExecuteNonQuery()
                myTrans.Commit()
                Msg = "The userid was successfully changed from " + FromUserid$ + " to " + ToUserid$ + " throughout the entire repository for both content and emails."
            Catch ep As Exception
                myTrans.Rollback()
                Msg = "ERROR: The userid Failed to change from " + FromUserid$ + " to " + ToUserid$ + ". All transactions rolled back to original state."
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : RefactorUserid : 5255 : " + ep.Message)
            Finally
                myConnection.Close()

            End Try
            Return Msg
        End Function

        Function getPw(Byref SecureID As Integer, ByVal UID$) As String

            Dim ColVAl$ = ""
            Dim S$ = "Select [UserPassword] FROM  [Users] where UserLoginID = '" + UID + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                RSData.Read()
                ColVAl$ = RSData.GetValue(0).ToString
                ColVAl$ = ColVAl$.Trim
            End If
            Return ColVAl$
        End Function

        Function iCountUserContent(Byref SecureID As Integer, ByVal UID$) As Integer
            Dim S$ = "Select count(*) from DataSource where DataSourceOwnerUserID = '" + UID + "'"

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12370, "clsDataBase:iCountUserContent", ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : iCountUserContent : 5280 : " + ex.Message)
            End Try

            Return cnt
        End Function

        Function iCountUserEmails(Byref SecureID As Integer, ByVal UID$) As Integer
            Dim S$ = "Select count(*) from email where Userid = '" + UID + "'"

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 12371, "clsDataBase:iCountUserEmails", ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : iCountUserEmails : 5296 : " + ex.Message)
            End Try

            Return cnt
        End Function

        Public Function SaveErrMsg(Byref SecureID As Integer, ByVal ErrMsg$, ByVal ErrStack$, ByVal IDNBR$, ByVal ConnectiveGuid$) As String

            'Dim DB As New clsDatabase
            Dim rc$ = ""
            Dim SQL$ = ""

            Dim ConnectionString$ = Me.getConnStr(SecureID)
            Dim CN As New SqlConnection(ConnectionString)

            Try
                If CN.State = ConnectionState.Closed Then
                    CN.Open()
                End If

                ErrMsg$ = UTIL.RemoveSingleQuotes(ErrMsg$)
                ErrStack$ = UTIL.RemoveSingleQuotes(ErrStack$)

                Dim S$ = "INSERT INTO [RuntimeErrors] "
                S$ = S$ + "([ErrorMsg]"
                S$ = S$ + ",[StackTrace]"
                S$ = S$ + ",IdNbr, ConnectiveGuid, Userid)"
                S$ = S$ + "VALUES "
                S$ = S$ + "('" + ErrMsg + "'"
                S$ = S$ + ",'" + ErrStack + "'"
                S$ = S$ + ",'" + IDNBR + "' "
                S$ = S$ + ",'" + ConnectiveGuid + "' "
                S$ = S$ + ",'" + gCurrUserGuidID + "')"

                Using CN
                    Dim dbCmd As SqlCommand = CN.CreateCommand()
                    dbCmd.Connection = CN
                    Try
                        dbCmd.CommandText = S$
                        dbCmd.ExecuteNonQuery()
                        ' Attempt to commit the transaction.
                        'transaction.Commit()

                        'Dim debug As Boolean = True
                        'If debug Then
                        '    Console.WriteLine("Successful execution: " + vbCrLf + S$)
                        'End If
                        rc = True
                    Catch ex As Exception
                        rc = "SaveErrMsg" + vbCrLf + ex.Message + vbCrLf + vbCrLf + ex.StackTrace
                        LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SaveErrMsg : 5325 : " + ex.Message)
                    End Try
                    If CN.State = Data.ConnectionState.Open Then
                        CN.Close()
                    End If
                    If Not CN Is Nothing Then
                        CN = Nothing
                    End If
                    If dbCmd Is Nothing Then
                        dbCmd = Nothing
                    End If
                End Using

            Catch ex As Exception
                rc = "SaveErrMsg" + vbCrLf + ex.Message + vbCrLf + vbCrLf + ex.StackTrace
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SaveErrMsg : 5336 : " + ex.Message)
            End Try

            'If CN.State = Data.ConnectionState.Open Then
            '    CN.Close()
            'End If
            'If Not CN Is Nothing Then
            '    CN = Nothing
            'End If

            Return rc

        End Function

        Sub getMissingVaules(Byref SecureID As Integer, ByVal tGuid$, ByRef VersionNbr$, ByRef LastAccessDate$, ByRef LastWriteTime$, ByRef RetentionExpirationDate$, ByRef IsPublic$)
            Dim S$ = " SELECt  [VersionNbr]"
            S = S + " ,[LastAccessDate]      "
            S = S + " ,[LastWriteTime]"
            S = S + " ,[RetentionExpirationDate]"
            S = S + " ,[IsPublic]"
            S = S + " FROM DataSource"
            S = S + " where [SourceGuid] = '" + tGuid$ + "' "

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    VersionNbr$ = RSData.GetValue(0).ToString
                    LastAccessDate$ = RSData.GetValue(1).ToString
                    LastWriteTime$ = RSData.GetValue(2).ToString
                    RetentionExpirationDate$ = RSData.GetValue(3).ToString
                    IsPublic$ = RSData.GetValue(4).ToString
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 9001, "clsDataBase:getMissingVaules", ex.Message)
                xtrace(SecureID, 9002, "clsDataBase:getMissingVaules", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getMissingVaules : 5363 : " + ex.Message)
            End Try

        End Sub

        Sub getMissingEmailVaules(Byref SecureID As Integer, ByVal tGuid$, ByRef RetentionExpirationDate$, ByRef IsPublic$)
            Dim S$ = " SELECT [isPublic],[RetentionExpirationDate] FROM [Email] where [EmailGuid] = '" + tGuid + "'"

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    IsPublic$ = RSData.GetValue(0).ToString
                    RetentionExpirationDate$ = RSData.GetValue(1).ToString
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 92301, "clsDataBase:getMissingEmailVaules", ex.Message)
                xtrace(SecureID, 92302, "clsDataBase:getMissingEmailVaules", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getMissingEmailVaules : 5381 : " + ex.Message)
            End Try

        End Sub

    Function GetMetaDataCombo(ByRef SecureID As Integer, ByVal tGuid$) As String

        Dim S$ = ""
        S = S + " SELECT [AttributeValue], [AttributeName] "
        S = S + " FROM  [SourceAttribute]"
        S = S + " where [SourceGuid] = '" + tGuid$ + "' "
        S = S + " order by [AttributeName]"

        Dim Msg$ = ""

        Dim cnt As Integer = 0
        CloseConn(SecureID)
        CkConn(SecureID)
        Try
            Using gConn

                Dim RSData As SqlDataReader = Nothing
                Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read
                        Dim AttributeValue$ = RSData.GetValue(0).ToString + " ... " + vbCrLf
                        Dim AttributeName$ = RSData.GetValue(1).ToString + " ... " + vbCrLf
                        Msg$ += AttributeName$ + ":" + AttributeValue$ + vbCrLf
                    Loop
                End If

                RSData.Close()
                RSData = Nothing
                command.Connection.Close()
                command = Nothing
            End Using
        Catch ex As Exception
            xTrace(SecureID, 10101, "clsDataBase:GetMetaDataCombo", ex.Message)
            xTrace(SecureID, 10102, "clsDataBase:GetMetaDataCombo", S)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetMetaDataCombo : 5406 : " + ex.Message)
        End Try
        Return Msg
    End Function

        Sub getSystemParm(Byref SecureID As Integer, ByVal SystemParms As Dictionary(Of String, String))

            SystemParms.Clear()

            Dim S$ = ""
            S = S + " SELECT SysParm,SysParmVal FROM [SystemParms] where flgActive != 'N' or flgActive is null "

            Dim SystemParameter As String = ""
            Dim SystemParameterVAl As String = ""

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read
                            SystemParameter = RSData.GetValue(0).ToString
                            SystemParameterVAl = RSData.GetValue(1).ToString
                            SystemParms.Add(SystemParameter, SystemParameterVAl)
                        Loop
                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                SystemParameter = ""
                xTrace(SecureID, 10101, "clsDataBase:getSystemParm", ex.Message)
                xTrace(SecureID, 10102, "clsDataBase:getSystemParm", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getSystemParm : 5406 : " + ex.Message)
            End Try

        End Sub

        Sub getUserParms(Byref SecureID As Integer, ByVal UserID As String, ByRef UserParms As Dictionary(Of String, String))

            UserParms.Clear()

            Dim S As String = "SELECT [Parm] ,[ParmValue] FROM [RunParms] where UserID = 'wmiller' order by Parm"

            Dim SystemParameter As String = ""
            Dim SystemParameterVAl As String = ""

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read
                            SystemParameter = RSData.GetValue(0).ToString
                            SystemParameterVAl = RSData.GetValue(1).ToString
                            UserParms.Add(SystemParameter, SystemParameterVAl)
                        Loop
                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                SystemParameter = ""
                xTrace(SecureID, 10101, "clsDataBase:getUserParms", ex.Message)
                xTrace(SecureID, 10102, "clsDataBase:getUserParms", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserParms : 5406 : " + ex.Message)
            End Try

        End Sub

        Function getUserParm(Byref SecureID As Integer, ByVal UserParm$) As String
            If gCurrUserGuidID.Length = 0 Then
                Return "0"
            End If
            UserParm = UTIL.RemoveSingleQuotes(UserParm)

            Dim S$ = "Select ParmValue from [RunParms] where Parm = '" + UserParm + "' and userid = '" + gCurrUserGuidID + "'"
            Dim SystemParameter$ = ""

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read
                            SystemParameter$ = RSData.GetValue(0).ToString
                        Loop
                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 10101, "clsDataBase:getUserParm", ex.Message)
                xTrace(SecureID, 10102, "clsDataBase:getUserParm", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserParm : 5406 : " + ex.Message)
            End Try
            Return SystemParameter$
        End Function

        Function getUserParm(Byref SecureID As Integer, ByVal UserParm$, ByVal DefaultValue As String) As String
            If gCurrUserGuidID.Length = 0 Then
                Return "0"
            End If
            UserParm = UTIL.RemoveSingleQuotes(UserParm)

            Dim S$ = "Select ParmValue from [RunParms] where Parm = '" + UserParm + "' and userid = '" + gCurrUserGuidID + "'"
            Dim SystemParameter$ = ""

            Dim cnt As Integer = 0
            CloseConn(SecureID)
            CkConn(SecureID)
            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read
                            SystemParameter$ = RSData.GetValue(0).ToString
                        Loop
                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                xTrace(SecureID, 10101, "clsDataBase:getUserParm", ex.Message)
                xtrace(SecureID, 10102, "clsDataBase:getUserParm", S)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserParm : 5406 : " + ex.Message)
            End Try
            Return SystemParameter$
        End Function

        Sub getContentColumns(Byref SecureID As Integer, ByVal SourceGuid$, ByRef SL As Dictionary(Of String, String))
            Dim S$ = ""
            S = S + " SELECT  "
            S = S + " [CreateDate]()"
            S = S + " ,[SourceName]"
            S = S + " ,[SourceTypeCode]"
            S = S + " ,[FQN]"
            S = S + " ,[VersionNbr]"
            S = S + " ,[LastAccessDate]"
            S = S + " ,[FileLength]"
            S = S + " ,[LastWriteTime]"
            S = S + " ,[UserID]"
            S = S + " ,[DataSourceOwnerUserID]"
            S = S + " ,[isPublic]"
            S = S + " ,[FileDirectory]"
            S = S + " ,[OriginalFileType]"
            S = S + " ,[RetentionExpirationDate]"
            S = S + " ,[IsPublicPreviousState]"
            S = S + " ,[isAvailable]"
            S = S + " ,[isContainedWithinZipFile]"
            S = S + " ,[ZipFileGuid]"
            S = S + " ,[IsZipFile]"
            S = S + " ,[DataVerified]"
            S = S + " FROM([DataSource])"
            S = S + " where [SourceGuid] = '" + SourceGuid$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            SL.Clear()
            If RSData.HasRows Then
                Do While RSData.Read()
                    SL.Clear()
                    Dim iCols As Integer = RSData.FieldCount - 1
                    For iCols = 0 To RSData.FieldCount - 1
                        FillSortedList(SecureID, RSData, iCols, SL)
                    Next
                Loop
            Else
                SL.Clear()
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

        Sub getEmailColumns(Byref SecureID As Integer, ByVal SourceGuid$, ByRef SL As Dictionary(Of String, String))
            Dim S$ = ""
            S = S + " SELECT  "
            S = S + " [EmailGuid]"
            S = S + " ,[SUBJECT]"
            S = S + " ,[SentTO]"
            S = S + " ,[Body]"
            S = S + " ,[Bcc]"
            S = S + " ,[BillingInformation]"
            S = S + " ,[CC]"
            S = S + " ,[Companies]"
            S = S + " ,[CreationTime]"
            S = S + " ,[ReadReceiptRequested]"
            S = S + " ,[ReceivedByName]"
            S = S + " ,[ReceivedTime]"
            S = S + " ,[AllRecipients]"
            S = S + " ,[UserID]"
            S = S + " ,[SenderEmailAddress]"
            S = S + " ,[SenderName]"
            S = S + " ,[Sensitivity]"
            S = S + " ,[SentOn]"
            S = S + " ,[MsgSize]"
            S = S + " ,[DeferredDeliveryTime]"
            S = S + " ,[EntryID]"
            S = S + " ,[ExpiryTime]"
            S = S + " ,[LastModificationTime]"
            S = S + " ,[EmailImage]"
            S = S + " ,[Accounts]"
            S = S + " ,[RowID]"
            S = S + " ,[ShortSubj]"
            S = S + " ,[SourceTypeCode]"
            S = S + " ,[OriginalFolder]"
            S = S + " ,[StoreID]"
            S = S + " ,[isPublic]"
            S = S + " ,[RetentionExpirationDate]"
            S = S + " ,[IsPublicPreviousState]"
            S = S + " ,[isAvailable]"
            S = S + " FROM  [Email]"
            S = S + " where [EmailGuid] = '" + SourceGuid$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            SL.Clear()
            If RSData.HasRows Then
                Do While RSData.Read()
                    SL.Clear()
                    Dim iCols As Integer = RSData.FieldCount - 1
                    For iCols = 0 To RSData.FieldCount - 1
                        FillSortedList(SecureID, RSData, iCols, SL)
                    Next
                Loop
            Else
                SL.Clear()
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

        Sub FillSortedList(Byref SecureID As Integer, ByVal RSData As SqlDataReader, ByVal iRow As Integer, ByRef SL As Dictionary(Of String, String))
            Dim cName$ = RSData.GetName(iRow).ToString
            Try
                Dim tColValue$ = RSData.GetValue(0).ToString
                SL.Add(cName$, tColValue$)
            Catch ex As Exception
                Dim tColValue$ = ""
                SL.Add(cName$, tColValue$)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : FillSortedList : 5508 : " + ex.Message)
            End Try

        End Sub

        Function GetGuidByFqn(Byref SecureID As Integer, ByVal FQN$, ByVal VersionNbr$) As String
            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Dim S$ = "Select SourceGuid from DataSource where FQN = '" + FQN$ + "' and machineid = '" + gMachineID$ + "' and VersionNbr = " + VersionNbr
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim xGuid$ = ""

            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()

            If rsData.HasRows Then
                rsData.Read()
                xGuid$ = rsData.GetValue(0).ToString
            Else
                xGuid$ = ""
            End If

            rsData.Close()
            rsData = Nothing

            Return xGuid$

        End Function
        Function GetGuidByURL(Byref SecureID As Integer, ByVal FQN$) As String
            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Dim S$ = "Select  SourceGuid FROM DataSource where FQN = '" + FQN + "' "
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim xGuid$ = ""

            Dim rsData As SqlDataReader = Nothing
            Dim b As Boolean = False
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()

            If rsData.HasRows Then
                rsData.Read()
                xGuid$ = rsData.GetValue(0).ToString
            Else
                xGuid$ = ""
            End If

            rsData.Close()
            rsData = Nothing

            Return xGuid$

        End Function

    Function GetLibOwnerByName(ByRef SecureID As Integer, ByVal LibraryName As String) As String

        If InStr(LibraryName, "''") > 0 Then
        Else
            LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
        End If

        Dim S As String = "Select UserID from Library where LibraryName = '" + LibraryName + "'"
        CloseConn(SecureID)
        CkConn(SecureID)
        Dim xGuid As String = ""

        Dim rsData As SqlDataReader = Nothing
        Dim b As Boolean = False

        Dim CS As String = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(S, CONN)
        rsData = command.ExecuteReader()

        If rsData.HasRows Then
            rsData.Read()
            xGuid = rsData.GetValue(0).ToString
        Else
            xGuid = ""
        End If

        If Not rsData.IsClosed Then
            rsData.Close()
        End If
        rsData = Nothing
        command.Dispose()
        command = Nothing

        If CONN.State = ConnectionState.Open Then
            CONN.Close()
        End If
        CONN.Dispose()

        Return xGuid

    End Function

        Function addDocSourceDescription(Byref SecureID As Integer, ByVal SourceGuid$, ByVal Description$) As Boolean
            Description = UTIL.RemoveSingleQuotes(Description)
            Dim S$ = ""
            S$ = "UPDATE [DataSource] set Description = '" + Description + "' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            Return b
        End Function

        Function addDocSourceError(Byref SecureID As Integer, ByVal SourceGuid$, ByVal Notes$) As Boolean
            Notes = UTIL.RemoveSingleQuotes(Notes)
            Dim S$ = ""
            S$ = "UPDATE [DataSource] set Notes = '" + Notes + "' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            Return b
        End Function

        Function addDocSourceKeyWords(Byref SecureID As Integer, ByVal SourceGuid$, ByVal KeyWords$) As Boolean
            KeyWords = UTIL.RemoveSingleQuotes(KeyWords)
            Dim S$ = ""
            S$ = "UPDATE [DataSource] set KeyWords = '" + KeyWords + "' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            Return b
        End Function

        Function UpdateMetaData(Byref SecureID As Integer, ByVal Author$, ByVal Description$, ByVal Keywords$, ByVal QuickRefIdNbr$, ByVal FQN$, ByVal MetadataTag$, ByVal MetadataValue$, ByVal Library$) As Boolean

            MetadataTag$ = UTIL.RemoveSingleQuotes(MetadataTag$)
            MetadataValue$ = UTIL.RemoveSingleQuotes(MetadataValue$)
            Library$ = UTIL.RemoveSingleQuotes(Library$)

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Author$ = UTIL.RemoveSingleQuotes(Author$)
            Description$ = UTIL.RemoveSingleQuotes(Description$)
            Keywords$ = UTIL.RemoveSingleQuotes(Keywords$)
            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim S$ = ""

            S$ = "update QuickRefItems set Author = '" + Author$
            S = S + "', Description = '" + Description$
            S = S + "', Keywords = '" + Keywords$
            S = S + "', MetadataTag = '" + MetadataTag
            S = S + "', MetadataValue = '" + MetadataValue
            S = S + "', Library = '" + Library
            S = S + "' where QuickRefIdNbr = " + QuickRefIdNbr$
            S = S + " and FQN = '" + FQN.ToString + "'"

            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            Return b

        End Function

        Function ProcessDates(Byref SecureID As Integer) As Dictionary(Of String, Date)

            Dim D As New Dictionary(Of String, Date)
            Dim S$ = ""
            S = S + " select OriginalFolder, max(CreationTime) as MaxDate " + vbCrLf
            S = S + " FROM EMAIL " + vbCrLf
            S = S + " group by OriginalFolder"

            Dim OriginalFolder$ = ""
            Dim MaxDate As Date = Now

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID)
            UTIL.setConnectionStringTimeout(600, TimeOutSecs)
            Dim CONN As New SqlConnection(CS)

            Try
                CloseConn(SecureID)
                CkConn(SecureID)

                slProcessDates.Clear()


                'RSData = SqlQryNo'Session(S)
                CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

                If RSData.HasRows Then
                    Do While RSData.Read()
                        OriginalFolder$ = RSData.GetValue(0).ToString
                        MaxDate = CDate(RSData.GetValue(1).ToString)
                        'addEmailProcessDate(OriginalFolder$, MaxDate)
                        If D.ContainsKey(OriginalFolder) Then
                        Else
                            D.Add(OriginalFolder, MaxDate)
                        End If
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: LoadProcessDates 100 - " + ex.Message)
            Finally
                If RSData IsNot Nothing Then
                    If Not RSData.IsClosed Then
                        RSData.Close()
                    End If
                    RSData = Nothing

                End If
                If CONN IsNot Nothing Then
                    If CONN.State = ConnectionState.Open Then
                        CONN.Close()
                    End If
                End If
                RSData = Nothing
                CONN.Dispose()
                'Command = Nothing
            End Try

            Return D

        End Function
        'select LibraryName FROM LibDirectory where DirectoryName = 'c:\temp'
        Sub getLibDirs(Byref SecureID As Integer, ByVal DirectoryName$, ByRef L As List(Of String))

            L.Clear()
            DirectoryName$ = UTIL.RemoveSingleQuotes(DirectoryName$)

            Dim S$ = "Select LibraryName FROM LibDirectory where DirectoryName = '" + DirectoryName$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            slProcessDates.Clear()

            Dim LibraryName$ = ""

            Dim RSData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    LibraryName = RSData.GetValue(0).ToString
                    LibraryName = UTIL.RemoveSingleQuotes(LibraryName)

                    If Not L.Contains(LibraryName) Then
                        L.Add(LibraryName)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Function getSourceGuidByFqn(Byref SecureID As Integer, ByVal fqn$, ByVal UserID$) As String
            fqn = UTIL.RemoveSingleQuotes(fqn)
            Try
                Dim S$ = " SELECT SourceGuid FROM DataSource where FQN = '" + fqn$ + "' AND DataSourceOwnerUserID = '" + UserID$ + "' "
                Dim SourceGuid$ = ""

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                ' Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()

                If RSData.HasRows Then
                    Do While RSData.Read()
                        SourceGuid = RSData.GetValue(0).ToString
                        'Application.DoEvents()
                    Loop
                End If

                RSData.Close()
                RSData = Nothing

                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

                Return SourceGuid
            Catch ex As Exception
                Me.xTrace(SecureID, 23.456, "getSourceGuidByFqn", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getSourceGuidByFqn : 5593 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getSourceGuidByFqn : 5585 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getSourceGuidByFqn : 5603 : " + ex.Message)
                Return Nothing
            End Try

        End Function

        Sub LoadEntryIdByFolder(Byref SecureID As Integer, ByVal FolderName$, ByRef L As Dictionary(Of String, String))

            FolderName$ = UTIL.RemoveSingleQuotes(FolderName$)

            'Dim S$ = "Select EntryId from email where OriginalFolder = '" + FolderName$ + "' order by storeid"
            Dim S$ = "Select EntryId from email where OriginalFolder = '" + FolderName$ + "' and UserID = '" + gCurrUserGuidID + "' "
            L.Clear()

            CloseConn(SecureID)
            CkConn(SecureID)
            Dim I As Integer = 0

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            RSData = Me.SqlQryNewConn(SecureID, S)
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim EntryId$ = RSData.GetValue(0).ToString
                    I += 1
                    Dim B As Boolean = L.ContainsKey(EntryId)
                    If Not B Then
                        L.Add(EntryId, I)
                    Else
                        If dDebug Then Debug.Print("Dup found")
                    End If
                Loop
            Else
                L.Clear()
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If

        End Sub

        Function getCountStoreIdByFolder(Byref SecureID As Integer, ByVal FolderName$) As Integer
            Dim iCnt As Integer = 0
            Dim S$ = "Select count(*) from email where OriginalFolder = '" + FolderName$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)
            Dim I As Integer = 0

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            RSData = Me.SqlQryNewConn(SecureID, S)
            If RSData Is Nothing Then
                Return 0
            End If
            If RSData.HasRows Then
                Do While RSData.Read()
                    iCnt = RSData.GetInt32(0)
                Loop
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            Return iCnt
        End Function

    Sub getGroupUsers(ByRef SecureID As Integer, ByVal GroupName As String, ByRef GroupList As ArrayList, ByRef RC As Boolean, ByRef RetMsg As String)

        RC = True
        Try
            If InStr(GroupName, "''") > 0 Then
            Else
                GroupName$ = UTIL.RemoveSingleQuotes(GroupName$)
            End If

            Dim S$ = "Select [UserID] FROM  [GroupUsers] where [GroupName] = '" + GroupName$ + "' "
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim I As Integer = 0

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            RSData = Me.SqlQryNewConn(SecureID, S)
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim UserID$ = RSData.GetValue(0).ToString
                    GroupList.Add(UserID)
                Loop
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            RetMsg = ""
        Catch ex As Exception
            RetMsg = ex.Message
            RC = False
        End Try

    End Sub

        Public Function UpdateArchiveFlag(Byref SecureID As Integer, ByVal ParentFolder$, ByVal UID$, ByVal aFlag$, ByVal FolderName$) As Boolean
            Dim b As Boolean = False
            Dim s As String = ""

            s = s + " update EmailFolder set "
            s = s + "SelectedForArchive = '" + aFlag$ + "'" + " where UserID = '" + UID + "' and FolderName = '" + FolderName + "' and ParentFolderName = '" + ParentFolder$ + "' "

            Return ExecuteSqlNewConn(SecureID, S, False)
        End Function
        Public Function DeleteEmailArchiveFolder(Byref SecureID As Integer, ByVal ParentFolder$, ByVal UID$, ByVal aFlag$, ByVal FolderName$) As Boolean
            Dim b As Boolean = False
            Dim s As String = ""

            Dim ConcatParName$ = ParentFolder$ + "|" + FolderName

            s = s + " delete from EmailFolder "
            's = s + " where UserID = '" + UID + "' and FolderName = '" + FolderName + "' and ParentFolderName = '" + ParentFolder$ + "' "
            s = s + " where UserID = '" + UID + "' and FolderName = '" + FolderName$ + "' "

            Return ExecuteSqlNewConn(SecureID, S, False)
        End Function

        'Public Function getFolderNameById(Byref SecureID As Integer, ByVal FolderID$) As String
        '    Dim b As Boolean = True
        '    Dim S As String = ""
        '    S = "Select [FolderName]      "
        '    S = S + " FROM [EmailFolder]"
        '    S = S + " where [FolderID] = '" + FolderID + "'"
        '    Dim i As Integer = 0
        '    Dim id$ = ""

        '    Dim rsData As SqlDataReader = Nothing

        '    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
        '    If rsData.HasRows Then
        '        rsData.Read()
        '        id = rsData.GetValue(0).ToString
        '    Else
        '        id = ""
        '    End If
        '    rsData.Close()
        '    rsData = Nothing
        '    Return id
        'End Function
        Public Function getParentFolderNameById(Byref SecureID As Integer, ByVal FolderID$) As String
            Dim b As Boolean = True
            Dim S As String = ""
            S = "Select [ParentFolderName]      "
            S = S + " FROM [EmailFolder]"
            S = S + " where [FolderID] = '" + FolderID + "'"
            Dim i As Integer = 0
            Dim id$ = ""

            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata = command.ExecuteReader()
            If rsData.HasRows Then
                rsData.Read()
                id = rsData.GetValue(0).ToString
            Else
                id = ""
            End If
            rsData.Close()
            rsData = Nothing
            Return id
        End Function

        Public Sub getArchiveFolderIds(Byref SecureID As Integer, ByRef DGV As struct_ArchiveFolderId)

            Dim SA As New Dictionary(Of String, String)
            Try
                Dim b As Boolean = True
                Dim S As String = ""

                S = "Select ContainerName, FolderName, FolderID, storeid from EmailFolder where SelectedForArchive = 'Y' and UserID = '" + gCurrUserGuidID + "'"
                Dim cNames$ = "ContainerName, FolderName, FolderID, storeid"
                Dim A$() = cNames.Split(",")
                LogMessage(SecureID, gCurrUserGuidID, "ERROR getArchiveFolderIds 100.1 needs to be fixed. - : ")
                'Dim DGX As New clsDataGrid
                'DGX.PopulateDataGrid(S, DGV, A)
                'DGX = Nothing
                'Dim II As Integer = DGV.Rows.Count
                'LogMessage(SecureID,gCurrUserGuidID, "NOTICE: DGX Rowcount = " + II.ToString + " : " + S)
                Return
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR getArchiveFolderIds 100 - : " + ex.Message)
                SA = Nothing
            End Try

            DGV = Nothing

        End Sub

    Function RemoveGroupUser(ByRef SecureID As Integer, ByVal GroupName As String, ByVal UserID As String) As Boolean

        GroupName = UTIL.RemoveSingleQuotes(GroupName)
        UserID = UTIL.RemoveSingleQuotes(UserID)

        Dim B As Boolean = True
        Dim SqlList As New ArrayList
        Try
            Dim S = " SELECT     GroupUsers.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID "
            S = S + " FROM         GroupUsers INNER JOIN"
            S = S + "                       GroupLibraryAccess ON GroupUsers.GroupName = GroupLibraryAccess.GroupName"
            S = S + " where GroupUsers.groupName = '" + GroupName + "'"
            S = S + " and GroupUsers.UserID = '" + UserID + "'"
            S = S + " group by GroupUsers.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID "

            Dim LibraryName As String = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibraryName = RSData.GetValue(1).ToString

                    S = "delete from libraryusers where libraryname = '" + LibraryName + "' and UserID = '" + UserID + "'"
                    SqlList.Add(S)

                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            For i As Integer = 0 To SqlList.Count - 1
                S = SqlList.Item(i).ToString
                Dim BB As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            Next

            SqlList.Clear()
            SqlList = Nothing
            GC.Collect()

            Return B
        Catch ex As Exception
            Me.xTrace(SecureID, 23.456, "getSourceGuidByFqn", "clsDatabase", ex)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : RemoveGroupUser : 5704 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : RemoveGroupUser : 5697 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : RemoveGroupUser : 5716 : " + ex.Message)
            Return False
        End Try
    End Function

    Function getGroupOwnerGuidByGroupName(Byref SecureID As Integer, ByVal GroupName As String) As String

        If InStr(GroupName, "''") > 0 Then
        Else
            GroupName = UTIL.RemoveSingleQuotes(GroupName)
        End If

        Try
            Dim S$ = "Select [GroupOwnerUserID] ,[GroupName] FROM  [UserGroup] where GroupName = '" + GroupName$ + "'"
            Dim SourceGuid$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    SourceGuid = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            Return SourceGuid
        Catch ex As Exception
            Me.xTrace(SecureID, 23.456, "getSourceGuidByFqn", "clsDatabase", ex)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getGroupOwnerGuidByGroupName : 5718 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getGroupOwnerGuidByGroupName : 5712 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getGroupOwnerGuidByGroupName : 5732 : " + ex.Message)
            Return Nothing
        End Try

    End Function

        Function getUserEmailAddrByUserID(Byref SecureID As Integer, ByVal UserID$) As String
            Try
                Dim S$ = "Select EmailAddress FROM Users where UserID = '" + UserID + "'"
                Dim SourceGuid$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SourceGuid = RSData.GetValue(0).ToString
                        'Application.DoEvents()
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
                Return SourceGuid
            Catch ex As Exception
                Me.xTrace(SecureID, 23.33, "getUserEmailAddrByUserID", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserEmailAddrByUserID : 5732 : " + ex.Message)
                Return ""
            End Try
        End Function

        Function getUserNameByEmailAddr(Byref SecureID As Integer, ByVal EmailAddress$) As String
            Try
                Dim S$ = "Select UserName FROM email where EmailAddress = '" + EmailAddress + "'"
                Dim SourceGuid$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SourceGuid = RSData.GetValue(0).ToString
                        'Application.DoEvents()
                    Loop
                End If
                RSData.Close()
                RSData = Nothing

                Return SourceGuid
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getUserNameByEmailAddr", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserNameByEmailAddr : 5746 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserNameByEmailAddr : 5742 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getUserNameByEmailAddr : 5764 : " + ex.Message)
                Return ""
            End Try
        End Function

        Sub loadReassignHistory(Byref SecureID As Integer, ByVal OldUid$, ByVal NewUid$, ByRef UserArray As ArrayList)
            UserArray.Clear()
            Dim S$ = "  SELECT [UserID]"
            S = S + " ,[UserName]"
            S = S + " ,[EmailAddress]"
            S = S + " ,[UserPassword]"
            S = S + " ,[Admin]"
            S = S + " ,[isActive]"
            S = S + " ,[UserLoginID]"
            S = S + " from users WHERE (Users.UserID = '" + OldUid$ + "') "
            Dim SourceGuid$ = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            Dim II As Integer = 0
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    Dim UserID$ = RSData.GetValue(0).ToString
                    Dim UserName$ = RSData.GetValue(1).ToString
                    Dim EmailAddress$ = RSData.GetValue(2).ToString
                    Dim UserPassword$ = RSData.GetValue(3).ToString
                    Dim Admin$ = RSData.GetValue(4).ToString
                    Dim isActive$ = RSData.GetValue(5).ToString
                    Dim UserLoginID$ = RSData.GetValue(6).ToString

                    UserArray.Add(UserID$)
                    UserArray.Add(UserName$)
                    UserArray.Add(EmailAddress$)
                    UserArray.Add(UserPassword$)
                    UserArray.Add(Admin$)
                    UserArray.Add(isActive$)
                    UserArray.Add(UserLoginID$)

                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            S$ = "  SELECT [UserID]"
            S = S + " ,[UserName]"
            S = S + " ,[EmailAddress]"
            S = S + " ,[UserPassword]"
            S = S + " ,[Admin]"
            S = S + " ,[isActive]"
            S = S + " ,[UserLoginID]"
            S = S + " from users WHERE Users.UserID = '" + NewUid$ + "' "
            SourceGuid$ = ""

            CS$ = getConnStr(SecureID) : CONN = New SqlConnection(CS) : CONN.Open() : command = New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            II = 0
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    Dim UserID$ = RSData.GetValue(0).ToString
                    Dim UserName$ = RSData.GetValue(1).ToString
                    Dim EmailAddress$ = RSData.GetValue(2).ToString
                    Dim UserPassword$ = RSData.GetValue(3).ToString
                    Dim Admin$ = RSData.GetValue(4).ToString
                    Dim isActive$ = RSData.GetValue(5).ToString
                    Dim UserLoginID$ = RSData.GetValue(6).ToString

                    UserArray.Add(UserID$)
                    UserArray.Add(UserName$)
                    UserArray.Add(EmailAddress$)
                    UserArray.Add(UserPassword$)
                    UserArray.Add(Admin$)
                    UserArray.Add(isActive$)
                    UserArray.Add(UserLoginID$)

                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Function xGetXrt(Byref SecureID As Integer) As String
            Dim iMax As Integer = GetMaxLicenseID(SecureID)
            Try
                Dim S$ = "Select Agreement FROM  License where LicenseID = " + iMax.ToString
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        tCnt$ = RSData.GetValue(0).ToString
                        'Application.DoEvents()
                    Loop
                End If
                RSData.Close()
                RSData = Nothing

                Return tCnt$
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getUserNameByEmailAddr", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : xGetXrt : 5829 : " + ex.Message)
                Return ""
            End Try
        End Function

        'Function GetCurrMachineCnt() As Integer
        '    Try
        '        Dim S As String  = "Select count(*) FROM [Machine]"
        '        Dim tCnt$ = ""
        '        Dim RSData As SqlDataReader = Nothing
        '        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
        '        If RSData.HasRows Then
        '            RSData.Read()
        '            tCnt$ = RSData.GetValue(0).ToString
        '            'Application.DoEvents()
        '        Else
        '            tCnt = 0
        '        End If

        '        RSData.Close()
        '        RSData = Nothing

        '        Return Val(tCnt$)
        '    Catch ex As Exception
        '        Me.xtrace(SecureID,23.34, "getUserNameByEmailAddr", "clsDatabase",ex)
        '        Return -1
        '    End Try
        'End Function

        'SELECT max([LicenseID]) FROM  [License]
        Function GetMaxLicenseID(Byref SecureID As Integer) As Integer
            Try
                Dim S$ = "Select max([LicenseID]) FROM [License]"
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return Val(tCnt$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getUserNameByEmailAddr", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetMaxLicenseID : 5844 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetMaxLicenseID : 5842 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetMaxLicenseID : 5866 : " + ex.Message)
                Return -1
            End Try
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetMaxLicenseID : 5843 - License validated.")
        End Function

        Function LicenseExists(Byref SecureID As Integer) As Boolean
            Dim b As Boolean = False
            Dim CS as string = ""
            CS = Me.getConnStr(SecureID)

            Try

                Me.CloseConn(SecureID)
                CkConn(SecureID)
                Dim s As String = "Select count(*) from License "
                Dim Cnt As Integer
                Dim rsData As SqlDataReader = Nothing

                Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()

                rsData.Read()
                Cnt = rsData.GetInt32(0)
                If Cnt > 0 Then
                    b = True
                Else
                    b = False
                End If
                rsData.Close()
                rsData = Nothing

            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: LicenseExists - " + ex.Message)
                Dim Msg$ = "License validation error:" + vbCrLf
                Msg += "A license could not be found for the product." + vbCrLf
                Msg += ex.Message + vbCrLf
                Msg += CS + vbCrLf + vbCrLf
                Msg += "This message is on the clipboard if needed for debug."
                LogMessage(SecureID, gCurrUserGuidID, Msg)
                b = False
            End Try

            Return b
        End Function

    Function GetXrt(ByRef SecureID As Integer, ByVal RC As Boolean, ByVal RetMsg As String) As String
        Dim S As String = "Select Agreement from License where [LicenseID] = (SELECT max([LicenseID]) FROM [License])"
        Dim iMax As Integer = GetMaxLicenseID(SecureID)

        Try

            Dim tCnt$ = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    S = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            Return S
        Catch ex As Exception
            Me.xTrace(SecureID, 23.34, "GetXrt", "clsDatabase", ex)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetXrt : 5874 : " + ex.Message + vbCrLf + S)
            S = ""
            Return S
        End Try
    End Function

        Function GetCurrMachineCnt(Byref SecureID As Integer) As Integer
            Try
                Dim S As String = "Select count(*) FROM [Machine]"
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return Val(tCnt$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetCurrMachineCnt", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetCurrMachineCnt : 5889 : " + ex.Message)
                Return -1
            End Try
        End Function
        Function GetNbrUsers(Byref SecureID As Integer) As Integer
            Try
                Dim S As String = "Select count(*) from Users "
                Dim tCnt As Integer
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt = RSData.GetInt32(0)
                    tCnt = tCnt - 1
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return tCnt
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetNbrMachine", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetNbrMachine : 5904 : " + ex.Message)
                Return -1
            End Try
        End Function
        Function GetNbrMachine(Byref SecureID As Integer) As Integer
            Try
                Dim S As String = "Select count(*) from MachineRegistered "
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return Val(tCnt$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetNbrMachine", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetNbrMachine : 5904 : " + ex.Message)
                Return -1
            End Try
        End Function
        Function GetNbrMachine(Byref SecureID As Integer, ByVal MachineName As String) As Integer
            Try
                Dim S As String = "Select COUNT(Distinct MachineName) from machine "
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return Val(tCnt$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetNbrMachine", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetNbrMachine : 5904 : " + ex.Message)
                Return -1
            End Try
        End Function
        Function GetCurrUserCnt(Byref SecureID As Integer) As Integer
            Try
                Dim S As String = "Select count(*) FROM [Users]"
                Dim tCnt$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tCnt$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tCnt = 0
                End If

                RSData.Close()
                RSData = Nothing

                Return Val(tCnt$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetCurrUserCnt", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetCurrUserCnt : 5904 : " + ex.Message)
                Return -1
            End Try
        End Function

        Function saveLicenseCutAndPaste(Byref SecureID As Integer, ByVal LS$, ByVal CustomerID$, ByVal MachineID$) As Boolean

            Dim S$ = "Select count(*) from License where CustomerID = '" + CustomerID$ + "' and MachineID = '" + MachineID$ + "' "
            Dim iCnt As Integer = iCount(Secureid,S$)
            Dim sLic$ = ""

            If iCnt = 0 Then
                sLic = sLic + "INSERT INTO [License]"
                sLic = sLic + "([Agreement]"
                sLic = sLic + ",[VersionNbr]"
                sLic = sLic + ",[ActivationDate]"
                sLic = sLic + ",[InstallDate]"
                sLic = sLic + ",[CustomerID]"
                sLic = sLic + ",[CustomerName]"
                sLic = sLic + ",[XrtNxr1], MachineID)"
                sLic = sLic + "VALUES "
                sLic = sLic + "('" + LS + "'"
                sLic = sLic + ",1"
                sLic = sLic + ",GETDATE()"
                sLic = sLic + ",GETDATE()"
                sLic = sLic + ",'" + CustomerID$ + "'"
                sLic = sLic + ",'XX'"
                sLic = sLic + ",'XX', '" + MachineID + "')"
            Else
                sLic = sLic + " Update [License] "
                sLic = sLic + " set [Agreement] = '" + LS + "' "
                sLic = sLic + " where CustomerID = '" + CustomerID$ + "' and MachineID = '" + MachineID$ + "' "
            End If

            Dim B As Boolean = False
            B = ExecuteSqlNewConn(sLic, False)
            If Not B Then
                MsgBox("The License did not APPLY - check the error log. Error 66.527 loading License Failed.")
            End If

            Return B
        End Function

        Function GetProfileDesc(Byref SecureID As Integer, ByVal ProfileName$) As String
            Try
                Dim S As String = "Select [ProfileDesc] FROM [LoadProfile] where [ProfileName] ='" + ProfileName$ + "'"
                Dim tVal$ = ""
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tVal$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tVal$ = ""
                End If

                RSData.Close()
                RSData = Nothing

                Return tVal$
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "GetCurrUserCnt", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetProfileDesc : 5942 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetProfileDesc : 5945 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : GetProfileDesc : 5974 : " + ex.Message)
                Return ""
            End Try
        End Function

        Function getAttributeDataType(Byref SecureID As Integer, ByVal AttributeName$) As String
            Dim tVal$ = ""
            Dim S As String = "Select AttributeDataType FROM [Attributes] where AttributeName = '" + AttributeName$ + "'"
            Try
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tVal$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tVal$ = ""
                End If

                RSData.Close()
                RSData = Nothing

                Return tVal$
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getAttributeDataType", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getAttributeDataType : 5957 : " + ex.Message)
                Return ""
            End Try
        End Function
        Function getAttributeAllowedValues(Byref SecureID As Integer, ByVal AttributeName$) As String
            Dim tVal$ = ""
            Dim S As String = "Select AllowedValues FROM [Attributes] where AttributeName = '" + AttributeName$ + "'"
            Try
                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    tVal$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tVal$ = ""
                End If

                RSData.Close()
                RSData = Nothing

                Return tVal$
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getAttributeDataType", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getAttributeDataType : 5957 : " + ex.Message)
                Return ""
            End Try
        End Function

        Function QuotesRequired(Byref SecureID As Integer, ByVal DataType$) As Boolean
            Dim B As Boolean = False
            DataType = UCase(DataType)

            Select Case DataType
                Case "INT"
                    Return False
                Case "DATETIME"
                    Return True
                Case "DECIMAL"
                    Return False
                Case "FLOAT"
                    Return False
                Case "VARCHAR"
                    Return True
                Case "NVARCHAR"
                    Return True
                Case "CHAR"
                    Return True
                Case "NCHAR"
                    Return True
                Case Else
                    B = True
            End Select
            Return B
        End Function

        Function getDataSourceImageLength(Byref SecureID As Integer, ByVal SourceGuid$) As Double
            Dim S$ = "Select max(datalength(SourceImage)) from DataSource where SourceGuid = '" + SourceGuid$ + "'"
            Dim tVal$ = ""
            Dim NewCN As New SqlConnection(getConnStr(SecureID))
            If NewCN.State = ConnectionState.Closed Then
                NewCN.Open()
            End If
            Try
                Dim RSData As SqlDataReader = Nothing
                RSData = SqlQry(SecureID, S, NewCN)
                If RSData.HasRows Then
                    RSData.Read()
                    tVal$ = RSData.GetValue(0).ToString
                    'Application.DoEvents()
                Else
                    tVal$ = "0"
                End If

                RSData.Close()
                RSData = Nothing
                NewCN.Close()
                NewCN = Nothing

                Return Val(tVal$)
            Catch ex As Exception
                Me.xTrace(SecureID, 23.34, "getDataSourceImageLength", "clsDatabase", ex)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getDataSourceImageLength : 5992 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getDataSourceImageLength : 5997 : " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getDataSourceImageLength : 6028 : " + ex.Message)
                Return 0
            End Try
        End Function

        Sub UpdateCurrArchiveStats(Byref SecureID As Integer, ByVal FQN$, ByVal SourceTypeCode$)

            If gCurrentArchiveGuid$.Trim.Length = 0 Then gCurrentArchiveGuid$ = Guid.NewGuid.ToString

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim ARCHHIST As New clsARCHIVEHIST(SecureID)
            Dim ARCHHISTTYPE As New clsARCHIVEHISTCONTENTTYPE(SecureID)

            If SourceTypeCode.Equals("MSG") Then
                If dDebug Then Debug.Print("Processing Folder: " + FQN)
            ElseIf SourceTypeCode.Equals("EML") Then
                If dDebug Then Debug.Print("Processing Folder: " + FQN)
            Else
                FQN = DMA.GetFilePath(FQN)
                FQN = UTIL.RemoveSingleQuotes(FQN)
            End If

            Dim iCnt As Integer = ARCHHIST.cnt_PK110(gCurrentArchiveGuid$)
            If iCnt = 0 Then
                ARCHHIST.setUserguid(gCurrUserGuidID)
                ARCHHIST.setArchivedate(Now.ToString)
                ARCHHIST.setArchiveid(gCurrentArchiveGuid$)
                ARCHHIST.setNbrfilesarchived(1)
                Dim BBB As Boolean = ARCHHIST.Insert()
                If Not BBB Then
                    If dDebug Then Debug.Print("Error 22.921.3: Failed to update current archive data.")
                Else
                    iCnt = ARCHHISTTYPE.cnt_PK111(gCurrentArchiveGuid$, FQN, SourceTypeCode)
                    If iCnt = 0 Then
                        ARCHHISTTYPE.setArchiveid(gCurrentArchiveGuid)
                        ARCHHISTTYPE.setDirectory(FQN)
                        ARCHHISTTYPE.setFiletype(SourceTypeCode)
                        ARCHHISTTYPE.setNbrfilesarchived(1)
                        Dim BBBB As Boolean = ARCHHISTTYPE.Insert
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3d: Failed to update current archive data.")
                        End If
                    Else
                        Dim SS$ = "UPDATE [ArchiveHistContentType] SET "
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1"
                        SS = SS + " WHERE [ArchiveID] = '" + gCurrentArchiveGuid + "'"
                        SS = SS + " and [Directory] = '" + FQN + "'"
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'"
                        Dim BBBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                        End If
                    End If
                End If
            Else
                Dim SS$ = "Update ArchiveHist set NbrFilesArchived = NbrFilesArchived + 1 where ArchiveID = '" + gCurrentArchiveGuid$ + "'"
                Dim BBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                If Not BBB Then
                    If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                Else
                    iCnt = ARCHHISTTYPE.cnt_PK111(gCurrentArchiveGuid$, FQN, SourceTypeCode)
                    If iCnt = 0 Then
                        ARCHHISTTYPE.setArchiveid(gCurrentArchiveGuid)
                        ARCHHISTTYPE.setDirectory(FQN)
                        ARCHHISTTYPE.setFiletype(SourceTypeCode)
                        ARCHHISTTYPE.setNbrfilesarchived(1)
                        Dim BBBB As Boolean = ARCHHISTTYPE.Insert
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3d: Failed to update current archive data.")
                        End If
                    Else
                        SS$ = "UPDATE [ArchiveHistContentType] SET"
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1"
                        SS = SS + " WHERE [ArchiveID] = '" + gCurrentArchiveGuid + "'"
                        SS = SS + " and [Directory] = '" + FQN + "'"
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'"
                        Dim BBBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                        End If
                    End If
                End If
            End If
        End Sub
        Sub UpdateCurrArchiveStats(Byref SecureID As Integer, ByVal FQN$, ByVal SourceTypeCode$, ByVal ArchiveGuid$)

            If gCurrentArchiveGuid$.Trim.Length = 0 Then gCurrentArchiveGuid$ = Guid.NewGuid.ToString

            FQN = UTIL.RemoveSingleQuotes(FQN)
            Dim ARCHHIST As New clsARCHIVEHIST(SecureID)
            Dim ARCHHISTTYPE As New clsARCHIVEHISTCONTENTTYPE(SecureID)

            If SourceTypeCode.Equals("MSG") Then
                If dDebug Then Debug.Print("Processing Folder: " + FQN)
            ElseIf SourceTypeCode.Equals("EML") Then
                If dDebug Then Debug.Print("Processing Folder: " + FQN)
            Else
                FQN = DMA.GetFilePath(FQN)
                FQN = UTIL.RemoveSingleQuotes(FQN)
            End If

            Dim iCnt As Integer = ARCHHIST.cnt_PK110(ArchiveGuid$)
            If iCnt = 0 Then
                ARCHHIST.setUserguid(gCurrUserGuidID)
                ARCHHIST.setArchivedate(Now.ToString)
                ARCHHIST.setArchiveid(ArchiveGuid$)
                ARCHHIST.setNbrfilesarchived(1)
                Dim BBB As Boolean = ARCHHIST.Insert()
                If Not BBB Then
                    If dDebug Then Debug.Print("Error 22.921.3: Failed to update current archive data.")
                Else
                    iCnt = ARCHHISTTYPE.cnt_PK111(ArchiveGuid$, FQN, SourceTypeCode)
                    If iCnt = 0 Then
                        ARCHHISTTYPE.setArchiveid(ArchiveGuid)
                        ARCHHISTTYPE.setDirectory(FQN)
                        ARCHHISTTYPE.setFiletype(SourceTypeCode)
                        ARCHHISTTYPE.setNbrfilesarchived(1)
                        Dim BBBB As Boolean = ARCHHISTTYPE.Insert
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3d: Failed to update current archive data.")
                        End If
                    Else
                        Dim SS$ = "UPDATE [ArchiveHistContentType] SET "
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1"
                        SS = SS + " WHERE [ArchiveID] = '" + ArchiveGuid + "'"
                        SS = SS + " and [Directory] = '" + FQN + "'"
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'"
                        Dim BBBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                        End If
                    End If
                End If
            Else
                Dim SS$ = "Update ArchiveHist set NbrFilesArchived = NbrFilesArchived + 1 where ArchiveID = '" + ArchiveGuid$ + "'"
                Dim BBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                If Not BBB Then
                    If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                Else
                    iCnt = ARCHHISTTYPE.cnt_PK111(ArchiveGuid$, FQN, SourceTypeCode)
                    If iCnt = 0 Then
                        ARCHHISTTYPE.setArchiveid(ArchiveGuid)
                        ARCHHISTTYPE.setDirectory(FQN)
                        ARCHHISTTYPE.setFiletype(SourceTypeCode)
                        ARCHHISTTYPE.setNbrfilesarchived(1)
                        Dim BBBB As Boolean = ARCHHISTTYPE.Insert
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3d: Failed to update current archive data.")
                        End If
                    Else
                        SS$ = "UPDATE [ArchiveHistContentType] SET"
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1"
                        SS = SS + " WHERE [ArchiveID] = '" + ArchiveGuid + "'"
                        SS = SS + " and [Directory] = '" + FQN + "'"
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'"
                        Dim BBBB As Boolean = ExecuteSqlNewConn(SecureID, SS)
                        If Not BBBB Then
                            If dDebug Then Debug.Print("Error 22.921.3b: Failed to update current archive data.")
                        End If
                    End If
                End If
            End If
        End Sub

        ''' <summary>
        ''' Now, we can get this data...
        ''' So what, how do we pass it all back?
        ''' </summary>
        ''' <param name="frm"></param>
        ''' <param name="fControl"></param>
        ''' <remarks></remarks>
        Sub getFormHelpData(Byref SecureID As Integer, ByVal FormName$, ByRef slFormHelp As Dictionary(Of String, String))

            Try
                slFormHelp.Clear()
                Dim S$ = ""
                S = S + " SELECT [ScreenName]"
                S = S + " ,[HelpText]"
                S = S + " ,[WidgetName]"
                S = S + " FROM [HelpText]"
                S = S + " where ScreenName = '" + FormName$ + "' "
                S = S + " and [DisplayHelpText] <> 0 "

                Dim b As Boolean = True
                Dim i As Integer = 0
                Dim id As Integer = -1
                Dim II As Integer = 0
                Dim table_name$ = ""
                Dim column_name$ = ""
                Dim data_type$ = ""
                Dim character_maximum_length$ = ""

                Dim ScreenName$ = ""
                Dim HelpText$ = ""
                Dim WidgetName$ = ""
                Dim tKey$ = ""

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        ScreenName$ = RSData.GetValue(0).ToString
                        HelpText$ = RSData.GetValue(1).ToString
                        WidgetName$ = RSData.GetValue(2).ToString
                        tKey = ScreenName + "," + WidgetName
                        b = slFormHelp.ContainsKey(tKey)
                        If b = False Then
                            slFormHelp.Add(tKey, HelpText)
                        End If
                    Loop
                Else
                    id = -1
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                Me.xTrace(SecureID, 27000, "getFormHelpData", "clsDatabase", ex)
                If gRunUnattended = False Then MsgBox("Error 142.33.21: " + vbCrLf + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : getFormHelpData : 6102 : " + ex.Message)
            End Try

        End Sub


        Public Sub MarkImageCopyForDeletion(Byref SecureID As Integer, ByVal fqn$)
            fqn = UTIL.RemoveSingleQuotes(fqn)
            Dim B As Boolean = False
            Dim FTD As New clsFILESTODELETE(SecureID)
            Dim mName$ = DMA.GetCurrMachineName()

            FTD.setFqn(fqn$)
            FTD.setMachinename(mName)
            FTD.setPendingdelete("Y")
            FTD.setUserid(gCurrUserGuidID)
            Dim iCnt As Integer = FTD.cnt_PK_FileToDelete(SecureID, fqn, mName, gCurrUserGuidID)
            If iCnt > 0 Then
                Dim WC$ = FTD.wc_PK_FileToDelete(fqn, mName, gCurrUserGuidID)
                B = FTD.Update(WC$)
            Else
                B = FTD.Insert
            End If
            If Not B Then
                If dDebug Then Debug.Print("Error on OCR 12.99.1")
                If gRunUnattended = False Then MsgBox("Error on OCR 12.99.1")
                LogMessage(SecureID, gCurrUserGuidID, "Error on OCR 12.99.1 - " + fqn)
            End If
            FTD = Nothing
            GC.Collect()
        End Sub

        Public Sub DeleteMarkedImageCopyFiles(Byref SecureID As Integer)

            Dim FileToDelete As New ArrayList
            Dim rsData As SqlDataReader
            Dim mName$ = DMA.GetCurrMachineName()
            Dim FQN$ = ""
            Dim S$ = ""

            '** S = S + " SELECT [UserID],[MachineName],[FQN],[PendingDelete]"
            S = S + " SELECT [FQN] "
            S = S + " FROM [FilesToDelete] "
            S = S + " where MachineName = '" + mName$ + "'"

            Try
                Dim b As Boolean = True
                Dim i As Integer = 0
                Dim FileType$ = ""
                Dim II As Integer = 0
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    Do While rsData.Read()
                        'Application.DoEvents()
                        b = True
                        FQN = rsData.GetValue(0).ToString
                        FileToDelete.Add(FQN)
                    Loop
                End If
            Catch ex As Exception
                Me.xTrace(SecureID, 27000, "DeleteMarkedImageCopyFiles", "clsDatabase", ex)
                If gRunUnattended = False Then MsgBox("ERROR AddProfileFileTypes: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : DeleteMarkedImageCopyFiles : 6168 : " + ex.Message)
            End Try

            If Not rsData Is Nothing Then
                rsData.Close()
                rsData = Nothing
            End If

            Try
                For i As Integer = 0 To FileToDelete.Count - 1
                    'Application.DoEvents()
                    FQN = FileToDelete(i).ToString
                    Dim F As New FileInfo(FQN)
                    If F.Exists Then
                        Try
                            F.Delete()
                        Catch ex As Exception
                            LogMessage(SecureID, gCurrUserGuidID, "NOTICE: DeleteMarkedImageCopyFiles : 6180.01 : " + ex.Message)
                        End Try
                    End If

                    F = Nothing
                    GC.Collect()
                Next
            Catch ex As Exception
                Me.xTrace(SecureID, 27001, "DeleteMarkedImageCopyFiles", "clsDatabase", ex)
                If gRunUnattended = False Then MsgBox("ERROR DeleteMarkedImageCopyFiles: " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : DeleteMarkedImageCopyFiles : 6180 : " + ex.Message)
            End Try

            GC.Collect()

            S = "Delete from FilesToDelete where MachineName = '" + mName$ + "'"
            Dim BB = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not BB Then
                If dDebug Then Debug.Print("Error Here")
            End If

        End Sub

        Sub SetOcrAttributesToPass(Byref SecureID As Integer, ByVal SourceGuid$)
            Dim S$ = "update DataSource set OcrPerformed = 'Y', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub

        Sub SetOcrAttributesToFail(Byref SecureID As Integer, ByVal SourceGuid$)
            Dim S$ = "update DataSource set OcrPerformed = 'F', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub

        Sub SetOcrAttributesToNotPerformed(Byref SecureID As Integer, ByVal SourceGuid$)
            Dim S$ = "update DataSource set OcrPerformed = 'N', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub

        'GraphicContainsText
        Sub SetImageHiddenText(Byref SecureID As Integer, ByVal SourceGuid$, ByVal ImageHiddenText$)

            ImageHiddenText$ = UTIL.RemoveSingleQuotes(ImageHiddenText$)

            Dim S$ = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If

            S$ = "update DataSource set ImageHiddenText = '" + ImageHiddenText$ + "' where SourceGuid = '" + SourceGuid$ + "'"
            b = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub
        Sub AppendImageHiddenText(Byref SecureID As Integer, ByVal SourceGuid$, ByVal ImageHiddenText$)

            ImageHiddenText$ = UTIL.RemoveSingleQuotes(ImageHiddenText$)

            Dim S$ = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If

            S$ = "update DataSource set ImageHiddenText = ImageHiddenText + '|' + '" + ImageHiddenText$ + "' where SourceGuid = '" + SourceGuid$ + "'"
            b = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub

        Sub AppendOcrText(Byref SecureID As Integer, ByVal SourceGuid$, ByVal OcrText$)
            Dim DTE As Date = Now

            LOG.WriteToTimerLog("clsDatabase", "AppendOcrText", "START")

            Dim ExistingOcrText As String = getOcrText(SecureID, SourceGuid, "DOC", "")

            ExistingOcrText = ExistingOcrText + " " + OcrText$

            OcrText$ = UTIL.RemoveSingleQuotes(ExistingOcrText)

            Dim S$ = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'"
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If

            'S = "update DataSource set Description = '" + HiddentText$ + "' + ' ' (select Description from DataSource where SourceGuid = '" + SourceGuid$ + "') where SourceGuid = '" + SourceGuid$ + "'"
            'b = Me.ExecuteSqlNewConn(SecureID,S,false)
            'If Not b Then
            ' if ddebug then    Debug.Print("Failed to set OCR Attributes")
            'End If
            BlankOutSingleQuotes(SecureID, OcrText)
            S$ = "update DataSource set OcrText = '" + OcrText$ + "' where SourceGuid = '" + SourceGuid$ + "'"
            ''Clipboard.Clear()
            ''Clipboard.SetText(S)
            b = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
            LOG.WriteToTimerLog("clsDatabase", "AppendOcrText", "END", DTE)
        End Sub

        Sub AppendEmailOcrText(Byref SecureID As Integer, ByVal EmailGuid$, ByVal OcrText$, ByVal AttachmentName$)

            Dim ExistingOcrText As String = getOcrText(SecureID, EmailGuid$, "EMAIL", AttachmentName$)

            ExistingOcrText = ExistingOcrText + " " + OcrText$

            OcrText$ = UTIL.RemoveSingleQuotes(ExistingOcrText)
            BlankOutSingleQuotes(SecureID, OcrText)

            AttachmentName$ = UTIL.RemoveSingleQuotes(AttachmentName$)
            Dim S$ = "update EmailAttachment set OcrText = '" + OcrText$ + "' where EmailGuid = '" + EmailGuid$ + "' and AttachmentName = '" + AttachmentName$ + "' "
            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                If dDebug Then Debug.Print("Failed to set OCR Attributes")
            End If
        End Sub
        Public Sub BlankOutSingleQuotes(Byref SecureID As Integer, ByRef sText As String)
            For i As Integer = 1 To sText.Length
                Dim CH As String = Mid(sText, i, 1)
                If CH.Equals("'") Then
                    Mid(sText, i, 1) = " "
                End If
            Next
        End Sub
        Public Sub CleanText(Byref SecureID As Integer, ByRef sText As String)
            For i As Integer = 1 To sText.Length
                Dim CH As String = Mid(sText, i, 1)
                If InStr("abcdefghijklmnopqrstuvwxyz .,'`-+%@01233456789~", CH, CompareMethod.Text) = 0 Then
                    Mid(sText, i, 1) = " "
                End If
            Next
        End Sub
        Sub SetEmailOcrText(Byref SecureID As Integer, ByVal EmailGuid$, ByVal OcrText$, ByVal AttachmentName$)
            'ByVal BodyText$,
            Try
                CleanText(SecureID, OcrText$)
                OcrText$ = UTIL.ReplaceSingleQuotes(OcrText$)
                Me.BlankOutSingleQuotes(SecureID, OcrText)

                Dim S$ = "update EmailAttachment set OcrText = '" + OcrText$.Trim + "' where EmailGuid = '" + EmailGuid$ + "' and AttachmentName = '" + AttachmentName + "'"
                Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
                If Not b Then
                    LOG.WriteToArchiveLog("ERROR: SetEmailOcrText 100 Failed to set Email OCR Attributes")
                End If
            Catch ex As Exception
                LOG.WriteToArchiveLog("ERROR: SetEmailOcrText 200 Failed to set Email OCR Attributes")
            End Try


        End Sub

        Sub concatEmailBody(Byref SecureID As Integer, ByVal BodyText$, ByVal EmailGuid$)

            Try

                BodyText = BodyText + GetEmailBody(SecureID, EmailGuid)

                Me.CleanText(SecureID, BodyText$)

                BodyText$ = UTIL.ReplaceSingleQuotes(BodyText$)

                Dim S$ = "update Email set Body = '" + BodyText$ + "' where EmailGuid = '" + EmailGuid + "'"
                Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)

                If Not b Then
                    LOG.WriteToArchiveLog("ERROR: concatEmailBody 100 Failed to set Email body")
                End If

            Catch ex As Exception
                LOG.WriteToArchiveLog("ERROR: concatEmailBody 200 Failed to set Email body")
            End Try


        End Sub

        Sub UpdateAttachmentCounts(Byref SecureID As Integer)
            Dim S$ = "update Email "
            S = S + " set NbrAttachments = (select count(*) from EmailAttachment where Email.EmailGuid = EmailAttachment.EmailGuid)"
            'S = S + " WHERE NbrAttachments Is NULL "
            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "NOTICE: Failed to update the Attachment counts for Emails." + vbCrLf + S)
            End If
        End Sub

        Sub UserParmUpdate(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$, ByVal ParmVal$)
            Dim iCnt As Integer = UserParmExists(SecureID, ParmName$, UserID$)
            If iCnt = 0 Then
                Return
            End If

            ParmName = UTIL.RemoveSingleQuotes(ParmName)
            ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            'ParmName = UTIL.RemoveSingleQuotes(ParmName)

            Dim S$ = "UPDATE [UserCurrParm]"
            S = S + " SET ParmVal = '" + ParmVal + "'"
            S = S + " where UserID = '" + UserID + "'"
            S = S + " and ParmName = '" + ParmName + "'"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                MsgBox("UserParmUpdate failed.")
            End If
        End Sub

        Sub UserParmDelete(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$)
            Dim iCnt As Integer = UserParmExists(SecureID, ParmName$, UserID$)
            If iCnt = 0 Then
                Return
            End If

            ParmName = UTIL.RemoveSingleQuotes(ParmName)
            'ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            'ParmName = UTIL.RemoveSingleQuotes(ParmName)

            Dim S$ = "delete from [UserCurrParm]"
            S = S + " where UserID = '" + UserID + "'"
            S = S + " and ParmName = '" + ParmName + "'"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                MsgBox("UserParmDelete Failed.")
            End If
        End Sub
        Function GetActiveEmailFolders(Byref SecureID As Integer, ByVal UserID$) As ArrayList
            Dim A As New ArrayList
            Dim S$ = "Select distinct foldername from EmailArchParms where UserID = '" + UserID + "'"
            Dim RSData As SqlDataReader = Nothing
            Dim foldername$ = ""

            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        foldername$ = RSData.GetValue(0).ToString
                        If Not A.Contains(foldername) Then
                            A.Add(foldername)
                        End If
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1a - " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString)
            End Try

            RSData.Close()
            RSData = Nothing
            Return A
        End Function
        Function ValidateCurrUserPW(Byref SecureID As Integer, ByVal EncPW$) As Boolean

            Dim S$ = "Select count(*) from Users where UserID = '" + gCurrUserGuidID + "' and UserPassword = '" + EncPW + "' "
            Dim RSData As SqlDataReader = Nothing
            Dim foldername$ = ""
            Dim B As Boolean = False

            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim i As Integer = RSData.GetInt32(0)
                    If i = 1 Then
                        B = True
                    Else
                        B = False
                    End If
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1a - " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString)
            End Try

            RSData.Close()
            RSData = Nothing
            GC.Collect()

            Return B
        End Function
        Function GetEmailRetentionCode(Byref SecureID As Integer, ByVal FolderName$, ByVal UserID$) As String

            FolderName$ = UTIL.RemoveSingleQuotes(FolderName$)

            Dim S$ = ""
            S = S + "Select RetentionCode from EmailFolder "
            S = S + "where FolderName = '" + FolderName$ + "' "
            S = S + "and UserID = '" + UserID$ + "'"

            Dim RSData As SqlDataReader = Nothing
            Dim rCode$ = ""
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        rCode$ = RSData.GetValue(0).ToString
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1a - " + ex.Message)
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString)
            End Try

            RSData.Close()
            RSData = Nothing
            Return rCode$
        End Function
        Sub UserParmInsert(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$, ByVal ParmVal$)

            Dim iCnt As Integer = UserParmExists(SecureID, ParmName$, UserID$)
            If iCnt > 0 Then
                Return
            End If

            ParmVal$ = UTIL.RemoveSingleQuotes(ParmVal$)

            Dim S$ = "INSERT INTO [UserCurrParm]"
            S = S + " ([UserID]"
            S = S + " ,[ParmName]"
            S = S + " ,[ParmVal])"
            S = S + " VALUES "
            S = S + " ('" + UserID$ + "',"
            S = S + " '" + ParmName$ + "',"
            S = S + "'" + ParmVal$ + "')"

            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                MsgBox("Failed UserParmInsert " + S)
            End If
        End Sub

        Sub UserParmInsertUpdate(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$, ByVal ParmVal$, ByRef RC As Boolean)

            Dim iCnt As Integer = UserParmExists(SecureID, ParmName$, UserID$)
            If iCnt > 0 Then
                UserParmUpdate(SecureID, ParmName$, UserID$, ParmVal$)
                Return
            End If

            ParmVal$ = UTIL.RemoveSingleQuotes(ParmVal$)

            Dim S$ = "INSERT INTO [UserCurrParm]"
            S = S + " ([UserID]"
            S = S + " ,[ParmName]"
            S = S + " ,[ParmVal])"
            S = S + " VALUES "
            S = S + " ('" + UserID$ + "',"
            S = S + " '" + ParmName$ + "',"
            S = S + "'" + ParmVal$ + "')"

            Dim b As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not b Then
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: xx - 100 : Failed to insert user parm." + vbCrLf + S)
            End If
            RC = b
        End Sub
        Function iSelectCount(Byref SecureID As Integer, ByVal S$) As Integer

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function
        Function UserParmExists(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$) As Integer
            Dim S As String = ""

            ParmName = UTIL.RemoveSingleQuotes(ParmName)
            'ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            'ParmName = UTIL.RemoveSingleQuotes(ParmName)

            S = S + " SELECT count(*)"
            S = S + " FROM [UserCurrParm]"
            S = S + " where UserID = '" + UserID$ + "'"
            S = S + " and ParmName = '" + ParmName$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function

        Function UserParmRetrive(Byref SecureID As Integer, ByVal ParmName$, ByVal UserID$) As String
            Dim S As String = ""
            Dim iCnt As Integer = UserParmExists(SecureID, ParmName$, UserID$)
            If iCnt = 0 Then
                Return ""
            End If

            ParmName = UTIL.RemoveSingleQuotes(ParmName)
            'ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            'ParmName = UTIL.RemoveSingleQuotes(ParmName)

            S = S + " SELECT [ParmVal]"
            S = S + " FROM [UserCurrParm]"
            S = S + " where UserID = '" + UserID$ + "'"
            S = S + " and ParmName = '" + ParmName$ + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim sVal$ = ""
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()


                RSData.Read()
                Try
                    If Not RSData.IsDBNull(0) Then
                        sVal$ = RSData.GetString(0)
                    Else
                        sVal$ = ""
                    End If

                Catch ex As Exception
                    Me.xTrace(SecureID, 27000, "UserParmRetrive", "clsDatabase", ex)
                    sVal = ""
                    LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : UserParmRetrive : 6331 : " + ex.Message)
                End Try
                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return sVal$
        End Function
        Public Function getHelpConnStr(Byref SecureID As Integer) As String
            Dim bUseConfig As Boolean = True
            Dim HelpConnStr$ = ""
            HelpConnStr = System.Configuration.ConfigurationManager.AppSettings("HELP.DB")
            Return HelpConnStr
        End Function
        Sub LoadUserSearchHistory(Byref SecureID As Integer, ByVal MaxNbrSearches As Integer, ByVal Uid$, ByVal Screen$, ByRef SearchHistoryArrayList As List(Of String), ByRef NbrReturned As Integer)
            Try
                NbrReturned = 0
                SearchHistoryArrayList.Clear()
                Dim EntryID As Integer = -1
                Dim QryParms$ = ""
                Dim S$ = ""
                S = S + " SELECT top " + MaxNbrSearches.ToString + " [EntryID],QryParms " + vbCrLf
                S = S + " FROM [SearhParmsHistory] " + vbCrLf
                S = S + " where [UserID] = '" + Uid + "' " + vbCrLf
                S = S + " and Screen = '" + Screen$ + "'" + vbCrLf
                S = S + " order by [EntryID] DESC " + vbCrLf
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        NbrReturned += 1
                        EntryID = RSData.GetInt32(0)
                        QryParms$ = RSData.GetValue(1).ToString
                        SearchHistoryArrayList.Add(QryParms)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "NOTICE: clsDatabase:LoadUserSearchHistory - Failed to load search history.")
            End Try
        End Sub

        Sub LimitToExistingRecs(Byref SecureID As Integer, ByVal DGV As List(Of struct_ActiveSearchGuids), ByVal UIDCellName$, ByVal GuidCellName$, ByVal DeleteAll As Boolean)
            Dim ASG As New clsACTIVESEARCHGUIDS(SecureID)

            If DeleteAll = True Then
                Dim S As String = "delete FROM ActiveSearchGuids where  UserID = '" + gCurrUserGuidID + "'"
                Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            End If

            Dim iRec As Integer = 0
            Dim iCnt As Integer = 0
            For Each DR As Object In DGV
                Try
                    iCnt += 1
                    Dim TgtGuid As String = DR.Cells(GuidCellName$).Value.ToString
                    Dim TgtUserID As String = DR.Cells(UIDCellName).Value.ToString
                    ASG.setDocguid(TgtGuid)
                    ASG.setUserid(TgtUserID)
                    Dim BB As Boolean = ASG.Insert()
                    If BB Then
                        If dDebug Then LOG.WriteToTraceLog("clsDatabase:LimitingToExistingRecs SUCCESSFUL")
                    Else
                        If dDebug Then LOG.WriteToTraceLog("clsDatabase:LimitingToExistingRecs FAILED '" + TgtGuid + "'")
                    End If
                Catch ex As Exception
                    Console.WriteLine(ex.Message)
                End Try
            Next
            ASG = Nothing
        End Sub

        Sub LimitToExistingRecs(Byref SecureID As Integer, ByVal CurrentGuids As List(Of String))

            Dim ASG As New clsACTIVESEARCHGUIDS(SecureID)
            Dim S As String = "delete FROM ActiveSearchGuids where  UserID = '" + gCurrUserGuidID + "'"
            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)

            Dim iRec As Integer = 0
            Dim iCnt As Integer = 0
            For iCnt = 0 To CurrentGuids.Count - 1
                Try
                    'Application.DoEvents()
                    Dim TgtGuid$ = CurrentGuids(iCnt)
                    Dim TgtUserID$ = gCurrUserGuidID
                    ASG.setDocguid(TgtGuid)
                    ASG.setUserid(TgtUserID)
                    Dim BB As Boolean = ASG.Insert()
                    If BB Then
                        If dDebug Then LOG.WriteToTraceLog("clsDatabase:LimitingToExistingRecs SUCCESSFUL")
                    Else
                        If dDebug Then LOG.WriteToTraceLog("clsDatabase:LimitingToExistingRecs FAILED '" + TgtGuid + "'")
                    End If
                Catch ex As Exception
                    Console.WriteLine(ex.Message)
                End Try
            Next
            ASG = Nothing
        End Sub

        Public Function getDefaultThesaurus(Byref SecureID As Integer) As String
            'Dim EcmLibConnectionString As String = ""

            Dim DefaultThesaurus$ = ""
            Dim s As String = ""

            CloseConn(SecureID)
            CkConn(SecureID)

            Try
                Dim tQuery As String = ""
                s = "Select [SysParmVal] FROM [SystemParms] where [SysParm] = 'Default Thesaurus' "
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    DefaultThesaurus = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                'xtrace(SecureID,12335, "clsDataBase:iGetRowCount",ex)
                'MsgBox("Error 3932.11: " + ex.Message)
                If dDebug Then Debug.Print("Error 3932.11.10: CountOfThesauri " + ex.Message)
                Console.WriteLine("Error 3932.11.10: getDefaultThesaurus" + ex.Message)
                DefaultThesaurus$ = ""
                LogMessage(SecureID, gCurrUserGuidID, "clsDB : getDefaultThesaurus : 100 : " + ex.Message)
            End Try
            If Not gConn.State = ConnectionState.Closed Then
                gConn.Close()
            End If
            gConn = Nothing
            GC.Collect()
            Return DefaultThesaurus$
        End Function

        Public Function ExpandInflectionTerms(Byref SecureID As Integer, ByVal S$) As String
            Dim Msg$ = ""
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim S1$ = RSData.GetValue(0).ToString
                        Dim S2$ = RSData.GetValue(1).ToString
                        Msg = Msg + S1 + " : " + S2 + vbCrLf
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ExpandInflectionTerms : 100 : " + ex.Message)
            End Try
            Return Msg
        End Function
        'SELECT COUNT(*) FROM [DB_UpdateHist] where [FixID] = 1 and Status = 'applied'
        Function ckDbUpdate(Byref SecureID As Integer, ByVal FixID$) As Integer
            Dim S$ = "Select COUNT(*) FROM [DB_UpdateHist] where [FixID] = " + FixID$ + " and Status = 'applied'"
            Dim ii As Integer = 0
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        ii = RSData.GetInt32(0)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ckDbUpdate : 100 : " + ex.Message)
            End Try
            Return ii
        End Function
        Sub DeleteEmailByGuid(Byref SecureID As Integer, ByVal EmailGuid$)
            Dim SHIST As New clsSEARCHHISTORY(SecureID)

            Dim S$ = ""
            Dim B As Boolean = True

            S = "delete from Recipients where EmailGuid = '" + EmailGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13 - failed to delete Recipients = '" + EmailGuid$ + "'")
            Else
                LogMessage(SecureID, gCurrUserGuidID, "Notice 126.77.13 - Deleted Email Recipients = '" + EmailGuid$ + "'")
                SHIST.setCalledfrom("clsDatabase:DeleteEmailByGuid")
                SHIST.setEndtime(Now.ToString)
                SHIST.setReturnedrows("1")
                SHIST.setTypesearch("Delete")
                SHIST.setStarttime(Now.ToString)
                SHIST.setSearchdate(Now.ToString)
                SHIST.setSearchsql(S)
                SHIST.setUserid(gCurrUserGuidID)
                B = SHIST.Insert
                If Not B Then
                    Console.WriteLine("Error 1943.244 - Failed to save history of search.")
                End If
            End If

            S = "delete from LibraryItems where SourceGuid = '" + EmailGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13a - failed to delete Library Items = '" + EmailGuid$ + "'")
            End If

            S = "delete from EmailAttachment where EmailGuid = '" + EmailGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13 - failed to delete EmailAttachment = '" + EmailGuid$ + "'")
            Else
                LogMessage(SecureID, gCurrUserGuidID, "Notice 126.77.13 - Deleted Email EmailAttachment = '" + EmailGuid$ + "'")
                SHIST.setCalledfrom("clsDatabase:DeleteEmailByGuid")
                SHIST.setEndtime(Now.ToString)
                SHIST.setReturnedrows("1")
                SHIST.setTypesearch("Delete")
                SHIST.setStarttime(Now.ToString)
                SHIST.setSearchdate(Now.ToString)
                SHIST.setSearchsql(S)
                SHIST.setUserid(gCurrUserGuidID)
                B = SHIST.Insert
                If Not B Then
                    If gClipBoardActive = True Then Console.WriteLine("Error 1943.244 - Failed to save history of search.")
                    LogMessage(SecureID, gCurrUserGuidID, "Notice 1943.244 - Failed to save history of search = '" + EmailGuid$ + "'")
                End If
            End If
            S = "delete from Email where EmailGuid = '" + EmailGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13 - failed to delete Email = '" + EmailGuid$ + "'")
            Else
                LogMessage(SecureID, gCurrUserGuidID, "Notice 1943.244 -  failed to delete Email = '" + EmailGuid$ + "'")
                SHIST.setCalledfrom("clsDatabase:DeleteEmailByGuid")
                SHIST.setEndtime(Now.ToString)
                SHIST.setReturnedrows("1")
                SHIST.setTypesearch("Delete")
                SHIST.setStarttime(Now.ToString)
                SHIST.setSearchdate(Now.ToString)
                SHIST.setSearchsql(S)
                SHIST.setUserid(gCurrUserGuidID)
                B = SHIST.Insert
                If Not B Then
                    If gClipBoardActive = True Then Console.WriteLine("Error 1943.244 - Failed to save history of search.")
                    LogMessage(SecureID, gCurrUserGuidID, "Error 1943.244 - Failed to save history of search." + EmailGuid$ + "'")
                End If
            End If

            SHIST = Nothing
        End Sub
        Sub DeleteSourceByGuid(Byref SecureID As Integer, ByVal SourceGuid$)
            Dim S$ = ""
            Dim B As Boolean = True

            S = "delete from SourceAttribute where SourceGuid = '" + SourceGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13 - failed to delete SourceAttribute = '" + SourceGuid$ + "'")
            End If
            S = "delete from DataSource  where SourceGuid = '" + SourceGuid$ + "'"
            B = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 126.77.13 - failed to delete DataSource = '" + SourceGuid$ + "'")
            End If
        End Sub
        Sub RetentionTempZeroize(Byref SecureID As Integer)
            Dim S$ = "DELETE FROM [RetentionTemp] WHERE UserID = '" + gCurrUserGuidID + "'"
            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 772.00.13 - failed to Zeroize RetentionTemp")
            End If
        End Sub
        Sub RetentionTempInsert(Byref SecureID As Integer, ByVal UserID$, ByVal ContentGuid$, ByVal TypeContent$)

            Dim S$ = ""
            S = S + " INSERT INTO [RetentionTemp]"
            S = S + " ([UserID]"
            S = S + " ,[ContentGuid]"
            S = S + " ,[TypeContent])"
            S = S + " VALUES"
            S = S + " ('" + UserID$ + "'"
            S = S + " ,'" + ContentGuid$ + "'"
            S = S + " ,'" + TypeContent$ + "')"
            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 772.00.13 - failed to Zeroize RetentionTemp")
            End If

        End Sub
        Public Function RetentionTempCountType(Byref SecureID As Integer, ByVal TypeContent$, ByVal UserID$) As Integer

            Dim S As String = ""

            S = S + " SELECT COUNT(*) as iCnt"
            S = S + " FROM [RetentionTemp] "
            S = S + " where [TypeContent] = '" + TypeContent$ + "' and UserID = '" + UserID$ + "' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = 0
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function
        Function adminExist(Byref SecureID As Integer) As Boolean
            Dim S$ = ""
            S = S + " SELECT [UserID]"
            S = S + " ,[UserName]"
            S = S + " ,[EmailAddress]"
            S = S + " ,[UserPassword]"
            S = S + " ,[Admin]"
            S = S + " ,[isActive]"
            S = S + " ,[UserLoginID]"
            S = S + " FROM [Users]"
            S = S + " where UserLoginID = 'admin'"
            Dim ConnStr$ = Me.getConnStr(SecureID)
            Dim Conn As New SqlConnection(ConnStr)
            Dim b As Boolean = False

            Using Conn
                If Conn.State = ConnectionState.Closed Then
                    Conn.Open()
                End If

                Dim command As New SqlCommand(S, Conn)
                Dim RSData As SqlDataReader = Nothing
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                    Return True
                Else
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                    Conn.Close()
                    Conn = Nothing
                    S = ""
                    S = S + "INSERT INTO [Users]"
                    S = S + "([UserID]"
                    S = S + ",[UserName]"
                    S = S + ",[EmailAddress]"
                    S = S + ",[UserPassword]"
                    S = S + ",[Admin]"
                    S = S + ",[isActive]"
                    S = S + ",[UserLoginID])"
                    S = S + "VALUES( "
                    S = S + "'admin'"
                    S = S + ",'administrator'"
                    S = S + ",'NA'"
                    S = S + ",'password'"
                    S = S + ",'Y'"
                    S = S + ",'Y'"
                    S = S + ",'admin')"
                    b = Me.ExecuteSqlNewConn(SecureID, S, False)
                    If Not b Then
                        MsgBox("Failed to add the required ADMIN account. Add the account manually to allow login.")
                        Return False
                    Else
                        MsgBox("The ADMIN account has been created, you will have to login under ADMIN using the password 'password' to continue." + vbCrLf + "You must change the password or security will be compromised.")
                        Return False
                    End If
                End If

            End Using
        End Function
        Function LicenseVersionExist(Byref SecureID As Integer, ByVal VersionNbr$) As Boolean
            Dim S$ = "Select count(*) FROM [License] where VersionNbr = " + VersionNbr
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            If cnt = 0 Then
                Return False
            Else
                Return True
            End If

        End Function
        Sub getLicenseDataCurrent(Byref SecureID As Integer, ByRef ExistingVersionNbr As String, _
        ByRef ExistingActivationDate As String, _
        ByRef ExistingInstallDate As String, _
        ByRef ExistingCustomerID As String, _
        ByRef ExistingCustomerName As String, _
        ByRef ExistingLicenseID As String, _
        ByRef ExistingXrtNxr1 As String, _
        ByRef ExistingServerIdentifier As String, _
        ByRef ExistingSqlInstanceIdentifier As String)

            Dim S$ = ""
            S = S + "Select [Agreement] "
            S = S + "      ,[VersionNbr] "
            S = S + "      ,[ActivationDate] "
            S = S + "      ,[InstallDate] "
            S = S + "      ,[CustomerID] "
            S = S + "      ,[CustomerName] "
            S = S + "      ,[LicenseID] "
            S = S + "      ,[XrtNxr1] "
            S = S + "      ,[SqlServerInstanceNameX] "
            S = S + "      ,[SqlServerMachineName] "
            S = S + "  FROM [License] "
            S = S + "  where VersionNbr = (select MAX(versionnbr) from License) "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    ExistingVersionNbr = RSData.GetValue(0).ToString
                    ExistingActivationDate = RSData.GetValue(0).ToString
                    ExistingInstallDate = RSData.GetValue(0).ToString
                    ExistingCustomerID = RSData.GetValue(0).ToString
                    ExistingCustomerName = RSData.GetValue(0).ToString
                    ExistingLicenseID = RSData.GetValue(0).ToString
                    ExistingXrtNxr1 = RSData.GetValue(0).ToString
                    ExistingServerIdentifier = RSData.GetValue(0).ToString
                    ExistingSqlInstanceIdentifier = RSData.GetValue(0).ToString
                End If
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If


        End Sub
        Function CountQuickRefItems(Byref SecureID As Integer, ByVal QuickRefIdNbr As Integer) As Integer

            Dim S$ = "Select count(*) from QuickRefItems where QuickRefIdNbr = " + QuickRefIdNbr.ToString
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If

            Return cnt

        End Function
        Function getQuickRefId(Byref SecureID As Integer, ByVal QuickRef$) As Integer

            Dim S$ = "Select QuickRefIdNbr from QuickRef where QuickRefName = '" + QuickRef$ + "'"
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                End If
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If

            Return cnt

        End Function
        Sub retrieveSearchHistory(Byref SecureID As Integer, ByVal SearchHistoryArrayList As ArrayList)

            SearchHistoryArrayList.Clear()
            Dim S$ = "Select top 25 * from SearchHistory where UserID = '" + gCurrUserGuidID + "' order by RowID desc "
            Dim ii As Integer = 0
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        ii = RSData.GetInt32(0)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ckDbUpdate : 100 : " + ex.Message)
            End Try

        End Sub
        Sub AddMissingCrc(Byref SecureID As Integer)
            'SELECT FQN, SourceGuid FROM DataSource
            Dim S$ = "Select count(*) "
            S$ = S$ + " FROM DataSource "
            Dim WC$ = " where DataSource.SourceGuid not in (Select SourceGuid from SourceAttribute where AttributeName = 'CRC')"

            Dim iMax As Integer = iGetRowCount("DataSource", WC$)

            S$ = "Select DataSource.FQN, DataSource.SourceGuid"
            S$ = S$ + " FROM DataSource "
            S$ = S$ + " where DataSource.SourceGuid not in ("
            S$ = S$ + " Select SourceGuid from SourceAttribute where AttributeName = 'CRC')"
            Dim ii As Integer = 0
            Dim FQN$ = ""
            Dim sGuid$ = ""
            'FrmMDIMain.TSPB1.Maximum = iMax + 2

            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        ii += 1
                        'FrmMDIMain.TSPB1.Value = ii
                        If ii Mod 100 = 0 Then
                            '''FrmMDIMain.SB.Text = ii.ToString
                            ''FrmMDIMain.Refresh()
                        End If
                        'Application.DoEvents()
                        FQN = RSData.GetValue(0).ToString
                        sGuid$ = RSData.GetValue(1).ToString
                        Dim F As File
                        If F.Exists(FQN) Then
                            Dim HexStr$ = DMA.CalcCRC(FQN)
                            InsertSrcAttrib(SecureID, sGuid, "CRC", HexStr$, "CONTENT")
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : ckDbUpdate : 100 : " + ex.Message)
            End Try
            'FrmMDIMain.TSPB1.Value = 0
        End Sub
        Sub InsertSrcAttrib(Byref SecureID As Integer, ByVal SGUID$, ByVal aName$, ByVal aVal$, ByVal OriginalFileType$)
            Dim SRCATTR As New clsSOURCEATTRIBUTE(SecureID)
            SRCATTR.setSourceguid(SGUID)
            SRCATTR.setAttributename(aName)
            SRCATTR.setAttributevalue(aVal)
            SRCATTR.setDatasourceowneruserid(gCurrUserGuidID)
            SRCATTR.setSourcetypecode(OriginalFileType$)
            SRCATTR.Insert()
            SRCATTR = Nothing
        End Sub
        'select count(*) from Attributes where AttributeName = 'XX'
        Sub AttributeExists(Byref SecureID As Integer, ByVal AttributeName$)
            'SELECT FQN, SourceGuid FROM DataSource
            Dim S$ = "Select count(*) from Attributes where AttributeName = '" + AttributeName$ + "'"
            Dim WC$ = " where AttributeName = '" + AttributeName$ + "'"
            Dim iMax As Integer = iGetRowCount("Attributes", WC$)

            If iMax > 0 Then
                Return
            End If

            S$ = ""
            S$ = S$ + " INSERT INTO [Attributes]"
            S$ = S$ + " ([AttributeName]"
            S$ = S$ + " ,[AttributeDataType]"
            S$ = S$ + " ,[AttributeDesc]"
            S$ = S$ + " ,[AssoApplication])"
            S$ = S$ + " VALUES "
            S$ = S$ + " ('" + AttributeName$ + "'"
            S$ = S$ + " ,'NVARCHAR'"
            S$ = S$ + " ,'ADDED BY ECM Library'"
            S$ = S$ + " ,'???')"

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : AttributeExists : 100 : Failed to add attribute.")
            End If

        End Sub
        Function ckAttributeExists(Byref SecureID As Integer, ByVal AttributeName$) As Boolean

            Dim S$ = "Select count(*) from Attributes where AttributeName = '" + AttributeName$ + "'"
            Dim WC$ = " where AttributeName = '" + AttributeName$ + "'"
            Dim iMax As Integer = iGetRowCount("Attributes", WC$)

            If iMax > 0 Then
                Return True
            Else
                Return False
            End If


        End Function
        Sub RemoveFreetextStopWords(Byref SecureID As Integer, ByRef SearchPhrase$)

            SearchPhrase$ = SearchPhrase$.Trim
            If SearchPhrase$.Trim.Length = 0 Then
                Return
            End If

            Dim AL As New ArrayList
            GetSkipWords(SecureID, AL)

            For i As Integer = 1 To SearchPhrase$.Length
                Dim CH$ = Mid(SearchPhrase$, i, 1)
                If CH$ = Chr(34) Then
                    Mid(SearchPhrase$, i, 1) = " "
                End If
            Next
            Dim NewPhrase$ = ""
            Dim A$() = SearchPhrase$.Split(" ")
            For i As Integer = 0 To UBound(A)
                Dim tWord$ = A(i).Trim
                Dim TempWord$ = tWord
                tWord = tWord.ToUpper
                If tWord.Length > 0 Then
                    If AL.Contains(tWord) Then
                        A(i) = ""
                    Else
                        A(i) = TempWord
                    End If
                End If
            Next
            NewPhrase$ = ""
            For i As Integer = 0 To UBound(A)
                If A(i).Trim.Length > 0 Then
                    NewPhrase$ = NewPhrase$ + " " + A(i)
                End If
            Next
            SearchPhrase = NewPhrase$
        End Sub

        Public Function SetSourceGlobalAccessFlags(Byref SecureID As Integer, ByVal tgtGuid$, ByVal FileType$, _
        ByVal rbPublic As Boolean, _
        ByVal rbPrivate As Boolean, _
        ByVal rbMstrYes As Boolean, _
        ByVal rbMstrNot As Boolean, ByRef SB As TextBox) As Boolean

            Dim tKey$ = tgtGuid
            Dim Bb As Boolean = True

            If rbPublic Then
                Dim SS$ = ""

                Dim isOwner As Boolean = ValidateContentOwnership(SecureID, tgtGuid$, FileType$)
                If isOwner = False Then
                    isOwner = ValidateCoOwnerOfContent(SecureID, tgtGuid$, FileType$)
                    If isOwner = False Then
                        'SB.Text = "You do not own all of this content, so some changes are not allowed."
                        SB.Text = "You do not own all of this content, so some changes are not allowed."
                        Return False
                    End If
                End If

                If Not FileType$.ToUpper.Equals(".MSG") And Not FileType$.ToUpper.Equals(".EML") Then
                    SS$ = "Update DataSource set isPublic = 'Y' where SourceGuid = '" + tKey$ + "'"
                Else
                    SS$ = "Update email set isPublic = 'Y' where EmailGuid = '" + tKey$ + "'"
                End If
                Bb = ExecuteSqlNewConn(SecureID, SS)
                If Bb Then
                    LOG.WriteToArchiveLog("Reset the isPublic  for guid '" + tKey$ + "'")
                End If
            End If
            If rbPrivate Then
                Dim SS$ = ""

                Dim isOwner As Boolean = ValidateContentOwnership(SecureID, tgtGuid$, FileType$)
                If isOwner = False Then
                    isOwner = ValidateCoOwnerOfContent(SecureID, tgtGuid$, FileType$)
                    If isOwner = False Then
                        SB.Text = "You do not own all of this content, so some changes are not allowed."
                        'MsgBox("You do not own all of this content, so some changes are not allowed.")
                        Return False
                    End If
                End If

                If Not FileType$.ToUpper.Equals(".MSG") And Not FileType$.ToUpper.Equals(".EML") Then
                    SS$ = "Update DataSource set isPublic = 'N' where SourceGuid = '" + tKey$ + "'"
                Else
                    SS$ = "Update email set isPublic = 'N' where EmailGuid = '" + tKey$ + "'"
                End If
                Bb = ExecuteSqlNewConn(SecureID, SS)
                If Bb Then
                    LOG.WriteToArchiveLog("Reset the isPublic  for guid '" + tKey$ + "'")
                End If
            End If
            If rbMstrYes Then
                Dim SS$ = ""

                Dim isOwner As Boolean = ValidateContentOwnership(SecureID, tgtGuid$, FileType$)
                If isOwner = False Then
                    isOwner = ValidateCoOwnerOfContent(SecureID, tgtGuid$, FileType$)
                    If isOwner = False Then
                        SB.Text = "You do not own all of this content, so some changes are not allowed."
                        'MsgBox("You do not own all of this content, so some changes are not allowed.")
                        Return False
                    End If
                End If

                If Not FileType$.ToUpper.Equals(".MSG") And Not FileType$.ToUpper.Equals(".EML") Then

                    SS$ = "Update DataSource set isMaster = 'Y' where SourceGuid = '" + tKey$ + "'"
                    'Else
                    '    SS$ = "Update email set isPublic = 'Y' where EmailGuid = '" + tKey$ + "'"
                    Bb = ExecuteSqlNewConn(SecureID, SS)
                    If Bb Then
                        LOG.WriteToArchiveLog("Reset the isMaster for guid '" + tKey$ + "'")
                    End If
                Else
                    SS$ = "Update Email set isMaster = 'Y' where EmaileGuid = '" + tKey$ + "'"
                    'Else
                    '    SS$ = "Update email set isPublic = 'N' where EmailGuid = '" + tKey$ + "'"
                    Bb = ExecuteSqlNewConn(SecureID, SS)
                    If Bb Then
                        LOG.WriteToArchiveLog("Reset the isMaster  for EMAIL guid '" + tKey$ + "'")
                    End If
                End If
            End If
            If rbMstrNot Then


                Dim SS$ = ""

                Dim isOwner As Boolean = ValidateContentOwnership(SecureID, tgtGuid$, FileType$)
                If isOwner = False Then
                    isOwner = ValidateCoOwnerOfContent(SecureID, tgtGuid$, FileType$)
                    If isOwner = False Then
                        SB.Text = "You do not own all of this content, so some changes are not allowed."
                        'MsgBox("You do not own all of this content, so some changes are not allowed.")
                        Return False
                    End If
                End If

                If Not FileType$.ToUpper.Equals(".MSG") And Not FileType$.ToUpper.Equals(".EML") Then
                    SS$ = "Update DataSource set isMaster = 'N' where SourceGuid = '" + tKey$ + "'"
                    'Else
                    '    SS$ = "Update email set isPublic = 'N' where EmailGuid = '" + tKey$ + "'"
                    Bb = ExecuteSqlNewConn(SecureID, SS)
                    If Bb Then
                        LOG.WriteToArchiveLog("Reset the isMaster  for guid '" + tKey$ + "'")
                    End If
                Else
                    SS$ = "Update Email set isMaster = 'N' where EmaileGuid = '" + tKey$ + "'"
                    'Else
                    '    SS$ = "Update email set isPublic = 'N' where EmailGuid = '" + tKey$ + "'"
                    Bb = ExecuteSqlNewConn(SecureID, SS)
                    If Bb Then
                        LOG.WriteToArchiveLog("Reset the isMaster  for EMAIL guid '" + tKey$ + "'")
                    End If
                End If

            End If
            Return Bb
        End Function
        Function DoIownThisContent(Byref SecureID As Integer, ByVal SourceGuid$) As Boolean

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id$ = ""
            Dim S$ = ""

            Try
                S = S + " select DataSourceOwnerUserID  "
                S = S + " from DataSource "
                S = S + " where SourceGuid = '" + SourceGuid$ + "' "

                Dim RSData As SqlDataReader = Nothing
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

                If RSData.HasRows Then
                    RSData.Read()
                    id = RSData.GetValue(0).ToString
                    If id = gCurrUserGuidID Then
                        b = True
                    Else
                        b = False
                    End If
                Else
                    id = -1
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:DoIownThisContent: " + ex.Message + vbCrLf + S)
                b = False
            End Try
            Return b
        End Function

        Function isEmailPublic(Byref SecureID As Integer, ByVal EmailGuid$) As Boolean

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id$ = ""
            Dim S$ = ""

            Try
                S = "Select ispublic from Email where EmailGuid = '" + EmailGuid$ + "'"

                Dim RSData As SqlDataReader = Nothing
                'Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()


                If RSData.HasRows Then
                    RSData.Read()
                    id = RSData.GetValue(0).ToString
                    If id.ToUpper.Equals("Y") Then
                        b = True
                    Else
                        b = False
                    End If
                Else
                    b = False
                End If
                RSData.Close()
                RSData = Nothing


                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:isEmailPublic: " + ex.Message + vbCrLf + S)
                b = False
            End Try
            Return b
        End Function
        Function ZeroizeGlobalSearch(Byref SecureID As Integer) As Boolean
            Dim S$ = "delete from GlobalSeachResults where UserID = '" + gCurrUserGuidID + "'"
            Dim B As Boolean = False
            Try
                B = ExecuteSqlNewConn(SecureID, S, False)
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR 100 - clsDatabase:ZeroizeGlobalSearch: Failed to seroize global search - " + vbCrLf + S)
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 200 - clsDatabase:ZeroizeGlobalSearch: " + ex.Message)
                B = False
            End Try
            Return B
        End Function
        Function getOwnerGuid(Byref SecureID As Integer, ByVal SourceGuid$) As String
            'select DataSourceOwnerUserID from DataSource where SourceGuid= 'XX'
            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id$ = ""
            Dim S$ = ""

            Try
                S = "Select DataSourceOwnerUserID from DataSource where SourceGuid= '" + SourceGuid$ + "'"

                Dim RSData As SqlDataReader = Nothing

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()

                If RSData.HasRows Then
                    RSData.Read()
                    id = RSData.GetValue(0).ToString
                Else
                    id = ""
                End If
                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getOwnerGuid: " + ex.Message + vbCrLf + S)
                id = ""
            End Try
            Return id
        End Function
        Function ckContentOwnership(Byref SecureID As Integer, ByVal SourceGuid$, ByVal LoggedInUserGuid$) As Boolean

            If isAdmin(SecureID, LoggedInUserGuid$) Then
                Return True
            End If

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id$ = ""
            Dim S$ = ""
            Dim OwnerGuid$ = getOwnerGuid(SecureID, SourceGuid$)
            If OwnerGuid.Equals(LoggedInUserGuid) Then
                Return True
            Else
                Return False
            End If
        End Function

        Sub GetAllLibrariesUserCanAccess(Byref SecureID As Integer, ByRef AccessibleLibraries As ArrayList, ByVal isAdmin As Boolean)
            Dim rsData As SqlDataReader = Nothing
            Dim LibraryName$ = ""
            AccessibleLibraries.Clear()

            If isAdmin = True Then
                Dim S$ = "Select LibraryName, UserID from Library order by LibraryName"
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    Do While rsData.Read()
                        LibraryName$ = rsData.GetValue(0).ToString
                        If Not AccessibleLibraries.Contains(LibraryName$) Then
                            AccessibleLibraries.Add(LibraryName$)
                        End If
                    Loop
                End If
            Else
                Try
                    Dim S$ = "Select distinct GroupLibraryAccess.LibraryName " + vbCrLf
                    S = S + " FROM GroupUsers INNER JOIN" + vbCrLf
                    S = S + " GroupLibraryAccess ON GroupUsers.UserID = GroupLibraryAccess.UserID" + vbCrLf
                    S = S + " group by GroupUsers.UserID, GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupName  " + vbCrLf
                    S = S + " HAVING (GroupUsers.UserID = '" + gCurrUserGuidID + "')  " + vbCrLf

                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                    If rsData.HasRows Then
                        Do While rsData.Read()
                            LibraryName$ = rsData.GetValue(0).ToString
                            If Not AccessibleLibraries.Contains(LibraryName$) Then
                                AccessibleLibraries.Add(LibraryName$)
                            End If
                        Loop
                    End If

                    If Not rsData.IsClosed Then
                        rsData.Close()
                    End If

                    S = "Select LibraryName from Library where userid = '" + gCurrUserGuidID + "'"
                    CONN = New SqlConnection(CS) : CONN.Open() : command = New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                    If rsData.HasRows Then
                        Do While rsData.Read()
                            LibraryName$ = rsData.GetValue(0).ToString
                            If Not AccessibleLibraries.Contains(LibraryName$) Then
                                AccessibleLibraries.Add(LibraryName$)
                            End If
                        Loop
                    End If
                Catch ex As Exception

                End Try
            End If


            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()

        End Sub

        ''' <summary>
        ''' SQL Server Setup sets the server name to the computer name during installation. Change @@SERVERNAME by using sp_addserver and then restarting SQL Server. This method, however,  is not usually required. With multiple instances of SQL Server installed, @@SERVERNAME returns the following local server name information if the local server name has not been changed since setup.
        ''' </summary>
        ''' <returns>Returns the "server name" as setup during installation as a string variable.</returns>
        ''' <remarks></remarks>
        Function getServerInstanceName(SecureID as integer) As String

            Dim S$ = "SELECT SERVERPROPERTY('SERVERNAME')"
            Dim rsData As SqlDataReader = Nothing
            Dim ServerName$ = ""
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                Do While rsData.Read()
                    ServerName$ = rsData.GetValue(0).ToString
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getServerName Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return ServerName

        End Function

        ''' <summary>
        ''' Gets the name of server to which the application is attached.
        ''' </summary>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Function getServerMachineName(Byref SecureID As Integer) As String

            Dim S$ = "Select SERVERPROPERTY('MachineName')"
            Dim rsData As SqlDataReader = Nothing
            Dim ServerName$ = ""
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                Do While rsData.Read()
                    ServerName$ = rsData.GetValue(0).ToString
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getServerName Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return ServerName

        End Function

        ''' <summary>
        ''' Retrieves the name of the machine that is logged in to SQL Server
        ''' </summary>
        ''' <returns>The name of the "logged in workstation" as a string variable</returns>
        ''' <remarks>Do not reley on this for any security implementations, use A.D.</remarks>
        Function getAttachedMachineName(Byref SecureID As Integer) As String

            Dim S$ = "SELECT HOST_NAME() AS MachineName"
            Dim rsData As SqlDataReader = Nothing
            Dim ServerName$ = ""
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                Do While rsData.Read()
                    ServerName$ = rsData.GetValue(0).ToString
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getAttachedMachineName Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return ServerName

        End Function

        ''' <summary>
        ''' Retrieves the currently LOGGED in User ID.
        ''' </summary>
        ''' <returns>Currently LOGGED in User ID as a string variable.</returns>
        ''' <remarks></remarks>
        Function getLoggedInUser(Byref SecureID As Integer) As String

            Dim S$ = "select SUSER_NAME() LoggedInUser "
            Dim rsData As SqlDataReader = Nothing
            Dim ServerName$ = ""
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                Do While rsData.Read()
                    ServerName$ = rsData.GetValue(0).ToString
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getLoggedInUser Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return ServerName

        End Function
        Function setServerIdentifier(Byref SecureID As Integer, ByVal SqlServerInstanceNameX$, ByVal CustomerID$, ByVal LicenseID$) As Boolean
            Dim X$ = ENC.AES256EncryptString(SqlServerInstanceNameX$)
            X = UTIL.RemoveSingleQuotes(X)
            Dim S$ = "Update License set  SqlServerInstanceNameX = '" + SqlServerInstanceNameX$ + "' where CustomerID = '" + CustomerID$ + "' and VersionNbr = '" + LicenseID$ + "'"
            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
            If B = False Then
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:setServerIdentifier Error 100: Failed to add Server Identifier, system may be inoperable.")
                MsgBox("clsDatabase:setServerIdentifier Error 100: Failed to add Server Identifier, system may be inoperable.")
                Return False
            End If
            Return True
        End Function
        Function getServerIdentifier(Byref SecureID As Integer, ByVal CustomerID$, ByVal LicenseID$) As String
            Dim SqlServerInstanceNameX$ = ""
            Dim S$ = "Select SqlServerInstanceNameX from License where CustomerID = '" + CustomerID$ + "' and VersionNbr = '" + LicenseID$ + "'"
            Dim rsData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    SqlServerInstanceNameX$ = rsData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getServerIdentifier Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return SqlServerInstanceNameX$
        End Function

        Function setSqlInstanceIdentifier(Byref SecureID As Integer, ByVal SqlServerMachineName$, ByVal CustomerID$, ByVal LicenseID$) As Boolean
            Dim X$ = ENC.AES256EncryptString(SqlServerMachineName$)
            X = UTIL.RemoveSingleQuotes(X)
            Dim S$ = "Update License set  SqlServerInstanceNameX = '" + SqlServerMachineName + "' where CustomerID = '" + CustomerID$ + "' and LicenseID = '" + LicenseID$ + "'"
            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
            If B = False Then
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:setServerIdentifier Error 100: Failed to add SQL Instance Identifier, system may be inoperable.")
                MsgBox("clsDatabase:setServerIdentifier Error 100: Failed to add SQL Instance Identifier, system may be inoperable.")
                Return False
            End If
            Return True
        End Function
        Function getSqlInstanceIdentifier(Byref SecureID As Integer, ByVal CustomerID$, ByVal LicenseID$) As Boolean
            Dim SqlServerMachineName$ = ""
            Dim S$ = "Select SqlServerMachineName from License where CustomerID = '" + CustomerID$ + "' and LicenseID = '" + LicenseID$ + "'"
            Dim rsData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    SqlServerMachineName = rsData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getSqlInstanceIdentifier Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return SqlServerMachineName$
        End Function
        Public Shared Function StrToByteArray(ByVal str As String) As Byte()
            Dim encoding As New System.Text.ASCIIEncoding()
            'Dim encoding As New System.Text.UnicodeEncoding
            Return encoding.GetBytes(str)
        End Function 'StrToByteArray
        Public Sub getSatusFlags(Byref SecureID As Integer, ByRef isPublic As CheckBox, ByRef isMaster As CheckBox, ByRef isWebPage As CheckBox, ByVal SourceGuid$, ByVal SourceType$)
            Dim sPublic As String = ""
            Dim sMaster As String = ""
            Dim sWebPage As String = ""
            isMaster.Checked = False
            isPublic.Checked = False
            isWebPage.Checked = False
            Dim S$ = ""
            If SourceType.ToUpper.Equals(".EML") Then
                S$ = "Select isPublic, 'N' as isMaster, 'N' as isWebPage from EMAIL where EmailGuid = '" + SourceGuid$ + "' "
            ElseIf SourceType.ToUpper.Equals(".MSG") Then
                S$ = "Select isPublic, 'N' as isMaster, 'N' as isWebPage from EMAIL where EmailGuid = '" + SourceGuid$ + "' "
            Else
                S$ = "Select isPublic, isMaster, isWebPage from DataSource where SourceGuid = '" + SourceGuid$ + "'"
            End If
            Dim rsData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    Try
                        If IsDBNull(rsData.GetValue(0).ToString) Then
                            sPublic = "N"
                        Else
                            sPublic = rsData.GetValue(0).ToString
                        End If
                    Catch ex As Exception
                        sPublic = "N"
                    End Try
                    Try
                        If IsDBNull(rsData.GetValue(1).ToString) Then
                            sMaster = "N"
                        Else
                            sMaster = rsData.GetValue(1).ToString
                        End If
                    Catch ex As Exception
                        sMaster = "N"
                    End Try
                    Try
                        If IsDBNull(rsData.GetValue(2).ToString) Then
                            sWebPage = "N"
                        Else
                            sWebPage = rsData.GetValue(2).ToString
                        End If
                    Catch ex As Exception
                        sWebPage = "N"
                    End Try

                End If
                If sPublic.Equals("Y") Then
                    isPublic.Checked = True
                Else
                    isPublic.Checked = False
                End If
                If sMaster.Equals("Y") Then
                    isMaster.Checked = True
                Else
                    isMaster.Checked = False
                End If
                If sWebPage.Equals("Y") Then
                    isWebPage.Checked = True
                Else
                    isWebPage.Checked = False
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getSqlInstanceIdentifier Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()

        End Sub
        Function getRetentionPeriod(Byref SecureID As Integer, ByVal RetentionCode$) As Integer

            If RetentionCode.Trim.Length = 0 Then
                Return 50
            End If

            'Dim SqlServerMachineName$ = ""
            RetentionCode$ = UTIL.RemoveSingleQuotes(RetentionCode$)
            Dim S$ = "Select RetentionYears from Retention where RetentionCode = '" + RetentionCode$ + "'"
            Dim rsData As SqlDataReader = Nothing
            Dim rPeriod As Integer = 10
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    rPeriod = rsData.GetInt32(0)
                End If
            Catch ex As Exception
                rPeriod = 10
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getSqlInstanceIdentifier Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return rPeriod
        End Function

        Function getRetentionPeriodMax(SecureID as integer) As String

            'Dim SqlServerMachineName$ = ""
            Dim S$ = ""
            Dim MaxYears$ = getRetentionPeriodYearsMax(SecureID)
            Dim MaxPeriod$ = ""

            S = " SELECT [RetentionCode] FROM [Retention] where RetentionYears = " + MaxYears$

            Dim rsData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    MaxPeriod$ = rsData.GetValue(0).ToString
                End If
            Catch ex As Exception
                MaxPeriod$ = ""
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getRetentionPeriodMax Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return MaxPeriod$

        End Function
        Function getRetentionPeriodYearsMax(SecureID as integer) As String

            'Dim SqlServerMachineName$ = ""
            Dim S$ = ""
            S = " select MAX(RetentionYears) FROM [Retention]"

            Dim rsData As SqlDataReader = Nothing
            Dim rPeriod$ = "100"
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    rPeriod = rsData.GetValue(0).ToString
                End If
            Catch ex As Exception
                rPeriod = 10
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:getRetentionPeriodYearsMax Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return rPeriod
        End Function

        Sub SetExchangeDefaultRetentionCode(Byref SecureID As Integer)
            Dim S$ = ""
            S = S + " update ExchangeHostPop "
            S = S + " set RetentionCode = (select top(1) RetentionCode from Retention)"
            S = S + " where RetentionCode Is null "
            Me.ExecuteSqlNewConn(SecureID, S)
        End Sub
        Function GetDirRetentionCode(Byref SecureID As Integer, ByVal FQN$, ByVal UserID$) As String

            FQN = UTIL.RemoveSingleQuotes(FQN$)

            Dim S$ = ""
            Dim rCode$ = ""
            Try

                S = S + " select RetentionCode from Directory"
                S = S + " where UserID = '" + UserID$ + "'"
                S = S + " and FQN = '" + FQN$ + "'"

                Dim rsData As SqlDataReader = Nothing
                Dim rPeriod As Integer = 10
                Try

                    Dim CS as string = getConnStr(SecureID)
                    Dim CONN As New SqlConnection(CS)
                    CONN.Open()
                    Dim command As New SqlCommand(S, CONN)
                    rsData = command.ExecuteReader()

                    If rsData.HasRows Then
                        rsData.Read()
                        rCode$ = rsData.GetValue(0).ToString
                    End If

                    If Not rsData.IsClosed Then
                        rsData.Close()
                    End If
                    rsData = Nothing
                    command.Dispose()
                    command = Nothing

                    If CONN.State = ConnectionState.Open Then
                        CONN.Close()
                    End If
                    CONN.Dispose()

                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:GetDirRetentionCode Error 100: " + ex.Message)
                End Try

                'If Not rsData.IsClosed Then
                '    rsData.Close()
                'End If
                'rsData = Nothing
                GC.Collect()
                Return rCode
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error 2323.45 GetDirRetentionCode: " + ex.Message + vbCrLf + S)
                Return "Retain 20"
            End Try

            Return ""

        End Function
        Function GetRetentionMgr(Byref SecureID As Integer, ByVal RetentionCode$) As String
            Dim S$ = ""
            S = S + " select ManagerName from Retention   "
            S = S + " where RetentionCode = '" + RetentionCode + "'"

            Dim rCode$ = ""

            Dim rsData As SqlDataReader = Nothing
            Dim rPeriod As Integer = 10
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                If rsData.HasRows Then
                    rsData.Read()
                    rCode$ = rsData.GetValue(0).ToString
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase:GetRetentionMgr Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return rCode

        End Function
        Sub setRetentionDate(Byref SecureID As Integer, ByVal SourceGuid$, ByVal RetentionCode$, ByVal FileExtention$)

            Dim RetentionYears As Integer = getRetentionPeriod(SecureID, RetentionCode$)
            Dim rightNow As Date = Now
            rightNow = rightNow.AddYears(RetentionYears)
            Dim RetentionExpirationDate$ = rightNow.ToString
            Dim S$ = ""

            If FileExtention.ToUpper.Equals(".MSG") Or FileExtention.ToUpper.Equals(".EML") Then
                S = "Update email set RetentionExpirationDate = '" + RetentionExpirationDate$ + "' where EmailGuid = '" + SourceGuid$ + "' "
            Else
                S = "Update DataSource set RetentionExpirationDate = '" + RetentionExpirationDate$ + "' where SourceGuid = '" + SourceGuid$ + "' "
            End If

            Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S, False)

            If FileExtention.ToUpper.Equals(".MSG") Or FileExtention.ToUpper.Equals(".EML") Then
                S = "Update email set RetentionCode = '" + RetentionCode + "' where EmailGuid = '" + SourceGuid$ + "' "
            Else
                S = "Update DataSource set RetentionCode = '" + RetentionCode + "' where SourceGuid = '" + SourceGuid$ + "' "
            End If

            B = Me.ExecuteSqlNewConn(SecureID, S, False)
        End Sub


        Public Function cntMachine(Byref SecureID As Integer, ByVal MachineName$, ByVal FQN$, ByVal SourceGuid$) As Boolean

            FQN = UTIL.RemoveSingleQuotes(FQN)

            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            Dim RSData As SqlDataReader = Nothing
            S = " SELECT COUNT(*) FROM [Machine] where MachineName = '" + MachineName + "' and FQN = '" + FQN + "' and SourceGuid = '" + SourceGuid$ + "' "
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

            Try
                Using CONN



                    RSData.Read()
                    cnt = Val(RSData.GetValue(0).ToString)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If

                CONN = Nothing

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error - 1432.654.a - Failed to add machine for " + FQN)
                B = False
            End Try

            Return B

        End Function
        Function AddMachineSource(Byref SecureID As Integer, ByVal FQN$, ByVal SourceGuid$)

            Dim B As Boolean = False
            Dim MachineName$ = Environment.MachineName.ToString
            B = cntMachine(SecureID, MachineName$, FQN$, SourceGuid)
            If Not B Then
                Dim S$ = "INSERT INTO [Machine]"
                S = S + " ([MachineName]"
                S = S + " ,[FQN]"
                S = S + " ,[ContentType]"
                S = S + " ,[CreateDate]"
                S = S + " ,[LastUpdate]"
                S = S + " ,[SourceGuid]"
                S = S + " ,[UserID])"
                S = S + " VALUES "
                S = S + " ('" + MachineName + "'"
                S = S + " ,'" + FQN + "'"
                S = S + " ,'Source'"
                S = S + " ,GETDATE()"
                S = S + " ,GETDATE()"
                S = S + " ,'" + SourceGuid + "'"
                S = S + " ,'" + gCurrUserGuidID + "'"
                S = S + " )"

                B = Me.ExecuteSqlNewConn(SecureID, S, False)

            End If
            Return B
        End Function
        Function isLibOwner(Byref SecureID As Integer, ByVal LibName$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            S = " SELECT count(*) FROM [Library] where LibraryName = '" + LibName$ + "' and UserID = '" + gCurrUserGuidID + "' "

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            Try
                Using CONN
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If

                CONN = Nothing

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error - 2133.654.x - Failed to validate lib owner.")
                B = False
            End Try

            Return B
        End Function

        Function isLibItemOwner(Byref SecureID As Integer, ByVal LibraryItemGuid$) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False
            Dim cnt As Integer = -1

            S = " SELECT count(*) FROM [LibraryItems] where LibraryItemGuid = '" + LibraryItemGuid + "' and LibraryOwnerUserID = '" + gCurrUserGuidID + "' "


            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

            Try
                Using CONN
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using

                If cnt > 0 Then
                    B = True
                Else
                    B = False
                End If

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If

                CONN = Nothing

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error - 2133.696.y - Failed to validate lib item owner.")
                B = False
            End Try

            Return B
        End Function
        Sub getWebMetadata(Byref SecureID As Integer, ByVal SourceGuid$, ByRef WebParms As Dictionary(Of String, String))

            WebParms.Clear()

            Dim S$ = "Select "
            S = S + " [SourceName]"
            S = S + " ,[SourceTypeCode]"
            S = S + " ,[FQN]"
            S = S + " ,[FileLength]"
            S = S + " ,[FileDirectory]"
            S = S + " ,[OriginalFileType]"
            S = S + " ,[Description]"
            S = S + " ,[isGraphic]"
            S = S + " ,[isWebPage]"
            S = S + " FROM DataSource"
            S = S + " where SourceGuid  = '" + SourceGuid$ + "'"

            Dim SourceName$ = ""
            Dim SourceTypeCode$ = ""
            Dim FQN$ = ""
            Dim FileLength$ = ""
            Dim FileDirectory$ = ""
            Dim OriginalFileType$ = ""
            Dim Description$ = ""
            Dim isGraphic$ = ""
            Dim isWebPage$ = ""


            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()

            Try
                Using CONN
                    If RSData.HasRows Then
                        RSData.Read()
                        SourceName$ = RSData.GetValue(0).ToString
                        WebParms.Add("SourceName", SourceName$)

                        SourceTypeCode$ = RSData.GetValue(1).ToString
                        WebParms.Add("SourceTypeCode", SourceTypeCode)

                        FQN$ = RSData.GetValue(2).ToString
                        WebParms.Add("FQN", FQN)

                        FileLength$ = RSData.GetValue(3).ToString
                        WebParms.Add("FileLength", FileLength)

                        FileDirectory$ = RSData.GetValue(4).ToString
                        WebParms.Add("FileDirectory", FileDirectory)

                        OriginalFileType$ = RSData.GetValue(5).ToString
                        WebParms.Add("OriginalFileType", OriginalFileType)

                        Description$ = RSData.GetValue(6).ToString
                        WebParms.Add("Description", Description)

                        isGraphic$ = RSData.GetValue(7).ToString
                        WebParms.Add("isGraphic", isGraphic)

                        isWebPage$ = RSData.GetValue(8).ToString
                        WebParms.Add("isWebPage", isWebPage)

                    End If

                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing

                End Using


                CONN.Close()
                CONN = Nothing

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error getWebMetadata - 2133.696.y - Failed to acquire web metadata: " + ex.Message)
            End Try
        End Sub
        Sub PopulateLibCombo(Byref SecureID As Integer, ByRef CB As List(Of String))

            Try
                CB.Clear()
            Catch ex As Exception
                Debug.Print(ex.Message)
            End Try
            Dim S$ = ""
            Dim isAdmin As Boolean = Me.isAdmin(SecureID, gCurrUserGuidID)
            If isAdmin Then
                S$ = "Select LibraryName FROM Library order by LibraryName "
            Else
                S = "Select distinct [LibraryName]"
                S = S + " FROM [LibraryUsers]"
                S = S + " where UserID = '" + gCurrUserGuidID + "' "
                S = S + " group by LibraryName"
            End If

            Me.PopulateComboBox(SecureID, CB, "LibraryName", S)

        End Sub
        Function getCntSource(Byref SecureID As Integer, ByVal FQN$, ByVal MachineID$) As Integer
            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Dim S$ = ""
            S = S + " SELECT count(*) "
            S = S + " FROM DataSource"
            S = S + " where FQN = "
            S = S + "'" + FQN + "'"
            S = S + " and Machineid = '" + MachineID + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                'Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()

                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()

                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function
        'select datalength(SourceImage)  from DataSource where SourceGuid = '15bd8f45-5795-4526-adee-b0ddde66490b'
        Function GetImageSize(Byref SecureID As Integer, ByVal SourceGuid$) As Integer
            Dim S$ = ""
            S = "Select datalength(SourceImage)  from DataSource where SourceGuid = '" + SourceGuid$ + "'"
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function
        Function GetMaxVersionNbr(Byref SecureID As Integer, ByVal FQN$) As Integer
            Dim cnt As Integer = -1
            Dim S$ = ""

            Dim iCnt As Integer = getCntSource(SecureID, FQN$, gMachineID$)

            If iCnt = 0 Then
                Return -1
            End If

            FQN = UTIL.RemoveSingleQuotes(FQN)
            S = S + " SELECT MAX(VersionNbr) FROM DataSource where FQN = '" + FQN$ + "' and Machineid = '" + gMachineID + "'"

            Try
                CloseConn(SecureID)
                CkConn(SecureID)

                'Dim cmd As New SqlCommand(S, gConn)
                Dim RSData As SqlDataReader = Nothing

                Using gConn
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        RSData.Read()
                        cnt = RSData.GetInt32(0)
                        RSData.Close()
                        RSData = Nothing
                    Else
                        cnt = 0
                    End If
                    'cmd.Connection.Close()
                    'cmd = Nothing
                End Using
                If Not RSData Is Nothing Then
                    RSData = Nothing
                End If
                'If Not cmd Is Nothing Then
                '    cmd = Nothing
                'End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: clsDatabase : GetMaxVersionNbr 100 - " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: clsDatabase : GetMaxVersionNbr 100 - SQL: " + vbCrLf + S)
            End Try

            Return cnt
        End Function
        Sub ckFilesNeedUpdate(Byref SecureID As Integer, ByRef ListOfFiles$(), ByVal CheckArchiveBit As Boolean)
            Try
                Dim A$(0)
                For i As Integer = 0 To ListOfFiles$.Count - 1
                    Dim S$ = ListOfFiles$(i)

                    If S$ = Nothing Then
                        GoTo NxtRec
                    End If
                    If InStr(S, "|") = 0 Then
                        GoTo NxtRec
                    End If
                    A = S.Split("|")

                    Dim fiName = A(0)
                    Dim fiFullName = A(1)
                    Dim fiLength = A(2)
                    Dim fiExtension = A(3)
                    Dim fiLastAccessTime = A(4)
                    Dim fiCreationTime = A(5)
                    Dim fiLastWriteTime = A(6)

                    Dim FileLength As Integer = Val(fiLength)
                    Dim CreateDate As Date = CDate(fiCreationTime)
                    Dim LastAccessDate As Date = CDate(fiLastAccessTime)
                    Dim LastWriteTime As Date = CDate(fiLastWriteTime)
                    Dim b As Boolean = False
                    Dim VersionNbr As Integer = GetMaxVersionNbr(SecureID, fiFullName)
                    If VersionNbr < 0 Then
                        '** The file does not exist, add it.
                        b = True
                    Else
                        b = ckSourceNeedsUpdate(SecureID, fiFullName, VersionNbr.ToString, gMachineID$, FileLength, CreateDate, LastAccessDate, LastWriteTime)
                        If b Then
                            ListOfFiles$(i) = S$
                            'If CheckArchiveBit Then
                            '    Dim bArch As Boolean = DMA.isArchiveBitOn(fiFullName)
                            '    DMA.setArchiveBitOn(fiFullName)
                            'End If
                        Else
                            If gClipBoardActive = True Then Console.WriteLine("Here XX99")
                            If CheckArchiveBit Then
                                Dim bArch As Boolean = DMA.isArchiveBitOn(fiFullName)
                                DMA.setArchiveBitOff(fiFullName)
                            End If
                            ListOfFiles$(i) = ""
                        End If
                    End If
    NxtRec:
                Next
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 100 clsDatabase:ckFilesNeedUpdate - " + ex.Message)
            End Try

        End Sub

        Function ckSourceNeedsUpdate(Byref SecureID As Integer, ByVal FQN$, _
        ByVal VersionNbr$, _
        ByVal MachineID$, _
        ByVal FileLength As Integer, _
        ByVal CreateDate As Date, _
        ByVal LastAccessDate As Date, _
        ByVal LastWriteTime As Date) As Boolean

            Dim B As Boolean = False

            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Try
                Dim S$ = ""
                S = S + " SELECT [CreateDate]"
                S = S + " ,[LastAccessDate]"
                S = S + " ,[FileLength]"
                S = S + " ,[LastWriteTime]"
                S = S + " FROM DataSource"
                S = S + " where "
                S = S + " FQN = '" + FQN + "'"
                S = S + " and VersionNbr = " + VersionNbr$
                S = S + " and Machineid = '" + MachineID$ + "'"

                ''Clipboard.Clear()
                ''Clipboard.SetText(S)

                Dim TMachineID$ = ""
                Dim TFileLength As Integer = 0
                Dim TCreateDate As Date = Nothing
                Dim TLastAccessDate As Date = Nothing
                Dim TLastWriteTime As Date = Nothing

                CloseConn(SecureID)
                CkConn(SecureID)


                Dim cmd As New SqlCommand(S, gConn)
                Dim rsData As SqlDataReader = Nothing

                Using gConn
                    B = False
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                    If rsData.HasRows Then
                        rsData.Read()
                        Try
                            TCreateDate = rsData.GetDateTime(0)
                        Catch ex As Exception
                            TCreateDate = Now
                        End Try
                        Try
                            TLastAccessDate = rsData.GetDateTime(1)
                        Catch ex As Exception
                            TLastAccessDate = Now
                        End Try
                        Try
                            TFileLength = rsData.GetInt32(2)
                        Catch ex As Exception
                            TFileLength = 0
                        End Try
                        Try
                            TLastWriteTime = rsData.GetDateTime(3)
                        Catch ex As Exception
                            TLastWriteTime = Now
                        End Try

                    Else
                        B = True
                    End If

                    rsData.Close()
                    rsData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing

                    If TLastWriteTime < LastWriteTime Then
                        Return True
                    End If
                    If TLastAccessDate < LastAccessDate Then
                        Return True
                    End If
                    If TFileLength <> FileLength Then
                        Return True
                    End If
                    If TCreateDate < CreateDate Then
                        Return True
                    End If
                    B = False
                End Using
                If Not rsData Is Nothing Then
                    rsData = Nothing
                End If
                If Not cmd Is Nothing Then
                    cmd = Nothing
                End If
            Catch ex As Exception
                B = False
                LogMessage(SecureID,gCurrUserGuidID, "ERROR 001 clsDatabase:ckSourceNeedsUpdate - " + ex.Message)
            End Try

            Return B

        End Function
        Sub AddArchiveDir(Byref SecureID As Integer, ByVal DirFQN$)
            DirFQN$ = UTIL.RemoveSingleQuotes(DirFQN$)

            Dim iCnt As Integer = ArchiveDirExists(SecureID, DirFQN$, gMachineID$)

            If iCnt = 0 Then
                Dim S$ = ""
                Dim B As Boolean = False

                S = "INSERT INTO [DirectoryTemp]"
                S = S + " ([DirFQN]"
                S = S + " ,[CurrUserGuidID]"
                S = S + " ,[MachineID])"
                S = S + " VALUES "
                S = S + " ('" + DirFQN$ + "'"
                S = S + " ,'" + gCurrUserGuidID + "'"
                S = S + " ,'" + gMachineID + "'"

            End If

        End Sub
        Function ArchiveDirExists(Byref SecureID As Integer, ByVal DirFqn$, ByVal MachineID$) As Integer
            Dim S As String = ""

            DirFqn = UTIL.RemoveSingleQuotes(DirFqn)

            S = S + " SELECT COUNT(*) FROM [DirectoryTemp] where [DirFQN] = '" + DirFqn + "' and [CurrUserGuidID] = '" + gCurrUserGuidID + "' and [MachineID] = '" + MachineID + "'"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    cnt = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                End If

                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function
        Sub getDbInfo(Byref SecureID As Integer, ByRef ProductVersion$, ByRef ProductLevel$, ByRef Edition$, ByRef VersionDesc$)
            Dim S$ = ""
            S = S + " SELECT SERVERPROPERTY('productversion') as ProductVersion, "
            S = S + " SERVERPROPERTY ('productlevel') as ProductLevel, "
            S = S + " SERVERPROPERTY ('edition') as Edition, "
            S = S + " @@VERSION as VersionDesc"

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                ProductVersion$ = RSData.GetValue(0).ToString
                ProductLevel$ = RSData.GetValue(1).ToString
                Edition$ = RSData.GetValue(2).ToString
                VersionDesc$ = RSData.GetValue(3).ToString
                RSData.Close()
                RSData = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            GC.Collect()
            GC.WaitForFullGCComplete()
        End Sub
        Sub PopulateAllUserLibCombo(Byref SecureID As Integer, ByVal cb As List(Of String))
            Dim S$ = ""
            Try
                cb.Clear()

                S = ""
                S = S + "Select LibraryName from Library order by LibraryName "

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim LibraryName$ = RSData.GetValue(0).ToString
                        If cb.Contains(LibraryName) Then
                        Else
                            cb.Add(LibraryName)
                        End If
                    Loop
                End If
                RSData.Close()
                RSData = Nothing

        Catch ex As Exception
            Dim tMsg As String = ""
            tMsg = ex.Message + vbCrLf + S
            tMsg = tMsg.Replace("'", "`")
            xTrace(SecureID, 881123, "PopulateAllUserLibCombo", tMsg)
            End Try

        End Sub
    Public Sub PopulateGroupUserLibCombo(ByRef SecureID As Integer, ByVal UID As String, ByRef cb As List(Of String))
        Dim S$ = ""

        GC.Collect()
        GC.WaitForPendingFinalizers()

        Dim bIsAdmin As Boolean = isAdmin(SecureID, UID)
        Dim bGlobalSearcher As Boolean = isGlobalSearcher(SecureID, UID)
        Try
            cb.Clear()
            If bIsAdmin Or bGlobalSearcher Then
                S = ""
                S = S + "Select [LibraryName] FROM [Library] order by [LibraryName]"
            Else
                S = ""
                S = S + "Select distinct LibraryName from GroupLibraryAccess " + vbCrLf
                S = S + " where GroupName in " + vbCrLf
                S = S + " (select distinct GroupName from GroupUsers where UserID = '" + UID + "')" + vbCrLf
                S = S + "             union " + vbCrLf
                S = S + " select distinct LibraryName from LibraryUsers where UserID = '" + UID + "'" + vbCrLf
                S = S + " and LibraryName in (select LibraryName from Library)" + vbCrLf
                S = S + "             union " + vbCrLf
                S = S + " select LibraryName from Library where UserID = '" + UID + "'" + vbCrLf
            End If

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim LibraryName$ = RSData.GetValue(0).ToString
                    If cb.Contains(LibraryName) Then
                    Else
                        cb.Add(LibraryName)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

        Catch ex As Exception
            Dim tMsg As String = ""
            tMsg = ex.Message + vbCrLf + S
            tMsg = tMsg.Replace("'", "`")
            xTrace(SecureID, 881124, "PopulateGroupUserLibCombo", tMsg)
        End Try
        GC.Collect()
        GC.WaitForPendingFinalizers()
    End Sub

        Function GetUserGroupMembership(SecureID as integer) As ArrayList
            Dim A As New ArrayList
            Dim S$ = "Select distinct GroupName from GroupUsers where UserID = '" + gCurrUserGuidID + "'"
            Try
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim GroupyName$ = RSData.GetValue(0).ToString
                        A.Add(GroupyName)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
            Dim tMsg As String = ""
            tMsg = "ERROR GetUserGroupMembership 33.44.2 - " + ex.Message + vbCrLf + S
            tMsg = tMsg.Replace("'", "`")
            xTrace(SecureID, 881124, "PopulateGroupUserLibCombo", tMsg)
            End Try
            Return A
        End Function
        Public Function ckWorkingDirExists(Byref SecureID As Integer, ByVal TypeDir$) As Integer
            TypeDir$ = TypeDir$.ToUpper

            Dim S As String = ""
            If TypeDir$.Equals("CONTENT") Then
                S = S + " select COUNT(*) from SavedItems where ValName = 'CONTENT WORKING DIRECTORY' and Userid = '" + gCurrUserGuidID + "'"
            End If
            If TypeDir$.Equals("EMAIL") Then
                S = S + " select COUNT(*) from SavedItems where ValName = 'EMAIL WORKING DIRECTORY' and Userid = '" + gCurrUserGuidID + "'"
            End If

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return cnt
        End Function

        Function CreateNewWorkingDir(Byref SecureID As Integer, ByVal TypeDir$, ByVal DirName$)
            Dim S$ = ""

            Dim B As Boolean = False

            DirName = UTIL.RemoveSingleQuotes(DirName)
            Dim iCnt As Integer = 0

            If TypeDir$.Equals("EMAIL") Then

                iCnt = ckWorkingDirExists(SecureID, TypeDir$)
                If iCnt = 0 Then
                    S = S + " INSERT INTO [SavedItems]"
                    S = S + " ([Userid]"
                    S = S + " ,[SaveName]"
                    S = S + " ,[SaveTypeCode]"
                    S = S + " ,[ValName]"
                    S = S + " ,[ValValue])"
                    S = S + " VALUES "
                    S = S + " ('" + gCurrUserGuidID + "'"
                    S = S + " ,'UserStartUpParameters'"
                    S = S + " ,'StartUpParm'"
                    S = S + " ,'EMAIL WORKING DIRECTORY'"
                    S = S + " ,'" + DirName + "')"
                Else
                    S = S + " update SavedItems "
                    S = S + " set ValValue = '" + DirName$ + "'"
                    S = S + " where ValName = 'EMAIL WORKING DIRECTORY'"
                    S = S + " and Userid = '" + gCurrUserGuidID + "'"
                End If

                B = ExecuteSqlNewConn(SecureID, S)
                If B Then
                    LogMessage(SecureID,gCurrUserGuidID, "The new EMAIL working directory has been set to : " + DirName + " for User " + gCurrUserGuidID)
                Else
                    LogMessage(SecureID,gCurrUserGuidID, "Failed to set new EMAIL working directory to : " + DirName + " for User " + gCurrUserGuidID)
                End If

            ElseIf TypeDir$.Equals("CONTENT") Then
                iCnt = ckWorkingDirExists(SecureID, TypeDir$)
                If iCnt = 0 Then
                    S = S + " INSERT INTO [SavedItems]"
                    S = S + " ([Userid]"
                    S = S + " ,[SaveName]"
                    S = S + " ,[SaveTypeCode]"
                    S = S + " ,[ValName]"
                    S = S + " ,[ValValue])"
                    S = S + " VALUES "
                    S = S + " ('" + gCurrUserGuidID + "'"
                    S = S + " ,'UserStartUpParameters'"
                    S = S + " ,'StartUpParm'"
                    S = S + " ,'CONTENT WORKING DIRECTORY'"
                    S = S + " ,'" + DirName + "')"
                Else
                    S = S + " update SavedItems "
                    S = S + " set ValValue = '" + DirName$ + "'"
                    S = S + " where ValName = 'CONTENT WORKING DIRECTORY'"
                    S = S + " and Userid = '" + gCurrUserGuidID + "'"
                End If

                B = ExecuteSqlNewConn(SecureID, S)
                If B Then
                    LogMessage(SecureID,gCurrUserGuidID, "The new CONTENT working directory has been set to : " + DirName + " for User " + gCurrUserGuidID)
                Else
                    LogMessage(SecureID,gCurrUserGuidID, "Failed to set new CONTENT working directory to : " + DirName + " for User " + gCurrUserGuidID)
                End If

            End If

            Return B
        End Function
        Sub ckMissingWorkingDirs(Byref SecureID As Integer)
            Dim iCnt As Integer = 0
            Dim TempDirName$ = DMA.getEnvVarTempDir
            iCnt = ckWorkingDirExists(SecureID, "EMAIL")
            If iCnt = 0 Then
                CreateNewWorkingDir(SecureID, "EMAIL", TempDirName$)
            End If
            iCnt = ckWorkingDirExists(SecureID, "CONTENT")
            If iCnt = 0 Then
                CreateNewWorkingDir(SecureID, "CONTENT", TempDirName$)
            End If
        End Sub
        Function ExchangeEmailExists(Byref SecureID As Integer, ByVal EmailIdentifier$) As Boolean

            EmailIdentifier = UTIL.RemoveSingleQuotes(EmailIdentifier)

            Dim S$ = "Select COUNT(*) from Email where EmailIdentifier = '" + EmailIdentifier + "'"
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                RSData = Me.SqlQryNewConn(SecureID, S)
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            If cnt = 0 Then
                Return False
            Else
                Return True
            End If
        End Function
        Function isArchiveDisabled(Byref SecureID As Integer, ByVal ArchiveTypeCode$) As Boolean

            Dim S$ = ""
            Dim b As Boolean = False

            Try
                If ArchiveTypeCode$.Equals("EXCHANGE") Then
                    S = "Select ParmValue from RunParms where Parm = 'ExchangeDisabled' and UserID = '" + gCurrUserGuidID + "'"
                ElseIf ArchiveTypeCode$.Equals("CONTENT") Then
                    S = "Select ParmValue from RunParms where Parm = 'ContentDisabled' and UserID = '" + gCurrUserGuidID + "'"
                ElseIf ArchiveTypeCode$.Equals("EMAIL") Then
                    S = "Select ParmValue from RunParms where Parm = 'OutlookDisabled' and UserID = '" + gCurrUserGuidID + "'"
                ElseIf ArchiveTypeCode$.Equals("ALL") Then
                    S = "Select ParmValue from RunParms where Parm = 'ckDisable' and UserID = '" + gCurrUserGuidID + "'"
                Else
                    Return False
                End If


                Dim ParmVal$ = ""

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    ParmVal$ = RSData.GetValue(0).ToString
                    If ParmVal.ToUpper.Equals("TRUE") Then
                        b = True
                    Else
                        b = False
                    End If
                Else
                    b = False
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR - isArchiveDisabled : " + ex.Message)
                b = False
            End Try


            GC.Collect()
            GC.WaitForFullGCComplete()

            Return b

        End Function

        Public Sub WriteXMLData(Byref SecureID As Integer, ByVal TblName$, ByVal FQN$)
            getConnStr(SecureID)

            Dim S$ = "Select * from " + TblName

            Dim dsXmlData As New DataSet()

            Dim cn As New SqlConnection(gConnStr)
            Dim daTempData As New SqlDataAdapter(S, cn)

            ' Load data from database
            daTempData.Fill(dsXmlData, TblName)

            ' Write XML to file
            dsXmlData.WriteXml(FQN)

        End Sub
        Public Sub LoadRsFromXML(Byref SecureID As Integer, ByVal TblName$, ByVal FQN As String)

            getConnStr(SecureID)
            Dim S$ = "Select * from " + TblName
            Dim daSvr As New SqlDataAdapter(S, gConn)

            Dim DsSvr As New DataSet
            daSvr.Fill(DsSvr, TblName)

            Dim dsXml As New DataSet()
            ' Read in XML from file
            dsXml.ReadXml(FQN)
            Dim iCols As Integer = DsSvr.Tables(0).Columns.Count

            Dim DT As DataTable
            DT = DsSvr.Tables(0)

            Dim myBuilder As SqlCommandBuilder = New SqlCommandBuilder(daSvr)
            myBuilder.GetUpdateCommand()
            daSvr.UpdateCommand = myBuilder.GetUpdateCommand()
            daSvr.InsertCommand = myBuilder.GetInsertCommand()
            If gClipBoardActive = True Then Console.WriteLine(myBuilder.GetUpdateCommand())
            If gClipBoardActive = True Then Console.WriteLine(daSvr.UpdateCommand.ToString)

            For I As Integer = 0 To dsXml.Tables(0).Rows.Count - 1
                Dim DR As DataRow = Nothing
                DR = DT.NewRow
                For II As Integer = 0 To iCols - 1
                    DR(II) = dsXml.Tables(0).Rows(I).Item(II)
                Next
                DT.Rows.Add(DR)
                Try
                    daSvr.Update(DsSvr, TblName)
                Catch ex As Exception
                    If InStr(ex.Message.ToString, "duplicate key", CompareMethod.Text) > 0 Then
                        Console.WriteLine("ERROR clsDatabase:LoadRsFromXML - " + ex.Message)
                    Else
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR clsDatabase:LoadRsFromXML - " + ex.Message)
                    End If

                End Try
                DR = Nothing
            Next
            daSvr.Update(DsSvr, TblName)
            daSvr.Dispose()
            daSvr = Nothing
        End Sub
        Function FixIdExists(Byref SecureID As Integer, ByVal ID As Integer) As Boolean
            Dim S As String = ""
            Dim B As Boolean = False

            S = S + " select count(*) from [DB_Updates] where FixID = " + ID.ToString

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                RSData.Read()
                cnt = RSData.GetInt32(0)
                RSData.Close()
                RSData = Nothing
                cmd.Connection.Close()
                cmd = Nothing
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If

            If cnt > 0 Then
                B = True
            Else
                B = False
            End If

            Return B
        End Function
        Sub InitializeServiceParameters(Byref SecureID As Integer)

            Dim S$ = ""
            Dim B As Boolean = False

            B = SysParmExists(SecureID, "srv_LogDirectory")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_LogDirectory','Set to blank for default. Change where the service logs are written. This directory is relative to the SERVICE machine.','','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_DetailedLogging")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_DetailedLogging','When set to 0 no logging will be limited, when 1, full execution details will be logged.','0','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_MaxFileSize")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_MaxFileSize','When set to 0 no limit on upload file size, any other value set the max limit.','0','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_disable")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_disable','When set to anything other than 0 the ECM Service will continue to run but will NOT archive.','0','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_shutdown")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_shutdown','When set to 1, the service (next poll) will stop running.','0','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_PollingInterval")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_PollingInterval','This is the number of MINUTES between executing an archive.','60','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_ArchiveNow")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_ArchiveNow','Set this value to a 1 to set the archive state to immediate." ','0','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

            B = SysParmExists(SecureID, "srv_LastArchive")
            If B = False Then
                S$ = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)"
                S = S + " values ('srv_LastArchive','This is the datetime of the last completed archive.','" + Now.ToString + "','Y')"
                B = ExecuteSqlNewConn(SecureID, S)
            End If

        End Sub
        Function SysParmExists(Byref SecureID As Integer, ByVal ParmName$) As Boolean
            Dim B As Boolean = False
            Dim I As Integer = 0
            Dim ConnStr$ = getConnStr(SecureID)

            Try


                Dim S$ = "Select count(*) FROM [SystemParms] where [SysParm] = '" + ParmName$ + "'"
                Dim dsSharePoint As SqlDataReader = SqlQryNewConn(S, ConnStr$)

                If dsSharePoint.HasRows Then
                    dsSharePoint.Read()
                    I = dsSharePoint.GetInt32(0)
                    If I > 0 Then
                        B = True
                    Else
                        B = False
                    End If
                Else
                    B = False
                End If

                dsSharePoint.Close()
                dsSharePoint = Nothing

            Catch ex As Exception
                B = False
                LOG.WriteToArchiveLog("SysParmExists: 100 - " + ex.Message + vbCrLf + ConnStr$ + vbCrLf)
            End Try

            Return B

        End Function
        Sub AddDefaultRetentionCode(Byref SecureID As Integer)

            Dim UID$ = getUserGuidID(SecureID, "admin")
            Dim S$ = "INSERT INTO [Retention]"
            S = S + " ([RetentionCode]"
            S = S + " ,[RetentionDesc]"
            S = S + " ,[RetentionYears]"
            S = S + " ,[RetentionAction]"
            S = S + " ,[ManagerID]"
            S = S + " ,[ManagerName])"
            S = S + " VALUES "
            S = S + " ('R-10'"
            S = S + " ,'Retain for 10 years.'"
            S = S + " ,10"
            S = S + " ,'Move'"
            S = S + " ,'admin'"
            S = S + " ,'admin')"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S, False)
        End Sub

        Sub UpdateIP(Byref SecureID As Integer, ByVal HostName As String, ByVal IP As String, ByVal checkCode As Integer, ByRef RC As Boolean)
            ' 0 = add if new
            ' 1 = update access count
            ' 2 = update search count
            ' 2 = update access count and search count
            Dim B As Boolean = False
            Dim S$ = ""
            If checkCode = 0 Then
                S = "Select count(*) from IP where HostName ='" + HostName + "' and AccessingIP = '" + IP + "'"
                Dim WC$ = "where  HostName ='" + HostName + "' and AccessingIP = '" + IP + "'"
                Dim iCnt As Integer = iGetRowCount("IP", WC$)

                If iCnt = 0 Then
                    S = "INSERT INTO [IP]"
                    S = S + " (HostName, [AccessingIP]"
                    S = S + " ,[AccessCnt]"
                    S = S + " ,[BlockIP]"
                    S = S + " ,[currSearchCnt]"
                    S = S + " ,[FirstAccessDate]"
                    S = S + " ,[LastAccessDate])"
                    S = S + " VALUES "
                    S = S + " ('" + HostName + "', '" + IP + "'"
                    S = S + " ,1"
                    S = S + " ,0"
                    S = S + " ,0"
                    S = S + " ,'" + Now.ToString + "'"
                    S = S + " ,'" + Now.ToString + "')"
                    B = ExecuteSqlNewConn(SecureID, S)
                    If B = False Then
                        Me.xTrace(SecureID, 952, "updateIp: Failed to add IP - " + IP, "updateIp")
                    End If
                End If
            ElseIf checkCode = 1 Then
                S = "update [IP] set LastAccessDate = '" + Now.ToString + "', AccessCnt = AccessCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' "
                B = ExecuteSqlNewConn(SecureID, S)
                If B = False Then
                    Me.xTrace(SecureID, 953, "updateIp: Failed to update IP - " + IP, "updateIp")
                End If
            ElseIf checkCode = 2 Then
                S = "update [IP] set LastAccessDate = '" + Now.ToString + "', currSearchCnt = currSearchCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' "
                B = ExecuteSqlNewConn(SecureID, S)
                If B = False Then
                    Me.xTrace(SecureID, 954, "updateIp: Failed to add IP - " + IP, "updateIp")
                End If
            ElseIf checkCode = 3 Then
                S = "update [IP] set LastAccessDate = '" + Now.ToString + "', currSearchCnt = currSearchCnt + 1, AccessCnt = AccessCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' "
                B = ExecuteSqlNewConn(SecureID, S)
                If B = False Then
                    Me.xTrace(SecureID, 955, "updateIp: Failed to add IP - " + IP, "updateIp")
                End If
            End If
            RC = B
        End Sub

        Public Function UpdateDoNotChangeHelpText(Byref SecureID As Integer, ByVal WhereClause$, ByVal ScreenName$, ByVal WidgetName$, ByVal WidgetText$) As Boolean

            Dim b As Boolean = False
            Dim s As String = ""

            If Len(WhereClause) = 0 Then Return False

            s = s + " update HelpText set "
            s = s + "ScreenName = '" + ScreenName + "'" + ", "
            s = s + "WidgetName = '" + WidgetName + "'" + ", "
            s = s + "WidgetText = '" + WidgetText + "'"
            WhereClause = " " + WhereClause
            s = s + WhereClause
            b = ExecuteSqlNewConn(SecureID, S, False)

            Return b
        End Function
        Function isClientOnly(Byref SecureID As Integer, ByVal UserID$) As Boolean

            Dim B As Boolean = False
            Dim S$ = "Select ClientOnly from Users where UserID = '" + UserID + "'"
            Try
                CloseConn(SecureID)
                CkConn(SecureID)

                Dim cmd As New SqlCommand(S, gConn)
                Dim RSData As SqlDataReader = Nothing

                Using gConn
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        RSData.Read()
                        Try
                            B = RSData.GetBoolean(0)
                        Catch ex As Exception
                            B = False
                        End Try
                        RSData.Close()
                        RSData = Nothing
                        cmd.Connection.Close()
                        cmd = Nothing
                    Else
                        B = False
                    End If

                End Using
                If Not RSData Is Nothing Then
                    RSData = Nothing
                End If
                If Not cmd Is Nothing Then
                    cmd = Nothing
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERR: isClientOnly - " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "ERR: isClientOnly - " + ex.StackTrace)
                B = False
            End Try

            Return B

        End Function
        Function isSingleInstance(SecureID as integer) As Boolean
            'select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            Dim S As String = ""
            Dim B As Boolean = False

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim tVal$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                    B = False
                    If tVal.Equals("Y") Or tVal.Equals("y") Then
                        B = True
                    End If
                    If tVal.Equals("1") Then
                        B = True
                    End If
                Else
                    B = False
                End If

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return B

        End Function

        Function isExtendedPdfProcessing(SecureID as integer) As Boolean
            'select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            Dim S As String = ""
            Dim B As Boolean = True

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EcmPDFX' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim tVal$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                    B = False
                    If tVal.Equals("Y") Or tVal.Equals("y") Then
                        B = True
                    End If
                    If tVal.Equals("1") Then
                        B = True
                    End If
                Else
                    B = False
                End If

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return B

        End Function


        Function getPdfProcessingDir(SecureID as integer) As String
            'select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            Dim S As String = ""
            Dim B As Boolean = True

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EcmPDFdir' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    S = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                Else
                    B = False
                End If

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If

            If S.Length = 0 Then
                Dim InsertSql As String = ""
                InsertSql = "INSERT [dbo].[SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_EcmPDFdir', 'Set this as the temporary PDF/Graphics processing directory. NO SPACES ALLOWED IN NAME.', 'C:\TEMP\PdfProcessing\', NULL, NULL, NULL, NULL)"
                ExecuteSqlNewConn(SecureID, InsertSql)
                S = "C:\TEMP\PdfProcessing\"
            End If

            Return S

        End Function

        Function isPublicAllowed(SecureID as integer) As Boolean

            Dim S As String = ""
            Dim B As Boolean = False

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_AllowPublic' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim tVal$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                    B = False
                    If tVal.Equals("Y") Or tVal.Equals("y") Then
                        B = True
                    ElseIf tVal.Equals("1") Then
                        B = True
                    Else
                        B = False
                    End If
                Else
                    B = False
                End If

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return B

        End Function

        Sub setMaxFileUploadSize(Byref SecureID As Integer)

            Dim S As String = ""
            Dim B As Boolean = False

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_MaxFileSize' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing
            Dim MaxSize As Double = 0

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim tVal$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                    gMaxSize = CInt(tVal)
                End If
            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            CloseConn(SecureID)

        End Sub

        Function ShowGraphicMetaDataScreen(SecureID as integer) As Boolean
            'select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            Dim S As String = ""
            Dim B As Boolean = False

            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EmbededJPGMetadata' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim cnt As Integer = -1
            Dim cmd As New SqlCommand(S, gConn)
            Dim RSData As SqlDataReader = Nothing

            Using gConn
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    Dim tVal$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    cmd.Connection.Close()
                    cmd = Nothing
                    B = False
                    If tVal.Equals("Y") Or tVal.Equals("y") Then
                        B = True
                    End If
                    If tVal.Equals("1") Then
                        B = True
                    End If
                Else
                    B = False
                End If

            End Using
            If Not RSData Is Nothing Then
                RSData = Nothing
            End If
            If Not cmd Is Nothing Then
                cmd = Nothing
            End If
            Return B

        End Function
        'Sub LoadDefaultSystemParms()
        '    Dim S$ = ""
        '    Dim I As Integer = 0

        '    S = "Select count(*) from SystemParms where SysParm = 'Default Thesaurus'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('MaxUrlsToProcess', 'The number of levels to penetrate in a web site.', '2', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'EmailFolder1'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('Default Thesaurus', 'This is the thesaurus that will be used when a specific thesaurus is not specified.', 'Roget', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'MaxSearchesToTrack'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('RETENTION YEARS', 'The default number years to retain content.', '10', 'N', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'MaxUrlsToProcess'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('EmailFolder1', 'This is the Top Level folder name and is required. It can be overridden for an individual user using the APP.CONFIG file, entry name EmailFolder1', 'Personal Folders', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'RETENTION YEARS'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SharePointVirtualLimit', 'When there are less records than this number, then a linked list is used for PURE speed.', '100001', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'SharePointECMVirtualLimit'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SharePointECMVirtualLimit', 'When there are less records than this number, then a linked list is used for PURE speed.', '1000001', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'SharePointVirtualLimit'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_disable', 'When set to anything other than 0 the ECM Service will continue to run but will NOT archive.', '0', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'SqlServerTimeout'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_PollingInterval', 'This is the number of MINUTES between executing an archive.', '60', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'srv_disable'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_LastArchive', 'This is the datetime of the last completed archive.', '10/22/2009 7:58:57 PM', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'srv_LastArchive'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('MaxSearchesToTrack', 'The number of searches the user has in their immediate history.', '25', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'srv_PollingInterval'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SqlServerTimeout', 'This is the value that will be assigned to the SQL Server timeout for users that do not have a specific timeout established.', '90', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'srv_shutdown'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_shutdown', 'When set to 1, the service (next poll) will stop running.', '0', 'Y', NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'SYS_SingleInstance'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_SingleInstance', 'When set to 1, ECM will store just 1 copy of an archive.', '0', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        '    S = "Select count(*) from SystemParms where SysParm = 'SYS_AllowPublic'"
        '    I = iCount(Secureid,S)
        '    If I = 0 Then
        '        S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_AllowPublic', 'When set to 1, ECM will allow a user to set their content so it can be viewed by all users, otherwise, only they can see their content.', '0', NULL, NULL, NULL, NULL)"
        '        Me.ExecuteSqlNewConn(SecureID,S)
        '    End If

        'End Sub

        Function AddContentOwner(Byref SecureID As Integer, ByVal SourceGuid$, ByVal UserID$) As Boolean
            Dim iCnt As Integer = 0
            Dim S$ = ""

            S = "Select count(*) from DataSourceOwner where Sourceguid = '" + SourceGuid$ + "' and UserID = '" + UserID$ + "'"
            iCnt = iCount(Secureid,S)

            If iCnt = 0 Then
                Try
                    S = "INSERT INTO [DataSourceOwner] ([SourceGuid] ,[UserID]) VALUES ('" + SourceGuid$ + "' ,'" + UserID$ + "')"
                    Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If Not B Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddContentOwner - " + S)
                    End If
                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddContentOwner - " + ex.Message + vbCrLf + S)
                End Try
            End If

        End Function
        Function ContentOwnerExists(Byref SecureID As Integer, ByVal SourceGuid$, ByVal UserID$) As Boolean
            Dim iCnt As Integer = 0
            Dim S$ = ""

            S = "Select count(*) from DataSourceOwner where Sourceguid = '" + SourceGuid$ + "' and UserID = '" + UserID$ + "'"
            iCnt = iCount(Secureid,S)

            If iCnt = 0 Then
                Return False
            Else
                Return True
            End If

        End Function
        Sub SyncSourceOwners(Byref SecureID As Integer)

            Dim SqlStmts As New List(Of String)

            Dim S$ = "Select Count(*) from DataSource"
            Dim iCnt As Integer = iCount(Secureid,S)
            Dim I As Integer = 0
            '''FrmMDIMain.SB.Text = "0 of " + iCnt.ToString

            S$ = "Select SourceGuid, DataSourceOwnerUserID from DataSource where [SourceGuid] not in (Select SourceGuid from [DataSourceOwner]) "

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    I += 1
                    If I Mod 100 = 0 Then
                        '''FrmMDIMain.SB.Text = I.ToString + " of " + iCnt.ToString
                        ''FrmMDIMain.Refresh()
                        'Application.DoEvents()
                    End If
                    Dim SourceGuid$ = RSData.GetValue(0).ToString
                    Dim DataSourceOwnerUserID$ = RSData.GetValue(0).ToString
                    'Dim B As Boolean = ContentOwnerExists(SourceGuid$, gCurrUserGuidID)
                    'If Not B Then
                    S = "INSERT INTO [DataSourceOwner] ([SourceGuid] ,[UserID]) VALUES ('" + SourceGuid$ + "' ,'" + DataSourceOwnerUserID$ + "')"
                    SqlStmts.Add(S)
                    'End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            For I = 0 To SqlStmts.Count - 1
                If I Mod 100 = 0 Then
                    '''FrmMDIMain.SB.Text = "+ " + I.ToString + " of " + iCnt.ToString
                    ''FrmMDIMain.Refresh()
                    'Application.DoEvents()
                End If
                S = SqlStmts(I)
                Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR: SyncSourceOwners - " + S)
                End If
            Next

        End Sub
        'Sub ckRunAtStartUp()

        '    Dim C$ = ""
        '    Dim RunAtStart As Boolean = False

        '    C = getRconParm(gCurrUserGuidID, "LoadAtStartup")
        '    If C.Length > 0 Then
        '        If C.Equals("True") Then
        '            RunAtStart = True
        '        ElseIf C.Equals("False") Then
        '            RunAtStart = False
        '        Else
        '            Return
        '        End If
        '        Try
        '            Dim aPath As String = ""
        '            aPath = System.Reflection.Assembly.GetExecutingAssembly.Location
        '            If RunAtStart Then
        '                Dim oReg As RegistryKey = Registry.CurrentUser
        '                'Dim oKey As RegistryKey = oReg.OpenSubKey("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run", True)
        '                Dim oKey As RegistryKey = oReg.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Run", True)
        '                oKey.CreateSubKey("EcmLibrary")
        '                oKey.SetValue("EcmLibrary", aPath)
        '                oKey.Close()
        '            Else
        '                Dim oReg As RegistryKey = Registry.CurrentUser
        '                Dim oKey As RegistryKey = oReg.OpenSubKey("Software\Microsoft\Windows\CurrentVersion\Run", True)
        '                oKey.CreateSubKey("EcmLibrary")
        '                oKey.SetValue("EcmLibrary", "")
        '                oKey.DeleteSubKey("EcmLibrary")
        '                oKey.Close()
        '            End If
        '        Catch ex As Exception
        '            LogMessage(SecureID,gCurrUserGuidID, "ERROR ckRunAtStartUp 102.22.1 - Failed to set start up parameter." + vbCrLf + ex.Message)
        '        End Try
        '    End If
        'End Sub
        Public Sub RegisterMachineToDB(Byref SecureID As Integer, ByVal MachineName$)
            MachineName$ = UTIL.RemoveSingleQuotes(MachineName$)
            Dim iCnt As Integer = iGetRowCount("MachineRegistered", " Where MachineName = '" + MachineName + "' ")
            If iCnt = 0 Then
                Dim S$ = ""
                Dim B As Boolean = False
                S = "Insert into MachineRegistered (MachineName,CreateDate,LastUpdate) values ('" + MachineName + "', '" + Now.ToString + "', '" + Now.ToString + "')"
                B = ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR RegisterMachineToDB 100 - Failed to add machine ID." + vbCrLf + S)
                End If
            End If

        End Sub
        Public Function isMachineRegistered(Byref SecureID As Integer, ByVal MachineName$) As Boolean
            MachineName$ = UTIL.RemoveSingleQuotes(MachineName$)
            Dim iCnt As Integer = iGetRowCount("MachineRegistered", " Where MachineName = '" + MachineName + "' ")
            If iCnt = 0 Then
                Return False
            Else
                Return True
            End If
        End Function
        Sub RegisterEcmClient(Byref SecureID As Integer, ByVal MachineName$)
            Dim iCnt As Integer = 0

            MachineName$ = UTIL.ReplaceSingleQuotes(MachineName$)

            iCnt = Me.iCount(SecureID, "Select count(*) from LoginClient where MachineName = '" + MachineName$ + "'")
            If iCnt = 0 Then
                Dim S$ = "Insert into LoginClient (MachineName) values ('" + MachineName$ + "') "
                Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR: RegisterEcmClient - Failed to register client for " + MachineName$ + ".")
                End If
            End If
        End Sub

        Function isDirAdminDisabled(Byref SecureID As Integer, ByVal UserID$, ByVal FQN$) As Boolean

            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Dim B As Boolean = False
            Try
                Dim S$ = "Select count(*) from Directory where UserID = '" + UserID$ + "' and FQN = '" + FQN$ + "' and AdminDisabled = 1"
                Dim I As Integer = Me.iCount(Secureid,S)
                If I >= 1 Then
                    B = True
                Else
                    B = False
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR clsDatabase:isDirAdminDisabled 100 - " + ex.Message)
                B = False
            End Try
            Return B
        End Function

        Public Function getFolderNameById(Byref SecureID As Integer, ByVal FolderID$) As String
            Dim b As Boolean = True
            Dim S As String = ""
            S = "Select [FolderName]      "
            S = S + " FROM [EmailFolder]"
            S = S + " where [FolderID] = '" + FolderID + "' and Userid = '" + gCurrUserGuidID + "' "
            Dim i As Integer = 0
            Dim id$ = ""

            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            rsData = command.ExecuteReader()

            If rsData.HasRows Then
                rsData.Read()
                id = rsData.GetValue(0).ToString
            Else
                id = ""
            End If

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            command.Dispose()
            command = Nothing

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
            'LogMessage(SecureID,gCurrUserGuidID, "*** FOLDER NOTICE getFolderNameById ID 001z - : " + id + vbCrLf + S)
            Return id
        End Function

        Public Function getFolderIdByName(Byref SecureID As Integer, ByVal FolderName$, ByVal UID$) As String

            FolderName = UTIL.RemoveSingleQuotes(FolderName)

            Dim b As Boolean = True
            Dim S As String = ""
            S = "Select [FolderID]      "
            S = S + " FROM [EmailFolder]"
            S = S + " where [FolderName] = '" + FolderName + "' and UserID = '" + UID + "' "
            Dim i As Integer = 0
            Dim id$ = ""

            Dim rsData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
            If rsData.HasRows Then
                rsData.Read()
                id = rsData.GetValue(0).ToString
            Else
                id = ""
            End If

            rsData.Close()
            rsData = Nothing

            Return id

        End Function

    Sub RemoveLibraryDirectories(Byref SecureID As Integer, ByVal UserID As String, ByVal DirectoryName As String, ByVal LibraryName As String, ByRef RC As Boolean, ByRef RetMsg As String)
        RC = False
        DirectoryName$ = UTIL.RemoveSingleQuotes(DirectoryName$)

        Dim s$ = ""
        s = s + " select count(*) from LibraryItems"
        s = s + " where LibraryName = '" + LibraryName$ + "'"
        s = s + " and SourceGuid in (select SourceGuid from DataSource where FileDirectory = '" + DirectoryName$ + "')"

        Dim icnt As Integer = iCount(SecureID, s)
        If icnt = 0 Then
            RC = True
            Return
        End If

        UTIL.WriteToSqlLog("INFO RemoveLibraryDirectories: removed " + icnt.ToString + " rows from directory " + DirectoryName + " in library " + LibraryName + ".")

        Dim ULogin$ = UserID

        s = ""
        s = s + " DELETE FROM LibraryItems "
        s = s + " where LibraryName = '" + LibraryName$ + "'"
        s = s + " and SourceGuid in (select SourceGuid from DataSource where FileDirectory = '" + DirectoryName$ + "')"

        Dim B As Boolean = ExecuteSqlNewConn(SecureID, s)
        If B = True Then
            Dim Msg$ = "Notice: Directory '" + DirectoryName$ + "' was removed from library '" + LibraryName$ + "' by User '" + ULogin$ + "'"
            LogMessage(SecureID, UserID, Msg$)
            AddSysMsg(SecureID, Msg$)
            RC = True
        Else
            RC = False
            Dim Msg$ = "Notice: Directory '" + DirectoryName$ + "' FAILED to remove from library '" + LibraryName$ + "' by User '" + ULogin$ + "'"
            LogMessage(SecureID, UserID, Msg$)
            AddSysMsg(SecureID, Msg$)
        End If
    End Sub
    Sub RemoveLibraryEmails(Byref SecureID As Integer, ByVal FolderName As String, ByVal LibraryName As String, ByVal UserID As String, ByRef RC As Boolean, ByRef RetMsg As String)

        Dim s$ = ""
        Dim CurrentmailFolderID$ = getFolderIdByName(SecureID, FolderName$, UserID)

        s = s + " select count(*) from LibraryItems"
        s = s + " where LibraryName = '" + LibraryName$ + "'"
        s = s + " and SourceGuid in (select EmailGuid from Email where OriginalFolder = '" + FolderName$ + "')"

        Dim icnt As Integer = iCount(SecureID, s)
        If icnt = 0 Then
            RC = True
            Return
        Else
            RetMsg = "Emails to remove from library = " & icnt
        End If

        LogMessage(SecureID, gCurrUserGuidID, "INFO: RemoveLibraryEmails removed " + icnt.ToString + " records from email folder + " + FolderName + " and Library " + LibraryName + ".")

        s = ""
        s = s + " delete from LibraryItems"
        s = s + " where LibraryName = '" + LibraryName$ + "'"
        s = s + " and SourceGuid in (select EmailGuid from Email where OriginalFolder = '" + FolderName$ + "')"

        Dim B As Boolean = ExecuteSqlNewConn(SecureID, s)

        If B = True Then
            Dim Msg$ = "Notice: EMAIL Folder '" + FolderName$ + "' was removed from library '" + LibraryName$ + "' by User '" + UserID$ + "'"
            LogMessage(SecureID, gCurrUserGuidID, Msg$)
            AddSysMsg(SecureID, Msg$)
        Else
            Dim Msg$ = "Notice: EMAIL Folder '" + FolderName$ + "' - FAILED to remove from library '" + LibraryName$ + "' by User '" + UserID$ + "'"
            LogMessage(SecureID, gCurrUserGuidID, Msg$)
            AddSysMsg(SecureID, Msg$)
        End If

    End Sub

    Sub AddLibraryDirectory(Byref SecureID As Integer, ByVal FolderName As String, ByVal LibraryName As String, ByVal UserID As String, ByRef RecordsAdded As Integer, ByRef RC As Boolean, ByRef RetMsg As String)

        Dim bAddSubDir As Boolean = isSubDirProcessed(SecureID, UserID, FolderName.Trim)

        RecordsAdded = 0
        Dim s$ = "Select count(*) from DataSource where FileDirectory = '" + FolderName$ + "' and DataSourceOwnerUserID = '" + UserID + "' "

        If bAddSubDir Then
            s$ = "Select count(*) from DataSource where FileDirectory like '" + FolderName$ + "%' and DataSourceOwnerUserID = '" + UserID + "' "
        Else
            s$ = "Select count(*) from DataSource where FileDirectory = '" + FolderName$ + "' and DataSourceOwnerUserID = '" + UserID + "' "
        End If

        Dim iCnt As Integer = Me.iCount(SecureID, s)
        If iCnt = 0 Then
            RC = True
            Return
        End If

        If bAddSubDir Then
            s$ = "Select sourceguid,SourceName,OriginalFileType from DataSource where FileDirectory like '" + FolderName$ + "%' and DataSourceOwnerUserID = '" + UserID + "' "
        Else
            s$ = "Select sourceguid,SourceName,OriginalFileType from DataSource where FileDirectory = '" + FolderName$ + "' and DataSourceOwnerUserID = '" + UserID + "' "
        End If

        Dim SourceName$ = ""
        Dim ItemType$ = ""
        Dim LibraryItemGuid$ = ""
        Dim LibraryOwnerUserID$ = GetLibOwnerByName(SecureID, LibraryName)
        Dim AddedByUserGuidId$ = gCurrUserGuidID
        Dim DataSourceOwnerUserID$ = UserID


        Dim SourceGuid$
        Dim OriginalFileType$
        Dim i As Integer = 0
        Dim RSData As SqlDataReader = Nothing

        Dim TempDirName$ = DMA.getEnvVarTempDir
        Dim TempFQN$ = TempDirName$ + "\AddLibItems.txt"

        Dim F As File
        If F.Exists(TempFQN$) Then
            F.Delete(TempFQN$)
        End If
        F = Nothing

        Dim CS as string = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(s, CONN)
        RSData = command.ExecuteReader()

        If RSData.HasRows Then
            Do While RSData.Read()
                i += 1

                SourceGuid$ = RSData.GetValue(0).ToString
                SourceName$ = RSData.GetValue(1).ToString
                OriginalFileType$ = RSData.GetValue(2).ToString
                ItemType$ = OriginalFileType$
                LibraryItemGuid = Guid.NewGuid.ToString

                Dim sData$ = SourceGuid
                sData += Chr(254) + SourceName
                sData += Chr(254) + ItemType
                sData += Chr(254) + LibraryItemGuid
                sData += Chr(254) + DataSourceOwnerUserID
                sData += Chr(254) + LibraryOwnerUserID
                sData += Chr(254) + LibraryName
                sData += Chr(254) + AddedByUserGuidId

                LOG.WriteToTempFile(TempFQN$, sData)

            Loop
        End If
        RSData.Close()
        RSData = Nothing

        Dim iRecCount As Integer = 0
        Dim objReaderCtr As New System.IO.StreamReader(TempFQN$)
        Do While objReaderCtr.Peek() <> -1
            Dim TextLine$ = objReaderCtr.ReadLine()
            iRecCount += 1
        Loop

        objReaderCtr = Nothing

        Dim LI As New clsLIBRARYITEMS(SecureID)

        i = 0
        Dim objReader As New System.IO.StreamReader(TempFQN$)
        Do While objReader.Peek() <> -1

            If gTerminateImmediately = True Then
                Return
            End If

            i += 1

            Dim TextLine$ = objReader.ReadLine()
            If TextLine$.Length = 0 Then
                GoTo NextRec
            End If

            Dim A$() = TextLine.Split(Chr(254))

            If A.Length < 2 Then
                GoTo NextRec
            End If

            SourceGuid = A(0)
            SourceName = A(1)
            ItemType = A(2)
            LibraryItemGuid = A(3)
            DataSourceOwnerUserID = A(4)
            LibraryOwnerUserID = A(5)
            LibraryName = A(6)
            AddedByUserGuidId = A(7)

            RecordsAdded += 1
            s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'"
            iCnt = iCount(SecureID, s)

            If iCnt = 0 Then
                LI.setAddedbyuserguidid(AddedByUserGuidId)
                LI.setDatasourceowneruserid(DataSourceOwnerUserID)
                LI.setItemtitle(SourceName)
                LI.setItemtype(ItemType)
                LI.setLibraryitemguid(LibraryItemGuid)
                LI.setLibraryname(LibraryName)
                LI.setLibraryowneruserid(LibraryOwnerUserID)
                LI.setSourceguid(SourceGuid)
                Dim b As Boolean = LI.Insert
                If Not b Then
                    LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to add Library Item Directory: '" + FolderName$ + "', Library: '" + LibraryName + "', SourceName: '" + SourceName + "'")
                End If
            End If
    NextRec:
        Loop

        objReader = Nothing

        LI = Nothing
        GC.Collect()

        s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'"
        iCnt = iCount(SecureID, s)

    End Sub
    Sub AddLibraryEmail(Byref SecureID As Integer, ByVal EmailFolder As String, ByVal LibraryName As String, ByVal UserID As String, ByRef RecordsAdded As Integer, ByRef RC As Boolean, ByRef RetMsg As String)

        Dim ListOfItems As New List(Of String)
        Dim CurrentmailFolderID$ = getFolderIdByName(SecureID, EmailFolder, UserID)

        'select emailguid, SUBSTRING(subject,1,100) as Subject, sourcetypecode from Email where Currmailfolderid  = '00000000AE37B53150C4EF4991D438C857CB5B08A2B40000'
        Dim s As String = "Select count(*) from Email where OriginalFolder  = '" + EmailFolder + "'"
        s = ""
        s = s + " select count(*) "
        s = s + " from Email where OriginalFolder  = '" + EmailFolder + "'"
        s = s + " and Email.UserID in (select UserID from LibraryUsers where LibraryName = '" + LibraryName + "')"

        Dim iCnt As Integer = Me.iCount(SecureID, s)
        If iCnt = 0 Then
            Return
        End If

        s = "Select emailguid, SUBSTRING(subject,1,100) as Subject, SUBSTRING(body,1,100) as Body, sourcetypecode from Email where OriginalFolder  = '" + EmailFolder + "'"

        s = ""
        s = s + " select emailguid, SUBSTRING(subject,1,100) as Subject, SUBSTRING(body,1,100) as Body, sourcetypecode "
        s = s + " from Email where OriginalFolder  = '" + EmailFolder + "'"
        s = s + " and Email.UserID in (select UserID from LibraryUsers where LibraryName = '" + LibraryName + "')"

        Dim SourceName$ = ""
        Dim ItemType$ = ""
        Dim LibraryItemGuid$ = ""
        Dim LibraryOwnerUserID$ = GetLibOwnerByName(SecureID, LibraryName)
        Dim AddedByUserGuidId$ = gCurrUserGuidID
        Dim DataSourceOwnerUserID$ = UserID
        Dim Body$ = ""


        Dim EmailGuid$ = ""
        Dim OriginalFileType$ = ""
        Dim i As Integer = 0
        Dim RSData As SqlDataReader = Nothing

        Dim TempDirName$ = DMA.getEnvVarTempDir
        Dim TempFQN$ = TempDirName$ + "\AddLibItems.txt"

        'Dim F As File
        'If F.Exists(TempFQN$) Then
        '    Try
        '        F.Delete(TempFQN$)
        '    Catch ex As Exception
        '        LogMessage(SecureID, gCurrUserGuidID, "Warning: could not delete " + TempFQN$ + "." + vbCrLf + ex.Message)
        '    End Try
        'End If
        'F = Nothing

        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : RSData = command.ExecuteReader()
        If RSData.HasRows Then
            Do While RSData.Read()

                i += 1

                EmailGuid$ = RSData.GetValue(0).ToString
                SourceName$ = RSData.GetValue(1).ToString
                Body = RSData.GetValue(2).ToString
                OriginalFileType$ = RSData.GetValue(3).ToString

                If InStr(SourceName, vbCrLf) > 0 Or InStr(SourceName, vbCr) > 0 Or InStr(SourceName, vbLf) > 0 Then
                    SourceName = UTIL.RemoveCrLF(SourceName)
                End If
                If InStr(Body, vbCrLf) > 0 Or InStr(Body, vbCr) > 0 Or InStr(Body, vbLf) > 0 Then
                    Body = UTIL.RemoveCrLF(Body)
                End If

                If SourceName$.Trim.Length = 0 Then
                    SourceName$ = "-"
                End If

                If Body.Trim.Length = 0 Then
                    Body = "-"
                End If
                If OriginalFileType$.Trim.Length = 0 Then
                    OriginalFileType$ = "?"
                End If

                ItemType$ = OriginalFileType$
                LibraryItemGuid = Guid.NewGuid.ToString

                Dim sData$ = ""
                sData = EmailGuid + Chr(253)
                sData = sData + SourceName$ + Chr(253)
                sData = sData + Body + Chr(253)
                sData = sData + ItemType + Chr(253)
                sData = sData + LibraryItemGuid + Chr(253)
                sData = sData + DataSourceOwnerUserID + Chr(253)
                sData = sData + LibraryOwnerUserID + Chr(253)
                sData = sData + LibraryName + Chr(253)
                sData = sData + AddedByUserGuidId + Chr(253)

                ListOfItems.Add(sData)
                'LOG.WriteToTempFile(TempFQN$, sData)

            Loop
        End If
        RSData.Close()
        RSData = Nothing

        Dim iRecCount As Integer = 0
        Dim objReaderCtr As New System.IO.StreamReader(TempFQN$)
        Do While objReaderCtr.Peek() <> -1
            Dim TextLine$ = objReaderCtr.ReadLine()
            iRecCount += 1
        Loop

        objReaderCtr = Nothing

        Dim LI As New clsLIBRARYITEMS(SecureID)

        i = 0
        'Dim objReader As New System.IO.StreamReader(TempFQN$)
        'Do While objReader.Peek() <> -1
        For Each sItem As String In ListOfItems
            i += 1
            If i Mod 10 = 0 Then
                Dim iToProcess As Integer = iRecCount - i
                If iToProcess > 0 Then
                    'FrmMDIMain.TSPB1.Value = iToProcess
                End If
                'Application.DoEvents()
            End If
            'Dim TextLine$ = objReader.ReadLine()
            Dim TextLine$ = s

            If TextLine$.Trim.Length = 0 Then
                GoTo SkipRec01
            End If

            Dim A$() = TextLine.Split(Chr(253))

            If A$.Length <> 10 Then
                LogMessage(SecureID, gCurrUserGuidID, "Warning: Failed to enter email lib item " + A(1).Trim + ",  " + A(0).Trim)
                GoTo SkipRec01
            End If

            EmailGuid = A(0).Trim
            SourceName$ = A(1).Trim
            Body = A(2).Trim
            ItemType = A(3).Trim
            LibraryItemGuid = A(4).Trim
            DataSourceOwnerUserID = A(5).Trim
            LibraryOwnerUserID = A(6).Trim
            LibraryName = A(7).Trim
            AddedByUserGuidId = A(8).Trim

            Dim NewSubj$ = SourceName$ + " : " + Body
            NewSubj$ = Mid(NewSubj$, 1, 199)


            s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + EmailGuid + "'"
            iCnt = iCount(SecureID, s)

            If iCnt = 0 Then
                LI.setAddedbyuserguidid(AddedByUserGuidId)
                LI.setDatasourceowneruserid(DataSourceOwnerUserID)
                LI.setItemtitle(NewSubj$)
                LI.setItemtype(ItemType)
                LI.setLibraryitemguid(LibraryItemGuid)
                LI.setLibraryname(LibraryName)
                LI.setLibraryowneruserid(LibraryOwnerUserID)
                LI.setSourceguid(EmailGuid)
                Dim b As Boolean = LI.Insert
                If Not b Then
                    LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to add Library Item to EMAIL Folder: '" + EmailFolder + "', Library: '" + LibraryName + "', ItemTitle: '" + SourceName$ + "'")
                    RetMsg = "ERROR: Failed to add Library Item to EMAIL Folder: '" + EmailFolder + "', Library: '" + LibraryName + "', ItemTitle: '" + SourceName$ + "'"
                    RC = False
                End If
            End If
    SkipRec01:
        Next

        'objReader = Nothing
        ListOfItems.Clear()
        ListOfItems = Nothing
        LI = Nothing
        GC.Collect()

        ''FrmMDIMain.SB.Text = "Library audit complete."
    End Sub

    Sub AddSysMsg(Byref SecureID As Integer, ByVal tMsg$)

        tMsg$ = UTIL.RemoveSingleQuotesV1(tMsg$)

        Dim b As Boolean = False
        Dim S$ = ""
        Dim eGuid = ""
        eGuid = Guid.NewGuid.ToString

        S = S + " INSERT INTO [SystemMessage]"
        S = S + "            ([UserID]"
        S = S + "            ,[EntryDate]"
        S = S + "            ,[EntryGuid]"
        S = S + "            ,[EntryMsg])"
        S = S + " VALUES "
        S = S + "            ('" + gCurrUserGuidID + "'"
        S = S + "            ,'" + Now.ToString + "'"
        S = S + "            ,'" + eGuid + "'"
        S = S + "            ,'" + tMsg + "')"

        b = ExecuteSqlNewConn(SecureID, S)

        If Not b Then
            LogMessage(SecureID, gCurrUserGuidID, "Warning: Failed to add system notice '" + tMsg + "' to log.")
        End If
    End Sub

    Sub AddSysMsg(Byref SecureID As Integer, ByVal UserID As String, ByVal tMsg$, ByVal RC As Boolean)

        tMsg$ = UTIL.RemoveSingleQuotesV1(tMsg$)

        Dim b As Boolean = False
        Dim S$ = ""
        Dim eGuid = ""
        eGuid = Guid.NewGuid.ToString

        S = S + " INSERT INTO [SystemMessage]"
        S = S + "            ([UserID]"
        S = S + "            ,[EntryDate]"
        S = S + "            ,[EntryGuid]"
        S = S + "            ,[EntryMsg])"
        S = S + " VALUES "
        S = S + "            ('" + UserID + "'"
        S = S + "            ,'" + Now.ToString + "'"
        S = S + "            ,'" + eGuid + "'"
        S = S + "            ,'" + tMsg + "')"

        b = ExecuteSqlNewConn(SecureID, S)

        If Not b Then
            LogMessage(SecureID, gCurrUserGuidID, "Warning: Failed to add system notice '" + tMsg + "' to log.")
        End If
    End Sub

        Function isDirEnabled(Byref SecureID As Integer, ByVal FQN$) As Boolean

            FQN$ = UTIL.RemoveSingleQuotes(FQN$)

            Dim B As Boolean = True
            Dim S$ = "Select ckDisableDir from Directory where fqn = '" + FQN$ + "' and UserID = '" + gCurrUserGuidID + "' "
            CloseConn(SecureID)
            GC.Collect()

            'Dim CNN As New SqlConnection
            Dim RSData As SqlDataReader = Nothing
            Dim tVal$ = ""
            Try
                CloseConn(SecureID)
                CkConn(SecureID)
                Using gConn
                    Dim command As New SqlCommand(S, gConn)
                    RSData = SqlQryNewConn(SecureID, S)
                    RSData.Read()
                    tVal = RSData.GetValue(0).ToString
                    command.Connection.Close()
                    command = Nothing
                End Using
                If tVal.ToUpper.Equals("Y") Then
                    B = True
                Else
                    B = False
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error 100 - CLSDBARCH : isDirEnabled: " + ex.Message + vbCrLf + S)
                LogMessage(SecureID,gCurrUserGuidID, "Error 100 - CLSDBARCH : isDirEnabled: " + ex.StackTrace)
                B = False
            Finally
                If Not RSData Is Nothing Then
                    If Not RSData.IsClosed Then
                        RSData.Close()
                    End If
                    RSData = Nothing
                End If
                'CNN.Close()
                'CNN.Dispose()
                'CNN = Nothing
                GC.Collect()
            End Try

            CloseConn(SecureID)
            Return B

        End Function

        Sub AddHashedDirName(Byref SecureID As Integer, ByVal sName$)

            Dim S$ = ""
            Dim d As Double = UTIL.HashName(sName$)
            Dim NameExists As Boolean = False
            Dim NewGuid$ = Guid.NewGuid.ToString
            Try
                Dim HashedString As String = ""
                Dim icnt As Integer = iCount(SecureID, "Select count(*) from HashDir where Hash = " + d.ToString)
                If icnt = 0 Then
                    HashedString = UTIL.ReplaceSingleQuotes(sName$)
                    S = "Insert into HashDir (Hash, HashedString, HashID) values (" + d.ToString + ",'" + HashedString + "', '" + NewGuid$ + "' ) "
                    Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If B = False Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedDirName 200 - " + S)
                    End If
                    Return
                Else
                    NameExists = False
                    S = "Select HashedString, HashID from HashDir where Hash = " + d.ToString
                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read()
                            Dim tName$ = RSData.GetValue(0).ToString
                            Dim ID$ = RSData.GetValue(1).ToString
                            If tName.ToUpper.Equals(sName.ToUpper) Then
                                '* it already exists
                                NameExists = True
                                Exit Do
                            End If
                        Loop
                        If NameExists = False Then

                            HashedString = UTIL.ReplaceSingleQuotes(sName)
                            S = "Insert into HashDir (Hash, HashedString, HashID) values (" + d.ToString + ",'" + HashedString + "', '" + NewGuid$ + "') "
                            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                            If B = False Then
                                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedDirName 400 - " + S)
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedDirName 100 - " + ex.Message + vbCrLf + S)
            End Try

        End Sub

        Sub AddHashedFileName(Byref SecureID As Integer, ByVal sName$)

            Dim S$ = ""
            'Dim d As Double = UTIL.HashName(sName$)
            Dim d As Double = UTIL.HashCalc(sName)
            Dim NameExists As Boolean = False
            Dim NewGuid$ = Guid.NewGuid.ToString
            Try
                Dim HashedString As String = ""
                Dim icnt As Integer = iCount(SecureID, "Select count(*) from HashFile where Hash = " + d.ToString)
                If icnt = 0 Then
                    HashedString = UTIL.ReplaceSingleQuotes(sName$)
                    S = "Insert into HashFile (Hash, HashedString, HashID) values (" + d.ToString + ",'" + HashedString + "', '" + NewGuid$ + "' ) "
                    Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If B = False Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedFileName 200 - " + S)
                    End If
                    Return
                Else
                    NameExists = False
                    S = "Select HashedString, HashID from HashFile where Hash = " + d.ToString
                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    If RSData.HasRows Then
                        Do While RSData.Read()
                            Dim tName$ = RSData.GetValue(0).ToString
                            Dim ID$ = RSData.GetValue(1).ToString
                            If tName.ToUpper.Equals(sName.ToUpper) Then
                                '* it already exists
                                NameExists = True
                                Exit Do
                            End If
                        Loop
                        If NameExists = False Then

                            HashedString = UTIL.ReplaceSingleQuotes(sName)
                            S = "Insert into HashFile (Hash, HashedString, HashID) values (" + d.ToString + ",'" + HashedString + "', '" + NewGuid$ + "') "
                            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                            If B = False Then
                                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedFileName 400 - " + S)
                            End If
                        End If
                    End If
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddHashedFileName 100 - " + ex.Message + vbCrLf + S)
            End Try

        End Sub

        Function getFqns(Byref SecureID As Integer, ByVal Qty$) As ArrayList

            Dim A As New ArrayList

            Dim S$ = ""
            S = S + " select top " + Qty + " fqn from DataSource"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0
            Dim table_name$ = ""
            Dim column_name$ = ""
            Dim data_type$ = ""
            Dim character_maximum_length$ = ""

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim FQN$ = RSData.GetValue(0).ToString
                    A.Add(FQN)
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            Return A

        End Function
        Function AddPstFolder(Byref SecureID As Integer, ByVal StoreID$, ByVal ParentFolderName$, ByVal ParentFolderID$, ByVal FolderKeyName$, ByVal FolderID$, ByVal PstFQN$, ByVal RetentionCode$) As Boolean
            'ByVal FolderID$, ByVal CurrFolder As Microsoft.Office.Interop.Outlook.MAPIFolder,
            Dim B As Boolean = True

            ParentFolderName$ = UTIL.RemoveSingleQuotes(ParentFolderName$)

            Dim FolderName$ = ParentFolderName$
            Dim UID$ = gCurrUserGuidID
            Dim SelectedForArchive$ = "Y"

            'Dim FolderFQN$ = ParentFolderName + "|" + FolderKeyName$
            Dim FolderFQN$ = FolderKeyName$
            FolderFQN$ = UTIL.RemoveSingleQuotes(FolderFQN$)

            'Dim SS$ = " select count(*) from EmailFolder where UserID = '" + gCurrUserGuidID + "' and FolderID = '" + ParentFolderName$ + "'"
            Dim SS$ = " select count(*) from EmailFolder where UserID = '" + gCurrUserGuidID + "' and FolderID = '" + FolderFQN$ + "'"
            Dim iCnt As Integer = iCount(SecureID, SS)

            If iCnt = 1 Then
                Return True
            End If

            Dim S$ = ""
            S = S + " INSERT INTO [EmailFolder]"
            S = S + "    ([UserID]"
            S = S + "    ,[FolderName]"
            S = S + "    ,[ParentFolderName]"
            S = S + "    ,[FolderID]"
            S = S + "    ,[ParentFolderID]"
            S = S + "    ,[SelectedForArchive]"
            S = S + "    ,[StoreID]"
            S = S + "    ,[isSysDefault]"
            S = S + "    ,[RetentionCode])"
            S = S + " VALUES "
            S = S + "    ('" + UID$ + "'"
            'S = S + "    ,'" + UTIL.RemoveSingleQuotes(FolderKeyName$) + "'"
            S = S + "    ,'" + UTIL.RemoveSingleQuotes(FolderFQN$) + "'"
            S = S + "    ,'" + UTIL.RemoveSingleQuotes(ParentFolderName) + "'"
            S = S + "    ,'" + FolderID + "'"
            S = S + "    ,'" + ParentFolderID + "'"
            S = S + "    ,'" + SelectedForArchive + "'"
            S = S + "    ,'" + StoreID + "'"
            S = S + "    ,0"
            S = S + "    ,'" + RetentionCode + "')"

            B = ExecuteSqlNewConn(SecureID, S)

            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddPstFolder 100 - " + S)
            End If

            Return B
        End Function

        Function getDirProfile(Byref SecureID As Integer, ByVal ProfileName$) As String

            ProfileName$ = UTIL.RemoveSingleQuotes(ProfileName$)

            Dim S$ = ""
            S$ = S$ + " Select [ProfileName]"
            S$ = S$ + " ,[Parms]"
            S$ = S$ + " FROM [DirProfiles]"
            S$ = S$ + " where ProfileName = '" + ProfileName$ + "' "

            CloseConn(SecureID)
            CkConn(SecureID)

            Dim ProfileStr$ = ""
            Dim wc$ = ""

            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    ProfileStr = RSData.GetValue(1).ToString
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                Me.xtrace(SecureID, 30021, "iExecCountStmt", "clsDatabase", ex)
                ProfileStr = -1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iExecCountStmt : 100 : " + ex.Message)
            End Try

            Return ProfileStr
        End Function

        Function getNameOfCurrentServer(SecureID as integer) As String
            Dim SvrName$ = ""
            Dim S$ = "Select serverproperty('MachineName')"
            CloseConn(SecureID)
            CkConn(SecureID)

            Dim wc$ = ""

            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    SvrName$ = RSData.GetValue(0).ToString
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                Me.xtrace(SecureID, 30021, "iExecCountStmt", "clsDatabase", ex)
                SvrName$ = ""
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iExecCountStmt : 100 : " + ex.Message)
            End Try

            Return SvrName$
        End Function

        Public Function getQuickRowCnt(Byref SecureID As Integer, ByVal TableName$) As Integer
            Dim I As Integer = 0
            TableName$ = UTIL.RemoveSingleQuotes(TableName$)
            Dim S$ = "Select o.name, rows from sysobjects o inner join sysindexes i on o.id = i.id where i.indid < 2 and o.name = '" + TableName$ + "'"
            CloseConn(SecureID)
            CkConn(SecureID)

            Try
                Using gConn

                    Dim RSData As SqlDataReader = Nothing
                    Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                    RSData.Read()
                    I = RSData.GetInt32(0)
                    RSData.Close()
                    RSData = Nothing
                    command.Connection.Close()
                    command = Nothing
                End Using
            Catch ex As Exception
                Me.xtrace(SecureID, 30021, "iExecCountStmt", "clsDatabase", ex)
                I = -1
                LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : iExecCountStmt : 100 : " + ex.Message)
            End Try
            Return I
        End Function
        Function getHelpInfo(SecureID as integer) As String

            Dim RSData As SqlDataReader = Nothing
            Dim S$ = "Select [HelpName],[HelpEmailAddr],[HelpPhone],[AreaOfFocus],[HoursAvail] FROM [HelpInfo] order by HelpName "
            Dim HelpInfo$ = ""

            Try

                Dim HelpName$ = ""
                Dim HelpEmailAddr$ = ""
                Dim HelpPhone$ = ""
                Dim AreaOfFocus$ = ""
                Dim HoursAvail$ = ""

                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()

                        HelpName$ = RSData.GetValue(0).ToString
                        HelpEmailAddr$ = RSData.GetValue(1).ToString
                        HelpPhone$ = RSData.GetValue(2).ToString
                        AreaOfFocus$ = RSData.GetValue(3).ToString
                        HoursAvail$ = RSData.GetValue(4).ToString

                        If HelpName$.Trim.Length > 0 Then
                            HelpInfo$ = HelpInfo$ + "Contact - " + HelpName$ + vbCrLf
                        End If
                        If HelpName$.Trim.Length > 0 Then
                            HelpInfo$ = HelpInfo$ + "Email - " + HelpEmailAddr$ + vbCrLf
                        End If
                        If HelpName$.Trim.Length > 0 Then
                            HelpInfo$ = HelpInfo$ + "Phone - " + HelpPhone$ + vbCrLf
                        End If
                        If HelpName$.Trim.Length > 0 Then
                            HelpInfo$ = HelpInfo$ + "Help Area - " + AreaOfFocus$ + vbCrLf
                        End If
                        If HelpName$.Trim.Length > 0 Then
                            HelpInfo$ = HelpInfo$ + "Hours - " + HoursAvail$ + vbCrLf
                        End If

                        HelpInfo$ += vbCrLf

                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR getHelpInfo 100: " + ex.Message)
                Return ""
            Finally
                RSData.Close()
                RSData = Nothing
            End Try

            Return HelpInfo$

        End Function
        Function getHelpEmail(SecureID as integer) As String

            Dim RSData As SqlDataReader = Nothing
            Dim S$ = "Select [HelpEmailAddr] from HelpInfo where EmailNotification = 1 "
            Dim HelpInfo$ = ""

            Try

                Dim HelpName$ = ""
                Dim HelpEmailAddr$ = ""
                Dim HelpPhone$ = ""
                Dim AreaOfFocus$ = ""
                Dim HoursAvail$ = ""

                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        HelpEmailAddr$ = RSData.GetValue(0).ToString
                        HelpInfo$ = HelpInfo$ + HelpEmailAddr$ + "|"
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR getHelpEmail 100: " + ex.Message)
                Return "support@EcmLibrary.com|dale@ecmlibrary.com|"
            Finally
                RSData.Close()
                RSData = Nothing
                GC.Collect()
            End Try

            Return HelpInfo$

        End Function

        'Sub PopulateGrid(ByVal S$, ByRef DGV As struct_Dg)
        '    'System.Windows.Forms.DataGridViewCellEventArgs
        '    Try

        '        Dim BS As New BindingSource
        '        Dim CS as string = getConnStr(SecureID)
        '        Dim sqlcn As New SqlConnection(CS)
        '        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        '        Dim ds As DataSet = New DataSet

        '        If sqlcn.State = ConnectionState.Closed Then
        '            sqlcn.Open()
        '        End If

        '        sadapt.Fill(ds, "GridData")

        '        DGV.DataSource = ds.Tables("GridData")

        '    Catch ex As Exception
        '        xtrace(SecureID,100423, S$, "frmTrace:PopulateGrid",ex)
        '        If gRunUnattended = False Then MsgBox("Error PopulateGrid 122165.4: " + ex.Message)
        '        LogMessage(SecureID,gCurrUserGuidID, "Error PopulateGrid 122165.4: " + ex.Message)
        '    End Try


        'End Sub

        Sub TraceActivity(Byref SecureID As Integer, ByVal Msg$)
            Dim S$ = ""
            Msg$ = UTIL.RemoveSingleQuotes(Msg)
            S = "Insert into Trace ( [LogEntry] ) values ( '" + Msg + "' ) "
            ExecuteSqlNewConn(SecureID, S)
        End Sub

        Sub UpdateVersionInfo(Byref SecureID As Integer, ByVal Product$, ByVal ProductVersion$)

            Product$ = UTIL.RemoveSingleQuotes(Product$)
            ProductVersion$ = UTIL.RemoveSingleQuotes(ProductVersion$)

            Dim S$ = "Select count(*) from VersionInfo where Product = '" + Product$ + "' "

            Dim iCnt As Integer = iCount(Secureid,S)

            If iCnt = 0 Then
                S = " INSERT INTO [VersionInfo] ([Product] ,[ProductVersion]) VALUES ('" + Product$ + "','" + ProductVersion$ + "')"
            Else
                S = " UPDATE [VersionInfo] SET [ProductVersion] = '" + ProductVersion$ + "' WHERE Product = '" + Product$ + "' "
            End If

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            If B = False Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: UpdateVersionInfo - 100 : failed to update version info. " + vbCrLf + S)
            End If


        End Sub

        Function getVersionInfo(Byref SecureID As Integer, ByVal Product$) As String
            Dim VerInfo$ = ""
            Product$ = UTIL.RemoveSingleQuotes(Product$)

            Dim S$ = "Select count(*) from VersionInfo where Product = '" + Product$ + "' "

            Dim iCnt As Integer = iCount(Secureid,S)

            If iCnt = 0 Then
                VerInfo$ = "No version info exists on " + Product
            Else
                S = "Select [ProductVersion] FROM [VersionInfo] where [Product] = '" + Product$ + "' "
                'S = "Select FixID, Applied, AppliedDate from DB_Updates order by FixID"
                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        VerInfo$ += RSData.GetValue(0).ToString
                        'VerInfo$ += " : " + RSData.GetValue(1).ToString
                        'VerInfo$ += " : " + RSData.GetValue(2).ToString + vbCrLf
                    Loop
                Else
                    VerInfo$ = "No version info exists on " + Product
                End If
            End If

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S, False)
            If B = False Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: UpdateVersionInfo - 100 : failed to update version info. " + vbCrLf + S)
            End If

            Return VerInfo$

        End Function

        Function FixEmailKeys(SecureID as integer) As Boolean

            Dim B As Boolean = True

            Try
                Dim S$ = "Select [FolderName] FROM [EmailFolder]"
                Dim FolderName = ""
                Dim L As New List(Of String)

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        FolderName = RSData.GetValue(0).ToString
                        If InStr(FolderName, "|") > 0 Then
                            Dim tFolderName$ = Mid(FolderName, 1, InStr(FolderName, "|") - 1)
                            tFolderName$ = tFolderName$.Trim
                            If tFolderName$.Length > 0 Then
                                If L.Contains(tFolderName$) Then
                                Else
                                    L.Add(tFolderName$)
                                End If
                            End If
                        Else
                            If L.Contains(FolderName) Then
                            Else
                                L.Add(FolderName)
                            End If
                        End If
                    Loop
                End If

                RSData.Close()
                RSData = Nothing

                S = "update EmailFolder set ContainerName = 'xx' where FolderName like 'xx%'"

                For i As Integer = 0 To L.Count - 1
                    Dim tgtFolder$ = L(i)
                    tgtFolder$ = UTIL.RemoveSingleQuotes(tgtFolder$)
                    S = "update EmailFolder set ContainerName = '" + tgtFolder$ + "' where FolderName like '" + tgtFolder + "|%' and ContainerName is null"
                    Dim BB As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If Not BB Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR - FixEmailKeys 200 : " + S)
                    End If

                    S = "update EmailArchParms set ContainerName = '" + tgtFolder$ + "' where FolderName like '" + tgtFolder + "|%' and ContainerName is null"
                    BB = ExecuteSqlNewConn(SecureID, S)
                    If Not BB Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR - FixEmailKeys 300 : " + S)
                    End If
                Next
            Catch ex As Exception
                b = True
                LogMessage(SecureID,gCurrUserGuidID, "ERROR FixEmailKeys 100: " + ex.Message)
                Return False
            End Try

            Return b

        End Function

        Sub getAttachmentWeights(Byref SecureID As Integer, ByRef SL As Dictionary(Of String, Integer), ByVal UserGuidID As String)
            SL.Clear()
            Dim S$ = "Select EmailGuid, Weight from EmailAttachmentSearchList where UserID = '" + UserGuidID + "'"
            S = S + " and EmailGuid is not null"
            Dim EmailGuid$ = ""
            Dim Weight As Integer = -1
            Dim RSData As SqlDataReader = Nothing


            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    Try
                        EmailGuid = RSData.GetValue(0).ToString
                        Try
                            Weight = RSData.GetInt32(1)
                        Catch ex As Exception
                            Weight = 0
                            LogMessage(SecureID,gCurrUserGuidID, "INFO - returned null weights '" + EmailGuid + "' : " + S)
                        End Try

                        If SL.Keys.Contains(EmailGuid) Then
                        Else
                            SL.Add(EmailGuid, Weight)
                        End If
                    Catch ex As Exception
                        LogMessage(SecureID,gCurrUserGuidID, "INFO - returned null values: " + S)
                    End Try

                Loop
            End If

            If Not RSData.IsClosed Then
                RSData.Close()
            End If
            RSData = Nothing
            command.Dispose()
            command = Nothing

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()

        End Sub

        Sub getDisabledDirectories(Byref SecureID As Integer, ByRef ListOfDirs As List(Of String))
            ListOfDirs.Clear()
            Dim S$ = "Select [FQN] FROM [Directory] where UserID = '" + gCurrUserGuidID + "' and (ckDisableDir = 'Y' or AdminDisabled = 1)"
            Dim DirFQN$ = ""
            Dim Weight As Integer = -1
            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    DirFQN$ = RSData.GetValue(0).ToString
                    If ListOfDirs.Contains(DirFQN$) Then
                    Else
                        ListOfDirs.Add(DirFQN$)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        Function RunUnattended(SecureID as integer) As Boolean
            Dim ckVal$ = getUserParm(SecureID, "user_RunUnattended")
            'Dim ckVal$ = getSystemParm("srv_RunUnattended")
            If ckVal$.Equals("1") Then
                gRunUnattended = True
                Return True
            ElseIf ckVal$.Equals("0") Then
                gRunUnattended = False
                Return False
            ElseIf ckVal$.ToUpper.Equals("Y") Then
                gRunUnattended = True
                Return True
            ElseIf ckVal$.ToUpper.Equals("N") Then
                Return False
            Else
                gRunUnattended = False
                Return False
            End If

        End Function

        Function getDbSize(SecureID as integer) As Double

            Dim S$ = " "
            S = S + " SELECT"
            S = S + " a.FILEID,"
            S = S + " CONVERT(decimal(12,2),ROUND(a.size/128.000,2)) as [FILESIZEINMB] ,"
            S = S + " CONVERT(decimal(12,2),ROUND(fileproperty(a.name,'SpaceUsed')/128.000,2)) as [SPACEUSEDINMB],"
            S = S + " CONVERT(decimal(12,2),ROUND((a.size-fileproperty(a.name,'SpaceUsed'))/128.000,2)) as [FREESPACEINMB],"
            S = S + " a.name as [DATABASENAME],"
            S = S + " a.FILENAME as [FILENAME]"
            S = S + "     FROM "
            S = S + "     dbo.sysfiles a "

        End Function

        'Sub getTableDasdUse(ByRef TargetGrid As System.Windows.Forms.DataGridView)
        '    Dim S$ = ""
        '    Dim CS as string = getConnStr(SecureID)
        '    Dim Connection As SqlConnection = New SqlConnection(CS)
        '    If Connection.State = ConnectionState.Closed Then
        '        Connection.Open()
        '    End If
        '    Dim Command As SqlCommand = _
        '    New SqlCommand()
        '    Command.Connection = Connection
        '    Command.CommandText = "GetAllTableSizes"
        '    Dim Adapter As SqlDataAdapter = _
        '            New SqlDataAdapter(Command)

        '    Dim DataSet As DataSet = _
        '        New DataSet(Command.CommandText)

        '    Adapter.Fill(DataSet)
        '    TargetGrid.DataSource = DataSet.Tables(0)

        'End Sub

        'Sub getSpaceUsed(ByRef TargetGrid As System.Windows.Forms.DataGridView)
        '    Dim S$ = ""
        '    Dim CS as string = getConnStr(SecureID)
        '    Dim Connection As SqlConnection = New SqlConnection(CS)
        '    If Connection.State = ConnectionState.Closed Then
        '        Connection.Open()
        '    End If

        '    Dim Command As SqlCommand = _
        '    New SqlCommand()
        '    Command.Connection = Connection
        '    Command.CommandText = "ECM_spaceused"
        '    Dim Adapter As SqlDataAdapter = _
        '            New SqlDataAdapter(Command)

        '    Dim DataSet As DataSet = _
        '        New DataSet(Command.CommandText)

        '    Adapter.Fill(DataSet)
        '    TargetGrid.DataSource = DataSet.Tables(0)

        'End Sub

        Function isListeningOn(SecureID as integer) As Boolean
            Dim MachineName$ = DMA.GetCurrMachineName()
            Dim S$ = "Select COUNT(*) FROM [DirectoryListener] where Machinename = '" + MachineName$ + "' and [ListenerActive] = 1"
            Dim iCnt As Integer = iCount(Secureid,S)
            If iCnt > 0 Then
                Return True
            Else
                Return False
            End If
        End Function

        Sub GetListenerFiles(Byref SecureID As Integer, ByRef L As Dictionary(Of String, String))

            Dim S$ = ""
            L.Clear()
            Dim MachineName As String = DMA.GetCurrMachineName()
            MachineName = UTIL.RemoveSingleQuotes(MachineName)

            S = "Select [SourceFile], DirGuid  FROM [DirectoryListenerFiles] where Archived = 0 and MachineName = '" + gMachineID + "'"

            Dim FQN$ = ""
            Dim SourceFile$ = ""
            Dim Archived As Boolean = False
            Dim EntryDate As Date = Nothing
            Dim UserID$ = ""
            Dim DirGuid$ = ""

            Dim RSData As SqlDataReader = Nothing

            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()

            Try
                If CONN.State = ConnectionState.Closed Then
                    CONN.Open()
                End If
            Catch ex As Exception
                L.Clear()
                LogMessage(SecureID,gCurrUserGuidID, "ERROR : GetListenerFiles 100 - " + ex.Message)
                Return
            End Try

            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            Try
                If RSData.HasRows Then
                    Do While RSData.Read()
                        SourceFile$ = RSData.GetValue(0).ToString
                        DirGuid$ = RSData.GetValue(1).ToString
                        If Not L.ContainsKey(SourceFile$) Then
                            L.Add(SourceFile$, DirGuid$)
                        End If
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: GetListenerFiles 100 - " + ex.Message + vbCrLf + S)
            Finally
                If Not RSData.IsClosed Then
                    RSData.Close()
                End If
                RSData = Nothing
                command.Dispose()
                command = Nothing

                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()
            End Try




        End Sub
        Public Sub getModifiedFiles(Byref SecureID As Integer)

            Dim cPath As String = UTIL.getTempEnvironDir()
            Dim tFQN$ = cPath + "\ModifiedFilesLog.ECM"
            Dim NewFile$ = tFQN + ".rdy"
            Dim F0 As New FileInfo(NewFile$)
            Dim F As New FileInfo(tFQN)
            Dim SL As New Dictionary(Of String, String)
            Try

                If F0.Exists() Then
                    LOG.WriteToInstallLog("ACTIVATED the TimerUploadFiles: getModifiedFiles - the RDY file missing. ")
                    GoTo P1
                End If

                If F.Exists Then
                    File.Move(tFQN, NewFile$)
                Else
                    F = Nothing
                    GC.Collect()
                    Return
                End If

    P1:

                ' Create new StreamReader instance with Using block.
                ' Open file.txt with the Using statement.

                Dim F2 As File
                If Not F2.Exists(NewFile) Then
                    Return
                End If

                F2 = Nothing
                Dim R As New StreamReader(NewFile$)
                Try
                    Using R
                        ' Store contents in this String.
                        Dim line As String

                        ' Read first line.
                        line = R.ReadLine
                        Dim I As Integer = 0
                        ' Loop over each line in file, While list is Not Nothing.
                        Do While Not R.EndOfStream
                            'Application.DoEvents()

                            I += 1
                            'FrmMDIMain.ListenerStatus.Text = I.ToString
                            'Application.DoEvents()
                            If line.Trim.Length > 0 Then
                                Dim a$() = line.Split(Chr(254))
                                Dim CDE$ = a(0).ToUpper
                                Dim Fqn$ = a(1)
                                If SL.Count > 10000 Then
                                    SL.Clear()
                                End If
                                If SL.ContainsKey(Fqn) Then
                                Else
                                    Dim FI As New FileInfo(Fqn$)
                                    If FI.Exists Then
                                        Dim tDir$ = FI.DirectoryName
                                        RegisterArchiveFile(SecureID, Fqn, tDir$)
                                        If SL.ContainsKey(Fqn) Then
                                        Else
                                            SL.Add(Fqn, tDir$)
                                            LOG.WriteToInstallLog("Registered file: getModifiedFiles: " + Fqn)
                                        End If
                                    End If
                                    FI = Nothing
                                End If
                            End If
                            line = R.ReadLine
                        Loop
                    End Using
                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR getModifiedFiles - 288: " + ex.Message)
                Finally
                    R.Close()
                    R.Dispose()
                    GC.Collect()
                End Try

                Try
                    If Not F Is Nothing Then
                        F = Nothing
                    End If
                    If Not F0 Is Nothing Then
                        'F0.Delete()
                        F0 = Nothing
                    End If
                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR getModifiedFiles 100 - could not delete file - " + tFQN$)
                Finally
                    Try
                        Kill(NewFile$)
                    Catch ex As Exception
                        Console.WriteLine(ex.Message)
                    End Try
                End Try

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: getModifiedFiles 200 Listener Files could not be processed for = " + tFQN + vbCrLf + ex.Message)
            End Try
            'FrmMDIMain.ListenerStatus.Text = "."
        End Sub

        Function getDocSize(Byref SecureID As Integer, ByVal SourceGuid$) As Integer
            Dim B As Boolean = False
            Dim I As Integer = 0
            Dim S$ = "Select FileLength from DataSource where SourceGuid = '" + SourceGuid + "'"
            Dim RSData As SqlDataReader = Nothing
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    RSData.Read()
                    I = RSData.GetInt32(0)
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "getDocSize - Warning: email - no msgsize found: " + ex.Message)
            Finally
                CloseConn(SecureID)
                RSData.Close()
                RSData = Nothing
            End Try
            Return I
        End Function

        Function RegisterArchiveFile(Byref SecureID As Integer, ByVal SourceFile As String, ByVal DirName$) As Boolean

            gListenerActivityStart = Now
            'Application.DoEvents()
            Dim B As Boolean = True

            Dim RunGuid As String = getDirGuid(SecureID, DirName$, gMachineID)

            SourceFile = UTIL.RemoveSingleQuotes(SourceFile)

            Dim S$ = "Select count(*) FROM [DirectoryListenerFiles] where [DirGuid] = '" + RunGuid + "' and SourceFile = '" + SourceFile + "'  AND archived = 0 "
            'Dim S$ = "Select count(*) FROM [DirectoryListenerFiles] where SourceFile = '" + SourceFile + "'  AND archived = 0 and MachineName = '" + gMachineID + "' "

            Dim iCnt = iCount(Secureid,S)

            If iCnt = 0 Then
                S = ""
                S = S + " INSERT INTO [DirectoryListenerFiles]"
                S = S + "            ([DirGuid]"
                S = S + "            ,[SourceFile]"
                S = S + "            ,[Archived]"
                S = S + "            ,[EntryDate]"
                S = S + "            ,[UserID]"
                S = S + "            ,[MachineName], NameHash)"
                S = S + "      VALUES"
                S = S + "            ('" + RunGuid + "'"
                S = S + "            ,'" + SourceFile + "'"
                S = S + "            ,0"
                S = S + "            ,'" + Now.ToString + "'"
                S = S + "            ,'" + gCurrUserGuidID + "'"
                S = S + "            ,'" + gMachineID + "'"
                S = S + "            ," & 555.555
                S = S + " )"

                B = ExecuteSqlNewConn(SecureID, S)

            End If

            gListenerActivityStart = Now

            Return B
        End Function

        Sub CleanOutOldListenerFiles(Byref SecureID As Integer)
            Dim S$ = "delete from DirectoryListenerFiles where DATEDIFF(dd,entrydate,GETDATE()) > 30"
            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR CleanOutOldListenerFiles 100 - failed to delete files: " + S)
            End If
        End Sub
        Sub removeTempOcrFiles(Byref SecureID As Integer)
            Try
                Dim WorkingDirectory$ = getWorkingDirectory(SecureID, gCurrUserGuidID, "CONTENT WORKING DIRECTORY")
                LOG.PurgeDirectory(WorkingDirectory$, "*.tif*")
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, "WARNING: removeTempOcrFiles Some temporary files may remain for a while in " + getWorkingDirectory(SecureID, gCurrUserGuidID, "CONTENT WORKING DIRECTORY"))
            End Try

        End Sub

        Sub RemoveNullEmails(Byref SecureID As Integer)
            Dim S$ = ""
            S = "Select count(*) from email where datalength(emailimage) < 1 or EmailImage is null"

            Dim icnt As Integer = iCount(Secureid,S)

            If icnt = 0 Then
                MsgBox("None to remove... returning")
                Return
            End If

            'Dim msg$ = "This will DELETE " + icnt.ToString + " NULL items from emails, are you sure?"
            'Dim dlgRes As DialogResult = MessageBox.Show(msg, "Delete Emails", MessageBoxButtons.YesNo)
            'If dlgRes = Windows.Forms.DialogResult.No Then
            '    Return
            'End If

            S = "Select EmailGuid, ShortSubj from email where datalength(emailimage) < 1 or EmailImage is null"

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            Dim I As Integer = 0
            If RSData.HasRows Then
                Do While RSData.Read()
                    I += 1
                    Dim EmailGuid As String = RSData.GetValue(0).ToString
                    Dim ShortSubj As String = RSData.GetValue(1).ToString
                    'Application.DoEvents()
                    'FrmMDIMain.SB4.Text = I.ToString
                    Me.DeleteContent(SecureID, EmailGuid, "EMAIL", ShortSubj)
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            'FrmMDIMain.SB4.Text = "Done"
        End Sub

        Sub RemoveNullSource(Byref SecureID As Integer)
            Dim S$ = ""
            S = "Select count(*) from dataSource where datalength(SourceImage) < 1 or SourceImage is null"

            Dim icnt As Integer = iCount(Secureid,S)

            If icnt = 0 Then
                MsgBox("None to remove... returning")
                Return
            End If

            'Dim msg$ = "This will remove " + icnt.ToString + " NULL items from Source, are you sure?"
            'Dim dlgRes As DialogResult = MessageBox.Show(msg, "Delete Content", MessageBoxButtons.YesNo)
            'If dlgRes = Windows.Forms.DialogResult.No Then
            '    Return
            'End If

            S = "Select SourceGuid, fqn from dataSource where datalength(SourceImage) < 1 or SourceImage is null"

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            Dim I As Integer = 0
            If RSData.HasRows Then
                Do While RSData.Read()
                    I += 1
                    Dim SourceGuid As String = RSData.GetValue(0).ToString
                    Dim fqn As String = RSData.GetValue(1).ToString
                    'Application.DoEvents()
                    'FrmMDIMain.SB4.Text = I.ToString
                    Me.DeleteContent(SecureID, SourceGuid, "CONTENT", fqn)
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            'FrmMDIMain.SB4.Text = "Done"

        End Sub

        Sub GetDirectoryLibraries(Byref SecureID As Integer, ByVal DirectoryName$, ByRef L As List(Of String))
            L.Clear()

            Dim ParentDirectoryToUse As String = ""
            Dim isIncludedAsSubDir As Boolean = isSubDirIncluded(SecureID, DirectoryName$, ParentDirectoryToUse)

            If ParentDirectoryToUse.Length > 0 Then
                DirectoryName$ = ParentDirectoryToUse
            End If

            DirectoryName$ = UTIL.RemoveSingleQuotes(DirectoryName$)

            Dim LibName$ = ""
            Dim S$ = "Select LibraryName from LibDirectory where DirectoryName = '" + DirectoryName$ + "' and UserID = '" + gCurrUserGuidID + "'"
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibName$ = RSData.GetValue(0).ToString
                    If Not L.Contains(LibName) Then
                        L.Add(LibName)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

        Public Function ckFolderDisabled(Byref SecureID As Integer, ByVal UID$, ByVal DirFQN$) As Boolean

            Dim S$ = " "

            DirFQN$ = UTIL.RemoveSingleQuotes(DirFQN$)

            CloseConn(SecureID)
            CkConn(SecureID)

            S = "Select COUNT(*) from Directory where ckDisableDir = 'Y' and UserID = '" + gCurrUserGuidID + "' and FQN = '" + DirFQN$ + "'"

            Dim iCnt As Integer = iCount(Secureid,S)

            If iCnt > 0 Then
                Return True
            Else
                Return False
            End If

        End Function

        Sub AddFileExt(Byref SecureID As Integer, ByVal FileExt$, ByVal Description$)
            'FrmMDIMain.SB4.Text = FileExt
            FileExt$ = UTIL.RemoveSingleQuotes(FileExt$)
            Description$ = UTIL.RemoveSingleQuotes(Description$)
            Dim S$ = "Insert into FileType (FileExt, Description) Values ('" + FileExt$ + "', '" + Description$ + "')"
            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
        End Sub

        Sub DeleteContent(Byref SecureID As Integer, ByVal TgtGuid As String, ByVal TypeContent As String, ByVal FQN As String)

            Dim S$ = ""
            Dim B As Boolean = False

            S = "Delete from SourceAttribute where SourceGuid = '" + TgtGuid + "' "
            B = ExecuteSqlNewConn(SecureID, S)

            S = "Delete from LibraryItems where SourceGuid = '" + TgtGuid + "' "
            B = ExecuteSqlNewConn(SecureID, S)

            If TypeContent.ToUpper.Equals("EMAIL") Then

                S = "Delete from [Recipients] where EmailGuid = '" + TgtGuid + "' "
                B = ExecuteSqlNewConn(SecureID, S)

                S = "Delete from EMAIL where EmailGuid = '" + TgtGuid + "' "
                B = ExecuteSqlNewConn(SecureID, S)

            Else

                S = "Delete from DataSource where SourceGuid = '" + TgtGuid + "' "
                B = ExecuteSqlNewConn(SecureID, S)

            End If

            xTrace(666, "DeleteContent : F10 : " + gCurrLoginID + " deleted file " + FQN + ".", "frmDocSearch", S)

        End Sub

        Function isParentDirDisabled(Byref SecureID As Integer, ByVal DirFQN$) As Boolean
            Dim TgtLib As String = ""
            Dim TempDir$ = ""
            Dim SS$ = ""
            If DirFQN.Trim.Length > 2 Then
                If Mid(DirFQN, 1, 2) = "\\" Then
                    SS = "\\"
                Else
                    SS = ""
                End If
            End If

            Dim DirList As New List(Of String)

            Dim A$() = DirFQN.Split("\")

            For I As Integer = 0 To UBound(A)
                TempDir = SS + TempDir + A(I)
                DirList.Add(TempDir)
                TempDir = TempDir + "\"
            Next

            For II As Integer = DirList.Count - 1 To 0 Step -1

                TempDir = DirList(II)
                TempDir = UTIL.RemoveSingleQuotes(TempDir)
                Dim iCnt As Integer = isDirectoryDisabled(SecureID, TempDir)

                If iCnt = 1 Then
                    Return True
                ElseIf iCnt = 0 Then
                    Return False
                End If

                TempDir = TempDir + "\"
            Next

            Return False

        End Function

        Public Function isDirectoryDisabled(Byref SecureID As Integer, ByVal DirFqn$) As Integer

            Dim RC As Integer = -1
            'Dim CNN As New SqlConnection
            Dim rsData As SqlDataReader = Nothing

            Try
                Dim S$ = "Select ckDisableDir from Directory where FQN = '" + DirFqn + "' and UserID = '" + gCurrUserGuidID + "' "

                Dim CS as string = getConnStr(SecureID)
                'Dim CONN As New SqlConnection(CS)
                'CONN.Open()

                Dim b As Boolean = False
                rsData = SqlQryNewConn(S, CS)
                rsData.Read()
                If rsData.HasRows Then
                    Dim sChar As String = rsData.GetValue(0).ToString
                    If sChar.ToUpper.Equals("Y") Then
                        RC = 1
                    ElseIf sChar.ToUpper.Equals("N") Then
                        RC = 0
                    Else
                        RC = 0
                    End If
                Else
                    RC = -1
                End If

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR isDirectoryDisabled 1993.21: " + ex.Message)
                RC = -1
            Finally
                'CloseConn(SecureID)
                'GC.Collect()
                If rsData IsNot Nothing Then
                    If Not rsData.IsClosed Then
                        rsData.Close()
                    End If
                    rsData = Nothing
                End If
                'CNN.Close()
                'CNN.Dispose()
                'CNN = Nothing
                GC.Collect()
            End Try

            Return RC
        End Function

        Public Function isSubDirIncludedBitON(Byref SecureID As Integer, ByVal DirFqn$) As Integer

            Dim RC As Integer = -1
            'Dim CNN As New SqlConnection
            Dim rsData As SqlDataReader = Nothing

            Try
                Dim S$ = "Select IncludeSubDirs from Directory where FQN = '" + DirFqn + "' and UserID = '" + gCurrUserGuidID + "' "

                Dim CS as string = getConnStr(SecureID)
                'Dim CONN As New SqlConnection(CS)
                'CONN.Open()

                Dim b As Boolean = False
                rsData = SqlQryNewConn(S, CS)
                rsData.Read()
                If rsData.HasRows Then
                    Dim sChar As String = rsData.GetValue(0).ToString
                    If sChar.ToUpper.Equals("Y") Then
                        RC = 1
                    ElseIf sChar.ToUpper.Equals("N") Then
                        RC = 0
                    Else
                        RC = 0
                    End If
                Else
                    RC = -1
                End If

            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR isDirectoryDisabled 1993.21: " + ex.Message)
                RC = -1
            Finally
                'CloseConn(SecureID)
                'GC.Collect()
                If rsData IsNot Nothing Then
                    If Not rsData.IsClosed Then
                        rsData.Close()
                    End If
                    rsData = Nothing
                End If
                'CNN.Close()
                'CNN.Dispose()
                'CNN = Nothing
                GC.Collect()
            End Try

            Return RC
        End Function

        Function isIndexed(Byref SecureID As Integer, ByVal FileTypeCode$) As Boolean

            If InStr(FileTypeCode$, ".") = 0 Then
                FileTypeCode$ = "." + FileTypeCode$
            End If

            Dim iCnt As Integer = iCount(SecureID, "Select COUNT(*) from sys.fulltext_document_types where document_type = '" + FileTypeCode$ + "'")
            If iCnt > 0 Then
                Return True
            Else
                Return False
            End If

        End Function
        '
        Function isOcrd(Byref SecureID As Integer, ByVal FileTypeCode$) As Boolean

            If InStr(FileTypeCode$, ".") = 0 Then
                FileTypeCode$ = "." + FileTypeCode$
            End If

            Dim iCnt As Integer = iCount(SecureID, "Select COUNT(*)  FROM [ImageTypeCodes] where ImageTypeCode = '" + FileTypeCode + "'")
            If iCnt > 0 Then
                Return True
            Else
                Return False
            End If

        End Function
        Sub getOcrTypes(Byref SecureID As Integer, ByRef L As List(Of String))
            Dim S$ = "Select ImageTypeCode from ImageTypeCodes"

            L.Clear()
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim FileExt$ = RSData.GetValue(0).ToString
                    FileExt$ = FileExt$.ToUpper
                    If Not L.Contains(FileExt) Then
                        L.Add(FileExt)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

        End Sub
        Sub getIndexedTypes(Byref SecureID As Integer, ByRef L As List(Of String))
            Dim S$ = "Select document_type from sys.fulltext_document_types"

            L.Clear()
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim FileExt$ = RSData.GetValue(0).ToString
                    FileExt$ = FileExt$.ToUpper
                    If Not L.Contains(FileExt) Then
                        L.Add(FileExt)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

        End Sub
        Sub getProcesssAsExt(Byref SecureID As Integer, ByRef L As Dictionary(Of String, String))
            L.Clear()
            Dim S$ = "Select [ExtCode],[ProcessExtCode] FROM [ProcessFileAs]"
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Dim ExtCode$ = RSData.GetValue(0).ToString.ToUpper
                    Dim ProcessExtCode$ = RSData.GetValue(1).ToString.ToUpper
                    If Not L.ContainsKey(ExtCode) Then
                        L.Add(ExtCode, ProcessExtCode$)
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing
        End Sub

        'Sub ShowIndexedFiles(ByRef D As List(Of struct_Dg))

        '    Dim NewList As New struct_Dg

        '    Dim AL As New ArrayList
        '    Dim dgCols() As String
        '    Dim OCRTYPES As New List(Of String)
        '    Dim INDEXTYPES As New List(Of String)
        '    Dim S$ = ""

        '    Dim ProcessAsExt As New Dictionary(of string, string)
        '    getProcesssAsExt(ProcessAsExt)

        '    getOcrTypes(OCRTYPES)
        '    getIndexedTypes(INDEXTYPES)

        '    S$ = "Select     document_type AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs "
        '    S = S + " FROM sys.fulltext_document_types "
        '    S = S + " UNION"
        '    S = S + " SELECT     ExtCode AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  "
        '    S = S + " FROM AvailFileTypes "
        '    S = S + " UNION"
        '    S = S + " SELECT     ImageTypeCode AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  "
        '    S = S + " FROM ImageTypeCodes "
        '    S = S + " UNION"
        '    S = S + " SELECT DISTINCT OriginalFileType AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  "
        '    S = S + " FROM DataSource "
        '    S = S + " ORDER BY FileExt"

        '    Dim iCount As Integer = 0
        '    D.Rows.Clear()
        '    D.Columns.Add(0, "EXT")
        '    D.Columns.Add(1, "Indexed")
        '    D.Columns.Add(2, "Ocrd")
        '    D.Columns.Add(3, "IndexedAs")


        '    Dim RSData As SqlDataReader = Nothing
        '    'RSData = SqlQryNo'Session(S)
        '    Dim CS as string = getConnStr(SecureID)
        '    Dim CONN As New SqlConnection(CS)
        '    CONN.Open()
        '    Dim command As New SqlCommand(S, CONN)
        '    RSData = command.ExecuteReader()
        '    If RSData.HasRows Then
        '        Do While RSData.Read()
        '            Dim FileExt$ = RSData.GetValue(0).ToString
        '            FileExt$ = FileExt$.ToUpper
        '            'If InStr(FileExt, "JPG", CompareMethod.Text) > 0 Then
        '            '    Console.WriteLine("XXX")
        '            'End If
        '            If InStr(FileExt$, ".") = 0 Then
        '                FileExt$ = "." + FileExt$
        '            End If
        '            Dim Indexed$ = RSData.GetValue(1).ToString
        '            Dim Ocrd$ = RSData.GetValue(2).ToString
        '            Dim BB As Boolean = False
        '            If OCRTYPES.Contains(FileExt) Then
        '                Ocrd$ = "Y"
        '                Indexed$ = "Y"
        '                BB = True
        '            Else
        '                Ocrd$ = "N"
        '            End If
        '            If BB = False Then
        '                If INDEXTYPES.Contains(FileExt) Then
        '                    Indexed$ = "Y"
        '                Else
        '                    Indexed$ = "N"
        '                End If
        '            End If

        '            Dim IndexedAs As String = "-"
        '            If ProcessAsExt.ContainsKey(FileExt) Then
        '                Dim II As Integer = ProcessAsExt.IndexOfKey(FileExt)
        '                IndexedAs = ProcessAsExt.Item(FileExt).ToString
        '                'IndexedAs = ProcessAsExt.Values(II)
        '            End If

        '            D.Rows.Add(FileExt$, Indexed$, Ocrd$, IndexedAs)

        '            iCount = iCount + 1


        '        Loop
        '    End If
        '    RSData.Close()
        '    RSData = Nothing


        'End Sub

        Function getOcrText(Byref SecureID As Integer, ByRef SourceGuid$, ByVal ContentType$, ByVal AttachmentName$) As String

            Dim S$ = "Select document_type from sys.fulltext_document_types"
            If ContentType$.Equals("DOC") Then
                S$ = "Select OcrText from DataSource where SourceGuid = '" + SourceGuid$ + "' "
            Else
                AttachmentName = UTIL.RemoveSingleQuotes(AttachmentName)
                S$ = "Select OcrText from EmailAttachment where EmailGuid = '" + SourceGuid$ + "' and AttachmentName = '" + AttachmentName + "' "
            End If

            Dim OcrText$ = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    OcrText$ = RSData.GetValue(0).ToString
                Loop
            End If
            RSData.Close()
            RSData = Nothing
            Return OcrText$

        End Function
        Function getSqlServerVersion(SecureID as integer) As String

            Dim S$ = "Select @@VERSION AS 'ServerVersion'"
            Dim rsData As SqlDataReader = Nothing
            Dim ServerVersion As String = ""
            Try
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()
                Do While rsData.Read()
                    ServerVersion = rsData.GetValue(0).ToString
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error: clsDatabase:getSqlServerVersion Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return ServerVersion

        End Function
        Function getDBSIZEMB(SecureID as integer) As Double

            Dim S$ = "exec Sp_spaceused"
            S = "Select "
            S = S + "     a.name as [DatabaseName], a.FILEID,"
            S = S + "     CONVERT(decimal(12,2),ROUND(a.size/128.000,2)) as [FileSizeInMB] ,"
            S = S + "     CONVERT(decimal(12,2),ROUND(fileproperty(a.name,'SpaceUsed')/128.000,2)) as [SpaceUsedInMB],"
            S = S + "     CONVERT(decimal(12,2),ROUND((a.size-fileproperty(a.name,'SpaceUsed'))/128.000,2)) as [FreeSpaceInMB],    "
            S = S + "     a.FILENAME as [FILENAME]"
            S = S + "     FROM"
            S = S + "     dbo.sysfiles a"
            Dim rsData As SqlDataReader = Nothing
            Dim DBSIZEMB As Double = 0
            Try
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsData = command.ExecuteReader()
                Do While rsData.Read()
                    DBSIZEMB += rsData.GetDecimal(2)
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error: clsDatabase:getSqlDBSIZEMB Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            Return DBSIZEMB

        End Function

        Sub RebuildCrossIndexFileTypes(Byref SecureID As Integer)
            Dim S$ = " SELECT  ProcessFileAs.ExtCode, DataSource.SourceGuid, DataSource.OriginalFileType, DataSource.SourceTypeCode, ProcessFileAs.ProcessExtCode"
            S = S + " FROM         ProcessFileAs INNER JOIN"
            S = S + " DataSource ON ProcessFileAs.ExtCode = DataSource.OriginalFileType"
            'S = S + " where SourceTypeCode = OriginalFileType "

            Dim I As Integer = 0
            Dim K As Integer = 0
            Dim ExtCode As String = ""
            Dim SourceGuid As String = ""
            Dim OriginalFileType As String = ""
            Dim SourceTypeCode As String = ""
            Dim ProcessExtCode As String = ""

            Dim rsData As SqlDataReader = Nothing
            Dim ServerVersion As String = ""
            Try
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()
                Do While rsData.Read()
                    'Application.DoEvents()
                    ExtCode = rsData.GetValue(0).ToString.ToLower
                    SourceGuid = rsData.GetValue(1).ToString
                    OriginalFileType = rsData.GetValue(2).ToString.ToLower
                    SourceTypeCode = rsData.GetValue(3).ToString.ToLower
                    ProcessExtCode = rsData.GetValue(4).ToString.ToLower
                    K += 1
                    If K Mod 10 = 0 Then
                        'FrmMDIMain.SB4.Text = K.ToString + "/" + I.ToString
                    End If
                    If ProcessExtCode.Equals(SourceTypeCode) Then
                    Else
                        I += 1
                        S = "Update DataSource set SourceTypeCode = '" + ProcessExtCode + "' where SourceGuid = '" + SourceGuid + "' "
                        Dim b As Boolean = ExecuteSqlNewConn(SecureID, S)
                        If Not b Then
                            LogMessage(SecureID,gCurrUserGuidID, "ERROR RebuildCrossIndexFileTypes: File with GUID '" + SourceGuid + "' did not UPDATE file type from '" + OriginalFileType + "' to '" + ProcessExtCode + "'.")
                        End If
                    End If
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error: clsDatabase:getSqlServerVersion Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            'FrmMDIMain.SB4.Text = ""

        End Sub

        Sub ValidateFileTypesEmail(SecureID as integer)
            Dim S$ = "Select rowid, attachmentname from EmailAttachment where OriginalFileTypeCode is null "
            Dim I As Integer = 0
            Dim rowid As Integer = 0
            Dim ExtCode As String = ""
            Dim attachmentname As String = ""
            Dim OriginalFileType As String = ""
            Dim SourceTypeCode As String = ""
            Dim ProcessExtCode As String = ""
            Dim K As Integer = 0

            Dim rsData As SqlDataReader = Nothing
            Dim ServerVersion As String = ""
            Try
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()
                Do While rsData.Read()
                    'Application.DoEvents()
                    rowid = rsData.GetInt32(0)
                    attachmentname = rsData.GetValue(1).ToString
                    OriginalFileType = UTIL.getFileSuffix(attachmentname).ToLower
                    K += 1
                    If K Mod 10 = 0 Then
                        'FrmMDIMain.SB4.Text = K.ToString + "/" + I.ToString
                    End If
                    If InStr(OriginalFileType, ".") = 0 Then
                        OriginalFileType = "." + OriginalFileType
                    End If
                    I += 1
                    S = "Update EmailAttachment set OriginalFileTypeCode = '" + OriginalFileType + "' where rowid = " + rowid.ToString
                    Dim b As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If Not b Then
                        LogMessage(SecureID,gCurrUserGuidID, "ERROR ValidateFileTypesEmail: File with ROWID '" + rowid.ToString + "' did not UPDATE file type from '" + OriginalFileType + "' to '" + ProcessExtCode + "'.")
                    End If
                    'End If
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error: clsDatabase:ValidateFileTypesEmail Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            'FrmMDIMain.SB4.Text = ""

        End Sub

        Sub RebuildCrossIndexFileTypesEmail(Byref SecureID As Integer)

            ValidateFileTypesEmail(SecureID)

            Dim S$ = ""
            S = S + " SELECT     ProcessFileAs.ExtCode, ProcessFileAs.ProcessExtCode, EmailAttachment.AttachmentName, EmailAttachment.RowID, EmailAttachment.OriginalFileTypeCode "
            S = S + " FROM         ProcessFileAs INNER JOIN"
            S = S + "              EmailAttachment ON ProcessFileAs.ExtCode = EmailAttachment.AttachmentCode                     "

            Dim I As Integer = 0
            Dim K As Integer = 0
            Dim AttachmentName As String = ""
            Dim ExtCode As String = ""
            Dim RowID As Integer = 0
            Dim OriginalFileTypeCode As String = ""
            Dim SourceTypeCode As String = ""
            Dim ProcessExtCode As String = ""

            Dim rsData As SqlDataReader = Nothing
            Dim ServerVersion As String = ""
            Try
                Dim CS as string = getConnStr(SecureID)
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                rsData = command.ExecuteReader()
                Do While rsData.Read()
                    'Application.DoEvents()
                    ExtCode = rsData.GetValue(0).ToString.ToLower
                    ProcessExtCode = rsData.GetValue(1).ToString
                    AttachmentName = rsData.GetValue(2).ToString.ToLower
                    RowID = rsData.GetInt32(3)
                    OriginalFileTypeCode = rsData.GetValue(4).ToString.ToLower
                    K += 1
                    If K Mod 10 = 0 Then
                        'FrmMDIMain.SB4.Text = K.ToString + "/" + I.ToString
                    End If
                    If ProcessExtCode.Equals(SourceTypeCode) Then
                    Else
                        I += 1
                        S = "Update EmailAttachment set AttachmentCode = '" + ProcessExtCode + "' where RowID = " + RowID.ToString
                        Dim b As Boolean = ExecuteSqlNewConn(SecureID, S)
                        If Not b Then
                            LogMessage(SecureID,gCurrUserGuidID, "ERROR RebuildCrossIndexFileTypesEmail: File with RowID '" + RowID.ToString + "' did not UPDATE file type from '" + OriginalFileTypeCode + "' to '" + ProcessExtCode + "'.")
                        End If
                    End If
                Loop
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "Error: clsDatabase:getSqlServerVersion Error 100: " + ex.Message)
            End Try

            If Not rsData.IsClosed Then
                rsData.Close()
            End If
            rsData = Nothing
            GC.Collect()
            'FrmMDIMain.SB4.Text = ""


        End Sub
        Public Function EmailExists(Byref SecureID As Integer, ByVal EmailIdentifier As String) As Integer

            EmailIdentifier = UTIL.RemoveSingleQuotes(EmailIdentifier)

            Dim B As Integer = 0
            Dim TBL$ = "Email"
            Dim WC$ = "Where EmailIdentifier = '" + EmailIdentifier + "'"


            B = iGetRowCount(TBL$, WC)

            Return B
        End Function
        'update Email set EmailIdentifier = EmailGuid where EmailIdentifier is null
        Sub resetMissingEmailIds(Byref SecureID As Integer, ByVal CurrUserGuidID As String, ByRef RC As Boolean)

            Dim B As Boolean = False
            Dim S$ = ""
            Dim ID As Integer = 217

            S = S + "update Email set EmailIdentifier = EmailGuid where EmailIdentifier is null and UseriD = '" + CurrUserGuidID + "' "
            B = ExecuteSqlNewConn(SecureID, S, False)
            RC = B
        End Sub

        Sub getLibUsers(Byref SecureID As Integer, ByVal isAdmin As Boolean, ByRef G As List(Of struct_LibUsers))

            Dim LUsers As New struct_LibUsers

            Dim S As String = ""
            If isAdmin = True Then
                S = S + " SELECT distinct L.LibraryName, "
                S = S + " L.LibraryOwnerUserID, "
                S = S + " L.UserID"
                S = S + " from LibraryUsers L "
                S = S + " order by LibraryName"
            Else
                S = S + " SELECT distinct L.LibraryName, "
                S = S + " L.LibraryOwnerUserID, "
                S = S + " L.UserID"
                S = S + " from LibraryUsers L "
                S = S + " Where  L.UserID = '" + gCurrUserGuidID + "' "
                S = S + " order by LibraryName"
            End If

            Dim LibraryName As String = ""
            Dim UserGuid As String = ""
            Dim OwnerGuid As String = ""
            Dim UserLoginID As String = ""
            Dim OwnerLoginID As String = ""
            Dim UserName As String = ""
            Dim OwnerName As String = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibraryName = RSData.GetValue(0).ToString
                    OwnerGuid = RSData.GetValue(1).ToString
                    UserGuid = RSData.GetValue(2).ToString
                    OwnerLoginID = getUserLoginByUserid(SecureID, OwnerGuid)
                    UserLoginID = getUserLoginByUserid(SecureID, UserGuid)
                    OwnerName = getUserNameByID(SecureID, OwnerGuid)
                    UserName = getUserNameByID(SecureID, UserGuid)
                    LUsers.LibraryName = LibraryName
                    LUsers.OwnerGuid = OwnerGuid
                    LUsers.OwnerLoginID = OwnerLoginID
                    LUsers.OwnerName = OwnerName
                    LUsers.UserGuid = UserGuid
                    LUsers.UserLoginID = UserLoginID
                    LUsers.UserName = UserName
                    G.Add(LUsers)
                Loop
            End If

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If

            CONN.Dispose()
            RSData.Close()
            RSData = Nothing
            GC.Collect()

        End Sub


    Sub cleanUpLibraryItems(Byref SecureID As Integer, ByVal UserID As String)

        Dim S$ = ""
        S = S + " delete from LibraryItems where " + vbCrLf
        S = S + " SourceGuid not in (select emailguid as TgtGuid from Email" + vbCrLf
        S = S + " union " + vbCrLf
        S = S + " select sourceguid as TgtGuid from DataSource)"

        Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 100: did not successfully complete.")
        End If

        S = "delete FROM LibraryItems where LibraryName not in  (select LibraryName from Library)"
        B = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 200: did not successfully complete.")
        End If

        S = "delete from LibraryUsers where LibraryName not in  (select LibraryName from Library)"
        B = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 300: did not successfully complete.")
        End If

        S = "delete from LibraryUsers where UserID not in  (select userid from users)"
        B = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 300.1: did not successfully complete.")
        End If

        S = "delete from GroupUsers where UserID not in (select userid from users) "
        B = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 400: did not successfully complete.")
        End If

        S = "delete from GroupUsers where GroupName not in (select GroupName from UserGroup) "
        B = ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            LogMessage(SecureID, UserID, "Warning cleanUpLibraryItems 500: did not successfully complete.")
        End If

    End Sub
        Sub inventoryContentLibraryItems(Byref SecureID As Integer)

            Dim S$ = ""
            S = S + " SELECT COUNT(*)"
            S = S + " FROM LibDirectory INNER JOIN"
            S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory"

            Dim II As Integer = 0
            Dim iCnt As Integer = iCount(Secureid,S)
            Dim RecsToProcess As Integer = iCnt

            If iCnt = 0 Then
                Return
            End If

            Dim TGuid As String = Guid.NewGuid.ToString

            'S = ""
            'S = S + " SELECT LibDirectory.DirectoryName, LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType"
            ''S = S + "   INTO #T" + TGuid
            'S = S + " FROM LibDirectory INNER JOIN"
            'S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory"

            S = ""
            S = S + " SELECT DISTINCT LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType, Library.UserID, DataSource.SourceName, DataSource.DataSourceOwnerUserID"
            S = S + " FROM         LibDirectory INNER JOIN"
            S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory INNER JOIN"
            S = S + " Library ON LibDirectory.UserID = Library.UserID"
            'S = S + " GROUP BY LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType, Library.UserID, DataSource.SourceName"

            'SELECT FirstName, LastName
            'INTO TestTable
            'FROM Person.Contact
            'WHERE EmailPromotion = 2
            '----Verify that Data in TestTable
            'SELECT FirstName, LastName
            'FROM TestTable
            '----Clean Up Database
            'DROP TABLE TestTable

            Dim tDir As String = UTIL.getTempEnvironDir
            Dim LIKEYS As String = tDir + "\" + TGuid + ".txt"
            Dim SW As New StreamWriter(LIKEYS)

            Dim DirectoryName As String = ""
            Dim LibraryName As String = ""
            Dim SourceGuid As String = ""
            Dim OriginalFileType As String = ""
            Dim SourceName As String = ""
            Dim DataSourceOwnerUserID As String = ""
            Dim UserID As String = ""

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    'FrmMDIMain.SB4.Text = "Step 1 of 2: " + II.ToString + " of " + RecsToProcess.ToString
                    'Application.DoEvents()

                    LibraryName = RSData.GetValue(0).ToString
                    SourceGuid = RSData.GetValue(1).ToString
                    OriginalFileType = RSData.GetValue(2).ToString
                    UserID = RSData.GetValue(3).ToString
                    SourceName = RSData.GetValue(4).ToString
                    DataSourceOwnerUserID = RSData.GetValue(5).ToString

                    If InStr(OriginalFileType, ".") = 0 Then
                        OriginalFileType = "." + OriginalFileType
                    End If

                    S = ""
                    S += LibraryName + Chr(254)
                    S += SourceGuid + Chr(254)
                    S += OriginalFileType + Chr(254)
                    S += UserID + Chr(254)
                    S += SourceName + Chr(254)
                    S += DataSourceOwnerUserID

                    SW.WriteLine(S)

                Loop
            End If
            RSData.Close()
            RSData = Nothing
            SW.Close()

            Dim srFileReader As System.IO.StreamReader
            Dim sInputLine As String = ""

            II = 0
            srFileReader = System.IO.File.OpenText(LIKEYS)
            sInputLine = srFileReader.ReadLine()
            Do Until sInputLine Is Nothing
                'FrmMDIMain.SB4.Text = "Step 2 of 2: " + II.ToString + " of " + RecsToProcess.ToString
                'Application.DoEvents()

                sInputLine = srFileReader.ReadLine()

                If sInputLine = "" Then
                    GoTo NextRow
                End If

                Dim A$() = sInputLine.Split(Chr(254))

                LibraryName = UTIL.RemoveSingleQuotes(A(0))
                SourceGuid = A(1)
                OriginalFileType = A(2)
                UserID = A(3)
                SourceName = A(4)
                DataSourceOwnerUserID = A(5)

                S = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'"
                iCnt = iCount(Secureid,S)

                If iCnt = 0 Then
                    S = ""
                    S = S + " INSERT INTO [LibraryItems]" + vbCrLf
                    S = S + " ([SourceGuid]" + vbCrLf
                    S = S + " ,[ItemTitle]" + vbCrLf
                    S = S + " ,[ItemType]" + vbCrLf
                    S = S + " ,[LibraryItemGuid]" + vbCrLf
                    S = S + " ,[DataSourceOwnerUserID]" + vbCrLf
                    S = S + " ,[LibraryOwnerUserID]" + vbCrLf
                    S = S + " ,[LibraryName]" + vbCrLf
                    S = S + " ,[AddedByUserGuidId])" + vbCrLf
                    S = S + "      VALUES( " + vbCrLf
                    S = S + " ('" + SourceGuid + "'" + vbCrLf
                    S = S + " ,'" + SourceName + "'" + vbCrLf
                    S = S + " ,'" + OriginalFileType + "'" + vbCrLf
                    S = S + " ,'" + Guid.NewGuid.ToString + "'" + vbCrLf
                    S = S + " ,'" + DataSourceOwnerUserID + "'" + vbCrLf
                    S = S + " ,'" + LibraryName + "'" + vbCrLf
                    S = S + " ,'" + gCurrUserGuidID + "')"

                    Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If Not B Then
                        LogMessage(SecureID,gCurrUserGuidID, "Error: ValidateLibraryItems 100 - Failed to add library item Library: [" + LibraryName + "], SourceName: [" + SourceName + "], SourceGuid: [" + SourceGuid + "]")
                    End If

                End If
    NextRow:
            Loop

            srFileReader.Close()
            srFileReader.Dispose()
            SW.Dispose()
            RSData = Nothing

            GC.Collect()
            GC.WaitForPendingFinalizers()

        End Sub

        Sub inventoryEmailLibraryItems(SecureID as integer)

            Dim S$ = ""
            'S = S + " SELECT COUNT(*)"
            'S = S + " FROM LibEmail INNER JOIN"
            'S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory"

            Dim II As Integer = 0
            Dim iCnt As Integer = 0   'iCount(Secureid,S)
            Dim RecsToProcess As Integer = iCnt

            'If iCnt = 0 Then
            '    Return
            'End If

            Dim TGuid As String = Guid.NewGuid.ToString
            S = ""
            S = S + " Select DISTINCT" + vbCrLf
            S = S + " LibEmail.LibraryName , email.emailGuid, " + vbCrLf
            S = S + " email.SourceTypeCode, Library.UserID, Email.ShortSubj, " + vbCrLf
            S = S + " Email.UserID" + vbCrLf
            S = S + " FROM         LibEmail INNER JOIN" + vbCrLf
            S = S + " Email ON LibEmail.FolderName = Email.OriginalFolder" + vbCrLf
            S = S + " INNER Join " + vbCrLf
            S = S + " Library ON LibEmail.UserID = Library.UserID"


            Dim tDir As String = UTIL.getTempEnvironDir
            Dim LIKEYS As String = tDir + "\" + TGuid + ".txt"
            Dim SW As New StreamWriter(LIKEYS)

            Dim LibraryName As String = ""
            Dim SourceGuid As String = ""
            Dim OriginalFileType As String = ""
            Dim DataSourceOwnerUserID As String = ""
            Dim SourceName As String = ""
            Dim UserID As String = ""

            Dim rsEmail As SqlDataReader = Nothing
            'rsEmail = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)


            rsEmail = command.ExecuteReader()

            If rsEmail.HasRows Then
                Do While rsEmail.Read()
                    II += 1
                    'FrmMDIMain.SB4.Text = "Step 3 of 4: " + II.ToString + " of " + RecsToProcess.ToString
                    'Application.DoEvents()

                    LibraryName = rsEmail.GetValue(0).ToString
                    SourceGuid = rsEmail.GetValue(1).ToString
                    OriginalFileType = rsEmail.GetValue(2).ToString
                    DataSourceOwnerUserID = rsEmail.GetValue(3).ToString
                    SourceName = rsEmail.GetValue(4).ToString
                    UserID = rsEmail.GetValue(5).ToString

                    If InStr(OriginalFileType, ".") = 0 Then
                        OriginalFileType = "." + OriginalFileType
                    End If

                    S = ""
                    S += LibraryName + Chr(254)
                    S += SourceGuid + Chr(254)
                    S += OriginalFileType + Chr(254)
                    S += UserID + Chr(254)
                    S += SourceName + Chr(254)
                    S += DataSourceOwnerUserID

                    SW.WriteLine(S)

                Loop
            End If
            rsEmail.Close()
            rsEmail = Nothing
            SW.Close()

            Dim srFileReader As System.IO.StreamReader
            Dim sInputLine As String = ""

            II = 0
            srFileReader = System.IO.File.OpenText(LIKEYS)
            sInputLine = srFileReader.ReadLine()
            Do Until sInputLine Is Nothing
                'FrmMDIMain.SB4.Text = "Step 4 of 4: " + II.ToString + " of " + RecsToProcess.ToString
                'Application.DoEvents()

                sInputLine = srFileReader.ReadLine()

                If sInputLine = "" Then
                    GoTo NextRow
                End If

                Dim A$() = sInputLine.Split(Chr(254))

                LibraryName = UTIL.RemoveSingleQuotes(A(0))
                SourceGuid = A(1)
                OriginalFileType = A(2)
                UserID = A(3)
                SourceName = A(4)
                DataSourceOwnerUserID = A(5)

                S = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'"
                iCnt = iCount(Secureid,S)

                If iCnt = 0 Then
                    S = ""
                    S = S + " INSERT INTO [LibraryItems]" + vbCrLf
                    S = S + " ([SourceGuid]" + vbCrLf
                    S = S + " ,[ItemTitle]" + vbCrLf
                    S = S + " ,[ItemType]" + vbCrLf
                    S = S + " ,[LibraryItemGuid]" + vbCrLf
                    S = S + " ,[DataSourceOwnerUserID]" + vbCrLf
                    S = S + " ,[LibraryOwnerUserID]" + vbCrLf
                    S = S + " ,[LibraryName]" + vbCrLf
                    S = S + " ,[AddedByUserGuidId])" + vbCrLf
                    S = S + "      VALUES( " + vbCrLf
                    S = S + " ('" + SourceGuid + "'" + vbCrLf
                    S = S + " ,'" + SourceName + "'" + vbCrLf
                    S = S + " ,'" + OriginalFileType + "'" + vbCrLf
                    S = S + " ,'" + Guid.NewGuid.ToString + "'" + vbCrLf
                    S = S + " ,'" + DataSourceOwnerUserID + "'" + vbCrLf
                    S = S + " ,'" + LibraryName + "'" + vbCrLf
                    S = S + " ,'" + gCurrUserGuidID + "')"

                    Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                    If Not B Then
                        LogMessage(SecureID,gCurrUserGuidID, "Error: ValidateLibraryItems 100 - Failed to add library item Library: [" + LibraryName + "], SourceName: [" + SourceName + "], SourceGuid: [" + SourceGuid + "]")
                    End If

                End If
    NextRow:
            Loop

            srFileReader.Close()
            srFileReader.Dispose()
            SW.Dispose()
            rsEmail = Nothing

            GC.Collect()
            GC.WaitForPendingFinalizers()

            'FrmMDIMain.SB4.Text = "Validation Complete"

        End Sub

        Sub GetListOfAssignedLibraries(Byref SecureID As Integer, ByVal DirectoryName$, ByVal TypeEntry$, ByRef AssignedLibraries As List(Of String))

            Dim S$ = ""
            AssignedLibraries.Clear()

            If TypeEntry$.Equals("EMAIL") Then
                S$ = "Select LibraryName from LibEmail where FolderName = '" + DirectoryName + "'"
            Else
                S$ = "Select LibraryName from LibDirectory where DirectoryName = '" + DirectoryName + "'"
            End If


            Dim LibraryName As String = ""
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibraryName = RSData.GetValue(0).ToString
                    If Not AssignedLibraries.Contains(LibraryName) Then
                        AssignedLibraries.Add(LibraryName)
                    End If
                Loop
            Else
                AssignedLibraries.Add("No assigned libraries")
            End If
            RSData.Close()
            RSData = Nothing
            command.Dispose()
            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
            GC.Collect()
            GC.WaitForPendingFinalizers()

        End Sub

        Function isSubDirIncluded(Byref SecureID As Integer, ByVal DirFQN As String, ByRef ParentDir As String) As Boolean

            ParentDir = ""

            Dim TgtLib As String = ""
            Dim TempDir$ = ""
            Dim SS$ = ""
            If DirFQN.Trim.Length > 2 Then
                If Mid(DirFQN, 1, 2) = "\\" Then
                    SS = "\\"
                Else
                    SS = ""
                End If
            End If

            Dim DirList As New List(Of String)

            Dim A$() = DirFQN.Split("\")

            For I As Integer = 0 To UBound(A)
                TempDir = SS + TempDir + A(I)
                DirList.Add(TempDir)
                TempDir = TempDir + "\"
            Next

            For II As Integer = DirList.Count - 1 To 0 Step -1

                TempDir = DirList(II)
                TempDir = UTIL.RemoveSingleQuotes(TempDir)

                Dim iCnt As Integer = isSubDirIncludedBitON(SecureID, TempDir)

                If iCnt = 1 Then
                    ParentDir = TempDir
                    Return True
                ElseIf iCnt = 0 Then
                    Return False
                End If

                TempDir = TempDir + "\"
            Next

            Return False
        End Function
        Sub getLibraryOwnerGuids(Byref SecureID As Integer, ByRef LibraryOwnerGuids As Dictionary(Of String, String))
            Dim S As String = "Select LibraryName,UserID from Library"
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN)
            Try
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Dim LibraryName = RSData.GetValue(0).ToString
                        Dim UserID = RSData.GetValue(1).ToString
                        If Not LibraryOwnerGuids.ContainsKey(LibraryName) Then
                            LibraryOwnerGuids.Add(LibraryName, UserID)
                        End If
                    Loop

                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddLibraryGroupUser 100 - " + ex.Message + vbCrLf + S)
            Finally
                RSData.Close()
                RSData = Nothing
            End Try
        End Sub

    Sub AddLibraryGroupUser(Byref SecureID As Integer, ByVal GroupName As String, ByRef RC As Boolean)
        RC = True
        GroupName = UTIL.RemoveSingleQuotes(GroupName)

        Dim LibraryOwnerGuids As New Dictionary(Of String, String)

        getLibraryOwnerGuids(SecureID, LibraryOwnerGuids)

        Dim S As String = ""

        S = S + " SELECT     GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupOwnerUserID, GroupLibraryAccess.GroupName, "
        S = S + "               GroupUsers.UserID AS GroupUserGuid, GroupUsers.FullAccess, GroupUsers.ReadOnlyAccess, GroupUsers.DeleteAccess, GroupUsers.Searchable, "
        S = S + "                       GroupUsers.GroupOwnerUserID AS GroupOwnerUserIDGuid"
        S = S + " FROM         GroupLibraryAccess INNER JOIN"
        S = S + "               GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName"
        If GroupName.Equals("*") Then
        Else
            S = S + " WHERE     (GroupLibraryAccess.GroupName = '" + GroupName + "')"
        End If
        S = S + " order by GroupLibraryAccess.LibraryName"

        Dim LibraryName As String = ""
        Dim GroupOwnerUserID As String = ""
        Dim tGroupName As String = ""
        Dim GroupUserGuid As String = ""
        Dim FullAccess As String = ""
        Dim ReadOnlyAccess As String = ""
        Dim DeleteAccess As String = ""
        Dim Searchable As String = ""
        Dim GroupOwnerUserIDGuid As String = ""

        Dim deleteExecutionList As New List(Of String)
        Dim insertExecutionList As New List(Of String)
        Dim PrevLibName As String = ""

        Dim RSData As SqlDataReader = Nothing
        'RSData = SqlQryNo'Session(S)
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN)
        Try
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()

                    LibraryName = RSData.GetValue(0).ToString
                    GroupOwnerUserID = RSData.GetValue(1).ToString
                    tGroupName = RSData.GetValue(2).ToString
                    GroupUserGuid = RSData.GetValue(3).ToString
                    FullAccess = RSData.GetValue(4).ToString
                    ReadOnlyAccess = RSData.GetValue(5).ToString
                    DeleteAccess = RSData.GetValue(6).ToString
                    Searchable = RSData.GetValue(7).ToString
                    GroupOwnerUserIDGuid = RSData.GetValue(8).ToString

                    Dim LibraryOwnerUserID As String = ""
                    If LibraryOwnerGuids.ContainsKey(LibraryName) Then '
                        LibraryOwnerUserID = LibraryOwnerGuids.Item(LibraryName)
                    Else
                        LibraryOwnerUserID = gCurrUserGuidID
                    End If

                    LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
                    GroupUserGuid = UTIL.RemoveSingleQuotes(GroupUserGuid)
                    GroupOwnerUserIDGuid = UTIL.RemoveSingleQuotes(GroupOwnerUserIDGuid)

                    If InStr(LibraryName, "''") = 0 And InStr(LibraryName, "'") > 0 Then
                        LibraryName = LibraryName.Replace("'", "''")
                    End If

                    Dim iSql As String = ""
                    iSql = "if not exists (select UserID from LibraryUsers where UserID = '" + GroupUserGuid + "' and LibraryOwnerUserID = '" + GroupOwnerUserIDGuid + "' and LibraryName = '" + LibraryName + "')"
                    iSql += "INSERT INTO [LibraryUsers]" + vbCrLf
                    iSql += "           ([ReadOnly]" + vbCrLf
                    iSql += "           ,[CreateAccess]" + vbCrLf
                    iSql += "           ,[UpdateAccess]" + vbCrLf
                    iSql += "           ,[DeleteAccess]" + vbCrLf
                    iSql += "           ,[UserID]" + vbCrLf
                    iSql += "           ,[LibraryOwnerUserID]" + vbCrLf
                    iSql += "           ,[LibraryName]" + vbCrLf
                    iSql += "           ,[NotAddedAsGroupMember]" + vbCrLf
                    iSql += "           ,[GroupUser])" + vbCrLf
                    iSql += "     VALUES" + vbCrLf
                    iSql += "           (0" + vbCrLf
                    iSql += "           ,1" + vbCrLf
                    iSql += "           ,1" + vbCrLf
                    iSql += "           ,0" + vbCrLf
                    iSql += "           ,'" + GroupUserGuid + "'" + vbCrLf
                    iSql += "           ,'" + GroupOwnerUserIDGuid + "'" + vbCrLf
                    iSql += "           ,'" + LibraryName + "'" + vbCrLf
                    iSql += "           ,0" + vbCrLf
                    iSql += "           ,1)" + vbCrLf

                    insertExecutionList.Add(iSql)

                    PrevLibName = LibraryName

                Loop
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "ERROR: AddLibraryGroupUser 100 - " + ex.Message + vbCrLf + S)
            RC = False
        Finally
            RSData.Close()
        End Try

        RSData = Nothing

        GC.Collect()
        GC.WaitForPendingFinalizers()

        For I As Integer = 0 To deleteExecutionList.Count - 1
            Dim tSql As String = deleteExecutionList(I)
            Dim B As Boolean = True
            B = ExecuteSqlNewConn(SecureID, tSql)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to DELETE library users for library " + LibraryName + " : " + tSql)
            End If
        Next

        For I As Integer = 0 To insertExecutionList.Count - 1
            Dim tSql As String = insertExecutionList(I)
            Dim B As Boolean = True
            B = ExecuteSqlNewConn(SecureID, tSql)
            If Not B Then
                LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to ADD library user. " + vbCrLf + tSql)
            Else
                LogMessage(SecureID, gCurrUserGuidID, "NOTICE: ADDED library user. " + vbCrLf + tSql)
            End If
        Next

    End Sub

    Public Sub DeleteLibraryGroupUser(Byref SecureID As Integer, ByVal GroupName As String, ByVal LibraryName As String, ByRef RC As Boolean)
        RC = True
        GroupName = UTIL.RemoveSingleQuotes(GroupName)
        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)

        Dim S As String = ""

        S += " SELECT     GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID AS Userid" + vbCrLf
        S += " FROM       GroupLibraryAccess INNER JOIN" + vbCrLf
        S += "            GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName" + vbCrLf
        S += " WHERE      GroupLibraryAccess.GroupName = '" + GroupName + "'" + vbCrLf
        S += " AND        LibraryName = '" + LibraryName + "'" + vbCrLf
        S += " order by   GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName" + vbCrLf

        Dim Userid As String = ""
        Dim RSData As SqlDataReader = Nothing
        'RSData = SqlQryNo'Session(S)
        Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN)
        Try
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    Userid = RSData.GetValue(2).ToString
                    Dim SS As String = "delete from GroupLibraryAccess where UseriD = '" + Userid + "' and LibraryName = '" + LibraryName + "' and groupname = '" + GroupName + "'"
                    Dim B1 As Boolean = ExecuteSqlNewConn(SecureID, SS)
                    If Not B1 Then
                        Console.WriteLine("Failed to delete " + Userid + " from Library " + LibraryName + ".")
                    End If
                    'Dim iCnt As Integer = countGroupsUserBelongsTo(SecureID, LibraryName, Userid)
                    'If iCnt = 0 Then
                    '    SS = "delete from LibraryUsers where UserID = '" + Userid + "' and LibraryName = '" + LibraryName + "'  and SingleUser != 1"
                    '    Dim B1 As Boolean = ExecuteSqlNewConn(SecureID, S)
                    '    If Not B1 Then
                    '        Console.WriteLine("Failed to delete " + Userid + " from Library " + LibraryName + ".")
                    '    End If
                    'End If
                Loop
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "ERROR: AddLibraryGroupUser 100 - " + ex.Message + vbCrLf + S)
            RC = False
        Finally
            RSData.Close()
        End Try

        RSData = Nothing

        GC.Collect()
        GC.WaitForPendingFinalizers()

    End Sub

        Public Sub DeleteLibraryGroupUser(Byref SecureID As Integer, ByVal GroupName As String, ByVal LibraryName As String, ByVal GroupUserID As String)

        GroupName = GroupName.Replace("'", "''")
        LibraryName = LibraryName.Replace("'", "''")

            Dim S As String = ""

            S += " SELECT     GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID AS Userid" + vbCrLf
            S += " FROM         GroupLibraryAccess INNER JOIN" + vbCrLf
            S += "                       GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName" + vbCrLf
            S += " WHERE     (GroupLibraryAccess.GroupName = '" + GroupName + "') " + vbCrLf
            S += "     AND (GroupLibraryAccess.LibraryName = '" + LibraryName + "') " + vbCrLf
            S += "     AND (GroupUsers.UserID = '" + GroupUserID + "')" + vbCrLf

            'Clipboard.Clear()
            'Clipboard.SetText(S)

            Dim Userid As String = ""
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN)
            Try
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        Userid = GroupUserID
                        Dim SS As String = "delete from GroupLibraryAccess where UseriD = '" + Userid + "' and LibraryName = '" + LibraryName + "' and groupname = '" + GroupName + "'"
                        Dim iCnt As Integer = countGroupsUserBelongsTo(SecureID, LibraryName, Userid)
                        If iCnt = 0 Then
                            SS = "delete from LibraryUsers where UserID = '" + Userid + "' and LibraryName = '" + LibraryName + "'  and SingleUser != 1"
                            Dim B1 As Boolean = ExecuteSqlNewConn(SecureID, S)
                            If Not B1 Then
                                Console.WriteLine("Failed to delete " + Userid + " from Library " + LibraryName + ".")
                            End If
                        End If
                    Loop
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: AddLibraryGroupUser 100 - " + ex.Message + vbCrLf + S)
            Finally
                RSData.Close()
            End Try

            RSData = Nothing

            GC.Collect()
            GC.WaitForPendingFinalizers()

        End Sub

        Sub VerifyOrphanSourceData(Byref SecureID As Integer)
            Try
                Dim S As String = "Select sourceguid from DataSource where DATALENGTH(SourceImage) = 0"
                Dim sourceguid As String = ""

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID)
                'Data Source=DELLT100\ECMLIB;Initial Catalog=ECM.Library;Integrated Security=True; Connect Timeout = 30
                If InStr(CS, "Connect Timeout", CompareMethod.Text) > 0 Then
                    Dim II As Integer = InStr(CS, "Connect Timeout", CompareMethod.Text)
                    CS = Mid(CS, 1, II - 1)
                End If
                Dim CONN As New SqlConnection(CS)
                CONN.Open()
                Dim command As New SqlCommand(S, CONN)
                RSData = command.ExecuteReader()
                If RSData.HasRows Then
                    Do While RSData.Read()
                        'Application.DoEvents()
                        System.Threading.Thread.Sleep(100)
                        sourceguid = RSData.GetValue(0).ToString
                        DeleteContent(SecureID, sourceguid, "CONTENT", "Orphan records")
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: VerifyOrphanSourceData - " + ex.Message)
            End Try

            MsgBox("Source Validation Complete.")

        End Sub

        Sub VerifyOrphanEmailData(Byref SecureID As Integer)

            Try
                Dim S As String = "Select emailguid from Email where DATALENGTH(EmailImage) = 0 "
                Dim EmailGuid As String = ""

                Dim RSData As SqlDataReader = Nothing
                'RSData = SqlQryNo'Session(S)
                Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
                'Data Source=DELLT100\ECMLIB;Initial Catalog=ECM.Library;Integrated Security=True; Connect Timeout = 30
                If InStr(CS, "Connect Timeout", CompareMethod.Text) > 0 Then
                    Dim II As Integer = InStr(CS, "Connect Timeout", CompareMethod.Text)
                    CS = Mid(CS, 1, II - 1)
                End If

                If RSData.HasRows Then
                    Do While RSData.Read()
                        System.Threading.Thread.Sleep(100)
                        'Application.DoEvents()
                        EmailGuid = RSData.GetValue(0).ToString
                        DeleteEmailByGuid(SecureID, EmailGuid$)
                    Loop
                End If
                RSData.Close()
                RSData = Nothing
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: VerifyOrphanEmailData - " + ex.Message)
            End Try

            MsgBox("Email Validation Complete.")

        End Sub


        Sub AddStdTriggers(Byref SecureID As Integer, ByVal TblName As String, ByVal Keys As List(Of String))
            Dim S As String = ""
            Dim B As Boolean = False

            Dim TriggerName As String = ""

            TriggerName = "trig<XX>_Update"
            TriggerName = TriggerName.Replace("<XX>", TblName.Trim)
            S = ""
            S = S + " IF EXISTS (SELECT * FROM sys.triggers" + vbCrLf
            S = S + "     WHERE name = '<XX>')" + vbCrLf
            S = S + " DROP TRIGGER <XX>" + vbCrLf
            S = S.Replace("<XX>", TriggerName.Trim)
            B = ExecuteSqlNewConn(SecureID, S)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: Failed to drop trigger - " + TriggerName)
            End If

            'Clipboard.Clear()
            'Clipboard.SetText(S)

            S = ""
            S = S + "CREATE TRIGGER trig<XX>_Update" + vbCrLf
            S = S + "   ON <XX>" + vbCrLf
            S = S + "         AFTER Update " + vbCrLf
            S = S + "   AS" + vbCrLf
            S = S + "         BEGIN " + vbCrLf
            S = S + "         UPDATE <XX> " + vbCrLf
            S = S + "   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME" + vbCrLf
            S = S + "         FROM inserted " + vbCrLf
            S = S + "   WHERE "
            For i As Integer = 0 To Keys.Count - 1
                If i = 0 Then
                    S = S + "     <XX>" + "." + Keys(i) + " = inserted." + Keys(i) + vbCrLf
                Else
                    S = S + "     and <XX>" + "." + Keys(i) + " = inserted." + Keys(i) + vbCrLf
                End If
            Next
            S = S.Replace("<XX>", TblName.Trim)
            S = S + " End" + vbCrLf

            'Clipboard.Clear()
            'Clipboard.SetText(S)

            B = ExecuteSqlNewConn(SecureID, S)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: Failed to CREATE trigger - " + TriggerName)
            End If

            TriggerName = "<XX>_INS"
            TriggerName = TriggerName.Replace("<XX>", TblName.Trim)
            S = ""
            S = S + " IF EXISTS (SELECT * FROM sys.triggers" + vbCrLf
            S = S + "     WHERE name = '<XX>')" + vbCrLf
            S = S + " DROP TRIGGER <XX>" + vbCrLf
            S = S.Replace("<XX>", TriggerName.Trim)

            'Clipboard.Clear()
            'Clipboard.SetText(S)


            B = ExecuteSqlNewConn(SecureID, S)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: Failed to drop trigger - " + TriggerName)
            End If

            S = ""
            S = S + " Create TRIGGER <XX>_INS" + vbCrLf
            S = S + "   ON dbo.<XX>" + vbCrLf
            S = S + "   FOR UPDATE " + vbCrLf
            S = S + " AS" + vbCrLf
            S = S + "   IF ( @@ROWCOUNT = 0 )" + vbCrLf
            S = S + "                 Return" + vbCrLf
            S = S + "   IF TRIGGER_NESTLEVEL() > 1" + vbCrLf
            S = S + "                 Return" + vbCrLf
            S = S + "   UPDATE <XX>" + vbCrLf
            S = S + "   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME" + vbCrLf
            S = S + "   FROM <XX> t" + vbCrLf
            S = S + "   JOIN inserted i" + vbCrLf
            'S = S + "   ON t.ArchiveID = i.ArchiveID" + vbCrLf
            S = S + "   ON " + vbCrLf
            For i As Integer = 0 To Keys.Count - 1
                If i = 0 Then
                    S = S + "     t" + "." + Keys(i) + " = i." + Keys(i) + vbCrLf
                Else
                    S = S + "     and t" + "." + Keys(i) + " = i." + Keys(i) + vbCrLf
                End If
            Next
            S = S.Replace("<XX>", TblName.Trim)

            'Clipboard.Clear()
            'Clipboard.SetText(S)

            B = ExecuteSqlNewConn(SecureID, S)
            If Not B Then
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: Failed to CREATE trigger - " + TriggerName)
            End If

            Return
        End Sub

        Sub VerifyStandardTriggers(Byref SecureID As Integer)

            Dim Keys As New List(Of String)
            Dim S As String = ""
            S = S + " select s.name as TABLE_SCHEMA, t.name as TABLE_NAME"
            S = S + " , k.name as CONSTRAINT_NAME, k.type_desc as CONSTRAINT_TYPE"
            S = S + " , c.name as COLUMN_NAME, ic.key_ordinal AS ORDINAL_POSITION"
            S = S + " from sys.key_constraints as k"
            S = S + " join sys.tables as t"
            S = S + " on t.object_id = k.parent_object_id"
            S = S + " join sys.schemas as s"
            S = S + " on s.schema_id = t.schema_id"
            S = S + " join sys.index_columns as ic"
            S = S + " on ic.object_id = t.object_id"
            S = S + " and ic.index_id = k.unique_index_id"
            S = S + " join sys.columns as c"
            S = S + " on c.object_id = t.object_id"
            S = S + " and c.column_id = ic.column_id"
            S = S + " order by TABLE_SCHEMA, TABLE_NAME, CONSTRAINT_NAME, ORDINAL_POSITION;"

            Dim RSData As SqlDataReader = Nothing

            Dim TABLE_NAME As String = ""
            Dim CONSTRAINT_NAME As String = ""
            Dim COLUMN_NAME As String = ""
            Dim CONSTRAINT_TYPE As String = ""

            Dim prevTABLE_NAME As String = ""
            Dim prevCONSTRAINT_NAME As String = ""
            Dim prevCOLUMN_NAME As String = ""

            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            Dim bFirstRow As Boolean = True

            If RSData.HasRows Then
                Do While RSData.Read()
                    TABLE_NAME = RSData.GetValue(1).ToString
                    CONSTRAINT_NAME = RSData.GetValue(2).ToString
                    COLUMN_NAME = RSData.GetValue(4).ToString
                    'FrmMDIMain.SB4.Text = "Processing " + TABLE_NAME
                    'Application.DoEvents()
                    If TABLE_NAME.Equals(prevTABLE_NAME) And CONSTRAINT_NAME.Equals(prevCONSTRAINT_NAME) Then
                        If prevTABLE_NAME.Length > 0 Then
                            Keys.Add(COLUMN_NAME)
                        End If
                    Else
                        If bFirstRow Then
                            bFirstRow = False
                            Keys.Add(COLUMN_NAME)
                        Else
                            AddStdTriggers(SecureID, prevTABLE_NAME, Keys)
                            Keys.Clear()
                            Keys.Add(COLUMN_NAME)
                        End If
                    End If

                    prevTABLE_NAME = TABLE_NAME
                    prevCONSTRAINT_NAME = CONSTRAINT_NAME

                Loop
            End If

            RSData.Close()
            RSData = Nothing
            'FrmMDIMain.SB4.Text = ""
            MsgBox("Triggers validated!")

        End Sub

    Function countGroupsUserBelongsTo(ByRef SecureID As Integer, ByVal TcbLibraryName As String, ByVal UserID As String) As Integer

        Dim S As String = ""
        TcbLibraryName = UTIL.RemoveSingleQuotes(TcbLibraryName)
        S = S + " select COUNT(*) from GroupLibraryAccess where UserID = '" + UserID + "'  and LibraryName = '" + TcbLibraryName + "'"
        Dim iCnt As Integer = iCount(Secureid, S)
        Return iCnt

    End Function


        Public Sub GetGroupLibraries(Byref SecureID As Integer, ByVal GroupName As String, ByRef ListOfLibraries As List(Of String))

            ListOfLibraries.Clear()
            Dim S$ = ""
            S = S + " SELECT     LibraryName from GroupLibraryAccess WHERE     GroupName = '" + GroupName + "' "

            Dim b As Boolean = True
            Dim LibraryName As String = ""

            'If UBound(TblCols, 2) > 2 Then
            '    Return
            'End If

            'ReDim TblCols$(4, 0)

            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibraryName = RSData.GetValue(0).ToString
                    ListOfLibraries.Add(LibraryName)
                Loop
            End If
            RSData.Close()
            RSData = Nothing

        End Sub

    Sub ResetLibraryUsersCount(Byref SecureID As Integer, ByRef RC As Boolean)
        RC = True
        Dim b As Boolean = True
        Dim S$ = "update LibraryUsers set GroupCnt = 0 "

        b = ExecuteSqlNewConn(SecureID, S)
        If Not b Then
            RC = False
            LogMessage(SecureID, gCurrUserGuidID, "ERROR: failed to reset the LibraryUsers GroupCnt - aborting.")
            Return
        End If

        S = ""
        S += " SELECT     GroupUsers.UserID, GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupName"
        S += " FROM         GroupLibraryAccess INNER JOIN"
        S += "                       GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName"
        S += " group by GroupUsers.UserID, LibraryName, GroupLibraryAccess.GroupName                      "
        S += " order by GroupUsers.UserID, LibraryName, GroupName"
        Try
            Dim UserID As String = ""
            Dim LibraryName As String = ""
            Dim GroupName As String = ""

            Dim RSData As SqlDataReader = Nothing
            Dim CS as string = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()
            Dim II As Integer = 0
            If RSData.HasRows Then
                Do While RSData.Read()
                    II += 1
                    If II Mod 5 = 0 Then
                        'FrmMDIMain.SB4.Text = II.ToString
                    End If
                    UserID = RSData.GetValue(0).ToString
                    LibraryName = RSData.GetValue(1).ToString
                    GroupName = RSData.GetValue(2).ToString

                    LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
                    GroupName = UTIL.RemoveSingleQuotes(GroupName)

                    S = "update LibraryUsers set GroupCnt = GroupCnt + 1 where LibraryName = '" + LibraryName + "' and UserID = '" + UserID + "'"
                    b = ExecuteSqlNewConn(SecureID, S)
                    If Not b Then
                        LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to udpate LibraryUsers GroupCnt for Library 'xx' and user 'xx'.")
                    End If
                Loop
            End If
            RSData.Close()
            RSData = Nothing

            S = "select count(*) from LibraryUsers where (SingleUser is null or SingleUser = 0) and GroupCnt = 0 "
            Dim iCnt As Integer = iCount(SecureID, S)

            If iCnt > 0 Then
                S = "delete from LibraryUsers where (SingleUser is null or SingleUser = 0) and GroupCnt = 0 "
                b = ExecuteSqlNewConn(SecureID, S)
                If Not b Then
                    LogMessage(SecureID, gCurrUserGuidID, "ERROR: Failed to delete NULL LibraryUsers." + vbCrLf + S)
                End If
            End If
        Catch ex As Exception
            RC = False
            LogMessage(SecureID, gCurrUserGuidID, "ERROR ResetLibraryUsersCount: Failed to delete NULL LibraryUsers." + ex.Message + vbCrLf + S)
        End Try
        
        'FrmMDIMain.SB4.Text = "Complete."
    End Sub

        Function getListOfContainingLibraries(Byref SecureID As Integer, ByVal tGuid As String) As String
            Dim S As String = "select LibraryName from LibraryItems where SourceGuid = '" + tGuid + "' "
            Dim LibName As String = ""
            Dim ListOfLibs As String = ""
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    LibName = RSData.GetValue(0).ToString
                    ListOfLibs += LibName + vbCrLf
                Loop
            Else
                ListOfLibs += "None"
            End If
            RSData.Close()
            RSData = Nothing
            Return ListOfLibs
        End Function

        Sub FixEmailFields(SecureID as integer)

            Dim S$ = ""
            S = ""
            S = S + " select emailGuid, SenderEmailAddress,SentTO  ,AllRecipients ,SenderName ,ReceivedByName ,OriginalFolder, CC , BCC "
            S = S + " from Email "
            S = S + " where "
            S = S + " SenderEmailAddress like '%''%'"
            S = S + " or SentTO  like '%''%'"
            S = S + " or AllRecipients like '%''%'"
            S = S + " or SenderName like '%''%'"
            S = S + " or ReceivedByName like '%''%'"
            S = S + " or OriginalFolder like '%''%' "
            S = S + " or CC like '%''%'"
            S = S + " or BCC like '%''%'"

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0

            Dim EmailGuid As String = ""
            Dim SenderEmailAddress As String = ""
            Dim SentTO As String = ""
            Dim AllRecipients As String = ""
            Dim SenderName As String = ""
            Dim ReceivedByName As String = ""
            Dim OriginalFolder As String = ""
            Dim CC As String = ""
            Dim BCC As String = ""

            If UBound(TblCols, 2) > 2 Then
                Return
            End If

            Dim iRec As Integer = 0
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    'Application.DoEvents()
                    iRec += 1
                    If iRec Mod 5 = 0 Then
                        'FrmMDIMain.SB4.Text = "** " + iRec.ToString
                        'Application.DoEvents()
                    End If
                    EmailGuid = RSData.GetValue(0).ToString()
                    SenderEmailAddress = RSData.GetValue(1).ToString()
                    SentTO = RSData.GetValue(2).ToString()
                    AllRecipients = RSData.GetValue(3).ToString()
                    SenderName = RSData.GetValue(4).ToString()
                    ReceivedByName = RSData.GetValue(5).ToString()
                    OriginalFolder = RSData.GetValue(6).ToString()
                    CC = RSData.GetValue(7).ToString()
                    BCC = RSData.GetValue(8).ToString()

                    UTIL.StripSingleQuotes(SenderEmailAddress)
                    UTIL.StripSingleQuotes(SentTO)
                    UTIL.StripSingleQuotes(AllRecipients)
                    UTIL.StripSingleQuotes(SenderName)
                    UTIL.StripSingleQuotes(ReceivedByName)
                    UTIL.StripSingleQuotes(OriginalFolder)
                    UTIL.StripSingleQuotes(CC)
                    UTIL.StripSingleQuotes(BCC)

                    Dim UpdateSql As String = ""
                    UpdateSql = UpdateSql + " update Email set "
                    UpdateSql = UpdateSql + " SenderEmailAddress ='" + SenderEmailAddress + "',"
                    UpdateSql = UpdateSql + "  SentTO ='" + SentTO + "',"
                    UpdateSql = UpdateSql + "  AllRecipients ='" + AllRecipients + "',"
                    UpdateSql = UpdateSql + "  SenderName ='" + SenderName + "',"
                    UpdateSql = UpdateSql + "  ReceivedByName ='" + ReceivedByName + "',"
                    UpdateSql = UpdateSql + "  OriginalFolder ='" + OriginalFolder + "',"
                    UpdateSql = UpdateSql + "  CC ='" + CC + "',"
                    UpdateSql = UpdateSql + "  BCC ='" + BCC + "' "
                    UpdateSql = UpdateSql + " where EmailGuid = '" + EmailGuid + "'"

                    b = ExecuteSqlNewConn(SecureID, UpdateSql)
                    If Not b Then
                        Console.WriteLine("ERROR: " + UpdateSql)
                    End If

                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing
            'FrmMDIMain.SB4.Text = ""

            FixEmailRecipients(SecureID)

        End Sub

        Sub FixEmailRecipients(SecureID as integer)

            Dim Recipient As String = ""
            Dim S$ = "SELECT distinct [Recipient] FROM [Recipients] where [Recipient] like '%''%'"
            Dim L As New List(Of String)

            Dim b As Boolean = True
            Dim i As Integer = 0
            Dim id As Integer = -1
            Dim II As Integer = 0

            Dim EmailGuid As String = ""

            If UBound(TblCols, 2) > 2 Then
                Return
            End If

            Dim iRec As Integer = 0
            Dim RSData As SqlDataReader = Nothing
            'RSData = SqlQryNo'Session(S)
            Dim CS as string = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    'Application.DoEvents()
                    iRec += 1
                    If iRec Mod 5 = 0 Then
                        'FrmMDIMain.SB4.Text = "** " + iRec.ToString
                        'Application.DoEvents()
                    End If
                    Recipient = RSData.GetValue(0).ToString()

                    If Not L.Contains(Recipient) Then
                        L.Add(Recipient)
                    End If
                Loop
            Else
                id = -1
            End If
            RSData.Close()
            RSData = Nothing

            For i = 0 To L.Count - 1
                S = L.Item(i)
                S = UTIL.RemoveSingleQuotes(S)
                Recipient = L.Item(i)
                UTIL.StripSingleQuotes(Recipient)
                Dim UpdateSql As String = ""
                UpdateSql = UpdateSql + " update Recipients set "
                UpdateSql = UpdateSql + " Recipient ='" + Recipient + "' "
                UpdateSql = UpdateSql + " where Recipient = '" + S + "'"

                b = ExecuteSqlNewConn(SecureID, UpdateSql)
                If Not b Then
                    Console.WriteLine("ERROR: " + UpdateSql)
                End If
            Next

            'FrmMDIMain.SB4.Text = ""
        End Sub

        Sub RecordGrowth(Byref SecureID As Integer, ByRef RC As Boolean)
            Dim S As String = ""
            S = S + " IF OBJECT_ID('DatabaseFiles') IS NULL"
            S = S + " BEGIN"
            S = S + " SELECT TOP 0 * INTO DatabaseFiles"
            S = S + " FROM sys.database_files    "
            S = S + " "
            S = S + " ALTER TABLE DatabaseFiles"
            S = S + " ADD CreationDate DATETIME DEFAULT(GETDATE())"
            S = S + " End"
            Dim b As Boolean = ExecuteSqlNewConn(SecureID, S)
            If Not b Then
                Console.WriteLine("ERROR: RecordGrowth = " + S)
            End If

            S = S + " EXECUTE sp_msforeachdb 'INSERT INTO DatabaseFiles SELECT *, GETDATE() FROM [?].sys.database_files'"
            b = ExecuteSqlNewConn(SecureID, S)
            If Not b Then
                Console.WriteLine("ERROR: RecordGrowth = " + S)
            End If
            RC = b

        End Sub

        Sub EmailHashRows(Byref SecureID As Integer)

            Dim S$ = ""
            S = ""
            S = S + " select EmailGuid, subject, body, CreationTime, SenderEmailAddress, nbrAttachments, SourceTypeCode "
            S = S + " from Email where RecHash is NULL"

            Dim EmailGuid As String = ""
            Dim SenderEmailAddress As String = ""
            Dim subject As String = ""
            Dim body As String = ""
            Dim CreationTime As String = ""
            Dim nbrAttachments As String = ""
            Dim SourceTypeCode As String = ""
            Dim FileExt As String = ""
            Dim tHash As String = ""
            Dim tKey As String = ""

            Dim iCnt As Integer = 0

            Dim L As New Dictionary(Of String, String)

            Dim RSData As SqlDataReader = Nothing

            Dim CS As String = getConnStr(SecureID)
            UTIL.setConnectionStringTimeout(CS, "10000")
            Dim JumpTo As Integer = 0

            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            Dim ProcessData As Boolean = False

            If RSData.HasRows And ProcessData = True Then
                Do While RSData.Read()
                    iCnt += 1
                    'Application.DoEvents()
                    If iCnt Mod 50 = 0 Then
                        'FrmMDIMain.SB4.Text = iCnt.ToString
                        'Application.DoEvents()
                        'System.Threading.Thread.Sleep(250)
                    End If

                    If JumpTo > 0 And iCnt < JumpTo Then
                        GoTo NextOne
                    End If

                    EmailGuid = RSData.GetValue(0).ToString()
                    subject = RSData.GetValue(1).ToString()
                    body = RSData.GetValue(2).ToString()
                    CreationTime = RSData.GetValue(3).ToString()
                    SenderEmailAddress = RSData.GetValue(4).ToString()
                    nbrAttachments = RSData.GetValue(5).ToString()
                    SourceTypeCode = RSData.GetValue(6).ToString()

                    tKey = subject + Chr(254) + body + Chr(254) + CreationTime + Chr(254) + SenderEmailAddress + Chr(254) + nbrAttachments + Chr(254) + SourceTypeCode
                    tHash = KGEN.genHashEmail(subject, body, SenderEmailAddress, CreationTime, nbrAttachments, FileExt)

                    LOG.WriteToEmailDuplicateLog("E", EmailGuid, tHash)
    NextOne:
                Loop
            Else
                RSData.Close()
                RSData = Nothing
                'FrmMDIMain.SB4.Text = ""
                Return
            End If
            RSData.Close()
            RSData = Nothing
            'FrmMDIMain.SB4.Text = ""

            LOG.LoadEmailDupLog(L)
            EmailHashRowsApply(SecureID, L, CS)

            'FrmMDIMain.SB4.Text = "Done."
            L = Nothing


        End Sub


        Sub EmailHashRowsApply(Byref SecureID As Integer, ByRef L As Dictionary(Of String, String), ByVal CS As String)
            Dim rc As Boolean = False
            Dim CN As New SqlConnection(CS)
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()
            Dim BB As Boolean = True
            Dim EmailGuid As String = ""
            Dim tHash As String = ""
            Dim iCnt As Integer = 0


            Dim SkipTo As Integer = 215035

            Dim UpdateSql As String = ""
            Dim B As Boolean = True
            For I As Integer = SkipTo To L.Count - 1
                'Application.DoEvents()
                Try
                    EmailGuid = L.Keys(I)
                    tHash = L.Values(I)
                    UpdateSql = "Update Email set RecHash = '" + tHash + "' where EmailGuid = '" + EmailGuid + "'"

                    'B = ExecuteSqlNewConn(UpdateSql)
                    Try
                        B = True
                        dbCmd.CommandText = UpdateSql
                        dbCmd.ExecuteNonQuery()
                    Catch ex As Exception
                        Console.WriteLine(ex.Message)
                        B = False
                    End Try

                    'If I Mod 100 = 0 Then
                    '    Try
                    '        dbCmd.CommandText = "GO"
                    '        dbCmd.ExecuteNonQuery()
                    '    Catch ex As Exception
                    '        Console.WriteLine("ERROR: EmailHashRows 200 - " + ex.Message)
                    '    End Try

                    'End If

                    If Not B Then
                        Console.WriteLine("ERROR: " + UpdateSql)
                    End If
                    iCnt += 1
                    If I Mod 10 = 0 Then
                        'FrmMDIMain.SB4.Text = "** " + I.ToString
                        'Application.DoEvents()
                    End If
                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR 100 - EmailHashRowsApply: " + ex.Message + vbCrLf + UpdateSql)
                    B = False
                End Try
            Next
            If B = True Then
                L.Clear()
            End If

            CN.Close()
            CN.Dispose()
        End Sub

        Sub ContentHashRows(Byref SecureID As Integer)

            Dim S$ = ""
            S = ""
            S = S + " SELECT [SourceGuid],[VersionNbr], CreateDate,[SourceName],[OriginalFileType],[FileLength],[CRC] "
            S = S + " FROM [DataSource] where RecHash is NULL"

            Dim SourceGuid As String = ""
            'Dim VersionNbr As String = ""
            Dim CreateDate As String = ""
            Dim SourceName As String = ""
            Dim OriginalFileType As String = ""
            Dim FileLength As String = ""
            Dim CRC As String = ""

            Dim tHash As String = ""
            Dim tKey As String = ""

            Dim iCnt As Integer = 0

            Dim L As New Dictionary(Of String, String)

            Dim RSData As SqlDataReader = Nothing

            Dim CS As String = getConnStr(SecureID)
            UTIL.setConnectionStringTimeout(CS, "10000")
            Dim JumpTo As Integer = 0

            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            RSData = command.ExecuteReader()

            Dim ProcessData As Boolean = False

            If RSData.HasRows And ProcessData = True Then
                Do While RSData.Read()
                    iCnt += 1
                    'Application.DoEvents()
                    If iCnt Mod 50 = 0 Then
                        'FrmMDIMain.SB4.Text = iCnt.ToString
                        'Application.DoEvents()
                        'System.Threading.Thread.Sleep(250)
                    End If

                    If JumpTo > 0 And iCnt < JumpTo Then
                        GoTo NextOne
                    End If

                    SourceGuid = RSData.GetValue(0).ToString()
                    'VersionNbr = RSData.GetValue(1).ToString()
                    CreateDate = RSData.GetValue(2).ToString()
                    SourceName = RSData.GetValue(3).ToString()
                    OriginalFileType = RSData.GetValue(4).ToString()
                    FileLength = RSData.GetValue(5).ToString()
                    CRC = RSData.GetValue(6).ToString()

                    tKey = CreateDate + Chr(254) + SourceName + Chr(254) + OriginalFileType + Chr(254) + FileLength + Chr(254) + CRC
                    tHash = KGEN.genHashContent(CreateDate, SourceName, OriginalFileType, FileLength, CRC)

                    LOG.WriteToContentDuplicateLog("C", SourceGuid, tHash)
    NextOne:
                Loop
            Else
                RSData.Close()
                RSData = Nothing
                'FrmMDIMain.SB4.Text = ""
                Return
            End If
            RSData.Close()
            RSData = Nothing
            'FrmMDIMain.SB4.Text = ""

            LOG.LoadContentDupLog(L)
            ContentHashRowsApply(SecureID, L, CS)

            'FrmMDIMain.SB4.Text = "Done: Content Keyed"
            L = Nothing

        End Sub

        Sub ContentHashRowsApply(Byref SecureID As Integer, ByRef L As Dictionary(Of String, String), ByVal CS As String)
            Dim rc As Boolean = False
            Dim CN As New SqlConnection(CS)
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()
            Dim BB As Boolean = True
            Dim SourceGuid As String = ""
            Dim tHash As String = ""
            Dim iCnt As Integer = 0


            Dim SkipTo As Integer = 215035

            Dim UpdateSql As String = ""
            Dim B As Boolean = True
            For I As Integer = SkipTo To L.Count - 1
                'Application.DoEvents()
                Try
                    SourceGuid = L.Keys(I)
                    tHash = L.Values(I)
                    UpdateSql = "Update DataSource set RecHash = '" + tHash + "' where SourceGuid = '" + SourceGuid + "'"

                    Try
                        B = True
                        dbCmd.CommandText = UpdateSql
                        dbCmd.ExecuteNonQuery()
                    Catch ex As Exception
                        Console.WriteLine(ex.Message)
                        B = False
                    End Try

                    If Not B Then
                        Console.WriteLine("ERROR: " + UpdateSql)
                    End If
                    iCnt += 1
                    If I Mod 10 = 0 Then
                        'FrmMDIMain.SB4.Text = "** " + I.ToString
                        'Application.DoEvents()
                    End If
                Catch ex As Exception
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR 100 - EmailHashRowsApply: " + ex.Message + vbCrLf + UpdateSql)
                    B = False
                End Try
            Next
            If B = True Then
                L.Clear()
            End If

            CN.Close()
            CN.Dispose()
        End Sub

        Sub ContentAddHash(Byref SecureID As Integer, ByVal SourceGuid As String, ByVal tHash As String)

            Dim CS As String = getConnStr(SecureID)
            Dim CN As New SqlConnection(CS)
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()
            Dim BB As Boolean = True
            Dim iCnt As Integer = 0

            Dim UpdateSql As String = "Update DataSource set RecHash = '" + tHash + "' where SourceGuid = '" + SourceGuid + "'"

            Dim B As Boolean = True
            Try
                B = True
                dbCmd.CommandText = UpdateSql
                dbCmd.ExecuteNonQuery()
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR: ContentHashRowsApply - 100 " + UpdateSql)
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: ContentHashRowsApply - 200 " + ex.Message + vbCrLf + UpdateSql)
                B = False
            End Try

            CN.Close()
            CN.Dispose()
        End Sub
        Sub EmailAddHash(Byref SecureID As Integer, ByVal EmailGuid As String, ByVal tHash As String)

            Dim CS As String = getConnStr(SecureID)
            Dim CN As New SqlConnection(CS)
            CN.Open()
            Dim dbCmd As SqlCommand = CN.CreateCommand()
            Dim BB As Boolean = True
            Dim iCnt As Integer = 0

            Dim UpdateSql As String = "Update Email set RecHash = '" + tHash + "' where EmailGuid = '" + EmailGuid + "'"

            Dim B As Boolean = True
            Try
                B = True
                dbCmd.CommandText = UpdateSql
                dbCmd.ExecuteNonQuery()
                If Not B Then
                    LogMessage(SecureID,gCurrUserGuidID, "ERROR: EmailHashRowsApply - 100 " + UpdateSql)
                End If
            Catch ex As Exception
                LogMessage(SecureID,gCurrUserGuidID, "ERROR: EmailHashRowsApply - 200 " + ex.Message + vbCrLf + UpdateSql)
                B = False
            End Try

            CN.Close()
            CN.Dispose()
        End Sub

        Sub addEmailHashKey(Byref SecureID As Integer, ByVal EmailGuid As String, _
        ByVal subject As String, _
        ByVal body As String, _
        ByVal CreationTime As String, _
        ByVal SenderEmailAddress As String, _
        ByVal nbrAttachments As String, _
        ByVal SourceTypeCode As String)

            Dim tHash As String = KGEN.genHashEmail(subject, body, SenderEmailAddress, CreationTime, nbrAttachments, SourceTypeCode)
            EmailAddHash(SecureID, EmailGuid, tHash)

        End Sub

        Sub addContentHashKey(Byref SecureID As Integer, ByVal SourceGuid As String, _
        ByVal VersionNbr As String, _
        ByVal CreateDate As String, _
        ByVal SourceName As String, _
        ByVal OriginalFileType As String, _
        ByVal FileLength As String, _
        ByVal CRC As String)

            Dim tHash As String = KGEN.genHashContent(CreateDate, SourceName, OriginalFileType, FileLength, CRC)
            ContentAddHash(SecureID, SourceGuid, tHash)

        End Sub

        Protected Overrides Sub Finalize()
            KGEN = Nothing
            MyBase.Finalize()
        End Sub

        Sub CleanUpEmailFolders(Byref SecureID As Integer)

            Dim S As String = ""
            S = S + "         DELETE"
            S = S + "         FROM EmailFolder "
            S = S + " WHERE nRowID NOT IN"
            S = S + " ("
            S = S + " Select Max(nRowID)"
            S = S + " FROM EmailFolder"
            S = S + " GROUP BY userid, folderid"
            S = S + " )"

            Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)

            S = ""
            S = S + " delete from EmailArchParms "
            S = S + " where FolderName not in (select FolderName from EmailFolder)"

            B = ExecuteSqlNewConn(SecureID, S)

        End Sub

        Function bFileNameExists(Byref SecureID As Integer, ByVal SourceName As String) As Boolean
            Dim B As Boolean = True
            Dim I As Integer = 0
            Dim S As String = ""
            S = S + " SELECT count(*) from DataSource where SourceName = '" + SourceName + "'"
            I = iCount(Secureid,S)
            If I > 0 Then
                B = True
            Else
                B = False
            End If
            Return B
        End Function

        Function bIdenticalFile(Byref SecureID As Integer, ByVal SourceName As String, _
        ByVal CRC As String, _
        ByVal CreateDate As String, _
        ByVal LastAccessDate As String, _
        ByVal FileLength As Integer) As Boolean

            Dim B As Boolean = True

            B = bFileNameExists(SecureID, SourceName)
            If B = False Then
                '** the file does not exist.
                Return B
            End If

            '** The file does exist, verify wherther it is a duplicate file or not

            Return B
        End Function

        Sub GetParmValue(Byref SecureID As Integer, ByVal UID As String, ByRef Parms As List(Of String))

            Parms.Clear()
            Dim tVal As String = ""
            Dim tParm As String = ""

            If UID$.Length = 0 Then
                Return
            End If

            Try
                Try
                    Dim s As String = "Select [Parm],[ParmValue],[UserID] FROM  [RunParms] Where UserID = '" + UID + "' "
                    Dim rsData As SqlDataReader = Nothing
                    Dim b As Boolean = False
                    Dim CS As String = getConnStr(SecureID)
                    Dim CONN As New SqlConnection(CS)
                    CONN.Open()
                    Dim command As New SqlCommand(s, CONN)
                    rsData = command.ExecuteReader()
                    If rsData.HasRows Then
                        Do While rsData.Read
                            rsData.Read()
                            tParm = rsData.GetValue(0).ToString
                            tVal = rsData.GetValue(1).ToString
                            Parms.Add(tParm.Trim + Chr(254) + tVal)
                        Loop

                    End If
                    If Not rsData.IsClosed Then
                        rsData.Close()
                    End If
                    rsData = Nothing
                Catch ex As Exception
                    Debug.Print(ex.Message)
                    LogMessage(SecureID,gCurrUserGuidID, "clsDatabase : GetParmValue : 44 : " + ex.Message)
                    Parms.Clear()
                End Try
            Catch ex As Exception
                MsgBox("Error: 88.34.2 - " + ex.Message)
                LogMessage(SecureID,gCurrUserGuidID, "clsUserParms : GetParmValue : 45 : " + ex.Message)
                Parms.Clear()
            End Try

        End Sub

    Function PopulateEmailGridWithWeights(ByRef SecureID As Integer, ByVal UID As String, ByVal CallerName As String, _
                                            ByVal MySql$, ByVal nbrWeightMin As String, _
                                            ByVal StartingRow As Integer, _
                                            ByVal EndingRow As Integer, ByRef bFirstEmailSearchSubmit As Boolean, ByRef EmailRowCnt As Integer) As System.Collections.Generic.List(Of DS_EMAIL)

        'bFirstEmailSearchSubmit = False

        Dim ListOfEmails As New System.Collections.Generic.List(Of DS_EMAIL)

        Dim StartTime As Date = Now
        Dim ExtendTimeoutByCountSecs As Double = 120
        Dim ckWeights As Boolean = True
        Dim rsDataQry As SqlDataReader = Nothing

        Dim RANK As Integer = 0
        Dim SentOn As Date = Nothing
        Dim ShortSubj As String = ""
        Dim SenderEmailAddress As String = ""
        Dim SenderName As String = ""
        Dim SentTO As String = ""
        Dim Body As String = ""
        Dim CC As String = ""
        Dim Bcc As String = ""
        Dim CreationTime As Date = Nothing
        Dim AllRecipients As String = ""
        Dim ReceivedByName As String = ""
        Dim ReceivedTime As Date = Nothing
        Dim MsgSize As Integer = 0
        Dim SUBJECT As String = ""
        Dim OriginalFolder As String = ""
        Dim EmailGuid As String = ""
        Dim RetentionExpirationDate As Date = Nothing
        Dim isPublic As String = ""
        Dim UserID As String = ""
        Dim SourceTypeCode As String = ""
        Dim NbrAttachments As Integer = 0
        Dim RID As String = ""
        Dim RepoSvrName As String = ""
        Dim ROWID As String = ""

        Try
            Dim CountSQL As String = GetRowCountSql(MySql)
            EmailRowCnt = iCount(SecureID, CountSQL)
        Catch ex As Exception
            EmailRowCnt = -1
        End Try

        Try
            'Dim BS As New BindingSource
            If dDebug Then
                LogMessage(SecureID, gCurrUserGuidID, "frmQuickSearch : PopulateEmailGrid : step 1")
            End If
            Dim CS As String = getConnStr(SecureID)

            '***********************************
            UTIL.ExtendTimeoutByCount(CS, ExtendTimeoutByCountSecs)
            '***********************************

            '**** Get the Attachments Here ****'

            'Dim sqlcn As New SqlConnection(CS)
            'Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
            'Dim ds As DataSet = New DataSet

            'If sqlcn.State = ConnectionState.Closed Then
            '    sqlcn.Open()
            'End If

            Dim CONN As New SqlConnection(CS)

            If CONN.State = ConnectionState.Closed Then
                CONN.Open()
            End If

            Dim command As New SqlCommand(MySql, CONN)
            Dim iCurrRow As Integer = 0

            If StartingRow > 20 Then
                EndingRow = StartingRow + 25
            End If

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read
                        iCurrRow += 1
                        If iCurrRow >= EndingRow Then
                            Exit Do
                        End If
                        If iCurrRow <= StartingRow Then
                            GoTo GetNextRecord
                        End If

                        'bFirstEmailSearchSubmit = True
                        Console.WriteLine("bFirstEmailSearchSubmit = " + bFirstEmailSearchSubmit.ToString)

                        Dim CD As New DS_EMAIL
                        Try
                            RANK = rsDataQry.GetInt32(0)
                        Catch ex As Exception
                            RANK = Nothing
                        End Try
                        Try
                            SentOn = rsDataQry.GetDateTime(1)
                        Catch ex As Exception
                            SentOn = Nothing
                        End Try
                        Try
                            ShortSubj = rsDataQry.GetValue(2).ToString
                        Catch ex As Exception
                            ShortSubj = ""
                        End Try
                        Try
                            SenderEmailAddress = rsDataQry.GetValue(3).ToString
                        Catch ex As Exception
                            SenderEmailAddress = ""
                        End Try
                        Try
                            SenderName = rsDataQry.GetValue(4).ToString
                        Catch ex As Exception
                            SenderName = ""
                        End Try
                        Try
                            SentTO = rsDataQry.GetValue(5).ToString
                        Catch ex As Exception
                            SentTO = ""
                        End Try
                        Try
                            Body = rsDataQry.GetValue(6).ToString
                        Catch ex As Exception
                            Body = ""
                        End Try
                        Try
                            CC = rsDataQry.GetValue(7).ToString
                        Catch ex As Exception
                            CC = ""
                        End Try
                        Try
                            Bcc = rsDataQry.GetValue(8).ToString
                        Catch ex As Exception
                            Bcc = ""
                        End Try
                        Try
                            CreationTime = rsDataQry.GetDateTime(9)
                        Catch ex As Exception
                            CreationTime = Nothing
                        End Try
                        Try
                            AllRecipients = rsDataQry.GetValue(10).ToString
                        Catch ex As Exception
                            AllRecipients = ""
                        End Try
                        Try
                            ReceivedByName = rsDataQry.GetValue(11).ToString
                        Catch ex As Exception
                            ReceivedByName = ""
                        End Try
                        Try
                            ReceivedTime = rsDataQry.GetDateTime(12)
                        Catch ex As Exception
                            ReceivedTime = Nothing
                        End Try
                        Try
                            MsgSize = rsDataQry.GetInt32(13)
                        Catch ex As Exception
                            MsgSize = Nothing
                        End Try
                        Try
                            SUBJECT = rsDataQry.GetValue(14).ToString
                        Catch ex As Exception
                            SUBJECT = ""
                        End Try
                        Try
                            OriginalFolder = rsDataQry.GetValue(15).ToString
                        Catch ex As Exception
                            OriginalFolder = ""
                        End Try
                        Try
                            EmailGuid = rsDataQry.GetValue(16).ToString
                        Catch ex As Exception
                            EmailGuid = ""
                        End Try
                        Try
                            RetentionExpirationDate = rsDataQry.GetDateTime(17)
                        Catch ex As Exception
                            RetentionExpirationDate = Nothing
                        End Try
                        Try
                            isPublic = rsDataQry.GetValue(18).ToString
                        Catch ex As Exception
                            isPublic = ""
                        End Try
                        Try
                            UserID = rsDataQry.GetValue(19).ToString
                        Catch ex As Exception
                            UserID = ""
                        End Try
                        Try
                            SourceTypeCode = rsDataQry.GetValue(20).ToString
                        Catch ex As Exception
                            SourceTypeCode = ""
                        End Try
                        Try
                            NbrAttachments = rsDataQry.GetInt32(21)
                        Catch ex As Exception
                            NbrAttachments = Nothing
                        End Try
                        Try
                            RID = rsDataQry.GetValue(22).ToString
                        Catch ex As Exception
                            RID = ""
                        End Try
                        Try
                            RepoSvrName = rsDataQry.GetValue(23).ToString
                        Catch ex As Exception
                            RepoSvrName = ""
                        End Try
                        Try
                            ROWID = rsDataQry.GetValue(24).ToString
                        Catch ex As Exception
                            ROWID = ""
                        End Try


                        CD.RANK = RANK
                        CD.SentOn = SentOn
                        CD.ShortSubj = ShortSubj
                        CD.SenderEmailAddress = SenderEmailAddress
                        CD.SenderName = SenderName
                        CD.SentTO = SentTO
                        CD.Body = Body
                        CD.CC = CC
                        CD.Bcc = Bcc
                        CD.CreationTime = CreationTime
                        CD.AllRecipients = AllRecipients
                        CD.ReceivedByName = ReceivedByName
                        CD.ReceivedTime = ReceivedTime
                        CD.MsgSize = MsgSize
                        CD.SUBJECT = SUBJECT
                        CD.OriginalFolder = OriginalFolder
                        CD.EmailGuid = EmailGuid
                        CD.RetentionExpirationDate = RetentionExpirationDate
                        CD.isPublic = isPublic
                        CD.UserID = UserID
                        CD.SourceTypeCode = SourceTypeCode
                        CD.NbrAttachments = NbrAttachments
                        CD.RID = RID
                        CD.RepoSvrName = RepoSvrName
                        CD.ROWID = ROWID
                        ListOfEmails.Add(CD)
GetNextRecord:
                    Loop
                End If

            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:getCourseData", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:getCourseData", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:getCourseData", MySql)
            Finally
                If rsDataQry IsNot Nothing Then
                    If Not rsDataQry.IsClosed Then
                        rsDataQry.Close()
                    End If
                    rsDataQry = Nothing
                End If
                command.Dispose()
                command = Nothing
            End Try

            Dim Weight As String = nbrWeightMin

            If bFirstEmailSearchSubmit Then
                MergeEmailAttachments(SecureID, UID, ListOfEmails, ckWeights, Weight, gPaginateData, StartingRow, EndingRow)
                bFirstEmailSearchSubmit = False
            End If


            Dim SHIST As New clsSEARCHHISTORY(SecureID)
            SHIST.setCalledfrom(CallerName)
            SHIST.setEndtime(Now.ToString)
            SHIST.setReturnedrows(ListOfEmails.Count.ToString)
            SHIST.setTypesearch("EMAIL")
            SHIST.setStarttime(StartTime.ToString)
            SHIST.setSearchdate(Now.ToString)
            SHIST.setSearchsql(MySql)
            SHIST.setUserid(gCurrUserGuidID)
            Dim b As Boolean = SHIST.Insert
            SHIST = Nothing

            If Not b Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 1943.23b - Failed to save history of search.")
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Search Query Please resubmit search: Notification 165.4d07: " + ex.Message)
            ListOfEmails = Nothing
        End Try

        Return ListOfEmails

    End Function

    Function PopulateEmailGridWithNoWeights(ByRef SecureID As Integer, ByVal UID As String, _
        ByVal CallerName As String, _
        ByVal MySql As String, _
        ByVal StartingRow As Integer, _
        ByVal EndingRow As Integer, ByRef bNewEmailSearchSubmit As Boolean, ByRef EmailRowCnt As Integer) As System.Collections.Generic.List(Of DS_EMAIL)

        Dim ListOfEmails As New System.Collections.Generic.List(Of DS_EMAIL)

        Dim StartTime As Date = Now
        Dim ExtendTimeoutByCountSecs As Double = 120
        Dim ckWeights As Boolean = True
        Dim rsDataQry As SqlDataReader = Nothing

        Dim SentOn As Date = Nothing
        Dim ShortSubj As String = ""
        Dim SenderEmailAddress As String = ""
        Dim SenderName As String = ""
        Dim SentTO As String = ""
        Dim Body As String = ""
        Dim CC As String = ""
        Dim Bcc As String = ""
        Dim CreationTime As Date = Nothing
        Dim AllRecipients As String = ""
        Dim ReceivedByName As String = ""
        Dim ReceivedTime As Date = Nothing
        Dim MsgSize As Integer = 0
        Dim SUBJECT As String = ""
        Dim OriginalFolder As String = ""
        Dim EmailGuid As String = ""
        Dim RetentionExpirationDate As Date = Nothing
        Dim isPublic As String = ""
        Dim UserID As String = ""
        Dim SourceTypeCode As String = ""
        Dim NbrAttachments As Integer = 0
        Dim RID As String = ""
        Dim RepoSvrName As String = ""
        Dim ROWID As String = ""
        Dim RANK As Integer = 0

        Dim command As New SqlCommand

        Try
            Dim CountSQL As String = GetRowCountSql(MySql)
            EmailRowCnt = iCount(SecureID, CountSQL)
        Catch ex As Exception
            EmailRowCnt = -1
        End Try

        Try

            Dim CS As String = getConnStr(SecureID)

            '***********************************
            UTIL.ExtendTimeoutByCount(CS, ExtendTimeoutByCountSecs)
            '***********************************

            'Dim sqlcn As New SqlConnection(CS)
            'Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
            'Dim ds As DataSet = New DataSet

            'If sqlcn.State = ConnectionState.Closed Then
            '    sqlcn.Open()
            'End If

            Dim CONN As New SqlConnection(CS)

            If CONN.State = ConnectionState.Closed Then
                CONN.Open()
            End If

            Dim iCurrRow As Integer = 0
            command.CommandText = MySql
            command.Connection = CONN

            If StartingRow > 20 Then
                EndingRow = StartingRow + 25
            End If

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    If rsDataQry.IsClosed Then
                        xTrace(SecureID, 1010, "clsDataBase:PopulateEmailGridWithNoWeights", "UserID: " + UID + " / DATA READ LOCKOUOT, Attempting to reopen.")
                        command.ExecuteReader()
                        If Not rsDataQry.IsClosed Then
                            xTrace(SecureID, 1011, "clsDataBase:PopulateEmailGridWithNoWeights", "UserID: " + UID + " / REOPEN Successful.")
                        Else
                            xTrace(SecureID, 1011, "clsDataBase:PopulateEmailGridWithNoWeights", "UserID: " + UID + " / REOPEN FAILED.")
                            GoTo GetNextRecord
                        End If
                    End If
                    Do While rsDataQry.Read
                        iCurrRow += 1
                        If iCurrRow > EndingRow Then
                            Exit Do
                        End If
                        If iCurrRow < StartingRow Then
                            GoTo GetNextRecord
                        End If

                        'bNewEmailSearchSubmit = True
                        bNewEmailSearchSubmit = False

                        Dim CD As New DS_EMAIL

                        Try
                            SentOn = rsDataQry.GetDateTime(0)
                        Catch ex As Exception
                            SentOn = Nothing
                        End Try
                        Try
                            ShortSubj = rsDataQry.GetValue(1).ToString
                        Catch ex As Exception
                            ShortSubj = ""
                        End Try
                        Try
                            SenderEmailAddress = rsDataQry.GetValue(2).ToString
                        Catch ex As Exception
                            SenderEmailAddress = ""
                        End Try
                        Try
                            SenderName = rsDataQry.GetValue(3).ToString
                        Catch ex As Exception
                            SenderName = ""
                        End Try
                        Try
                            SentTO = rsDataQry.GetValue(4).ToString
                        Catch ex As Exception
                            SentTO = ""
                        End Try
                        Try
                            Body = rsDataQry.GetValue(5).ToString
                        Catch ex As Exception
                            Body = ""
                        End Try
                        Try
                            CC = rsDataQry.GetValue(6).ToString
                        Catch ex As Exception
                            CC = ""
                        End Try
                        Try
                            Bcc = rsDataQry.GetValue(7).ToString
                        Catch ex As Exception
                            Bcc = ""
                        End Try
                        Try
                            CreationTime = rsDataQry.GetDateTime(8)
                        Catch ex As Exception
                            CreationTime = Nothing
                        End Try
                        Try
                            AllRecipients = rsDataQry.GetValue(9).ToString
                        Catch ex As Exception
                            AllRecipients = ""
                        End Try
                        Try
                            ReceivedByName = rsDataQry.GetValue(10).ToString
                        Catch ex As Exception
                            ReceivedByName = ""
                        End Try
                        Try
                            ReceivedTime = rsDataQry.GetDateTime(11)
                        Catch ex As Exception
                            ReceivedTime = Nothing
                        End Try
                        Try
                            MsgSize = rsDataQry.GetInt32(12)
                        Catch ex As Exception
                            MsgSize = Nothing
                        End Try
                        Try
                            SUBJECT = rsDataQry.GetValue(13).ToString
                        Catch ex As Exception
                            SUBJECT = ""
                        End Try
                        Try
                            OriginalFolder = rsDataQry.GetValue(14).ToString
                        Catch ex As Exception
                            OriginalFolder = ""
                        End Try
                        Try
                            EmailGuid = rsDataQry.GetValue(15).ToString
                        Catch ex As Exception
                            EmailGuid = ""
                        End Try
                        Try
                            RetentionExpirationDate = rsDataQry.GetDateTime(16)
                        Catch ex As Exception
                            RetentionExpirationDate = Nothing
                        End Try
                        Try
                            isPublic = rsDataQry.GetValue(17).ToString
                        Catch ex As Exception
                            isPublic = ""
                        End Try
                        Try
                            UserID = rsDataQry.GetValue(18).ToString
                        Catch ex As Exception
                            UserID = ""
                        End Try
                        Try
                            SourceTypeCode = rsDataQry.GetValue(19).ToString
                        Catch ex As Exception
                            SourceTypeCode = ""
                        End Try
                        Try
                            NbrAttachments = rsDataQry.GetInt32(20)
                        Catch ex As Exception
                            NbrAttachments = Nothing
                        End Try
                        Try
                            RID = rsDataQry.GetValue(21).ToString
                        Catch ex As Exception
                            RID = ""
                        End Try
                        Try
                            RepoSvrName = rsDataQry.GetValue(22).ToString
                        Catch ex As Exception
                            RepoSvrName = ""
                        End Try
                        Try
                            Dim O As Integer = rsDataQry.Item("ROWID")
                            'ROWID = rsDataQry.GetValue(23).ToString
                            ROWID = CInt(O)
                        Catch ex As Exception
                            ROWID = ""
                        End Try
                        Try
                            Dim O As Integer = rsDataQry.Item("RANK")
                            'RANK = rsDataQry.GetValue(24).ToString
                            RANK = CInt(O)
                        Catch ex As Exception
                            RANK = 0
                        End Try


                        CD.SentOn = SentOn
                        CD.ShortSubj = ShortSubj
                        CD.SenderEmailAddress = SenderEmailAddress
                        CD.SenderName = SenderName
                        CD.SentTO = SentTO
                        CD.Body = Body
                        CD.CC = CC
                        CD.Bcc = Bcc
                        CD.CreationTime = CreationTime
                        CD.AllRecipients = AllRecipients
                        CD.ReceivedByName = ReceivedByName
                        CD.ReceivedTime = ReceivedTime
                        CD.MsgSize = MsgSize
                        CD.SUBJECT = SUBJECT
                        CD.OriginalFolder = OriginalFolder
                        CD.EmailGuid = EmailGuid
                        CD.RetentionExpirationDate = RetentionExpirationDate
                        CD.isPublic = isPublic
                        CD.UserID = UserID
                        CD.SourceTypeCode = SourceTypeCode
                        CD.NbrAttachments = NbrAttachments
                        CD.RID = RID
                        CD.RepoSvrName = RepoSvrName
                        CD.ROWID = ROWID
                        CD.RANK = RANK
                        ListOfEmails.Add(CD)
GetNextRecord:
                    Loop
                End If

            Catch ex As Exception
                xTrace(SecureID, 1000, "clsDataBase:PopulateEmailGridWithNoWeights", "UserID: " + UID)
                xTrace(SecureID, 1001, "clsDataBase:PopulateEmailGridWithNoWeights", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:PopulateEmailGridWithNoWeights", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:PopulateEmailGridWithNoWeights", MySql)
            Finally
                If rsDataQry IsNot Nothing Then
                    If Not rsDataQry.IsClosed Then
                        rsDataQry.Close()
                    End If
                    rsDataQry = Nothing
                End If
                command.Dispose()
                command = Nothing
            End Try

            Dim Weight As String = 0
            MergeEmailAttachments(SecureID, UID, ListOfEmails, False, Weight, gPaginateData, StartingRow, EndingRow)

            Dim SHIST As New clsSEARCHHISTORY(SecureID)
            SHIST.setCalledfrom(CallerName)
            SHIST.setEndtime(Now.ToString)
            SHIST.setReturnedrows(ListOfEmails.Count.ToString)
            SHIST.setTypesearch("EMAIL")
            SHIST.setStarttime(StartTime.ToString)
            SHIST.setSearchdate(Now.ToString)
            SHIST.setSearchsql(MySql)
            SHIST.setUserid(gCurrUserGuidID)
            Dim b As Boolean = SHIST.Insert
            SHIST = Nothing

            If Not b Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 1943.23b - Failed to save history of search.")
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Search Query Please resubmit search: Notification 165.4d01: " + ex.Message)
            ListOfEmails = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
        End Try

        GC.Collect()
        GC.WaitForFullGCComplete()

        Return ListOfEmails

    End Function

    Sub MergeEmailAttachments(ByRef SecureID As Integer, ByVal UID As String, ByRef ListOfEmails As List(Of DS_EMAIL), _
        ByVal ckWeights As Boolean, ByVal Weight As String, _
        ByVal PaginateData As Boolean, ByVal LowerPageNbr As Integer, ByVal UpperPageNbr As Integer)

        If PaginateData = True And LowerPageNbr > 1 Then
            Return
        End If

        'Dim ListOfEmails As New DS_EMAIL

        Dim S$ = ""
        If ckWeights = True Then
            If PaginateData = True Then
                '** View 01
                S = S + " SELECT     EmailAttachmentSearchList.Weight AS RANK, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc, " + vbCrLf
                S = S + "                       Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid, " + vbCrLf
                S = S + "                       Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment, " + vbCrLf
                S = S + "                       CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName, 9999999 as RowID  " + vbCrLf
                S = S + " FROM         Email INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID" + vbCrLf
                S = S + " WHERE     (EmailAttachmentSearchList.UserID = '" + UID + "')" + vbCrLf
            Else
                '** View 02
                S = "Select     EmailAttachmentSearchList.Weight AS RANK, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, "
                S = S + "                       SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc, Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, "
                S = S + "                       Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid, Email.RetentionExpirationDate, Email.isPublic, ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, "
                S = S + "                       Email.SourceTypeCode, 'Y' AS FoundInAttachment, CONVERT(varchar, EmailAttachment.RowID) AS RID"
                S = S + " FROM         Email INNER JOIN"
                S = S + "                       EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN"
                S = S + "                       EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID"
                S = S + " WHERE     (EmailAttachmentSearchList.UserID = '" + UID + "') AND (EmailAttachmentSearchList.Weight >= 0)"
            End If
        Else
            If PaginateData = True Then
                '** View 03
                S = S + " SELECT     -1 as Rank, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc, " + vbCrLf
                S = S + "                       Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid, " + vbCrLf
                S = S + "                       Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment, " + vbCrLf
                S = S + "                       CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName, 9999999 as RowID  " + vbCrLf
                S = S + " FROM         Email INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID" + vbCrLf
                S = S + " WHERE     (EmailAttachmentSearchList.UserID = '" + UID + "')" + vbCrLf
            Else
                '** View 04
                S = S + " SELECT     -1 as Rank, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc, " + vbCrLf
                S = S + "                       Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid, " + vbCrLf
                S = S + "                       Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment, " + vbCrLf
                S = S + "                       CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName  " + vbCrLf
                S = S + " FROM         Email INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN" + vbCrLf
                S = S + "                       EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID" + vbCrLf
                S = S + " WHERE     (EmailAttachmentSearchList.UserID = '" + UID + "')" + vbCrLf
            End If
        End If


        Dim rsDataQry As SqlDataReader = Nothing

        Dim RANK As Integer = 0
        Dim SentOn As Date = Nothing
        Dim ShortSubj As String = ""
        Dim SenderEmailAddress As String = ""
        Dim SenderName As String = ""
        Dim SentTO As String = ""
        Dim Body As String = ""
        Dim CC As String = ""
        Dim Bcc As String = ""
        Dim CreationTime As Date = Nothing
        Dim AllRecipients As String = ""
        Dim ReceivedByName As String = ""
        Dim ReceivedTime As Date = Nothing
        Dim MsgSize As Integer = 0
        Dim SUBJECT As String = ""
        Dim OriginalFolder As String = ""
        Dim EmailGuid As String = ""
        Dim RetentionExpirationDate As Date = Nothing
        Dim isPublic As String = ""
        Dim ConvertEmailToMsg As String = ""
        Dim UserID As String = ""
        Dim NbrAttachments As Integer = 0
        Dim SourceTypeCode As String = ""
        Dim FoundInAttachment As String = "Y"
        Dim RID As String = ""
        Dim RepoSvrName As String = ""
        Dim RowID As Integer = 0

        Dim CS As String = getConnStr(SecureID)

        '***********************************
        UTIL.ExtendTimeoutByCount(CS, 90)
        '***********************************

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If
        Dim iCnt As Integer = 0
        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read
                    iCnt += 1
                    Dim CD As New DS_EMAIL

                    Try
                        RANK = rsDataQry.GetInt32(0)
                    Catch ex As Exception
                        RANK = 0
                    End Try
                    Try
                        SentOn = rsDataQry.GetDateTime(1)
                    Catch ex As Exception
                        SentOn = Nothing
                    End Try
                    Try
                        ShortSubj = rsDataQry.GetValue(2).ToString
                    Catch ex As Exception
                        ShortSubj = ""
                    End Try
                    Try
                        SenderEmailAddress = rsDataQry.GetValue(3).ToString
                    Catch ex As Exception
                        SenderEmailAddress = ""
                    End Try
                    Try
                        SenderName = rsDataQry.GetValue(4).ToString
                    Catch ex As Exception
                        SenderName = ""
                    End Try
                    Try
                        SentTO = rsDataQry.GetValue(5).ToString
                    Catch ex As Exception
                        SentTO = ""
                    End Try
                    Try
                        Body = rsDataQry.GetValue(6).ToString
                    Catch ex As Exception
                        Body = ""
                    End Try
                    Try
                        CC = rsDataQry.GetValue(7).ToString
                    Catch ex As Exception
                        CC = ""
                    End Try
                    Try
                        Bcc = rsDataQry.GetValue(8).ToString
                    Catch ex As Exception
                        Bcc = ""
                    End Try
                    Try
                        CreationTime = rsDataQry.GetDateTime(9)
                    Catch ex As Exception
                        CreationTime = Nothing
                    End Try
                    Try
                        AllRecipients = rsDataQry.GetValue(10).ToString
                    Catch ex As Exception
                        AllRecipients = ""
                    End Try
                    Try
                        ReceivedByName = rsDataQry.GetValue(11).ToString
                    Catch ex As Exception
                        ReceivedByName = ""
                    End Try
                    Try
                        ReceivedTime = rsDataQry.GetDateTime(12)
                    Catch ex As Exception
                        ReceivedTime = Nothing
                    End Try
                    Try
                        MsgSize = rsDataQry.GetInt32(13)
                    Catch ex As Exception
                        MsgSize = Nothing
                    End Try
                    Try
                        SUBJECT = rsDataQry.GetValue(14).ToString
                    Catch ex As Exception
                        SUBJECT = ""
                    End Try
                    Try
                        OriginalFolder = rsDataQry.GetValue(15).ToString
                    Catch ex As Exception
                        OriginalFolder = ""
                    End Try
                    Try
                        EmailGuid = rsDataQry.GetValue(16).ToString
                    Catch ex As Exception
                        EmailGuid = ""
                    End Try
                    Try
                        RetentionExpirationDate = rsDataQry.GetDateTime(17)
                    Catch ex As Exception
                        RetentionExpirationDate = Nothing
                    End Try
                    Try
                        isPublic = rsDataQry.GetValue(18).ToString
                    Catch ex As Exception
                        isPublic = ""
                    End Try
                    Try
                        ConvertEmailToMsg = rsDataQry.GetValue(19).ToString
                    Catch ex As Exception
                        ConvertEmailToMsg = ""
                    End Try
                    Try
                        UserID = rsDataQry.GetValue(20).ToString
                    Catch ex As Exception
                        UserID = ""
                    End Try
                    Try
                        NbrAttachments = rsDataQry.GetInt32(21)
                    Catch ex As Exception
                        NbrAttachments = Nothing
                    End Try
                    Try
                        SourceTypeCode = rsDataQry.GetValue(22).ToString
                    Catch ex As Exception
                        SourceTypeCode = ""
                    End Try
                    Try
                        FoundInAttachment = rsDataQry.GetValue(23).ToString
                    Catch ex As Exception
                        FoundInAttachment = ""
                    End Try
                    Try
                        RID = rsDataQry.GetValue(24).ToString
                    Catch ex As Exception
                        RID = ""
                    End Try
                    Try
                        RepoSvrName = rsDataQry.GetValue(25).ToString
                    Catch ex As Exception
                        RepoSvrName = ""
                    End Try
                    Try
                        RowID = rsDataQry.GetInt32(26)
                    Catch ex As Exception
                        RowID = Nothing
                    End Try

                    CD.RANK = RANK
                    CD.SentOn = SentOn
                    CD.ShortSubj = ShortSubj
                    CD.SenderEmailAddress = SenderEmailAddress
                    CD.SenderName = SenderName
                    CD.SentTO = SentTO
                    CD.Body = Body
                    CD.CC = CC
                    CD.Bcc = Bcc
                    CD.CreationTime = CreationTime
                    CD.AllRecipients = AllRecipients
                    CD.ReceivedByName = ReceivedByName
                    CD.ReceivedTime = ReceivedTime
                    CD.MsgSize = MsgSize
                    CD.SUBJECT = SUBJECT
                    CD.OriginalFolder = OriginalFolder
                    CD.EmailGuid = EmailGuid
                    CD.RetentionExpirationDate = RetentionExpirationDate
                    CD.isPublic = isPublic
                    'CD.ConvertEmailToMsg = ConvertEmailToMsg
                    CD.UserID = UserID
                    CD.NbrAttachments = NbrAttachments
                    CD.SourceTypeCode = SourceTypeCode
                    If FoundInAttachment.ToUpper.Equals("Y") Then
                        CD.FoundInAttach = 1
                    ElseIf FoundInAttachment.ToUpper.Equals("N") Then
                        CD.FoundInAttach = 0
                    Else
                        CD.FoundInAttach = 1
                    End If

                    CD.RID = RID
                    CD.RepoSvrName = RepoSvrName
                    CD.ROWID = RowID

                    ListOfEmails.Add(CD)

                Loop
            End If
            Console.WriteLine("Attachments Found: " + iCnt.ToString)
        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateEmailGridWithNoWeights", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateEmailGridWithNoWeights", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateEmailGridWithNoWeights", S)
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try


    End Sub

    Function PopulateSourceGridWithWeights(Byref SecureID As Integer, ByVal StartingRow As Integer, ByVal EndingRow As Integer, ByVal CallerName As String, _
        ByVal MySql As String, ByRef bNewRows As Boolean, ByRef SourceRowCnt As Integer) As List(Of DS_CONTENT)

        bNewRows = False

        Dim ListOfRowsWithWeights As New System.Collections.Generic.List(Of DS_CONTENT)

        Dim StartTime As Date = Now
        Dim ExtendTimeoutByCountSecs As Double = 120
        Dim ckWeights As Boolean = True
        Dim rsDataQry As SqlDataReader = Nothing

        Dim RANK As Integer = 0
        Dim SourceName As String = ""
        Dim CreateDate As Date = Nothing
        Dim VersionNbr As Integer = 0
        Dim LastAccessDate As Date = Nothing
        Dim FileLength As Integer = 0
        Dim LastWriteTime As Date = Nothing
        Dim OriginalFileType As String = ""
        Dim isPublic As String = ""
        Dim FQN As String = ""
        Dim SourceGuid As String = ""
        Dim DataSourceOwnerUserID As String = ""
        Dim FileDirectory As String = ""
        Dim RetentionExpirationDate As Date = Nothing
        Dim isMaster As String = ""
        Dim StructuredData As Boolean = False
        Dim RepoSvrName As String = ""
        Dim ROWID As String = ""

        Try
            Dim CountSQL As String = GetRowCountSql(MySql)
            SourceRowCnt = iCount(SecureID, CountSQL)
        Catch ex As Exception
            SourceRowCnt = -1
        End Try

        Try

            Dim CS As String = getConnStr(SecureID)

            '***********************************
            UTIL.ExtendTimeoutByCount(CS, ExtendTimeoutByCountSecs)
            '***********************************

            'Dim sqlcn As New SqlConnection(CS)
            'Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
            'Dim ds As DataSet = New DataSet

            'If sqlcn.State = ConnectionState.Closed Then
            '    sqlcn.Open()
            'End If

            Dim CONN As New SqlConnection(CS)

            If CONN.State = ConnectionState.Closed Then
                CONN.Open()
            End If

            Dim command As New SqlCommand(MySql, CONN)
            Dim iCurrRow As Integer = 0

            If StartingRow > 20 Then
                EndingRow = StartingRow + 25
            End If

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read
                        Dim CD As New DS_CONTENT

                        iCurrRow += 1
                        If iCurrRow > EndingRow Then
                            Exit Do
                        End If
                        If iCurrRow < StartingRow Then
                            GoTo GetNextRecord
                        End If
                        bNewRows = True

                        Try
                            RANK = rsDataQry.GetInt32(0)
                        Catch ex As Exception
                            RANK = Nothing
                        End Try
                        Try
                            SourceName = rsDataQry.GetValue(1).ToString
                        Catch ex As Exception
                            SourceName = ""
                        End Try
                        Try
                            CreateDate = rsDataQry.GetDateTime(2)
                        Catch ex As Exception
                            CreateDate = Nothing
                        End Try
                        Try
                            VersionNbr = rsDataQry.GetInt32(3)
                        Catch ex As Exception
                            VersionNbr = Nothing
                        End Try
                        Try
                            LastAccessDate = rsDataQry.GetDateTime(4)
                        Catch ex As Exception
                            LastAccessDate = Nothing
                        End Try
                        Try
                            FileLength = rsDataQry.GetInt32(5)
                        Catch ex As Exception
                            FileLength = Nothing
                        End Try
                        Try
                            LastWriteTime = rsDataQry.GetDateTime(6)
                        Catch ex As Exception
                            LastWriteTime = Nothing
                        End Try
                        Try
                            OriginalFileType = rsDataQry.GetValue(7).ToString
                        Catch ex As Exception
                            OriginalFileType = ""
                        End Try
                        Try
                            isPublic = rsDataQry.GetValue(8).ToString
                        Catch ex As Exception
                            isPublic = ""
                        End Try
                        Try
                            FQN = rsDataQry.GetValue(9).ToString
                        Catch ex As Exception
                            FQN = ""
                        End Try
                        Try
                            SourceGuid = rsDataQry.GetValue(10).ToString
                        Catch ex As Exception
                            SourceGuid = ""
                        End Try
                        Try
                            DataSourceOwnerUserID = rsDataQry.GetValue(11).ToString
                        Catch ex As Exception
                            DataSourceOwnerUserID = ""
                        End Try
                        Try
                            FileDirectory = rsDataQry.GetValue(12).ToString
                        Catch ex As Exception
                            FileDirectory = ""
                        End Try
                        Try
                            RetentionExpirationDate = rsDataQry.GetDateTime(13)
                        Catch ex As Exception
                            RetentionExpirationDate = Nothing
                        End Try
                        Try
                            isMaster = rsDataQry.GetValue(14).ToString
                        Catch ex As Exception
                            isMaster = ""
                        End Try
                        Try
                            StructuredData = rsDataQry.GetBoolean(15)
                        Catch ex As Exception
                            StructuredData = False
                        End Try
                        Try
                            RepoSvrName = rsDataQry.GetValue(16).ToString
                        Catch ex As Exception
                            RepoSvrName = ""
                        End Try
                        Try
                            ROWID = rsDataQry.GetValue(17).ToString
                        Catch ex As Exception
                            ROWID = ""
                        End Try


                        CD.RANK = RANK
                        CD.SourceName = SourceName
                        CD.CreateDate = CreateDate
                        CD.VersionNbr = VersionNbr
                        CD.LastAccessDate = LastAccessDate
                        CD.FileLength = FileLength
                        CD.LastWriteTime = LastWriteTime
                        CD.OriginalFileType = OriginalFileType
                        CD.isPublic = isPublic
                        CD.FQN = FQN
                        CD.SourceGuid = SourceGuid
                        CD.DataSourceOwnerUserID = DataSourceOwnerUserID
                        CD.FileDirectory = FileDirectory
                        CD.RetentionExpirationDate = RetentionExpirationDate
                        CD.isMaster = isMaster
                        CD.StructuredData = StructuredData
                        CD.RepoSvrName = RepoSvrName
                        CD.ROWID = ROWID

                        ListOfRowsWithWeights.Add(CD)
    GetNextRecord:
                    Loop
                End If

            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:PopulateSourceGridWithWeights", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:PopulateSourceGridWithWeights", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:PopulateSourceGridWithWeights", MySql)
            Finally
                If rsDataQry IsNot Nothing Then
                    If Not rsDataQry.IsClosed Then
                        rsDataQry.Close()
                    End If
                    rsDataQry = Nothing
                End If
                command.Dispose()
                command = Nothing
            End Try

            Dim Weight As String = 0

            Dim SHIST As New clsSEARCHHISTORY(SecureID)
            SHIST.setCalledfrom(CallerName)
            SHIST.setEndtime(Now.ToString)
            SHIST.setReturnedrows(ListOfRowsWithWeights.Count.ToString)
            SHIST.setTypesearch("CONTENT")
            SHIST.setStarttime(StartTime.ToString)
            SHIST.setSearchdate(Now.ToString)
            SHIST.setSearchsql(MySql)
            SHIST.setUserid(gCurrUserGuidID)
            Dim b As Boolean = SHIST.Insert
            SHIST = Nothing

            If Not b Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 1943.23b - Failed to save history of search.")
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Search Query Please resubmit search: Notification 165.4d02: " + ex.Message)
            ListOfRowsWithWeights = Nothing
        End Try

        Return ListOfRowsWithWeights


    End Function

    Function PopulateSourceGridNoWeights(Byref SecureID As Integer, ByVal StartingRow As Integer, ByVal EndingRow As Integer, ByVal CallerName As String, ByVal MySql As String, ByRef bNewRows As Boolean, ByRef SourceRowCnt As Integer) As System.Collections.Generic.List(Of DS_CONTENT)

        bNewRows = False

        Dim ListOfRowsNoWeights As New System.Collections.Generic.List(Of DS_CONTENT)

        Dim StartTime As Date = Now
        Dim ExtendTimeoutByCountSecs As Double = 120
        Dim ckWeights As Boolean = True
        Dim rsDataQry As SqlDataReader = Nothing

        Dim SourceName As String = ""
        Dim CreateDate As Date = Nothing
        Dim VersionNbr As Integer = 0
        Dim LastAccessDate As Date = Nothing
        Dim FileLength As Integer = 0
        Dim LastWriteTime As Date = Nothing
        Dim SourceTypeCode As String = ""
        Dim isPublic As String = ""
        Dim FQN As String = ""
        Dim SourceGuid As String = ""
        Dim DataSourceOwnerUserID As String = ""
        Dim FileDirectory As String = ""
        Dim StructuredData As Boolean = False
        Dim RepoSvrName As String = ""
        Dim ROWID As String = ""

        Try
            Dim CountSQL As String = GetRowCountSql(MySql)
            SourceRowCnt = iCount(SecureID, CountSQL)
        Catch ex As Exception
            SourceRowCnt = -1
        End Try

        Try

            Dim CS As String = getConnStr(SecureID)

            '***********************************
            UTIL.ExtendTimeoutByCount(CS, ExtendTimeoutByCountSecs)
            '***********************************

            'Dim sqlcn As New SqlConnection(CS)
            'Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
            'Dim ds As DataSet = New DataSet

            'If sqlcn.State = ConnectionState.Closed Then
            '    sqlcn.Open()
            'End If

            Dim CONN As New SqlConnection(CS)

            If CONN.State = ConnectionState.Closed Then
                CONN.Open()
            End If

           

            Dim command As New SqlCommand(MySql, CONN)
            Dim iCurrRow As Integer = 0

            If StartingRow > 20 Then
                EndingRow = StartingRow + 25
            End If

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read
                        Dim CD As New DS_CONTENT

                        iCurrRow += 1
                        If iCurrRow >= EndingRow Then
                            Exit Do
                        End If
                        If iCurrRow <= StartingRow Then
                            GoTo GetNextRecord
                        End If
                        bNewRows = True

                        Try
                            SourceName = rsDataQry.GetValue(0).ToString
                        Catch ex As Exception
                            SourceName = ""
                        End Try
                        Try
                            CreateDate = rsDataQry.GetDateTime(1)
                        Catch ex As Exception
                            CreateDate = Nothing
                        End Try
                        Try
                            VersionNbr = rsDataQry.GetInt32(2)
                        Catch ex As Exception
                            VersionNbr = Nothing
                        End Try
                        Try
                            LastAccessDate = rsDataQry.GetDateTime(3)
                        Catch ex As Exception
                            LastAccessDate = Nothing
                        End Try
                        Try
                            FileLength = rsDataQry.GetInt32(4)
                        Catch ex As Exception
                            FileLength = Nothing
                        End Try
                        Try
                            LastWriteTime = rsDataQry.GetDateTime(5)
                        Catch ex As Exception
                            LastWriteTime = Nothing
                        End Try
                        Try
                            SourceTypeCode = rsDataQry.GetValue(6).ToString
                        Catch ex As Exception
                            SourceTypeCode = ""
                        End Try
                        Try
                            isPublic = rsDataQry.GetValue(7).ToString
                        Catch ex As Exception
                            isPublic = ""
                        End Try
                        Try
                            FQN = rsDataQry.GetValue(8).ToString
                        Catch ex As Exception
                            FQN = ""
                        End Try
                        Try
                            SourceGuid = rsDataQry.GetValue(9).ToString
                        Catch ex As Exception
                            SourceGuid = ""
                        End Try
                        Try
                            DataSourceOwnerUserID = rsDataQry.GetValue(10).ToString
                        Catch ex As Exception
                            DataSourceOwnerUserID = ""
                        End Try
                        Try
                            FileDirectory = rsDataQry.GetValue(11).ToString
                        Catch ex As Exception
                            FileDirectory = ""
                        End Try
                        Try
                            StructuredData = rsDataQry.GetBoolean(12)
                        Catch ex As Exception
                            StructuredData = False
                        End Try
                        Try
                            RepoSvrName = rsDataQry.GetValue(13).ToString
                        Catch ex As Exception
                            RepoSvrName = ""
                        End Try
                        Try
                            ROWID = rsDataQry.GetValue(14).ToString
                        Catch ex As Exception
                            ROWID = ""
                        End Try


                        CD.SourceName = SourceName
                        CD.CreateDate = CreateDate
                        CD.VersionNbr = VersionNbr
                        CD.LastAccessDate = LastAccessDate
                        CD.FileLength = FileLength
                        CD.LastWriteTime = LastWriteTime
                        CD.OriginalFileType = SourceTypeCode
                        CD.isPublic = isPublic
                        CD.FQN = FQN
                        CD.SourceGuid = SourceGuid
                        CD.DataSourceOwnerUserID = DataSourceOwnerUserID
                        CD.FileDirectory = FileDirectory
                        CD.StructuredData = StructuredData
                        CD.RepoSvrName = RepoSvrName
                        CD.ROWID = ROWID
                        CD.RANK = 0

                        ListOfRowsNoWeights.Add(CD)
    GetNextRecord:
                    Loop
                End If

            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:PopulateSourceGridNoWeights", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:PopulateSourceGridNoWeights", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:PopulateSourceGridNoWeights", MySql)
            Finally
                If rsDataQry IsNot Nothing Then
                    If Not rsDataQry.IsClosed Then
                        rsDataQry.Close()
                    End If
                    rsDataQry = Nothing
                End If
                command.Dispose()
                command = Nothing
            End Try

            Dim Weight As String = 0

            Dim SHIST As New clsSEARCHHISTORY(SecureID)
            SHIST.setCalledfrom(CallerName)
            SHIST.setEndtime(Now.ToString)
            SHIST.setReturnedrows(ListOfRowsNoWeights.Count.ToString)
            SHIST.setTypesearch("CONTENT")
            SHIST.setStarttime(StartTime.ToString)
            SHIST.setSearchdate(Now.ToString)
            SHIST.setSearchsql(MySql)
            SHIST.setUserid(gCurrUserGuidID)
            Dim b As Boolean = SHIST.Insert
            SHIST = Nothing

            If Not b Then
                LogMessage(SecureID, gCurrUserGuidID, "Error 1943.23b - Failed to save history of search.")
            End If
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Search Query Please resubmit search: Notification 165.4d03: " + ex.Message)
            ListOfRowsNoWeights = Nothing
        End Try

        Return ListOfRowsNoWeights

    End Function

        Sub saveScreenState(Byref SecureID As Integer, ByVal UID As String, ByVal ScreenName As String, ByVal DICT As Dictionary(Of String, String), ByRef rMsg As String, ByRef RC As Boolean, ByVal HiveConnectionName As String, ByVal HiveActive As Boolean, ByVal RepoSvrName As String)

            rMsg = "Screen save complete:" + vbCrLf
            Dim iHiveActive As Integer = 0
            If HiveActive = True Then
                iHiveActive = 1
            End If
            Dim I As Integer = 0
            Dim S As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            For Each sKey As String In DICT.Keys
                ParmName = sKey
                ParmVal = DICT.Item(sKey)
                Dim iCnt As Integer = iCount(SecureID, "SELECT COUNT(*) FROM [UserScreenState] where [ScreenName] = '" + ScreenName + "' and [UserID] = '" + UID + "' and [ParmName] = '" + ParmName + "'")
                If iCnt = 0 Then
                    S = ""
                    S += " INSERT INTO [UserScreenState]" + vbCrLf
                    S += "            ([ScreenName]" + vbCrLf
                    S += "            ,[UserID]" + vbCrLf
                    S += "            ,[ParmName]" + vbCrLf
                    S += "            ,[ParmVal]" + vbCrLf
                    S += "            ,[HiveConnectionName]" + vbCrLf
                    S += "            ,[HiveActive]" + vbCrLf
                    S += "            ,[RepoSvrName]" + vbCrLf
                    S += "            ,[RowCreationDate]" + vbCrLf
                    S += "            ,[RowLastModDate])" + vbCrLf
                    S += "      VALUES" + vbCrLf
                    S += "            ('" + ScreenName + "'" + vbCrLf
                    S += "            ,'" + UID + "'" + vbCrLf
                    S += "            ,'" + ParmName + "'" + vbCrLf
                    S += "            ,'" + ParmVal + "'" + vbCrLf
                    S += "            ,'" + HiveConnectionName + "'" + vbCrLf
                    S += "            ,'" + iHiveActive.ToString + "'" + vbCrLf
                    S += "            ,'" + RepoSvrName + "'" + vbCrLf
                    S += "            ,GETDATE()" + vbCrLf
                    S += "            ,GETDATE())" + vbCrLf
                Else
                    S = ""
                    S += " UPDATE [UserScreenState] "
                    S += "    SET "
                    S += "       [ParmVal] = '" + ParmVal + "'" + vbCrLf
                    S += " '      ,[HiveConnectionName] = '" + HiveConnectionName + "'" + vbCrLf
                    S += "       ,[HiveActive] = " + iHiveActive.ToString + vbCrLf
                    S += "       ,[RepoSvrName] = '" + RepoSvrName + "'" + vbCrLf
                    S += "       ,[RowLastModDate] = getdate()" + vbCrLf
                    S += "  where ScreenName = '" + ScreenName + "' and UserID = '" + UID + "' and ParmName = '" + ParmName + "'" + vbCrLf

                End If
                Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    rMsg += "ERROR:" + S
                End If
            Next

        End Sub

        Function getScreenState(Byref SecureID As Integer, ByVal UID As String, ByVal ScreenName As String, ByRef DICT As Dictionary(Of String, String), ByRef rMsg As String, ByRef RC As Boolean, ByVal HiveConnectionName As String, ByVal HiveActive As Boolean, ByVal RepoSvrName As String) As List(Of DS_USERSCREENSTATE)
            rMsg = "Successfully acquired Screen '" + ScreenName + "'s state data."

            Dim ListOfRows As New List(Of DS_USERSCREENSTATE)

            Dim rsDataQry As SqlDataReader = Nothing
            Dim UserID As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            Dim RowCreationDate As Date = Nothing
            Dim RowLastModDate As Date = Nothing

            Dim ParmDataType As String = ""
            Dim RowNbr As Integer = 0


            DICT.Clear()

            Dim MySql As String = ""
            MySql += "Select "
            MySql += "[ScreenName], " + vbCrLf
            MySql += "[UserID], " + vbCrLf
            MySql += "[ParmName], " + vbCrLf
            MySql += "[ParmVal], " + vbCrLf
            MySql += "[ParmDataType], " + vbCrLf
            MySql += "[HiveConnectionName], " + vbCrLf
            MySql += "[HiveActive], " + vbCrLf
            MySql += "[RepoSvrName], " + vbCrLf
            MySql += "[RowCreationDate], " + vbCrLf
            MySql += "[RowLastModDate], " + vbCrLf
            MySql += "[RowNbr]  " + vbCrLf
            MySql += " From [UserScreenState]"
            MySql += " where ScreenName = '" + ScreenName + "' and UserID = '" + UID + "'"

            Try

                Dim CS As String = getConnStr(SecureID)
                Dim sqlcn As New SqlConnection(CS)
                Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
                Dim ds As DataSet = New DataSet

                If sqlcn.State = ConnectionState.Closed Then
                    sqlcn.Open()
                End If

                Dim CONN As New SqlConnection(CS)

                If CONN.State = ConnectionState.Closed Then
                    CONN.Open()
                End If

                Dim command As New SqlCommand(MySql, CONN)

                Try
                    rsDataQry = command.ExecuteReader()
                    If rsDataQry.HasRows Then
                        Do While rsDataQry.Read
                            Dim CD As New DS_USERSCREENSTATE

                            Try
                                ScreenName = rsDataQry.GetValue(0).ToString
                            Catch ex As Exception
                                ScreenName = ""
                            End Try
                            Try
                                UserID = rsDataQry.GetValue(1).ToString
                            Catch ex As Exception
                                UserID = ""
                            End Try
                            Try
                                ParmName = rsDataQry.GetValue(2).ToString
                            Catch ex As Exception
                                ParmName = ""
                            End Try
                            Try
                                ParmVal = rsDataQry.GetValue(3).ToString
                            Catch ex As Exception
                                ParmVal = ""
                            End Try
                            Try
                                ParmDataType = rsDataQry.GetValue(4).ToString
                            Catch ex As Exception
                                ParmDataType = ""
                            End Try
                            Try
                                HiveConnectionName = rsDataQry.GetValue(5).ToString
                            Catch ex As Exception
                                HiveConnectionName = ""
                            End Try
                            Try
                                HiveActive = rsDataQry.GetBoolean(6)
                            Catch ex As Exception
                                HiveActive = False
                            End Try
                            Try
                                RepoSvrName = rsDataQry.GetValue(7).ToString
                            Catch ex As Exception
                                RepoSvrName = ""
                            End Try
                            Try
                                RowCreationDate = rsDataQry.GetDateTime(8)
                            Catch ex As Exception
                                RowCreationDate = Nothing
                            End Try
                            Try
                                RowLastModDate = rsDataQry.GetDateTime(9)
                            Catch ex As Exception
                                RowLastModDate = Nothing
                            End Try
                            Try
                                RowNbr = rsDataQry.GetInt32(10)
                            Catch ex As Exception
                                RowNbr = Nothing
                            End Try

                            If DICT.ContainsKey(ParmName) Then
                                DICT.Item(ParmName) = ParmVal
                            Else
                                DICT.Add(ParmName, ParmVal)
                            End If

                            CD.ScreenName = ScreenName
                            CD.UserID = UserID
                            CD.ParmName = ParmName
                            CD.ParmVal = ParmVal
                            CD.ParmDataType = ParmDataType
                            CD.HiveConnectionName = HiveConnectionName
                            CD.HiveActive = HiveActive
                            CD.RepoSvrName = RepoSvrName
                            CD.RowCreationDate = RowCreationDate
                            CD.RowLastModDate = RowLastModDate
                            CD.RowNbr = RowNbr

                            ListOfRows.Add(CD)

                        Loop
                    End If

                Catch ex As Exception
                    xTrace(SecureID, 1001, "clsDataBase:getScreenLayout", ex.Message)
                    xtrace(SecureID, 1002, "clsDataBase:getScreenLayout", ex.StackTrace)
                    xtrace(SecureID, 1003, "clsDataBase:getScreenLayout", MySql)
                    rMsg += "ERROR: getScreenLayout 100 - " + ex.Message
                    ListOfRows = Nothing
                Finally
                    If rsDataQry IsNot Nothing Then
                        If Not rsDataQry.IsClosed Then
                            rsDataQry.Close()
                        End If
                        rsDataQry = Nothing
                    End If
                    command.Dispose()
                    command = Nothing
                End Try

            Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Screen Retrieve for : " + ScreenName + " Notification 165.4d04: " + ex.Message)
            End Try
            Return ListOfRows
        End Function

    Sub saveGridLayout(ByRef SecureID As Integer, ByRef UserID As String, _
                        ByRef ScreenName As String, _
                        ByRef GridName As String, _
                        ByRef ColName As String, _
                        ByRef ColOrder As Integer, _
                        ByRef ColWidth As Integer, _
                        ByRef ColVisible As Boolean, _
                        ByRef ColReadOnly As Boolean, _
                        ByRef ColSortOrder As Integer, _
                        ByRef ColSortAsc As Boolean, _
                        ByRef HiveConnectionName As String, _
                        ByRef HiveActive As Boolean, _
                        ByRef RepoSvrName As String, _
                        ByRef RowCreationDate As Date, _
                        ByRef RowLastModDate As Date, _
                        ByRef RowNbr As Integer, _
                        ByRef RC As Boolean, _
                        ByRef rMsg As String)

        RowCreationDate = Now.ToString
        RowLastModDate = Now.ToString

        Dim MySql As String = ""
        rMsg = "Screen save complete:" + vbCrLf
        Dim iHiveActive As Integer = 0
        If HiveActive = True Then
            iHiveActive = 1
        End If
        Dim I As Integer = 0
        Dim S As String = ""
        Dim ParmName As String = ""
        Dim ParmVal As String = ""
        Dim iCnt As Integer = iCount(SecureID, "SELECT COUNT(*) FROM [UserGridState] where [UserID] = '" + UserID + "' and [ScreenName] = '" + ScreenName + "' and [GridName] = '" + GridName + "' and [ColName] = '" + ColName + "'")
        If iCnt = 0 Then
            MySql = ""
            MySql += "Insert into [UserGridState] ("
            MySql += "[UserID], " + vbCrLf
            MySql += "[ScreenName], " + vbCrLf
            MySql += "[GridName], " + vbCrLf
            MySql += "[ColName], " + vbCrLf
            MySql += "[ColOrder], " + vbCrLf
            MySql += "[ColWidth], " + vbCrLf
            MySql += "[ColVisible], " + vbCrLf
            MySql += "[ColReadOnly], " + vbCrLf
            MySql += "[ColSortOrder], " + vbCrLf
            MySql += "[ColSortAsc], " + vbCrLf
            MySql += "[HiveConnectionName], " + vbCrLf
            MySql += "[HiveActive], " + vbCrLf
            MySql += "[RepoSvrName], " + vbCrLf
            MySql += "[RowCreationDate], " + vbCrLf
            MySql += "[RowLastModDate] " + vbCrLf
            MySql += ") VALUES (" + vbCrLf
            MySql += "'" + UserID + "'," + vbCrLf
            MySql += "'" + ScreenName + "'," + vbCrLf
            MySql += "'" + GridName + "'," + vbCrLf
            MySql += "'" + ColName + "'," + vbCrLf
            MySql += ColOrder & "," + vbCrLf
            MySql += ColWidth & "," + vbCrLf
            If ColVisible = True Then
                MySql += " 1, "
            Else
                MySql += " 0, "
            End If
            If ColReadOnly = True Then
                MySql += " 1, "
            Else
                MySql += " 0, "
            End If
            MySql += ColSortOrder & ", " + vbCrLf
            If ColSortAsc = True Then
                MySql += " 1, "
            Else
                MySql += " 0, "
            End If
            MySql += "'" + HiveConnectionName + "'," + vbCrLf
            If HiveActive = True Then
                MySql += " 1, "
            Else
                MySql += " 0, "
            End If
            MySql += "'" + RepoSvrName + "'," + vbCrLf
            MySql += "'" + RowCreationDate.ToString + "'," + vbCrLf
            MySql += "'" + RowLastModDate.ToString + "'" + vbCrLf
            MySql += ")"
        Else
            MySql = ""
            MySql += "Update [UserGridState]  SET " + vbCrLf
            MySql += " [UserID] = '" & UserID & "'," + vbCrLf
            MySql += " [ScreenName] = '" & ScreenName & "'," + vbCrLf
            MySql += " [GridName] = '" & GridName & "'," + vbCrLf
            MySql += " [ColName] = '" & ColName & "'," + vbCrLf
            MySql += " [ColOrder] = " & ColOrder & ", " + vbCrLf
            MySql += " [ColWidth] = " & ColWidth & ", " + vbCrLf
            If ColVisible = True Then
                MySql += " [ColVisible] = 1, " + vbCrLf
            Else
                MySql += " [ColVisible] = 0, " + vbCrLf
            End If
            If ColReadOnly = True Then
                MySql += " [ColReadOnly] = 1, " + vbCrLf
            Else
                MySql += " [ColReadOnly] = 0, " + vbCrLf
            End If
            MySql += " [ColSortOrder] = " & ColSortOrder & ", " + vbCrLf
            If ColSortAsc = True Then
                MySql += " [ColSortAsc] = 1, " + vbCrLf
            Else
                MySql += " [ColSortAsc] = 0, " + vbCrLf
            End If
            MySql += " [HiveConnectionName] = '" & HiveConnectionName & "'," + vbCrLf
            If HiveActive = True Then
                MySql += " [HiveActive] = 1, " + vbCrLf
            Else
                MySql += " [HiveActive] = 0, " + vbCrLf
            End If
            MySql += " [RepoSvrName] = '" & RepoSvrName & "'," + vbCrLf
            MySql += " [RowLastModDate] = getdate() " + vbCrLf
            MySql += "where ScreenName = '" + ScreenName + "' and GridName = '" + GridName + "' and ColName = '" + ColName + "' and UserID = '" + UserID + "' " + vbCrLf

        End If
        Dim B As Boolean = ExecuteSqlNewConn(SecureID, MySql)
        If Not B Then
            rMsg += "ERROR:" + MySql
        End If

    End Sub

        Function getGridLayout(Byref SecureID As Integer, ByVal UID As String, _
        ByVal ScreenName As String, _
        ByVal DICT As Dictionary(Of String, String), _
        ByRef rMsg As String, _
        ByRef RC As Boolean, _
        ByVal HiveConnectionName As String, _
        ByVal HiveActive As Boolean, _
        ByVal RepoSvrName As String) As List(Of DS_clsUSERGRIDSTATE)

            rMsg = "Successfully acquired Screen '" + ScreenName + "'s state data."

            Dim rsDataQry As SqlDataReader = Nothing
            Dim UserID As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            Dim RowCreationDate As Date = Nothing
            Dim RowLastModDate As Date = Nothing

            Dim GridName As String = ""
            Dim ColName As String = ""
            Dim ColOrder As Integer = 0
            Dim ColWidth As Integer = 0
            Dim ColVisible As Boolean = False
            Dim ColReadOnly As Boolean = False
            Dim ColSortOrder As Integer = 0
            Dim ColSortAsc As Boolean = False
            Dim RowNbr As Integer = 0

            Dim ListOfRows As New List(Of DS_clsUSERGRIDSTATE)
            DICT.Clear()

            Dim MySql As String = ""
            MySql += "Select "
            MySql += "[UserID], " + vbCrLf
            MySql += "[ScreenName], " + vbCrLf
            MySql += "[GridName], " + vbCrLf
            MySql += "[ColName], " + vbCrLf
            MySql += "[ColOrder], " + vbCrLf
            MySql += "[ColWidth], " + vbCrLf
            MySql += "[ColVisible], " + vbCrLf
            MySql += "[ColReadOnly], " + vbCrLf
            MySql += "[ColSortOrder], " + vbCrLf
            MySql += "[ColSortAsc], " + vbCrLf
            MySql += "[HiveConnectionName], " + vbCrLf
            MySql += "[HiveActive], " + vbCrLf
            MySql += "[RepoSvrName], " + vbCrLf
            MySql += "[RowCreationDate], " + vbCrLf
            MySql += "[RowLastModDate], " + vbCrLf
            MySql += "[RowNbr]  " + vbCrLf
            MySql += " From [UserGridState]" + vbCrLf
            MySql += "  where ScreenName = '" + ScreenName + "' and GridName = '" + GridName + "' and UserID = '" + UID + "' " + vbCrLf

            Try

                Dim CS As String = getConnStr(SecureID)
                Dim sqlcn As New SqlConnection(CS)
                Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
                Dim ds As DataSet = New DataSet

                If sqlcn.State = ConnectionState.Closed Then
                    sqlcn.Open()
                End If

                Dim CONN As New SqlConnection(CS)

                If CONN.State = ConnectionState.Closed Then
                    CONN.Open()
                End If

                Dim command As New SqlCommand(MySql, CONN)

                Try
                    rsDataQry = command.ExecuteReader()
                    If rsDataQry.HasRows Then
                        Do While rsDataQry.Read

                            Dim CD As New DS_clsUSERGRIDSTATE
                            MySql = ""

                            Try
                                UserID = rsDataQry.GetValue(0).ToString
                            Catch ex As Exception
                                UserID = ""
                            End Try
                            Try
                                ScreenName = rsDataQry.GetValue(1).ToString
                            Catch ex As Exception
                                ScreenName = ""
                            End Try
                            Try
                                GridName = rsDataQry.GetValue(2).ToString
                            Catch ex As Exception
                                GridName = ""
                            End Try
                            Try
                                ColName = rsDataQry.GetValue(3).ToString
                            Catch ex As Exception
                                ColName = ""
                            End Try
                            Try
                                ColOrder = rsDataQry.GetInt32(4)
                            Catch ex As Exception
                                ColOrder = Nothing
                            End Try
                            Try
                                ColWidth = rsDataQry.GetInt32(5)
                            Catch ex As Exception
                                ColWidth = Nothing
                            End Try
                            Try
                                ColVisible = rsDataQry.GetBoolean(6)
                            Catch ex As Exception
                                ColVisible = False
                            End Try
                            Try
                                ColReadOnly = rsDataQry.GetBoolean(7)
                            Catch ex As Exception
                                ColReadOnly = False
                            End Try
                            Try
                                ColSortOrder = rsDataQry.GetInt32(8)
                            Catch ex As Exception
                                ColSortOrder = Nothing
                            End Try
                            Try
                                ColSortAsc = rsDataQry.GetBoolean(9)
                            Catch ex As Exception
                                ColSortAsc = False
                            End Try
                            Try
                                HiveConnectionName = rsDataQry.GetValue(10).ToString
                            Catch ex As Exception
                                HiveConnectionName = ""
                            End Try
                            Try
                                HiveActive = rsDataQry.GetBoolean(11)
                            Catch ex As Exception
                                HiveActive = False
                            End Try
                            Try
                                RepoSvrName = rsDataQry.GetValue(12).ToString
                            Catch ex As Exception
                                RepoSvrName = ""
                            End Try
                            Try
                                RowCreationDate = rsDataQry.GetDateTime(13)
                            Catch ex As Exception
                                RowCreationDate = Nothing
                            End Try
                            Try
                                RowLastModDate = rsDataQry.GetDateTime(14)
                            Catch ex As Exception
                                RowLastModDate = Nothing
                            End Try
                            Try
                                RowNbr = rsDataQry.GetInt32(15)
                            Catch ex As Exception
                                RowNbr = Nothing
                            End Try

                            CD.UserID = UserID
                            CD.ScreenName = ScreenName
                            CD.GridName = GridName
                            CD.ColName = ColName
                            CD.ColOrder = ColOrder
                            CD.ColWidth = ColWidth
                            CD.ColVisible = ColVisible
                            CD.ColReadOnly = ColReadOnly
                            CD.ColSortOrder = ColSortOrder
                            CD.ColSortAsc = ColSortAsc
                            CD.HiveConnectionName = HiveConnectionName
                            CD.HiveActive = HiveActive
                            CD.RepoSvrName = RepoSvrName
                            CD.RowCreationDate = RowCreationDate
                            CD.RowLastModDate = RowLastModDate
                            CD.RowNbr = RowNbr
                            ListOfRows.Add(CD)

                            If DICT.ContainsKey(ParmName) Then
                            Else
                                DICT.Add(ParmName, ParmVal)
                            End If

                        Loop
                    End If

                Catch ex As Exception
                    xTrace(SecureID, 1001, "clsDataBase:getGridLayout", ex.Message)
                    xtrace(SecureID, 1002, "clsDataBase:getGridLayout", ex.StackTrace)
                    xtrace(SecureID, 1003, "clsDataBase:getGridLayout", MySql)
                    rMsg += "ERROR: getGridLayout 100 - " + ex.Message
                    ListOfRows = Nothing
                Finally
                    If rsDataQry IsNot Nothing Then
                        If Not rsDataQry.IsClosed Then
                            rsDataQry.Close()
                        End If
                        rsDataQry = Nothing
                    End If
                    command.Dispose()
                    command = Nothing
                End Try

            Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Screen Retrieve for : " + ScreenName + " Notification 165.4d05: " + ex.Message)
            End Try
            Return ListOfRows
        End Function

        Sub saveSearchParms(Byref SecureID As Integer, ByVal UID As String, ByVal ScreenName As String, ByVal DICT As Dictionary(Of String, String), ByRef rMsg As String, ByRef RC As Boolean, ByVal HiveConnectionName As String, ByVal HiveActive As Boolean, ByVal RepoSvrName As String)

            rMsg = "Search save complete:" + vbCrLf
            Dim iHiveActive As Integer = 0
            If HiveActive = True Then
                iHiveActive = 1
            End If
            Dim I As Integer = 0
            Dim S As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            For Each sKey As String In DICT.Keys
                ParmName = sKey
                ParmVal = DICT.Item(sKey)
                Dim iCnt As Integer = iCount(SecureID, "select COUNT(*) from [[UserSearchState]] where ScreenName = '" + ScreenName + "' and UserID = '" + UID + "'")
                If iCnt = 0 Then
                    S = ""
                    S += " INSERT INTO [[UserSearchState]]" + vbCrLf
                    S += "            ([ScreenName]" + vbCrLf
                    S += "            ,[UserID]" + vbCrLf
                    S += "            ,[ParmName]" + vbCrLf
                    S += "            ,[ParmVal]" + vbCrLf
                    S += "            ,[HiveConnectionName]" + vbCrLf
                    S += "            ,[HiveActive]" + vbCrLf
                    S += "            ,[RepoSvrName]" + vbCrLf
                    S += "            ,[RowCreationDate]" + vbCrLf
                    S += "            ,[RowLastModDate])" + vbCrLf
                    S += "      VALUES" + vbCrLf
                    S += "            ('" + ScreenName + "'" + vbCrLf
                    S += "            ,'" + UID + "'" + vbCrLf
                    S += "            ,'" + ParmName + "'" + vbCrLf
                    S += "            ,'" + ParmVal + "'" + vbCrLf
                    S += "            ,'" + HiveConnectionName + "'" + vbCrLf
                    S += "            ,'" + iHiveActive.ToString + "'" + vbCrLf
                    S += "            ,'" + RepoSvrName + "'" + vbCrLf
                    S += "            ,GETDATE()" + vbCrLf
                    S += "            ,GETDATE())" + vbCrLf
                Else
                    S = ""
                    S += " UPDATE [[UserSearchState]] "
                    S += "    SET "
                    S += "       [ParmVal] = '" + ParmVal + "'" + vbCrLf
                    S += " '      ,[HiveConnectionName] = '" + HiveConnectionName + "'" + vbCrLf
                    S += "       ,[HiveActive] = " + iHiveActive.ToString + vbCrLf
                    S += "       ,[RepoSvrName] = '" + RepoSvrName + "'" + vbCrLf
                    S += "       ,[RowLastModDate] = getdate()" + vbCrLf
                    S += "  where ScreenName = '" + ScreenName + "' and UserID = '" + UID + "' and ParmName = '" + ParmName + "'" + vbCrLf

                End If
                Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    rMsg += "ERROR:" + S
                End If
            Next

        End Sub

        ''' <summary>
        ''' Pass in a fully populated dictionary of items and all of those parameters and their values will be saved in the me.
        ''' </summary>
        ''' <param name="UID">Current User Login ID</param>
        ''' <param name="ScreenName">THe screen name from calling this function</param>
        ''' <param name="DICT">The dictionary to be populated.</param>
        ''' <param name="rMsg">A return message</param>
        ''' <param name="RC">A boolean return code</param>
        ''' <param name="HiveConnectionName">The hive name</param>
        ''' <param name="HiveActive">True if a hive connection is active.</param>
        ''' <param name="RepoSvrName">The home repository server name.</param>
        ''' <remarks></remarks>
        Sub saveSearchState(Byref SecureID As Integer, ByVal SearchID As Integer, ByVal UID As String, ByVal ScreenName As String, ByVal DICT As Dictionary(Of String, String), ByRef rMsg As String, ByRef RC As Boolean, ByVal HiveConnectionName As String, ByVal HiveActive As Boolean, ByVal RepoSvrName As String)

            rMsg = "Search save complete:" + vbCrLf
            Dim iHiveActive As Integer = 0
            If HiveActive = True Then
                iHiveActive = 1
            End If
            Dim I As Integer = 0
            Dim S As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            For Each sKey As String In DICT.Keys
                ParmName = sKey
                ParmVal = DICT.Item(sKey)
                Dim iCnt As Integer = iCount(SecureID, "SELECT COUNT(*) FROM [UserSearchState] where SearchID = " & SearchID & " and [ScreenName] = '" + ScreenName + "' and [UserID] = '" + UID + "' and [ParmName] = '" + ParmName + "'")
                If iCnt = 0 Then
                    S = ""
                    S += " INSERT INTO [UserSearchState]" + vbCrLf
                    S += "            ([ScreenName]" + vbCrLf
                    S += "            ,[SearchID]" + vbCrLf
                    S += "            ,[UserID]" + vbCrLf
                    S += "            ,[ParmName]" + vbCrLf
                    S += "            ,[ParmVal]" + vbCrLf
                    S += "            ,[HiveConnectionName]" + vbCrLf
                    S += "            ,[HiveActive]" + vbCrLf
                    S += "            ,[RepoSvrName]" + vbCrLf
                    S += "            ,[RowCreationDate]" + vbCrLf
                    S += "            ,[RowLastModDate])" + vbCrLf
                    S += "      VALUES" + vbCrLf
                    S += "            ('" + ScreenName + "'" + vbCrLf
                    S += "            ,'" + SearchID.ToString + "'" + vbCrLf
                    S += "            ,'" + UID + "'" + vbCrLf
                    S += "            ,'" + ParmName + "'" + vbCrLf
                    S += "            ,'" + ParmVal + "'" + vbCrLf
                    S += "            ,'" + HiveConnectionName + "'" + vbCrLf
                    S += "            ,'" + iHiveActive.ToString + "'" + vbCrLf
                    S += "            ,'" + RepoSvrName + "'" + vbCrLf
                    S += "            ,GETDATE()" + vbCrLf
                    S += "            ,GETDATE())" + vbCrLf
                Else
                    S = ""
                    S += " UPDATE [UserSearchState] "
                    S += " SET "
                    S += "       [ParmVal] = '" + ParmVal + "'" + vbCrLf
                    S += "       ,[HiveConnectionName] = '" + HiveConnectionName + "'" + vbCrLf
                    S += "       ,[HiveActive] = " + iHiveActive.ToString + vbCrLf
                    S += "       ,[RepoSvrName] = '" + RepoSvrName + "'" + vbCrLf
                    S += "       ,[RowLastModDate] = getdate()" + vbCrLf
                    S += "   where SearchID = " & SearchID & " and [ScreenName] = '" + ScreenName + "' and [UserID] = '" + UID + "' and [ParmName] = '" + ParmName + "'"

                End If
                Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
                If Not B Then
                    rMsg += "ERROR:" + S
                End If
            Next

        End Sub

        ''' <summary>
        ''' Pass in a dictionary and that dictionary of items will be filled in by the database.
        ''' This also returns a fully populated list of DS_USERSCREENSTATE items.
        ''' </summary>
        ''' <param name="UID">Current User Login ID</param>
        ''' <param name="SearchID">Each search has an associated SEARCH ID that specifically identifies that search as one that has been performed by a user.</param>
        ''' <param name="ScreenName">THe screen name from calling this function</param>
        ''' <param name="DICT">The dictionary to be populated.</param>
        ''' <param name="rMsg">A return message</param>
        ''' <param name="RC">A boolean return code</param>
        ''' <param name="HiveConnectionName">The hive name</param>
        ''' <param name="HiveActive">True if a hive connection is active.</param>
        ''' <param name="RepoSvrName">The home repository server name.</param>
        ''' <returns></returns>
        ''' <remarks></remarks>
        Function getSearchState(Byref SecureID As Integer, ByVal SearchID As Integer, ByVal UID As String, ByVal ScreenName As String, ByRef DICT As Dictionary(Of String, String), ByRef rMsg As String, ByRef RC As Boolean, ByVal HiveConnectionName As String, ByVal HiveActive As Boolean, ByVal RepoSvrName As String) As List(Of DS_USERSEARCHSTATE)
            rMsg = "Successfully acquired Search '" + ScreenName + "'s state data."

            Dim ListOfRows As New List(Of DS_USERSEARCHSTATE)

            Dim rsDataQry As SqlDataReader = Nothing
            Dim UserID As String = ""
            Dim ParmName As String = ""
            Dim ParmVal As String = ""
            Dim RowCreationDate As Date = Nothing
            Dim RowLastModDate As Date = Nothing

            Dim ParmDataType As String = ""
            Dim RowNbr As Integer = 0

            DICT.Clear()

            Dim MySql As String = ""
            MySql += "Select "
            MySql += "[SearchID], " + vbCrLf
            MySql += "[ScreenName], " + vbCrLf
            MySql += "[UserID], " + vbCrLf
            MySql += "[ParmName], " + vbCrLf
            MySql += "[ParmVal], " + vbCrLf
            MySql += "[ParmDataType], " + vbCrLf
            MySql += "[HiveConnectionName], " + vbCrLf
            MySql += "[HiveActive], " + vbCrLf
            MySql += "[RepoSvrName], " + vbCrLf
            MySql += "[RowCreationDate], " + vbCrLf
            MySql += "[RowLastModDate], " + vbCrLf
            MySql += "[RowNbr]  " + vbCrLf
            MySql += " From [UserSearchState]"
            MySql += " where ScreenName = '" + ScreenName + "' and UserID = '" + UID + "'"
            MySql += " AND SearchID = " + SearchID.ToString

            Try

                Dim CS As String = getConnStr(SecureID)
                Dim sqlcn As New SqlConnection(CS)
                Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
                Dim ds As DataSet = New DataSet

                If sqlcn.State = ConnectionState.Closed Then
                    sqlcn.Open()
                End If

                Dim CONN As New SqlConnection(CS)

                If CONN.State = ConnectionState.Closed Then
                    CONN.Open()
                End If

                Dim command As New SqlCommand(MySql, CONN)

                Try
                    rsDataQry = command.ExecuteReader()
                    If rsDataQry.HasRows Then
                        Do While rsDataQry.Read
                            Dim CD As New DS_USERSEARCHSTATE

                            Try
                                SearchID = rsDataQry.GetInt32(0)
                            Catch ex As Exception
                                SearchID = Nothing
                            End Try
                            Try
                                ScreenName = rsDataQry.GetValue(1).ToString
                            Catch ex As Exception
                                ScreenName = ""
                            End Try
                            Try
                                UserID = rsDataQry.GetValue(2).ToString
                            Catch ex As Exception
                                UserID = ""
                            End Try
                            Try
                                ParmName = rsDataQry.GetValue(3).ToString
                            Catch ex As Exception
                                ParmName = ""
                            End Try
                            Try
                                ParmVal = rsDataQry.GetValue(4).ToString
                            Catch ex As Exception
                                ParmVal = ""
                            End Try
                            Try
                                ParmDataType = rsDataQry.GetValue(5).ToString
                            Catch ex As Exception
                                ParmDataType = ""
                            End Try
                            Try
                                HiveConnectionName = rsDataQry.GetValue(6).ToString
                            Catch ex As Exception
                                HiveConnectionName = ""
                            End Try
                            Try
                                HiveActive = rsDataQry.GetBoolean(7)
                            Catch ex As Exception
                                HiveActive = False
                            End Try
                            Try
                                RepoSvrName = rsDataQry.GetValue(8).ToString
                            Catch ex As Exception
                                RepoSvrName = ""
                            End Try
                            Try
                                RowCreationDate = rsDataQry.GetDateTime(9)
                            Catch ex As Exception
                                RowCreationDate = Nothing
                            End Try
                            Try
                                RowLastModDate = rsDataQry.GetDateTime(10)
                            Catch ex As Exception
                                RowLastModDate = Nothing
                            End Try
                            Try
                                RowNbr = rsDataQry.GetInt32(11)
                            Catch ex As Exception
                                RowNbr = Nothing
                            End Try


                            CD.SearchID = SearchID
                            CD.ScreenName = ScreenName
                            CD.UserID = UserID
                            CD.ParmName = ParmName
                            CD.ParmVal = ParmVal
                            CD.ParmDataType = ParmDataType
                            CD.HiveConnectionName = HiveConnectionName
                            CD.HiveActive = HiveActive
                            CD.RepoSvrName = RepoSvrName
                            CD.RowCreationDate = RowCreationDate
                            CD.RowLastModDate = RowLastModDate
                            CD.RowNbr = RowNbr

                            If DICT.ContainsKey(ParmName) Then
                                DICT.Item(ParmName) = ParmVal
                            Else
                                DICT.Add(ParmName, ParmVal)
                            End If

                            ListOfRows.Add(CD)
                        Loop
                    End If

                Catch ex As Exception
                    xTrace(SecureID, 1001, "clsDataBase:getScreenLayout", ex.Message)
                    xtrace(SecureID, 1002, "clsDataBase:getScreenLayout", ex.StackTrace)
                    xtrace(SecureID, 1003, "clsDataBase:getScreenLayout", MySql)
                    rMsg += "ERROR: getScreenLayout 100 - " + ex.Message
                    ListOfRows = Nothing
                Finally
                    If rsDataQry IsNot Nothing Then
                        If Not rsDataQry.IsClosed Then
                            rsDataQry.Close()
                        End If
                        rsDataQry = Nothing
                    End If
                    command.Dispose()
                    command = Nothing
                End Try

            Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Screen Retrieve for : " + ScreenName + " Notification 165.4d06: " + ex.Message)
            End Try

            Return ListOfRows


        End Function

    Sub IncludeEmailAttachmentsSearch(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer, ByVal UID As String, ByVal ckIncludeAttachments As Boolean, _
        ByVal ckWeights As Boolean, _
        ByVal ckBusiness As Boolean, _
        ByVal SearchText$, _
        ByVal ckLimitToExisting As Boolean, _
        ByVal txtThesaurus$, _
        ByVal cbThesaurusText$, _
        ByVal LibraryName$, ByVal bIncludeAllLibs As Boolean)

        If ckIncludeAttachments Then

            If bIncludeAllLibs = True Then
                LibraryName = ""
            End If


            Dim SS$ = "delete FROM [EmailAttachmentSearchList] where [UserID] = '" + UID + "'"
            Dim BB As Boolean = ExecuteSqlNewConn(SecureID, SS)
            If Not BB Then
                MsgBox("Failed to initialize Attachment Content Search. Content search is not included in the results.")
            Else

                Dim EmailContentWhereClause As String = ""
                Dim insertSql$ = ""

                EmailContentWhereClause$ = genContainsClause(SearchParmList, SecureID, "EMAIL")

                Dim bAdmin As Boolean = isAdmin(SecureID, UID)

                If Not bAdmin And Me.isGlobalSearcher(SecureID, UID) = False Then
                    EmailContentWhereClause$ = EmailContentWhereClause$ + vbCrLf + " And DataSourceOwnerUserID = '" + UID + "' "
                Else
                    EmailContentWhereClause$ = EmailContentWhereClause$ + vbCrLf + " And DataSourceOwnerUserID IS NOT null "
                End If
                If dDebug Then Console.WriteLine(EmailContentWhereClause$)
                insertSql$ = EmailContentWhereClause$

                If ckBusiness Then
                    SearchEmailAttachments(SecureID, UID, insertSql$, True)
                Else
                    SearchEmailAttachments(SecureID, UID, insertSql$, False)
                End If

                If Not Me.isAdmin(SecureID, UID) And Me.isGlobalSearcher(SecureID, UID) = False Then
                    '** If not an ADMIN, then limit to USER content only
                    insertSql = insertSql + vbCrLf + " AND UserID = '" + UID + "' "
                End If

                BB = Me.ExecuteSqlNewConn(SecureID, insertSql, False)

                If Not BB Then
                    LogMessage(SecureID, gCurrUserGuidID, "clsSQl:IncludeEmailAttachmentsSearch : Failed to insert Attachment Content Search. Content search is not included in the results.")
                    LogMessage(SecureID, gCurrUserGuidID, "clsSQl:IncludeEmailAttachmentsSearch : The SQL Stmt: " + insertSql$)
                    NbrOfErrors += 1
                    ''FrmMDIMain.SB.Text = "Errors: " + NbrOfErrors.ToString
                End If


            End If
        End If
    End Sub
    Function genContainsClause(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer, ByVal EmailOrContent As String) As String

        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim ckWeights As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False
        Dim ckLimitToLib As Boolean = False

        Dim UID As String = ""
        Dim LibraryName As String = ""
        Dim txtSearch As String = ""
        Dim ckLimitToExisting As Boolean = Nothing

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        Dim txtThesaurus As String = ""
        Dim cbThesaurusText As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        Dim useFreetext As Boolean = ckBusiness
        Dim WhereClause As String = ""
        Dim S As String = ""
        'Dim ThesaurusList As New ArrayList
        Dim ThesaurusWords As New ArrayList
        Dim ContainsClause$ = ""
        Dim isValidContainsClause As Boolean = False
        Dim lParens As Integer = 0
        Dim rParens As Integer = 0

        If txtSearch.Length = 0 Then
            '** NO Search criteria was specified send back something that will return everything
            If EmailOrContent.Equals("EMAIL") Then
                WhereClause = " UserID is not null "
            Else
                WhereClause = " DataSourceOwnerUserID is not null "
            End If
            Return WhereClause
        End If

        If ckWeights Then

            If txtSearch.Length = 0 Then
                If isAdmin Or isGlobalSearcher = True Then
                    ContainsClause$ = " DataSourceOwnerUserID is not null "
                Else
                    ContainsClause$ = " DataSourceOwnerUserID = '" + UID + "' "
                End If

            Else
                ContainsClause$ = buildContainsSyntax(SecureID, txtSearch, ThesaurusWords)
            End If


            isValidContainsClause = ValidateContainsList(SecureID, ContainsClause$)

            If EmailOrContent.ToUpper.Equals("EMAIL") Then
                If useFreetext = True Then
                    '** This is FREETEXT searching, remove noise words
                    Me.RemoveFreetextStopWords(SecureID, txtSearch)
                    If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                        If isValidContainsClause Then
                            '(Body, Description, KeyWords, Subject, Attachment, Ocrtext)
                            WhereClause += " ( FREETEXT ((Body, SUBJECT, KeyWords, Description), '"
                            S = txtSearch
                            WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                            WhereClause += "') "
                            rParens += 1
                        End If

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " FREETEXT ((Body, SUBJECT, KeyWords, Description), '" + ExpandedWordList$
                                WhereClause += "')" + vbCrLf + "/* 0A1 */ " + vbCrLf
                                rParens += 1
                            End If
                        End If

                        '** 5/29/2008 by WDM now, get the SUBJECT searched too.
                        If isValidContainsClause Then
                            WhereClause += " or FREETEXT ((Body, SUBJECT, KeyWords, Description), '"
                            S = txtSearch
                            WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                            WhereClause += "') " + vbCrLf + " /* 00 */ " + vbCrLf
                            rParens += 1
                        End If

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                WhereClause += vbCrLf + Chr(9) + " OR FREETEXT ((Body, SUBJECT, KeyWords, Description), '" + ExpandedWordList$
                                WhereClause += "') "
                                rParens += 1
                            End If
                        End If
                        WhereClause += ")" + vbCrLf + "  /* #2 */" + vbCrLf
                    End If
                Else
                    'Processing a weighted set of documents
                    lParens = 0
                    If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                        WhereClause += " ( CONTAINS(BODY, '"
                        S = txtSearch
                        WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                        WhereClause += "')   /*YY00a*/ " + vbCrLf

                        lParens = lParens + 1

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                WhereClause = WhereClause + vbCrLf
                                WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " (CONTAINS (body, '" + ExpandedWordList$
                                WhereClause += "')   /*YY00*/" + vbCrLf
                                lParens = lParens + 1
                            End If
                        End If

                        WhereClause += " or CONTAINS(SUBJECT, '"
                        S = txtSearch
                        WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                        WhereClause += "')   /*XX01*/" + vbCrLf

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                WhereClause = WhereClause + vbCrLf
                                WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " (CONTAINS (subject, '" + getThesaurusWords(SecureID, ThesaurusList, ThesaurusWords)
                                WhereClause += "')   /*YY01*/" + vbCrLf
                                lParens = lParens + 1
                            End If
                        End If
                        If lParens = 1 Then
                            WhereClause += ")     /*XX02a*/" + vbCrLf
                        ElseIf lParens = 2 Then
                            WhereClause += "))     /*XX02b*/" + vbCrLf
                        ElseIf lParens = 3 Then
                            WhereClause += ")))     /*XX02c*/" + vbCrLf
                        End If
                    End If
                End If
            Else
                '** Processing documents, not emails
                If useFreetext = True Then
                    If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                        Me.RemoveFreetextStopWords(SecureID, txtSearch)
                        Me.RemoveFreetextStopWords(SecureID, txtThesaurus$)
                        'WhereClause += " FREETEXT (SourceImage, '"
                        'WhereClause += " FREETEXT (DataSource.*, '"
                        WhereClause += " FREETEXT ((Description, KeyWords, Notes, SourceImage, SourceName), '"
                        S = txtSearch
                        WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                        WhereClause += "')"

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                'WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " freetext (SourceImage, '" + ExpandedWordList$
                                'WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " freetext (DataSource.*, '" + ExpandedWordList$
                                WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " freetext ((Description, KeyWords, Notes, SourceImage, SourceName), '" + ExpandedWordList$
                                WhereClause += "')" + vbCrLf + "/* 0A2 */ " + vbCrLf
                                rParens += 1
                            End If
                        End If
                    End If
                Else
                    If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                        WhereClause += " (CONTAINS(SourceImage, '"
                        S = txtSearch
                        WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                        WhereClause += "'))     /*XX03*/ "

                        If txtThesaurus$.Trim.Length > 0 Then
                            Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                            If ExpandedWordList$.Trim.Length > 0 Then
                                WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " CONTAINS (SourceImage, '" + ExpandedWordList$
                                WhereClause += "')" + vbCrLf + "/* 0A3 */ " + vbCrLf
                                rParens += 1
                            End If
                        End If
                    End If
                End If
            End If
        Else
            '** No weightings used in this query
            If txtSearch.Length = 0 Then
                If isAdmin Or isGlobalSearcher = True Then
                    ContainsClause$ = " DataSourceOwnerUserID is not null "
                Else
                    ContainsClause$ = " DataSourceOwnerUserID = '" + UID + "' "
                End If
            ElseIf useFreetext = True Then
                If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                    Me.RemoveFreetextStopWords(SecureID, txtSearch)
                    Me.RemoveFreetextStopWords(SecureID, txtThesaurus$)

                    WhereClause += " FREETEXT ((Body, SUBJECT, KeyWords, Description), '"
                    S = txtSearch
                    WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                    WhereClause += "')" + vbCrLf

                    If txtThesaurus$.Trim.Length > 0 Then
                        Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                        If ExpandedWordList$.Trim.Length > 0 Then
                            WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " FREETEXT ((Body, SUBJECT, KeyWords, Description), '" + ExpandedWordList$
                            WhereClause += "')" + vbCrLf + "/* 0A4 */ " + vbCrLf
                            rParens += 1
                        End If
                    End If
                    'WhereClause += ")  /* XX  Final Quotes */"
                End If
            Else
                If txtSearch.Length > 0 Or txtThesaurus$.Trim.Length > 0 Then
                    WhereClause += " CONTAINS(*, '"
                    S = txtSearch
                    WhereClause += buildContainsSyntax(SecureID, S, ThesaurusWords)
                    WhereClause += "')     /*XX04*/ "

                    If txtThesaurus$.Trim.Length > 0 Then
                        Dim ExpandedWordList$ = PopulateThesaurusList(SecureID, ThesaurusList, ThesaurusWords, txtThesaurus$, cbThesaurusText$)
                        If ExpandedWordList$.Trim.Length > 0 Then
                            WhereClause += vbCrLf + Chr(9) + cbThesaurusText$ + " CONTAINS (*, '" + ExpandedWordList$
                            WhereClause += "')" + vbCrLf + "/* 0A5 */ " + vbCrLf
                            rParens += 1
                        End If
                    End If
                    'WhereClause += ")" + vbCrLf + "/* 9A */ " + vbCrLf
                End If
            End If
        End If
        ThesaurusList = Nothing
        ThesaurusWords = Nothing
        Return WhereClause
    End Function

    Function buildContainsSyntax(ByRef SecureID As Integer, ByVal SearchCriteria$, ByRef ThesaurusWords As ArrayList) As String
        '** Get all the OR'SearchCriteria and build a search term then
        '** get all the AND'SearchCriteria and build a search term then
        '** Apply any NEAR'SearchCriteria to the mess.


        ' "dale miller" "susan miller" near Jessie
        ' "dale miller" "susan miller" +Jessie Shelby
        ' "dale miller" +"susan miller" +Jessie
        'Dale Susan near Jessie
        '+dale +susan near Jessie
        '+dale +susan Jessie
        '+dale +susan +Jessie


        'WHERE CONTAINS(*, '"ECA" or "Enterprise Content" AND "Content*" and "state" NEAR "State Farm"')
        '** '"ECA" or "Enterprise Content" AND "Content*" and "state" NEAR "State Farm" and "Corporate"'
        '** 'ECA or "Enterprise Content" AND Content* and state NEAR "State Farm" and Corporate'
        '** 'ECA "Enterprise Content" +Content* +state NEAR "State Farm" +Corporate'
        '** WHERE CONTAINS(Description, ' FORMSOF (INFLECTIONAL, ride) ');


        Dim A As New List(Of String)
        Dim I As Integer = 0
        Dim J As Integer = 0
        Dim Ch$ = ""
        Dim tWord$ = ""
        Dim WordCnt As Integer = 0
        Dim isOr As Boolean = False
        Dim isAnd As Boolean = False
        Dim isNear As Boolean = False
        Dim isPhrase As Boolean = False
        Dim isAndNot As Boolean = False
        Dim Delimiters As String = " ,:"
        Dim DQ As String = Chr(34)
        Dim FirstEntry As Boolean = True
        Dim QuotedString$ = ""
        Dim AND_Needed As Boolean = False
        Dim AndNeeded As Boolean = False

        ThesaurusWords.Clear()

        SearchCriteria = SearchCriteria.Trim


        For I = 1 To SearchCriteria.Length


StartNextWord:
            Ch = Mid(SearchCriteria, I, 1)
            If FirstEntry Then
                If Ch.Equals("~") Or Ch.Equals("^") Or Ch.Equals("^") Or Ch.Equals("#") Then
                    '** DO nothing - it belongs here
                Else
                    If isDelimiter(SecureID, Ch$) Then
                        SkipTokens(SecureID, SearchCriteria, I, J)
                        I = J
                        GoTo StartNextWord
                    End If
                End If

                FirstEntry = False
            End If
TokenAlreadyAcquired:
            If Ch = Chr(34) Then
                QuotedString$ = ""
                J = 0
                GetQuotedString(SecureID, SearchCriteria, I, J, QuotedString$)
                If QuotedString$.Equals(Chr(34) + Chr(34)) Then
                    If dDebug Then Console.WriteLine("Skipping null double quotes.")
                Else
                    A.Add(QuotedString$)
                End If

                AND_Needed = True
            ElseIf Ch.Equals("|") Then
                AND_Needed = False
                A.Add("Or")
            ElseIf Ch.Equals("+") Then
                A.Add("And")
                AND_Needed = False
            ElseIf Ch.Equals("-") Then
                A.Add("Not")
                AND_Needed = False
            ElseIf Ch.Equals("(") Then
                If dDebug Then Console.WriteLine("Skipping: " + Ch)
                A.Add("(")
            ElseIf Ch.Equals(")") Then
                If dDebug Then Console.WriteLine("Skipping: " + Ch)
                A.Add(")")
            ElseIf Ch.Equals(",") Then
                If dDebug Then Console.WriteLine("Skipping: " + Ch)
            ElseIf Ch = "^" Then
                '** Then this will be an inflectional term
                '** One term using the AND operator will be built for each inflectional term provided.
                Dim SubstituteString As String = "FORMSOF (INFLECTIONAL, " + Chr(34) + "@" + Chr(34) + ")"
                I += 1

                Dim ReturnedDelimiter$ = ""

                tWord = getNextToken(SecureID, SearchCriteria, I, ReturnedDelimiter$)
                Dim C$ = Mid(SearchCriteria, I, 1)
                SubIn(SecureID, SubstituteString, "@", tWord)
                tWord = SubstituteString
                SubIn(SecureID, tWord, Chr(34) + Chr(34), Chr(34))

                'If AND_Needed Then
                '    A.Add("AND")
                'End If

                If dDebug Then Console.WriteLine(I.ToString + ":" + Mid(SearchCriteria, I, 1))
                A.Add(tWord)
                AND_Needed = True
                tWord = ""
                GoTo StartNextWord
            ElseIf Ch = "~" Then
                '** Then this will be a THESAURUS term
                '** One term using the AND operator will be built for each inflectional term provided.
                Dim SubstituteString As String = "FORMSOF (THESAURUS, " + Chr(34) + "@" + Chr(34) + ")"
                I += 1
                Dim ReturnedDelimiter$ = ""
                tWord = getNextToken(SecureID, SearchCriteria, I, ReturnedDelimiter$)
                SubIn(SecureID, SubstituteString, "@", tWord)
                tWord = SubstituteString
                SubIn(SecureID, tWord, Chr(34) + Chr(34), Chr(34))
                'If A.Count > 1 Then
                '    A.Add("AND")
                '    AND_Needed = False
                'End If
                'If AND_Needed Then
                '    A.Add("AND")
                'End If
                If dDebug Then Console.WriteLine(I.ToString + ":" + Mid(SearchCriteria, I, 1))
                A.Add(tWord)
                AND_Needed = True
                tWord = ""
                GoTo StartNextWord
            ElseIf Ch = "#" Then
                '** Then this will be an THESAURUS term
                '** One term using the AND operator will be built for each inflectional term provided.
                Dim SubstituteString As String = "FORMSOF (THESAURUS, " + Chr(34) + "@" + Chr(34) + ")"
                I += 1
                Dim ReturnedDelimiter$ = ""
                tWord = getNextToken(SecureID, SearchCriteria, I, ReturnedDelimiter$)
                If Not ThesaurusWords.Contains(tWord) Then
                    ThesaurusWords.Add(tWord)
                End If
                GoTo ProcessImmediately
            ElseIf Ch = " " Or Ch = "," Then
                I += 1
                Ch = Mid(SearchCriteria, I, 1)
                If isSyntaxChar(SecureID, Ch) Then
                    GoTo TokenAlreadyAcquired
                End If
                Do While Ch = " " And I < SearchCriteria.Length
                    Ch = Mid(SearchCriteria, I, 1)
                    I += 1
                Loop
                If isSyntaxChar(SecureID, Ch) Then
                    I = I - 1
                    GoTo TokenAlreadyAcquired
                End If
                isOr = True
                '************************************************************
                tWord = getTheRestOfTheToken(SecureID, SearchCriteria, I)
                '************************************************************
                'Dim sPrevWord As String = ""
                'If A.Count > 0 Then
                '    sPrevWord = A.Item(A.Count - 1)
                'End If
                'If UCase(tWord).Equals("OR") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("AND") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NOT") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NEAR") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NOT") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'Else
                '    AND_Needed = True
                'End If

                A.Add(tWord)
                Dim BB As Boolean = False
                BB = isKeyWord(SecureID, tWord)


                If BB = True Then
                    AND_Needed = False
                Else
                    AND_Needed = True
                End If
                tWord = ""
                I = I - 1
            Else
                Dim ReturnedDelimiter$ = ""
                tWord = getNextToken(SecureID, SearchCriteria, I, ReturnedDelimiter$)
                'If dDebug Then Console.WriteLine(tWord)
                'Dim sPrevWord As String = ""
                'If A.Count > 0 Then
                '    sPrevWord = A.Item(A.Count - 1)
                'End If
                'If UCase(tWord).Equals("OR") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("AND") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NOT") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NEAR") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'ElseIf UCase(tWord).Equals("NOT") Then
                '    If sPrevWord.Trim.Length > 0 Then
                '        If isKeyWord(SecureID, sPrevWord) Then
                '            A.Item(A.Count - 1) = " "
                '        End If
                '    End If
                '    AND_Needed = False
                'Else
                '    AND_Needed = True
                'End If

                A.Add(tWord)

                tWord = ""
                I = I - 1
            End If
ProcessImmediately:


            If dDebug Then Console.WriteLine(I.ToString + ":" + tWord)
            If dDebug Then Console.WriteLine(SearchCriteria)
            tWord = ""
            'isOr = True
            For II As Integer = 0 To A.Count - 1
                If A(II) = Nothing Then
                    If dDebug Then Console.WriteLine(II.ToString + ":Nothing")
                Else
                    If dDebug Then Console.WriteLine(II.ToString + ":" + A(II).ToString)
                End If
            Next

            'If AND_Needed Then
            '    A.Add("AND")
            'End If
NextWord:
        Next

        'BB = isKeyWord(SecureID, tWord)
        Dim ExpandedSearchString As String = ""
        Dim currWord As String = ""
        Dim prevWord As String = ""
        Dim iLoc As Integer = 0

        '** Contains Clause Generator
        For Each TempWord As String In A
            If iLoc = 0 Then
                If isKeyWord(SecureID, TempWord) Then
                    ExpandedSearchString = ""
                Else
                    ExpandedSearchString = TempWord
                End If
            Else
                If TempWord.Trim.Length = 0 Then

                ElseIf Not isKeyWord(SecureID, TempWord) And TempWord.Equals(")") Then
                    ExpandedSearchString = ExpandedSearchString.Trim + " " + TempWord
                ElseIf prevWord.Trim.ToUpper.Equals("(") And Not isKeyWord(SecureID, TempWord) Then
                    ExpandedSearchString = ExpandedSearchString + TempWord.Trim + " "
                ElseIf TempWord.Trim.ToUpper.Equals(")") And isKeyWord(SecureID, prevWord) Then
                    '** Correct the new generator issue from LIZ 9/16/2011 here.
                    ExpandedSearchString = ExpandedSearchString.Trim
                    For II As Integer = ExpandedSearchString.Length To 1 Step -1
                        Ch = Mid(ExpandedSearchString, II, 1)
                        If Ch.Equals(" ") Or Ch.Equals(",") Then
                            ExpandedSearchString = Mid(ExpandedSearchString, 1, II)
                            ExpandedSearchString = ExpandedSearchString.Trim
                            ExpandedSearchString = ExpandedSearchString + " " + ")"
                        End If
                    Next
                ElseIf TempWord.Trim.ToUpper.Equals("NEAR") And isKeyWord(SecureID, prevWord) Then
                    '** remove the last word in the string
                    ExpandedSearchString = ExpandedSearchString.Trim
                    For II As Integer = ExpandedSearchString.Length To 1 Step -1
                        Ch = Mid(ExpandedSearchString, II, 1)
                        If Ch.Equals(" ") Or Ch.Equals(",") Then
                            ExpandedSearchString = Mid(ExpandedSearchString, 1, II)
                            ExpandedSearchString = ExpandedSearchString.Trim
                            ExpandedSearchString = ExpandedSearchString + " " + "NEAR"
                        End If
                    Next
                ElseIf Not isKeyWord(SecureID, prevWord) And InStr(TempWord, "FORMSOF ") > 0 Then
                    ExpandedSearchString = ExpandedSearchString + " AND " + TempWord + " "
                ElseIf Not isKeyWord(SecureID, prevWord) And InStr(TempWord, "FORMSOF ") > 0 Then
                    ExpandedSearchString = ExpandedSearchString + " AND " + TempWord + " "
                ElseIf InStr(TempWord, Chr(34)) > 0 Then
                    ExpandedSearchString = ExpandedSearchString + " " + TempWord
                ElseIf isKeyWord(SecureID, TempWord) Then
                    ExpandedSearchString = ExpandedSearchString + " " + TempWord
                ElseIf Not isKeyWord(SecureID, prevWord) And Not isKeyWord(SecureID, TempWord) And Not isDelimeter(TempWord) Then
                    ExpandedSearchString = ExpandedSearchString + " AND " + TempWord + " "
                Else
                    ExpandedSearchString = ExpandedSearchString + " " + TempWord
                End If
            End If
            prevWord = TempWord
            iLoc += 1
        Next

        Return ExpandedSearchString


    End Function

    Function isKeyWord(ByRef SecureID As Integer, ByVal KW$) As Boolean
        Dim B As Boolean = False
        KW = UCase(KW)
        Select Case KW
            Case "AND"
                Return True
            Case "OR"
                Return True
            Case "NOT"
                Return True
            Case "NEAR"
                Return True
            Case "AND"
                Return True
            Case "FORMSOF"
                Return True
        End Select
        Return B
    End Function
    Function isDelimeter(ByVal KW As String) As Boolean
        Dim B As Boolean = False
        KW = UCase(KW)
        Select Case KW
            Case "("
                Return True
            Case ")"
                Return True
            Case ","
                Return True
        End Select
        Return B
    End Function

    Function GenEmailAttachmentsGeneratedSQL(ByRef SearchParmList As SortedList(Of String, String), ByVal UserID As String, ByVal SearchParms As List(Of DS_SearchTerms), ByRef SecureID As Integer, ByVal InputSearchString As String, _
        ByVal useFreetext As Boolean, _
        ByVal ckWeights As Boolean, _
        ByVal isEmail As Boolean, _
        ByVal LimitToCurrRecs As Boolean, _
        ByVal ThesaurusList As ArrayList, _
        ByVal txtThesaurus$, _
        ByVal cbThesaurusText$, ByVal calledBy As String) As String

        Dim ContainsClause As String = genContainsClause(SearchParmList, SecureID, "EMAIL")

        Dim tSql As String = ""
        Dim S$ = ""
        Dim I As Integer = 0

        Try
            tSql = "insert EmailAttachmentSearchList ([UserID],[EmailGuid], RowID) " + vbCrLf
            tSql = tSql + " select '" + UserID + "',[EmailGuid], RowID  " + vbCrLf
            tSql = tSql + "FROM EmailAttachment " + vbCrLf
            tSql = tSql + "where " + vbCrLf
            S$ = ContainsClause$
            I = 0
            I = InStr(S, "(")
            Mid(ContainsClause, I, 1) = " "
            S = S.Trim
            I = InStr(S, ",")
            S = Mid(S, I)
            I = InStr(S, "/*")
            If I > 0 Then
                S = Mid(S, 1, I - 1)
            End If
            If useFreetext Then
                S = "FREETEXT ((Body, SUBJECT, KeyWords, Description)" + S
            Else
                S = "contains(*" + S
            End If

            ContainsClause$ = tSql + S + vbCrLf
        Catch ex As Exception
            Console.WriteLine(ex.Message)
        End Try
        tSql = ContainsClause$
        Return tSql
    End Function

    Sub SearchEmailAttachments(ByRef SecureID As Integer, ByVal UID As String, ByRef ContainsClause As String, ByVal isFreetext As Boolean)

        Dim tSql$ = ""
        Dim S$ = ""
        Dim I As Integer = 0

        S = "delete from EmailAttachmentSearchList where UserID = '" + UID + "' "
        Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
        If B = False Then
            LogMessage(SecureID, gCurrUserGuidID, "Notice: Failed to delete user records from EmailAttachmentSearchList.")
        End If

        Try
            'INSERT INTO EmailAttachmentSearchList
            '                      (UserID, EmailGuid, RowID)
            'SELECT     'wmiller' AS Expr1, EmailGuid, RowID
            'FROM         EmailAttachment
            'WHERE     CONTAINS(*, ' alaska')

            tSql$ = "insert EmailAttachmentSearchList ([UserID],[EmailGuid], RowID) " + vbCrLf
            tSql$ = tSql$ + " select '" + UID + "',[EmailGuid], RowID  " + vbCrLf
            tSql$ = tSql$ + "FROM EmailAttachment " + vbCrLf
            tSql$ = tSql$ + "where " + vbCrLf
            S$ = ContainsClause$
            I = 0
            I = InStr(S, "(")
            Mid(ContainsClause, I, 1) = " "
            S = S.Trim
            I = InStr(S, ",")
            S = Mid(S, I)
            I = InStr(S, "/*")
            If I > 0 Then
                S = Mid(S, 1, I - 1)
            End If
            If isFreetext Then
                S = "FREETEXT ((Body, SUBJECT, KeyWords, Description)" + S
            Else
                S = "contains(*" + S
            End If

            ContainsClause$ = tSql$ + S + vbCrLf
        Catch ex As Exception
            Console.WriteLine(ex.Message)
        End Try

        'Clipboard.Clear()
        'Clipboard.SetText(ContainsClause$)

    End Sub

    Function ValidateContainsList(ByRef SecureID As Integer, ByRef ContainsList$) As Boolean
        ContainsList$ = ContainsList$.Trim
        If ContainsList.Trim.Length = 0 Then
            Return False
        End If
        If isKeyWord(SecureID, ContainsList$) Then
            Return False
        End If
        Dim b As Boolean = True
        If InStr(ContainsList, "body, ' ')", CompareMethod.Text) > 0 Then
            '** It is a null where clause in effect
            ContainsList = ""
            b = False
        End If
        If InStr(ContainsList, "body, ' or", CompareMethod.Text) > 0 Then
            '** It is a null where clause in effect
            ContainsList = ""
            b = False
        End If
        If InStr(ContainsList, "body, ' and", CompareMethod.Text) > 0 Then
            '** It is a null where clause in effect
            ContainsList = ""
            b = False
        End If
        Return b
    End Function

    Function GenDocSearchSql(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer) As String


        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim UID As String = ""
        Dim isAdmin As Boolean = False
        Dim ckLimitToLib As Boolean = False
        Dim LibraryName As String = ""

        Dim txtThesaurus As String = ""
        Dim cbThesaurusText As String = ""
        Dim txtSearch As String = ""
        Dim ckLimitToExisting As Boolean = Nothing
        Dim ckWeights As Boolean = Nothing

        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        Dim WhereClause As String = ""
        Dim bCopyToClipboard As Boolean = True
        Dim UserSql$ = ""

        If txtSearch = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If
        If getCountOnly = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If
        If ckWeights = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If

        Dim SqlToExecute As String = ""
        Dim SqlHeader As String = ""
        '**WDM Removed 7/12/2009 SqlHeader = genHeader()
        SqlHeader += vbCrLf

        If getCountOnly Then
            SqlHeader += genContenCountSql(SecureID)
        Else

            SqlHeader += getContentTblCols(SecureID, ckWeights)
            If ckWeights Then
                SqlHeader += genIsAbout(SecureID, ckWeights, ckBusiness, txtSearch, False)
            End If

            SqlHeader += " WHERE " + vbCrLf

            'genDocWhereClause(WhereClause)
            Dim SqlContainsClause As String = ""
            '************************************************************************************************************************************************************
            SqlContainsClause = genContainsClause(SearchParmList, SecureID, "DOC")
            '************************************************************************************************************************************************************

            SqlContainsClause = SqlContainsClause + genUseExistingRecordsOnly(SecureID, UseExistingRecordsOnly, "SourceGuid")

            If SqlContainsClause.Length > 0 Then
                SqlContainsClause = "AND " + SqlContainsClause
            End If

            '***********************************************************************
            If isAdmin = False Then
                isAdmin = isGlobalSearcher
            End If
            UserSql = genAdminContentSql(SearchParmList, SecureID)
            '***********************************************************************

            Dim SqlPart2 As String = genWhereClause2(SecureID, SearchParmList)
            Dim SqlPart3 As String = genWhereClause3(SearchParmList)

            SqlToExecute = SqlContainsClause + vbCrLf + SqlPart2 + vbCrLf + SqlPart3

            If SqlToExecute.Length > 3 Then
                Dim II As Integer = InStr(SqlToExecute, " ")
                Dim tStr As String = ""
                tStr = SqlToExecute.Substring(0, II - 1)
                tStr = tStr.Trim
                If tStr.ToUpper.Equals("AND") Or tStr.ToUpper.Equals("OR") Then
                    SqlToExecute = SqlToExecute.Substring(II - 1)
                End If
            End If

            SqlToExecute = SqlHeader + vbCrLf + SqlToExecute
            If UserSql$.Length > 0 Then
                SqlToExecute += vbCrLf + UserSql
            End If
        End If

        If getCountOnly Then
        Else
            If ckWeights = True Then
                SqlToExecute = SqlToExecute + " and KEY_TBL.RANK >= " + nbrWeightMin.ToString + vbCrLf
            Else
            End If

            If ckWeights Then
                SqlToExecute += vbCrLf + " ORDER BY KEY_TBL.RANK DESC "
            Else
                SqlToExecute += vbCrLf + " order by [SourceName] "
            End If
        End If

        ValidateNotClauses(SecureID, SqlToExecute)

        DMA.ckFreetextRemoveOr(SqlToExecute, " FREETEXT (")
        Return SqlToExecute


    End Function

    Public Sub ValidateNotClauses(ByRef SecureID As Integer, ByRef SqlText$)
        If SqlText.Trim.Length = 0 Then
            Return
        End If


        Dim DoThis As Boolean = False


        If Not DoThis Then
            Return
        End If


        Dim I As Integer = 0
        Dim prevWord As String = ""
        Dim currWord As String = ""
        Dim CH As String = ""
        Dim aList As New ArrayList
        For I = 1 To SqlText.Length
            CH = Mid(SqlText, I, 1)
            If CH = Chr(34) Then
                I = I + 1
                CH = Mid(SqlText, I, 1)
                Do While CH <> Chr(34) And I <= SqlText.Length
                    I = I + 1
                    CH = Mid(SqlText, I, 1)
                Loop
            ElseIf CH = " " Then
                Mid(SqlText, I, 1) = Chr(254)
            End If
        Next
        Dim A$() = SqlText.Split(Chr(254))
        currWord = ""
        prevWord = ""
        For I = 0 To UBound(A)
            currWord = A(I)
            If UCase(currWord).Equals("NOT") And UCase(prevWord).Equals("AND") Then
                aList.Add(currWord)
            ElseIf UCase(currWord).Equals("OR") And UCase(prevWord).Equals("OR") Then
                '** DO nothing - user supplied multiple blanks
            ElseIf UCase(currWord).Equals("AND") And UCase(prevWord).Equals("OR") Then
                '** DO nothing - user supplied multiple blanks
            ElseIf UCase(currWord).Equals("OR") And UCase(prevWord).Equals("AND") Then
                aList.Add(currWord)
            ElseIf UCase(currWord).Equals("NOT") And UCase(prevWord).Equals("IS") Then
                aList.Add(currWord)
            ElseIf UCase(currWord).Equals("NOT") And Not UCase(prevWord).Equals("AND") Then
                currWord = "And Not"
                aList.Add(currWord)
            ElseIf UCase(currWord).Equals("FORMSOF") And Not UCase(prevWord).Equals("AND") Then
                currWord = "FormsOF"
                aList.Add(currWord)
            Else
                aList.Add(currWord)
            End If
            prevWord = currWord
        Next
        SqlText$ = ""
        For I = 0 To aList.Count - 1
            Try
                'If aList(I) = Nothing Then
                '    Debug.Print("nothing")
                '    Dim X# = 1
                'Else
                Dim tWord$ = aList(I)
                Dim EOL$ = ""
                Select Case LCase(tWord)
                    Case "select"
                        EOL = vbCrLf
                    Case "from"
                        EOL = vbCrLf
                    Case "where"
                        EOL = vbCrLf
                    Case "order"
                        EOL = vbCrLf
                    Case "and"
                        EOL = vbCrLf
                    Case "or"
                        EOL = vbCrLf
                End Select
                If InStr(tWord, ",") > 0 Then
                    EOL = vbCrLf + vbTab
                End If
                If InStr(tWord, "not", CompareMethod.Text) > 0 Then
                    Dim x# = 1
                End If
                If I = 0 Then
                    SqlText += EOL + aList(0).Trim
                Else
                    SqlText += " " + EOL + aList(I).Trim
                End If
                'End If
            Catch ex As Exception
                LogMessage(SecureID, gCurrUserGuidID, ex.Message)
            End Try
        Next
    End Sub

    Function genAdminContentSql(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer) As String

        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim UID As String = ""
        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim ckWeights As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False
        Dim LibraryName As String = ""
        Dim ckLimitToLib As Boolean = False

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        'UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        'UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        'UTIL.getSearchParmList("txtSearch", SearchString, SearchParmList)
        'UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************



        Dim UserSql$ = ""
        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
        If isAdmin Or isGlobalSearcher Then
            '** ECM WhereClause
            If ckLimitToLib = True Then
                'UserSql = UserSql + " AND SourceGuid in (SELECT [SourceGuid] FROM [LibraryItems] where LibraryName = '" + LibraryName$ + "')" + vbCrLf
                '** DO NOT PUT vbcrlf at the end of the below lines. That will cause problems in inserting PAGING.
                UserSql = UserSql + " AND SourceGuid in (" + GEN.genLibrarySearch(CurrUserGuidID, True, LibraryName, "Gen@13") + ")"
            Else
                If ckMyContent = True Then
                    UserSql = UserSql + " and ( DataSourceOwnerUserID = '" + CurrUserGuidID + "') " + vbCrLf
                Else
                    Dim gSearcher As Boolean = False
                    If isAdmin Or isGlobalSearcher Then
                        gSearcher = True
                    End If
                    Dim IncludeLibsSql As String = GEN.genLibrarySearch(CurrUserGuidID, True, gSearcher, "@Gen31")
                    UserSql = UserSql + IncludeLibsSql
                End If
                If ckMasterOnly Then
                    UserSql = UserSql + " and ( isMaster = 'Y' )       /*KEEP*/" + vbCrLf
                End If
                If content_ckDays Then
                    UserSql = UserSql + GEN.DocSearchCreatedWithinLastXDays(content_ckDays, content_nbrDays.ToString, True) + vbCrLf
                End If
            End If
        Else
            If ckLimitToLib = True Then
                Dim gSearcher As Boolean = False
                If isAdmin Or isGlobalSearcher Then
                    gSearcher = True
                End If
                UserSql = " AND SourceGuid in (" + GEN.genLibrarySearch(CurrUserGuidID, gSearcher, LibraryName, "Gen@01") + ")"
            Else
                'UserSql = UserSql + " and ( DataSourceOwnerUserID is not null OR isPublic = 'Y' )" + vbCrLf
                '** ECM WhereClause
                If ckMyContent = True Then
                    UserSql = UserSql + " and ( DataSourceOwnerUserID = '" + CurrUserGuidID + "') " + vbCrLf
                Else
                    Dim gSearcher As Boolean = False
                    If isAdmin Or isGlobalSearcher Then
                        gSearcher = True
                    End If
                    Dim IncludeLibsSql As String = GEN.genLibrarySearch(CurrUserGuidID, True, gSearcher, "@Gen32")
                    UserSql = UserSql + IncludeLibsSql
                End If

                If ckMasterOnly Then
                    UserSql = UserSql + " and ( isMaster = 'Y' )      /*KEEP*/" + vbCrLf
                End If
                If content_ckDays Then
                    UserSql = UserSql + GEN.DocSearchCreatedWithinLastXDays(content_ckDays, content_nbrDays.ToString, True) + vbCrLf
                End If
            End If
        End If
        Return UserSql
    End Function



    Function getSearchParmList(ByVal sKey As String, ByVal SearchParmList As SortedList(Of String, String)) As String
        Dim rVal As String = ""
        If SearchParmList.ContainsKey(sKey) Then
            rVal = SearchParmList.Item(sKey)
        End If
        Return rVal
    End Function

    Function GenEmailGeneratedSQL(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer) As String

        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim SqlHeader As String = ""
        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim ckWeights As Boolean = False

        Dim cbDateSelection As String = ""
        Dim calStart As Date = Nothing
        Dim calEnd As Date = Nothing
        Dim dtMailDateStart As Date = Nothing
        Dim dtMailDateEnd As Date = Nothing
        Dim cbFromAddr As String = ""
        Dim txtSubject As String = ""
        Dim txtCCPhrase As String = ""
        Dim cbFromName As String = ""
        Dim cbToName As String = ""
        Dim cbFolderFilter As String = ""
        Dim cbCCaddr As String = ""
        Dim ckLimitToLib As Boolean = Nothing
        Dim txtThesaurus As String = ""
        Dim UID As String = Nothing
        Dim cbThesaurusText As String = Nothing
        Dim LibraryName As String = Nothing
        Dim MinWeight As Integer = Nothing
        Dim bIncludeAllLibs As Boolean = Nothing
        Dim txtSearch As String = Nothing
        Dim ckLimitToExisting As Boolean = Nothing
        Dim ckBusiness As Boolean = False

        UTIL.getSearchParmList("email.cbCCaddr", cbCCaddr, SearchParmList)
        UTIL.getSearchParmList("email.cbFolderFilter", cbFolderFilter, SearchParmList)
        UTIL.getSearchParmList("email.cbToName", cbToName, SearchParmList)

        UTIL.getSearchParmList("email.cbFromName", cbFromName, SearchParmList)
        UTIL.getSearchParmList("email.txtCCPhrase", txtCCPhrase, SearchParmList)
        UTIL.getSearchParmList("email.txtSubject", txtSubject, SearchParmList)
        UTIL.getSearchParmList("email.cbFromAddr", cbFromAddr, SearchParmList)

        UTIL.getSearchParmList("email.dtMailDateEnd", dtMailDateEnd, SearchParmList)
        UTIL.getSearchParmList("email.dtMailDateStart", dtMailDateStart, SearchParmList)

        UTIL.getSearchParmList("email.dtMailDateEnd", dtMailDateEnd, SearchParmList)
        UTIL.getSearchParmList("email.dtMailDateStart", dtMailDateStart, SearchParmList)

        UTIL.getSearchParmList("email.cbDateSelection", cbDateSelection, SearchParmList)
        UTIL.getSearchParmList("email.calStart", calStart, SearchParmList)
        UTIL.getSearchParmList("email.calEnd", calEnd, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", UID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        If txtSearch = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        Else

        End If
        If getCountOnly = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If
        If UseExistingRecordsOnly = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        Else
            UseExistingRecordsOnly = ckLimitToExisting
        End If
        If ckWeights = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If
        If SqlHeader = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If

        If isAdmin = False Then
            isAdmin = isGlobalSearcher
        End If
        If isAdmin = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If
        If ckBusiness = Nothing Then
            Debug.Print("All required variables not set to call this function.")
            'return ""
        End If

        Dim SqlBody = ""
        Dim bCopyToClipboard As Boolean = True

        Dim UserSql As String = genAdminEmailSql(SecureID, SearchParmList)

        If getCountOnly Then
            SqlHeader += genEmailCountSql(SecureID)
        Else
            SqlHeader += getEmailTblCols(SecureID, ckWeights, ckBusiness, txtSearch)
        End If

        SqlHeader = SqlHeader + " WHERE " + vbCrLf

        Dim SqlContains As String = ""
        SqlContains = genContainsClause(SearchParmList, SecureID, "EMAIL")
        If SqlContains.Length > 0 Then
            SqlContains = "AND " + SqlContains
        End If

        Dim SqlParameters As String = genWhereClausePartII(SearchParmList)
        If SqlContains.Length > 0 Then
            SqlContains = SqlContains + vbCrLf + SqlParameters
        End If

        If SqlContains.Length > 0 Then
            Dim FirstWord As String = ""
            Dim iBlank As Integer = InStr(SqlContains, " ")
            If iBlank > 0 Then
                FirstWord = SqlContains.Substring(0, iBlank - 1)
                If FirstWord.ToUpper.Equals("AND") Or FirstWord.ToUpper.Equals("OR") Then
                    SqlContains = SqlContains.Substring(iBlank - 1)
                    SqlContains = SqlContains.Trim
                End If
            End If
        End If

        SqlBody = SqlBody + vbCrLf + SqlContains + vbCrLf
        SqlBody = SqlBody.Trim

        Dim SqlToExecute As String = ""

        If SqlContains.Trim.Length > 0 Then

            SqlToExecute = SqlHeader + SqlBody

            If getCountOnly Then
                SqlToExecute += UserSql
            Else
                SqlToExecute += vbCrLf + UserSql

                If ckWeights = True Then
                    SqlToExecute += "    and KEY_TBL.RANK >= " + nbrWeightMin.ToString + vbCrLf

                    Dim IncludeEmailAttachmentsQry$ = SqlToExecute + vbCrLf
                    'If ckIncludeAttachments.Checked Then
                    Dim ckIncludeAttachments As Boolean = True

                    If ckWeights = True Then
                        IncludeEmailAttachmentsSearchWeighted(SearchParmList, SecureID, UID, ckIncludeAttachments, ckWeights, ckBusiness, txtSearch, ckLimitToExisting, txtThesaurus$, cbThesaurusText$, MinWeight)
                    Else
                        IncludeEmailAttachmentsSearch(SearchParmList, SecureID, UID, ckIncludeAttachments, ckWeights, ckBusiness, txtSearch, ckLimitToExisting, txtThesaurus$, cbThesaurusText$, LibraryName$, bIncludeAllLibs)
                    End If

                    If ckIncludeAttachments = True And ckLimitToLib = False Then
                        '** ECM EmailAttachmentSearchList
                        If gMasterContentOnly = True Then
                        Else
                            'IncludeEmailAttachmentsQry$ = vbCrLf + " OR " + "([EmailGuid] in (select EmailGuid from EmailAttachmentSearchList where UserID = '" + UID + "'))" + vbCrLf
                        End If

                        'SqlBody = SqlBody + vbCrLf + IncludeEmailAttachmentsQry$ + vbCrLf
                        SqlToExecute = SqlToExecute + genUseExistingRecordsOnly(SecureID, UseExistingRecordsOnly, "EmailGuid")

                        'Clipboard.Clear()
                        'Clipboard.SetText(SqlBody)
                    End If
                    'SqlBody += vbCrLf + " or isPublic = 'Y' "
                    SqlToExecute += vbCrLf + " ORDER BY KEY_TBL.RANK DESC " + vbCrLf

                Else
                    Dim IncludeEmailAttachmentsQry$ = SqlBody + vbCrLf
                    Dim ckIncludeAttachments As Boolean = True
                    IncludeEmailAttachmentsSearch(SearchParmList, SecureID, UID, ckIncludeAttachments, ckWeights, ckBusiness, txtSearch, ckLimitToExisting, txtThesaurus$, cbThesaurusText$, LibraryName$, bIncludeAllLibs)
                    SqlToExecute += vbCrLf + " order by [SentOn] "
                End If
            End If
        Else
            SqlToExecute = ""
        End If

        If SqlToExecute.Length > 0 Then
            ValidateNotClauses(SecureID, SqlBody)
            DMA.ckFreetextRemoveOr(SqlBody, "freetext ((Body, Description, KeyWords, Subject, Attachment, Ocrtext)")
            DMA.ckFreetextRemoveOr(SqlBody, "freetext (body")
            DMA.ckFreetextRemoveOr(SqlBody, "freetext (subject")
        End If

        Return SqlToExecute

    End Function

    Sub IncludeEmailAttachmentsSearchWeighted(ByVal SearchParmList As SortedList(Of String, String), ByRef SecureID As Integer, ByVal UID As String, ByVal ckIncludeAttachments As Boolean, ByVal ckWeights As Boolean, ByVal ckBusiness As Boolean, ByVal SearchText$, ByVal ckLimitToExisting As Boolean, ByVal txtThesaurus$, ByVal cbThesaurusText$, ByVal MinWeight As Integer)
        If ckIncludeAttachments Then
            Dim SS$ = "delete FROM [EmailAttachmentSearchList] where [UserID] = '" + UID + "'"

            Dim BB As Boolean = ExecuteSqlNewConn(SecureID, SS)
            If Not BB Then
                MsgBox("Failed to initialize Attachment Content Search. Content search is not included in the results.")
            Else
                Dim EmailContentWhereClause$ = ""
                Dim insertSql$ = ""
                EmailContentWhereClause$ = genContainsClause(SearchParmList, SecureID, "EMAIL")

                Dim SS1$ = EmailContentWhereClause$.Replace("CONTAINS(BODY", "CONTAINS(Attachment")
                Dim SS2$ = SS1.Replace("CONTAINS(SUBJECT", "CONTAINS(OcrText")
                SS1 = SS2

                insertSql$ = SS1$
                If ckBusiness Then
                    GetSubContainsClauseWeighted(SecureID, UID, SearchText$, insertSql$, True, MinWeight)
                Else
                    GetSubContainsClauseWeighted(SecureID, UID, SearchText$, insertSql$, False, MinWeight)
                End If

                LOG.WriteToAttachmentSearchyLog("EmailAttachmentsSearch Weighted: " + insertSql + vbCrLf + vbCrLf)

                BB = Me.ExecuteSqlNewConn(SecureID, insertSql, False)
                If Not BB Then
                    LogMessage(SecureID, gCurrUserGuidID, "clsSQl:IncludeEmailAttachmentsSearch : Failed to insert Attachment Content Search. Content search is not included in the results.")
                    LogMessage(SecureID, gCurrUserGuidID, "clsSQl:IncludeEmailAttachmentsSearch : The SQL Stmt: " + insertSql$)
                    NbrOfErrors += 1
                    ''FrmMDIMain.SB.Text = "Errors: " + NbrOfErrors.ToString
                End If
            End If
        End If
    End Sub

    Sub GetSubContainsClauseWeighted(ByRef SecureID As Integer, ByVal UID As String, ByVal SearchText$, ByRef ContainsClause$, ByVal isFreetext As Boolean, ByVal MinWeight As Integer)
        Dim S As String = ""

        Dim I As Integer = 0

        Try
            Dim CorrectedSearchClause$ = CleanIsAboutSearchText(SecureID, SearchText$)
            CorrectedSearchClause$ = CorrectedSearchClause$.Trim
            If CorrectedSearchClause$.Length > 2 Then
                Dim C$ = Mid(CorrectedSearchClause$, CorrectedSearchClause$.Length, 1)
                If C.Equals(",") Then
                    CorrectedSearchClause$ = Mid(CorrectedSearchClause$, 1, CorrectedSearchClause$.Length - 1)
                    CorrectedSearchClause$ = CorrectedSearchClause$.Trim
                End If
            End If

            'CorrectedSearchClause$ = UTIL.RemoveOcrProblemChars(CorrectedSearchClause$)

            S = "insert EmailAttachmentSearchList ([EmailGuid], [UserID], Weight, RowID) " + vbCrLf

            S = S + "   SELECT [EmailGuid] ,[UserID], KEY_TBL.RANK, RowID " + vbCrLf
            S = S + "   FROM EmailAttachment " + vbCrLf
            S = S + "      INNER JOIN CONTAINSTABLE(EmailAttachment,attachment, 'ISABOUT (" + CorrectedSearchClause$ + ")' ) as KEY_TBL" + vbCrLf
            S = S + "        ON rowid = KEY_TBL.[KEY]" + vbCrLf
            S = S + "   WHERE " + vbCrLf

            If isFreetext = False Then
                ContainsClause$ = ContainsClause$ + " and ((UserID is not null) and UserID = '" + UID + "' and KEY_TBL.RANK > " + MinWeight.ToString + " or isPublic = 'Y')"
                ContainsClause$ = S + ContainsClause$ + vbCrLf
                Return
            End If

            S$ = ContainsClause$
            I = 0
            I = InStr(S, "(")
            Mid(ContainsClause, I, 1) = " "
            S = S.Trim
            I = InStr(S, ",")
            S = Mid(S, I)
            I = InStr(S, "/*")
            If I > 0 Then
                S = Mid(S, 1, I - 1)
            End If
            If isFreetext Then
                S = "FREETEXT ((Attachment, OcrText)" + S
            Else
                S = ContainsClause$
            End If

            ContainsClause$ = S + S + vbCrLf

        Catch ex As Exception
            Console.WriteLine(ex.Message)
        End Try
    End Sub

    Sub SubIn(ByRef SecureID As Integer, ByRef ParentString As String, ByVal WhatToChange As String, ByVal ChangeCharsToThis As String)
        Dim I As Integer = 0
        Dim J As Integer = 0
        Dim M As Integer = 0
        Dim N As Integer = 0
        Dim S1$ = ""
        Dim S2$ = ""


        M = WhatToChange$.Length
        N = ChangeCharsToThis$.Length


        Do While InStr(ParentString, WhatToChange, CompareMethod.Text) > 0
            I = InStr(ParentString, WhatToChange, CompareMethod.Text)
            S1 = Mid(ParentString, 1, I - 1)
            S2 = Mid(ParentString, I + M)
            Dim NewLine$ = S1 + ChangeCharsToThis + S2
            ParentString = NewLine
        Loop
    End Sub

    Sub SkipTokens(ByRef SecureID As Integer, ByVal tstr As String, ByVal i As Integer, ByRef j As Integer)
        Dim X As Integer = tstr.Trim.Length
        Dim Q$ = Chr(34)
        Dim CH As String = ""
        Dim Alphabet$ = " |+-^"
        Dim S$ = ""
        For j = i + 1 To X
            CH = Mid(tstr, j, 1)
            If InStr(1, Alphabet, CH) = 0 Then
                Exit For
                'We found the string
            End If
        Next
    End Sub

    Function PopulateThesaurusList(ByRef SecureID As Integer, ByVal ThesaurusList As ArrayList, ByRef ThesaurusWords As ArrayList, ByVal txtThesaurus$, ByVal cbThesaurusText$) As String

        Dim A1$(0)
        Dim A2$(0)
        Dim Token$ = ""
        Dim ExpandedWords$ = ""

        If InStr(1, txtThesaurus$, ",") > 0 Then
            A1 = txtThesaurus$.Split(",")
        Else
            A1(0) = txtThesaurus$
        End If

        For i As Integer = 0 To UBound(A1)
            Token = A1(i).Trim
            If InStr(Token, Chr(34)) > 0 Then
                ThesaurusWords.Add(Token)
            Else
                A2 = Token.Split(" ")
                For ii As Integer = 0 To UBound(A2)
                    ThesaurusWords.Add(A2(ii).Trim)
                Next
            End If

        Next

        ExpandedWords$ = getThesaurusWords(SecureID, ThesaurusList, ThesaurusWords)

        Return ExpandedWords$

    End Function

    Function isNotDelimiter(ByRef SecureID As Integer, ByVal CH$) As Boolean
        Dim Alphabet$ = " |+-^"
        If InStr(1, Alphabet, CH) = 0 Then
            Return True
        Else
            Return False
        End If
    End Function
    Function isDelimiter(ByRef SecureID As Integer, ByVal CH$) As Boolean
        Dim Alphabet$ = " |+-^"
        If InStr(1, Alphabet, CH) > 0 Then
            Return True
        Else
            Return False
        End If
    End Function
    Function isSyntaxChar(ByRef SecureID As Integer, ByVal CH$) As Boolean
        Dim Alphabet$ = "#|+-^~"
        If InStr(1, Alphabet, CH) > 0 Then
            Return True
        Else
            Return False
        End If
    End Function

    Function getThesaurusWords(ByRef SecureID As Integer, ByVal ThesaurusList As ArrayList, ByRef ThesaurusWords As ArrayList) As String

        Dim AllWords$ = ""
        Dim ThesaurusName$ = ""

        If gThesauri.Count = 1 Then
            For kk As Integer = 0 To gThesauri.Count - 1
                ThesaurusName$ = gThesauri(kk).ToString
                ThesaurusList.Add(ThesaurusName$)
            Next
            ''FrmMDIMain.SB.Text = "Custom thesauri used"
        ElseIf gThesauri.Count > 0 Then
            For kk As Integer = 0 To gThesauri.Count - 1
                ThesaurusName$ = gThesauri(kk).ToString
                ThesaurusList.Add(ThesaurusName$)
            Next
            ''FrmMDIMain.SB.Text = "Custom thesauri used"
        End If

        Dim ListOfPhrases$ = ""
        Dim ExpandedWords As New ArrayList

        If ThesaurusList.Count = 0 Then
            ThesaurusList.Add("Roget")
            ''** Get and use the default Thesaurus'
            ''me.getSystemParm("Default Thesaurus", ThesaurusName)
            'If ThesaurusName$.Equals("NA") Then
            '    Return ""
            'Else
            '    ThesaurusList.Add("Roget")
            'End If
        End If

        '** Get and use the default Thesaurus
        Dim TREX As New clsDb
        For Each T As String In ThesaurusList
            ThesaurusName$ = T
            Dim ThesaurusID As String = TREX.getThesaurusID(SecureID, ThesaurusName$)
            For Each token As String In ThesaurusWords
                If Not ExpandedWords.Contains(token) Then
                    ExpandedWords.Add(token)
                End If
                TREX.getSynonyms(SecureID, ThesaurusID, token$, ExpandedWords, True)
            Next
        Next
        TREX = Nothing

        For Each SS As String In ExpandedWords
            Dim tWord$ = SS
            tWord = tWord.Trim
            If InStr(tWord, Chr(34)) = 0 Then
                tWord = Chr(34) + tWord + Chr(34)
            End If
            ListOfPhrases$ = ListOfPhrases$ + Chr(9) + tWord + " or " + vbCrLf
        Next
        If ListOfPhrases$ = Nothing Then
            Return ""
        Else
            ListOfPhrases$ = ListOfPhrases$.Trim
            ListOfPhrases$ = Mid(ListOfPhrases$, 1, ListOfPhrases$.Length - 3)
            Return ListOfPhrases$
        End If

    End Function

    Function genAdminEmailSql(ByRef SecureID As Integer, ByRef SearchParmList As SortedList(Of String, String)) As String
        Dim UserSql As String = ""


        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim UID As String = ""
        Dim txtThesaurus As String = ""
        Dim cbThesaurusText As String = ""
        Dim LibraryName As String = ""
        Dim txtSearch As String = ""
        Dim ckLimitToLib As Boolean = False
        Dim ckLimitToExisting As Boolean = False
        Dim ckWeights As Boolean = False

        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)

        If isAdmin Or isGlobalSearcher Then
            '** ECM WhereClause
            If ckLimitToLib = True Then
                '** DO NOT PUT vbcrlf at the end of the below lines. That will cause problems in inserting PAGING.
                Dim gSearcher As Boolean = False
                If isAdmin = True Or isGlobalSearcher = True Then
                    gSearcher = True
                End If
                UserSql = UserSql + " AND EmailGuid in (" + GEN.genLibrarySearch(CurrUserGuidID, gSearcher, LibraryName, "Gen@10") + ")"
            Else
                If ckMyContent = True Then
                    UserSql = UserSql + " and ( UserID = '" + CurrUserGuidID + "') " + vbCrLf
                Else
                    Dim gSearcher As Boolean = False
                    If isAdmin = True Or isGlobalSearcher = True Then
                        gSearcher = True
                    End If
                    Dim IncludeLibsSql As String = GEN.genLibrarySearch(CurrUserGuidID, False, gSearcher, "@Gen34")
                    UserSql = UserSql + IncludeLibsSql
                End If
                If ckMasterOnly = True Then
                    UserSql = UserSql + " and ( isMaster = 'Y' )     /*KEEP*/" + vbCrLf
                End If
            End If
        Else
            If ckLimitToLib = True Then
                Dim gSearcher As Boolean = False
                If isAdmin = True Or isGlobalSearcher = True Then
                    gSearcher = True
                End If
                UserSql = UserSql + " AND EmailGuid in (" + GEN.genLibrarySearch(CurrUserGuidID, gSearcher, LibraryName, "Gen@11") + ")"
            Else
                '** ECM WhereClause
                If ckMyContent = True Then
                    UserSql = UserSql + " and ( UserID = '" + CurrUserGuidID + "') " + vbCrLf
                Else
                    Dim gSearcher As Boolean = False
                    If isAdmin = True Or isGlobalSearcher = True Then
                        gSearcher = True
                    End If
                    Dim IncludeLibsSql As String = GEN.genLibrarySearch(CurrUserGuidID, False, gSearcher, "@Gen30")
                    UserSql = UserSql + IncludeLibsSql
                End If

                If ckMasterOnly = True Then
                    UserSql = UserSql + " and ( isMaster = 'Y' )      /*KEEP*/" + vbCrLf
                End If

            End If
            ''** Removed by WDM 7/12/2008
            'UserSql = UserSql + " OR isPublic = 'Y' " + vbCrLf
            'UserSql = UserSql + " OR '" + CurrUserGuidID + "' in (select distinct UserID from LibraryUsers " + vbCrLf
            'UserSql = UserSql + "             where(LibraryName)" + vbCrLf
            'UserSql = UserSql + " in (Select LibraryName from LibrariesContainingUser))" + vbCrLf
            'UserSql = UserSql + " )" + vbCrLf
        End If
        Return UserSql
    End Function

    Function getTheRestOfTheToken(ByRef SecureID As Integer, ByVal S$, ByRef I As Integer) As String
        'We are sitting at the next character in the token, so go back to the beginning
        I = I - 1
        Dim Delimiters As String = " ,:+-^|"
        S = S.Trim
        Dim Token$ = ""
        Dim CH$ = ""
        CH = Mid(S, I, 1)
        Dim KK As Integer = S.Length


        '** If CH is a blank char, skip to the start of the next token
        If CH = " " Then
            Do Until (CH <> " " And I <= KK)
                I += 1
                CH = Mid(S, I, 1)
            Loop
        End If


        If CH = Chr(34) Then
            Token$ = ""
            Token$ += Chr(34)
            I += 1
            CH = Mid(S, I, 1)
            KK = S.Length
            Do Until (CH = Chr(34) And I <= KK)
                Token$ += CH
                I += 1
                CH = Mid(S, I, 1)
                If I > S.Length Then
                    Exit Do
                End If
            Loop
            Token$ += Chr(34)
            I += 1
        Else
            Token$ = CH
            I += 1
            CH = Mid(S, I, 1)
            KK = S.Length
            Do Until (InStr(Delimiters, CH) > 0 And I <= KK)
                Token$ += CH
                I += 1
                CH = Mid(S, I, 1)
                If I > S.Length Then
                    Exit Do
                End If
            Loop
            I += 1
        End If
        Return Token
    End Function

    Sub GetQuotedString(ByRef SecureID As Integer, ByVal tstr$, ByRef i As Integer, ByRef j As Integer, ByRef QuotedString$)
        Dim X As Integer = tstr.Trim.Length
        Dim Q$ = Chr(34)
        Dim CH As String = ""
        Dim Alphabet$ = " |+-^"
        Dim S$ = ""
        QuotedString$ = Q
        i += 1
        CH = Mid(tstr, i, 1)
        Do While CH <> Chr(34) And i <= tstr.Length
            QuotedString$ = QuotedString$ + CH
            i += 1
            CH = Mid(tstr, i, 1)
        Loop
        QuotedString$ = QuotedString$ + Q
    End Sub

    Function getNextToken(ByRef SecureID As Integer, ByVal S$, ByRef I As Integer, ByRef ReturnedDelimiter$) As String
        Dim Delimiters As String = " ,:+-^|()"
        S = S.Trim
        Dim Token$ = ""
        Dim CH$ = ""
        CH = Mid(S, I, 1)
        Dim KK As Integer = S.Length


        '** If CH is a blank char, skip to the start of the next token
        If CH = " " Then
            Do Until (CH <> " " And I <= KK)
                I += 1
                CH = Mid(S, I, 1)
            Loop
        End If


        If CH = Chr(34) Then
            Token$ = ""
            Token$ += Chr(34)
            I += 1
            CH = Mid(S, I, 1)
            KK = S.Length
            Do Until (CH = Chr(34) And I <= KK)
                Token$ += CH
                I += 1
                CH = Mid(S, I, 1)
                If I > S.Length Then
                    Exit Do
                End If
            Loop
            Token$ += Chr(34)
            'WDM May need to put back I += 1
        Else
            Token$ = CH
            I += 1
            CH = Mid(S, I, 1)
            KK = S.Length
            Do Until (InStr(Delimiters, CH) > 0 And I <= KK)
                Token$ += CH
                I += 1
                CH = Mid(S, I, 1)
                ReturnedDelimiter$ = CH
                If I > S.Length Then
                    Exit Do
                End If
            Loop
            'WDM May need to put back I += 1
        End If
        Return Token
    End Function

    Function genContenCountSql(ByVal SecureID As Integer) As String
        Dim DocsSql$ = "Select count(*) " + vbCrLf
        DocsSql += "FROM DataSource " + vbCrLf
        Return DocsSql
    End Function
    Function genEmailCountSql(ByVal SecureID As Integer) As String
        Dim DocsSql$ = "Select count(*) " + vbCrLf
        DocsSql += "FROM [email] " + vbCrLf
        Return DocsSql
    End Function

    Function getEmailTblCols(ByRef SecureID As Integer, ByVal ckWeights As Boolean, ByVal ckBusiness As Boolean, ByVal SearchText$) As String
        Dim SearchSql = ""


        If ckWeights = True Then
            If gMaxRecordsToFetch.Length > 0 Then
                If Val(gMaxRecordsToFetch) > 0 Then
                    SearchSql = " SELECT TOP " + gMaxRecordsToFetch
                Else
                    SearchSql = " SELECT "
                End If
            Else
                SearchSql = " SELECT "
            End If
            SearchSql = SearchSql + "  KEY_TBL.RANK, DS.SentOn " + vbCrLf
            SearchSql = SearchSql + " ,DS.ShortSubj" + vbCrLf
            SearchSql = SearchSql + " ,DS.SenderEmailAddress" + vbCrLf
            SearchSql = SearchSql + " ,DS.SenderName" + vbCrLf
            SearchSql = SearchSql + " ,DS.SentTO" + vbCrLf
            SearchSql = SearchSql + " ,DS.Body " + vbCrLf
            SearchSql = SearchSql + " ,DS.CC " + vbCrLf
            SearchSql = SearchSql + " ,DS.Bcc " + vbCrLf
            SearchSql = SearchSql + " ,DS.CreationTime" + vbCrLf
            SearchSql = SearchSql + " ,DS.AllRecipients" + vbCrLf
            SearchSql = SearchSql + " ,DS.ReceivedByName" + vbCrLf
            SearchSql = SearchSql + " ,DS.ReceivedTime " + vbCrLf
            SearchSql = SearchSql + " ,DS.MsgSize" + vbCrLf
            SearchSql = SearchSql + " ,DS.SUBJECT" + vbCrLf
            SearchSql = SearchSql + " ,DS.OriginalFolder " + vbCrLf
            SearchSql = SearchSql + " ,DS.EmailGuid, DS.RetentionExpirationDate, DS.isPublic, DS.UserID, DS.SourceTypeCode, DS.NbrAttachments , ' ' as RID, RepoSvrName  " + vbCrLf
            SearchSql = SearchSql + " FROM EMAIL AS DS " + vbCrLf
            SearchSql += genIsAbout(SecureID, ckWeights, ckBusiness, SearchText, True)
        Else
            If gMaxRecordsToFetch.Length > 0 Then
                If Val(gMaxRecordsToFetch) > 0 Then
                    SearchSql = " SELECT TOP " + gMaxRecordsToFetch
                Else
                    SearchSql = " SELECT "
                End If
            Else
                SearchSql = " SELECT "
            End If
            SearchSql = SearchSql + " [SentOn] " + vbCrLf
            SearchSql = SearchSql + " ,[ShortSubj]" + vbCrLf
            SearchSql = SearchSql + " ,[SenderEmailAddress]" + vbCrLf
            SearchSql = SearchSql + " ,[SenderName]" + vbCrLf
            SearchSql = SearchSql + " ,[SentTO]" + vbCrLf
            SearchSql = SearchSql + " ,[Body] " + vbCrLf
            SearchSql = SearchSql + " ,[CC] " + vbCrLf
            SearchSql = SearchSql + " ,[Bcc] " + vbCrLf
            SearchSql = SearchSql + " ,[CreationTime]" + vbCrLf
            SearchSql = SearchSql + " ,[AllRecipients]" + vbCrLf
            SearchSql = SearchSql + " ,[ReceivedByName]" + vbCrLf
            SearchSql = SearchSql + " ,[ReceivedTime] " + vbCrLf
            SearchSql = SearchSql + " ,[MsgSize]" + vbCrLf
            SearchSql = SearchSql + " ,[SUBJECT]" + vbCrLf
            SearchSql = SearchSql + " ,[OriginalFolder] " + vbCrLf
            SearchSql = SearchSql + " ,[EmailGuid], RetentionExpirationDate, isPublic, UserID, SourceTypeCode, NbrAttachments, ' ' as RID, RepoSvrName, 0 as RANK " + vbCrLf
            SearchSql = SearchSql + " FROM EMAIL " + vbCrLf
        End If
        Return SearchSql
    End Function

    Function getContentTblCols(ByRef SecureID As Integer, ByVal ckWeights As Boolean) As String
        Dim DocsSql$ = ""


        If ckWeights Then
            If gMaxRecordsToFetch.Length > 0 Then
                If Val(gMaxRecordsToFetch) > 0 Then
                    DocsSql = " SELECT TOP " + gMaxRecordsToFetch
                Else
                    DocsSql = " SELECT "
                End If
            Else
                DocsSql = " SELECT "
            End If
            DocsSql += vbTab + " KEY_TBL.RANK, DS.SourceName 	" + vbCrLf
            DocsSql += vbTab + ",DS.CreateDate " + vbCrLf
            DocsSql += vbTab + ",DS.VersionNbr 	" + vbCrLf
            DocsSql += vbTab + ",DS.LastAccessDate " + vbCrLf
            DocsSql += vbTab + ",DS.FileLength " + vbCrLf
            DocsSql += vbTab + ",DS.LastWriteTime " + vbCrLf
            DocsSql += vbTab + ",DS.OriginalFileType 		" + vbCrLf
            DocsSql += vbTab + ",DS.isPublic " + vbCrLf
            DocsSql += vbTab + ",DS.FQN " + vbCrLf
            DocsSql += vbTab + ",DS.SourceGuid " + vbCrLf
            DocsSql += vbTab + ",DS.DataSourceOwnerUserID, DS.FileDirectory, DS.RetentionExpirationDate, DS.isMaster, DS.StructuredData, DS.RepoSvrName " + vbCrLf
            DocsSql += "FROM DataSource as DS " + vbCrLf


        Else
            If gMaxRecordsToFetch.Length > 0 Then
                If Val(gMaxRecordsToFetch) > 0 Then
                    DocsSql = " SELECT TOP " + gMaxRecordsToFetch
                Else
                    DocsSql = " SELECT "
                End If
            Else
                DocsSql = " SELECT "
            End If
            DocsSql += vbTab + "[SourceName] 	" + vbCrLf
            DocsSql += vbTab + ",[CreateDate] " + vbCrLf
            DocsSql += vbTab + ",[VersionNbr] 	" + vbCrLf
            DocsSql += vbTab + ",[LastAccessDate] " + vbCrLf
            DocsSql += vbTab + ",[FileLength] " + vbCrLf
            DocsSql += vbTab + ",[LastWriteTime] " + vbCrLf
            DocsSql += vbTab + ",[SourceTypeCode] 		" + vbCrLf
            DocsSql += vbTab + ",[isPublic] " + vbCrLf
            DocsSql += vbTab + ",[FQN] " + vbCrLf
            DocsSql += vbTab + ",[SourceGuid] " + vbCrLf
            DocsSql += vbTab + ",[DataSourceOwnerUserID], FileDirectory, StructuredData, RepoSvrName " + vbCrLf
            DocsSql += "FROM DataSource " + vbCrLf
        End If


        Return DocsSql
    End Function

    Public Function genUseExistingRecordsOnly(ByRef SecureID As Integer, ByVal bUseExisting As Boolean, ByVal GuidColName$) As String
        If bUseExisting = False Then
            Return ""
        End If
        Dim DocsSql$ = " and " + GuidColName$ + " in (SELECT [DocGuid] FROM ActiveSearchGuids where  UserID = '" + gCurrUserGuidID + "')" + vbCrLf
        Return DocsSql
    End Function

    Function genIsAbout(ByRef SecureID As Integer, ByVal ckWeights As Boolean, ByVal useFreetext As Boolean, ByVal SearchText$, ByVal isEmailSearch As Boolean) As String
        If ckWeights = False Then
            Return ""
        End If
        Dim isAboutClause$ = ""
        Dim SearchStr$ = SearchText$
        Dim CorrectedSearchClause$ = CleanIsAboutSearchText(SecureID, SearchText$)
        CorrectedSearchClause$ = CorrectedSearchClause$.Trim
        If CorrectedSearchClause$.Length > 2 Then
            Dim C$ = Mid(CorrectedSearchClause$, CorrectedSearchClause$.Length, 1)
            If C.Equals(",") Then
                CorrectedSearchClause$ = Mid(CorrectedSearchClause$, 1, CorrectedSearchClause$.Length - 1)
                CorrectedSearchClause$ = CorrectedSearchClause$.Trim
            End If
        End If
        If isEmailSearch = True Then
            If useFreetext = True Then
                'INNER JOIN FREETEXTTABLE(dataSource, *,
                '    'ISABOUT ("dale miller", "susan miller", jessica )' ) AS KEY_TBL
                '    ON DS.SourceGuid = KEY_TBL.[KEY]
                isAboutClause$ += "INNER JOIN FREETEXTTABLE(EMAIL, *, " + vbCrLf
                isAboutClause$ += "     'ISABOUT ("
                isAboutClause$ += CorrectedSearchClause$
                isAboutClause$ += ")' ) as KEY_TBL" + vbCrLf
                isAboutClause$ += "          ON DS.EmailGuid = KEY_TBL.[KEY]" + vbCrLf
            Else
                '    INNER JOIN CONTAINSTABLE(dataSource, *,
                '    'ISABOUT ("dale miller",
                '"susan miller", jessica )' ) AS KEY_TBL
                '    ON DS.SourceGuid = KEY_TBL.[KEY]
                isAboutClause$ += "INNER JOIN CONTAINSTABLE(EMAIL, *, " + vbCrLf
                isAboutClause$ += "     'ISABOUT ("
                isAboutClause$ += CorrectedSearchClause$
                isAboutClause$ += ")' ) as KEY_TBL" + vbCrLf
                isAboutClause$ += "          ON DS.EmailGuid = KEY_TBL.[KEY]" + vbCrLf
            End If
        Else
            If useFreetext = True Then
                'INNER JOIN FREETEXTTABLE(dataSource, *,
                '    'ISABOUT ("dale miller", "susan miller", jessica )' ) AS KEY_TBL
                '    ON DS.SourceGuid = KEY_TBL.[KEY]
                isAboutClause$ += "INNER JOIN FREETEXTTABLE(dataSource, SourceImage, " + vbCrLf
                isAboutClause$ += "     'ISABOUT ("
                isAboutClause$ += CorrectedSearchClause$
                isAboutClause$ += ")' ) as KEY_TBL" + vbCrLf
                isAboutClause$ += "          ON DS.SourceGuid = KEY_TBL.[KEY]" + vbCrLf
            Else
                '    INNER JOIN CONTAINSTABLE(dataSource, *,
                '    'ISABOUT ("dale miller",
                '"susan miller", jessica )' ) AS KEY_TBL
                '    ON DS.SourceGuid = KEY_TBL.[KEY]
                isAboutClause$ += "INNER JOIN CONTAINSTABLE(dataSource, *, " + vbCrLf
                isAboutClause$ += "     'ISABOUT ("
                isAboutClause$ += CorrectedSearchClause$
                isAboutClause$ += ")' ) as KEY_TBL" + vbCrLf
                isAboutClause$ += "          ON DS.SourceGuid = KEY_TBL.[KEY]" + vbCrLf
            End If
        End If


        Return isAboutClause


    End Function

    Function CleanIsAboutSearchText(ByRef SecureID As Integer, ByVal SearchText$) As String
        Dim I As Integer = 0
        Dim A As New ArrayList
        Dim CH As String = ""
        Dim Token$ = ""
        Dim S$ = ""
        Dim SkipNextToken As Boolean = False
        For I = 1 To SearchText.Trim.Length
REEVAL:
            CH = Mid(SearchText, I, 1)
            If CH.Equals(Chr(34)) Then
                '** Get the token in quotes
                Dim PreceedingPlusSign As Boolean = False
                Dim PreceedingMinusSign As Boolean = False
                If Token.Equals("+") Or Token.Equals("-") Then
                    PreceedingPlusSign = True
                    Token = ""
                ElseIf Token.Equals("+") Or Token.Equals("-") Then
                    PreceedingMinusSign = True
                    Token = ""
                Else
                    If Token.Length > 0 Then
                        A.Add(Token)
                    End If
                    Token = ""
                End If


                '** go to the next one
                I += 1
                CH = Mid(SearchText, I, 1)
                Token += CH
                Do While CH <> Chr(34) And I <= SearchText.Length
                    I += 1
                    CH = Mid(SearchText, I, 1)
                    Token += CH
                Loop
                'Token = Chr(34) + Token
                If PreceedingPlusSign = True Then
                    Token = "+" + Chr(34) + Token
                    'Dim NextChar$ = getNextChar(SearchText$, I)
                    'If NextChar$ = "-" Then
                    '    '** We skip the next token in the stmt
                    'End If
                ElseIf PreceedingMinusSign = True Then
                    Token = "-" + Chr(34) + Token
                    'Dim NextChar$ = getNextChar(SearchText$, I)
                    'If NextChar$ = "+" Then
                    '    '** We skip the next token in the stmt
                    'End If
                Else
                    Token = Chr(34) + Token
                End If
                A.Add(Token)


                Token = ""
            ElseIf CH.Equals(" ") Or CH = " " Then
                '** Skip the blank spaces
                If Token.Equals("+") Or Token.Equals("-") Then
                    Debug.Print("Should not be here.")
                Else
                    If Token.Length > 0 Then
                        A.Add(Token)
                    End If
                    Token = ""
                End If


                '** go to the next one
                I += 1
                CH = Mid(SearchText, I, 1)
                Do While CH = " " And I <= SearchText.Length
                    I += 1
                    CH = Mid(SearchText, I, 1)
                Loop
                GoTo REEVAL
            ElseIf CH.Equals(",") Then
                '** Skip the blank spaces
                If Token.Length > 0 Then
                    A.Add(Token)
                End If
                Token = ""
            ElseIf CH.Equals("+") Then
                '** Skip the blank spaces
                Dim NextChar$ = getNextChar(SecureID, SearchText$, I)
                If NextChar$ = "-" Then
                    '** We skip the next token in the stmt
                    SkipNextToken = True
                    A.Add("~")
                End If
                Token += ""
            ElseIf CH.Equals("^") Then
                '** Skip the blank spaces
                Token += ""
            ElseIf CH.Equals("~") Then
                '** Skip the blank spaces
                Token += ""
            ElseIf CH.Equals("(") Or CH.Equals(")") Then
                '** Skip the blank spaces
                Token += ""
            ElseIf CH.Equals("-") Then
                '** Skip the blank spaces
                Dim NextChar$ = getNextChar(SecureID, SearchText$, I)
                If NextChar$ = "+" Then
                    '** We skip the next token in the stmt
                    SkipNextToken = True
                    A.Add("~")
                End If
                Token += ""
            ElseIf CH.Equals("|") Then
                '** Skip the blank spaces
                Token += ""
            Else
                Token += CH
            End If
        Next
        If Token.Length > 0 Then
            A.Add(Token)
        End If
        S = ""
        Dim skipNextWord As Boolean = False
        For I = 0 To A.Count - 1
            Dim tWord$ = A(I)
            tWord$ = UCase(tWord$)
            If tWord.Equals("~") Then
                '** we skip the next word period
                skipNextWord = True
            ElseIf tWord.Equals("AND") Then
            ElseIf tWord.Equals("OR") Then
            ElseIf tWord.Equals("NOT") Then
                skipNextWord = True
            ElseIf tWord.Equals("NEAR") Then
            Else
                If skipNextWord Then
                    skipNextWord = False
                Else
                    If I = A.Count - 1 Then
                        S = S + A(I).ToString
                    Else
                        S = S + A(I).ToString + ", "
                    End If
                    If dDebug Then
                        Debug.Print(S)
                    End If
                End If
            End If
        Next
        Return S
    End Function

    Function getNextChar(ByRef SecureID As Integer, ByVal S$, ByVal i As Integer) As String
        Dim CH$ = ""
        If S.Trim.Length > (i + 1) Then
            i += 1
            CH = Mid(S, i, 1)
        End If
        Do While CH = " " And i <= S.Length
            i += 1
            If S.Trim.Length < (i + 1) Then
                CH = Mid(S, i, 1)
            End If
        Loop
        Return CH
    End Function

    Function genIsInLibrariesSql(ByVal SecureID As Integer) As Boolean

        Dim B As Boolean = False
        Dim S$ = ""
        S = S + " delete from TempUserLibItems where UserID = '" + gCurrUserGuidID + "'"
        Try
            B = ExecuteSqlNewConn(SecureID, S)
            If B Then
                S = ""
                S = S + " INSERT INTO TempUserLibItems (SourceGuid, Userid)" + vbCrLf
                S = S + " select distinct SourceGuid, '" + gCurrUserGuidID + "' from LibraryItems" + vbCrLf
                S = S + " where LibraryName in (" + vbCrLf
                S = S + " select distinct LibraryName from GroupLibraryAccess " + vbCrLf
                S = S + " where GroupName in " + vbCrLf
                S = S + " (select distinct GroupName from GroupUsers where UserID = '" + gCurrUserGuidID + "')" + vbCrLf
                S = S + " union " + vbCrLf
                S = S + " select distinct LibraryName from LibraryUsers where UserID = '" + gCurrUserGuidID + "'"
                S = S + " )" + vbCrLf
                B = ExecuteSqlNewConn(SecureID, S)

            End If
        Catch ex As Exception
            B = False
            LogMessage(SecureID, gCurrUserGuidID, "ERROR genIsInLibrariesSql: " + ex.Message + vbCrLf + S)
        End Try

        Return B

    End Function

    Public Function getAllColsSql(ByRef SecureID As Integer, ByVal TblID$) As SqlDataReader
        Dim s$ = "Select C.name, C.column_id, "
        s = s + " C.system_type_id , C.max_length, "
        s = s + " C.precision, C.scale, C.is_nullable,"
        s = s + " C.is_identity, T.name  "
        s = s + " from sys.objects T,  sys.columns C"
        s = s + " where T.type = 'U' and"
        s = s + " C.object_id = T.object_id and"
        s = s + " T.object_id = " + TblID$ + " "
        s = s + " order by C.column_id"

        Dim rsData As SqlDataReader = Nothing
        Try
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(s, CONN) : rsData = command.ExecuteReader()
        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "clsSql : getAllColsSql : 677 : " + ex.Message)
        End Try
        Return rsData
    End Function

    Function genSingleLibrarySelect(ByRef SecureID As Integer, ByVal UID As String, ByVal EmailContainsClause As String, ByVal LibraryName$) As String
        Dim S$ = ""

        'S = S + " and EmailGuid in (SELECT [SourceGuid] FROM [LibraryItems] where LibraryName = '" + LibraryName$ + "')"
        '** DO NOT PUT vbcrlf at the end of the below lines. That will cause problems in inserting PAGING.
        Dim gSearcher As Boolean = False
        If isAdmin(SecureID, UID) = True Or isGlobalSearcher(SecureID, UID) = True Then
            gSearcher = True
        End If

        S = S + " AND EmailGuid in (" + GEN.genLibrarySearch(gCurrUserGuidID, gSearcher, LibraryName, "Gen@12") + ")"

        Return S
    End Function

    Sub AddLibraryItems(ByRef SecureID As Integer, ByVal SourceGuid As String, _
    ByVal ItemTitle As String, _
    ByVal ItemType As String, _
    ByVal LibraryItemGuid As String,
    ByVal DataSourceOwnerUserID As String, _
    ByVal LibraryOwnerUserID As String, _
    ByVal LibraryName As String, _
    ByVal AddedByUserGuidId As String, _
    ByRef RC As Boolean, ByRef rMsg As String)

        ItemTitle = UTIL.RemoveSingleQuotes(ItemTitle)
        ItemType = UTIL.RemoveSingleQuotes(ItemType)
        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
        LibraryOwnerUserID = UTIL.RemoveSingleQuotes(LibraryOwnerUserID)
        AddedByUserGuidId = UTIL.RemoveSingleQuotes(AddedByUserGuidId)

        Dim s As String = ""
        s = s + " INSERT INTO LibraryItems("
        s = s + "SourceGuid,"
        s = s + "ItemTitle,"
        s = s + "ItemType,"
        s = s + "LibraryItemGuid,"
        s = s + "DataSourceOwnerUserID,"
        s = s + "LibraryOwnerUserID,"
        s = s + "LibraryName,"
        s = s + "AddedByUserGuidId) values ("
        s = s + "'" + SourceGuid + "'" + ","
        s = s + "'" + ItemTitle + "'" + ","
        s = s + "'" + ItemType + "'" + ","
        s = s + "'" + LibraryItemGuid + "'" + ","
        s = s + "'" + DataSourceOwnerUserID + "'" + ","
        s = s + "'" + LibraryOwnerUserID + "'" + ","
        s = s + "'" + LibraryName + "'" + ","
        s = s + "'" + AddedByUserGuidId + "'" + ")"

        RC = ExecuteSqlNewConn(SecureID, s)

        If RC Then
            rMsg = ""
        Else
            rMsg = ItemTitle + " / " + SourceGuid + "' - library '" + LibraryName + "'."
        End If

    End Sub

    Public Shared Function Compress(ByVal BufferToCompress As Byte()) As Byte()
        Dim ms As New MemoryStream()
        Dim zip As New GZipStream(ms, CompressionMode.Compress, True)
        zip.Write(BufferToCompress, 0, BufferToCompress.Length)
        zip.Close()
        ms.Position = 0

        Dim outStream As New MemoryStream()

        Dim compressed As Byte() = New Byte(ms.Length - 1) {}
        ms.Read(compressed, 0, compressed.Length)

        Dim gzBuffer As Byte() = New Byte(compressed.Length + 3) {}
        Buffer.BlockCopy(compressed, 0, gzBuffer, 4, compressed.Length)
        Buffer.BlockCopy(BitConverter.GetBytes(BufferToCompress.Length), 0, gzBuffer, 0, 4)
        Return gzBuffer

    End Function

    Public Shared Function Decompress(ByVal BufferToDecompress As Byte()) As Byte()
        Dim ms As New MemoryStream()
        Dim msgLength As Integer = BitConverter.ToInt32(BufferToDecompress, 0)
        ms.Write(BufferToDecompress, 4, BufferToDecompress.Length - 4)

        Dim buffer As Byte() = New Byte(msgLength - 1) {}

        ms.Position = 0
        Dim zip As New GZipStream(ms, CompressionMode.Decompress)
        zip.Read(buffer, 0, buffer.Length)

        Return buffer
    End Function

    Function GetEmailAttachments(ByRef SecureID As Integer, ByVal CurrEmailGuid As String) As List(Of DS_Attachments)

        Dim ListOfItems As New List(Of DS_Attachments)
        Dim AttachmentName As String = ""
        Dim RowID As Integer = 0
        Dim EmailGuid As String = ""

        Dim AttchQry As String = "Select AttachmentName, RowID, EmailGuid FROM EMAILAttachment  WHERE EmailGuid = '" + CurrEmailGuid + "' order by AttachmentName "

        Try

            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(AttchQry, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    AttachmentName = RSData.GetValue(0).ToString
                    RowID = RSData.GetInt32(1)
                    EmailGuid = RSData.GetValue(2).ToString

                    Dim Item As New DS_Attachments
                    Item.AttachmentName = AttachmentName
                    Item.RowID = RowID
                    Item.EmailGuid = EmailGuid

                    ListOfItems.Add(Item)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing

        Catch ex As Exception
            ListOfItems = Nothing
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 3004 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 966 : " + ex.Message)
        End Try
        Return ListOfItems

    End Function

    Function GetFilesInZipDetail(ByRef SecureID As Integer, ByVal SourceGuid As String, ByRef RC As Boolean) As List(Of DS_ZipFiles)

        Dim iZipFile As Integer = Me.iCount(SecureID, "Select Count(*) FROM DataSource WHERE SourceGuid = '" + SourceGuid + "' and (IsContainedWithinZipFile = 'Y' or isZipFIle = 'Y') ")
        If iZipFile = 0 Then
            Return Nothing
        End If

        Dim iCnt As Integer = Me.iCount(SecureID, "Select Count(*) FROM DataSource WHERE ParentGuid = '" + SourceGuid + "' or SourceGuid = '" + SourceGuid + "'")
        If iCnt = 0 Then
            Return Nothing
        End If

        RC = True
        Dim ListOfItems As New List(Of DS_ZipFiles)
        Dim SourceName As String = ""
        Dim RowID As Integer = 0
        Dim isParent As Boolean = False
        Dim AttchQry As String = "Select SourceName, SourceGuid FROM DataSource WHERE ParentGuid = '" + SourceGuid + "' or SourceGuid = '" + SourceGuid + "' order by SourceName "

        Try

            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(AttchQry, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    SourceName = RSData.GetValue(0).ToString
                    SourceGuid = RSData.GetValue(1).ToString
                    If SourceGuid.Equals(SourceGuid) Then
                        isParent = True
                    Else
                        isParent = False
                    End If


                    Dim Item As New DS_ZipFiles
                    Item.SourceName = SourceName
                    Item.SourceGuid = SourceGuid
                    Item.isParent = isParent

                    ListOfItems.Add(Item)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing

        Catch ex As Exception
            RC = False
            ListOfItems = Nothing
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 3004 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 966 : " + ex.Message)
        End Try

        Return ListOfItems

    End Function

    Sub LogMessage(ByRef SecureID As Integer, ByVal UID As String, ByVal sMessage As String)
        If UID.Length = 0 Then
            UID = gCurrUserGuidID
        End If
        If UID.Length = 0 Then
            UID = "UKN"
        End If
        sMessage = sMessage.Replace("'", "`")
        UID = UID.Replace("'", "`")
        Dim S As String = "INSERT INTO [Logs] ([UID],[ErrorMsg]) VALUES ('" + UID + "','" + sMessage + " / SSID: " + SecureID.ToString + "')"
        Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
        Console.WriteLine("B=" + B.ToString)
    End Sub
    Sub CleanLog(ByRef SecureID As Integer)
        Dim S As String = ""
        S = "DELETE FROM [Logs] WHERE DATEDIFF(day,getdate(),[EntryDate]) > 3"
        Dim B As Boolean = ExecuteSqlNewConn(SecureID, S)
    End Sub

    Function getThesaurusID(ByRef SecureID As Integer, ByVal ThesaurusName As String) As String

        If ThesaurusName.Trim.Length = 0 Then
            ThesaurusName = getDefaultThesaurus(SecureID)
        End If

        Dim S$ = ""
        S = S + " SELECT [ThesaurusID] FROM [Thesaurus] where [ThesaurusName] = '" + ThesaurusName + "'"
        Dim TID$ = ""
        Dim rsData As SqlDataReader = Nothing

        Try
            Dim Auth$ = ""
            Dim b As Boolean = False
            Dim CS As String = getThesaurusConnectionString(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(S, CONN)
            rsData = command.ExecuteReader()
            If rsData.HasRows Then
                rsData.Read()
                TID$ = rsData.GetValue(0).ToString
            Else
                MsgBox("Did not find the Thesaurus listed in the DB - aborting: " + ThesaurusName + ", so the query will continue without a thesaurus.")
                LOG.WriteToSqlLog("clsDatabase : getThesaurusID : ERROR 3963 : " + vbCrLf + S)
            End If

        Catch ex As Exception
            'xtrace(SecureID,12330, "clsDataBase:GetRowByKey",ex)
            LOG.WriteToSqlLog("clsDatabase : getThesaurusID : 3963 : " + ex.Message)
            Return Nothing
        End Try
        If rsData.IsClosed Then
        Else
            rsData.Close()
        End If
        rsData = Nothing
        Return TID
    End Function

    Public Function getThesaurusConnectionString(ByRef SecureID As Integer) As String
        If ThesaurusConnectionString = "" Then
            setConnThesaurusStr(SecureID)
        End If
        Return ThesaurusConnectionString
    End Function

    Public Sub setConnThesaurusStr(ByRef SecureID As Integer)
        Dim S As String = ""
        S = System.Configuration.ConfigurationManager.AppSettings("ECM_ThesaurusConnectionString").ToString
        ThesaurusConnectionString = S
    End Sub

    Sub PopulateSecureLoginCB(ByRef SecureID As Integer, ByRef CB As System.Collections.Generic.List(Of String), ByVal CompanyID As String, ByRef RC As Boolean, ByRef RetMsg As String)

        RC = True
        CB.Clear()

        Dim S As String = "select RepoID from dbo.SecureAttach where CompanyID = '" + CompanyID + "'"
        Dim i As Integer = 0

        Dim SecurityCS As String = System.Configuration.ConfigurationManager.AppSettings("ECMSecureLogin")
        SecurityCS = ENC.AES256DecryptString(SecurityCS)

        Dim rsData As SqlDataReader = Nothing
        Dim CONN As New SqlConnection(SecurityCS)
        Dim command As New SqlCommand
        Dim sItem As String = ""

        Try
            CONN.Open()
            command.Connection = CONN
            command.CommandText = S

            rsData = command.ExecuteReader()

            If rsData.HasRows Then
                Do While rsData.Read()
                    sItem = rsData.GetValue(0).ToString
                    CB.Add(sItem)
                Loop
            Else
                CB.Add("NO Repositories available")
                RetMsg = "NO Repositories available"
                RC = False
            End If
        Catch ex As Exception
            xTrace(666, 1, "PopulateSecureLoginCB", ex.Message)
            RC = False
        Finally
            If rsData IsNot Nothing Then
                If Not rsData.IsClosed Then
                    rsData.Close()
                End If
                rsData = Nothing
            End If

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
        End Try

        GC.Collect()
        GC.WaitForFullGCApproach()

    End Sub

    Sub PopulateSecureLoginCB_V2(ByRef SecureID As Integer, ByRef AllRepos As String, ByVal CompanyID As String, ByRef RC As Boolean, ByRef RetMsg As String)

        RC = True
        AllRepos = ""

        Dim S As String = "select RepoID from dbo.SecureAttach where CompanyID = '" + CompanyID + "'"
        Dim i As Integer = 0

        Dim SecurityCS As String = System.Configuration.ConfigurationManager.AppSettings("ECMSecureLogin")
        SecurityCS = ENC.AES256DecryptString(SecurityCS)

        Dim rsData As SqlDataReader = Nothing
        Dim CONN As New SqlConnection(SecurityCS)
        Dim command As New SqlCommand
        Dim sItem As String = ""

        Try
            CONN.Open()
            command.Connection = CONN
            command.CommandText = S

            rsData = command.ExecuteReader()

            If rsData.HasRows Then
                Do While rsData.Read()
                    sItem = rsData.GetValue(0).ToString
                    AllRepos += sItem + Chr(254)
                Loop
            Else
                AllRepos = "NO Repositories available"
                RetMsg = "NO Repositories available"
                RC = False
            End If
        Catch ex As Exception
            xTrace(666, 1, "PopulateSecureLoginCB", ex.Message)
            RC = False
        Finally
            If rsData IsNot Nothing Then
                If Not rsData.IsClosed Then
                    rsData.Close()
                End If
                rsData = Nothing
            End If

            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
        End Try

        GC.Collect()
        GC.WaitForFullGCApproach()

    End Sub

    Function ActiveSession(ByRef SecureID As Integer, ByVal SessionGuid As Guid, ByVal ParmName As String, ByVal ParmValue As String) As Boolean
        Dim iCnt As Integer = -1
        Dim S As String = ""
        Dim B As Boolean = True

        S = "Select Count(*) from ActiveSession where SessionGuid = '" + SessionGuid.ToString + "' and Parm = '" + ParmName + "' "

        iCnt = iCount(SecureID, S)

        If iCnt = 0 Then
            Try
                S = ""
                S += " INSERT INTO [ActiveSession]" + vbCrLf
                S += " ([SessionGuid]" + vbCrLf
                S += " ,[Parm]" + vbCrLf
                S += " ,[ParmVal])" + vbCrLf
                S += " VALUES " + vbCrLf
                S += " ('" + SessionGuid.ToString + "'" + vbCrLf
                S += " ,'" + ParmName + "'" + vbCrLf
                S += " ,'" + ParmValue + "')" + vbCrLf
                B = ExecuteSqlNewConn(SecureID, S)
            Catch ex As Exception
                LOG.WriteToArchiveLog("ERROR ActiveSession 200: " + ex.ToString + vbCrLf + S)
                B = False
            End Try
        End If
        If iCnt > 0 Then
            Try
                S = ""
                S += " UPDATE [ActiveSession]" + vbCrLf
                S += " SET ParmVal = '" + ParmValue + "' " + vbCrLf
                S += " WHERE SessionGuid = '" + SessionGuid.ToString + "' and Parm = '" + ParmName + "' "
                B = ExecuteSqlNewConn(SecureID, S)
            Catch ex As Exception
                LOG.WriteToArchiveLog("ERROR ActiveSession 200: " + ex.ToString + vbCrLf + S)
                B = False
            End Try
        End If
        Return B
    End Function

    Public Function ActiveSessionGetVal(ByRef SecureID As Integer, ByRef SessionGuid As Guid, ByRef ParmName As String) As String
        Dim iCnt As Integer = -1
        Dim S As String = ""
        Dim B As Boolean = True
        Dim ParmVal As String = ""

        S = "Select ParmVal from ActiveSession where SessionGuid = '" + SessionGuid.ToString + "' and ParmName = '" + ParmName + "' "

        Dim RSData As SqlDataReader = Nothing
        Dim CS As String = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        Dim command As New SqlCommand

        Try
            CONN.Open()
            command.Connection = CONN
            command.CommandText = S
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                ParmVal = RSData.GetValue(0).ToString
            Else
                ParmVal = ""
            End If
        Catch ex As Exception
            LOG.WriteToArchiveLog("ERROR ActiveSessionGetVal: " + ex.Message + vbCrLf + S)
        Finally
            If RSData.IsClosed Then
            Else
                RSData.Close()
            End If
            RSData = Nothing
            command.Dispose()
        End Try

        GC.Collect()
        GC.WaitForPendingFinalizers()

        Return ParmVal
    End Function

    Function getListOfStrings(ByRef SecureID As Integer, ByRef ListOfItems As List(Of String), ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = False
        Try
            ListOfItems.Clear()
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    ListOfItems.Add(item)
                Loop
            Else
                ListOfItems.Clear()
            End If
            RSData.Close()
            RSData = Nothing
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            B = False
        Finally
            GC.Collect()
            B = True
        End Try
        Return B
    End Function

    Function getListOfStrings1(ByRef SecureID As Integer, ByRef ListOfItems As List(Of String), ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = False
        Try
            ListOfItems.Clear()
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    ListOfItems.Add(item)
                Loop
            Else
                ListOfItems.Clear()
            End If
            RSData.Close()
            RSData = Nothing
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            B = False
        Finally
            GC.Collect()
            B = True
        End Try
        Return B
    End Function
    Function getListOfStrings2(ByRef SecureID As Integer, ByRef ListOfItems As List(Of String), ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = False
        Try
            ListOfItems.Clear()
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    ListOfItems.Add(item)
                Loop
            Else
                ListOfItems.Clear()
            End If
            RSData.Close()
            RSData = Nothing
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            B = False
        Finally
            GC.Collect()
            B = True
        End Try
        Return B
    End Function
    Function getListOfStrings3(ByRef SecureID As Integer, ByRef ListOfItems As List(Of String), ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = False
        Try
            ListOfItems.Clear()
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    ListOfItems.Add(item)
                Loop
            Else
                ListOfItems.Clear()
            End If
            RSData.Close()
            RSData = Nothing
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            B = False
        Finally
            GC.Collect()
            B = True
        End Try
        Return B
    End Function
    Function getListOfStrings4(ByRef SecureID As Integer, ByRef ListOfItems As List(Of String), ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = False
        Try
            ListOfItems.Clear()
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    ListOfItems.Add(item)
                Loop
            Else
                ListOfItems.Clear()
            End If
            RSData.Close()
            RSData = Nothing
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            B = False
        Finally
            GC.Collect()
            B = True
        End Try
        Return B
    End Function
    Function getListOfStrings01(ByRef SecureID As Integer, ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As List(Of DS_ListOfStrings01)


        Dim ListOfItems As New System.Collections.Generic.List(Of DS_ListOfStrings01)

        Try
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(MySql, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    Dim CD As New DS_ListOfStrings01
                    CD.strItem = item
                    ListOfItems.Add(CD)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing
            RC = True
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            RC = False
        Finally
            GC.Collect()
        End Try
        Return ListOfItems
    End Function
    Function getListOfStrings02(ByRef SecureID As Integer, ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As List(Of DS_ListOfStrings02)


        Dim ListOfItems As New System.Collections.Generic.List(Of DS_ListOfStrings02)

        Try
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(MySql, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    Dim CD As New DS_ListOfStrings02
                    CD.strItem = item
                    ListOfItems.Add(CD)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing
            RC = True
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            RC = False
        Finally
            GC.Collect()
        End Try
        Return ListOfItems
    End Function
    Function getListOfStrings03(ByRef SecureID As Integer, ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As List(Of DS_ListOfStrings03)


        Dim ListOfItems As New System.Collections.Generic.List(Of DS_ListOfStrings03)

        Try
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(MySql, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    Dim CD As New DS_ListOfStrings03
                    CD.strItem = item
                    ListOfItems.Add(CD)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing
            RC = True
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            RC = False
        Finally
            GC.Collect()
        End Try
        Return ListOfItems
    End Function
    Function getListOfStrings04(ByRef SecureID As Integer, ByVal MySql As String, ByRef RC As Boolean, ByRef RetMsg As String) As List(Of DS_ListOfStrings04)


        Dim ListOfItems As New System.Collections.Generic.List(Of DS_ListOfStrings04)

        Try
            Dim item As String = ""
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(MySql, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    item = RSData.GetValue(0).ToString
                    Dim CD As New DS_ListOfStrings04
                    CD.strItem = item
                    ListOfItems.Add(CD)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing
            RC = True
        Catch ex As Exception
            xTrace(SecureID, 12350, "clsDataBase:getListOfStrings", ex.Message)
            RC = False
        Finally
            GC.Collect()
        End Try
        Return ListOfItems
    End Function
    Function PopulateLibraryGrid(ByRef SecureID As Integer, ByVal UserID As String) As System.Collections.Generic.List(Of DS_VLibraryStats)

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_VLibraryStats)

        Dim MySql As String = ""
        MySql += "Select "
        MySql += "[LibraryName], " + vbCrLf
        MySql += "[isPublic], " + vbCrLf
        MySql += "[Items], " + vbCrLf
        MySql += "[Members]  " + vbCrLf
        MySql += " From [vLibraryStats]"
        MySql += " where [UserID] = '" + UserID + "' "
        MySql += " Order by  [LibraryName]"

        Dim rsDataQry As SqlDataReader = Nothing
        Dim LibraryName As String = ""
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(MySql, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_VLibraryStats

                    Try
                        LibraryName = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        LibraryName = ""
                    End Try
                    Try
                        isPublic = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        isPublic = ""
                    End Try
                    Try
                        Items = rsDataQry.GetInt32(2)
                    Catch ex As Exception
                        Items = Nothing
                    End Try
                    Try
                        Members = rsDataQry.GetInt32(3)
                    Catch ex As Exception
                        Members = Nothing
                    End Try

                    CD.LibraryName = LibraryName
                    CD.isPublic = isPublic
                    CD.Items = Items
                    CD.Members = Members

                    ListOfRows.Add(CD)

                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateLibraryGrid", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateLibraryGrid", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateLibraryGrid", MySql)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function

    Function PopulateCoOwnerGrid(ByVal SecureID As Integer, ByVal UID As String) As System.Collections.Generic.List(Of DS_CoOwner)

        Dim S$ = ""
        S = S + " SELECT Users.UserName as CoOwnerName, Users.UserLoginID as CoOwnerID, RowID"
        S = S + " FROM   CoOwner INNER JOIN"
        S = S + " Users  ON CoOwner.CurrentOwnerUserID = Users.UserID"
        S = S + " WHERE  (CoOwner.PreviousOwnerUserID = '" + UID + "')"
        S = S + " ORDER  BY Users.UserName"



        Dim CoOwnerName As String = ""
        Dim CoOwnerID As String = ""
        Dim RowID As Integer = -1

        Dim rsDataQry As SqlDataReader = Nothing
        Dim LibraryName As String = ""
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_CoOwner)
        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_CoOwner
                    Try
                        CoOwnerName = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        CoOwnerName = ""
                    End Try
                    Try
                        CoOwnerID = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        CoOwnerID = ""
                    End Try

                    Try
                        RowID = rsDataQry.GetInt32(2)
                    Catch ex As Exception
                        RowID = -1
                    End Try

                    CD.CoOwnerName = CoOwnerName
                    CD.CoOwnerID = CoOwnerID
                    CD.RowID = RowID

                    ListOfRows.Add(CD)
                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateCoOwnerGrid", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateCoOwnerGrid", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateCoOwnerGrid", S)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows


    End Function

    Function PopulateUserGrid(ByRef SecureID As Integer, ByVal UserID As String, ByVal isAdmin As Boolean) As System.Collections.Generic.List(Of DS_VUserGrid)

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_VUserGrid)

        Dim MySql As String = ""
        MySql += "Select "
        MySql += "[UserName], " + vbCrLf
        MySql += "[UserID], " + vbCrLf
        MySql += "[EmailAddress], " + vbCrLf
        MySql += "[Admin], " + vbCrLf
        MySql += "[isActive], " + vbCrLf
        MySql += "[UserLoginID], " + vbCrLf
        MySql += "[ClientOnly], " + vbCrLf
        MySql += "[HiveConnectionName], " + vbCrLf
        MySql += "[HiveActive], " + vbCrLf
        MySql += "[RepoSvrName], " + vbCrLf
        MySql += "[RowCreationDate], " + vbCrLf
        MySql += "[RowLastModDate]  " + vbCrLf
        MySql += " From [VUserGrid]"
        If Not isAdmin Then
            MySql += " Where Userid = '" + UserID + "' "
        End If
        MySql += " Order by  [UserName]"

        Dim UserName As String = ""
        Dim EmailAddress As String = ""
        Dim Admin As String = ""
        Dim isActive As String = ""
        Dim UserLoginID As String = ""
        Dim ClientOnly As Boolean = False
        Dim HiveConnectionName As String = ""
        Dim HiveActive As Boolean = False
        Dim RepoSvrName As String = ""
        Dim RowCreationDate As Date = Nothing
        Dim RowLastModDate As Date = Nothing

        Dim rsDataQry As SqlDataReader = Nothing
        Dim LibraryName As String = ""
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(MySql, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(MySql, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_VUserGrid

                    Try
                        UserID = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        UserID = ""
                    End Try
                    Try
                        UserName = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        UserName = ""
                    End Try
                    Try
                        EmailAddress = rsDataQry.GetValue(2).ToString
                    Catch ex As Exception
                        EmailAddress = ""
                    End Try
                    Try
                        Admin = rsDataQry.GetValue(3).ToString
                    Catch ex As Exception
                        Admin = ""
                    End Try
                    Try
                        isActive = rsDataQry.GetValue(4).ToString
                    Catch ex As Exception
                        isActive = ""
                    End Try
                    Try
                        UserLoginID = rsDataQry.GetValue(5).ToString
                    Catch ex As Exception
                        UserLoginID = ""
                    End Try
                    Try
                        ClientOnly = rsDataQry.GetBoolean(6)
                    Catch ex As Exception
                        ClientOnly = False
                    End Try
                    Try
                        HiveConnectionName = rsDataQry.GetValue(7).ToString
                    Catch ex As Exception
                        HiveConnectionName = ""
                    End Try
                    Try
                        HiveActive = rsDataQry.GetBoolean(8)
                    Catch ex As Exception
                        HiveActive = False
                    End Try
                    Try
                        RepoSvrName = rsDataQry.GetValue(9).ToString
                    Catch ex As Exception
                        RepoSvrName = ""
                    End Try
                    Try
                        RowCreationDate = rsDataQry.GetDateTime(10)
                    Catch ex As Exception
                        RowCreationDate = Nothing
                    End Try
                    Try
                        RowLastModDate = rsDataQry.GetDateTime(11)
                    Catch ex As Exception
                        RowLastModDate = Nothing
                    End Try

                    CD.UserID = UserID
                    CD.UserName = UserName
                    CD.EmailAddress = EmailAddress
                    CD.Admin = Admin
                    CD.isActive = isActive
                    CD.UserLoginID = UserLoginID
                    CD.ClientOnly = ClientOnly
                    CD.HiveConnectionName = HiveConnectionName
                    CD.HiveActive = HiveActive
                    CD.RepoSvrName = RepoSvrName
                    CD.RowCreationDate = RowCreationDate
                    CD.RowLastModDate = RowLastModDate
                    ListOfRows.Add(CD)

                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateUserGrid", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateUserGrid", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateUserGrid", MySql)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function

    ''' <summary>
    ''' Get the list of All users or a Group's users
    ''' </summary>
    ''' <param name="SecureID"></param>
    ''' <param name="GroupName">Pass in a Group Name to filter the search, or leave it balnk to bring back all users</param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function PopulateGroupUserGrid(ByRef SecureID As Integer, ByVal GroupName As String) As System.Collections.Generic.List(Of DS_dgGrpUsers)

        If GroupName Is Nothing Then
            GroupName = ""
        End If

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_dgGrpUsers)

        GroupName = UTIL.RemoveSingleQuotes(GroupName)

        Dim S As String = ""
        S = S + " SELECT  DISTINCT   Users.UserName, GroupUsers.UserID" + vbCrLf
        S = S + " FROM         GroupUsers RIGHT OUTER JOIN" + vbCrLf
        S = S + " Users ON GroupUsers.UserID = Users.UserID" + vbCrLf
        If GroupName.Trim.Length > 0 Then
            S = S + " WHERE     (GroupUsers.GroupName = '" + GroupName + "') " + vbCrLf
        End If
        S = S + " order by Users.UserName" + vbCrLf

        Dim UserName As String = ""
        Dim UserID As String = ""

        Dim rsDataQry As SqlDataReader = Nothing
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_dgGrpUsers

                    Try
                        UserName = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        UserName = ""
                    End Try
                    Try
                        UserID = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        UserID = ""
                    End Try

                    If UserID.Length = 0 And UserName.Length > 0 Then
                        UserID = UserName
                    End If
                    If UserName.Length = 0 And UserID.Length > 0 Then
                        UserName = UserID
                    End If

                    CD.UserName = UserName
                    CD.UserID = UserID

                    ListOfRows.Add(CD)

                Loop
            End If
        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateDgAssigned", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateDgAssigned", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateDgAssigned", S)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function

    Function PopulateDgAssigned(ByRef SecureID As Integer, ByVal LibraryName As String, ByVal UserID As String) As System.Collections.Generic.List(Of DS_DgAssigned)

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_DgAssigned)

        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)
        UserID = UTIL.RemoveSingleQuotes(UserID)

        Dim S As String = ""
        S = " SELECT [GroupName], [GroupOwnerUserID] FROM [GroupLibraryAccess]"
        S = S + " where [LibraryName] = '" + LibraryName + "' "
        S = S + " and [UserID] = '" + UserID + "'"
        S = S + " order by [GroupName]"

        Dim GroupName As String = ""
        Dim GroupOwnerUserID As String = ""

        Dim rsDataQry As SqlDataReader = Nothing
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_DgAssigned

                    Try
                        GroupName = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        GroupName = ""
                    End Try
                    Try
                        GroupOwnerUserID = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        GroupOwnerUserID = ""
                    End Try

                    CD.GroupName = GroupName
                    CD.GroupOwnerUserID = GroupOwnerUserID

                    ListOfRows.Add(CD)

                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateDgAssigned", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateDgAssigned", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateDgAssigned", S)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function

    Public Function PopulateLibItemsGrid(ByRef SecureID As Integer, ByVal LibraryName As String, ByVal UserID As String) As System.Collections.Generic.List(Of DS_LibItems)

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_LibItems)

        Dim S$ = " "

        S = ""
        S = S + " SELECT [ItemTitle]" + vbCrLf
        S = S + " ,[ItemType]" + vbCrLf
        S = S + " ,[LibraryName]" + vbCrLf
        S = S + " ,[LibraryOwnerUserID]" + vbCrLf
        S = S + " ,[AddedByUserGuidId]" + vbCrLf
        S = S + " ,[DataSourceOwnerUserID]" + vbCrLf
        S = S + " ,[SourceGuid]" + vbCrLf
        S = S + " ,[LibraryItemGuid]" + vbCrLf
        S = S + " FROM [LibraryItems] " + vbCrLf
        S = S + " WHERE LibraryItems.LibraryName = '" + LibraryName$ + "'" + vbCrLf
        S = S + " ORDER BY LibraryItems.ItemTitle" + vbCrLf

        Dim AddedByUserGuidId As String = ""     '** GroupName
        Dim DataSourceOwnerUserID As String = ""     '** GroupOwnerUserID
        Dim ItemTitle As String = ""     '** GroupOwnerUserID
        Dim ItemType As String = ""     '** GroupOwnerUserID
        Dim LibraryItemGuid As String = ""     '** GroupOwnerUserID
        Dim LibraryOwnerUserID As String = ""     '** GroupOwnerUserID
        Dim SourceGuid As String = ""     '** GroupOwnerUserID

        Dim rsDataQry As SqlDataReader = Nothing
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_LibItems

                    Try
                        ItemTitle = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        ItemTitle = ""
                    End Try
                    Try
                        ItemType = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        ItemType = ""
                    End Try
                    Try
                        LibraryName = rsDataQry.GetValue(2).ToString
                    Catch ex As Exception
                        LibraryName = ""
                    End Try
                    Try
                        LibraryOwnerUserID = rsDataQry.GetValue(3).ToString
                    Catch ex As Exception
                        LibraryOwnerUserID = ""
                    End Try
                    Try
                        AddedByUserGuidId = rsDataQry.GetValue(4).ToString
                    Catch ex As Exception
                        AddedByUserGuidId = ""
                    End Try
                    Try
                        DataSourceOwnerUserID = rsDataQry.GetValue(5).ToString
                    Catch ex As Exception
                        DataSourceOwnerUserID = ""
                    End Try
                    Try
                        SourceGuid = rsDataQry.GetValue(6).ToString
                    Catch ex As Exception
                        SourceGuid = ""
                    End Try
                    Try
                        LibraryItemGuid = rsDataQry.GetValue(7).ToString
                    Catch ex As Exception
                        LibraryItemGuid = ""
                    End Try

                    CD.AddedByUserGuidId = AddedByUserGuidId
                    CD.DataSourceOwnerUserID = DataSourceOwnerUserID
                    CD.ItemTitle = ItemTitle
                    CD.ItemType = ItemType
                    CD.LibraryItemGuid = LibraryItemGuid
                    CD.LibraryName = LibraryName
                    CD.LibraryOwnerUserID = LibraryOwnerUserID
                    CD.SourceGuid = SourceGuid

                    ListOfRows.Add(CD)

                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateDgAssigned", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateDgAssigned", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateDgAssigned", S)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function
    Sub SaveClickStats(ByVal ClickID As Integer, ByVal UserID As String, ByRef RC As Boolean)
        Dim spName As String = "spSaveClickStat"
        Dim SecureID As Integer = 1919.1919
        Try
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim command As SqlCommand = New SqlCommand(spName, gConn)
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(New SqlParameter("@LocationID", ClickID))
            command.Parameters.Add(New SqlParameter("@UID", UserID))
            command.ExecuteNonQuery()
            command.Dispose()
            GC.Collect()
            RC = True
        Catch ex As Exception
            'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
            xTrace(SecureID, 3014, spName$, "Stored Procedure SaveClickStats Failed", ex)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SaveClickStats : 1498 : " + ex.Message)
            RC = False
        End Try
    End Sub
    Sub SaveSearchWords(ByVal Words As String, ByVal UserID As String, ByVal TypeSearch As String)
        Words = Words.Replace(ChrW(34), " ")
        Words = Words.Replace("~", " ")
        Words = Words.Replace("^", " ")
        Words = Words.Replace("+", " ")
        Words = Words.Replace("-", " ")
        Dim A() As String = Words.Split(" ")
        For Each S As String In A
            If S.Trim.Length > 0 Then
                SaveSearchStats(S, UserID, TypeSearch)
            End If
        Next
    End Sub
    Sub SaveSearchStats(ByVal SearchWord As String, ByVal UserID As String, ByVal TypeSearch As String)
        Dim spName As String = "spSaveWordStat"
        Dim SecureID As Integer = 1919.1919
        Dim TimeTrk As Boolean = True
        Try
            CloseConn(SecureID)
            CkConn(SecureID)
            Dim command As SqlCommand = New SqlCommand(spName, gConn)
            command.CommandType = CommandType.StoredProcedure
            command.Parameters.Add(New SqlParameter("@Word", SearchWord))
            command.Parameters.Add(New SqlParameter("@UID", UserID))
            command.Parameters.Add(New SqlParameter("@TypeSearch", TypeSearch))
            command.ExecuteNonQuery()
            command.Dispose()
            GC.Collect()
        Catch ex As Exception
            'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
            xTrace(SecureID, 3014, spName$, "Stored SaveSearchStats Procedure Failed", ex)
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SaveSearchStats : 1498 : " + ex.Message)
        End Try
    End Sub

    Function GetRowCountSql(ByVal MySql As String) As String
        Dim NewSql As String = "Select Count(*) " + vbCrLf
        Dim A() As String = MySql.Split(vbCrLf)
        Dim B As Boolean = False
        For Each LineOfSql As String In A
            LineOfSql = LineOfSql.Trim
            LineOfSql = LineOfSql.ToUpper
            If LineOfSql.Contains("FROM ") And Not B Then
                NewSql += LineOfSql + vbCrLf
                B = True
                GoTo NEXTLINE
            ElseIf LineOfSql.Contains("FROM") And Not B Then
                NewSql += LineOfSql + vbCrLf
                B = True
                GoTo NEXTLINE
            ElseIf LineOfSql.Contains("ORDER BY") Then
                LineOfSql = "-- " + LineOfSql + vbCrLf
            End If
            If B Then
                NewSql += LineOfSql + vbCrLf
            End If
NEXTLINE:
        Next

        Return NewSql
    End Function

    Function DeleteGroupUsers(ByVal CurrSelectedGroupName As String, _
                                ByVal GroupOwnerGuid As String, _
                                ByVal UserID As String, ByRef iDeleted As Integer, ByRef RetMsg As String) As Boolean

        Dim A() As String = UserID.Split(";")
        Dim B As Boolean = True
        Dim tUserID As String = ""
        CurrSelectedGroupName = UTIL.RemoveSingleQuotes(CurrSelectedGroupName)
        Try
            For I As Integer = 0 To A.Length - 1
                tUserID = A(I)
                tUserID = UTIL.RemoveSingleQuotes(tUserID)
                'Dim S As String = " Delete from GroupUsers Where GroupName = '" + CurrSelectedGroupName + "' and   GroupOwnerUserID = '" + GroupOwnerGuid + "' and   UserID = '" + UserID + "'"
                Dim S As String = " Delete from GroupUsers Where GroupName = '" + CurrSelectedGroupName + "' and   UserID = '" + tUserID + "'"
                B = ExecuteSqlNewConn(76451, S)
                If B Then
                    'get a list of libraries associated to this group and delete this user from each one
                    Dim ListOfLibraries As New List(Of String)
                    GetGroupLibraries(98792, CurrSelectedGroupName, ListOfLibraries)

                    For II As Integer = 0 To ListOfLibraries.Count - 1
                        Dim LibraryName As String = ListOfLibraries(II).Trim
                        DeleteLibraryGroupUser(98793, CurrSelectedGroupName, LibraryName, tUserID)
                    Next
                End If

                If B Then
                    B = RemoveGroupUser(98763.1, UTIL.RemoveSingleQuotes(CurrSelectedGroupName), tUserID)
                    iDeleted += 1
                End If
            Next
        Catch ex As Exception
            B = False
        End Try
        Return B
    End Function

    Public Function PopulateDgGroupUsers(ByRef SecureID As Integer, ByVal OwnerUserGuidID As String, ByVal GroupName As String) As System.Collections.Generic.List(Of DS_DgGroupUsers)

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_DgGroupUsers)

        Dim UserName As String = ""
        Dim UserID As String = ""
        Dim FullAccess As Boolean = False
        Dim ReadOnlyAccess As Boolean = False
        Dim DeleteAccess As Boolean = False
        Dim Searchable As Boolean = False

        Dim S$ = ""
        S = S + " SELECT     Users.UserName, Users.UserID AS UserID, GroupUsers.FullAccess, GroupUsers.ReadOnlyAccess, GroupUsers.DeleteAccess, GroupUsers.Searchable"
        S = S + " FROM         GroupUsers RIGHT OUTER JOIN"
        S = S + "           Users ON GroupUsers.UserID = Users.UserID"
        S = S + " WHERE     (GroupUsers.GroupOwnerUserID = '" + OwnerUserGuidID + "') AND (GroupUsers.GroupName = '" + GroupName + "')"
        S = S + " order by Users.UserName"

        Dim rsDataQry As SqlDataReader = Nothing
        Dim isPublic As String = ""
        Dim Items As Integer = 0
        Dim Members As Integer = 0

        Dim CS As String = getConnStr(SecureID)
        Dim sqlcn As New SqlConnection(CS)
        Dim sadapt As New SqlDataAdapter(S, sqlcn)
        Dim ds As DataSet = New DataSet

        If sqlcn.State = ConnectionState.Closed Then
            sqlcn.Open()
        End If

        Dim CONN As New SqlConnection(CS)

        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim command As New SqlCommand(S, CONN)

        Try
            rsDataQry = command.ExecuteReader()
            If rsDataQry.HasRows Then
                Do While rsDataQry.Read

                    Dim CD As New DS_DgGroupUsers

                    Try
                        UserName = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        UserName = ""
                    End Try
                    Try
                        UserID = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        UserID = ""
                    End Try
                    Try
                        FullAccess = rsDataQry.GetBoolean(0)
                    Catch ex As Exception
                        FullAccess = ""
                    End Try
                    Try
                        ReadOnlyAccess = rsDataQry.GetBoolean(0)
                    Catch ex As Exception
                        ReadOnlyAccess = ""
                    End Try
                    Try
                        DeleteAccess = rsDataQry.GetBoolean(0)
                    Catch ex As Exception
                        DeleteAccess = ""
                    End Try
                    Try
                        Searchable = rsDataQry.GetBoolean(0)
                    Catch ex As Exception
                        Searchable = ""
                    End Try


                    CD.UserName = UserName
                    CD.UserID = UserID
                    CD.FullAccess = FullAccess
                    CD.ReadOnlyAccess = ReadOnlyAccess
                    CD.DeleteAccess = DeleteAccess
                    CD.Searchable = Searchable

                    ListOfRows.Add(CD)

                Loop
            End If

        Catch ex As Exception
            xTrace(SecureID, 1001, "clsDataBase:PopulateDgGroupUsers", ex.Message)
            xTrace(SecureID, 1002, "clsDataBase:PopulateDgGroupUsers", ex.StackTrace)
            xTrace(SecureID, 1003, "clsDataBase:PopulateDgGroupUsers", S)
            ListOfRows = Nothing
        Finally
            If rsDataQry IsNot Nothing Then
                If Not rsDataQry.IsClosed Then
                    rsDataQry.Close()
                End If
                rsDataQry = Nothing
            End If
            command.Dispose()
            command = Nothing
        End Try

        Return ListOfRows

    End Function
    Function InsertCoOwner(ByVal SecureID As Integer, ByVal CurrentOwner As String, ByVal CoOwner As String) As Boolean
        Dim B As Boolean = False

        Dim iCnt As Integer = 0
        Dim S As String = ""

        S = "select count(*) from CoOwner Where CurrentOwnerUserID = '" + CoOwner + "' and   PreviousOwnerUserID = '" + CurrentOwner + "'"
        iCnt = iCount(SecureID, S)

        If iCnt > 0 Then
            Return True
        End If
        S = ""
        S = S + " INSERT INTO CoOwner("
        S = S + "CurrentOwnerUserID,"
        S = S + "PreviousOwnerUserID) values ("
        S = S + "'" + CoOwner + "'" + ","
        S = S + "'" + CurrentOwner + "'" + ")"

        B = ExecuteSqlNewConn(SecureID, S)

        Return B
    End Function
    Function SaveUser(ByVal SecureID As Integer, ByRef UserID As String, ByRef UserName As String, ByRef EmailAddress As String, _
                        ByRef UserPassword As String, ByRef Admin As String, ByRef isActive As String, _
                        ByRef UserLoginID As String, ByRef ClientOnly As Boolean, ByRef HiveConnectionName As String, _
                        ByRef HiveActive As Boolean, ByRef RepoSvrName As String, ByRef RowCreationDate As Date, ByRef RowLastModDate As Date, _
                        ByRef ActiveGuid As String, ByRef RepoName As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean

        Dim B As Boolean = False

        Dim LT As String = ""
        LT = GetXrt(SecureID, RC, RetMsg)
        Dim LM As New clsLicenseMgt(SecureID)
        gNbrOfSeats = Val(LM.ParseLic(LT, "txtNbrSeats"))
        LM = Nothing
        LT = Nothing

        Dim CurrNbrOfMachine As Integer = GetNbrMachine(SecureID)
        If CurrNbrOfMachine >= gNbrOfSeats Then
            Dim MachineName$ = DMA.GetCurrMachineName
            LOG.WriteToSqlLog("FrmMDIMain : MachineName : 1100 : Number of licenses warning : '" + MachineName + "'")
            RetMsg = ("Warning 1100: We are very sorry, but the maximum number of attached computers has been exceeded." + vbCrLf + vbCrLf + "Please contact ECM Library support.")
            Return False
        End If

        Dim iUsers As Integer = GetCurrUserCnt(SecureID)
        If iUsers >= gNbrOfSeats Then
            RetMsg = ("The maximum number of available seats has been reached... please contact ADMIN to increase the number of available seats.")
            Return False
        End If

        UserID = UTIL.ReplaceSingleQuotes(UserID)
        UserName = UTIL.ReplaceSingleQuotes(UserName)
        EmailAddress = UTIL.ReplaceSingleQuotes(EmailAddress)
        UserLoginID = UTIL.ReplaceSingleQuotes(UserLoginID)

        Dim iCnt As Integer = 0
        Dim S As String = ""

        Dim EncryptedPassword As String = ""
        If UserPassword.Length > 0 Then
            EncryptedPassword = ENC2.DecryptPhrase(UserPassword)
            EncryptedPassword = ENC.AES256EncryptString(EncryptedPassword)
        End If

        S = "Select count(*) from Users where UserID = '" + UserID + "' "
        iCnt = iCount(SecureID, S)

        Try
            If iCnt = 0 Then
                Dim MySql As String = ""
                MySql += "Insert into [Users] ("
                MySql += "[UserID], " + vbCrLf
                MySql += "[UserName], " + vbCrLf
                MySql += "[EmailAddress], " + vbCrLf
                MySql += "[UserPassword], " + vbCrLf
                MySql += "[Admin], " + vbCrLf
                MySql += "[isActive], " + vbCrLf
                MySql += "[UserLoginID], " + vbCrLf
                MySql += "[ClientOnly], " + vbCrLf
                MySql += "[HiveConnectionName], " + vbCrLf
                MySql += "[HiveActive], " + vbCrLf
                MySql += "[RepoSvrName], " + vbCrLf
                MySql += "[RowCreationDate], " + vbCrLf
                MySql += "[RowLastModDate], " + vbCrLf
                MySql += "[ActiveGuid], " + vbCrLf
                MySql += "[RepoName] " + vbCrLf
                MySql += ") VALUES (" + vbCrLf
                MySql += "'" + UserID + "'," + vbCrLf
                MySql += "'" + UserName + "'," + vbCrLf
                MySql += "'" + EmailAddress + "'," + vbCrLf
                If EncryptedPassword.Length = 0 Then
                    EncryptedPassword = "ecmuser"
                End If
                MySql += "'" + EncryptedPassword + "'," + vbCrLf
                MySql += "'" + Admin + "'," + vbCrLf
                MySql += "'" + isActive + "'," + vbCrLf
                MySql += "'" + UserLoginID + "'," + vbCrLf
                If ClientOnly = True Then
                    MySql += " 1, "
                Else
                    MySql += " 0, "
                End If
                MySql += "'" + HiveConnectionName + "'," + vbCrLf
                If HiveActive = True Then
                    MySql += " 1, "
                Else
                    MySql += " 0, "
                End If
                MySql += "'" + RepoSvrName + "'," + vbCrLf
                MySql += "'" + RowCreationDate + "'," + vbCrLf
                MySql += "'" + RowLastModDate + "'," + vbCrLf
                MySql += "'" + ActiveGuid + "'," + vbCrLf
                MySql += "'" + RepoName + "') " + vbCrLf

                B = ExecuteSqlNewConn(639981.57, MySql)

            End If
            If iCnt > 0 Then
                Dim MySql As String = ""
                MySql += "Update [Users]  SET "
                MySql += " [UserID] = '" & UserID & "',"
                MySql += " [UserName] = '" & UserName & "',"
                MySql += " [EmailAddress] = '" & EmailAddress & "',"
                If EncryptedPassword.Length > 0 Then
                    MySql += " [UserPassword] = '" & EncryptedPassword & "',"
                End If
                MySql += " [Admin] = '" & Admin & "',"
                MySql += " [isActive] = '" & isActive & "',"
                MySql += " [UserLoginID] = '" & UserLoginID & "',"
                If ClientOnly = True Then
                    MySql += " [ClientOnly] = 1, "
                Else
                    MySql += " [ClientOnly] = 0, "
                End If
                MySql += " [HiveConnectionName] = '" & HiveConnectionName & "',"
                If HiveActive = True Then
                    MySql += " [HiveActive] = 1, "
                Else
                    MySql += " [HiveActive] = 0, "
                End If
                MySql += " [RepoSvrName] = '" & RepoSvrName & "',"
                MySql += " [RowCreationDate] = '" & RowCreationDate & "',"
                MySql += " [RowLastModDate] = '" & RowLastModDate & "',"
                MySql += " [ActiveGuid] = '" & ActiveGuid & "',"
                MySql += " [RepoName] = '" & RepoName & "' "
                MySql += " Where UserID = '" + UserID + "'"

                B = ExecuteSqlNewConn(SecureID, MySql)
            End If
        Catch ex As Exception

        End Try

        Return B
    End Function

    Function DeleteUser(ByVal SecureID As Integer, ByVal SelectedUserGuid As String, ByRef RetMsg As String) As Boolean
        Dim B As Boolean = True
        Try
            Dim iContent As Integer = iCountUserContent(997731, SelectedUserGuid)

            Dim iEmail As Integer = iCountUserEmails(997732, SelectedUserGuid)

            If iContent > 0 Or iEmail > 0 Then
                RetMsg = "This user has " + iContent.ToString + " documents and " + iEmail.ToString + " in the respository and cannot be deleted. " + vbCrLf + vbCrLf
                RetMsg += "Refactor their content and then delete if necessary." + vbCrLf + vbCrLf
                RetMsg += "Or disable the user." + vbCrLf + vbCrLf
                RetMsg += "Or make all of this users content public." + vbCrLf + vbCrLf
                Return False
            End If

            Dim AdminOn$ = ""
            Dim isActive$ = ""

            Dim SS As String = "delete FROM CoOwner where CurrentOwnerUserID = '" + SelectedUserGuid + "'"
            ExecuteSqlNewConn(SecureID, SS)

            SS = "delete from CoOwner where PreviousOwnerUserID = '" + SelectedUserGuid + "'"
            ExecuteSqlNewConn(SecureID, SS)

            DeleteTableUser(SecureID, SelectedUserGuid)

            SS$ = "delete from [Users] where [UserLoginID] = '" + SelectedUserGuid + "'"
            ExecuteSqlNewConn(SecureID, SS)

            RetMsg = "User deleted"
            B = True
        Catch ex As Exception
            B = False
            RetMsg = "ERROR: clsDatabase/DeleteUser - " + ex.Message
        End Try
        Return B
    End Function
    Sub DeleteTableUser(ByVal SecureID As Integer, ByVal UserID As String)

        Dim B As Boolean = False

        Dim elapsed_time As TimeSpan = Nothing
        Dim start_time As DateTime = Now

        '*****************************************************************
        'RemoveUSer(SecureID, "OwnerHistory", "Userid", UserID)
        RemoveUSer(SecureID, "ArchiveFrom", "Userid", UserID)
        RemoveUSer(SecureID, "ActiveDirUser", "UserID", UserID)
        RemoveUSer(SecureID, "ActiveSearchGuids", "UserID", UserID)
        RemoveUSer(SecureID, "ArchiveFrom", "UserID", UserID)
        RemoveUSer(SecureID, "ArchiveStats", "UserID", UserID)
        RemoveUSer(SecureID, "ContactFrom", "UserID", UserID)
        RemoveUSer(SecureID, "ContactsArchive", "UserID", UserID)
        'CoOwner	dbo	PreviousOwnerUserID
        'CoOwner	dbo	CurrentOwnerUserID
        RemoveUSer(SecureID, "DataOwners", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "DataOwners", "GroupOwnerUserID", UserID)
        RemoveUSer(SecureID, "DataOwners", "UserID", UserID)
        'DataSource	dbo	UserID
        RemoveUSer(SecureID, "DataSource", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "DataSourceCheckOut", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "DataSourceCheckOut", "CheckedOutByUserID", UserID)
        RemoveUSer(SecureID, "DataSourceOwner", "UserID", UserID)
        'DataSourceRestoreHistory	dbo	DataSourceOwnerUserID
        'DataSourceRestoreHistory	dbo	RestoreUserID
        'DeleteFrom	dbo	UserID
        RemoveUSer(SecureID, "DirArchLib", "DirOwnerUserID", UserID)
        RemoveUSer(SecureID, "DirArchLib", "LibOwnerUserID", UserID)
        RemoveUSer(SecureID, "Directory", "UserID", UserID)
        RemoveUSer(SecureID, "DirectoryListener", "UserID", UserID)
        RemoveUSer(SecureID, "DirectoryListenerFiles", "UserID", UserID)
        RemoveUSer(SecureID, "Email", "UserID", UserID)
        RemoveUSer(SecureID, "EmailArchParms", "UserID", UserID)
        RemoveUSer(SecureID, "EmailAttachment", "UserID", UserID)
        RemoveUSer(SecureID, "EmailAttachmentSearchList", "UserID", UserID)
        RemoveUSer(SecureID, "EmailFolder", "UserID", UserID)
        RemoveUSer(SecureID, "EmailFolder_BAK", "UserID", UserID)
        RemoveUSer(SecureID, "EmailFolder_BAK2", "UserID", UserID)
        RemoveUSer(SecureID, "EmailToDelete", "UserID", UserID)
        RemoveUSer(SecureID, "ExchangeHostPop", "Userid", UserID)
        RemoveUSer(SecureID, "ExcludedFiles", "UserID", UserID)
        RemoveUSer(SecureID, "ExcludeFrom", "UserID", UserID)
        RemoveUSer(SecureID, "FilesToDelete", "UserID", UserID)

        RemoveUSer(SecureID, "Library", "UserID", UserID)
        RemoveUSer(SecureID, "LibraryItems", "LibraryOwnerUserID", UserID)
        RemoveUSer(SecureID, "LibraryItems", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "LibraryUsers", "LibraryOwnerUserID", UserID)
        RemoveUSer(SecureID, "LibraryUsers", "UserID", UserID)

        RemoveUSer(SecureID, "LibEmail", "UserID", UserID)
        RemoveUSer(SecureID, "LibDirectory", "UserID", UserID)

        RemoveUSer(SecureID, "GroupLibraryAccess", "UserID", UserID)
        RemoveUSer(SecureID, "GroupLibraryAccess", "GroupOwnerUserID", UserID)
        RemoveUSer(SecureID, "GroupUsers", "GroupOwnerUserID", UserID)
        RemoveUSer(SecureID, "GroupUsers", "UserID", UserID)


        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess CHECK CONSTRAINT LibraryOwnerUserID")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibDirectory CHECK CONSTRAINT RefLibrary124")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE LibEmail CHECK CONSTRAINT RefLibrary123")
        ExecuteSqlNewConn(SecureID, "ALTER TABLE GroupLibraryAccess CHECK CONSTRAINT RefUserGroup64")

        RemoveUSer(SecureID, "HelpTextUser", "UserID", UserID)
        RemoveUSer(SecureID, "IncludedFiles", "UserID", UserID)
        RemoveUSer(SecureID, "IncludeImmediate", "UserID", UserID)
        RemoveUSer(SecureID, "OutlookFrom", "UserID", UserID)
        '** The following do not seem appropriate to change as they are most likely MACHINE location dependent.
        RemoveUSer(SecureID, "QuickDirectory", "UserID", UserID)
        RemoveUSer(SecureID, "QuickRef", "UserID", UserID)
        RemoveUSer(SecureID, "QuickRefItems", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "SourceAttribute", "DataSourceOwnerUserID", UserID)
        RemoveUSer(SecureID, "SubDir", "UserID", UserID)
        RemoveUSer(SecureID, "SubLibrary", "UserID", UserID)
        RemoveUSer(SecureID, "SubLibrary", "SubUserID", UserID)
        RemoveUSer(SecureID, "UserGroup", "GroupOwnerUserID", UserID)
        RemoveUSer(SecureID, "ZippedFiles", "DataSourceOwnerUserID", UserID)

    End Sub
    Private Function RemoveUSer(ByVal SecureID As Integer, ByVal TBL As String, ByVal tgtCol As String, ByVal UserID As String) As Boolean
        Dim S As String = "Delete from  " + TBL + " Where " + tgtCol$ + " = '" + UserID + "'"
        Dim B As Boolean = Me.ExecuteSqlNewConn(SecureID, S)
        If Not B Then
            Console.WriteLine("Error : " + S)
        End If
        Return B
    End Function
    Function PopulateLibraryUsersGrid(ByRef SecureID As Integer, ByVal LibraryName As String, ByVal ckLibUsersOnly As Boolean) As List(Of DS_VLibraryUsers)

        LibraryName = UTIL.RemoveSingleQuotes(LibraryName)

        Dim ListOfItems As New List(Of DS_VLibraryUsers)
        Dim AttachmentName As String = ""
        Dim RowID As Integer = 0
        Dim EmailGuid As String = ""

        Dim UserID As String = ""
        Dim LibraryOwnerUserID As String = ""
        Dim UserName As String = ""


        Dim MySql As String = ""

        If ckLibUsersOnly Then
            MySql += " SELECT  LibraryUsers.UserID, "
            MySql += " LibraryUsers.LibraryName,"
            MySql += " LibraryUsers.LibraryOwnerUserID,"
            MySql += " Users.UserName "
            MySql += " FROM    LibraryUsers INNER JOIN"
            MySql += " Users ON LibraryUsers.UserID = Users.UserID"
            MySql += " where LibraryUsers.LibraryName = '" + LibraryName + "' " + vbCrLf
            MySql += " ORDER BY LibraryUsers.LibraryName"
        Else
            MySql += " Select Userid, '-' as LibraryName UserName from Users order by UserID "
        End If

        Try

            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID)
            Dim CONN As New SqlConnection(CS)
            CONN.Open()
            Dim command As New SqlCommand(MySql, CONN)
            RSData = command.ExecuteReader()

            If RSData.HasRows Then
                Do While RSData.Read()
                    UserID = RSData.GetValue(0).ToString
                    LibraryName = RSData.GetValue(1).ToString
                    LibraryOwnerUserID = RSData.GetValue(2).ToString
                    UserName = RSData.GetValue(3).ToString

                    Dim Item As New DS_VLibraryUsers
                    Item.UserID = UserID
                    Item.LibraryOwnerUserID = LibraryOwnerUserID
                    Item.LibraryName = LibraryName
                    Item.UserName = UserName

                    ListOfItems.Add(Item)
                Loop
            Else
                ListOfItems = Nothing
            End If
            RSData.Close()
            RSData = Nothing

        Catch ex As Exception
            ListOfItems = Nothing
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 3004 : " + ex.Message)
            LogMessage(SecureID, gCurrUserGuidID, "frmEmailSearch : PopulateAttachmentGrid : 966 : " + ex.Message)
        End Try
        Return ListOfItems

    End Function

    Function saveSearchSchedule(ByVal SecureID As Integer, ByRef SearchName As String, ByRef NotificationSMS As String, ByRef SearchDesc As String, ByRef OwnerID As String, ByRef SearchQuery As String, ByRef SendToEmail As String, ByRef ScheduleUnit As String, ByRef ScheduleHour As String, ByRef ScheduleDaysOfWeek As String, ByRef ScheduleDaysOfMonth As String, ByRef ScheduleMonthOfQtr As String, ByRef StartToRunDate As Date, ByRef EndRunDate As Date, ByRef SearchParameters As String, ByRef LastRunDate As Date, ByRef NumberOfExecutions As Integer, ByRef CreateDate As Date, ByRef LastModDate As Date, ByRef ScheduleHourInterval As Integer, ByRef RepoName As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean

        'wdm()
        'GenEmailGeneratedSQL()
        'GenDocSearchSql()

        SearchName = UTIL.RemoveSingleQuotes(SearchName)
        NotificationSMS = UTIL.RemoveSingleQuotes(NotificationSMS)
        SearchDesc = UTIL.RemoveSingleQuotes(SearchDesc)
        OwnerID = UTIL.RemoveSingleQuotes(OwnerID)
        SearchQuery = UTIL.RemoveSingleQuotes(SearchQuery)
        SendToEmail = UTIL.RemoveSingleQuotes(SendToEmail)
        ScheduleUnit = UTIL.RemoveSingleQuotes(ScheduleUnit)
        ScheduleHour = UTIL.RemoveSingleQuotes(ScheduleHour)
        ScheduleDaysOfWeek = UTIL.RemoveSingleQuotes(ScheduleDaysOfWeek)
        ScheduleDaysOfMonth = UTIL.RemoveSingleQuotes(ScheduleDaysOfMonth)
        ScheduleMonthOfQtr = UTIL.RemoveSingleQuotes(ScheduleMonthOfQtr)
        ScheduleMonthOfQtr = UTIL.RemoveSingleQuotes(ScheduleMonthOfQtr)
        ScheduleMonthOfQtr = UTIL.RemoveSingleQuotes(ScheduleMonthOfQtr)
        SearchParameters = UTIL.RemoveSingleQuotes(SearchParameters)
        SearchParameters = UTIL.RemoveSingleQuotes(SearchParameters)
        RepoName = UTIL.RemoveSingleQuotes(RepoName)

        Dim S As String = "Select count(*) from SearchSchedule where SearchName = '" + SearchName + "' "
        Dim B As Boolean = False
        Dim iCnt As Integer = iCount(SecureID, S)
        Dim MySql As String = ""

        If iCnt = 0 Then
            Try
                MySql += "Insert into [SearchSchedule] ("
                MySql += "[SearchName], " + vbCrLf
                MySql += "[NotificationSMS], " + vbCrLf
                MySql += "[SearchDesc], " + vbCrLf
                MySql += "[OwnerID], " + vbCrLf
                MySql += "[SearchQuery], " + vbCrLf
                MySql += "[SendToEmail], " + vbCrLf
                MySql += "[ScheduleUnit], " + vbCrLf
                MySql += "[ScheduleHour], " + vbCrLf
                MySql += "[ScheduleDaysOfWeek], " + vbCrLf
                MySql += "[ScheduleDaysOfMonth], " + vbCrLf
                MySql += "[ScheduleMonthOfQtr], " + vbCrLf
                MySql += "[StartToRunDate], " + vbCrLf
                MySql += "[EndRunDate], " + vbCrLf
                MySql += "[SearchParameters], " + vbCrLf
                MySql += "[LastRunDate], " + vbCrLf
                MySql += "[NumberOfExecutions], " + vbCrLf
                MySql += "[CreateDate], " + vbCrLf
                MySql += "[LastModDate], " + vbCrLf
                MySql += "[ScheduleHourInterval] " + vbCrLf
                MySql += ") VALUES (" + vbCrLf
                MySql += "'" + SearchName + "'," + vbCrLf
                MySql += "'" + NotificationSMS + "'," + vbCrLf
                MySql += "'" + SearchDesc + "'," + vbCrLf
                MySql += "'" + OwnerID + "'," + vbCrLf
                MySql += "'" + SearchQuery + "'," + vbCrLf
                MySql += "'" + SendToEmail + "'," + vbCrLf
                MySql += "'" + ScheduleUnit + "'," + vbCrLf
                MySql += "'" + ScheduleHour + "'," + vbCrLf
                MySql += "'" + ScheduleDaysOfWeek + "'," + vbCrLf
                MySql += "'" + ScheduleDaysOfMonth + "'," + vbCrLf
                MySql += "'" + ScheduleMonthOfQtr + "'," + vbCrLf
                MySql += "'" + StartToRunDate + "'," + vbCrLf
                MySql += "'" + EndRunDate + "'," + vbCrLf
                MySql += "'" + SearchParameters + "'," + vbCrLf
                MySql += "'" + LastRunDate + "'," + vbCrLf
                MySql += NumberOfExecutions & "," + vbCrLf
                MySql += "'" + CreateDate + "'," + vbCrLf
                MySql += "'" + LastModDate + "'," + vbCrLf
                MySql += ScheduleHourInterval & vbCrLf
                MySql += ")" + vbCrLf

                B = ExecuteSqlNewConn(SecureID, MySql)

            Catch ex As Exception

            End Try
        Else
            Try
                MySql += "Update [SearchSchedule]  SET " + vbCrLf
                MySql += " [SearchName] = '" & SearchName & "'," + vbCrLf
                MySql += " [NotificationSMS] = '" & NotificationSMS & "'," + vbCrLf
                MySql += " [SearchDesc] = '" & SearchDesc & "'," + vbCrLf
                MySql += " [OwnerID] = '" & OwnerID & "'," + vbCrLf
                MySql += " [SearchQuery] = '" & SearchQuery & "'," + vbCrLf
                MySql += " [SendToEmail] = '" & SendToEmail & "'," + vbCrLf
                MySql += " [ScheduleUnit] = '" & ScheduleUnit & "'," + vbCrLf
                MySql += " [ScheduleHour] = '" & ScheduleHour & "'," + vbCrLf
                MySql += " [ScheduleDaysOfWeek] = '" & ScheduleDaysOfWeek & "'," + vbCrLf
                MySql += " [ScheduleDaysOfMonth] = '" & ScheduleDaysOfMonth & "'," + vbCrLf
                MySql += " [ScheduleMonthOfQtr] = '" & ScheduleMonthOfQtr & "'," + vbCrLf
                MySql += " [StartToRunDate] = '" & StartToRunDate & "'," + vbCrLf
                MySql += " [EndRunDate] = '" & EndRunDate & "'," + vbCrLf
                MySql += " [SearchParameters] = '" & SearchParameters & "'," + vbCrLf
                MySql += " [LastModDate] = '" & LastModDate & "'," + vbCrLf
                MySql += " [ScheduleHourInterval] = " & ScheduleHourInterval & ", " + vbCrLf
                MySql += " [RepoName] = '" & RepoName & "' " + vbCrLf
                MySql += " where SearchName = '" + SearchName + "' " + vbCrLf

                B = ExecuteSqlNewConn(SecureID, MySql)
            Catch ex As Exception
                B = False
                LOG.WriteToSqlLog(MySql)
                xTrace(SecureID, 199172.3, "saveSearchSchedule", UTIL.RemoveSingleQuotesV1(MySql))
            End Try
        End If

        Return B
    End Function

    Public Function getSearchSchedule(ByVal SecureID As Integer, ByRef SearchName As String, ByRef NotificationSMS As String, ByRef SearchDesc As String, ByRef OwnerID As String, ByRef SearchQuery As String, ByRef SendToEmail As String, ByRef ScheduleUnit As String, ByRef ScheduleHour As String, ByRef ScheduleDaysOfWeek As String, ByRef ScheduleDaysOfMonth As String, ByRef ScheduleMonthOfQtr As String, ByRef StartToRunDate As Date, ByRef EndRunDate As Date, ByRef SearchParameters As String, ByRef LastRunDate As Date, ByRef NumberOfExecutions As Integer, ByRef CreateDate As Date, ByRef LastModDate As Date, ByRef ScheduleHourInterval As Integer, ByRef RepoName As String, ByRef RC As Boolean, ByRef RetMsg As String) As Boolean

        SearchName = UTIL.RemoveSingleQuotes(SearchName)
        NotificationSMS = UTIL.RemoveSingleQuotes(NotificationSMS)
        SearchDesc = UTIL.RemoveSingleQuotes(SearchDesc)
        OwnerID = UTIL.RemoveSingleQuotes(OwnerID)
        SearchQuery = UTIL.RemoveSingleQuotes(SearchQuery)
        SendToEmail = UTIL.RemoveSingleQuotes(SendToEmail)
        SearchParameters = UTIL.RemoveSingleQuotes(SearchParameters)
        RepoName = UTIL.RemoveSingleQuotes(RepoName)

        Dim B As Boolean = True
        RC = True

        Dim rsDataQry As SqlDataReader = Nothing

        CloseConn(SecureID)
        CkConn(SecureID)

        If gConn.State = Data.ConnectionState.Open Then
            gConn.Close()
        End If

        CloseConn(SecureID)
        CkConn(SecureID)

        Dim command As New SqlCommand

        Try
            Dim MySql As String = ""
            MySql += "Select "
            MySql += "[SearchName], " + vbCrLf
            MySql += "[NotificationSMS], " + vbCrLf
            MySql += "[SearchDesc], " + vbCrLf
            MySql += "[OwnerID], " + vbCrLf
            MySql += "[SearchQuery], " + vbCrLf
            MySql += "[SendToEmail], " + vbCrLf
            MySql += "[ScheduleUnit], " + vbCrLf
            MySql += "[ScheduleHour], " + vbCrLf
            MySql += "[ScheduleDaysOfWeek], " + vbCrLf
            MySql += "[ScheduleDaysOfMonth], " + vbCrLf
            MySql += "[ScheduleMonthOfQtr], " + vbCrLf
            MySql += "[StartToRunDate], " + vbCrLf
            MySql += "[EndRunDate], " + vbCrLf
            MySql += "[SearchParameters], " + vbCrLf
            MySql += "[LastRunDate], " + vbCrLf
            MySql += "[NumberOfExecutions], " + vbCrLf
            MySql += "[CreateDate], " + vbCrLf
            MySql += "[LastModDate], " + vbCrLf
            MySql += "[ScheduleHourInterval], " + vbCrLf
            MySql += "[RepoName]  " + vbCrLf
            MySql += " From [SearchSchedule]"
            MySql += " Where SearchName = '" + SearchName + "' "

            command.Connection = gConn
            command.CommandText = MySql

            rsDataQry = command.ExecuteReader()
            If Not rsDataQry.HasRows Then
                RC = False
                RetMsg = "No data"
                B = False
                Return B
            Else
                rsDataQry.Read()
            End If

            'Dim CD As New DS_SEARCHSCHEDULE

            Try
                SearchName = rsDataQry.GetValue(0).ToString
            Catch ex As Exception
                SearchName = ""
            End Try
            Try
                NotificationSMS = rsDataQry.GetValue(1).ToString
            Catch ex As Exception
                NotificationSMS = ""
            End Try
            Try
                SearchDesc = rsDataQry.GetValue(2).ToString
            Catch ex As Exception
                SearchDesc = ""
            End Try
            Try
                OwnerID = rsDataQry.GetValue(3).ToString
            Catch ex As Exception
                OwnerID = ""
            End Try
            Try
                SearchQuery = rsDataQry.GetValue(4).ToString
            Catch ex As Exception
                SearchQuery = ""
            End Try
            Try
                SendToEmail = rsDataQry.GetValue(5).ToString
            Catch ex As Exception
                SendToEmail = ""
            End Try
            Try

                ScheduleUnit = rsDataQry.GetValue(6).ToString
            Catch ex As Exception
                ScheduleUnit = Nothing
            End Try
            Try

                ScheduleHour = rsDataQry.GetValue(7).ToString
            Catch ex As Exception
                ScheduleHour = Nothing
            End Try
            Try

                ScheduleDaysOfWeek = rsDataQry.GetValue(8).ToString
            Catch ex As Exception
                ScheduleDaysOfWeek = Nothing
            End Try
            Try

                ScheduleDaysOfMonth = rsDataQry.GetValue(9).ToString
            Catch ex As Exception
                ScheduleDaysOfMonth = Nothing
            End Try
            Try

                ScheduleMonthOfQtr = rsDataQry.GetValue(10).ToString
            Catch ex As Exception
                ScheduleMonthOfQtr = Nothing
            End Try
            Try
                StartToRunDate = rsDataQry.GetDateTime(11)
            Catch ex As Exception
                StartToRunDate = Nothing
            End Try
            Try
                EndRunDate = rsDataQry.GetDateTime(12)
            Catch ex As Exception
                EndRunDate = Nothing
            End Try
            Try
                SearchParameters = rsDataQry.GetValue(13).ToString
            Catch ex As Exception
                SearchParameters = ""
            End Try
            Try
                LastRunDate = rsDataQry.GetDateTime(14)
            Catch ex As Exception
                LastRunDate = Nothing
            End Try
            Try
                NumberOfExecutions = rsDataQry.GetInt32(15)
            Catch ex As Exception
                NumberOfExecutions = Nothing
            End Try
            Try
                CreateDate = rsDataQry.GetDateTime(16)
            Catch ex As Exception
                CreateDate = Nothing
            End Try
            Try
                LastModDate = rsDataQry.GetDateTime(17)
            Catch ex As Exception
                LastModDate = Nothing
            End Try
            Try
                ScheduleHourInterval = rsDataQry.GetInt32(18)
            Catch ex As Exception
                ScheduleHourInterval = Nothing
            End Try
            Try
                RepoName = rsDataQry.GetValue(19).ToString
            Catch ex As Exception
                RepoName = ""
            End Try

            'CD.SearchName = SearchName
            'CD.NotificationSMS = NotificationSMS
            'CD.SearchDesc = SearchDesc
            'CD.OwnerID = OwnerID
            'CD.SearchQuery = SearchQuery
            'CD.SendToEmail = SendToEmail
            'CD.ScheduleUnit = ScheduleUnit
            'CD.ScheduleHour = ScheduleHour
            'CD.ScheduleDaysOfWeek = ScheduleDaysOfWeek
            'CD.ScheduleDaysOfMonth = ScheduleDaysOfMonth
            'CD.ScheduleMonthOfQtr = ScheduleMonthOfQtr
            'CD.StartToRunDate = StartToRunDate
            'CD.EndRunDate = EndRunDate
            'CD.SearchParameters = SearchParameters
            'CD.LastRunDate = LastRunDate
            'CD.NumberOfExecutions = NumberOfExecutions
            'CD.CreateDate = CreateDate
            'CD.LastModDate = LastModDate
            'CD.ScheduleHourInterval = ScheduleHourInterval
            'CD.RepoName = RepoName
            'ListOfRows.Add(CD)

            B = True

        Catch ex As Exception
            B = False
            RetMsg = ex.Message
        Finally
            If rsDataQry.IsClosed Then
            Else
                rsDataQry.Close()
            End If
            rsDataQry = Nothing
            command.Dispose()
            GC.Collect()
        End Try


        Return B
    End Function
    ''' <summary>
    ''' Sets the curent state of the ECM SAAS Search Engine
    ''' </summary>
    ''' <param name="SecureID"></param>
    ''' <param name="UserID"></param>
    ''' <param name="DirName">SAAS ACTIVE, CLC ACTIVE, RESTORE DIR, PREVIEW DIR</param>
    ''' <param name="FullPath"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function SetSAASState(ByVal SecureID As Integer, ByVal UserID As String, ByVal DirName As String, ByVal FullPath As String) As Boolean

        Dim spName$ = ""
        Dim S As String = ""
        S += " "
        S += " if not exists (Select [UserID],[DirName] from [dbo].[CLC_DIR] where [UserID] = @UserID and [DirName] = @DirName)"
        S += " begin"
        S += "      INSERT INTO [dbo].[CLC_DIR]"
        S += "      ([UserID]"
        S += "      ,[DirName]"
        S += "      ,[FullPath])"
        S += "      VALUES "
        S += "      (@UserID"
        S += "      ,@DirName"
        S += "      ,@FullPath)"
        S += " End"
        S += " Else"
        S += " Begin "
        S += "      UPDATE [dbo].[CLC_DIR]"
        S += "      SET [FullPath] = @FullPath"
        S += "      where [UserID] = @UserID and [DirName] = @DirName"
        S += " End"

        Dim B As Boolean = False
        Try
            CloseConn(SecureID)
            CkConn(SecureID)
            Using connection As New SqlConnection(Me.getConnStr(SecureID))
                Using command As New SqlCommand(S, connection)
                    command.CommandType = CommandType.Text

                    command.Parameters.Add(New SqlParameter("@UserID", UserID))
                    command.Parameters.Add(New SqlParameter("@DirName", DirName))
                    command.Parameters.Add(New SqlParameter("@FullPath", FullPath))

                    connection.Open()
                    command.ExecuteNonQuery()
                    connection.Close()
                    connection.Dispose()
                    command.Dispose()
                End Using
            End Using
            B = True
            'If TimeTrk Then
            '    System.Console.WriteLine(spName + " End: " + DateTime.Today.ToString)
            'End If
        Catch ex As Exception
            'Session("ErrorLocation") = 'Session("ErrorLocation") + " : " + ex.Message
            Console.WriteLine(ex.Message)
            xTrace(SecureID, 3014, spName$, "SP_ApplyUpdate: Stored Procedure Failed", ex)
            B = False
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : SP_ApplyUpdate : 100 : " + ex.Message)
        End Try
        Return B
    End Function
    Function getSAASState(ByVal SecureID As Integer, ByVal UserID As String, ByVal DirName As String, ByVal FullPath As String, ByRef RetMsg As String, ByRef RC As Boolean) As String

        Dim tVal As String = ""
        Dim S As String = ""
        S += " select FullPath from [dbo].[CLC_DIR] where UserID = '" + UserID + "' and DirName = '" + DirName + "'"

        Dim RSData As SqlDataReader = Nothing
        Dim CS As String = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        CONN.Open()
        Dim command As New SqlCommand(S, CONN)
        RSData = command.ExecuteReader()

        Try
            If RSData.HasRows Then
                RSData.Read()
                tVal = RSData.GetValue(0).ToString
            Else
                tVal = ""
            End If
            RC = True
        Catch ex As Exception
            RetMsg = ex.Message
            RC = False
            tVal = ""
            xTrace(SecureID, 3057, "getSAASState", "getSAASState: function failed", ex)
        Finally
            RSData.Close()
            RSData = Nothing
        End Try

        Return tVal
    End Function

    Public Sub ChangeUserContentPublic(ByVal ServiceID As Integer, ByVal CurrSelectedUserGuid As String, ByVal isPublic As String, ByRef RC As Boolean, ByRef RetMsg As String)

        Dim B As Boolean = False
        Dim S As String = ""

        S = "update DataSource set IsPublicPreviousState = ispublic where DataSourceOwnerUserID = '" + CurrSelectedUserGuid + "'"
        ExecuteSqlNewConn(ServiceID, S)

        S = "update DataSource set ispublic = 'N' where DataSourceOwnerUserID = '" + CurrSelectedUserGuid + "'"
        ExecuteSqlNewConn(ServiceID, S)

        S = "update EMail set IsPublicPreviousState = ispublic where UserID = '" + CurrSelectedUserGuid + "'"
        ExecuteSqlNewConn(ServiceID, S)

        S = "update EMail set ispublic = 'N' where UserID = '" + CurrSelectedUserGuid + "'"
        ExecuteSqlNewConn(ServiceID, S)

        S = "update EmailAttachment set ispublic = 'N' where UserID = '" + CurrSelectedUserGuid + "'"
        ExecuteSqlNewConn(ServiceID, S)

    End Sub

    Function saveRestoreFile(ByVal SecureID As Integer, ByVal tgtTable As String, ByRef ContentGuid As String, ByVal Preview As Boolean, ByVal Restore As Boolean, ByRef UserID As String, ByRef MachineID As String, ByRef RC As Boolean, ByVal RetMsg As String) As Boolean

        Dim MySql As String = ""
        Dim B As Boolean = True

        Dim FQN As String = Nothing
        Dim FileSize As Integer = Nothing
        Dim ContentType As String = Nothing
        Dim ProcessingCompleted As Boolean = Nothing
        Dim EntryDate As Date = Nothing
        Dim ProcessedDate As Date = Nothing
        Dim StartDownloadTime As Date = Nothing
        Dim EndDownloadTime As Date = Nothing
        Dim RepoName As String = Nothing

        ContentGuid = UTIL.RemoveSingleQuotes(ContentGuid)
        UserID = UTIL.RemoveSingleQuotes(UserID)
        MachineID = UTIL.RemoveSingleQuotes(MachineID)
        FQN = UTIL.RemoveSingleQuotes(FQN)
        ContentType = UTIL.RemoveSingleQuotes(ContentType)
        RepoName = UTIL.RemoveSingleQuotes(RepoName)

        If Preview Then
            MySql = "delete from [RestoreQueue] where UserID = '" + UserID + "' and Preview = 1 and ContentGuid = '" + ContentGuid + "' "
            RC = ExecuteSqlNewConn(SecureID, MySql)
        End If
        If Restore Then
            MySql = "delete from [RestoreQueue] where UserID = '" + UserID + "' and Restore = 1 and ContentGuid = '" + ContentGuid + "' "
            RC = ExecuteSqlNewConn(SecureID, MySql)
        End If

        Try
            Dim iCnt As Integer = 0
            MySql = "Select count(*) from RestoreQueue where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "' "

            iCnt = iCount(SecureID, MySql)

            If iCnt = 0 Then

                If tgtTable.ToUpper.Equals("EMAIL") Then
                    ContentType = "EMAIL"
                ElseIf tgtTable.ToUpper.Equals("EMAILATTACHMENT") Then
                    ContentType = "EMAILATTACHMENT"
                ElseIf tgtTable.ToUpper.Equals("DATASOURCE") Then
                    ContentType = "CONTENT"
                End If

                MySql = ""
                MySql += "Insert into [RestoreQueue] ("
                MySql += "[ContentGuid], " + vbCrLf
                MySql += "[UserID], " + vbCrLf
                MySql += "[MachineID], " + vbCrLf
                MySql += "[FQN], " + vbCrLf
                MySql += "[FileSize], " + vbCrLf
                MySql += "[ContentType], " + vbCrLf
                MySql += "[Preview], " + vbCrLf
                MySql += "[Restore], " + vbCrLf
                MySql += "[ProcessingCompleted], " + vbCrLf
                MySql += "[EntryDate], " + vbCrLf
                MySql += "[ProcessedDate], " + vbCrLf
                MySql += "[StartDownloadTime], " + vbCrLf
                MySql += "[EndDownloadTime], " + vbCrLf
                MySql += "[RepoName], " + vbCrLf
                MySql += ") VALUES (" + vbCrLf
                MySql += "'" + ContentGuid + "'," + vbCrLf
                MySql += "'" + UserID + "'," + vbCrLf
                MySql += "'" + MachineID + "'," + vbCrLf
                MySql += "'" + FQN + "'," + vbCrLf
                MySql += FileSize & ", + vbcrlf "
                MySql += "'" + ContentType + "'," + vbCrLf
                If Preview = True Then
                    Restore = False
                    MySql += " 1, "
                Else
                    MySql += " 0, "
                End If
                If Restore = True Then
                    MySql += " 1, "
                Else
                    MySql += " 0, "
                End If
                If ProcessingCompleted = True Then
                    MySql += " 1, "
                Else
                    MySql += " 0, "
                End If
                MySql += "'" + EntryDate + "'," + vbCrLf
                MySql += "'" + ProcessedDate + "'," + vbCrLf
                MySql += "'" + StartDownloadTime + "'," + vbCrLf
                MySql += "'" + EndDownloadTime + "'," + vbCrLf
                MySql += "'" + RepoName + "'" + vbCrLf
                MySql += ")"

                B = ExecuteSqlNewConn(SecureID, MySql)

                If Not B Then
                    RC = False
                End If
            End If

        Catch ex As Exception
            B = False
            RC = False
            xTrace(SecureID, 9925773, "saveRestoreFile", MySql)
        End Try

        Return B

    End Function

    Function getRestoreFileCount(ByVal SecureID As Integer, ByRef UserID As String, ByRef MachineID As String, ByRef Preview As Boolean) As Integer

        Dim iCnt As Integer = 0
        Dim MySql As String = ""

        MySql += "Select count(*) " + vbCrLf
        MySql += " From [RestoreQueue]" + vbCrLf
        MySql += " where [UserID] = '" + UserID + "' and [MachineID] = '" + MachineID + "' and Preview = " + Preview.ToString

        iCnt = iCount(SecureID, MySql)
        Return iCnt

    End Function
    Function removeRestoreFileByGuid(ByVal SecureID As Integer, ByVal RowGuid As String) As Boolean

        Dim B As Boolean = True
        Dim MySql As String = ""

        MySql += " delete From [RestoreQueue]" + vbCrLf
        MySql += " where [RowGuid] = '" + RowGuid + "' "

        B = ExecuteSqlNewConn(SecureID, MySql)

        Return B

    End Function
    Function removeRestoreFiles(ByVal SecureID As Integer, ByRef UserID As String, ByRef MachineID As String) As Boolean

        UserID = UTIL.RemoveSingleQuotes(UserID)
        MachineID = UTIL.RemoveSingleQuotes(MachineID)

        Dim B As Boolean = True
        Dim MySql As String = ""

        MySql += " delete From [RestoreQueue]" + vbCrLf
        MySql += " where [UserID] = '" + UserID + "' and [MachineID] = '" + MachineID + "'"

        B = ExecuteSqlNewConn(SecureID, MySql)

        Return B

    End Function

    Function getRestoreFile(ByVal SecureID As Integer, ByRef ContentGuid As String, ByRef UserID As String, ByRef MachineID As String, ByRef FQN As String, ByRef FileSize As Integer, ByRef ContentType As String, ByRef Preview As Boolean, ByRef Restore As Boolean, ByRef ProcessingCompleted As Boolean, ByRef EntryDate As Date, ByRef ProcessedDate As Date, ByRef StartDownloadTime As Date, ByRef EndDownloadTime As Date, ByRef RepoName As String, ByRef RC As Boolean, ByVal RetMSg As String) As List(Of DS_RESTOREQUEUE)

        Dim rsDataQry As SqlDataReader = Nothing
        Dim MySql As String = ""
        Dim B As Boolean = True

        Dim ListOfRows As New System.Collections.Generic.List(Of DS_RESTOREQUEUE)

        Dim RowGuid As String = ""
        Dim iPreview As Integer = -1

        If Preview Then
            iPreview = 1
        Else
            Preview = 0
        End If

        ContentGuid = UTIL.RemoveSingleQuotes(ContentGuid)
        UserID = UTIL.RemoveSingleQuotes(UserID)
        MachineID = UTIL.RemoveSingleQuotes(MachineID)
        FQN = UTIL.RemoveSingleQuotes(FQN)
        ContentType = UTIL.RemoveSingleQuotes(ContentType)
        RepoName = UTIL.RemoveSingleQuotes(RepoName)

        Dim CS As String = getConnStr(SecureID)
        Dim CONN As New SqlConnection(CS)
        If CONN.State = ConnectionState.Closed Then
            CONN.Open()
        End If

        Dim iCnt As Integer = 0
        MySql = ""
        MySql += "Select count(*) "
        MySql += " From [RestoreQueue]" + vbCrLf
        MySql += " where [UserID] = '" + UserID + "' and [MachineID] = '" + MachineID + "' and Preview = " + Preview.ToString

        iCnt = iCount(SecureID, MySql)
        If iCnt = 0 Then
            Return Nothing
        End If

        MySql = ""
        MySql += "Select "
        MySql += "[ContentGuid], " + vbCrLf
        MySql += "[UserID], " + vbCrLf
        MySql += "[MachineID], " + vbCrLf
        MySql += "[FQN], " + vbCrLf
        MySql += "[FileSize], " + vbCrLf
        MySql += "[ContentType], " + vbCrLf
        MySql += "[Preview], " + vbCrLf
        MySql += "[Restore], " + vbCrLf
        MySql += "[ProcessingCompleted], " + vbCrLf
        MySql += "[EntryDate], " + vbCrLf
        MySql += "[ProcessedDate], " + vbCrLf
        MySql += "[StartDownloadTime], " + vbCrLf
        MySql += "[EndDownloadTime], " + vbCrLf
        MySql += "[RepoName], " + vbCrLf
        MySql += "[RowGuid]  " + vbCrLf
        MySql += " From [RestoreQueue]" + vbCrLf
        MySql += " where [UserID] = '" + UserID + "' and [MachineID] = '" + MachineID + "' and Preview = " + Preview.ToString

        Dim command As New SqlCommand(MySql, CONN)
        Dim RSData As SqlDataReader = Nothing
        RSData = command.ExecuteReader()

        If RSData.HasRows Then
            Do While RSData.Read
                Try
                    Dim CD As New DS_RESTOREQUEUE

                    Try
                        ContentGuid = rsDataQry.GetValue(0).ToString
                    Catch ex As Exception
                        ContentGuid = ""
                    End Try
                    Try
                        UserID = rsDataQry.GetValue(1).ToString
                    Catch ex As Exception
                        UserID = ""
                    End Try
                    Try
                        MachineID = rsDataQry.GetValue(2).ToString
                    Catch ex As Exception
                        MachineID = ""
                    End Try
                    Try
                        FQN = rsDataQry.GetValue(3).ToString
                    Catch ex As Exception
                        FQN = ""
                    End Try
                    Try
                        FileSize = rsDataQry.GetInt32(4)
                    Catch ex As Exception
                        FileSize = Nothing
                    End Try
                    Try
                        ContentType = rsDataQry.GetValue(5).ToString
                    Catch ex As Exception
                        ContentType = Nothing
                    End Try
                    Try
                        Preview = rsDataQry.GetBoolean(6)
                    Catch ex As Exception
                        Preview = False
                    End Try
                    Try
                        Restore = rsDataQry.GetBoolean(7)
                    Catch ex As Exception
                        Restore = False
                    End Try
                    Try
                        ProcessingCompleted = rsDataQry.GetBoolean(8)
                    Catch ex As Exception
                        ProcessingCompleted = False
                    End Try
                    Try
                        EntryDate = rsDataQry.GetDateTime(9)
                    Catch ex As Exception
                        EntryDate = Nothing
                    End Try
                    Try
                        ProcessedDate = rsDataQry.GetDateTime(10)
                    Catch ex As Exception
                        ProcessedDate = Nothing
                    End Try
                    Try
                        StartDownloadTime = rsDataQry.GetDateTime(11)
                    Catch ex As Exception
                        StartDownloadTime = Nothing
                    End Try
                    Try
                        EndDownloadTime = rsDataQry.GetDateTime(12)
                    Catch ex As Exception
                        EndDownloadTime = Nothing
                    End Try
                    Try
                        RepoName = rsDataQry.GetValue(13).ToString
                    Catch ex As Exception
                        RepoName = ""
                    End Try
                    Try
                        RowGuid = rsDataQry.GetValue(14).ToString
                    Catch ex As Exception
                        RowGuid = Nothing
                    End Try

                    CD.ContentGuid = ContentGuid
                    CD.UserID = UserID
                    CD.MachineID = MachineID
                    CD.FQN = FQN
                    CD.FileSize = FileSize
                    CD.ContentType = ContentType
                    CD.Preview = Preview
                    CD.Restore = Restore
                    CD.ProcessingCompleted = ProcessingCompleted
                    CD.EntryDate = EntryDate
                    CD.ProcessedDate = ProcessedDate
                    CD.StartDownloadTime = StartDownloadTime
                    CD.EndDownloadTime = EndDownloadTime
                    CD.RepoName = RepoName
                    CD.RowGuid = New Guid(RowGuid)
                    ListOfRows.Add(CD)

                Catch ex As Exception
                    B = False
                    RC = False
                    xTrace(SecureID, 9925773, "saveRestoreFile", MySql)
                End Try
            Loop
        End If

        If RSData.IsClosed Then
        Else
            RSData.Close()
        End If
        RSData = Nothing

        If CONN.State = ConnectionState.Open Then
            CONN.Close()
        End If
        CONN.Dispose()

        Return ListOfRows

    End Function

    Public Function saveSearchParmsHistory(ByRef SecureID As Integer, ByVal QryParms As String) As Boolean
        Dim UserID As String = "ECM"
        Dim Screen As String = "SEC"
        Dim B As Boolean = False
        Try
            Using connection As New SqlConnection(getConnStr(SecureID))
                Using command As New SqlCommand("gp_SearhParmsHistory_Insert", connection)
                    command.CommandType = CommandType.StoredProcedure
                    command.Parameters.Add(New SqlParameter("@UserID", UserID))
                    command.Parameters.Add(New SqlParameter("@SearchDate", Now))
                    command.Parameters.Add(New SqlParameter("@Screen", Screen))
                    command.Parameters.Add(New SqlParameter("@QryParms", QryParms))

                    connection.Open()
                    command.ExecuteNonQuery()
                    connection.Close()
                    connection.Dispose()
                    command.Dispose()
                End Using
            End Using
            B = True
        Catch ex As Exception
            xTrace(SecureID, 12315, "clsDataBase:saveSearchParmsHistory", ex.Message)
            If dDebug Then Debug.Print(ex.Message)
            B = False
            LogMessage(SecureID, gCurrUserGuidID, "clsDatabase : saveSearchParmsHistory : 2386 : " + ex.Message)
        End Try
        Return B
    End Function

    Sub AlertSearch(ByVal SecureID As Integer, ByVal StringToExamine As String, ByVal IssuedByUserID As String)

        If StringToExamine.Trim.Length = 0 Then
            Return
        End If

        Dim iAlertCount As Integer = iCount(SecureID, "Select count(*) from AlertWord")
        If iAlertCount = 0 Then
            Return
        End If

        Dim ExistNow As Boolean = False
        Dim AlertWords As New SortedList(Of String, Integer)
        Dim S As String = "Select AlertWord from AlertWord"
        Dim tWord As String = ""
        Dim I As Integer = 0
        Dim RSData As SqlDataReader = Nothing

        Try
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                Do While RSData.Read()
                    I += 1
                    tWord = RSData.GetString(0)
                    If Not AlertWords.ContainsKey(tWord) Then
                        Try
                            AlertWords.Add(tWord.ToLower, I)
                        Catch ex As Exception
                            Console.WriteLine(ex.Message)
                        End Try
                    End If
                Loop
            End If
            command.Dispose()
            If CONN.State = ConnectionState.Open Then
                CONN.Close()
            End If
            CONN.Dispose()
        Catch ex As Exception
            Console.WriteLine(ex.Message)
        Finally
            If RSData IsNot Nothing Then
                If RSData.IsClosed Then
                Else
                    RSData.Close()
                End If
                RSData = Nothing
            Else
                ExistNow = True
            End If
            GC.Collect()
        End Try

        If ExistNow Then
            Return
        End If

        Dim UID As String = ""
        Dim Hits As String = ""
        Dim CH As String = ""
        StringToExamine = StringToExamine.Replace("+", " ")
        StringToExamine = StringToExamine.Replace("-", " ")
        StringToExamine = StringToExamine.Replace("~", " ")
        StringToExamine = StringToExamine.Replace("^", " ")
        StringToExamine = StringToExamine.Replace("|", " ")
        Dim A() As String = StringToExamine.Split(" ")
        For Each sAlert As String In A
            If sAlert.Trim.Length > 0 Then
                If sAlert.Trim.Length > 1 Then
                    sAlert = sAlert.ToLower
                    CH = sAlert.Substring(sAlert.Length)
                    If CH.Equals("*") Then
                        Dim xWord As String = sAlert.Substring(1, sAlert.Length - 1)
                        For Each sKey As String In AlertWords.Keys
                            If InStr(sKey, xWord, Microsoft.VisualBasic.CompareMethod.Text) > 0 Then
                                Hits += sAlert + ", "
                                Dim SS As String = "INSERT INTO [AlertHistory] ([AlertWord],[ByUserID]) VALUES  ('" + UTIL.RemoveSingleQuotes(sAlert) + "','" + IssuedByUserID + "')"
                                ExecuteSqlNewConn(SecureID, SS)
                            End If
                        Next
                    Else
                        If AlertWords.ContainsKey(sAlert) Then
                            Hits += sAlert + ", "
                            Dim SS As String = "INSERT INTO [AlertHistory] ([AlertWord],[ByUserID]) VALUES  ('" + UTIL.RemoveSingleQuotes(sAlert) + "','" + IssuedByUserID + "')"
                            ExecuteSqlNewConn(SecureID, SS)
                        End If
                    End If
                End If
            End If
        Next

        If Hits.Trim.Length > 0 Then
            IssueAlert(Hits)
        End If

    End Sub

    Function genWhereClausePartII(ByVal ListOfParms As SortedList(Of String, String)) As String
        Dim S$ = ""

        Dim DbColName As String = ""

        Dim cbFromAddr As String = getSearchParmVal("email.cbFromAddr", ListOfParms)
        Dim cbToAddr As String = getSearchParmVal("email.cbToAddr", ListOfParms)
        Dim cbFromName As String = getSearchParmVal("email.cbFromName", ListOfParms)
        Dim cbToName As String = getSearchParmVal("email.cbToName", ListOfParms)
        Dim cbFolderFilter As String = getSearchParmVal("email.cbFolderFilter", ListOfParms)
        Dim txtSubject As String = getSearchParmVal("email.txtSubject", ListOfParms)
        Dim cbCCaddr As String = getSearchParmVal("email.cbCCaddr", ListOfParms)
        Dim txtCCPhrase As String = getSearchParmVal("email.txtCCPhrase", ListOfParms)
        Dim cbDateSelection As String = getSearchParmVal("email.cbDateSelection", ListOfParms)
        Dim ckCreationDate As String = getSearchParmVal("email.ckCreationDate", ListOfParms)
        Dim dtMailDateStart As String = getSearchParmVal("email.dtMailDateStart", ListOfParms)
        Dim dtMailDateEnd As String = getSearchParmVal("email.dtMailDateEnd", ListOfParms)

        Dim FirstTime As Boolean = True

        If cbFromAddr.Trim.Length > 0 Then
            S = S + "and  SenderEmailAddress like '" + UTIL.RemoveSingleQuotes(cbFromAddr.Trim) + "'" + vbCrLf
        End If

        If cbToAddr.Trim.Length > 0 Then
            S = S + "and ( SentTO like '" + UTIL.RemoveSingleQuotes(cbToAddr.Trim) + "' or "
            S = S + " AllRecipients like '" + UTIL.RemoveSingleQuotes(cbToAddr.Trim) + "') " + vbCrLf
        End If

        If cbFromName.Trim.Length > 0 Then
            S = S + " and SenderName like '" + UTIL.RemoveSingleQuotes(cbFromName.Trim) + "' " + vbCrLf
        End If

        If cbToName.Trim.Length > 0 Then
            S = S + " and ReceivedByName like '" + UTIL.RemoveSingleQuotes(cbToName.Trim) + "' " + vbCrLf
        End If

        If cbFolderFilter.Trim.Length > 0 Then
            S = S + " and OriginalFolder LIKE '" + UTIL.RemoveSingleQuotes(cbFolderFilter.Trim) + "'  " + vbCrLf
        End If

        If txtSubject.Trim.Length > 0 Then
            DMA.ReplaceStar(txtSubject.Trim)
            S = S + " and SUBJECT Like '" + txtSubject.Trim + "' " + vbCrLf
        End If

        If cbCCaddr.Trim.Length > 0 Then
            DMA.ReplaceStar(UTIL.RemoveSingleQuotes(cbCCaddr.Trim))
            S = S + " and (CC like '" + UTIL.RemoveSingleQuotes(cbCCaddr.Trim) + "' or "
            S = S + " BCC like '" + UTIL.RemoveSingleQuotes(cbCCaddr.Trim) + "') " + vbCrLf
        End If
        If txtCCPhrase.Trim.Length > 0 Then
            DMA.ReplaceStar(UTIL.RemoveSingleQuotes(txtCCPhrase.Trim))
            S = S + " and (AllRecipients like '" + UTIL.RemoveSingleQuotes(txtCCPhrase.Trim) + "' or "
            S = S + " CC like '" + UTIL.RemoveSingleQuotes(txtCCPhrase.Trim) + "' or "
            S = S + " BCC like '" + UTIL.RemoveSingleQuotes(txtCCPhrase.Trim) + "') " + vbCrLf
        End If

        If cbDateSelection.Trim <> "OFF" Then
            Dim bAddParens As Boolean = False
            Dim DateQry$ = ""
            Dim TempDateQry$ = ""
            DbColName$ = "SentOn"
            Dim StartDate$ = dtMailDateStart
            Dim EndDate$ = dtMailDateEnd
            Dim Evaluator$ = cbDateSelection.Trim
            If Not Evaluator$.Equals("OFF") Then
                TempDateQry$ = DMA.ckQryDate(StartDate, EndDate, Evaluator, DbColName, FirstTime)
                bAddParens = True
                '** WDM Modified on 3/10/2010
                bAddParens = False
                DateQry += TempDateQry$
            End If

            'If ckCreationDate.Equals("True") Then
            '    DbColName$ = "CreationTime"
            '    Dim StartDate$ = dtMailDateStart
            '    Dim EndDate$ = dtMailDateEnd
            '    Dim Evaluator$ = cbDateSelection.Trim
            '    If Not Evaluator$.Equals("OFF") Then
            '        'S += DMA.ckQryDate(StartDate, EndDate, Evaluator, DbColName, FirstTime)
            '        TempDateQry$ = DMA.ckQryDate(StartDate, EndDate, Evaluator, DbColName, FirstTime)
            '        bAddParens = True
            '        '** WDM Modified on 3/10/2010
            '        bAddParens = False
            '        DateQry += TempDateQry$
            '    End If
            'End If
            'If ckReceivedTime.Equals("True") Then
            '    DbColName$ = "ReceivedTime"
            '    Dim StartDate$ = dtMailDateStart
            '    Dim EndDate$ = dtMailDateEnd
            '    Dim Evaluator$ = cbDateSelection.Trim
            '    If Not Evaluator$.Equals("OFF") Then
            '        'S += DMA.ckQryDate(StartDate, EndDate, Evaluator, DbColName, FirstTime)
            '        TempDateQry$ = DMA.ckQryDate(StartDate, EndDate, Evaluator, DbColName, FirstTime)
            '        bAddParens = True
            '        '** WDM Modified on 3/10/2010
            '        bAddParens = False
            '        DateQry += TempDateQry$
            '    End If
            'End If
            If bAddParens Then
                DateQry = DateQry.Trim
                Dim CH$ = Mid(DateQry, DateQry.Length - 3)
                CH = UCase(CH)
                If CH.Equals("AND") Then
                    DateQry = Mid(DateQry, 1, DateQry.Length - 3)
                End If
                CH$ = Mid(DateQry, DateQry.Length - 2)
                CH = UCase(CH)
                If CH.Equals("OR") Then
                    DateQry = Mid(DateQry, 1, DateQry.Length - 2)
                End If
                S = S + "(" + DateQry + ")"
            Else
                S = S + DateQry
            End If
        End If

        'If S.Length > 0 Then
        '    S = S + S + " AND "
        'End If

        Return S

    End Function

    Function genWhereClause2(ByVal SecureID As Integer, ByVal SearchParmList As SortedList(Of String, String)) As String

        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim UID As String = ""
        Dim txtThesaurus As String = ""
        Dim cbThesaurusText As String = ""
        Dim LibraryName As String = ""
        Dim txtSearch As String = ""
        Dim ckLimitToLib As Boolean = False
        Dim ckLimitToExisting As Boolean = False
        Dim ckWeights As Boolean = False

        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        Dim FirstTime As Boolean = False
        Dim S As String = ""
        Dim CH As String = ""
        Dim WhereClause As String = ""

        Dim SourceName As String = content_txtFileName
        Dim OriginalFileType As String = content_txtcbFileTypes

        Dim cbMeta1 As String = content_cbMeta1
        Dim txtMetaSearch1 As String = content_txtMetaSearch1
        Dim cbMeta2 As String = content_cbMeta2
        Dim txtMetaSearch2 As String = content_txtMetaSearch2

        S = ""

        If content_txtDirectory.Trim.Length > 0 Then
            S = S + "and  FileDirectory like '" + UTIL.RemoveSingleQuotes(content_txtDirectory.Trim) + "'" + vbCrLf
        End If
        If content_txtcbFileTypes.Trim.Length > 0 Then
            S = S + "and  OriginalFileType like '" + UTIL.RemoveSingleQuotes(content_txtcbFileTypes.Trim) + "'" + vbCrLf
        End If
        If content_txtFileName.Trim.Length > 0 Then
            S = S + "and  SourceName like '" + UTIL.RemoveSingleQuotes(content_txtFileName.Trim) + "'" + vbCrLf
        End If
        WhereClause = WhereClause + S

        '*************************************** Check the Metadata ******************************'
        Dim MetaDataWhereClause$ = ""
        MetaDataWhereClause$ = ckMetaData(SearchParmList, SecureID, cbMeta1.Trim, txtMetaSearch1.Trim, FirstTime)
        If MetaDataWhereClause$.Trim.Length > 0 Then
            If MetaDataWhereClause$.Length > 3 Then
                Dim tStr As String = Mid(MetaDataWhereClause$, 1, 3).Trim
                tStr$ = tStr$.ToUpper
                If tStr$.Equals("AND") Then
                    MetaDataWhereClause$ = " " + MetaDataWhereClause$ + " /* z22a */" + vbCrLf
                Else
                    MetaDataWhereClause$ = " AND " + MetaDataWhereClause$ + " /* z22b */" + vbCrLf
                End If
            Else
                MetaDataWhereClause$ = " AND " + MetaDataWhereClause$ + " /* z22c */" + vbCrLf
            End If
            WhereClause = WhereClause + MetaDataWhereClause$
        End If
        MetaDataWhereClause$ = ckMetaData(SearchParmList, SecureID, cbMeta2.Trim, txtMetaSearch2.Trim, FirstTime)
        If MetaDataWhereClause$.Trim.Length > 0 Then
            If MetaDataWhereClause$.Length > 3 Then
                Dim tStr As String = Mid(MetaDataWhereClause$, 1, 3).Trim
                tStr$ = tStr$.ToUpper
                If tStr$.Equals("AND") Then
                    MetaDataWhereClause$ = " " + MetaDataWhereClause$ + " /* z23a */" + vbCrLf
                Else
                    MetaDataWhereClause$ = " AND " + MetaDataWhereClause$ + " /* z23b */" + vbCrLf
                End If
            Else
                MetaDataWhereClause$ = " AND " + MetaDataWhereClause$ + " /* z23c */" + vbCrLf
            End If
            WhereClause = WhereClause + MetaDataWhereClause$
        End If

        '*************************************** END Check the Metadata ******************************'

        Return WhereClause

    End Function

    Function genWhereClause3(ByVal SearchParmList As SortedList(Of String, String)) As String

        '***************************************************************************************************
        '***** Load the passed in parameters 
        '***************************************************************************************************
        Dim isAdmin As Boolean = False
        Dim isSuperAdmin As Boolean = False
        Dim isGlobalSearcher As Boolean = False
        Dim CurrUserGuidID As String = ""
        Dim CurrLoginID As String = ""
        Dim txtSelDir As String = ""
        Dim cbLibrary As String = ""
        Dim nbrWeightMin As Integer = -1
        Dim rbAll As Boolean = False
        Dim rbContent As Boolean = False
        Dim rbEmails As Boolean = False
        Dim ckMyContent As Boolean = False
        Dim ckMasterOnly As Boolean = False
        Dim ckWeights As Boolean = False
        Dim MinWeight As Integer = 0
        Dim bIncludeAllLibs As Boolean = True
        Dim ckBusiness As Boolean = False

        Dim cbThesaurusText As String = ""
        Dim ckLimitToLib As Boolean = False
        Dim UID As String = ""
        Dim txtThesaurus As String = ""
        Dim LibraryName As String = ""
        Dim txtSearch As String = ""
        Dim ckLimitToExisting As Boolean = Nothing

        Dim content_ckDays As Boolean = False
        Dim content_nbrDays As Integer = Nothing
        Dim content_cbEvalCreateTime As String = ""
        Dim content_cbEvalWriteTime As String = ""
        Dim content_dtCreateDateStart As Date = Nothing
        Dim content_dtCreateDateEnd As Date = Nothing
        Dim content_dtLastWriteStart As Date = Nothing
        Dim content_dtLastWriteEnd As Date = Nothing
        Dim content_txtcbFileTypes As String = ""
        Dim content_txtFileName As String = ""
        Dim content_txtDirectory As String = ""
        Dim content_txtMetaSearch1 As String = ""
        Dim content_txtMetaSearch2 As String = ""
        Dim content_txtdtCreateDateStart As Date = Nothing
        Dim content_txtdtCreateDateEnd As Date = Nothing
        Dim content_txtdtLastWriteStart As Date = Nothing
        Dim content_cbMeta1 As String = ""
        Dim content_cbMeta2 As String = ""

        UTIL.getSearchParmList("content.ckDays", content_ckDays, SearchParmList)
        UTIL.getSearchParmList("content.nbrDays", content_nbrDays, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalCreateTime", content_cbEvalCreateTime, SearchParmList)
        UTIL.getSearchParmList("content.cbEvalWriteTime", content_cbEvalWriteTime, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateStart", content_dtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.dtCreateDateEnd", content_dtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteStart", content_dtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.dtLastWriteEnd", content_dtLastWriteEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtFileTypes", content_txtcbFileTypes, SearchParmList)
        UTIL.getSearchParmList("content.txtFileName", content_txtFileName, SearchParmList)
        UTIL.getSearchParmList("content.txtDirectory", content_txtDirectory, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch1", content_txtMetaSearch1, SearchParmList)
        UTIL.getSearchParmList("content.txtMetaSearch2", content_txtMetaSearch2, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateStart", content_txtdtCreateDateStart, SearchParmList)
        UTIL.getSearchParmList("content.txtdtCreateDateEnd", content_txtdtCreateDateEnd, SearchParmList)
        UTIL.getSearchParmList("content.txtdtLastWriteStart", content_txtdtLastWriteStart, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta1", content_cbMeta1, SearchParmList)
        UTIL.getSearchParmList("content.cbMeta2", content_cbMeta2, SearchParmList)

        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckLimitToLib", ckLimitToLib, SearchParmList)
        UTIL.getSearchParmList("rbEmails", rbEmails, SearchParmList)
        UTIL.getSearchParmList("rbContent", rbContent, SearchParmList)
        UTIL.getSearchParmList("rbAll", rbAll, SearchParmList)
        UTIL.getSearchParmList("nbrWeightMin", nbrWeightMin, SearchParmList)
        UTIL.getSearchParmList("cbLibrary", cbLibrary, SearchParmList)
        UTIL.getSearchParmList("txtSelDir", txtSelDir, SearchParmList)
        UTIL.getSearchParmList("CurrLoginID", CurrLoginID, SearchParmList)
        UTIL.getSearchParmList("CurrUserGuidID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("isSuperAdmin", isSuperAdmin, SearchParmList)
        UTIL.getSearchParmList("isAdmin", isAdmin, SearchParmList)
        UTIL.getSearchParmList("isGlobalSearcher", isGlobalSearcher, SearchParmList)
        UTIL.getSearchParmList("UID", CurrUserGuidID, SearchParmList)
        UTIL.getSearchParmList("txtThesaurus", txtThesaurus, SearchParmList)
        UTIL.getSearchParmList("cbThesaurusText", cbThesaurusText, SearchParmList)

        UTIL.getSearchParmList("LibraryName", LibraryName, SearchParmList)
        UTIL.getSearchParmList("MinWeight", MinWeight, SearchParmList)
        UTIL.getSearchParmList("bIncludeAllLibs", bIncludeAllLibs, SearchParmList)

        UTIL.getSearchParmList("txtSearch", txtSearch, SearchParmList)
        UTIL.getSearchParmList("ckLimitToExisting", ckLimitToExisting, SearchParmList)
        UTIL.getSearchParmList("getCountOnly", getCountOnly, SearchParmList)
        UTIL.getSearchParmList("UseExistingRecordsOnly", UseExistingRecordsOnly, SearchParmList)
        UTIL.getSearchParmList("ckWeights", ckWeights, SearchParmList)
        UTIL.getSearchParmList("ckMasterOnly", ckMasterOnly, SearchParmList)
        UTIL.getSearchParmList("ckMyContent", ckMyContent, SearchParmList)
        UTIL.getSearchParmList("ckBusiness", ckBusiness, SearchParmList)
        '***************************************************************************************************

        Dim FirstTime As Boolean = False
        Dim S As String = ""
        Dim CH As String = ""
        Dim WhereClause As String = ""

        Dim DbColName As String = "CreateDate"
        If Not content_cbEvalCreateTime.ToUpper.Equals("OFF") Then
            WhereClause += DMA.ckQryDate(content_dtCreateDateStart, content_dtCreateDateEnd, content_cbEvalCreateTime, DbColName, FirstTime)
        End If

        DbColName = "LastWriteTime"
        If Not content_cbEvalWriteTime.ToUpper.Equals("OFF") Then
            WhereClause += DMA.ckQryDate(content_dtLastWriteStart, content_dtLastWriteEnd, content_cbEvalWriteTime, DbColName, FirstTime)
        End If

        Return WhereClause

    End Function
    Function ckMetaData(ByVal ListOfParms As SortedList(Of String, String), ByVal SecureID As Integer, ByVal MetaDataName As String, ByVal MetaDataValue As String, ByVal FirstTime As Boolean) As String

        Dim isAdmin As String = ListOfParms.Item("isAdmin")
        Dim isGlobalSearcher As String = ListOfParms.Item("isGlobalSearcher")

        Dim S = ""
        Dim CH = ""
        Dim WhereClauseMeteData As String = ""
        If MetaDataValue.Length > 0 Then

            MetaDataValue = UTIL.RemoveSingleQuotes(MetaDataValue)

            Dim MetaDataType = getAttributeDataType(SecureID, MetaDataName)
            Dim QuotesNeeded As Boolean = QuotesRequired(MetaDataType)

            WhereClauseMeteData = " SourceGuid in (" + vbCrLf
            WhereClauseMeteData += Chr(9) + " Select D.SourceGuid" + vbCrLf
            WhereClauseMeteData += Chr(9) + " FROM DataSource AS D INNER JOIN" + vbCrLf
            WhereClauseMeteData += Chr(9) + "      SourceAttribute AS S ON D.SourceGuid = S.SourceGuid" + vbCrLf
            WhereClauseMeteData += Chr(9) + " WHERE (S.AttributeName = '" + MetaDataName + "'" + vbCrLf

            If MetaDataValue.Length > 1 Then
                If QuotesNeeded Then
                    DMA.ReplaceStar(MetaDataValue)
                End If
                If Not QuotesNeeded Then
                    MetaDataValue = MetaDataValue.Trim
                    If MetaDataValue.Length > 1 Then
                        Dim OP = Mid(MetaDataValue, 1, 1)
                        Select Case OP
                            Case "!"
                            Case ">"
                            Case "<"
                            Case "="
                            Case Else
                                MetaDataValue = " = " + MetaDataValue
                        End Select
                    End If
                End If
                If FirstTime Then
                    If QuotesNeeded Then
                        WhereClauseMeteData += Chr(9) + "   and S.AttributeValue LIKE '" + MetaDataValue + "'" + vbCrLf
                    Else
                        WhereClauseMeteData += Chr(9) + "   and S.AttributeValue" + MetaDataValue + vbCrLf
                    End If
                Else
                    If QuotesNeeded Then
                        WhereClauseMeteData += Chr(9) + "   and S.AttributeValue LIKE '" + MetaDataValue + "'" + vbCrLf
                    Else
                        WhereClauseMeteData += Chr(9) + "   and S.AttributeValue" + MetaDataValue + vbCrLf
                    End If
                End If
            End If

            If isAdmin.Equals("True") Or isGlobalSearcher.Equals("True") Then
                WhereClauseMeteData += Chr(9) + ")) " + vbCrLf
            Else
                WhereClauseMeteData += Chr(9) + " and S.DataSourceOwnerUserID = '" + gCurrUserGuidID + "')) " + vbCrLf
            End If

        End If
        Return WhereClauseMeteData
    End Function
    Function getAttributeDataType2(ByVal SecureID As Integer, ByVal AttributeName As String) As String
        Dim tVal As String = ""
        Dim S As String = "Select AttributeDataType FROM [Attributes] where AttributeName = '" + AttributeName$ + "'"
        Try
            Dim RSData As SqlDataReader = Nothing
            Dim CS As String = getConnStr(SecureID) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
            If RSData.HasRows Then
                RSData.Read()
                tVal = RSData.GetString(0)
            Else
                tVal = ""
            End If

            RSData.Close()
            RSData = Nothing

            Return tVal$
        Catch ex As Exception
            Me.xTrace(23.34, "getAttributeDataType", "clsDatabase", ex.Message)
            LOG.WriteToSqlLog("clsDatabase : getAttributeDataType : 5957 : " + ex.Message)
            Return ""
        End Try
    End Function
    Function QuotesRequired(ByVal DataType$) As Boolean
        Dim B As Boolean = False
        DataType = UCase(DataType)

        Select Case DataType
            Case "INT"
                Return False
            Case "DATETIME"
                Return True
            Case "DECIMAL"
                Return False
            Case "FLOAT"
                Return False
            Case "VARCHAR"
                Return True
            Case "NVARCHAR"
                Return True
            Case "CHAR"
                Return True
            Case "NCHAR"
                Return True
            Case Else
                B = True
        End Select
        Return B
    End Function
    Function getSearchParmVal(ByVal tKey As String, ByVal ListOfParms As SortedList(Of String, String)) As String
        Dim RetVal As String = ""
        If ListOfParms.ContainsKey(tKey) Then
            RetVal = ListOfParms.Item(tKey)
        End If
        Return RetVal
    End Function

    Function GetContentMetaData(ByVal SecureID As Integer, ByVal SourceGuid As String) As List(Of DS_Metadata)

        Dim ListOfMetadata As New System.Collections.Generic.List(Of DS_Metadata)
        Dim S As String = "Select AttributeName, AttributeValue" + vbCrLf
        S = S + " FROM [SourceAttribute]" + vbCrLf
        S = S + " where [SourceGuid] = '" + SourceGuid + "'" + vbCrLf
        S = S + " order by [AttributeName]" + vbCrLf

        Dim AttributeName As String = ""
        Dim AttributeValue As String = ""
        Dim rsDataQry As SqlDataReader = Nothing

        Try
            Dim CS As String = getConnStr(SecureID)
            '***********************************
            UTIL.ExtendTimeoutByCount(CS, 30)
            '***********************************
            Dim CONN As New SqlConnection(CS)

            If CONN.State = ConnectionState.Closed Then
                CONN.Open()
            End If

            Dim command As New SqlCommand(S, CONN)
            Dim iCurrRow As Integer = 0

            Try
                rsDataQry = command.ExecuteReader()
                If rsDataQry.HasRows Then
                    Do While rsDataQry.Read

                        Dim CD As New DS_Metadata
                        Try
                            AttributeName = rsDataQry.GetString(0)
                        Catch ex As Exception
                            AttributeName = Nothing
                        End Try
                        Try
                            AttributeValue = rsDataQry.GetString(1)
                        Catch ex As Exception
                            AttributeValue = Nothing
                        End Try

                        If AttributeValue.Length > 0 Then
                            CD.AttributeName = AttributeName
                            CD.AttributeValue = AttributeValue
                            ListOfMetadata.Add(CD)
                        End If
GetNextRecord:
                    Loop
                End If
            Catch ex As Exception
                xTrace(SecureID, 1001, "clsDataBase:GetContentMetaData", ex.Message)
                xTrace(SecureID, 1002, "clsDataBase:GetContentMetaData", ex.StackTrace)
                xTrace(SecureID, 1003, "clsDataBase:GetContentMetaData", S)
            Finally
                If rsDataQry IsNot Nothing Then
                    If Not rsDataQry.IsClosed Then
                        rsDataQry.Close()
                    End If
                    rsDataQry = Nothing
                End If
                command.Dispose()
                command = Nothing
            End Try

        Catch ex As Exception
            LogMessage(SecureID, gCurrUserGuidID, "Failed to process Search Query Please resubmit search: Notification 165.4d07: " + ex.Message)
            ListOfMetadata = Nothing
        End Try

        Return ListOfMetadata

    End Function

    Function scheduleFileDownLoad(ByVal Secureid As Integer, _
                                  ByVal ContentGuid As String, _
                                  ByVal UserID As String, _
                                  ByVal ContentType As String, _
                                  ByVal Preview As Integer, _
                                  ByVal Restore As Integer) As Boolean
        Dim B As Boolean = True
        Dim S As String = ""
        Try
            S = " INSERT INTO [RestoreQueue]" + vbCrLf
            S += " ([ContentGuid]" + vbCrLf
            S += " ,[UserID]" + vbCrLf
            S += " ,[ContentType]" + vbCrLf
            S += " ,[Preview]" + vbCrLf
            S += " ,[Restore]" + vbCrLf
            S += " ,[ProcessingCompleted]" + vbCrLf
            S += " ,[MachineID]" + vbCrLf
            S += " )" + vbCrLf
            S += " VALUES " + vbCrLf
            S += " ('" + ContentGuid + "'" + vbCrLf
            S += " ,'" + UserID + "'" + vbCrLf
            S += " ,'" + ContentType + "'" + vbCrLf
            S += " ," + Preview.ToString + vbCrLf
            S += " ," + Restore.ToString + vbCrLf
            S += " ,0" + vbCrLf
            S += " ,'CLC_MACHINE'" + vbCrLf
            S += " )" + vbCrLf

            B = ExecuteSqlNewConn(Secureid, S)

        Catch ex As Exception
            B = False
            xTrace(Secureid, 99213, "scheduleFileDownLoad", ex.Message + vbCrLf + S)
        End Try
        Return B

    End Function

    ''' <summary>
    ''' Saves a user search to the database and all associated PARAMETERS
    ''' </summary>
    ''' <param name="Secureid"></param>
    ''' <param name="strSearches"></param>
    ''' <returns></returns>
    ''' <remarks></remarks>
    Function SaveUserSearch(ByVal Secureid As Integer, ByVal SearchName As String, ByVal UID As String, ByVal strSearches As String) As Boolean

        SearchName = SearchName.Replace("''", "'")
        SearchName = SearchName.Replace("'", "''")

        Dim B As Boolean = True
        Dim S As String = ""

        Try
            S = " if not exists(Select SearchName from [SearchUser] where SearchName = '" + SearchName + "' and UserID = '" + UID + "')" + vbCrLf
            S += " INSERT INTO [SearchUser]" + vbCrLf
            S += " ([SearchName] " + vbCrLf
            S += " ,[UserID]" + vbCrLf
            S += " ,[SearchParms]" + vbCrLf
            S += " )" + vbCrLf
            S += " VALUES " + vbCrLf
            S += " ('" + SearchName + "'" + vbCrLf
            S += " ,'" + UID + "'" + vbCrLf
            S += " ,'" + strSearches + "'" + vbCrLf
            S += " )" + vbCrLf
            S += " ELSE" + vbCrLf
            S += " Update [SearchUser] " + vbCrLf
            S += " set [SearchName] = '" + SearchName + "'" + vbCrLf
            S += " ,[UserID] = '" + UID + "'" + vbCrLf
            S += " ,[SearchParms] = '" + strSearches + "'" + vbCrLf
            S += " ,LastUsedDate = getdate()" + vbCrLf
            S += " where SearchName = '" + SearchName + "' and UserID = '" + UID + "'" + vbCrLf

            B = ExecuteSqlNewConn(Secureid, S)

        Catch ex As Exception
            B = False
            xTrace(Secureid, 992141, "SaveUserSearch", ex.Message + vbCrLf + S)
        End Try
        Return B

    End Function

    Function RecallUserSearch(ByVal Secureid As Integer, ByVal SearchName As String, ByVal UID As String, ByRef strSearches As String) As Boolean

        strSearches = ""
        SearchName = SearchName.Replace("''", "'")
        SearchName = SearchName.Replace("'", "''")

        Dim B As Boolean = True
        Dim S As String = "select SearchParms from SearchUser where SearchName = '" + SearchName + "' and UserID = '" + UID + "'"

        Dim RSData As SqlDataReader = Nothing
        'RSData = SqlQryNo'Session(S)
        Dim CS As String = getConnStr(Secureid) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
            If RSData.HasRows Then
                Do While RSData.Read()
                    strSearches = RSData.GetValue(0).ToString
                Loop
            End If
            B = True
        Catch ex As Exception
            B = False
            xTrace(Secureid, 771214, "RecallUserSearch", "ERROR: " + ex.Message + vbCrLf + S)
        Finally
            If CONN IsNot Nothing Then
                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()
            End If
            RSData.Close()
            RSData = Nothing
            GC.Collect()
        End Try

        Return B

    End Function

    Function getDefaultScreen(ByVal Secureid As Integer, ByVal UserID As String) As String
        Dim ParmVal As String = "CONTENT"
        Dim S As String = " select ParmVal from [UserCurrParm] where UserID = '" + UserID + "' and ParmName = 'uDefaultScreen'"
        Dim RSData As SqlDataReader = Nothing

        Dim CS As String = getConnStr(Secureid) : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : RSData = command.ExecuteReader()
        Try
            If RSData.HasRows Then
                Do While RSData.Read()
                    ParmVal = RSData.GetValue(0).ToString
                Loop
            End If
        Catch ex As Exception
            ParmVal = "CONTENT"
            xTrace(Secureid, 771216, "getDefaultScreen", "ERROR: " + ex.Message + vbCrLf + S)
        Finally
            If CONN IsNot Nothing Then
                If CONN.State = ConnectionState.Open Then
                    CONN.Close()
                End If
                CONN.Dispose()
            End If
            RSData.Close()
            RSData = Nothing
            GC.Collect()
        End Try
        Return ParmVal
    End Function

    Private Sub IssueAlert(ByVal Hits As String)
        '** Send out an EMAIL and an IM here!
        '** Get the Alert Contact Information and send out the 
        '** Table AlertContact
    End Sub

End Class
