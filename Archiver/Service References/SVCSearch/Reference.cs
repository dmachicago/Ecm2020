// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using global::System;
using System.Collections.Generic;
using System.Diagnostics;
using global::System.Runtime.Serialization;
using MODI;

namespace EcmArchiver.SVCSearch
{
    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_SearchTerms", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_SearchTerms : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string SearchTypeCodeField;
        [OptionalField()]
        private string TermField;
        [OptionalField()]
        private string TermDatatypeField;
        [OptionalField()]
        private string TermValField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string SearchTypeCode
        {
            get
            {
                return SearchTypeCodeField;
            }

            set
            {
                if (ReferenceEquals(SearchTypeCodeField, value) != true)
                {
                    SearchTypeCodeField = value;
                    RaisePropertyChanged("SearchTypeCode");
                }
            }
        }

        [DataMember()]
        public string Term
        {
            get
            {
                return TermField;
            }

            set
            {
                if (ReferenceEquals(TermField, value) != true)
                {
                    TermField = value;
                    RaisePropertyChanged("Term");
                }
            }
        }

        [DataMember()]
        public string TermDatatype
        {
            get
            {
                return TermDatatypeField;
            }

            set
            {
                if (ReferenceEquals(TermDatatypeField, value) != true)
                {
                    TermDatatypeField = value;
                    RaisePropertyChanged("TermDatatype");
                }
            }
        }

        [DataMember()]
        public string TermVal
        {
            get
            {
                return TermValField;
            }

            set
            {
                if (ReferenceEquals(TermValField, value) != true)
                {
                    TermValField = value;
                    RaisePropertyChanged("TermVal");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_USERSEARCHSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_USERSEARCHSTATE : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private bool HiveActiveField;
        [OptionalField()]
        private string HiveConnectionNameField;
        [OptionalField()]
        private string ParmDataTypeField;
        [OptionalField()]
        private string ParmNameField;
        [OptionalField()]
        private string ParmValField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RowCreationDateField;
        [OptionalField()]
        private DateTime RowLastModDateField;
        [OptionalField()]
        private int RowNbrField;
        [OptionalField()]
        private string ScreenNameField;
        [OptionalField()]
        private int SearchIDField;
        [OptionalField()]
        private string UserIDField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public bool HiveActive
        {
            get
            {
                return HiveActiveField;
            }

            set
            {
                if (HiveActiveField.Equals(value) != true)
                {
                    HiveActiveField = value;
                    RaisePropertyChanged("HiveActive");
                }
            }
        }

        [DataMember()]
        public string HiveConnectionName
        {
            get
            {
                return HiveConnectionNameField;
            }

            set
            {
                if (ReferenceEquals(HiveConnectionNameField, value) != true)
                {
                    HiveConnectionNameField = value;
                    RaisePropertyChanged("HiveConnectionName");
                }
            }
        }

        [DataMember()]
        public string ParmDataType
        {
            get
            {
                return ParmDataTypeField;
            }

            set
            {
                if (ReferenceEquals(ParmDataTypeField, value) != true)
                {
                    ParmDataTypeField = value;
                    RaisePropertyChanged("ParmDataType");
                }
            }
        }

        [DataMember()]
        public string ParmName
        {
            get
            {
                return ParmNameField;
            }

            set
            {
                if (ReferenceEquals(ParmNameField, value) != true)
                {
                    ParmNameField = value;
                    RaisePropertyChanged("ParmName");
                }
            }
        }

        [DataMember()]
        public string ParmVal
        {
            get
            {
                return ParmValField;
            }

            set
            {
                if (ReferenceEquals(ParmValField, value) != true)
                {
                    ParmValField = value;
                    RaisePropertyChanged("ParmVal");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RowCreationDate
        {
            get
            {
                return RowCreationDateField;
            }

            set
            {
                if (RowCreationDateField.Equals(value) != true)
                {
                    RowCreationDateField = value;
                    RaisePropertyChanged("RowCreationDate");
                }
            }
        }

        [DataMember()]
        public DateTime RowLastModDate
        {
            get
            {
                return RowLastModDateField;
            }

            set
            {
                if (RowLastModDateField.Equals(value) != true)
                {
                    RowLastModDateField = value;
                    RaisePropertyChanged("RowLastModDate");
                }
            }
        }

        [DataMember()]
        public int RowNbr
        {
            get
            {
                return RowNbrField;
            }

            set
            {
                if (RowNbrField.Equals(value) != true)
                {
                    RowNbrField = value;
                    RaisePropertyChanged("RowNbr");
                }
            }
        }

        [DataMember()]
        public string ScreenName
        {
            get
            {
                return ScreenNameField;
            }

            set
            {
                if (ReferenceEquals(ScreenNameField, value) != true)
                {
                    ScreenNameField = value;
                    RaisePropertyChanged("ScreenName");
                }
            }
        }

        [DataMember()]
        public int SearchID
        {
            get
            {
                return SearchIDField;
            }

            set
            {
                if (SearchIDField.Equals(value) != true)
                {
                    SearchIDField = value;
                    RaisePropertyChanged("SearchID");
                }
            }
        }

        [DataMember()]
        public string UserID
        {
            get
            {
                return UserIDField;
            }

            set
            {
                if (ReferenceEquals(UserIDField, value) != true)
                {
                    UserIDField = value;
                    RaisePropertyChanged("UserID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_USERSCREENSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_USERSCREENSTATE : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private bool HiveActiveField;
        [OptionalField()]
        private string HiveConnectionNameField;
        [OptionalField()]
        private string ParmDataTypeField;
        [OptionalField()]
        private string ParmNameField;
        [OptionalField()]
        private string ParmValField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RowCreationDateField;
        [OptionalField()]
        private DateTime RowLastModDateField;
        [OptionalField()]
        private int RowNbrField;
        [OptionalField()]
        private string ScreenNameField;
        [OptionalField()]
        private string UserIDField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public bool HiveActive
        {
            get
            {
                return HiveActiveField;
            }

            set
            {
                if (HiveActiveField.Equals(value) != true)
                {
                    HiveActiveField = value;
                    RaisePropertyChanged("HiveActive");
                }
            }
        }

        [DataMember()]
        public string HiveConnectionName
        {
            get
            {
                return HiveConnectionNameField;
            }

            set
            {
                if (ReferenceEquals(HiveConnectionNameField, value) != true)
                {
                    HiveConnectionNameField = value;
                    RaisePropertyChanged("HiveConnectionName");
                }
            }
        }

        [DataMember()]
        public string ParmDataType
        {
            get
            {
                return ParmDataTypeField;
            }

            set
            {
                if (ReferenceEquals(ParmDataTypeField, value) != true)
                {
                    ParmDataTypeField = value;
                    RaisePropertyChanged("ParmDataType");
                }
            }
        }

        [DataMember()]
        public string ParmName
        {
            get
            {
                return ParmNameField;
            }

            set
            {
                if (ReferenceEquals(ParmNameField, value) != true)
                {
                    ParmNameField = value;
                    RaisePropertyChanged("ParmName");
                }
            }
        }

        [DataMember()]
        public string ParmVal
        {
            get
            {
                return ParmValField;
            }

            set
            {
                if (ReferenceEquals(ParmValField, value) != true)
                {
                    ParmValField = value;
                    RaisePropertyChanged("ParmVal");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RowCreationDate
        {
            get
            {
                return RowCreationDateField;
            }

            set
            {
                if (RowCreationDateField.Equals(value) != true)
                {
                    RowCreationDateField = value;
                    RaisePropertyChanged("RowCreationDate");
                }
            }
        }

        [DataMember()]
        public DateTime RowLastModDate
        {
            get
            {
                return RowLastModDateField;
            }

            set
            {
                if (RowLastModDateField.Equals(value) != true)
                {
                    RowLastModDateField = value;
                    RaisePropertyChanged("RowLastModDate");
                }
            }
        }

        [DataMember()]
        public int RowNbr
        {
            get
            {
                return RowNbrField;
            }

            set
            {
                if (RowNbrField.Equals(value) != true)
                {
                    RowNbrField = value;
                    RaisePropertyChanged("RowNbr");
                }
            }
        }

        [DataMember()]
        public string ScreenName
        {
            get
            {
                return ScreenNameField;
            }

            set
            {
                if (ReferenceEquals(ScreenNameField, value) != true)
                {
                    ScreenNameField = value;
                    RaisePropertyChanged("ScreenName");
                }
            }
        }

        [DataMember()]
        public string UserID
        {
            get
            {
                return UserIDField;
            }

            set
            {
                if (ReferenceEquals(UserIDField, value) != true)
                {
                    UserIDField = value;
                    RaisePropertyChanged("UserID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_clsUSERGRIDSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_clsUSERGRIDSTATE : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string ColNameField;
        [OptionalField()]
        private int ColOrderField;
        [OptionalField()]
        private bool ColReadOnlyField;
        [OptionalField()]
        private bool ColSortAscField;
        [OptionalField()]
        private int ColSortOrderField;
        [OptionalField()]
        private bool ColVisibleField;
        [OptionalField()]
        private int ColWidthField;
        [OptionalField()]
        private string GridNameField;
        [OptionalField()]
        private bool HiveActiveField;
        [OptionalField()]
        private string HiveConnectionNameField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RowCreationDateField;
        [OptionalField()]
        private DateTime RowLastModDateField;
        [OptionalField()]
        private int RowNbrField;
        [OptionalField()]
        private string ScreenNameField;
        [OptionalField()]
        private string UserIDField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string ColName
        {
            get
            {
                return ColNameField;
            }

            set
            {
                if (ReferenceEquals(ColNameField, value) != true)
                {
                    ColNameField = value;
                    RaisePropertyChanged("ColName");
                }
            }
        }

        [DataMember()]
        public int ColOrder
        {
            get
            {
                return ColOrderField;
            }

            set
            {
                if (ColOrderField.Equals(value) != true)
                {
                    ColOrderField = value;
                    RaisePropertyChanged("ColOrder");
                }
            }
        }

        [DataMember()]
        public bool ColReadOnly
        {
            get
            {
                return ColReadOnlyField;
            }

            set
            {
                if (ColReadOnlyField.Equals(value) != true)
                {
                    ColReadOnlyField = value;
                    RaisePropertyChanged("ColReadOnly");
                }
            }
        }

        [DataMember()]
        public bool ColSortAsc
        {
            get
            {
                return ColSortAscField;
            }

            set
            {
                if (ColSortAscField.Equals(value) != true)
                {
                    ColSortAscField = value;
                    RaisePropertyChanged("ColSortAsc");
                }
            }
        }

        [DataMember()]
        public int ColSortOrder
        {
            get
            {
                return ColSortOrderField;
            }

            set
            {
                if (ColSortOrderField.Equals(value) != true)
                {
                    ColSortOrderField = value;
                    RaisePropertyChanged("ColSortOrder");
                }
            }
        }

        [DataMember()]
        public bool ColVisible
        {
            get
            {
                return ColVisibleField;
            }

            set
            {
                if (ColVisibleField.Equals(value) != true)
                {
                    ColVisibleField = value;
                    RaisePropertyChanged("ColVisible");
                }
            }
        }

        [DataMember()]
        public int ColWidth
        {
            get
            {
                return ColWidthField;
            }

            set
            {
                if (ColWidthField.Equals(value) != true)
                {
                    ColWidthField = value;
                    RaisePropertyChanged("ColWidth");
                }
            }
        }

        [DataMember()]
        public string GridName
        {
            get
            {
                return GridNameField;
            }

            set
            {
                if (ReferenceEquals(GridNameField, value) != true)
                {
                    GridNameField = value;
                    RaisePropertyChanged("GridName");
                }
            }
        }

        [DataMember()]
        public bool HiveActive
        {
            get
            {
                return HiveActiveField;
            }

            set
            {
                if (HiveActiveField.Equals(value) != true)
                {
                    HiveActiveField = value;
                    RaisePropertyChanged("HiveActive");
                }
            }
        }

        [DataMember()]
        public string HiveConnectionName
        {
            get
            {
                return HiveConnectionNameField;
            }

            set
            {
                if (ReferenceEquals(HiveConnectionNameField, value) != true)
                {
                    HiveConnectionNameField = value;
                    RaisePropertyChanged("HiveConnectionName");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RowCreationDate
        {
            get
            {
                return RowCreationDateField;
            }

            set
            {
                if (RowCreationDateField.Equals(value) != true)
                {
                    RowCreationDateField = value;
                    RaisePropertyChanged("RowCreationDate");
                }
            }
        }

        [DataMember()]
        public DateTime RowLastModDate
        {
            get
            {
                return RowLastModDateField;
            }

            set
            {
                if (RowLastModDateField.Equals(value) != true)
                {
                    RowLastModDateField = value;
                    RaisePropertyChanged("RowLastModDate");
                }
            }
        }

        [DataMember()]
        public int RowNbr
        {
            get
            {
                return RowNbrField;
            }

            set
            {
                if (RowNbrField.Equals(value) != true)
                {
                    RowNbrField = value;
                    RaisePropertyChanged("RowNbr");
                }
            }
        }

        [DataMember()]
        public string ScreenName
        {
            get
            {
                return ScreenNameField;
            }

            set
            {
                if (ReferenceEquals(ScreenNameField, value) != true)
                {
                    ScreenNameField = value;
                    RaisePropertyChanged("ScreenName");
                }
            }
        }

        [DataMember()]
        public string UserID
        {
            get
            {
                return UserIDField;
            }

            set
            {
                if (ReferenceEquals(UserIDField, value) != true)
                {
                    UserIDField = value;
                    RaisePropertyChanged("UserID");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_CONTENT", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_CONTENT : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private DateTime CreateDateField;
        [OptionalField()]
        private string DataSourceOwnerUserIDField;
        [OptionalField()]
        private string DescriptionField;
        [OptionalField()]
        private string FQNField;
        [OptionalField()]
        private string FileDirectoryField;
        [OptionalField()]
        private int FileLengthField;
        [OptionalField()]
        private DateTime LastAccessDateField;
        [OptionalField()]
        private DateTime LastWriteTimeField;
        [OptionalField()]
        private string OriginalFileTypeField;
        [OptionalField()]
        private int RANKField;
        [OptionalField()]
        private string ROWIDField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RetentionExpirationDateField;
        [OptionalField()]
        private bool RssLinkFlgField;
        [OptionalField()]
        private string SourceGuidField;
        [OptionalField()]
        private string SourceNameField;
        [OptionalField()]
        private bool StructuredDataField;
        [OptionalField()]
        private int VersionNbrField;
        [OptionalField()]
        private string isMasterField;
        [OptionalField()]
        private string isPublicField;
        [OptionalField()]
        private string isWebPageField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public DateTime CreateDate
        {
            get
            {
                return CreateDateField;
            }

            set
            {
                if (CreateDateField.Equals(value) != true)
                {
                    CreateDateField = value;
                    RaisePropertyChanged("CreateDate");
                }
            }
        }

        [DataMember()]
        public string DataSourceOwnerUserID
        {
            get
            {
                return DataSourceOwnerUserIDField;
            }

            set
            {
                if (ReferenceEquals(DataSourceOwnerUserIDField, value) != true)
                {
                    DataSourceOwnerUserIDField = value;
                    RaisePropertyChanged("DataSourceOwnerUserID");
                }
            }
        }

        [DataMember()]
        public string Description
        {
            get
            {
                return DescriptionField;
            }

            set
            {
                if (ReferenceEquals(DescriptionField, value) != true)
                {
                    DescriptionField = value;
                    RaisePropertyChanged("Description");
                }
            }
        }

        [DataMember()]
        public string FQN
        {
            get
            {
                return FQNField;
            }

            set
            {
                if (ReferenceEquals(FQNField, value) != true)
                {
                    FQNField = value;
                    RaisePropertyChanged("FQN");
                }
            }
        }

        [DataMember()]
        public string FileDirectory
        {
            get
            {
                return FileDirectoryField;
            }

            set
            {
                if (ReferenceEquals(FileDirectoryField, value) != true)
                {
                    FileDirectoryField = value;
                    RaisePropertyChanged("FileDirectory");
                }
            }
        }

        [DataMember()]
        public int FileLength
        {
            get
            {
                return FileLengthField;
            }

            set
            {
                if (FileLengthField.Equals(value) != true)
                {
                    FileLengthField = value;
                    RaisePropertyChanged("FileLength");
                }
            }
        }

        [DataMember()]
        public DateTime LastAccessDate
        {
            get
            {
                return LastAccessDateField;
            }

            set
            {
                if (LastAccessDateField.Equals(value) != true)
                {
                    LastAccessDateField = value;
                    RaisePropertyChanged("LastAccessDate");
                }
            }
        }

        [DataMember()]
        public DateTime LastWriteTime
        {
            get
            {
                return LastWriteTimeField;
            }

            set
            {
                if (LastWriteTimeField.Equals(value) != true)
                {
                    LastWriteTimeField = value;
                    RaisePropertyChanged("LastWriteTime");
                }
            }
        }

        [DataMember()]
        public string OriginalFileType
        {
            get
            {
                return OriginalFileTypeField;
            }

            set
            {
                if (ReferenceEquals(OriginalFileTypeField, value) != true)
                {
                    OriginalFileTypeField = value;
                    RaisePropertyChanged("OriginalFileType");
                }
            }
        }

        [DataMember()]
        public int RANK
        {
            get
            {
                return RANKField;
            }

            set
            {
                if (RANKField.Equals(value) != true)
                {
                    RANKField = value;
                    RaisePropertyChanged("RANK");
                }
            }
        }

        [DataMember()]
        public string ROWID
        {
            get
            {
                return ROWIDField;
            }

            set
            {
                if (ReferenceEquals(ROWIDField, value) != true)
                {
                    ROWIDField = value;
                    RaisePropertyChanged("ROWID");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RetentionExpirationDate
        {
            get
            {
                return RetentionExpirationDateField;
            }

            set
            {
                if (RetentionExpirationDateField.Equals(value) != true)
                {
                    RetentionExpirationDateField = value;
                    RaisePropertyChanged("RetentionExpirationDate");
                }
            }
        }

        [DataMember()]
        public bool RssLinkFlg
        {
            get
            {
                return RssLinkFlgField;
            }

            set
            {
                if (RssLinkFlgField.Equals(value) != true)
                {
                    RssLinkFlgField = value;
                    RaisePropertyChanged("RssLinkFlg");
                }
            }
        }

        [DataMember()]
        public string SourceGuid
        {
            get
            {
                return SourceGuidField;
            }

            set
            {
                if (ReferenceEquals(SourceGuidField, value) != true)
                {
                    SourceGuidField = value;
                    RaisePropertyChanged("SourceGuid");
                }
            }
        }

        [DataMember()]
        public string SourceName
        {
            get
            {
                return SourceNameField;
            }

            set
            {
                if (ReferenceEquals(SourceNameField, value) != true)
                {
                    SourceNameField = value;
                    RaisePropertyChanged("SourceName");
                }
            }
        }

        [DataMember()]
        public bool StructuredData
        {
            get
            {
                return StructuredDataField;
            }

            set
            {
                if (StructuredDataField.Equals(value) != true)
                {
                    StructuredDataField = value;
                    RaisePropertyChanged("StructuredData");
                }
            }
        }

        [DataMember()]
        public int VersionNbr
        {
            get
            {
                return VersionNbrField;
            }

            set
            {
                if (VersionNbrField.Equals(value) != true)
                {
                    VersionNbrField = value;
                    RaisePropertyChanged("VersionNbr");
                }
            }
        }

        [DataMember()]
        public string isMaster
        {
            get
            {
                return isMasterField;
            }

            set
            {
                if (ReferenceEquals(isMasterField, value) != true)
                {
                    isMasterField = value;
                    RaisePropertyChanged("isMaster");
                }
            }
        }

        [DataMember()]
        public string isPublic
        {
            get
            {
                return isPublicField;
            }

            set
            {
                if (ReferenceEquals(isPublicField, value) != true)
                {
                    isPublicField = value;
                    RaisePropertyChanged("isPublic");
                }
            }
        }

        [DataMember()]
        public string isWebPage
        {
            get
            {
                return isWebPageField;
            }

            set
            {
                if (ReferenceEquals(isWebPageField, value) != true)
                {
                    isWebPageField = value;
                    RaisePropertyChanged("isWebPage");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_EMAIL", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_EMAIL : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string AllRecipientsField;
        [OptionalField()]
        private string BccField;
        [OptionalField()]
        private string BodyField;
        [OptionalField()]
        private string CCField;
        [OptionalField()]
        private DateTime CreationTimeField;
        [OptionalField()]
        private string EmailGuidField;
        [OptionalField()]
        private bool FoundInAttachField;
        [OptionalField()]
        private int MsgSizeField;
        [OptionalField()]
        private int NbrAttachmentsField;
        [OptionalField()]
        private string OriginalFolderField;
        [OptionalField()]
        private int RANKField;
        [OptionalField()]
        private string RIDField;
        [OptionalField()]
        private string ROWIDField;
        [OptionalField()]
        private string ReceivedByNameField;
        [OptionalField()]
        private DateTime ReceivedTimeField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RetentionExpirationDateField;
        [OptionalField()]
        private string SUBJECTField;
        [OptionalField()]
        private string SenderEmailAddressField;
        [OptionalField()]
        private string SenderNameField;
        [OptionalField()]
        private DateTime SentOnField;
        [OptionalField()]
        private string SentTOField;
        [OptionalField()]
        private string ShortSubjField;
        [OptionalField()]
        private string SourceTypeCodeField;
        [OptionalField()]
        private string UserIDField;
        [OptionalField()]
        private string isPublicField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string AllRecipients
        {
            get
            {
                return AllRecipientsField;
            }

            set
            {
                if (ReferenceEquals(AllRecipientsField, value) != true)
                {
                    AllRecipientsField = value;
                    RaisePropertyChanged("AllRecipients");
                }
            }
        }

        [DataMember()]
        public string Bcc
        {
            get
            {
                return BccField;
            }

            set
            {
                if (ReferenceEquals(BccField, value) != true)
                {
                    BccField = value;
                    RaisePropertyChanged("Bcc");
                }
            }
        }

        [DataMember()]
        public string Body
        {
            get
            {
                return BodyField;
            }

            set
            {
                if (ReferenceEquals(BodyField, value) != true)
                {
                    BodyField = value;
                    RaisePropertyChanged("Body");
                }
            }
        }

        [DataMember()]
        public string CC
        {
            get
            {
                return CCField;
            }

            set
            {
                if (ReferenceEquals(CCField, value) != true)
                {
                    CCField = value;
                    RaisePropertyChanged("CC");
                }
            }
        }

        [DataMember()]
        public DateTime CreationTime
        {
            get
            {
                return CreationTimeField;
            }

            set
            {
                if (CreationTimeField.Equals(value) != true)
                {
                    CreationTimeField = value;
                    RaisePropertyChanged("CreationTime");
                }
            }
        }

        [DataMember()]
        public string EmailGuid
        {
            get
            {
                return EmailGuidField;
            }

            set
            {
                if (ReferenceEquals(EmailGuidField, value) != true)
                {
                    EmailGuidField = value;
                    RaisePropertyChanged("EmailGuid");
                }
            }
        }

        [DataMember()]
        public bool FoundInAttach
        {
            get
            {
                return FoundInAttachField;
            }

            set
            {
                if (FoundInAttachField.Equals(value) != true)
                {
                    FoundInAttachField = value;
                    RaisePropertyChanged("FoundInAttach");
                }
            }
        }

        [DataMember()]
        public int MsgSize
        {
            get
            {
                return MsgSizeField;
            }

            set
            {
                if (MsgSizeField.Equals(value) != true)
                {
                    MsgSizeField = value;
                    RaisePropertyChanged("MsgSize");
                }
            }
        }

        [DataMember()]
        public int NbrAttachments
        {
            get
            {
                return NbrAttachmentsField;
            }

            set
            {
                if (NbrAttachmentsField.Equals(value) != true)
                {
                    NbrAttachmentsField = value;
                    RaisePropertyChanged("NbrAttachments");
                }
            }
        }

        [DataMember()]
        public string OriginalFolder
        {
            get
            {
                return OriginalFolderField;
            }

            set
            {
                if (ReferenceEquals(OriginalFolderField, value) != true)
                {
                    OriginalFolderField = value;
                    RaisePropertyChanged("OriginalFolder");
                }
            }
        }

        [DataMember()]
        public int RANK
        {
            get
            {
                return RANKField;
            }

            set
            {
                if (RANKField.Equals(value) != true)
                {
                    RANKField = value;
                    RaisePropertyChanged("RANK");
                }
            }
        }

        [DataMember()]
        public string RID
        {
            get
            {
                return RIDField;
            }

            set
            {
                if (ReferenceEquals(RIDField, value) != true)
                {
                    RIDField = value;
                    RaisePropertyChanged("RID");
                }
            }
        }

        [DataMember()]
        public string ROWID
        {
            get
            {
                return ROWIDField;
            }

            set
            {
                if (ReferenceEquals(ROWIDField, value) != true)
                {
                    ROWIDField = value;
                    RaisePropertyChanged("ROWID");
                }
            }
        }

        [DataMember()]
        public string ReceivedByName
        {
            get
            {
                return ReceivedByNameField;
            }

            set
            {
                if (ReferenceEquals(ReceivedByNameField, value) != true)
                {
                    ReceivedByNameField = value;
                    RaisePropertyChanged("ReceivedByName");
                }
            }
        }

        [DataMember()]
        public DateTime ReceivedTime
        {
            get
            {
                return ReceivedTimeField;
            }

            set
            {
                if (ReceivedTimeField.Equals(value) != true)
                {
                    ReceivedTimeField = value;
                    RaisePropertyChanged("ReceivedTime");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RetentionExpirationDate
        {
            get
            {
                return RetentionExpirationDateField;
            }

            set
            {
                if (RetentionExpirationDateField.Equals(value) != true)
                {
                    RetentionExpirationDateField = value;
                    RaisePropertyChanged("RetentionExpirationDate");
                }
            }
        }

        [DataMember()]
        public string SUBJECT
        {
            get
            {
                return SUBJECTField;
            }

            set
            {
                if (ReferenceEquals(SUBJECTField, value) != true)
                {
                    SUBJECTField = value;
                    RaisePropertyChanged("SUBJECT");
                }
            }
        }

        [DataMember()]
        public string SenderEmailAddress
        {
            get
            {
                return SenderEmailAddressField;
            }

            set
            {
                if (ReferenceEquals(SenderEmailAddressField, value) != true)
                {
                    SenderEmailAddressField = value;
                    RaisePropertyChanged("SenderEmailAddress");
                }
            }
        }

        [DataMember()]
        public string SenderName
        {
            get
            {
                return SenderNameField;
            }

            set
            {
                if (ReferenceEquals(SenderNameField, value) != true)
                {
                    SenderNameField = value;
                    RaisePropertyChanged("SenderName");
                }
            }
        }

        [DataMember()]
        public DateTime SentOn
        {
            get
            {
                return SentOnField;
            }

            set
            {
                if (SentOnField.Equals(value) != true)
                {
                    SentOnField = value;
                    RaisePropertyChanged("SentOn");
                }
            }
        }

        [DataMember()]
        public string SentTO
        {
            get
            {
                return SentTOField;
            }

            set
            {
                if (ReferenceEquals(SentTOField, value) != true)
                {
                    SentTOField = value;
                    RaisePropertyChanged("SentTO");
                }
            }
        }

        [DataMember()]
        public string ShortSubj
        {
            get
            {
                return ShortSubjField;
            }

            set
            {
                if (ReferenceEquals(ShortSubjField, value) != true)
                {
                    ShortSubjField = value;
                    RaisePropertyChanged("ShortSubj");
                }
            }
        }

        [DataMember()]
        public string SourceTypeCode
        {
            get
            {
                return SourceTypeCodeField;
            }

            set
            {
                if (ReferenceEquals(SourceTypeCodeField, value) != true)
                {
                    SourceTypeCodeField = value;
                    RaisePropertyChanged("SourceTypeCode");
                }
            }
        }

        [DataMember()]
        public string UserID
        {
            get
            {
                return UserIDField;
            }

            set
            {
                if (ReferenceEquals(UserIDField, value) != true)
                {
                    UserIDField = value;
                    RaisePropertyChanged("UserID");
                }
            }
        }

        [DataMember()]
        public string isPublic
        {
            get
            {
                return isPublicField;
            }

            set
            {
                if (ReferenceEquals(isPublicField, value) != true)
                {
                    isPublicField = value;
                    RaisePropertyChanged("isPublic");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_License", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_License : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string AppliedField;
        [OptionalField()]
        private string CompanyIDField;
        [OptionalField()]
        private string EncryptedLicenseField;
        [OptionalField()]
        private string LicenseIDField;
        [OptionalField()]
        private int LicenseNbrField;
        [OptionalField()]
        private string LicenseTextField;
        [OptionalField()]
        private string LicenseTypeCodeField;
        [OptionalField()]
        private string MachineIDField;
        [OptionalField()]
        private string PurchasedMachinesField;
        [OptionalField()]
        private string PurchasedUsersField;
        [OptionalField()]
        private string ServerNAMEField;
        [OptionalField()]
        private string SqlInstanceNameField;
        [OptionalField()]
        private string SupportActiveField;
        [OptionalField()]
        private string SupportActiveDateField;
        [OptionalField()]
        private string SupportInactiveDateField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string Applied
        {
            get
            {
                return AppliedField;
            }

            set
            {
                if (ReferenceEquals(AppliedField, value) != true)
                {
                    AppliedField = value;
                    RaisePropertyChanged("Applied");
                }
            }
        }

        [DataMember()]
        public string CompanyID
        {
            get
            {
                return CompanyIDField;
            }

            set
            {
                if (ReferenceEquals(CompanyIDField, value) != true)
                {
                    CompanyIDField = value;
                    RaisePropertyChanged("CompanyID");
                }
            }
        }

        [DataMember()]
        public string EncryptedLicense
        {
            get
            {
                return EncryptedLicenseField;
            }

            set
            {
                if (ReferenceEquals(EncryptedLicenseField, value) != true)
                {
                    EncryptedLicenseField = value;
                    RaisePropertyChanged("EncryptedLicense");
                }
            }
        }

        [DataMember()]
        public string LicenseID
        {
            get
            {
                return LicenseIDField;
            }

            set
            {
                if (ReferenceEquals(LicenseIDField, value) != true)
                {
                    LicenseIDField = value;
                    RaisePropertyChanged("LicenseID");
                }
            }
        }

        [DataMember()]
        public int LicenseNbr
        {
            get
            {
                return LicenseNbrField;
            }

            set
            {
                if (LicenseNbrField.Equals(value) != true)
                {
                    LicenseNbrField = value;
                    RaisePropertyChanged("LicenseNbr");
                }
            }
        }

        [DataMember()]
        public string LicenseText
        {
            get
            {
                return LicenseTextField;
            }

            set
            {
                if (ReferenceEquals(LicenseTextField, value) != true)
                {
                    LicenseTextField = value;
                    RaisePropertyChanged("LicenseText");
                }
            }
        }

        [DataMember()]
        public string LicenseTypeCode
        {
            get
            {
                return LicenseTypeCodeField;
            }

            set
            {
                if (ReferenceEquals(LicenseTypeCodeField, value) != true)
                {
                    LicenseTypeCodeField = value;
                    RaisePropertyChanged("LicenseTypeCode");
                }
            }
        }

        [DataMember()]
        public string MachineID
        {
            get
            {
                return MachineIDField;
            }

            set
            {
                if (ReferenceEquals(MachineIDField, value) != true)
                {
                    MachineIDField = value;
                    RaisePropertyChanged("MachineID");
                }
            }
        }

        [DataMember()]
        public string PurchasedMachines
        {
            get
            {
                return PurchasedMachinesField;
            }

            set
            {
                if (ReferenceEquals(PurchasedMachinesField, value) != true)
                {
                    PurchasedMachinesField = value;
                    RaisePropertyChanged("PurchasedMachines");
                }
            }
        }

        [DataMember()]
        public string PurchasedUsers
        {
            get
            {
                return PurchasedUsersField;
            }

            set
            {
                if (ReferenceEquals(PurchasedUsersField, value) != true)
                {
                    PurchasedUsersField = value;
                    RaisePropertyChanged("PurchasedUsers");
                }
            }
        }

        [DataMember()]
        public string ServerNAME
        {
            get
            {
                return ServerNAMEField;
            }

            set
            {
                if (ReferenceEquals(ServerNAMEField, value) != true)
                {
                    ServerNAMEField = value;
                    RaisePropertyChanged("ServerNAME");
                }
            }
        }

        [DataMember()]
        public string SqlInstanceName
        {
            get
            {
                return SqlInstanceNameField;
            }

            set
            {
                if (ReferenceEquals(SqlInstanceNameField, value) != true)
                {
                    SqlInstanceNameField = value;
                    RaisePropertyChanged("SqlInstanceName");
                }
            }
        }

        [DataMember()]
        public string SupportActive
        {
            get
            {
                return SupportActiveField;
            }

            set
            {
                if (ReferenceEquals(SupportActiveField, value) != true)
                {
                    SupportActiveField = value;
                    RaisePropertyChanged("SupportActive");
                }
            }
        }

        [DataMember()]
        public string SupportActiveDate
        {
            get
            {
                return SupportActiveDateField;
            }

            set
            {
                if (ReferenceEquals(SupportActiveDateField, value) != true)
                {
                    SupportActiveDateField = value;
                    RaisePropertyChanged("SupportActiveDate");
                }
            }
        }

        [DataMember()]
        public string SupportInactiveDate
        {
            get
            {
                return SupportInactiveDateField;
            }

            set
            {
                if (ReferenceEquals(SupportInactiveDateField, value) != true)
                {
                    SupportInactiveDateField = value;
                    RaisePropertyChanged("SupportInactiveDate");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_ListOfStrings01", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_ListOfStrings01 : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string strItemField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string strItem
        {
            get
            {
                return strItemField;
            }

            set
            {
                if (ReferenceEquals(strItemField, value) != true)
                {
                    strItemField = value;
                    RaisePropertyChanged("strItem");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_ListOfStrings02", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_ListOfStrings02 : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string strItemField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string strItem
        {
            get
            {
                return strItemField;
            }

            set
            {
                if (ReferenceEquals(strItemField, value) != true)
                {
                    strItemField = value;
                    RaisePropertyChanged("strItem");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_ListOfStrings03", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_ListOfStrings03 : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string strItemField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string strItem
        {
            get
            {
                return strItemField;
            }

            set
            {
                if (ReferenceEquals(strItemField, value) != true)
                {
                    strItemField = value;
                    RaisePropertyChanged("strItem");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_ListOfStrings04", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_ListOfStrings04 : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string strItemField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string strItem
        {
            get
            {
                return strItemField;
            }

            set
            {
                if (ReferenceEquals(strItemField, value) != true)
                {
                    strItemField = value;
                    RaisePropertyChanged("strItem");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.Runtime.Serialization", "4.0.0.0")]
    [DataContract(Name = "DS_VUserGrid", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web")]
    [Serializable()]
    public partial class DS_VUserGrid : object, IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
    {
        [NonSerialized()]
        private ExtensionDataObject extensionDataField;
        [OptionalField()]
        private string AdminField;
        [OptionalField()]
        private bool ClientOnlyField;
        [OptionalField()]
        private string EmailAddressField;
        [OptionalField()]
        private bool HiveActiveField;
        [OptionalField()]
        private string HiveConnectionNameField;
        [OptionalField()]
        private string RepoSvrNameField;
        [OptionalField()]
        private DateTime RowCreationDateField;
        [OptionalField()]
        private DateTime RowLastModDateField;
        [OptionalField()]
        private string UserIDField;
        [OptionalField()]
        private string UserLoginIDField;
        [OptionalField()]
        private string UserNameField;
        [OptionalField()]
        private string isActiveField;

        [System.ComponentModel.Browsable(false)]
        public ExtensionDataObject ExtensionData
        {
            get
            {
                return extensionDataField;
            }

            set
            {
                extensionDataField = value;
            }
        }

        [DataMember()]
        public string Admin
        {
            get
            {
                return AdminField;
            }

            set
            {
                if (ReferenceEquals(AdminField, value) != true)
                {
                    AdminField = value;
                    RaisePropertyChanged("Admin");
                }
            }
        }

        [DataMember()]
        public bool ClientOnly
        {
            get
            {
                return ClientOnlyField;
            }

            set
            {
                if (ClientOnlyField.Equals(value) != true)
                {
                    ClientOnlyField = value;
                    RaisePropertyChanged("ClientOnly");
                }
            }
        }

        [DataMember()]
        public string EmailAddress
        {
            get
            {
                return EmailAddressField;
            }

            set
            {
                if (ReferenceEquals(EmailAddressField, value) != true)
                {
                    EmailAddressField = value;
                    RaisePropertyChanged("EmailAddress");
                }
            }
        }

        [DataMember()]
        public bool HiveActive
        {
            get
            {
                return HiveActiveField;
            }

            set
            {
                if (HiveActiveField.Equals(value) != true)
                {
                    HiveActiveField = value;
                    RaisePropertyChanged("HiveActive");
                }
            }
        }

        [DataMember()]
        public string HiveConnectionName
        {
            get
            {
                return HiveConnectionNameField;
            }

            set
            {
                if (ReferenceEquals(HiveConnectionNameField, value) != true)
                {
                    HiveConnectionNameField = value;
                    RaisePropertyChanged("HiveConnectionName");
                }
            }
        }

        [DataMember()]
        public string RepoSvrName
        {
            get
            {
                return RepoSvrNameField;
            }

            set
            {
                if (ReferenceEquals(RepoSvrNameField, value) != true)
                {
                    RepoSvrNameField = value;
                    RaisePropertyChanged("RepoSvrName");
                }
            }
        }

        [DataMember()]
        public DateTime RowCreationDate
        {
            get
            {
                return RowCreationDateField;
            }

            set
            {
                if (RowCreationDateField.Equals(value) != true)
                {
                    RowCreationDateField = value;
                    RaisePropertyChanged("RowCreationDate");
                }
            }
        }

        [DataMember()]
        public DateTime RowLastModDate
        {
            get
            {
                return RowLastModDateField;
            }

            set
            {
                if (RowLastModDateField.Equals(value) != true)
                {
                    RowLastModDateField = value;
                    RaisePropertyChanged("RowLastModDate");
                }
            }
        }

        [DataMember()]
        public string UserID
        {
            get
            {
                return UserIDField;
            }

            set
            {
                if (ReferenceEquals(UserIDField, value) != true)
                {
                    UserIDField = value;
                    RaisePropertyChanged("UserID");
                }
            }
        }

        [DataMember()]
        public string UserLoginID
        {
            get
            {
                return UserLoginIDField;
            }

            set
            {
                if (ReferenceEquals(UserLoginIDField, value) != true)
                {
                    UserLoginIDField = value;
                    RaisePropertyChanged("UserLoginID");
                }
            }
        }

        [DataMember()]
        public string UserName
        {
            get
            {
                return UserNameField;
            }

            set
            {
                if (ReferenceEquals(UserNameField, value) != true)
                {
                    UserNameField = value;
                    RaisePropertyChanged("UserName");
                }
            }
        }

        [DataMember()]
        public string isActive
        {
            get
            {
                return isActiveField;
            }

            set
            {
                if (ReferenceEquals(isActiveField, value) != true)
                {
                    isActiveField = value;
                    RaisePropertyChanged("isActive");
                }
            }
        }

        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;

        protected void RaisePropertyChanged(string propertyName)
        {
            var propertyChanged = PropertyChanged;
            if (propertyChanged is object)
            {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContract(ConfigurationName = "SVCSearch.IService1")]
    public interface IService1
    {
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setLoginGuid", ReplyAction = "http://tempuri.org/IService1/setLoginGuidResponse")]
        void setLoginGuid(ref int SecureID, string MyLoginGuid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getLoginGuid", ReplyAction = "http://tempuri.org/IService1/getLoginGuidResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getLoginGuid(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getHttpSessionID", ReplyAction = "http://tempuri.org/IService1/getHttpSessionIDResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getHttpSessionID(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setSessionID", ReplyAction = "http://tempuri.org/IService1/setSessionIDResponse")]
        void setSessionID(ref int SecureID, string MySessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExpandInflectionTerms", ReplyAction = "http://tempuri.org/IService1/ExpandInflectionTermsResponse")]
        string ExpandInflectionTerms(ref int SecureID, string S);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getServerDatabaseName", ReplyAction = "http://tempuri.org/IService1/getServerDatabaseNameResponse")]
        string getServerDatabaseName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/CleanLog", ReplyAction = "http://tempuri.org/IService1/CleanLogResponse")]
        void CleanLog(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateComboBox", ReplyAction = "http://tempuri.org/IService1/PopulateComboBoxResponse")]
        void PopulateComboBox(ref int SecureID, ref string CB, string TblColName, string S);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetEmailAttachments", ReplyAction = "http://tempuri.org/IService1/GetEmailAttachmentsResponse")]
        string GetEmailAttachments(ref int SecureID, string CurrEmailGuid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DbWriteToFile", ReplyAction = "http://tempuri.org/IService1/DbWriteToFileResponse")]
        bool DbWriteToFile(ref int SecureID, string UID, string SourceGuid, ref string FileName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SetSessionVariable", ReplyAction = "http://tempuri.org/IService1/SetSessionVariableResponse")]
        void SetSessionVariable(ref int SecureID, string key, string KeyValue);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetSessionVariable", ReplyAction = "http://tempuri.org/IService1/GetSessionVariableResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object GetSessionVariable(ref int SecureID, string key);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/UpdateSourceImageCompressed", ReplyAction = "http://tempuri.org/IService1/UpdateSourceImageCompressedResponse")]
        bool UpdateSourceImageCompressed(ref int SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/writeEmailFromDbToFile", ReplyAction = "http://tempuri.org/IService1/writeEmailFromDbToFileResponse")]
        void writeEmailFromDbToFile(ref int SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/writeAttachmentFromDbWriteToFile", ReplyAction = "http://tempuri.org/IService1/writeAttachmentFromDbWriteToFileResponse")]
        void writeAttachmentFromDbWriteToFile(ref int SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFile", ReplyAction = "http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFileResponse")]
        void writeImageSourceDataFromDbWriteToFile(ref int SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddLibraryItems", ReplyAction = "http://tempuri.org/IService1/AddLibraryItemsResponse")]
        void AddLibraryItems(ref int SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateGroupUserLibCombo", ReplyAction = "http://tempuri.org/IService1/PopulateGroupUserLibComboResponse")]
        void PopulateGroupUserLibCombo(ref int SecureID, string UID, ref string[] cb);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetLibOwnerByName", ReplyAction = "http://tempuri.org/IService1/GetLibOwnerByNameResponse")]
        string GetLibOwnerByName(ref int SecureID, string LibraryName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSearch", ReplyAction = "http://tempuri.org/IService1/ExecuteSearchResponse")]
        void ExecuteSearch(ref int SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref string ListOEmailRows, ref string ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSearchState", ReplyAction = "http://tempuri.org/IService1/getSearchStateResponse")]
        DS_USERSEARCHSTATE[] getSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, ref Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/saveSearchState", ReplyAction = "http://tempuri.org/IService1/saveSearchStateResponse")]
        void saveSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getScreenState", ReplyAction = "http://tempuri.org/IService1/getScreenStateResponse")]
        DS_USERSCREENSTATE[] getScreenState(ref int SecureID, string UID, string ScreenName, ref Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getGridLayout", ReplyAction = "http://tempuri.org/IService1/getGridLayoutResponse")]
        DS_clsUSERGRIDSTATE[] getGridLayout(ref int SecureID, string UID, string ScreenName, string GridName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/saveGridLayout", ReplyAction = "http://tempuri.org/IService1/saveGridLayoutResponse")]
        void saveGridLayout(ref int SecureID, ref string UserID, ref string ScreenName, ref string GridName, ref string ColName, ref int ColOrder, ref int ColWidth, ref bool ColVisible, ref bool ColReadOnly, ref int ColSortOrder, ref bool ColSortAsc, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref int RowNbr, ref bool RC, ref string rMsg);


















        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/saveScreenState", ReplyAction = "http://tempuri.org/IService1/saveScreenStateResponse")]
        void saveScreenState(ref int SecureID, string UID, string ScreenName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getUserParms", ReplyAction = "http://tempuri.org/IService1/getUserParmsResponse")]
        void getUserParms(ref int SecureID, string UserID, ref Dictionary<string, string> UserParms);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ParseLicDictionary", ReplyAction = "http://tempuri.org/IService1/ParseLicDictionaryResponse")]
        void ParseLicDictionary(ref int SecureID, string S, ref Dictionary<string, string> D);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/LicenseType", ReplyAction = "http://tempuri.org/IService1/LicenseTypeResponse")]
        string LicenseType(int SecureID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetNbrUsers", ReplyAction = "http://tempuri.org/IService1/GetNbrUsersResponse")]
        int GetNbrUsers(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/isLease", ReplyAction = "http://tempuri.org/IService1/isLeaseResponse")]
        bool isLease(int SecureID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getMaxClients", ReplyAction = "http://tempuri.org/IService1/getMaxClientsResponse")]
        int getMaxClients(int SecureID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetUserHostName", ReplyAction = "http://tempuri.org/IService1/GetUserHostNameResponse")]
        string GetUserHostName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetUserHostAddress", ReplyAction = "http://tempuri.org/IService1/GetUserHostAddressResponse")]
        string GetUserHostAddress(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getUserGuidID", ReplyAction = "http://tempuri.org/IService1/getUserGuidIDResponse")]
        string getUserGuidID(ref int SecureID, string UserLoginId);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ProcessDates", ReplyAction = "http://tempuri.org/IService1/ProcessDatesResponse")]
        Dictionary<string, DateTime> ProcessDates(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetNbrMachineAll", ReplyAction = "http://tempuri.org/IService1/GetNbrMachineAllResponse")]
        int GetNbrMachineAll(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetNbrMachine", ReplyAction = "http://tempuri.org/IService1/GetNbrMachineResponse")]
        int GetNbrMachine(ref int SecureID, string MachineName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachine", ReplyAction = "http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachineResponse")]
        bool isLicenseLocatedOnAssignedMachine(ref int SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetXrt", ReplyAction = "http://tempuri.org/IService1/GetXrtResponse")]
        string GetXrt(ref int SecureID, bool RC, string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSqlServerVersion", ReplyAction = "http://tempuri.org/IService1/getSqlServerVersionResponse")]
        string getSqlServerVersion(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/RecordGrowth", ReplyAction = "http://tempuri.org/IService1/RecordGrowthResponse")]
        void RecordGrowth(ref int SecureID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ParseLic", ReplyAction = "http://tempuri.org/IService1/ParseLicResponse")]
        string ParseLic(ref int SecureID, string LT, string tgtKey);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetLoggedinUserName", ReplyAction = "http://tempuri.org/IService1/GetLoggedinUserNameResponse")]
        string GetLoggedinUserName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getDBSIZEMB", ReplyAction = "http://tempuri.org/IService1/getDBSIZEMBResponse")]
        double getDBSIZEMB(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/resetMissingEmailIds", ReplyAction = "http://tempuri.org/IService1/resetMissingEmailIdsResponse")]
        void resetMissingEmailIds(ref int SecureID, string CurrUserGuidID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/UserParmInsertUpdate", ReplyAction = "http://tempuri.org/IService1/UserParmInsertUpdateResponse")]
        void UserParmInsertUpdate(ref int SecureID, string ParmName, string UserID, string ParmVal, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/validateLogin", ReplyAction = "http://tempuri.org/IService1/validateLoginResponse")]
        bool validateLogin(ref int SecureID, string UserLogin, string PW, ref string UserGuidID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getLoggedInUser", ReplyAction = "http://tempuri.org/IService1/getLoggedInUserResponse")]
        string getLoggedInUser(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getAttachedMachineName", ReplyAction = "http://tempuri.org/IService1/getAttachedMachineNameResponse")]
        string getAttachedMachineName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getServerInstanceName", ReplyAction = "http://tempuri.org/IService1/getServerInstanceNameResponse")]
        string getServerInstanceName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getServerMachineName", ReplyAction = "http://tempuri.org/IService1/getServerMachineNameResponse")]
        string getServerMachineName(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSystemParm", ReplyAction = "http://tempuri.org/IService1/getSystemParmResponse")]
        void getSystemParm(ref int SecureID, ref Dictionary<string, string> SystemParms);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSynonyms", ReplyAction = "http://tempuri.org/IService1/getSynonymsResponse")]
        string getSynonyms(ref int SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getThesaurusID", ReplyAction = "http://tempuri.org/IService1/getThesaurusIDResponse")]
        string getThesaurusID(ref int SecureID, string ThesaurusName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/iCountContent", ReplyAction = "http://tempuri.org/IService1/iCountContentResponse")]
        int iCountContent(ref int SecureID, string S);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getDatasourceParm", ReplyAction = "http://tempuri.org/IService1/getDatasourceParmResponse")]
        string getDatasourceParm(ref int SecureID, string AttributeName, string SourceGuid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SaveRunParm", ReplyAction = "http://tempuri.org/IService1/SaveRunParmResponse")]
        bool SaveRunParm(ref int SecureID, string UserID, ref string ParmID, ref string ParmVal);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/iGetRowCount", ReplyAction = "http://tempuri.org/IService1/iGetRowCountResponse")]
        int iGetRowCount(ref int SecureID, string TBL, string WhereClause);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ZeroizeGlobalSearch", ReplyAction = "http://tempuri.org/IService1/ZeroizeGlobalSearchResponse")]
        bool ZeroizeGlobalSearch(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/updateIp", ReplyAction = "http://tempuri.org/IService1/updateIpResponse")]
        void updateIp(ref int SecureID, string HostName, string IP, int checkCode, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateSourceGridWithWeights", ReplyAction = "http://tempuri.org/IService1/PopulateSourceGridWithWeightsResponse")]
        DS_CONTENT[] PopulateSourceGridWithWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateSourceGridNoWeights", ReplyAction = "http://tempuri.org/IService1/PopulateSourceGridNoWeightsResponse")]
        DS_CONTENT[] PopulateSourceGridNoWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateEmailGridWithNoWeights", ReplyAction = "http://tempuri.org/IService1/PopulateEmailGridWithNoWeightsResponse")]
        DS_EMAIL[] PopulateEmailGridWithNoWeights(ref int SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateEmailGridWithWeights", ReplyAction = "http://tempuri.org/IService1/PopulateEmailGridWithWeightsResponse")]
        DS_EMAIL[] PopulateEmailGridWithWeights(ref int SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/LoadUserSearchHistory", ReplyAction = "http://tempuri.org/IService1/LoadUserSearchHistoryResponse")]
        void LoadUserSearchHistory(ref int SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getAttachmentWeights", ReplyAction = "http://tempuri.org/IService1/getAttachmentWeightsResponse")]
        void getAttachmentWeights(ref int SecureID, ref Dictionary<string, int> SL, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn1", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn1Response")]
        bool ExecuteSqlNewConn1(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn2", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn2Response")]
        bool ExecuteSqlNewConn2(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn3", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn3Response")]
        bool ExecuteSqlNewConn3(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn4", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn4Response")]
        bool ExecuteSqlNewConn4(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn5", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn5Response")]
        bool ExecuteSqlNewConn5(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlNewConnSecure", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConnSecureResponse")]
        bool ExecuteSqlNewConnSecure(ref int SecureID, ref string MySql, string UserID, string ContractID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetParmValue", ReplyAction = "http://tempuri.org/IService1/GetParmValueResponse")]
        void GetParmValue(ref int SecureID, string UID, ref string[] Parms);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DBisGlobalSearcher", ReplyAction = "http://tempuri.org/IService1/DBisGlobalSearcherResponse")]
        bool DBisGlobalSearcher(ref int SecureID, string Userid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DBisAdmin", ReplyAction = "http://tempuri.org/IService1/DBisAdminResponse")]
        bool DBisAdmin(ref int SecureID, string Userid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getUserParm", ReplyAction = "http://tempuri.org/IService1/getUserParmResponse")]
        void getUserParm(ref int SecureID, ref string sVariable, string UserParm);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/RemoveUnwantedCharacters", ReplyAction = "http://tempuri.org/IService1/RemoveUnwantedCharactersResponse")]
        void RemoveUnwantedCharacters(ref int SecureID, ref string tgtString);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetMachineIP", ReplyAction = "http://tempuri.org/IService1/GetMachineIPResponse")]
        string GetMachineIP(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getClientLicenses", ReplyAction = "http://tempuri.org/IService1/getClientLicensesResponse")]
        DS_License[] getClientLicenses(ref int SecureID, string CompanyID, ref string ErrorMessage, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetFilesInZipDetail", ReplyAction = "http://tempuri.org/IService1/GetFilesInZipDetailResponse")]
        string GetFilesInZipDetail(ref int SecureID, string ParentGuid, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/xGetXrtID", ReplyAction = "http://tempuri.org/IService1/xGetXrtIDResponse")]
        int xGetXrtID(string CustomerID, string ServerName, string DBName, string InstanceName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSecEndPoint", ReplyAction = "http://tempuri.org/IService1/getSecEndPointResponse")]
        string getSecEndPoint();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getContractID", ReplyAction = "http://tempuri.org/IService1/getContractIDResponse")]
        string getContractID(int SecureID, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddGroupLibraryAccess", ReplyAction = "http://tempuri.org/IService1/AddGroupLibraryAccessResponse")]
        void AddGroupLibraryAccess(int SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddGroupUser", ReplyAction = "http://tempuri.org/IService1/AddGroupUserResponse")]
        bool AddGroupUser(int SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DBExecuteEncryptedSql", ReplyAction = "http://tempuri.org/IService1/DBExecuteEncryptedSqlResponse")]
        bool DBExecuteEncryptedSql(ref int SecureID, ref string MySql, string EKEY);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/validateAttachSecureLogin", ReplyAction = "http://tempuri.org/IService1/validateAttachSecureLoginResponse")]
        bool validateAttachSecureLogin(ref int SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetXrtTest", ReplyAction = "http://tempuri.org/IService1/GetXrtTestResponse")]
        string GetXrtTest(DateTime dt);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ckContentFlags", ReplyAction = "http://tempuri.org/IService1/ckContentFlagsResponse")]
        void ckContentFlags(int SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getCustomerLogoTitle", ReplyAction = "http://tempuri.org/IService1/getCustomerLogoTitleResponse")]
        string getCustomerLogoTitle();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getExplodeEmailZip", ReplyAction = "http://tempuri.org/IService1/getExplodeEmailZipResponse")]
        string getExplodeEmailZip();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getFacilityName", ReplyAction = "http://tempuri.org/IService1/getFacilityNameResponse")]
        string getFacilityName();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getAffinitydelay", ReplyAction = "http://tempuri.org/IService1/getAffinitydelayResponse")]
        int getAffinitydelay();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getClcURL", ReplyAction = "http://tempuri.org/IService1/getClcURLResponse")]
        string getClcURL();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getArchiverURL", ReplyAction = "http://tempuri.org/IService1/getArchiverURLResponse")]
        string getArchiverURL();
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ExecuteSqlStack", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlStackResponse")]
        bool ExecuteSqlStack(ref int SecureID, ref Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getDefaultScreen", ReplyAction = "http://tempuri.org/IService1/getDefaultScreenResponse")]
        string getDefaultScreen(int SecureID, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/RecallUserSearch", ReplyAction = "http://tempuri.org/IService1/RecallUserSearchResponse")]
        bool RecallUserSearch(int SecureID, string SearchName, string UID, ref string strSearches);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SaveUserSearch", ReplyAction = "http://tempuri.org/IService1/SaveUserSearchResponse")]
        bool SaveUserSearch(int SecureID, string SearchName, string UID, string strSearches);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/scheduleFileDownLoad", ReplyAction = "http://tempuri.org/IService1/scheduleFileDownLoadResponse")]
        bool scheduleFileDownLoad(int SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetContentMetaData", ReplyAction = "http://tempuri.org/IService1/GetContentMetaDataResponse")]
        string GetContentMetaData(int SecureID, string SourceGuid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/removeRestoreFileByGuid", ReplyAction = "http://tempuri.org/IService1/removeRestoreFileByGuidResponse")]
        bool removeRestoreFileByGuid(int SecureID, string RowGuid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/removeRestoreFiles", ReplyAction = "http://tempuri.org/IService1/removeRestoreFilesResponse")]
        bool removeRestoreFiles(int SecureID, ref string UserID, ref string MachineID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getRestoreFileCount", ReplyAction = "http://tempuri.org/IService1/getRestoreFileCountResponse")]
        int getRestoreFileCount(int SecureID, ref string UserID, ref string MachineID, ref bool Preview);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/saveRestoreFile", ReplyAction = "http://tempuri.org/IService1/saveRestoreFileResponse")]
        bool saveRestoreFile(int SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GenEmailAttachmentsSQL", ReplyAction = "http://tempuri.org/IService1/GenEmailAttachmentsSQLResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        string GenEmailAttachmentsSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GenEmailGeneratedSQL", ReplyAction = "http://tempuri.org/IService1/GenEmailGeneratedSQLResponse")]
        string GenEmailGeneratedSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GenContentSearchSQL", ReplyAction = "http://tempuri.org/IService1/GenContentSearchSQLResponse")]
        string GenContentSearchSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ChangeUserContentPublic", ReplyAction = "http://tempuri.org/IService1/ChangeUserContentPublicResponse")]
        void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/Refactor", ReplyAction = "http://tempuri.org/IService1/RefactorResponse")]
        void Refactor(int SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSAASState", ReplyAction = "http://tempuri.org/IService1/getSAASStateResponse")]
        string getSAASState(int SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SetSAASState", ReplyAction = "http://tempuri.org/IService1/SetSAASStateResponse")]
        bool SetSAASState(int SecureID, string UserID, string DirName, string FullPath);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings01", ReplyAction = "http://tempuri.org/IService1/getListOfStrings01Response")]
        DS_ListOfStrings01[] getListOfStrings01(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings02", ReplyAction = "http://tempuri.org/IService1/getListOfStrings02Response")]
        DS_ListOfStrings02[] getListOfStrings02(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings03", ReplyAction = "http://tempuri.org/IService1/getListOfStrings03Response")]
        DS_ListOfStrings03[] getListOfStrings03(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings04", ReplyAction = "http://tempuri.org/IService1/getListOfStrings04Response")]
        DS_ListOfStrings04[] getListOfStrings04(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateLibraryUsersGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibraryUsersGridResponse")]
        string PopulateLibraryUsersGrid(ref int SecureID, string LibraryName, bool ckLibUsersOnly);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getUserAuth", ReplyAction = "http://tempuri.org/IService1/getUserAuthResponse")]
        string getUserAuth(ref int SecureID, string Userid);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DeleteUser", ReplyAction = "http://tempuri.org/IService1/DeleteUserResponse")]
        bool DeleteUser(ref int SecureID, string SelectedUserGuid, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SaveUSer", ReplyAction = "http://tempuri.org/IService1/SaveUSerResponse")]
        bool SaveUSer(int SecureID, ref string UserID, ref string UserName, ref string EmailAddress, ref string UserPassword, ref string Admin, ref string isActive, ref string UserLoginID, ref bool ClientOnly, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref string ActiveGuid, ref string RepoName, ref bool RC, ref string RetMsg);

















        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/saveSearchSchedule", ReplyAction = "http://tempuri.org/IService1/saveSearchScheduleResponse")]
        bool saveSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg);






















        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSearchSchedule", ReplyAction = "http://tempuri.org/IService1/getSearchScheduleResponse")]
        bool getSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg);






















        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/InsertCoOwner", ReplyAction = "http://tempuri.org/IService1/InsertCoOwnerResponse")]
        bool InsertCoOwner(int SecureID, string CurrentOwner, string CoOwner);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateCoOwnerGrid", ReplyAction = "http://tempuri.org/IService1/PopulateCoOwnerGridResponse")]
        string PopulateCoOwnerGrid(int SecureID, string UID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateUserGrid", ReplyAction = "http://tempuri.org/IService1/PopulateUserGridResponse")]
        DS_VUserGrid[] PopulateUserGrid(ref int SecureID, string UserID, bool DBisAdmin);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getGroupUsers", ReplyAction = "http://tempuri.org/IService1/getGroupUsersResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        void getGroupUsers(ref int SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateDgGroupUsers", ReplyAction = "http://tempuri.org/IService1/PopulateDgGroupUsersResponse")]
        string PopulateDgGroupUsers(ref int SecureID, string OwnerUserGuidID, string GroupName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DeleteGroupUsers", ReplyAction = "http://tempuri.org/IService1/DeleteGroupUsersResponse")]
        bool DeleteGroupUsers(int SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getGroupOwnerGuidByGroupName", ReplyAction = "http://tempuri.org/IService1/getGroupOwnerGuidByGroupNameResponse")]
        string getGroupOwnerGuidByGroupName(ref int SecureID, string GroupName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddLibraryGroupUser", ReplyAction = "http://tempuri.org/IService1/AddLibraryGroupUserResponse")]
        void AddLibraryGroupUser(ref int SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateGroupUserGrid", ReplyAction = "http://tempuri.org/IService1/PopulateGroupUserGridResponse")]
        string PopulateGroupUserGrid(ref int SecureID, string GroupName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateLibItemsGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibItemsGridResponse")]
        string PopulateLibItemsGrid(ref int SecureID, string LibraryName, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateDgAssigned", ReplyAction = "http://tempuri.org/IService1/PopulateDgAssignedResponse")]
        string PopulateDgAssigned(ref int SecureID, string LibraryName, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ResetLibraryUsersCount", ReplyAction = "http://tempuri.org/IService1/ResetLibraryUsersCountResponse")]
        void ResetLibraryUsersCount(ref int SecureID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/DeleteLibraryGroupUser", ReplyAction = "http://tempuri.org/IService1/DeleteLibraryGroupUserResponse")]
        void DeleteLibraryGroupUser(ref int SecureID, string GroupName, string LibraryName, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ChangeUserPassword", ReplyAction = "http://tempuri.org/IService1/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(ref int SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/SaveClickStats", ReplyAction = "http://tempuri.org/IService1/SaveClickStatsResponse")]
        void SaveClickStats(int SecureID, int IID, string UserID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/cleanUpLibraryItems", ReplyAction = "http://tempuri.org/IService1/cleanUpLibraryItemsResponse")]
        void cleanUpLibraryItems(ref int SecureID, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/RemoveLibraryDirectories", ReplyAction = "http://tempuri.org/IService1/RemoveLibraryDirectoriesResponse")]
        void RemoveLibraryDirectories(ref int SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/RemoveLibraryEmails", ReplyAction = "http://tempuri.org/IService1/RemoveLibraryEmailsResponse")]
        void RemoveLibraryEmails(ref int SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddSysMsg", ReplyAction = "http://tempuri.org/IService1/AddSysMsgResponse")]
        void AddSysMsg(ref int SecureID, string UserID, string tMsg, bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddLibraryDirectory", ReplyAction = "http://tempuri.org/IService1/AddLibraryDirectoryResponse")]
        void AddLibraryDirectory(ref int SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/AddLibraryEmail", ReplyAction = "http://tempuri.org/IService1/AddLibraryEmailResponse")]
        void AddLibraryEmail(ref int SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateLibraryGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibraryGridResponse")]
        string PopulateLibraryGrid(ref int SecureID, string UserID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings", ReplyAction = "http://tempuri.org/IService1/getListOfStringsResponse")]
        bool getListOfStrings(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings1", ReplyAction = "http://tempuri.org/IService1/getListOfStrings1Response")]
        bool getListOfStrings1(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings2", ReplyAction = "http://tempuri.org/IService1/getListOfStrings2Response")]
        bool getListOfStrings2(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings3", ReplyAction = "http://tempuri.org/IService1/getListOfStrings3Response")]
        bool getListOfStrings3(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getListOfStrings4", ReplyAction = "http://tempuri.org/IService1/getListOfStrings4Response")]
        bool getListOfStrings4(ref int SecureID, string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/iCount", ReplyAction = "http://tempuri.org/IService1/iCountResponse")]
        int iCount(ref int SecureID, string S);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/GetLogPath", ReplyAction = "http://tempuri.org/IService1/GetLogPathResponse")]
        void GetLogPath(ref string tPath);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ActiveSessionGetVal", ReplyAction = "http://tempuri.org/IService1/ActiveSessionGetValResponse")]
        string ActiveSessionGetVal(ref int SecureID, ref Guid SessionGuid, ref string ParmName);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/ActiveSession", ReplyAction = "http://tempuri.org/IService1/ActiveSessionResponse")]
        bool ActiveSession(ref int SecureID, Guid SessionGuid, string ParmName, string ParmValue);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setSecureLoginParms", ReplyAction = "http://tempuri.org/IService1/setSecureLoginParmsResponse")]
        void setSecureLoginParms(ref int SecureID, string sCompanyID, string sRepoID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateSecureLoginCB_V2", ReplyAction = "http://tempuri.org/IService1/PopulateSecureLoginCB_V2Response")]
        void PopulateSecureLoginCB_V2(ref int SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/PopulateSecureLoginCB", ReplyAction = "http://tempuri.org/IService1/PopulateSecureLoginCBResponse")]
        void PopulateSecureLoginCB(ref int SecureID, ref string CB, string CompanyID, ref bool RC, ref string RetMsg);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getLoginPW", ReplyAction = "http://tempuri.org/IService1/getLoginPWResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getLoginPW(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setLoginPW", ReplyAction = "http://tempuri.org/IService1/setLoginPWResponse")]
        void setLoginPW(ref int SecureID, string RepoID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSessionEncCs", ReplyAction = "http://tempuri.org/IService1/getSessionEncCsResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getSessionEncCs(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setSessionEncCs", ReplyAction = "http://tempuri.org/IService1/setSessionEncCsResponse")]
        void setSessionEncCs(ref int SecureID, string MySessionID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setSessionRepoID", ReplyAction = "http://tempuri.org/IService1/setSessionRepoIDResponse")]
        void setSessionRepoID(ref int SecureID, string RepoID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSessionRepoID", ReplyAction = "http://tempuri.org/IService1/getSessionRepoIDResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getSessionRepoID(ref int SecureID);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/setSessionCompanyID", ReplyAction = "http://tempuri.org/IService1/setSessionCompanyIDResponse")]
        void setSessionCompanyID(ref int SecureID, string CompanyID, ref bool RC);
        [System.ServiceModel.OperationContract(Action = "http://tempuri.org/IService1/getSessionCompanyID", ReplyAction = "http://tempuri.org/IService1/getSessionCompanyIDResponse")]
        [System.ServiceModel.ServiceKnownType(typeof(string[]))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, DateTime>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownType(typeof(Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownType(typeof(object[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_CONTENT))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_EMAIL))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_License))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownType(typeof(DS_VUserGrid))]
        object getSessionCompanyID(ref int SecureID);
    }

    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : IService1, System.ServiceModel.IClientChannel
    {
    }

    [DebuggerStepThrough()]
    [System.CodeDom.Compiler.GeneratedCode("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<IService1>, IService1
    {
        public Service1Client() : base()
        {
        }

        public Service1Client(string endpointConfigurationName) : base(endpointConfigurationName)
        {
        }

        public Service1Client(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
        {
        }

        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
        {
        }

        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
        {
        }

        public void setLoginGuid(ref int SecureID, string MyLoginGuid)
        {
            Channel.setLoginGuid(ref SecureID, MyLoginGuid);
        }

        public object getLoginGuid(ref int SecureID)
        {
            return Channel.getLoginGuid(ref SecureID);
        }

        public object getHttpSessionID(ref int SecureID)
        {
            return Channel.getHttpSessionID(ref SecureID);
        }

        public void setSessionID(ref int SecureID, string MySessionID)
        {
            Channel.setSessionID(ref SecureID, MySessionID);
        }

        public string ExpandInflectionTerms(ref int SecureID, string S)
        {
            return Channel.ExpandInflectionTerms(ref SecureID, S);
        }

        public string getServerDatabaseName(ref int SecureID)
        {
            return Channel.getServerDatabaseName(ref SecureID);
        }

        public void CleanLog(ref int SecureID)
        {
            Channel.CleanLog(ref SecureID);
        }

        public void PopulateComboBox(ref int SecureID, ref string CB, string TblColName, string S)
        {
            Channel.PopulateComboBox(ref SecureID, ref CB, TblColName, S);
        }

        public string GetEmailAttachments(ref int SecureID, string CurrEmailGuid)
        {
            return Channel.GetEmailAttachments(ref SecureID, CurrEmailGuid);
        }

        public bool DbWriteToFile(ref int SecureID, string UID, string SourceGuid, ref string FileName)
        {
            return Channel.DbWriteToFile(ref SecureID, UID, SourceGuid, ref FileName);
        }

        public void SetSessionVariable(ref int SecureID, string key, string KeyValue)
        {
            Channel.SetSessionVariable(ref SecureID, key, KeyValue);
        }

        public object GetSessionVariable(ref int SecureID, string key)
        {
            return Channel.GetSessionVariable(ref SecureID, key);
        }

        public bool UpdateSourceImageCompressed(ref int SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer)
        {
            return Channel.UpdateSourceImageCompressed(ref SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer);
        }

        public void writeEmailFromDbToFile(ref int SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
        {
            Channel.writeEmailFromDbToFile(ref SecureID, EmailGuid, ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }

        public void writeAttachmentFromDbWriteToFile(ref int SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
        {
            Channel.writeAttachmentFromDbWriteToFile(ref SecureID, RowID, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }

        public void writeImageSourceDataFromDbWriteToFile(ref int SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
        {
            Channel.writeImageSourceDataFromDbWriteToFile(ref SecureID, SourceGuid, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }

        public void AddLibraryItems(ref int SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg)
        {
            Channel.AddLibraryItems(ref SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, ref RC, ref rMsg);
        }

        public void PopulateGroupUserLibCombo(ref int SecureID, string UID, ref string[] cb)
        {
            Channel.PopulateGroupUserLibCombo(ref SecureID, UID, ref cb);
        }

        public string GetLibOwnerByName(ref int SecureID, string LibraryName)
        {
            return Channel.GetLibOwnerByName(ref SecureID, LibraryName);
        }

        public void ExecuteSearch(ref int SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref string ListOEmailRows, ref string ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt)
        {
            Channel.ExecuteSearch(ref SecureID, ref currSearchCnt, bGenSql, ref EmailGenSql, SearchParms, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt);
        }

        public DS_USERSEARCHSTATE[] getSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, ref Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
        {
            return Channel.getSearchState(ref SecureID, SearchID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }

        public void saveSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
        {
            Channel.saveSearchState(ref SecureID, SearchID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }

        public DS_USERSCREENSTATE[] getScreenState(ref int SecureID, string UID, string ScreenName, ref Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
        {
            return Channel.getScreenState(ref SecureID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }

        public DS_clsUSERGRIDSTATE[] getGridLayout(ref int SecureID, string UID, string ScreenName, string GridName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
        {
            return Channel.getGridLayout(ref SecureID, UID, ScreenName, GridName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }

        public void saveGridLayout(ref int SecureID, ref string UserID, ref string ScreenName, ref string GridName, ref string ColName, ref int ColOrder, ref int ColWidth, ref bool ColVisible, ref bool ColReadOnly, ref int ColSortOrder, ref bool ColSortAsc, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref int RowNbr, ref bool RC, ref string rMsg)


















        {
            Channel.saveGridLayout(ref SecureID, ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg);
        }

        public void saveScreenState(ref int SecureID, string UID, string ScreenName, Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
        {
            Channel.saveScreenState(ref SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }

        public void getUserParms(ref int SecureID, string UserID, ref Dictionary<string, string> UserParms)
        {
            Channel.getUserParms(ref SecureID, UserID, ref UserParms);
        }

        public void ParseLicDictionary(ref int SecureID, string S, ref Dictionary<string, string> D)
        {
            Channel.ParseLicDictionary(ref SecureID, S, ref D);
        }

        public string LicenseType(int SecureID, ref bool RC, ref string RetMsg)
        {
            return Channel.LicenseType(SecureID, ref RC, ref RetMsg);
        }

        public int GetNbrUsers(ref int SecureID)
        {
            return Channel.GetNbrUsers(ref SecureID);
        }

        public bool isLease(int SecureID, ref bool RC, ref string RetMsg)
        {
            return Channel.isLease(SecureID, ref RC, ref RetMsg);
        }

        public int getMaxClients(int SecureID, ref bool RC, ref string RetMsg)
        {
            return Channel.getMaxClients(SecureID, ref RC, ref RetMsg);
        }

        public string GetUserHostName(ref int SecureID)
        {
            return Channel.GetUserHostName(ref SecureID);
        }

        public string GetUserHostAddress(ref int SecureID)
        {
            return Channel.GetUserHostAddress(ref SecureID);
        }

        public string getUserGuidID(ref int SecureID, string UserLoginId)
        {
            return Channel.getUserGuidID(ref SecureID, UserLoginId);
        }

        public Dictionary<string, DateTime> ProcessDates(ref int SecureID)
        {
            return Channel.ProcessDates(ref SecureID);
        }

        public int GetNbrMachineAll(ref int SecureID)
        {
            return Channel.GetNbrMachineAll(ref SecureID);
        }

        public int GetNbrMachine(ref int SecureID, string MachineName)
        {
            return Channel.GetNbrMachine(ref SecureID, MachineName);
        }

        public bool isLicenseLocatedOnAssignedMachine(ref int SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg)
        {
            return Channel.isLicenseLocatedOnAssignedMachine(ref SecureID, ref ServerValText, ref InstanceValText, ref RC, ref RetMsg);
        }

        public string GetXrt(ref int SecureID, bool RC, string RetMsg)
        {
            return Channel.GetXrt(ref SecureID, RC, RetMsg);
        }

        public string getSqlServerVersion(ref int SecureID)
        {
            return Channel.getSqlServerVersion(ref SecureID);
        }

        public void RecordGrowth(ref int SecureID, ref bool RC)
        {
            Channel.RecordGrowth(ref SecureID, ref RC);
        }

        public string ParseLic(ref int SecureID, string LT, string tgtKey)
        {
            return Channel.ParseLic(ref SecureID, LT, tgtKey);
        }

        public string GetLoggedinUserName(ref int SecureID)
        {
            return Channel.GetLoggedinUserName(ref SecureID);
        }

        public double getDBSIZEMB(ref int SecureID)
        {
            return Channel.getDBSIZEMB(ref SecureID);
        }

        public void resetMissingEmailIds(ref int SecureID, string CurrUserGuidID, ref bool RC)
        {
            Channel.resetMissingEmailIds(ref SecureID, CurrUserGuidID, ref RC);
        }

        public void UserParmInsertUpdate(ref int SecureID, string ParmName, string UserID, string ParmVal, ref bool RC)
        {
            Channel.UserParmInsertUpdate(ref SecureID, ParmName, UserID, ParmVal, ref RC);
        }

        public bool validateLogin(ref int SecureID, string UserLogin, string PW, ref string UserGuidID)
        {
            return Channel.validateLogin(ref SecureID, UserLogin, PW, ref UserGuidID);
        }

        public string getLoggedInUser(ref int SecureID)
        {
            return Channel.getLoggedInUser(ref SecureID);
        }

        public string getAttachedMachineName(ref int SecureID)
        {
            return Channel.getAttachedMachineName(ref SecureID);
        }

        public string getServerInstanceName(ref int SecureID)
        {
            return Channel.getServerInstanceName(ref SecureID);
        }

        public string getServerMachineName(ref int SecureID)
        {
            return Channel.getServerMachineName(ref SecureID);
        }

        public void getSystemParm(ref int SecureID, ref Dictionary<string, string> SystemParms)
        {
            Channel.getSystemParm(ref SecureID, ref SystemParms);
        }

        public string getSynonyms(ref int SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms)
        {
            return Channel.getSynonyms(ref SecureID, ThesaurusID, Token, ref lbSynonyms);
        }

        public string getThesaurusID(ref int SecureID, string ThesaurusName)
        {
            return Channel.getThesaurusID(ref SecureID, ThesaurusName);
        }

        public int iCountContent(ref int SecureID, string S)
        {
            return Channel.iCountContent(ref SecureID, S);
        }

        public string getDatasourceParm(ref int SecureID, string AttributeName, string SourceGuid)
        {
            return Channel.getDatasourceParm(ref SecureID, AttributeName, SourceGuid);
        }

        public bool SaveRunParm(ref int SecureID, string UserID, ref string ParmID, ref string ParmVal)
        {
            return Channel.SaveRunParm(ref SecureID, UserID, ref ParmID, ref ParmVal);
        }

        public int iGetRowCount(ref int SecureID, string TBL, string WhereClause)
        {
            return Channel.iGetRowCount(ref SecureID, TBL, WhereClause);
        }

        public bool ZeroizeGlobalSearch(ref int SecureID)
        {
            return Channel.ZeroizeGlobalSearch(ref SecureID);
        }

        public void updateIp(ref int SecureID, string HostName, string IP, int checkCode, ref bool RC)
        {
            Channel.updateIp(ref SecureID, HostName, IP, checkCode, ref RC);
        }

        public DS_CONTENT[] PopulateSourceGridWithWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt)
        {
            return Channel.PopulateSourceGridWithWeights(ref SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt);
        }

        public DS_CONTENT[] PopulateSourceGridNoWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt)
        {
            return Channel.PopulateSourceGridNoWeights(ref SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt);
        }

        public DS_EMAIL[] PopulateEmailGridWithNoWeights(ref int SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt)
        {
            return Channel.PopulateEmailGridWithNoWeights(ref SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt);
        }

        public DS_EMAIL[] PopulateEmailGridWithWeights(ref int SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt)
        {
            return Channel.PopulateEmailGridWithWeights(ref SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt);
        }

        public void LoadUserSearchHistory(ref int SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned)
        {
            Channel.LoadUserSearchHistory(ref SecureID, MaxNbrSearches, Uid, Screen, ref SearchHistoryArrayList, ref NbrReturned);
        }

        public void getAttachmentWeights(ref int SecureID, ref Dictionary<string, int> SL, string UserID)
        {
            Channel.getAttachmentWeights(ref SecureID, ref SL, UserID);
        }

        public bool ExecuteSqlNewConn1(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConn1(ref SecureID, ref EncryptedMySql, UserID, ContractID);
        }

        public bool ExecuteSqlNewConn2(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConn2(ref SecureID, ref EncryptedMySql, UserID, ContractID);
        }

        public bool ExecuteSqlNewConn3(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConn3(ref SecureID, ref EncryptedMySql, UserID, ContractID);
        }

        public bool ExecuteSqlNewConn4(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConn4(ref SecureID, ref EncryptedMySql, UserID, ContractID);
        }

        public bool ExecuteSqlNewConn5(ref int SecureID, ref string EncryptedMySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConn5(ref SecureID, ref EncryptedMySql, UserID, ContractID);
        }

        public bool ExecuteSqlNewConnSecure(ref int SecureID, ref string MySql, string UserID, string ContractID)
        {
            return Channel.ExecuteSqlNewConnSecure(ref SecureID, ref MySql, UserID, ContractID);
        }

        public void GetParmValue(ref int SecureID, string UID, ref string[] Parms)
        {
            Channel.GetParmValue(ref SecureID, UID, ref Parms);
        }

        public bool DBisGlobalSearcher(ref int SecureID, string Userid)
        {
            return Channel.DBisGlobalSearcher(ref SecureID, Userid);
        }

        public bool DBisAdmin(ref int SecureID, string Userid)
        {
            return Channel.DBisAdmin(ref SecureID, Userid);
        }

        public void getUserParm(ref int SecureID, ref string sVariable, string UserParm)
        {
            Channel.getUserParm(ref SecureID, ref sVariable, UserParm);
        }

        public void RemoveUnwantedCharacters(ref int SecureID, ref string tgtString)
        {
            Channel.RemoveUnwantedCharacters(ref SecureID, ref tgtString);
        }

        public string GetMachineIP(ref int SecureID)
        {
            return Channel.GetMachineIP(ref SecureID);
        }

        public DS_License[] getClientLicenses(ref int SecureID, string CompanyID, ref string ErrorMessage, ref bool RC)
        {
            return Channel.getClientLicenses(ref SecureID, CompanyID, ref ErrorMessage, ref RC);
        }

        public string GetFilesInZipDetail(ref int SecureID, string ParentGuid, ref bool RC)
        {
            return Channel.GetFilesInZipDetail(ref SecureID, ParentGuid, ref RC);
        }

        public int xGetXrtID(string CustomerID, string ServerName, string DBName, string InstanceName)
        {
            return Channel.xGetXrtID(CustomerID, ServerName, DBName, InstanceName);
        }

        public string getSecEndPoint()
        {
            return Channel.getSecEndPoint();
        }

        public string getContractID(int SecureID, string UserID)
        {
            return Channel.getContractID(SecureID, UserID);
        }

        public void AddGroupLibraryAccess(int SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection)
        {
            Channel.AddGroupLibraryAccess(SecureID, UserID, LibraryName, GroupName, GroupOwnerUserID, ref RC, CurrUserID, SessionID, ControlSection);
        }

        public bool AddGroupUser(int SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection)
        {
            return Channel.AddGroupUser(SecureID, SessionID, CurrUserID, UserID, FullAccess, ReadOnlyAccess, DeleteAccess, Searchable, GroupOwnerUserID, GroupName, ControlSection);
        }

        public bool DBExecuteEncryptedSql(ref int SecureID, ref string MySql, string EKEY)
        {
            return Channel.DBExecuteEncryptedSql(ref SecureID, ref MySql, EKEY);
        }

        public bool validateAttachSecureLogin(ref int SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS)
        {
            return Channel.validateAttachSecureLogin(ref SecureID, CompanyID, RepoID, UserLogin, PW, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS);
        }

        public string GetXrtTest(DateTime dt)
        {
            return Channel.GetXrtTest(dt);
        }

        public void ckContentFlags(int SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic)
        {
            Channel.ckContentFlags(SecureID, SourceGuid, ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic);
        }

        public string getCustomerLogoTitle()
        {
            return Channel.getCustomerLogoTitle();
        }

        public string getExplodeEmailZip()
        {
            return Channel.getExplodeEmailZip();
        }

        public string getFacilityName()
        {
            return Channel.getFacilityName();
        }

        public int getAffinitydelay()
        {
            return Channel.getAffinitydelay();
        }

        public string getClcURL()
        {
            return Channel.getClcURL();
        }

        public string getArchiverURL()
        {
            return Channel.getArchiverURL();
        }

        public bool ExecuteSqlStack(ref int SecureID, ref Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection)
        {
            return Channel.ExecuteSqlStack(ref SecureID, ref SqlStack, UserID, SessionID, ControlSection);
        }

        public string getDefaultScreen(int SecureID, string UserID)
        {
            return Channel.getDefaultScreen(SecureID, UserID);
        }

        public bool RecallUserSearch(int SecureID, string SearchName, string UID, ref string strSearches)
        {
            return Channel.RecallUserSearch(SecureID, SearchName, UID, ref strSearches);
        }

        public bool SaveUserSearch(int SecureID, string SearchName, string UID, string strSearches)
        {
            return Channel.SaveUserSearch(SecureID, SearchName, UID, strSearches);
        }

        public bool scheduleFileDownLoad(int SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore)
        {
            return Channel.scheduleFileDownLoad(SecureID, ContentGuid, UserID, ContentType, Preview, Restore);
        }

        public string GetContentMetaData(int SecureID, string SourceGuid)
        {
            return Channel.GetContentMetaData(SecureID, SourceGuid);
        }

        public bool removeRestoreFileByGuid(int SecureID, string RowGuid)
        {
            return Channel.removeRestoreFileByGuid(SecureID, RowGuid);
        }

        public bool removeRestoreFiles(int SecureID, ref string UserID, ref string MachineID)
        {
            return Channel.removeRestoreFiles(SecureID, ref UserID, ref MachineID);
        }

        public int getRestoreFileCount(int SecureID, ref string UserID, ref string MachineID, ref bool Preview)
        {
            return Channel.getRestoreFileCount(SecureID, ref UserID, ref MachineID, ref Preview);
        }

        public bool saveRestoreFile(int SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg)
        {
            return Channel.saveRestoreFile(SecureID, tgtTable, ref ContentGuid, Preview, Restore, ref UserID, ref MachineID, ref RC, RetMsg);
        }

        public string GenEmailAttachmentsSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy)
        {
            return Channel.GenEmailAttachmentsSQL(UserID, SearchParms, ref SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy);
        }

        public string GenEmailGeneratedSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID)
        {
            return Channel.GenEmailGeneratedSQL(UserID, SearchParms, ref SecureID);
        }

        public string GenContentSearchSQL(string UserID, DS_SearchTerms[] SearchParms, ref int SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted)
        {
            return Channel.GenContentSearchSQL(UserID, SearchParms, ref SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted);
        }

        public void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg)
        {
            Channel.ChangeUserContentPublic(ServiceID, CurrSelectedUserGuid, isPublic, ref RC, ref RetMsg);
        }

        public void Refactor(int SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg)
        {
            Channel.Refactor(SecureID, NewOwnerID, OldOwnerID, ref RC, ref RetMsg);
        }

        public string getSAASState(int SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC)
        {
            return Channel.getSAASState(SecureID, UserID, DirName, FullPath, ref RetMsg, ref RC);
        }

        public bool SetSAASState(int SecureID, string UserID, string DirName, string FullPath)
        {
            return Channel.SetSAASState(SecureID, UserID, DirName, FullPath);
        }

        public DS_ListOfStrings01[] getListOfStrings01(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings01(ref SecureID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public DS_ListOfStrings02[] getListOfStrings02(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings02(ref SecureID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public DS_ListOfStrings03[] getListOfStrings03(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings03(ref SecureID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public DS_ListOfStrings04[] getListOfStrings04(ref int SecureID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings04(ref SecureID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public string PopulateLibraryUsersGrid(ref int SecureID, string LibraryName, bool ckLibUsersOnly)
        {
            return Channel.PopulateLibraryUsersGrid(ref SecureID, LibraryName, ckLibUsersOnly);
        }

        public string getUserAuth(ref int SecureID, string Userid)
        {
            return Channel.getUserAuth(ref SecureID, Userid);
        }

        public bool DeleteUser(ref int SecureID, string SelectedUserGuid, ref string RetMsg)
        {
            return Channel.DeleteUser(ref SecureID, SelectedUserGuid, ref RetMsg);
        }

        public bool SaveUSer(int SecureID, ref string UserID, ref string UserName, ref string EmailAddress, ref string UserPassword, ref string Admin, ref string isActive, ref string UserLoginID, ref bool ClientOnly, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref string ActiveGuid, ref string RepoName, ref bool RC, ref string RetMsg)

















        {
            return Channel.SaveUSer(SecureID, ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg);
        }

        public bool saveSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg)






















        {
            return Channel.saveSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg);
        }

        public bool getSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg)






















        {
            return Channel.getSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg);
        }

        public bool InsertCoOwner(int SecureID, string CurrentOwner, string CoOwner)
        {
            return Channel.InsertCoOwner(SecureID, CurrentOwner, CoOwner);
        }

        public string PopulateCoOwnerGrid(int SecureID, string UID)
        {
            return Channel.PopulateCoOwnerGrid(SecureID, UID);
        }

        public DS_VUserGrid[] PopulateUserGrid(ref int SecureID, string UserID, bool DBisAdmin)
        {
            return Channel.PopulateUserGrid(ref SecureID, UserID, DBisAdmin);
        }

        public void getGroupUsers(ref int SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg)
        {
            Channel.getGroupUsers(ref SecureID, GroupName, ref GroupList, ref RC, ref RetMsg);
        }

        public string PopulateDgGroupUsers(ref int SecureID, string OwnerUserGuidID, string GroupName)
        {
            return Channel.PopulateDgGroupUsers(ref SecureID, OwnerUserGuidID, GroupName);
        }

        public bool DeleteGroupUsers(int SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg)
        {
            return Channel.DeleteGroupUsers(SecureID, CurrSelectedGroupName, GroupOwnerGuid, UserID, ref iDeleted, ref RetMsg);
        }

        public string getGroupOwnerGuidByGroupName(ref int SecureID, string GroupName)
        {
            return Channel.getGroupOwnerGuidByGroupName(ref SecureID, GroupName);
        }

        public void AddLibraryGroupUser(ref int SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection)
        {
            Channel.AddLibraryGroupUser(ref SecureID, GroupName, ref RC, CurrUserID, SessionID, ControlSection);
        }

        public string PopulateGroupUserGrid(ref int SecureID, string GroupName)
        {
            return Channel.PopulateGroupUserGrid(ref SecureID, GroupName);
        }

        public string PopulateLibItemsGrid(ref int SecureID, string LibraryName, string UserID)
        {
            return Channel.PopulateLibItemsGrid(ref SecureID, LibraryName, UserID);
        }

        public string PopulateDgAssigned(ref int SecureID, string LibraryName, string UserID)
        {
            return Channel.PopulateDgAssigned(ref SecureID, LibraryName, UserID);
        }

        public void ResetLibraryUsersCount(ref int SecureID, ref bool RC)
        {
            Channel.ResetLibraryUsersCount(ref SecureID, ref RC);
        }

        public void DeleteLibraryGroupUser(ref int SecureID, string GroupName, string LibraryName, ref bool RC)
        {
            Channel.DeleteLibraryGroupUser(ref SecureID, GroupName, LibraryName, ref RC);
        }

        public bool ChangeUserPassword(ref int SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2)
        {
            return Channel.ChangeUserPassword(ref SecureID, UserLogin, OldPW, NewPw1, NewPw2);
        }

        public void SaveClickStats(int SecureID, int IID, string UserID, ref bool RC)
        {
            Channel.SaveClickStats(SecureID, IID, UserID, ref RC);
        }

        public void cleanUpLibraryItems(ref int SecureID, string UserID)
        {
            Channel.cleanUpLibraryItems(ref SecureID, UserID);
        }

        public void RemoveLibraryDirectories(ref int SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg)
        {
            Channel.RemoveLibraryDirectories(ref SecureID, UserID, DirectoryName, LibraryName, ref RC, ref RetMsg);
        }

        public void RemoveLibraryEmails(ref int SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg)
        {
            Channel.RemoveLibraryEmails(ref SecureID, FolderName, LibraryName, UserID, ref RC, ref RetMsg);
        }

        public void AddSysMsg(ref int SecureID, string UserID, string tMsg, bool RC)
        {
            Channel.AddSysMsg(ref SecureID, UserID, tMsg, RC);
        }

        public void AddLibraryDirectory(ref int SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg)
        {
            Channel.AddLibraryDirectory(ref SecureID, FolderName, LibraryName, UserID, ref RecordsAdded, ref RC, ref RetMsg);
        }

        public void AddLibraryEmail(ref int SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg)
        {
            Channel.AddLibraryEmail(ref SecureID, EmailFolder, LibraryName, UserID, ref RecordsAdded, RC, RetMsg);
        }

        public string PopulateLibraryGrid(ref int SecureID, string UserID)
        {
            return Channel.PopulateLibraryGrid(ref SecureID, UserID);
        }

        public bool getListOfStrings(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings(ref SecureID, ref strListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public bool getListOfStrings1(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings1(ref SecureID, ref strListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public bool getListOfStrings2(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings2(ref SecureID, ref strListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public bool getListOfStrings3(ref int SecureID, ref string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings3(ref SecureID, ref strListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public bool getListOfStrings4(ref int SecureID, string strListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID)
        {
            return Channel.getListOfStrings4(ref SecureID, strListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }

        public int iCount(ref int SecureID, string S)
        {
            return Channel.iCount(ref SecureID, S);
        }

        public void GetLogPath(ref string tPath)
        {
            Channel.GetLogPath(ref tPath);
        }

        public string ActiveSessionGetVal(ref int SecureID, ref Guid SessionGuid, ref string ParmName)
        {
            return Channel.ActiveSessionGetVal(ref SecureID, ref SessionGuid, ref ParmName);
        }

        public bool ActiveSession(ref int SecureID, Guid SessionGuid, string ParmName, string ParmValue)
        {
            return Channel.ActiveSession(ref SecureID, SessionGuid, ParmName, ParmValue);
        }

        public void setSecureLoginParms(ref int SecureID, string sCompanyID, string sRepoID, ref bool RC)
        {
            Channel.setSecureLoginParms(ref SecureID, sCompanyID, sRepoID, ref RC);
        }

        public void PopulateSecureLoginCB_V2(ref int SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg)
        {
            Channel.PopulateSecureLoginCB_V2(ref SecureID, ref AllRepos, CompanyID, ref RC, ref RetMsg);
        }

        public void PopulateSecureLoginCB(ref int SecureID, ref string CB, string CompanyID, ref bool RC, ref string RetMsg)
        {
            Channel.PopulateSecureLoginCB(ref SecureID, ref CB, CompanyID, ref RC, ref RetMsg);
        }

        public object getLoginPW(ref int SecureID)
        {
            return Channel.getLoginPW(ref SecureID);
        }

        public void setLoginPW(ref int SecureID, string RepoID)
        {
            Channel.setLoginPW(ref SecureID, RepoID);
        }

        public object getSessionEncCs(ref int SecureID)
        {
            return Channel.getSessionEncCs(ref SecureID);
        }

        public void setSessionEncCs(ref int SecureID, string MySessionID)
        {
            Channel.setSessionEncCs(ref SecureID, MySessionID);
        }

        public void setSessionRepoID(ref int SecureID, string RepoID)
        {
            Channel.setSessionRepoID(ref SecureID, RepoID);
        }

        public object getSessionRepoID(ref int SecureID)
        {
            return Channel.getSessionRepoID(ref SecureID);
        }

        public void setSessionCompanyID(ref int SecureID, string CompanyID, ref bool RC)
        {
            Channel.setSessionCompanyID(ref SecureID, CompanyID, ref RC);
        }

        public object getSessionCompanyID(ref int SecureID)
        {
            return Channel.getSessionCompanyID(ref SecureID);
        }
    }
}