// ------------------------------------------------------------------------------
// <auto-generated>
// This code was generated by a tool.
// Runtime Version:4.0.30319.42000
// 
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------

using System;
using System.Data;
using System.Diagnostics;
using Microsoft.VisualBasic.CompilerServices;
using MODI;

namespace EcmArchiver
{



    /// <summary>
/// Represents a strongly typed in-memory cache of data.
/// </summary>
    [Serializable()]
    [System.ComponentModel.DesignerCategory("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProvider("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRoot("_ECM_HiveDataSet")]
    [System.ComponentModel.Design.HelpKeyword("vs.data.DataSet")]
    public partial class _ECM_HiveDataSet : DataSet
    {
        private SchemaSerializationMode _schemaSerializationMode = SchemaSerializationMode.IncludeSchema;

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public _ECM_HiveDataSet() : base()
        {
            BeginInit();
            InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected _ECM_HiveDataSet(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : base(info, context, false)
        {
            if (IsBinarySerialized(info, context) == true)
            {
                InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = SchemaChanged;
                Tables.CollectionChanged += schemaChangedHandler1;
                Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }

            string strSchema = Conversions.ToString(info.GetValue("XmlSchema", typeof(string)));
            if (DetermineSchemaSerializationMode(info, context) == SchemaSerializationMode.IncludeSchema)
            {
                var ds = new DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
            }

            GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = SchemaChanged;
            base.Tables.CollectionChanged += schemaChangedHandler;
            Relations.CollectionChanged += schemaChangedHandler;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.Browsable(true)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override SchemaSerializationMode SchemaSerializationMode
        {
            get
            {
                return _schemaSerializationMode;
            }

            set
            {
                _schemaSerializationMode = value;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataTableCollection Tables
        {
            get
            {
                return base.Tables;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new DataRelationCollection Relations
        {
            get
            {
                return base.Relations;
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void InitializeDerivedDataSet()
        {
            BeginInit();
            InitClass();
            EndInit();
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public override DataSet Clone()
        {
            _ECM_HiveDataSet cln = (_ECM_HiveDataSet)base.Clone();
            cln.InitVars();
            cln.SchemaSerializationMode = SchemaSerializationMode;
            return cln;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeTables()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override bool ShouldSerializeRelations()
        {
            return false;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader)
        {
            if (DetermineSchemaSerializationMode(reader) == SchemaSerializationMode.IncludeSchema)
            {
                Reset();
                var ds = new DataSet();
                ds.ReadXml(reader);
                DataSetName = ds.DataSetName;
                Prefix = ds.Prefix;
                Namespace = ds.Namespace;
                Locale = ds.Locale;
                CaseSensitive = ds.CaseSensitive;
                EnforceConstraints = ds.EnforceConstraints;
                Merge(ds, false, MissingSchemaAction.Add);
                InitVars();
            }
            else
            {
                ReadXml(reader);
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable()
        {
            var stream = new System.IO.MemoryStream();
            WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0L;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars()
        {
            InitVars(true);
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        internal void InitVars(bool initTable)
        {
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void InitClass()
        {
            DataSetName = "_ECM_HiveDataSet";
            Prefix = "";
            Namespace = "http://tempuri.org/_ECM_HiveDataSet.xsd";
            EnforceConstraints = true;
            SchemaSerializationMode = SchemaSerializationMode.IncludeSchema;
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e)
        {
            if (e.Action == System.ComponentModel.CollectionChangeAction.Remove)
            {
                InitVars();
            }
        }

        [DebuggerNonUserCode()]
        [System.CodeDom.Compiler.GeneratedCode("System.Data.Design.TypedDataSetGenerator", "15.0.0.0")]
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs)
        {
            var ds = new _ECM_HiveDataSet();
            var type = new System.Xml.Schema.XmlSchemaComplexType();
            var sequence = new System.Xml.Schema.XmlSchemaSequence();
            var any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            var dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace))
            {
                var s1 = new System.IO.MemoryStream();
                var s2 = new System.IO.MemoryStream();
                try
                {
                    System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    var schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator();
                    while (schemas.MoveNext())
                    {
                        schema = (System.Xml.Schema.XmlSchema)schemas.Current;
                        s2.SetLength(0L);
                        schema.Write(s2);
                        if (s1.Length == s2.Length)
                        {
                            s1.Position = 0L;
                            s2.Position = 0L;
                            while (s1.Position != s1.Length && s1.ReadByte() == s2.ReadByte())
                            {
                            }

                            if (s1.Position == s1.Length)
                            {
                                return type;
                            }
                        }
                    }
                }
                finally
                {
                    if (s1 is object)
                    {
                        s1.Close();
                    }

                    if (s2 is object)
                    {
                        s2.Close();
                    }
                }
            }

            xs.Add(dsSchema);
            return type;
        }
    }
}