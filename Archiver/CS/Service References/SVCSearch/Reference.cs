// VBConversions Note: VB project level imports
using System.Collections.Generic;
using System;
using System.Drawing;
using System.Linq;
using System.Diagnostics;
using System.Data;
using Microsoft.VisualBasic;
using MODI;
using System.Xml.Linq;
using System.Collections;
using System.Windows.Forms;
// End of VB project level imports

using System.Runtime.Serialization;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace EcmArchiveClcSetup
{
	namespace SVCSearch
	{
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_EMAIL", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_EMAIL : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AllRecipientsField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string BccField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string BodyField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CCField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime CreationTimeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string EmailGuidField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool FoundInAttachField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int MsgSizeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int NbrAttachmentsField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string OriginalFolderField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RANKField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ROWIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ReceivedByNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime ReceivedTimeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RetentionExpirationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SUBJECTField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SenderEmailAddressField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SenderNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime SentOnField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SentTOField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ShortSubjField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceTypeCodeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string isPublicField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string AllRecipients
			{
				get
				{
					return this.AllRecipientsField;
				}
				set
				{
					if (object.ReferenceEquals(this.AllRecipientsField, value) != true)
					{
						this.AllRecipientsField = value;
						this.RaisePropertyChanged("AllRecipients");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string Bcc
			{
				get
				{
					return this.BccField;
				}
				set
				{
					if (object.ReferenceEquals(this.BccField, value) != true)
					{
						this.BccField = value;
						this.RaisePropertyChanged("Bcc");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string Body
			{
				get
				{
					return this.BodyField;
				}
				set
				{
					if (object.ReferenceEquals(this.BodyField, value) != true)
					{
						this.BodyField = value;
						this.RaisePropertyChanged("Body");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CC
			{
				get
				{
					return this.CCField;
				}
				set
				{
					if (object.ReferenceEquals(this.CCField, value) != true)
					{
						this.CCField = value;
						this.RaisePropertyChanged("CC");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime CreationTime
			{
				get
				{
					return this.CreationTimeField;
				}
				set
				{
					if (this.CreationTimeField.Equals(value) != true)
					{
						this.CreationTimeField = value;
						this.RaisePropertyChanged("CreationTime");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string EmailGuid
			{
				get
				{
					return this.EmailGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.EmailGuidField, value) != true)
					{
						this.EmailGuidField = value;
						this.RaisePropertyChanged("EmailGuid");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool FoundInAttach
			{
				get
				{
					return this.FoundInAttachField;
				}
				set
				{
					if (this.FoundInAttachField.Equals(value) != true)
					{
						this.FoundInAttachField = value;
						this.RaisePropertyChanged("FoundInAttach");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int MsgSize
			{
				get
				{
					return this.MsgSizeField;
				}
				set
				{
					if (this.MsgSizeField.Equals(value) != true)
					{
						this.MsgSizeField = value;
						this.RaisePropertyChanged("MsgSize");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int NbrAttachments
			{
				get
				{
					return this.NbrAttachmentsField;
				}
				set
				{
					if (this.NbrAttachmentsField.Equals(value) != true)
					{
						this.NbrAttachmentsField = value;
						this.RaisePropertyChanged("NbrAttachments");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string OriginalFolder
			{
				get
				{
					return this.OriginalFolderField;
				}
				set
				{
					if (object.ReferenceEquals(this.OriginalFolderField, value) != true)
					{
						this.OriginalFolderField = value;
						this.RaisePropertyChanged("OriginalFolder");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RANK
			{
				get
				{
					return this.RANKField;
				}
				set
				{
					if (this.RANKField.Equals(value) != true)
					{
						this.RANKField = value;
						this.RaisePropertyChanged("RANK");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RID
			{
				get
				{
					return this.RIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.RIDField, value) != true)
					{
						this.RIDField = value;
						this.RaisePropertyChanged("RID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ROWID
			{
				get
				{
					return this.ROWIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.ROWIDField, value) != true)
					{
						this.ROWIDField = value;
						this.RaisePropertyChanged("ROWID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ReceivedByName
			{
				get
				{
					return this.ReceivedByNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ReceivedByNameField, value) != true)
					{
						this.ReceivedByNameField = value;
						this.RaisePropertyChanged("ReceivedByName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime ReceivedTime
			{
				get
				{
					return this.ReceivedTimeField;
				}
				set
				{
					if (this.ReceivedTimeField.Equals(value) != true)
					{
						this.ReceivedTimeField = value;
						this.RaisePropertyChanged("ReceivedTime");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RetentionExpirationDate
			{
				get
				{
					return this.RetentionExpirationDateField;
				}
				set
				{
					if (this.RetentionExpirationDateField.Equals(value) != true)
					{
						this.RetentionExpirationDateField = value;
						this.RaisePropertyChanged("RetentionExpirationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SUBJECT
			{
				get
				{
					return this.SUBJECTField;
				}
				set
				{
					if (object.ReferenceEquals(this.SUBJECTField, value) != true)
					{
						this.SUBJECTField = value;
						this.RaisePropertyChanged("SUBJECT");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SenderEmailAddress
			{
				get
				{
					return this.SenderEmailAddressField;
				}
				set
				{
					if (object.ReferenceEquals(this.SenderEmailAddressField, value) != true)
					{
						this.SenderEmailAddressField = value;
						this.RaisePropertyChanged("SenderEmailAddress");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SenderName
			{
				get
				{
					return this.SenderNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.SenderNameField, value) != true)
					{
						this.SenderNameField = value;
						this.RaisePropertyChanged("SenderName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime SentOn
			{
				get
				{
					return this.SentOnField;
				}
				set
				{
					if (this.SentOnField.Equals(value) != true)
					{
						this.SentOnField = value;
						this.RaisePropertyChanged("SentOn");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SentTO
			{
				get
				{
					return this.SentTOField;
				}
				set
				{
					if (object.ReferenceEquals(this.SentTOField, value) != true)
					{
						this.SentTOField = value;
						this.RaisePropertyChanged("SentTO");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ShortSubj
			{
				get
				{
					return this.ShortSubjField;
				}
				set
				{
					if (object.ReferenceEquals(this.ShortSubjField, value) != true)
					{
						this.ShortSubjField = value;
						this.RaisePropertyChanged("ShortSubj");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceTypeCode
			{
				get
				{
					return this.SourceTypeCodeField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceTypeCodeField, value) != true)
					{
						this.SourceTypeCodeField = value;
						this.RaisePropertyChanged("SourceTypeCode");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string isPublic
			{
				get
				{
					return this.isPublicField;
				}
				set
				{
					if (object.ReferenceEquals(this.isPublicField, value) != true)
					{
						this.isPublicField = value;
						this.RaisePropertyChanged("isPublic");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_License", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_License : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AppliedField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CompanyIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string EncryptedLicenseField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LicenseIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int LicenseNbrField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LicenseTextField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LicenseTypeCodeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string MachineIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string PurchasedMachinesField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string PurchasedUsersField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ServerNAMEField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SqlInstanceNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SupportActiveField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SupportActiveDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SupportInactiveDateField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string Applied
			{
				get
				{
					return this.AppliedField;
				}
				set
				{
					if (object.ReferenceEquals(this.AppliedField, value) != true)
					{
						this.AppliedField = value;
						this.RaisePropertyChanged("Applied");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CompanyID
			{
				get
				{
					return this.CompanyIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.CompanyIDField, value) != true)
					{
						this.CompanyIDField = value;
						this.RaisePropertyChanged("CompanyID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string EncryptedLicense
			{
				get
				{
					return this.EncryptedLicenseField;
				}
				set
				{
					if (object.ReferenceEquals(this.EncryptedLicenseField, value) != true)
					{
						this.EncryptedLicenseField = value;
						this.RaisePropertyChanged("EncryptedLicense");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LicenseID
			{
				get
				{
					return this.LicenseIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.LicenseIDField, value) != true)
					{
						this.LicenseIDField = value;
						this.RaisePropertyChanged("LicenseID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int LicenseNbr
			{
				get
				{
					return this.LicenseNbrField;
				}
				set
				{
					if (this.LicenseNbrField.Equals(value) != true)
					{
						this.LicenseNbrField = value;
						this.RaisePropertyChanged("LicenseNbr");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LicenseText
			{
				get
				{
					return this.LicenseTextField;
				}
				set
				{
					if (object.ReferenceEquals(this.LicenseTextField, value) != true)
					{
						this.LicenseTextField = value;
						this.RaisePropertyChanged("LicenseText");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LicenseTypeCode
			{
				get
				{
					return this.LicenseTypeCodeField;
				}
				set
				{
					if (object.ReferenceEquals(this.LicenseTypeCodeField, value) != true)
					{
						this.LicenseTypeCodeField = value;
						this.RaisePropertyChanged("LicenseTypeCode");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string MachineID
			{
				get
				{
					return this.MachineIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.MachineIDField, value) != true)
					{
						this.MachineIDField = value;
						this.RaisePropertyChanged("MachineID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string PurchasedMachines
			{
				get
				{
					return this.PurchasedMachinesField;
				}
				set
				{
					if (object.ReferenceEquals(this.PurchasedMachinesField, value) != true)
					{
						this.PurchasedMachinesField = value;
						this.RaisePropertyChanged("PurchasedMachines");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string PurchasedUsers
			{
				get
				{
					return this.PurchasedUsersField;
				}
				set
				{
					if (object.ReferenceEquals(this.PurchasedUsersField, value) != true)
					{
						this.PurchasedUsersField = value;
						this.RaisePropertyChanged("PurchasedUsers");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ServerNAME
			{
				get
				{
					return this.ServerNAMEField;
				}
				set
				{
					if (object.ReferenceEquals(this.ServerNAMEField, value) != true)
					{
						this.ServerNAMEField = value;
						this.RaisePropertyChanged("ServerNAME");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SqlInstanceName
			{
				get
				{
					return this.SqlInstanceNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.SqlInstanceNameField, value) != true)
					{
						this.SqlInstanceNameField = value;
						this.RaisePropertyChanged("SqlInstanceName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SupportActive
			{
				get
				{
					return this.SupportActiveField;
				}
				set
				{
					if (object.ReferenceEquals(this.SupportActiveField, value) != true)
					{
						this.SupportActiveField = value;
						this.RaisePropertyChanged("SupportActive");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SupportActiveDate
			{
				get
				{
					return this.SupportActiveDateField;
				}
				set
				{
					if (object.ReferenceEquals(this.SupportActiveDateField, value) != true)
					{
						this.SupportActiveDateField = value;
						this.RaisePropertyChanged("SupportActiveDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SupportInactiveDate
			{
				get
				{
					return this.SupportInactiveDateField;
				}
				set
				{
					if (object.ReferenceEquals(this.SupportInactiveDateField, value) != true)
					{
						this.SupportInactiveDateField = value;
						this.RaisePropertyChanged("SupportInactiveDate");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_CONTENT", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_CONTENT : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime CreateDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string DataSourceOwnerUserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string FQNField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string FileDirectoryField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int FileLengthField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime LastAccessDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime LastWriteTimeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string OriginalFileTypeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RANKField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ROWIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RetentionExpirationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceGuidField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool StructuredDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int VersionNbrField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string isMasterField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string isPublicField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime CreateDate
			{
				get
				{
					return this.CreateDateField;
				}
				set
				{
					if (this.CreateDateField.Equals(value) != true)
					{
						this.CreateDateField = value;
						this.RaisePropertyChanged("CreateDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string DataSourceOwnerUserID
			{
				get
				{
					return this.DataSourceOwnerUserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.DataSourceOwnerUserIDField, value) != true)
					{
						this.DataSourceOwnerUserIDField = value;
						this.RaisePropertyChanged("DataSourceOwnerUserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string FQN
			{
				get
				{
					return this.FQNField;
				}
				set
				{
					if (object.ReferenceEquals(this.FQNField, value) != true)
					{
						this.FQNField = value;
						this.RaisePropertyChanged("FQN");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string FileDirectory
			{
				get
				{
					return this.FileDirectoryField;
				}
				set
				{
					if (object.ReferenceEquals(this.FileDirectoryField, value) != true)
					{
						this.FileDirectoryField = value;
						this.RaisePropertyChanged("FileDirectory");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int FileLength
			{
				get
				{
					return this.FileLengthField;
				}
				set
				{
					if (this.FileLengthField.Equals(value) != true)
					{
						this.FileLengthField = value;
						this.RaisePropertyChanged("FileLength");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime LastAccessDate
			{
				get
				{
					return this.LastAccessDateField;
				}
				set
				{
					if (this.LastAccessDateField.Equals(value) != true)
					{
						this.LastAccessDateField = value;
						this.RaisePropertyChanged("LastAccessDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime LastWriteTime
			{
				get
				{
					return this.LastWriteTimeField;
				}
				set
				{
					if (this.LastWriteTimeField.Equals(value) != true)
					{
						this.LastWriteTimeField = value;
						this.RaisePropertyChanged("LastWriteTime");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string OriginalFileType
			{
				get
				{
					return this.OriginalFileTypeField;
				}
				set
				{
					if (object.ReferenceEquals(this.OriginalFileTypeField, value) != true)
					{
						this.OriginalFileTypeField = value;
						this.RaisePropertyChanged("OriginalFileType");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RANK
			{
				get
				{
					return this.RANKField;
				}
				set
				{
					if (this.RANKField.Equals(value) != true)
					{
						this.RANKField = value;
						this.RaisePropertyChanged("RANK");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ROWID
			{
				get
				{
					return this.ROWIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.ROWIDField, value) != true)
					{
						this.ROWIDField = value;
						this.RaisePropertyChanged("ROWID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RetentionExpirationDate
			{
				get
				{
					return this.RetentionExpirationDateField;
				}
				set
				{
					if (this.RetentionExpirationDateField.Equals(value) != true)
					{
						this.RetentionExpirationDateField = value;
						this.RaisePropertyChanged("RetentionExpirationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceGuid
			{
				get
				{
					return this.SourceGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceGuidField, value) != true)
					{
						this.SourceGuidField = value;
						this.RaisePropertyChanged("SourceGuid");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceName
			{
				get
				{
					return this.SourceNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceNameField, value) != true)
					{
						this.SourceNameField = value;
						this.RaisePropertyChanged("SourceName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool StructuredData
			{
				get
				{
					return this.StructuredDataField;
				}
				set
				{
					if (this.StructuredDataField.Equals(value) != true)
					{
						this.StructuredDataField = value;
						this.RaisePropertyChanged("StructuredData");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int VersionNbr
			{
				get
				{
					return this.VersionNbrField;
				}
				set
				{
					if (this.VersionNbrField.Equals(value) != true)
					{
						this.VersionNbrField = value;
						this.RaisePropertyChanged("VersionNbr");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string isMaster
			{
				get
				{
					return this.isMasterField;
				}
				set
				{
					if (object.ReferenceEquals(this.isMasterField, value) != true)
					{
						this.isMasterField = value;
						this.RaisePropertyChanged("isMaster");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string isPublic
			{
				get
				{
					return this.isPublicField;
				}
				set
				{
					if (object.ReferenceEquals(this.isPublicField, value) != true)
					{
						this.isPublicField = value;
						this.RaisePropertyChanged("isPublic");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_Attachments", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_Attachments : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AttachmentNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string EmailGuidField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RowIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string AttachmentName
			{
				get
				{
					return this.AttachmentNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.AttachmentNameField, value) != true)
					{
						this.AttachmentNameField = value;
						this.RaisePropertyChanged("AttachmentName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string EmailGuid
			{
				get
				{
					return this.EmailGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.EmailGuidField, value) != true)
					{
						this.EmailGuidField = value;
						this.RaisePropertyChanged("EmailGuid");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RowID
			{
				get
				{
					return this.RowIDField;
				}
				set
				{
					if (this.RowIDField.Equals(value) != true)
					{
						this.RowIDField = value;
						this.RaisePropertyChanged("RowID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_SearchTerms", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_SearchTerms : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SearchTypeCodeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string TermField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string TermDatatypeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string TermValField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SearchTypeCode
			{
				get
				{
					return this.SearchTypeCodeField;
				}
				set
				{
					if (object.ReferenceEquals(this.SearchTypeCodeField, value) != true)
					{
						this.SearchTypeCodeField = value;
						this.RaisePropertyChanged("SearchTypeCode");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string Term
			{
				get
				{
					return this.TermField;
				}
				set
				{
					if (object.ReferenceEquals(this.TermField, value) != true)
					{
						this.TermField = value;
						this.RaisePropertyChanged("Term");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string TermDatatype
			{
				get
				{
					return this.TermDatatypeField;
				}
				set
				{
					if (object.ReferenceEquals(this.TermDatatypeField, value) != true)
					{
						this.TermDatatypeField = value;
						this.RaisePropertyChanged("TermDatatype");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string TermVal
			{
				get
				{
					return this.TermValField;
				}
				set
				{
					if (object.ReferenceEquals(this.TermValField, value) != true)
					{
						this.TermValField = value;
						this.RaisePropertyChanged("TermVal");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_USERSEARCHSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_USERSEARCHSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool HiveActiveField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string HiveConnectionNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmDataTypeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmValField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowCreationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowLastModDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RowNbrField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ScreenNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int SearchIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool HiveActive
			{
				get
				{
					return this.HiveActiveField;
				}
				set
				{
					if (this.HiveActiveField.Equals(value) != true)
					{
						this.HiveActiveField = value;
						this.RaisePropertyChanged("HiveActive");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string HiveConnectionName
			{
				get
				{
					return this.HiveConnectionNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.HiveConnectionNameField, value) != true)
					{
						this.HiveConnectionNameField = value;
						this.RaisePropertyChanged("HiveConnectionName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmDataType
			{
				get
				{
					return this.ParmDataTypeField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmDataTypeField, value) != true)
					{
						this.ParmDataTypeField = value;
						this.RaisePropertyChanged("ParmDataType");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmName
			{
				get
				{
					return this.ParmNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmNameField, value) != true)
					{
						this.ParmNameField = value;
						this.RaisePropertyChanged("ParmName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmVal
			{
				get
				{
					return this.ParmValField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmValField, value) != true)
					{
						this.ParmValField = value;
						this.RaisePropertyChanged("ParmVal");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowCreationDate
			{
				get
				{
					return this.RowCreationDateField;
				}
				set
				{
					if (this.RowCreationDateField.Equals(value) != true)
					{
						this.RowCreationDateField = value;
						this.RaisePropertyChanged("RowCreationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowLastModDate
			{
				get
				{
					return this.RowLastModDateField;
				}
				set
				{
					if (this.RowLastModDateField.Equals(value) != true)
					{
						this.RowLastModDateField = value;
						this.RaisePropertyChanged("RowLastModDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RowNbr
			{
				get
				{
					return this.RowNbrField;
				}
				set
				{
					if (this.RowNbrField.Equals(value) != true)
					{
						this.RowNbrField = value;
						this.RaisePropertyChanged("RowNbr");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ScreenName
			{
				get
				{
					return this.ScreenNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ScreenNameField, value) != true)
					{
						this.ScreenNameField = value;
						this.RaisePropertyChanged("ScreenName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int SearchID
			{
				get
				{
					return this.SearchIDField;
				}
				set
				{
					if (this.SearchIDField.Equals(value) != true)
					{
						this.SearchIDField = value;
						this.RaisePropertyChanged("SearchID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_USERSCREENSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_USERSCREENSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool HiveActiveField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string HiveConnectionNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmDataTypeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ParmValField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowCreationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowLastModDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RowNbrField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ScreenNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool HiveActive
			{
				get
				{
					return this.HiveActiveField;
				}
				set
				{
					if (this.HiveActiveField.Equals(value) != true)
					{
						this.HiveActiveField = value;
						this.RaisePropertyChanged("HiveActive");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string HiveConnectionName
			{
				get
				{
					return this.HiveConnectionNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.HiveConnectionNameField, value) != true)
					{
						this.HiveConnectionNameField = value;
						this.RaisePropertyChanged("HiveConnectionName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmDataType
			{
				get
				{
					return this.ParmDataTypeField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmDataTypeField, value) != true)
					{
						this.ParmDataTypeField = value;
						this.RaisePropertyChanged("ParmDataType");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmName
			{
				get
				{
					return this.ParmNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmNameField, value) != true)
					{
						this.ParmNameField = value;
						this.RaisePropertyChanged("ParmName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ParmVal
			{
				get
				{
					return this.ParmValField;
				}
				set
				{
					if (object.ReferenceEquals(this.ParmValField, value) != true)
					{
						this.ParmValField = value;
						this.RaisePropertyChanged("ParmVal");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowCreationDate
			{
				get
				{
					return this.RowCreationDateField;
				}
				set
				{
					if (this.RowCreationDateField.Equals(value) != true)
					{
						this.RowCreationDateField = value;
						this.RaisePropertyChanged("RowCreationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowLastModDate
			{
				get
				{
					return this.RowLastModDateField;
				}
				set
				{
					if (this.RowLastModDateField.Equals(value) != true)
					{
						this.RowLastModDateField = value;
						this.RaisePropertyChanged("RowLastModDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RowNbr
			{
				get
				{
					return this.RowNbrField;
				}
				set
				{
					if (this.RowNbrField.Equals(value) != true)
					{
						this.RowNbrField = value;
						this.RaisePropertyChanged("RowNbr");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ScreenName
			{
				get
				{
					return this.ScreenNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ScreenNameField, value) != true)
					{
						this.ScreenNameField = value;
						this.RaisePropertyChanged("ScreenName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_clsUSERGRIDSTATE", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_clsUSERGRIDSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ColNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int ColOrderField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool ColReadOnlyField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool ColSortAscField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int ColSortOrderField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool ColVisibleField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int ColWidthField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string GridNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool HiveActiveField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string HiveConnectionNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowCreationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowLastModDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RowNbrField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ScreenNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ColName
			{
				get
				{
					return this.ColNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ColNameField, value) != true)
					{
						this.ColNameField = value;
						this.RaisePropertyChanged("ColName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int ColOrder
			{
				get
				{
					return this.ColOrderField;
				}
				set
				{
					if (this.ColOrderField.Equals(value) != true)
					{
						this.ColOrderField = value;
						this.RaisePropertyChanged("ColOrder");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool ColReadOnly
			{
				get
				{
					return this.ColReadOnlyField;
				}
				set
				{
					if (this.ColReadOnlyField.Equals(value) != true)
					{
						this.ColReadOnlyField = value;
						this.RaisePropertyChanged("ColReadOnly");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool ColSortAsc
			{
				get
				{
					return this.ColSortAscField;
				}
				set
				{
					if (this.ColSortAscField.Equals(value) != true)
					{
						this.ColSortAscField = value;
						this.RaisePropertyChanged("ColSortAsc");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int ColSortOrder
			{
				get
				{
					return this.ColSortOrderField;
				}
				set
				{
					if (this.ColSortOrderField.Equals(value) != true)
					{
						this.ColSortOrderField = value;
						this.RaisePropertyChanged("ColSortOrder");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool ColVisible
			{
				get
				{
					return this.ColVisibleField;
				}
				set
				{
					if (this.ColVisibleField.Equals(value) != true)
					{
						this.ColVisibleField = value;
						this.RaisePropertyChanged("ColVisible");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int ColWidth
			{
				get
				{
					return this.ColWidthField;
				}
				set
				{
					if (this.ColWidthField.Equals(value) != true)
					{
						this.ColWidthField = value;
						this.RaisePropertyChanged("ColWidth");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string GridName
			{
				get
				{
					return this.GridNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.GridNameField, value) != true)
					{
						this.GridNameField = value;
						this.RaisePropertyChanged("GridName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool HiveActive
			{
				get
				{
					return this.HiveActiveField;
				}
				set
				{
					if (this.HiveActiveField.Equals(value) != true)
					{
						this.HiveActiveField = value;
						this.RaisePropertyChanged("HiveActive");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string HiveConnectionName
			{
				get
				{
					return this.HiveConnectionNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.HiveConnectionNameField, value) != true)
					{
						this.HiveConnectionNameField = value;
						this.RaisePropertyChanged("HiveConnectionName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowCreationDate
			{
				get
				{
					return this.RowCreationDateField;
				}
				set
				{
					if (this.RowCreationDateField.Equals(value) != true)
					{
						this.RowCreationDateField = value;
						this.RaisePropertyChanged("RowCreationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowLastModDate
			{
				get
				{
					return this.RowLastModDateField;
				}
				set
				{
					if (this.RowLastModDateField.Equals(value) != true)
					{
						this.RowLastModDateField = value;
						this.RaisePropertyChanged("RowLastModDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RowNbr
			{
				get
				{
					return this.RowNbrField;
				}
				set
				{
					if (this.RowNbrField.Equals(value) != true)
					{
						this.RowNbrField = value;
						this.RaisePropertyChanged("RowNbr");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ScreenName
			{
				get
				{
					return this.ScreenNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.ScreenNameField, value) != true)
					{
						this.ScreenNameField = value;
						this.RaisePropertyChanged("ScreenName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_CoOwner", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_CoOwner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CoOwnerIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CoOwnerNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int RowIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CoOwnerID
			{
				get
				{
					return this.CoOwnerIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.CoOwnerIDField, value) != true)
					{
						this.CoOwnerIDField = value;
						this.RaisePropertyChanged("CoOwnerID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CoOwnerName
			{
				get
				{
					return this.CoOwnerNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.CoOwnerNameField, value) != true)
					{
						this.CoOwnerNameField = value;
						this.RaisePropertyChanged("CoOwnerName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int RowID
			{
				get
				{
					return this.RowIDField;
				}
				set
				{
					if (this.RowIDField.Equals(value) != true)
					{
						this.RowIDField = value;
						this.RaisePropertyChanged("RowID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_VUserGrid", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_VUserGrid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AdminField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool ClientOnlyField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string EmailAddressField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool HiveActiveField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string HiveConnectionNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoSvrNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowCreationDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private DateTime RowLastModDateField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserLoginIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string isActiveField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string Admin
			{
				get
				{
					return this.AdminField;
				}
				set
				{
					if (object.ReferenceEquals(this.AdminField, value) != true)
					{
						this.AdminField = value;
						this.RaisePropertyChanged("Admin");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool ClientOnly
			{
				get
				{
					return this.ClientOnlyField;
				}
				set
				{
					if (this.ClientOnlyField.Equals(value) != true)
					{
						this.ClientOnlyField = value;
						this.RaisePropertyChanged("ClientOnly");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string EmailAddress
			{
				get
				{
					return this.EmailAddressField;
				}
				set
				{
					if (object.ReferenceEquals(this.EmailAddressField, value) != true)
					{
						this.EmailAddressField = value;
						this.RaisePropertyChanged("EmailAddress");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool HiveActive
			{
				get
				{
					return this.HiveActiveField;
				}
				set
				{
					if (this.HiveActiveField.Equals(value) != true)
					{
						this.HiveActiveField = value;
						this.RaisePropertyChanged("HiveActive");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string HiveConnectionName
			{
				get
				{
					return this.HiveConnectionNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.HiveConnectionNameField, value) != true)
					{
						this.HiveConnectionNameField = value;
						this.RaisePropertyChanged("HiveConnectionName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoSvrName
			{
				get
				{
					return this.RepoSvrNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoSvrNameField, value) != true)
					{
						this.RepoSvrNameField = value;
						this.RaisePropertyChanged("RepoSvrName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowCreationDate
			{
				get
				{
					return this.RowCreationDateField;
				}
				set
				{
					if (this.RowCreationDateField.Equals(value) != true)
					{
						this.RowCreationDateField = value;
						this.RaisePropertyChanged("RowCreationDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public DateTime RowLastModDate
			{
				get
				{
					return this.RowLastModDateField;
				}
				set
				{
					if (this.RowLastModDateField.Equals(value) != true)
					{
						this.RowLastModDateField = value;
						this.RaisePropertyChanged("RowLastModDate");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserLoginID
			{
				get
				{
					return this.UserLoginIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserLoginIDField, value) != true)
					{
						this.UserLoginIDField = value;
						this.RaisePropertyChanged("UserLoginID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserName
			{
				get
				{
					return this.UserNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserNameField, value) != true)
					{
						this.UserNameField = value;
						this.RaisePropertyChanged("UserName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string isActive
			{
				get
				{
					return this.isActiveField;
				}
				set
				{
					if (object.ReferenceEquals(this.isActiveField, value) != true)
					{
						this.isActiveField = value;
						this.RaisePropertyChanged("isActive");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_DgGroupUsers", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_DgGroupUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool DeleteAccessField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool FullAccessField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool ReadOnlyAccessField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool SearchableField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserNameField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool DeleteAccess
			{
				get
				{
					return this.DeleteAccessField;
				}
				set
				{
					if (this.DeleteAccessField.Equals(value) != true)
					{
						this.DeleteAccessField = value;
						this.RaisePropertyChanged("DeleteAccess");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool FullAccess
			{
				get
				{
					return this.FullAccessField;
				}
				set
				{
					if (this.FullAccessField.Equals(value) != true)
					{
						this.FullAccessField = value;
						this.RaisePropertyChanged("FullAccess");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool ReadOnlyAccess
			{
				get
				{
					return this.ReadOnlyAccessField;
				}
				set
				{
					if (this.ReadOnlyAccessField.Equals(value) != true)
					{
						this.ReadOnlyAccessField = value;
						this.RaisePropertyChanged("ReadOnlyAccess");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool Searchable
			{
				get
				{
					return this.SearchableField;
				}
				set
				{
					if (this.SearchableField.Equals(value) != true)
					{
						this.SearchableField = value;
						this.RaisePropertyChanged("Searchable");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserName
			{
				get
				{
					return this.UserNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserNameField, value) != true)
					{
						this.UserNameField = value;
						this.RaisePropertyChanged("UserName");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_dgGrpUsers", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_dgGrpUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserNameField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserName
			{
				get
				{
					return this.UserNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserNameField, value) != true)
					{
						this.UserNameField = value;
						this.RaisePropertyChanged("UserName");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_LibItems", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_LibItems : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AddedByUserGuidIdField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string DataSourceOwnerUserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ItemTitleField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string ItemTypeField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryItemGuidField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryOwnerUserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceGuidField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string AddedByUserGuidId
			{
				get
				{
					return this.AddedByUserGuidIdField;
				}
				set
				{
					if (object.ReferenceEquals(this.AddedByUserGuidIdField, value) != true)
					{
						this.AddedByUserGuidIdField = value;
						this.RaisePropertyChanged("AddedByUserGuidId");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string DataSourceOwnerUserID
			{
				get
				{
					return this.DataSourceOwnerUserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.DataSourceOwnerUserIDField, value) != true)
					{
						this.DataSourceOwnerUserIDField = value;
						this.RaisePropertyChanged("DataSourceOwnerUserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ItemTitle
			{
				get
				{
					return this.ItemTitleField;
				}
				set
				{
					if (object.ReferenceEquals(this.ItemTitleField, value) != true)
					{
						this.ItemTitleField = value;
						this.RaisePropertyChanged("ItemTitle");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string ItemType
			{
				get
				{
					return this.ItemTypeField;
				}
				set
				{
					if (object.ReferenceEquals(this.ItemTypeField, value) != true)
					{
						this.ItemTypeField = value;
						this.RaisePropertyChanged("ItemType");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryItemGuid
			{
				get
				{
					return this.LibraryItemGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryItemGuidField, value) != true)
					{
						this.LibraryItemGuidField = value;
						this.RaisePropertyChanged("LibraryItemGuid");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryName
			{
				get
				{
					return this.LibraryNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryNameField, value) != true)
					{
						this.LibraryNameField = value;
						this.RaisePropertyChanged("LibraryName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryOwnerUserID
			{
				get
				{
					return this.LibraryOwnerUserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryOwnerUserIDField, value) != true)
					{
						this.LibraryOwnerUserIDField = value;
						this.RaisePropertyChanged("LibraryOwnerUserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceGuid
			{
				get
				{
					return this.SourceGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceGuidField, value) != true)
					{
						this.SourceGuidField = value;
						this.RaisePropertyChanged("SourceGuid");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_DgAssigned", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_DgAssigned : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string GroupNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string GroupOwnerUserIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string GroupName
			{
				get
				{
					return this.GroupNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.GroupNameField, value) != true)
					{
						this.GroupNameField = value;
						this.RaisePropertyChanged("GroupName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string GroupOwnerUserID
			{
				get
				{
					return this.GroupOwnerUserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.GroupOwnerUserIDField, value) != true)
					{
						this.GroupOwnerUserIDField = value;
						this.RaisePropertyChanged("GroupOwnerUserID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_VLibraryStats", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_VLibraryStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int ItemsField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int MembersField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string isPublicField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int Items
			{
				get
				{
					return this.ItemsField;
				}
				set
				{
					if (this.ItemsField.Equals(value) != true)
					{
						this.ItemsField = value;
						this.RaisePropertyChanged("Items");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryName
			{
				get
				{
					return this.LibraryNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryNameField, value) != true)
					{
						this.LibraryNameField = value;
						this.RaisePropertyChanged("LibraryName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int Members
			{
				get
				{
					return this.MembersField;
				}
				set
				{
					if (this.MembersField.Equals(value) != true)
					{
						this.MembersField = value;
						this.RaisePropertyChanged("Members");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string isPublic
			{
				get
				{
					return this.isPublicField;
				}
				set
				{
					if (object.ReferenceEquals(this.isPublicField, value) != true)
					{
						this.isPublicField = value;
						this.RaisePropertyChanged("isPublic");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_ZipFiles", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_ZipFiles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceGuidField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string SourceNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool isParentField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceGuid
			{
				get
				{
					return this.SourceGuidField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceGuidField, value) != true)
					{
						this.SourceGuidField = value;
						this.RaisePropertyChanged("SourceGuid");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string SourceName
			{
				get
				{
					return this.SourceNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.SourceNameField, value) != true)
					{
						this.SourceNameField = value;
						this.RaisePropertyChanged("SourceName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool isParent
			{
				get
				{
					return this.isParentField;
				}
				set
				{
					if (this.isParentField.Equals(value) != true)
					{
						this.isParentField = value;
						this.RaisePropertyChanged("isParent");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_Metadata", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_Metadata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AttributeNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string AttributeValueField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string AttributeName
			{
				get
				{
					return this.AttributeNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.AttributeNameField, value) != true)
					{
						this.AttributeNameField = value;
						this.RaisePropertyChanged("AttributeName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string AttributeValue
			{
				get
				{
					return this.AttributeValueField;
				}
				set
				{
					if (object.ReferenceEquals(this.AttributeValueField, value) != true)
					{
						this.AttributeValueField = value;
						this.RaisePropertyChanged("AttributeValue");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_ListOfStrings01", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_ListOfStrings01 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string strItemField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string strItem
			{
				get
				{
					return this.strItemField;
				}
				set
				{
					if (object.ReferenceEquals(this.strItemField, value) != true)
					{
						this.strItemField = value;
						this.RaisePropertyChanged("strItem");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_ListOfStrings02", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_ListOfStrings02 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string strItemField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string strItem
			{
				get
				{
					return this.strItemField;
				}
				set
				{
					if (object.ReferenceEquals(this.strItemField, value) != true)
					{
						this.strItemField = value;
						this.RaisePropertyChanged("strItem");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_ListOfStrings03", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_ListOfStrings03 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string strItemField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string strItem
			{
				get
				{
					return this.strItemField;
				}
				set
				{
					if (object.ReferenceEquals(this.strItemField, value) != true)
					{
						this.strItemField = value;
						this.RaisePropertyChanged("strItem");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_ListOfStrings04", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_ListOfStrings04 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string strItemField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string strItem
			{
				get
				{
					return this.strItemField;
				}
				set
				{
					if (object.ReferenceEquals(this.strItemField, value) != true)
					{
						this.strItemField = value;
						this.RaisePropertyChanged("strItem");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_VLibraryUsers", Namespace = "http://schemas.datacontract.org/2004/07/EcmCloudWcf.Web"), System.SerializableAttribute()]public partial class DS_VLibraryUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string LibraryOwnerUserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserNameField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryName
			{
				get
				{
					return this.LibraryNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryNameField, value) != true)
					{
						this.LibraryNameField = value;
						this.RaisePropertyChanged("LibraryName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string LibraryOwnerUserID
			{
				get
				{
					return this.LibraryOwnerUserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.LibraryOwnerUserIDField, value) != true)
					{
						this.LibraryOwnerUserIDField = value;
						this.RaisePropertyChanged("LibraryOwnerUserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserName
			{
				get
				{
					return this.UserNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserNameField, value) != true)
					{
						this.UserNameField = value;
						this.RaisePropertyChanged("UserName");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public partial class Service1Client : System.ServiceModel.ClientBase<SVCSearch.IService1>, SVCSearch.IService1
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public interface IService1Channel : SVCSearch.IService1,System.ServiceModel.IClientChannel
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName = "SVCSearch.IService1")]public interface IService1
		{
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateEmailGridWithWeights", ReplyAction = "http://tempuri.org/IService1/PopulateEmailGridWithWeightsResponse")]SVCSearch.DS_EMAIL[] PopulateEmailGridWithWeights(ref int SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/LoadUserSearchHistory", ReplyAction = "http://tempuri.org/IService1/LoadUserSearchHistoryResponse")]void LoadUserSearchHistory(ref int SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getAttachmentWeights", ReplyAction = "http://tempuri.org/IService1/getAttachmentWeightsResponse")]void getAttachmentWeights(ref int SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn1", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn1Response")]bool ExecuteSqlNewConn1(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn2", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn2Response")]bool ExecuteSqlNewConn2(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn3", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn3Response")]bool ExecuteSqlNewConn3(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn4", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn4Response")]bool ExecuteSqlNewConn4(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn5", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConn5Response")]bool ExecuteSqlNewConn5(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConnResponse")]bool ExecuteSqlNewConn(ref int SecureID, ref string MySql);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetParmValue", ReplyAction = "http://tempuri.org/IService1/GetParmValueResponse")]void GetParmValue(ref int SecureID, string UID, ref string[] Parms);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/isGlobalSearcher", ReplyAction = "http://tempuri.org/IService1/isGlobalSearcherResponse")]bool isGlobalSearcher(ref int SecureID, string Userid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/isAdmin", ReplyAction = "http://tempuri.org/IService1/isAdminResponse")]bool isAdmin(ref int SecureID, string Userid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getUserParm", ReplyAction = "http://tempuri.org/IService1/getUserParmResponse")]void getUserParm(ref int SecureID, ref string sVariable, string UserParm);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RemoveUnwantedCharacters", ReplyAction = "http://tempuri.org/IService1/RemoveUnwantedCharactersResponse")]void RemoveUnwantedCharacters(ref int SecureID, ref string tgtString);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetMachineIP", ReplyAction = "http://tempuri.org/IService1/GetMachineIPResponse")]string GetMachineIP(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getClientLicenses", ReplyAction = "http://tempuri.org/IService1/getClientLicensesResponse")]SVCSearch.DS_License[] getClientLicenses(ref int SecureID, string CompanyID, ref string ErrorMessage, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetNbrMachineAll", ReplyAction = "http://tempuri.org/IService1/GetNbrMachineAllResponse")]int GetNbrMachineAll(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetNbrMachine", ReplyAction = "http://tempuri.org/IService1/GetNbrMachineResponse")]int GetNbrMachine(ref int SecureID, string MachineName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachine", ReplyAction = "http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachineResponse")]bool isLicenseLocatedOnAssignedMachine(ref int SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetXrt", ReplyAction = "http://tempuri.org/IService1/GetXrtResponse")]string GetXrt(ref int SecureID, bool RC, string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSqlServerVersion", ReplyAction = "http://tempuri.org/IService1/getSqlServerVersionResponse")]string getSqlServerVersion(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RecordGrowth", ReplyAction = "http://tempuri.org/IService1/RecordGrowthResponse")]void RecordGrowth(ref int SecureID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ParseLic", ReplyAction = "http://tempuri.org/IService1/ParseLicResponse")]string ParseLic(ref int SecureID, string LT, string tgtKey);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetLoggedinUserName", ReplyAction = "http://tempuri.org/IService1/GetLoggedinUserNameResponse")]string GetLoggedinUserName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getDBSIZEMB", ReplyAction = "http://tempuri.org/IService1/getDBSIZEMBResponse")]double getDBSIZEMB(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/resetMissingEmailIds", ReplyAction = "http://tempuri.org/IService1/resetMissingEmailIdsResponse")]void resetMissingEmailIds(ref int SecureID, string CurrUserGuidID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UserParmInsertUpdate", ReplyAction = "http://tempuri.org/IService1/UserParmInsertUpdateResponse")]void UserParmInsertUpdate(ref int SecureID, string ParmName, string UserID, string ParmVal, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/validateLogin", ReplyAction = "http://tempuri.org/IService1/validateLoginResponse")]bool validateLogin(ref int SecureID, string UserLogin, string PW, ref string UserGuidID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getLoggedInUser", ReplyAction = "http://tempuri.org/IService1/getLoggedInUserResponse")]string getLoggedInUser(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getAttachedMachineName", ReplyAction = "http://tempuri.org/IService1/getAttachedMachineNameResponse")]string getAttachedMachineName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getServerInstanceName", ReplyAction = "http://tempuri.org/IService1/getServerInstanceNameResponse")]string getServerInstanceName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getServerMachineName", ReplyAction = "http://tempuri.org/IService1/getServerMachineNameResponse")]string getServerMachineName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSystemParm", ReplyAction = "http://tempuri.org/IService1/getSystemParmResponse")]void getSystemParm(ref int SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSynonyms", ReplyAction = "http://tempuri.org/IService1/getSynonymsResponse")]string getSynonyms(ref int SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getThesaurusID", ReplyAction = "http://tempuri.org/IService1/getThesaurusIDResponse")]string getThesaurusID(ref int SecureID, string ThesaurusName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/iCountContent", ReplyAction = "http://tempuri.org/IService1/iCountContentResponse")]int iCountContent(ref int SecureID, string S);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getDatasourceParm", ReplyAction = "http://tempuri.org/IService1/getDatasourceParmResponse")]string getDatasourceParm(ref int SecureID, string AttributeName, string SourceGuid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SaveRunParm", ReplyAction = "http://tempuri.org/IService1/SaveRunParmResponse")]bool SaveRunParm(ref int SecureID, string UserID, ref string ParmID, ref string ParmVal);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/iGetRowCount", ReplyAction = "http://tempuri.org/IService1/iGetRowCountResponse")]int iGetRowCount(ref int SecureID, string TBL, string WhereClause);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ZeroizeGlobalSearch", ReplyAction = "http://tempuri.org/IService1/ZeroizeGlobalSearchResponse")]bool ZeroizeGlobalSearch(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/updateIp", ReplyAction = "http://tempuri.org/IService1/updateIpResponse")]void updateIp(ref int SecureID, string HostName, string IP, int checkCode, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateSourceGridWithWeights", ReplyAction = "http://tempuri.org/IService1/PopulateSourceGridWithWeightsResponse")]SVCSearch.DS_CONTENT[] PopulateSourceGridWithWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateSourceGridNoWeights", ReplyAction = "http://tempuri.org/IService1/PopulateSourceGridNoWeightsResponse")]SVCSearch.DS_CONTENT[] PopulateSourceGridNoWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateEmailGridWithNoWeights", ReplyAction = "http://tempuri.org/IService1/PopulateEmailGridWithNoWeightsResponse")]SVCSearch.DS_EMAIL[] PopulateEmailGridWithNoWeights(ref int SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetEmailAttachments", ReplyAction = "http://tempuri.org/IService1/GetEmailAttachmentsResponse")]SVCSearch.DS_Attachments[] GetEmailAttachments(ref int SecureID, string CurrEmailGuid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/DbWriteToFile", ReplyAction = "http://tempuri.org/IService1/DbWriteToFileResponse")]bool DbWriteToFile(ref int SecureID, string UID, string SourceGuid, ref string FileName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SetSessionVariable", ReplyAction = "http://tempuri.org/IService1/SetSessionVariableResponse")]void SetSessionVariable(ref int SecureID, string key, string KeyValue);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetSessionVariable", ReplyAction = "http://tempuri.org/IService1/GetSessionVariableResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateSourceImageCompressed", ReplyAction = "http://tempuri.org/IService1/UpdateSourceImageCompressedResponse")]bool UpdateSourceImageCompressed(ref int SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/writeEmailFromDbToFile", ReplyAction = "http://tempuri.org/IService1/writeEmailFromDbToFileResponse")]void writeEmailFromDbToFile(ref int SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/writeAttachmentFromDbWriteToFile", ReplyAction = "http://tempuri.org/IService1/writeAttachmentFromDbWriteToFileResponse")]void writeAttachmentFromDbWriteToFile(ref int SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFile", ReplyAction = "http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFileResponse")]void writeImageSourceDataFromDbWriteToFile(ref int SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AddLibraryItems", ReplyAction = "http://tempuri.org/IService1/AddLibraryItemsResponse")]void AddLibraryItems(ref int SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateGroupUserLibCombo", ReplyAction = "http://tempuri.org/IService1/PopulateGroupUserLibComboResponse")]void PopulateGroupUserLibCombo(ref int SecureID, string UID, ref string[] cb);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetLibOwnerByName", ReplyAction = "http://tempuri.org/IService1/GetLibOwnerByNameResponse")]string GetLibOwnerByName(ref int SecureID, string LibraryName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSearch", ReplyAction = "http://tempuri.org/IService1/ExecuteSearchResponse")]void ExecuteSearch(ref int SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref SVCSearch.DS_EMAIL[] ListOEmailRows, ref SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSearchState", ReplyAction = "http://tempuri.org/IService1/getSearchStateResponse")]SVCSearch.DS_USERSEARCHSTATE[] getSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveSearchState", ReplyAction = "http://tempuri.org/IService1/saveSearchStateResponse")]void saveSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getScreenState", ReplyAction = "http://tempuri.org/IService1/getScreenStateResponse")]SVCSearch.DS_USERSCREENSTATE[] getScreenState(ref int SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGridLayout", ReplyAction = "http://tempuri.org/IService1/getGridLayoutResponse")]SVCSearch.DS_clsUSERGRIDSTATE[] getGridLayout(ref int SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveGridLayout", ReplyAction = "http://tempuri.org/IService1/saveGridLayoutResponse")]void saveGridLayout(ref int SecureID, ref string UserID, ref string ScreenName, ref string GridName, ref string ColName, ref int ColOrder, ref int ColWidth, ref bool ColVisible, ref bool ColReadOnly, ref int ColSortOrder, ref bool ColSortAsc, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref int RowNbr, ref bool RC, ref string rMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveScreenState", ReplyAction = "http://tempuri.org/IService1/saveScreenStateResponse")]void saveScreenState(ref int SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getUserParms", ReplyAction = "http://tempuri.org/IService1/getUserParmsResponse")]void getUserParms(ref int SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ParseLicDictionary", ReplyAction = "http://tempuri.org/IService1/ParseLicDictionaryResponse")]void ParseLicDictionary(ref int SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/LicenseType", ReplyAction = "http://tempuri.org/IService1/LicenseTypeResponse")]string LicenseType(int SecureID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetNbrUsers", ReplyAction = "http://tempuri.org/IService1/GetNbrUsersResponse")]int GetNbrUsers(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/isLease", ReplyAction = "http://tempuri.org/IService1/isLeaseResponse")]bool isLease(int SecureID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getMaxClients", ReplyAction = "http://tempuri.org/IService1/getMaxClientsResponse")]int getMaxClients(int SecureID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetUserHostName", ReplyAction = "http://tempuri.org/IService1/GetUserHostNameResponse")]string GetUserHostName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetUserHostAddress", ReplyAction = "http://tempuri.org/IService1/GetUserHostAddressResponse")]string GetUserHostAddress(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getUserGuidID", ReplyAction = "http://tempuri.org/IService1/getUserGuidIDResponse")]string getUserGuidID(ref int SecureID, string UserLoginId);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ProcessDates", ReplyAction = "http://tempuri.org/IService1/ProcessDatesResponse")]System.Collections.Generic.Dictionary<string, DateTime> ProcessDates(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings1", ReplyAction = "http://tempuri.org/IService1/getListOfStrings1Response")]bool getListOfStrings1(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings2", ReplyAction = "http://tempuri.org/IService1/getListOfStrings2Response")]bool getListOfStrings2(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings3", ReplyAction = "http://tempuri.org/IService1/getListOfStrings3Response")]bool getListOfStrings3(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings4", ReplyAction = "http://tempuri.org/IService1/getListOfStrings4Response")]bool getListOfStrings4(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/iCount", ReplyAction = "http://tempuri.org/IService1/iCountResponse")]int iCount(ref int SecureID, string S);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetLogPath", ReplyAction = "http://tempuri.org/IService1/GetLogPathResponse")]void GetLogPath(ref string tPath);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ActiveSessionGetVal", ReplyAction = "http://tempuri.org/IService1/ActiveSessionGetValResponse")]string ActiveSessionGetVal(ref int SecureID, ref System.Guid SessionGuid, ref string ParmName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ActiveSession", ReplyAction = "http://tempuri.org/IService1/ActiveSessionResponse")]bool ActiveSession(ref int SecureID, System.Guid SessionGuid, string ParmName, string ParmValue);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setSecureLoginParms", ReplyAction = "http://tempuri.org/IService1/setSecureLoginParmsResponse")]void setSecureLoginParms(ref int SecureID, string sCompanyID, string sRepoID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/validateAttachSecureLogin", ReplyAction = "http://tempuri.org/IService1/validateAttachSecureLoginResponse")]bool validateAttachSecureLogin(ref int SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateSecureLoginCB_V2", ReplyAction = "http://tempuri.org/IService1/PopulateSecureLoginCB_V2Response")]void PopulateSecureLoginCB_V2(ref int SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateSecureLoginCB", ReplyAction = "http://tempuri.org/IService1/PopulateSecureLoginCBResponse")]void PopulateSecureLoginCB(ref int SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getLoginPW", ReplyAction = "http://tempuri.org/IService1/getLoginPWResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setLoginPW", ReplyAction = "http://tempuri.org/IService1/setLoginPWResponse")]void setLoginPW(ref int SecureID, string RepoID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSessionEncCs", ReplyAction = "http://tempuri.org/IService1/getSessionEncCsResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setSessionEncCs", ReplyAction = "http://tempuri.org/IService1/setSessionEncCsResponse")]void setSessionEncCs(ref int SecureID, string MySessionID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setSessionRepoID", ReplyAction = "http://tempuri.org/IService1/setSessionRepoIDResponse")]void setSessionRepoID(ref int SecureID, string RepoID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSessionRepoID", ReplyAction = "http://tempuri.org/IService1/getSessionRepoIDResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setSessionCompanyID", ReplyAction = "http://tempuri.org/IService1/setSessionCompanyIDResponse")]void setSessionCompanyID(ref int SecureID, string CompanyID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSessionCompanyID", ReplyAction = "http://tempuri.org/IService1/getSessionCompanyIDResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setLoginGuid", ReplyAction = "http://tempuri.org/IService1/setLoginGuidResponse")]void setLoginGuid(ref int SecureID, string MyLoginGuid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getLoginGuid", ReplyAction = "http://tempuri.org/IService1/getLoginGuidResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSessionID", ReplyAction = "http://tempuri.org/IService1/getSessionIDResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
			)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
			<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/setSessionID", ReplyAction = "http://tempuri.org/IService1/setSessionIDResponse")]void setSessionID(ref int SecureID, string MySessionID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExpandInflectionTerms", ReplyAction = "http://tempuri.org/IService1/ExpandInflectionTermsResponse")]string ExpandInflectionTerms(ref int SecureID, string S);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getServerDatabaseName", ReplyAction = "http://tempuri.org/IService1/getServerDatabaseNameResponse")]string getServerDatabaseName(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/CleanLog", ReplyAction = "http://tempuri.org/IService1/CleanLogResponse")]void CleanLog(ref int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateComboBox", ReplyAction = "http://tempuri.org/IService1/PopulateComboBoxResponse")]void PopulateComboBox(ref int SecureID, ref string[] CB, string TblColName, string S);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getUserAuth", ReplyAction = "http://tempuri.org/IService1/getUserAuthResponse")]string getUserAuth(ref int SecureID, string Userid);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/DeleteUser", ReplyAction = "http://tempuri.org/IService1/DeleteUserResponse")]bool DeleteUser(ref int SecureID, string SelectedUserGuid, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SaveUSer", ReplyAction = "http://tempuri.org/IService1/SaveUSerResponse")]bool SaveUSer(int SecureID, ref string UserID, ref string UserName, ref string EmailAddress, ref string UserPassword, ref string Admin, ref string isActive, ref string UserLoginID, ref bool ClientOnly, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref string ActiveGuid, ref string RepoName, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveSearchSchedule", ReplyAction = "http://tempuri.org/IService1/saveSearchScheduleResponse")]bool saveSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSearchSchedule", ReplyAction = "http://tempuri.org/IService1/getSearchScheduleResponse")]bool getSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertCoOwner", ReplyAction = "http://tempuri.org/IService1/InsertCoOwnerResponse")]bool InsertCoOwner(int SecureID, string CurrentOwner, string CoOwner);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateCoOwnerGrid", ReplyAction = "http://tempuri.org/IService1/PopulateCoOwnerGridResponse")]SVCSearch.DS_CoOwner[] PopulateCoOwnerGrid(int SecureID, string UID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateUserGrid", ReplyAction = "http://tempuri.org/IService1/PopulateUserGridResponse")]SVCSearch.DS_VUserGrid[] PopulateUserGrid(ref int SecureID, string UserID, bool isAdmin)
			{
				
				[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGroupUsers", ReplyAction = "http://tempuri.org/IService1/getGroupUsersResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers
				)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary
				<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
				
				[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateDgGroupUsers", ReplyAction = "http://tempuri.org/IService1/PopulateDgGroupUsersResponse")]}SVCSearch.DS_DgGroupUsers[] PopulateDgGroupUsers(ref int SecureID, string OwnerUserGuidID, string GroupName)
				{
					
					[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/DeleteGroupUsers", ReplyAction = "http://tempuri.org/IService1/DeleteGroupUsersResponse")]}bool DeleteGroupUsers(string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, int iDeleted, string RetMsg)
					{
						
						[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGroupOwnerGuidByGroupName", ReplyAction = "http://tempuri.org/IService1/getGroupOwnerGuidByGroupNameResponse")]}string getGroupOwnerGuidByGroupName(ref int SecureID, string GroupName)
						{
							
							[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AddLibraryGroupUser", ReplyAction = "http://tempuri.org/IService1/AddLibraryGroupUserResponse")]}void AddLibraryGroupUser(ref int SecureID, string GroupName, bool RC)
							{
								
								[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateGroupUserGrid", ReplyAction = "http://tempuri.org/IService1/PopulateGroupUserGridResponse")]}SVCSearch.DS_dgGrpUsers[] PopulateGroupUserGrid(ref int SecureID, string GroupName)
								{
									
									[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateLibItemsGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibItemsGridResponse")]}SVCSearch.DS_LibItems[] PopulateLibItemsGrid(ref int SecureID, string LibraryName, string UserID)
									{
										
										[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateDgAssigned", ReplyAction = "http://tempuri.org/IService1/PopulateDgAssignedResponse")]}SVCSearch.DS_DgAssigned[] PopulateDgAssigned(ref int SecureID, string LibraryName, string UserID)
										{
											
											[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ResetLibraryUsersCount", ReplyAction = "http://tempuri.org/IService1/ResetLibraryUsersCountResponse")]}void ResetLibraryUsersCount(ref int SecureID, bool RC)
											{
												
												[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/DeleteLibraryGroupUser", ReplyAction = "http://tempuri.org/IService1/DeleteLibraryGroupUserResponse")]}void DeleteLibraryGroupUser(ref int SecureID, string GroupName, string LibraryName, bool RC)
												{
													
													[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ChangeUserPassword", ReplyAction = "http://tempuri.org/IService1/ChangeUserPasswordResponse")]}bool ChangeUserPassword(ref int SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2)
													{
														
														[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SaveClickStats", ReplyAction = "http://tempuri.org/IService1/SaveClickStatsResponse")]}void SaveClickStats(int IID, string UserID, bool RC)
														{
															
															[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/cleanUpLibraryItems", ReplyAction = "http://tempuri.org/IService1/cleanUpLibraryItemsResponse")]}void cleanUpLibraryItems(ref int SecureID, string UserID)
															{
																
																[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RemoveLibraryDirectories", ReplyAction = "http://tempuri.org/IService1/RemoveLibraryDirectoriesResponse")]}void RemoveLibraryDirectories(ref int SecureID, string UserID, string DirectoryName, string LibraryName, bool RC, string RetMsg)
																{
																	
																	[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RemoveLibraryEmails", ReplyAction = "http://tempuri.org/IService1/RemoveLibraryEmailsResponse")]}void RemoveLibraryEmails(ref int SecureID, string FolderName, string LibraryName, string UserID, bool RC, string RetMsg)
																	{
																		
																		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AddSysMsg", ReplyAction = "http://tempuri.org/IService1/AddSysMsgResponse")]}void AddSysMsg(ref int SecureID, string UserID, string tMsg, bool RC)
																		{
																			
																			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AddLibraryDirectory", ReplyAction = "http://tempuri.org/IService1/AddLibraryDirectoryResponse")]}void AddLibraryDirectory(ref int SecureID, string FolderName, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg)
																			{
																				
																				[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AddLibraryEmail", ReplyAction = "http://tempuri.org/IService1/AddLibraryEmailResponse")]}void AddLibraryEmail(ref int SecureID, string EmailFolder, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg)
																				{
																					
																					[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateLibraryGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibraryGridResponse")]}SVCSearch.DS_VLibraryStats[] PopulateLibraryGrid(ref int SecureID, string UserID)
																					{
																						
																						[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings", ReplyAction = "http://tempuri.org/IService1/getListOfStringsResponse")]}bool getListOfStrings(ref int SecureID, string[] ListOfItems, string MySql, bool RC, string RetMsg)
																						{
																							
																							[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGatewayCS", ReplyAction = "http://tempuri.org/IService1/getGatewayCSResponse")]}string getGatewayCS(int SecureID, string CompanyID, string RepoID, string PW, string RetMsg, bool RC)
																							{
																								
																								[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getCustomerLogoTitle", ReplyAction = "http://tempuri.org/IService1/getCustomerLogoTitleResponse")]}string getCustomerLogoTitle()
																								{
																									
																									[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getAffinitydelay", ReplyAction = "http://tempuri.org/IService1/getAffinitydelayResponse")]}int getAffinitydelay()
																									{
																										
																										[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getClcURL", ReplyAction = "http://tempuri.org/IService1/getClcURLResponse")]}string getClcURL()
																										{
																											
																											[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getArchiverURL", ReplyAction = "http://tempuri.org/IService1/getArchiverURLResponse")]}string getArchiverURL()
																											{
																												
																												[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlStack", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlStackResponse")]}bool ExecuteSqlStack(ref int SecureID, System.Collections.Generic.Dictionary<int, string> SqlStack)
																												{
																													
																													[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getDefaultScreen", ReplyAction = "http://tempuri.org/IService1/getDefaultScreenResponse")]}string getDefaultScreen(int Secureid, string UserID)
																													{
																														
																														[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RecallUserSearch", ReplyAction = "http://tempuri.org/IService1/RecallUserSearchResponse")]}bool RecallUserSearch(int Secureid, string SearchName, string UID, string strSearches)
																														{
																															
																															[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SaveUserSearch", ReplyAction = "http://tempuri.org/IService1/SaveUserSearchResponse")]}bool SaveUserSearch(int Secureid, string SearchName, string UID, string strSearches)
																															{
																																
																																[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetFilesInZip", ReplyAction = "http://tempuri.org/IService1/GetFilesInZipResponse")]}SVCSearch.DS_ZipFiles[] GetFilesInZip(ref int SecureID, string ParentGuid, bool RC)
																																{
																																	
																																	[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/scheduleFileDownLoad", ReplyAction = "http://tempuri.org/IService1/scheduleFileDownLoadResponse")]}bool scheduleFileDownLoad(int Secureid, string ContentGuid, string UserID, string ContentType, int Preview, int Restore)
																																	{
																																		
																																		[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetContentMetaData", ReplyAction = "http://tempuri.org/IService1/GetContentMetaDataResponse")]}SVCSearch.DS_Metadata[] GetContentMetaData(int SecureID, string SourceGuid)
																																		{
																																			
																																			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/removeRestoreFileByGuid", ReplyAction = "http://tempuri.org/IService1/removeRestoreFileByGuidResponse")]}bool removeRestoreFileByGuid(int SecureID, string RowGuid)
																																			{
																																				
																																				[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/removeRestoreFiles", ReplyAction = "http://tempuri.org/IService1/removeRestoreFilesResponse")]}bool removeRestoreFiles(int SecureID, string UserID, string MachineID)
																																				{
																																					
																																					[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getRestoreFileCount", ReplyAction = "http://tempuri.org/IService1/getRestoreFileCountResponse")]}int getRestoreFileCount(int SecureID, string UserID, string MachineID, bool Preview)
																																					{
																																						
																																						[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveRestoreFile", ReplyAction = "http://tempuri.org/IService1/saveRestoreFileResponse")]}bool saveRestoreFile(int SecureID, string tgtTable, string ContentGuid, bool Preview, bool Restore, string UserID, string MachineID, bool RC, string RetMsg)
																																						{
																																							
																																							[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQL", ReplyAction = "http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQLResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_EMAIL)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_License)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CONTENT)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Attachments)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_SearchTerms)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSEARCHSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_USERSCREENSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_clsUSERGRIDSTATE)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_CoOwner)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VUserGrid)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgGroupUsers[])), System.ServiceModel.ServiceKnownTypeAttribute
																																							(typeof(SVCSearch.DS_DgGroupUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_dgGrpUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_LibItems)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_DgAssigned)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryStats)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ZipFiles)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_Metadata)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings01)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings02)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings03)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_ListOfStrings04)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCSearch.DS_VLibraryUsers)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[])), System.ServiceModel.ServiceKnownTypeAttribute
																																							(typeof(System.Collections.Generic.Dictionary<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, DateTime>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
																																							
																																							[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GenEmailGeneratedSQL", ReplyAction = "http://tempuri.org/IService1/GenEmailGeneratedSQLResponse")]}string GenEmailGeneratedSQL(SVCSearch.DS_SearchTerms[] SearchParms, int SecureID)
																																							{
																																								
																																								[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GenDocSearchSql", ReplyAction = "http://tempuri.org/IService1/GenDocSearchSqlResponse")]}string GenDocSearchSql(SVCSearch.DS_SearchTerms[] SearchParms, int SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted)
																																								{
																																									
																																									[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ChangeUserContentPublic", ReplyAction = "http://tempuri.org/IService1/ChangeUserContentPublicResponse")]}void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, bool RC, string RetMsg)
																																									{
																																										
																																										[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/Refactor", ReplyAction = "http://tempuri.org/IService1/RefactorResponse")]}void Refactor(int SecureID, string NewOwnerID, string OldOwnerID, bool RC, string RetMsg)
																																										{
																																											
																																											[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSAASState", ReplyAction = "http://tempuri.org/IService1/getSAASStateResponse")]}string getSAASState(int SecureID, string UserID, string DirName, string FullPath, string RetMsg, bool RC)
																																											{
																																												
																																												[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SetSAASState", ReplyAction = "http://tempuri.org/IService1/SetSAASStateResponse")]}bool SetSAASState(int SecureID, string UserID, string DirName, string FullPath)
																																												{
																																													
																																													[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings01", ReplyAction = "http://tempuri.org/IService1/getListOfStrings01Response")]}SVCSearch.DS_ListOfStrings01[] getListOfStrings01(int SecureID, string MySql, bool RC, string RetMsg)
																																													{
																																														
																																														[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings02", ReplyAction = "http://tempuri.org/IService1/getListOfStrings02Response")]}SVCSearch.DS_ListOfStrings02[] getListOfStrings02(int SecureID, string MySql, bool RC, string RetMsg)
																																														{
																																															
																																															[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings03", ReplyAction = "http://tempuri.org/IService1/getListOfStrings03Response")]}SVCSearch.DS_ListOfStrings03[] getListOfStrings03(int SecureID, string MySql, bool RC, string RetMsg)
																																															{
																																																
																																																[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getListOfStrings04", ReplyAction = "http://tempuri.org/IService1/getListOfStrings04Response")]}SVCSearch.DS_ListOfStrings04[] getListOfStrings04(int SecureID, string MySql, bool RC, string RetMsg)
																																																{
																																																	
																																																	[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateLibraryUsersGrid", ReplyAction = "http://tempuri.org/IService1/PopulateLibraryUsersGridResponse")]}SVCSearch.DS_VLibraryUsers[] PopulateLibraryUsersGrid(int SecureID, string LibraryName, bool ckLibUsersOnly)
																																																	{
																																																	}
																																																	
																																																	{
																																																	}
																																																	
																																																	{
																																																		
																																																		public Service1Client
																																																		{
																																																		}
																																																		
																																																		public Service1Client(string endpointConfigurationName) ;: base(endpointConfigurationName)
																																																		{
																																																		}
																																																		
																																																		public Service1Client(string endpointConfigurationName, string remoteAddress) ;: base(endpointConfigurationName, remoteAddress)
																																																		{
																																																		}
																																																		
																																																		public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) ;: base(endpointConfigurationName, remoteAddress)
																																																		{
																																																		}
																																																		
																																																		public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) ;: base(binding, remoteAddress)
																																																		{
																																																		}
																																																		
																																																		public SVCSearch.DS_EMAIL[] PopulateEmailGridWithWeights(ref int SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt)
																																																		{
																																																			return base.Channel.PopulateEmailGridWithWeights(SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, bNewRows, EmailRowCnt);
																																																		}
																																																		
																																																		public void LoadUserSearchHistory(ref int SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned)
																																																		{
																																																			base.Channel.LoadUserSearchHistory(SecureID, MaxNbrSearches, Uid, Screen, SearchHistoryArrayList, NbrReturned);
																																																		}
																																																		
																																																		public void getAttachmentWeights(ref int SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID)
																																																		{
																																																			base.Channel.getAttachmentWeights(SecureID, SL, UserID);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn1(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn1(SecureID, MySql);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn2(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn2(SecureID, MySql);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn3(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn3(SecureID, MySql);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn4(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn4(SecureID, MySql);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn5(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn5(SecureID, MySql);
																																																		}
																																																		
																																																		public bool ExecuteSqlNewConn(ref int SecureID, ref string MySql)
																																																		{
																																																			return base.Channel.ExecuteSqlNewConn(SecureID, MySql);
																																																		}
																																																		
																																																		public void GetParmValue(ref int SecureID, string UID, ref string[] Parms)
																																																		{
																																																			base.Channel.GetParmValue(SecureID, UID, Parms);
																																																		}
																																																		
																																																		public bool isGlobalSearcher(ref int SecureID, string Userid)
																																																		{
																																																			return base.Channel.isGlobalSearcher(SecureID, Userid);
																																																		}
																																																		
																																																		public bool isAdmin(ref int SecureID, string Userid)
																																																		{
																																																			return base.Channel.isAdmin(SecureID, Userid);
																																																		}
																																																		
																																																		public void getUserParm(ref int SecureID, ref string sVariable, string UserParm)
																																																		{
																																																			base.Channel.getUserParm(SecureID, sVariable, UserParm);
																																																		}
																																																		
																																																		public void RemoveUnwantedCharacters(ref int SecureID, ref string tgtString)
																																																		{
																																																			base.Channel.RemoveUnwantedCharacters(SecureID, tgtString);
																																																		}
																																																		
																																																		public string GetMachineIP(ref int SecureID)
																																																		{
																																																			return base.Channel.GetMachineIP(SecureID);
																																																		}
																																																		
																																																		public SVCSearch.DS_License[] getClientLicenses(ref int SecureID, string CompanyID, ref string ErrorMessage, ref bool RC)
																																																		{
																																																			return base.Channel.getClientLicenses(SecureID, CompanyID, ErrorMessage, RC);
																																																		}
																																																		
																																																		public int GetNbrMachineAll(ref int SecureID)
																																																		{
																																																			return base.Channel.GetNbrMachineAll(SecureID);
																																																		}
																																																		
																																																		public int GetNbrMachine(ref int SecureID, string MachineName)
																																																		{
																																																			return base.Channel.GetNbrMachine(SecureID, MachineName);
																																																		}
																																																		
																																																		public bool isLicenseLocatedOnAssignedMachine(ref int SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.isLicenseLocatedOnAssignedMachine(SecureID, ServerValText, InstanceValText, RC, RetMsg);
																																																		}
																																																		
																																																		public string GetXrt(ref int SecureID, bool RC, string RetMsg)
																																																		{
																																																			return base.Channel.GetXrt(SecureID, RC, RetMsg);
																																																		}
																																																		
																																																		public string getSqlServerVersion(ref int SecureID)
																																																		{
																																																			return base.Channel.getSqlServerVersion(SecureID);
																																																		}
																																																		
																																																		public void RecordGrowth(ref int SecureID, ref bool RC)
																																																		{
																																																			base.Channel.RecordGrowth(SecureID, RC);
																																																		}
																																																		
																																																		public string ParseLic(ref int SecureID, string LT, string tgtKey)
																																																		{
																																																			return base.Channel.ParseLic(SecureID, LT, tgtKey);
																																																		}
																																																		
																																																		public string GetLoggedinUserName(ref int SecureID)
																																																		{
																																																			return base.Channel.GetLoggedinUserName(SecureID);
																																																		}
																																																		
																																																		public double getDBSIZEMB(ref int SecureID)
																																																		{
																																																			return base.Channel.getDBSIZEMB(SecureID);
																																																		}
																																																		
																																																		public void resetMissingEmailIds(ref int SecureID, string CurrUserGuidID, ref bool RC)
																																																		{
																																																			base.Channel.resetMissingEmailIds(SecureID, CurrUserGuidID, RC);
																																																		}
																																																		
																																																		public void UserParmInsertUpdate(ref int SecureID, string ParmName, string UserID, string ParmVal, ref bool RC)
																																																		{
																																																			base.Channel.UserParmInsertUpdate(SecureID, ParmName, UserID, ParmVal, RC);
																																																		}
																																																		
																																																		public bool validateLogin(ref int SecureID, string UserLogin, string PW, ref string UserGuidID)
																																																		{
																																																			return base.Channel.validateLogin(SecureID, UserLogin, PW, UserGuidID);
																																																		}
																																																		
																																																		public string getLoggedInUser(ref int SecureID)
																																																		{
																																																			return base.Channel.getLoggedInUser(SecureID);
																																																		}
																																																		
																																																		public string getAttachedMachineName(ref int SecureID)
																																																		{
																																																			return base.Channel.getAttachedMachineName(SecureID);
																																																		}
																																																		
																																																		public string getServerInstanceName(ref int SecureID)
																																																		{
																																																			return base.Channel.getServerInstanceName(SecureID);
																																																		}
																																																		
																																																		public string getServerMachineName(ref int SecureID)
																																																		{
																																																			return base.Channel.getServerMachineName(SecureID);
																																																		}
																																																		
																																																		public void getSystemParm(ref int SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms)
																																																		{
																																																			base.Channel.getSystemParm(SecureID, SystemParms);
																																																		}
																																																		
																																																		public string getSynonyms(ref int SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms)
																																																		{
																																																			return base.Channel.getSynonyms(SecureID, ThesaurusID, Token, lbSynonyms);
																																																		}
																																																		
																																																		public string getThesaurusID(ref int SecureID, string ThesaurusName)
																																																		{
																																																			return base.Channel.getThesaurusID(SecureID, ThesaurusName);
																																																		}
																																																		
																																																		public int iCountContent(ref int SecureID, string S)
																																																		{
																																																			return base.Channel.iCountContent(SecureID, S);
																																																		}
																																																		
																																																		public string getDatasourceParm(ref int SecureID, string AttributeName, string SourceGuid)
																																																		{
																																																			return base.Channel.getDatasourceParm(SecureID, AttributeName, SourceGuid);
																																																		}
																																																		
																																																		public bool SaveRunParm(ref int SecureID, string UserID, ref string ParmID, ref string ParmVal)
																																																		{
																																																			return base.Channel.SaveRunParm(SecureID, UserID, ParmID, ParmVal);
																																																		}
																																																		
																																																		public int iGetRowCount(ref int SecureID, string TBL, string WhereClause)
																																																		{
																																																			return base.Channel.iGetRowCount(SecureID, TBL, WhereClause);
																																																		}
																																																		
																																																		public bool ZeroizeGlobalSearch(ref int SecureID)
																																																		{
																																																			return base.Channel.ZeroizeGlobalSearch(SecureID);
																																																		}
																																																		
																																																		public void updateIp(ref int SecureID, string HostName, string IP, int checkCode, ref bool RC)
																																																		{
																																																			base.Channel.updateIp(SecureID, HostName, IP, checkCode, RC);
																																																		}
																																																		
																																																		public SVCSearch.DS_CONTENT[] PopulateSourceGridWithWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt)
																																																		{
																																																			return base.Channel.PopulateSourceGridWithWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, bNewRows, SourceRowCnt);
																																																		}
																																																		
																																																		public SVCSearch.DS_CONTENT[] PopulateSourceGridNoWeights(ref int SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt)
																																																		{
																																																			return base.Channel.PopulateSourceGridNoWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, bNewRows, SourceRowCnt);
																																																		}
																																																		
																																																		public SVCSearch.DS_EMAIL[] PopulateEmailGridWithNoWeights(ref int SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt)
																																																		{
																																																			return base.Channel.PopulateEmailGridWithNoWeights(SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, bNewRows, EmailRowCnt);
																																																		}
																																																		
																																																		public SVCSearch.DS_Attachments[] GetEmailAttachments(ref int SecureID, string CurrEmailGuid)
																																																		{
																																																			return base.Channel.GetEmailAttachments(SecureID, CurrEmailGuid);
																																																		}
																																																		
																																																		public bool DbWriteToFile(ref int SecureID, string UID, string SourceGuid, ref string FileName)
																																																		{
																																																			return base.Channel.DbWriteToFile(SecureID, UID, SourceGuid, FileName);
																																																		}
																																																		
																																																		public void SetSessionVariable(ref int SecureID, string key, string KeyValue)
																																																		{
																																																			base.Channel.SetSessionVariable(SecureID, key, KeyValue);
																																																		}
																																																		
																																																		public object GetSessionVariable(ref int SecureID, string key)
																																																		{
																																																			return base.Channel.GetSessionVariable(SecureID, key);
																																																		}
																																																		
																																																		public bool UpdateSourceImageCompressed(ref int SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer)
																																																		{
																																																			return base.Channel.UpdateSourceImageCompressed(SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer);
																																																		}
																																																		
																																																		public void writeEmailFromDbToFile(ref int SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
																																																		{
																																																			base.Channel.writeEmailFromDbToFile(SecureID, EmailGuid, SourceTypeCode, CompressedDataBuffer, OriginalSize, CompressedSize, RC);
																																																		}
																																																		
																																																		public void writeAttachmentFromDbWriteToFile(ref int SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
																																																		{
																																																			base.Channel.writeAttachmentFromDbWriteToFile(SecureID, RowID, FQN, CompressedDataBuffer, OriginalSize, CompressedSize, RC);
																																																		}
																																																		
																																																		public void writeImageSourceDataFromDbWriteToFile(ref int SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC)
																																																		{
																																																			base.Channel.writeImageSourceDataFromDbWriteToFile(SecureID, SourceGuid, FQN, CompressedDataBuffer, OriginalSize, CompressedSize, RC);
																																																		}
																																																		
																																																		public void AddLibraryItems(ref int SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg)
																																																		{
																																																			base.Channel.AddLibraryItems(SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, RC, rMsg);
																																																		}
																																																		
																																																		public void PopulateGroupUserLibCombo(ref int SecureID, string UID, ref string[] cb)
																																																		{
																																																			base.Channel.PopulateGroupUserLibCombo(SecureID, UID, cb);
																																																		}
																																																		
																																																		public string GetLibOwnerByName(ref int SecureID, string LibraryName)
																																																		{
																																																			return base.Channel.GetLibOwnerByName(SecureID, LibraryName);
																																																		}
																																																		
																																																		public void ExecuteSearch(ref int SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref SVCSearch.DS_EMAIL[] ListOEmailRows, ref SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt)
																																																		{
																																																			base.Channel.ExecuteSearch(SecureID, currSearchCnt, bGenSql, EmailGenSql, SearchParms, ContentGenSql, ListOEmailRows, ListOfContentRows, bFirstEmailSearchSubmit, bFirstContentSearchSubmit, EmailRowCnt, ContentRowCnt);
																																																		}
																																																		
																																																		public SVCSearch.DS_USERSEARCHSTATE[] getSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
																																																		{
																																																			return base.Channel.getSearchState(SecureID, SearchID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName);
																																																		}
																																																		
																																																		public void saveSearchState(ref int SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
																																																		{
																																																			base.Channel.saveSearchState(SecureID, SearchID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName);
																																																		}
																																																		
																																																		public SVCSearch.DS_USERSCREENSTATE[] getScreenState(ref int SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
																																																		{
																																																			return base.Channel.getScreenState(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName);
																																																		}
																																																		
																																																		public SVCSearch.DS_clsUSERGRIDSTATE[] getGridLayout(ref int SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
																																																		{
																																																			return base.Channel.getGridLayout(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName);
																																																		}
																																																		
																																																		public void saveGridLayout(ref int SecureID, ref string UserID, ref string ScreenName, ref string GridName, ref string ColName, ref int ColOrder, ref int ColWidth, ref bool ColVisible, ref bool ColReadOnly, ref int ColSortOrder, ref bool ColSortAsc, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref int RowNbr, ref bool RC, ref string rMsg)
																																																		{
																																																			base.Channel.saveGridLayout(SecureID, UserID, ScreenName, GridName, ColName, ColOrder, ColWidth, ColVisible, ColReadOnly, ColSortOrder, ColSortAsc, HiveConnectionName, HiveActive, RepoSvrName, RowCreationDate, RowLastModDate, RowNbr, RC, rMsg);
																																																		}
																																																		
																																																		public void saveScreenState(ref int SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName)
																																																		{
																																																			base.Channel.saveScreenState(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName);
																																																		}
																																																		
																																																		public void getUserParms(ref int SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms)
																																																		{
																																																			base.Channel.getUserParms(SecureID, UserID, UserParms);
																																																		}
																																																		
																																																		public void ParseLicDictionary(ref int SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D)
																																																		{
																																																			base.Channel.ParseLicDictionary(SecureID, S, D);
																																																		}
																																																		
																																																		public string LicenseType(int SecureID, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.LicenseType(SecureID, RC, RetMsg);
																																																		}
																																																		
																																																		public int GetNbrUsers(ref int SecureID)
																																																		{
																																																			return base.Channel.GetNbrUsers(SecureID);
																																																		}
																																																		
																																																		public bool isLease(int SecureID, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.isLease(SecureID, RC, RetMsg);
																																																		}
																																																		
																																																		public int getMaxClients(int SecureID, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getMaxClients(SecureID, RC, RetMsg);
																																																		}
																																																		
																																																		public string GetUserHostName(ref int SecureID)
																																																		{
																																																			return base.Channel.GetUserHostName(SecureID);
																																																		}
																																																		
																																																		public string GetUserHostAddress(ref int SecureID)
																																																		{
																																																			return base.Channel.GetUserHostAddress(SecureID);
																																																		}
																																																		
																																																		public string getUserGuidID(ref int SecureID, string UserLoginId)
																																																		{
																																																			return base.Channel.getUserGuidID(SecureID, UserLoginId);
																																																		}
																																																		
																																																		public System.Collections.Generic.Dictionary<string, DateTime> ProcessDates(ref int SecureID)
																																																		{
																																																			return base.Channel.ProcessDates(SecureID);
																																																		}
																																																		
																																																		public bool getListOfStrings1(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings1(SecureID, ListOfItems, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public bool getListOfStrings2(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings2(SecureID, ListOfItems, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public bool getListOfStrings3(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings3(SecureID, ListOfItems, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public bool getListOfStrings4(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings4(SecureID, ListOfItems, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public int iCount(ref int SecureID, string S)
																																																		{
																																																			return base.Channel.iCount(SecureID, S);
																																																		}
																																																		
																																																		public void GetLogPath(ref string tPath)
																																																		{
																																																			base.Channel.GetLogPath(tPath);
																																																		}
																																																		
																																																		public string ActiveSessionGetVal(ref int SecureID, ref System.Guid SessionGuid, ref string ParmName)
																																																		{
																																																			return base.Channel.ActiveSessionGetVal(SecureID, SessionGuid, ParmName);
																																																		}
																																																		
																																																		public bool ActiveSession(ref int SecureID, System.Guid SessionGuid, string ParmName, string ParmValue)
																																																		{
																																																			return base.Channel.ActiveSession(SecureID, SessionGuid, ParmName, ParmValue);
																																																		}
																																																		
																																																		public void setSecureLoginParms(ref int SecureID, string sCompanyID, string sRepoID, ref bool RC)
																																																		{
																																																			base.Channel.setSecureLoginParms(SecureID, sCompanyID, sRepoID, RC);
																																																		}
																																																		
																																																		public bool validateAttachSecureLogin(ref int SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.validateAttachSecureLogin(SecureID, CompanyID, RepoID, UserLogin, PW, RC, RetMsg);
																																																		}
																																																		
																																																		public void PopulateSecureLoginCB_V2(ref int SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.PopulateSecureLoginCB_V2(SecureID, AllRepos, CompanyID, RC, RetMsg);
																																																		}
																																																		
																																																		public void PopulateSecureLoginCB(ref int SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.PopulateSecureLoginCB(SecureID, CB, CompanyID, RC, RetMsg);
																																																		}
																																																		
																																																		public object getLoginPW(ref int SecureID)
																																																		{
																																																			return base.Channel.getLoginPW(SecureID);
																																																		}
																																																		
																																																		public void setLoginPW(ref int SecureID, string RepoID)
																																																		{
																																																			base.Channel.setLoginPW(SecureID, RepoID);
																																																		}
																																																		
																																																		public object getSessionEncCs(ref int SecureID)
																																																		{
																																																			return base.Channel.getSessionEncCs(SecureID);
																																																		}
																																																		
																																																		public void setSessionEncCs(ref int SecureID, string MySessionID)
																																																		{
																																																			base.Channel.setSessionEncCs(SecureID, MySessionID);
																																																		}
																																																		
																																																		public void setSessionRepoID(ref int SecureID, string RepoID)
																																																		{
																																																			base.Channel.setSessionRepoID(SecureID, RepoID);
																																																		}
																																																		
																																																		public object getSessionRepoID(ref int SecureID)
																																																		{
																																																			return base.Channel.getSessionRepoID(SecureID);
																																																		}
																																																		
																																																		public void setSessionCompanyID(ref int SecureID, string CompanyID, ref bool RC)
																																																		{
																																																			base.Channel.setSessionCompanyID(SecureID, CompanyID, RC);
																																																		}
																																																		
																																																		public object getSessionCompanyID(ref int SecureID)
																																																		{
																																																			return base.Channel.getSessionCompanyID(SecureID);
																																																		}
																																																		
																																																		public void setLoginGuid(ref int SecureID, string MyLoginGuid)
																																																		{
																																																			base.Channel.setLoginGuid(SecureID, MyLoginGuid);
																																																		}
																																																		
																																																		public object getLoginGuid(ref int SecureID)
																																																		{
																																																			return base.Channel.getLoginGuid(SecureID);
																																																		}
																																																		
																																																		public object getSessionID(ref int SecureID)
																																																		{
																																																			return base.Channel.getSessionID(SecureID);
																																																		}
																																																		
																																																		public void setSessionID(ref int SecureID, string MySessionID)
																																																		{
																																																			base.Channel.setSessionID(SecureID, MySessionID);
																																																		}
																																																		
																																																		public string ExpandInflectionTerms(ref int SecureID, string S)
																																																		{
																																																			return base.Channel.ExpandInflectionTerms(SecureID, S);
																																																		}
																																																		
																																																		public string getServerDatabaseName(ref int SecureID)
																																																		{
																																																			return base.Channel.getServerDatabaseName(SecureID);
																																																		}
																																																		
																																																		public void CleanLog(ref int SecureID)
																																																		{
																																																			base.Channel.CleanLog(SecureID);
																																																		}
																																																		
																																																		public void PopulateComboBox(ref int SecureID, ref string[] CB, string TblColName, string S)
																																																		{
																																																			base.Channel.PopulateComboBox(SecureID, CB, TblColName, S);
																																																		}
																																																		
																																																		public string getUserAuth(ref int SecureID, string Userid)
																																																		{
																																																			return base.Channel.getUserAuth(SecureID, Userid);
																																																		}
																																																		
																																																		public bool DeleteUser(ref int SecureID, string SelectedUserGuid, ref string RetMsg)
																																																		{
																																																			return base.Channel.DeleteUser(SecureID, SelectedUserGuid, RetMsg);
																																																		}
																																																		
																																																		public bool SaveUSer(int SecureID, ref string UserID, ref string UserName, ref string EmailAddress, ref string UserPassword, ref string Admin, ref string isActive, ref string UserLoginID, ref bool ClientOnly, ref string HiveConnectionName, ref bool HiveActive, ref string RepoSvrName, ref DateTime RowCreationDate, ref DateTime RowLastModDate, ref string ActiveGuid, ref string RepoName, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.SaveUSer(SecureID, UserID, UserName, EmailAddress, UserPassword, Admin, isActive, UserLoginID, ClientOnly, HiveConnectionName, HiveActive, RepoSvrName, RowCreationDate, RowLastModDate, ActiveGuid, RepoName, RC, RetMsg);
																																																		}
																																																		
																																																		public bool saveSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.saveSearchSchedule(SecureID, SearchName, NotificationSMS, SearchDesc, OwnerID, SearchQuery, SendToEmail, ScheduleUnit, ScheduleHour, ScheduleDaysOfWeek, ScheduleDaysOfMonth, ScheduleMonthOfQtr, StartToRunDate, EndRunDate, SearchParameters, LastRunDate, NumberOfExecutions, CreateDate, LastModDate, ScheduleHourInterval, RepoName, RC, RetMsg);
																																																		}
																																																		
																																																		public bool getSearchSchedule(int SecureID, ref string SearchName, ref string NotificationSMS, ref string SearchDesc, ref string OwnerID, ref string SearchQuery, ref string SendToEmail, ref string ScheduleUnit, ref string ScheduleHour, ref string ScheduleDaysOfWeek, ref string ScheduleDaysOfMonth, ref string ScheduleMonthOfQtr, ref DateTime StartToRunDate, ref DateTime EndRunDate, ref string SearchParameters, ref DateTime LastRunDate, ref int NumberOfExecutions, ref DateTime CreateDate, ref DateTime LastModDate, ref int ScheduleHourInterval, ref string RepoName, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getSearchSchedule(SecureID, SearchName, NotificationSMS, SearchDesc, OwnerID, SearchQuery, SendToEmail, ScheduleUnit, ScheduleHour, ScheduleDaysOfWeek, ScheduleDaysOfMonth, ScheduleMonthOfQtr, StartToRunDate, EndRunDate, SearchParameters, LastRunDate, NumberOfExecutions, CreateDate, LastModDate, ScheduleHourInterval, RepoName, RC, RetMsg);
																																																		}
																																																		
																																																		public bool InsertCoOwner(int SecureID, string CurrentOwner, string CoOwner)
																																																		{
																																																			return base.Channel.InsertCoOwner(SecureID, CurrentOwner, CoOwner);
																																																		}
																																																		
																																																		public SVCSearch.DS_CoOwner[] PopulateCoOwnerGrid(int SecureID, string UID)
																																																		{
																																																			return base.Channel.PopulateCoOwnerGrid(SecureID, UID);
																																																		}
																																																		
																																																		public SVCSearch.DS_VUserGrid[] PopulateUserGrid(ref int SecureID, string UserID, bool isAdmin)
																																																		{
																																																			return base.Channel.PopulateUserGrid(SecureID, UserID, isAdmin);
																																																		}
																																																		
																																																		public void getGroupUsers(ref int SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.getGroupUsers(SecureID, GroupName, GroupList, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_DgGroupUsers[] PopulateDgGroupUsers(ref int SecureID, string OwnerUserGuidID, string GroupName)
																																																		{
																																																			return base.Channel.PopulateDgGroupUsers(SecureID, OwnerUserGuidID, GroupName);
																																																		}
																																																		
																																																		public bool DeleteGroupUsers(string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg)
																																																		{
																																																			return base.Channel.DeleteGroupUsers(CurrSelectedGroupName, GroupOwnerGuid, UserID, iDeleted, RetMsg);
																																																		}
																																																		
																																																		public string getGroupOwnerGuidByGroupName(ref int SecureID, string GroupName)
																																																		{
																																																			return base.Channel.getGroupOwnerGuidByGroupName(SecureID, GroupName);
																																																		}
																																																		
																																																		public void AddLibraryGroupUser(ref int SecureID, string GroupName, ref bool RC)
																																																		{
																																																			base.Channel.AddLibraryGroupUser(SecureID, GroupName, RC);
																																																		}
																																																		
																																																		public SVCSearch.DS_dgGrpUsers[] PopulateGroupUserGrid(ref int SecureID, string GroupName)
																																																		{
																																																			return base.Channel.PopulateGroupUserGrid(SecureID, GroupName);
																																																		}
																																																		
																																																		public SVCSearch.DS_LibItems[] PopulateLibItemsGrid(ref int SecureID, string LibraryName, string UserID)
																																																		{
																																																			return base.Channel.PopulateLibItemsGrid(SecureID, LibraryName, UserID);
																																																		}
																																																		
																																																		public SVCSearch.DS_DgAssigned[] PopulateDgAssigned(ref int SecureID, string LibraryName, string UserID)
																																																		{
																																																			return base.Channel.PopulateDgAssigned(SecureID, LibraryName, UserID);
																																																		}
																																																		
																																																		public void ResetLibraryUsersCount(ref int SecureID, ref bool RC)
																																																		{
																																																			base.Channel.ResetLibraryUsersCount(SecureID, RC);
																																																		}
																																																		
																																																		public void DeleteLibraryGroupUser(ref int SecureID, string GroupName, string LibraryName, ref bool RC)
																																																		{
																																																			base.Channel.DeleteLibraryGroupUser(SecureID, GroupName, LibraryName, RC);
																																																		}
																																																		
																																																		public bool ChangeUserPassword(ref int SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2)
																																																		{
																																																			return base.Channel.ChangeUserPassword(SecureID, UserLogin, OldPW, NewPw1, NewPw2);
																																																		}
																																																		
																																																		public void SaveClickStats(int IID, string UserID, ref bool RC)
																																																		{
																																																			base.Channel.SaveClickStats(IID, UserID, RC);
																																																		}
																																																		
																																																		public void cleanUpLibraryItems(ref int SecureID, string UserID)
																																																		{
																																																			base.Channel.cleanUpLibraryItems(SecureID, UserID);
																																																		}
																																																		
																																																		public void RemoveLibraryDirectories(ref int SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.RemoveLibraryDirectories(SecureID, UserID, DirectoryName, LibraryName, RC, RetMsg);
																																																		}
																																																		
																																																		public void RemoveLibraryEmails(ref int SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.RemoveLibraryEmails(SecureID, FolderName, LibraryName, UserID, RC, RetMsg);
																																																		}
																																																		
																																																		public void AddSysMsg(ref int SecureID, string UserID, string tMsg, bool RC)
																																																		{
																																																			base.Channel.AddSysMsg(SecureID, UserID, tMsg, RC);
																																																		}
																																																		
																																																		public void AddLibraryDirectory(ref int SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.AddLibraryDirectory(SecureID, FolderName, LibraryName, UserID, RecordsAdded, RC, RetMsg);
																																																		}
																																																		
																																																		public void AddLibraryEmail(ref int SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg)
																																																		{
																																																			base.Channel.AddLibraryEmail(SecureID, EmailFolder, LibraryName, UserID, RecordsAdded, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_VLibraryStats[] PopulateLibraryGrid(ref int SecureID, string UserID)
																																																		{
																																																			return base.Channel.PopulateLibraryGrid(SecureID, UserID);
																																																		}
																																																		
																																																		public bool getListOfStrings(ref int SecureID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings(SecureID, ListOfItems, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public string getGatewayCS(int SecureID, string CompanyID, string RepoID, string PW, ref string RetMsg, ref bool RC)
																																																		{
																																																			return base.Channel.getGatewayCS(SecureID, CompanyID, RepoID, PW, RetMsg, RC);
																																																		}
																																																		
																																																		public string getCustomerLogoTitle()
																																																		{
																																																			return base.Channel.getCustomerLogoTitle;
																																																		}
																																																		
																																																		public int getAffinitydelay()
																																																		{
																																																			return base.Channel.getAffinitydelay;
																																																		}
																																																		
																																																		public string getClcURL()
																																																		{
																																																			return base.Channel.getClcURL;
																																																		}
																																																		
																																																		public string getArchiverURL()
																																																		{
																																																			return base.Channel.getArchiverURL;
																																																		}
																																																		
																																																		public bool ExecuteSqlStack(ref int SecureID, ref System.Collections.Generic.Dictionary<int, string> SqlStack)
																																																		{
																																																			return base.Channel.ExecuteSqlStack(SecureID, SqlStack);
																																																		}
																																																		
																																																		public string getDefaultScreen(int Secureid, string UserID)
																																																		{
																																																			return base.Channel.getDefaultScreen(Secureid, UserID);
																																																		}
																																																		
																																																		public bool RecallUserSearch(int Secureid, string SearchName, string UID, ref string strSearches)
																																																		{
																																																			return base.Channel.RecallUserSearch(Secureid, SearchName, UID, strSearches);
																																																		}
																																																		
																																																		public bool SaveUserSearch(int Secureid, string SearchName, string UID, string strSearches)
																																																		{
																																																			return base.Channel.SaveUserSearch(Secureid, SearchName, UID, strSearches);
																																																		}
																																																		
																																																		public SVCSearch.DS_ZipFiles[] GetFilesInZip(ref int SecureID, string ParentGuid, ref bool RC)
																																																		{
																																																			return base.Channel.GetFilesInZip(SecureID, ParentGuid, RC);
																																																		}
																																																		
																																																		public bool scheduleFileDownLoad(int Secureid, string ContentGuid, string UserID, string ContentType, int Preview, int Restore)
																																																		{
																																																			return base.Channel.scheduleFileDownLoad(Secureid, ContentGuid, UserID, ContentType, Preview, Restore);
																																																		}
																																																		
																																																		public SVCSearch.DS_Metadata[] GetContentMetaData(int SecureID, string SourceGuid)
																																																		{
																																																			return base.Channel.GetContentMetaData(SecureID, SourceGuid);
																																																		}
																																																		
																																																		public bool removeRestoreFileByGuid(int SecureID, string RowGuid)
																																																		{
																																																			return base.Channel.removeRestoreFileByGuid(SecureID, RowGuid);
																																																		}
																																																		
																																																		public bool removeRestoreFiles(int SecureID, ref string UserID, ref string MachineID)
																																																		{
																																																			return base.Channel.removeRestoreFiles(SecureID, UserID, MachineID);
																																																		}
																																																		
																																																		public int getRestoreFileCount(int SecureID, ref string UserID, ref string MachineID, ref bool Preview)
																																																		{
																																																			return base.Channel.getRestoreFileCount(SecureID, UserID, MachineID, Preview);
																																																		}
																																																		
																																																		public bool saveRestoreFile(int SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg)
																																																		{
																																																			return base.Channel.saveRestoreFile(SecureID, tgtTable, ContentGuid, Preview, Restore, UserID, MachineID, RC, RetMsg);
																																																		}
																																																		
																																																		public string GenEmailAttachmentsGeneratedSQL(string UserID, SVCSearch.DS_SearchTerms[] SearchParms, ref int SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy)
																																																		{
																																																			return base.Channel.GenEmailAttachmentsGeneratedSQL(UserID, SearchParms, SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy);
																																																		}
																																																		
																																																		public string GenEmailGeneratedSQL(SVCSearch.DS_SearchTerms[] SearchParms, ref int SecureID)
																																																		{
																																																			return base.Channel.GenEmailGeneratedSQL(SearchParms, SecureID);
																																																		}
																																																		
																																																		public string GenDocSearchSql(SVCSearch.DS_SearchTerms[] SearchParms, ref int SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted)
																																																		{
																																																			return base.Channel.GenDocSearchSql(SearchParms, SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted);
																																																		}
																																																		
																																																		public void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.ChangeUserContentPublic(ServiceID, CurrSelectedUserGuid, isPublic, RC, RetMsg);
																																																		}
																																																		
																																																		public void Refactor(int SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg)
																																																		{
																																																			base.Channel.Refactor(SecureID, NewOwnerID, OldOwnerID, RC, RetMsg);
																																																		}
																																																		
																																																		public string getSAASState(int SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC)
																																																		{
																																																			return base.Channel.getSAASState(SecureID, UserID, DirName, FullPath, RetMsg, RC);
																																																		}
																																																		
																																																		public bool SetSAASState(int SecureID, string UserID, string DirName, string FullPath)
																																																		{
																																																			return base.Channel.SetSAASState(SecureID, UserID, DirName, FullPath);
																																																		}
																																																		
																																																		public SVCSearch.DS_ListOfStrings01[] getListOfStrings01(ref int SecureID, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings01(SecureID, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_ListOfStrings02[] getListOfStrings02(ref int SecureID, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings02(SecureID, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_ListOfStrings03[] getListOfStrings03(ref int SecureID, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings03(SecureID, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_ListOfStrings04[] getListOfStrings04(ref int SecureID, string MySql, ref bool RC, ref string RetMsg)
																																																		{
																																																			return base.Channel.getListOfStrings04(SecureID, MySql, RC, RetMsg);
																																																		}
																																																		
																																																		public SVCSearch.DS_VLibraryUsers[] PopulateLibraryUsersGrid(ref int SecureID, string LibraryName, bool ckLibUsersOnly)
																																																		{
																																																			return base.Channel.PopulateLibraryUsersGrid(SecureID, LibraryName, ckLibUsersOnly);
																																																		}
																																																	}
																																																}
																																																
																																															}}
