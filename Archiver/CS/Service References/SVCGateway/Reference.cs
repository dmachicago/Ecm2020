// VBConversions Note: VB project level imports
using System.Collections.Generic;
using System;
using System.Drawing;
using System.Linq;
using System.Diagnostics;
using System.Data;
using Microsoft.VisualBasic;
using MODI;
using System.Xml.Linq;
using System.Collections;
using System.Windows.Forms;
// End of VB project level imports

using System.Runtime.Serialization;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace EcmArchiveClcSetup
{
	namespace SVCGateway
	{
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_SecureAttach", Namespace = "http://schemas.datacontract.org/2004/07/EcmSecureAttachWCF2"), System.SerializableAttribute()]public partial class DS_SecureAttach : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CSField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string CompanyIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool DisabledField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string EncPWField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RepoIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CS
			{
				get
				{
					return this.CSField;
				}
				set
				{
					if (object.ReferenceEquals(this.CSField, value) != true)
					{
						this.CSField = value;
						this.RaisePropertyChanged("CS");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string CompanyID
			{
				get
				{
					return this.CompanyIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.CompanyIDField, value) != true)
					{
						this.CompanyIDField = value;
						this.RaisePropertyChanged("CompanyID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool Disabled
			{
				get
				{
					return this.DisabledField;
				}
				set
				{
					if (this.DisabledField.Equals(value) != true)
					{
						this.DisabledField = value;
						this.RaisePropertyChanged("Disabled");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string EncPW
			{
				get
				{
					return this.EncPWField;
				}
				set
				{
					if (object.ReferenceEquals(this.EncPWField, value) != true)
					{
						this.EncPWField = value;
						this.RaisePropertyChanged("EncPW");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RepoID
			{
				get
				{
					return this.RepoIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.RepoIDField, value) != true)
					{
						this.RepoIDField = value;
						this.RaisePropertyChanged("RepoID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "CompositeType", Namespace = "http://schemas.datacontract.org/2004/07/EcmSecureAttachWCF2"), System.SerializableAttribute()]public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool BoolValueField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string StringValueField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool BoolValue
			{
				get
				{
					return this.BoolValueField;
				}
				set
				{
					if (this.BoolValueField.Equals(value) != true)
					{
						this.BoolValueField = value;
						this.RaisePropertyChanged("BoolValue");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string StringValue
			{
				get
				{
					return this.StringValueField;
				}
				set
				{
					if (object.ReferenceEquals(this.StringValueField, value) != true)
					{
						this.StringValueField = value;
						this.RaisePropertyChanged("StringValue");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName = "SVCGateway.IService1")]public interface IService1
		{
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetCS", ReplyAction = "http://tempuri.org/IService1/GetCSResponse")]string GetCS(int ID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getConnection", ReplyAction = "http://tempuri.org/IService1/getConnectionResponse")]string getConnection(string CompanyID, string RepoID, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ValidateUserLogin", ReplyAction = "http://tempuri.org/IService1/ValidateUserLoginResponse")]bool ValidateUserLogin(string UID, string EncPW);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ValidateGatewayLogin", ReplyAction = "http://tempuri.org/IService1/ValidateGatewayLoginResponse")]bool ValidateGatewayLogin(string CompanyID, string RepoID, string EncPW, ref bool RC, ref string RtnMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getSecureKey", ReplyAction = "http://tempuri.org/IService1/getSecureKeyResponse")]string getSecureKey(string CompanyID, string RepoID, string LoginPassword, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateCombo", ReplyAction = "http://tempuri.org/IService1/PopulateComboResponse")]string PopulateCombo(string CS, string CompanyID, ref bool RC, ref string RetTxt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateCompanyComboSecure", ReplyAction = "http://tempuri.org/IService1/PopulateCompanyComboSecureResponse")]string PopulateCompanyComboSecure(string CS, string CompanyID, string EncryptedPW, ref bool RC, ref string RetTxt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateRepoCombo", ReplyAction = "http://tempuri.org/IService1/PopulateRepoComboResponse")]string PopulateRepoCombo(string CS, string CompanyID, ref bool RC, ref string RetTxt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateRepoSecure", ReplyAction = "http://tempuri.org/IService1/PopulateRepoSecureResponse")]string PopulateRepoSecure(string CS, string CompanyID, string EncryptedPW, ref bool RC, ref string RetTxt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/DeleteExistingConnection", ReplyAction = "http://tempuri.org/IService1/DeleteExistingConnectionResponse")]bool DeleteExistingConnection(string ConnStr, string CompanyID, string EncPW, string RepoID, string CS, bool Disabled, ref bool RC, ref string RtnMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PopulateGrid", ReplyAction = "http://tempuri.org/IService1/PopulateGridResponse")]SVCGateway.DS_SecureAttach[] PopulateGrid(string CS, string CompanyID, string EncPW, ref bool RC, ref string RetTxt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/saveConnection", ReplyAction = "http://tempuri.org/IService1/saveConnectionResponse")]bool saveConnection(string ConnStr, string CompanyID, string EncPW, string RepoID, string CS, bool Disabled, bool isThesaurus, ref bool RC, ref string RtnMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/AttachToSecureLoginDB", ReplyAction = "http://tempuri.org/IService1/AttachToSecureLoginDBResponse")]bool AttachToSecureLoginDB(string ConnStr, ref bool RC, ref string RtnMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetData", ReplyAction = "http://tempuri.org/IService1/GetDataResponse")]string GetData(int value);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction = "http://tempuri.org/IService1/GetDataUsingDataContractResponse")]SVCGateway.CompositeType GetDataUsingDataContract(SVCGateway.CompositeType composite);
		}
		
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public interface IService1Channel : SVCGateway.IService1,System.ServiceModel.IClientChannel
		{
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public partial class Service1Client : System.ServiceModel.ClientBase<SVCGateway.IService1>, SVCGateway.IService1
		{
			
			public Service1Client()
			{
			}
			
			public Service1Client(string endpointConfigurationName) : base(endpointConfigurationName)
			{
			}
			
			public Service1Client(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}
			
			public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}
			
			public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
			{
			}
			
			public string GetCS(int ID)
			{
				return base.Channel.GetCS(ID);
			}
			
			public string getConnection(string CompanyID, string RepoID, ref bool RC, ref string RetMsg)
			{
				return base.Channel.getConnection(CompanyID, RepoID, RC, RetMsg);
			}
			
			public bool ValidateUserLogin(string UID, string EncPW)
			{
				return base.Channel.ValidateUserLogin(UID, EncPW);
			}
			
			public bool ValidateGatewayLogin(string CompanyID, string RepoID, string EncPW, ref bool RC, ref string RtnMsg)
			{
				return base.Channel.ValidateGatewayLogin(CompanyID, RepoID, EncPW, RC, RtnMsg);
			}
			
			public string getSecureKey(string CompanyID, string RepoID, string LoginPassword, ref bool RC, ref string RetMsg)
			{
				return base.Channel.getSecureKey(CompanyID, RepoID, LoginPassword, RC, RetMsg);
			}
			
			public string PopulateCombo(string CS, string CompanyID, ref bool RC, ref string RetTxt)
			{
				return base.Channel.PopulateCombo(CS, CompanyID, RC, RetTxt);
			}
			
			public string PopulateCompanyComboSecure(string CS, string CompanyID, string EncryptedPW, ref bool RC, ref string RetTxt)
			{
				return base.Channel.PopulateCompanyComboSecure(CS, CompanyID, EncryptedPW, RC, RetTxt);
			}
			
			public string PopulateRepoCombo(string CS, string CompanyID, ref bool RC, ref string RetTxt)
			{
				return base.Channel.PopulateRepoCombo(CS, CompanyID, RC, RetTxt);
			}
			
			public string PopulateRepoSecure(string CS, string CompanyID, string EncryptedPW, ref bool RC, ref string RetTxt)
			{
				return base.Channel.PopulateRepoSecure(CS, CompanyID, EncryptedPW, RC, RetTxt);
			}
			
			public bool DeleteExistingConnection(string ConnStr, string CompanyID, string EncPW, string RepoID, string CS, bool Disabled, ref bool RC, ref string RtnMsg)
			{
				return base.Channel.DeleteExistingConnection(ConnStr, CompanyID, EncPW, RepoID, CS, Disabled, RC, RtnMsg);
			}
			
			public SVCGateway.DS_SecureAttach[] PopulateGrid(string CS, string CompanyID, string EncPW, ref bool RC, ref string RetTxt)
			{
				return base.Channel.PopulateGrid(CS, CompanyID, EncPW, RC, RetTxt);
			}
			
			public bool saveConnection(string ConnStr, string CompanyID, string EncPW, string RepoID, string CS, bool Disabled, bool isThesaurus, ref bool RC, ref string RtnMsg)
			{
				return base.Channel.saveConnection(ConnStr, CompanyID, EncPW, RepoID, CS, Disabled, isThesaurus, RC, RtnMsg);
			}
			
			public bool AttachToSecureLoginDB(string ConnStr, ref bool RC, ref string RtnMsg)
			{
				return base.Channel.AttachToSecureLoginDB(ConnStr, RC, RtnMsg);
			}
			
			public string GetData(int value)
			{
				return base.Channel.GetData(value);
			}
			
			public SVCGateway.CompositeType GetDataUsingDataContract(SVCGateway.CompositeType composite)
			{
				return base.Channel.GetDataUsingDataContract(composite);
			}
		}
	}
	
}
