// VBConversions Note: VB project level imports
using System.Collections.Generic;
using System;
using System.Drawing;
using System.Linq;
using System.Diagnostics;
using System.Data;
using Microsoft.VisualBasic;
using MODI;
using System.Xml.Linq;
using System.Collections;
using System.Windows.Forms;
// End of VB project level imports

using System.Runtime.Serialization;

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.269
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace EcmArchiveClcSetup
{
	namespace SVCCLCArchive
	{
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "CompositeType", Namespace = "http://schemas.datacontract.org/2004/07/EcmClcArchiveWCF"), System.SerializableAttribute()]public partial class CompositeType : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private bool BoolValueField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string StringValueField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public bool BoolValue
			{
				get
				{
					return this.BoolValueField;
				}
				set
				{
					if (this.BoolValueField.Equals(value) != true)
					{
						this.BoolValueField = value;
						this.RaisePropertyChanged("BoolValue");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string StringValue
			{
				get
				{
					return this.StringValueField;
				}
				set
				{
					if (object.ReferenceEquals(this.StringValueField, value) != true)
					{
						this.StringValueField = value;
						this.RaisePropertyChanged("StringValue");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_WebSite", Namespace = "http://schemas.datacontract.org/2004/07/EcmClcArchiveWCF"), System.SerializableAttribute()]public partial class DS_WebSite : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string WebSiteField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string WebUrlField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int depthField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private int widthField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string WebSite
			{
				get
				{
					return this.WebSiteField;
				}
				set
				{
					if (object.ReferenceEquals(this.WebSiteField, value) != true)
					{
						this.WebSiteField = value;
						this.RaisePropertyChanged("WebSite");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string WebUrl
			{
				get
				{
					return this.WebUrlField;
				}
				set
				{
					if (object.ReferenceEquals(this.WebUrlField, value) != true)
					{
						this.WebUrlField = value;
						this.RaisePropertyChanged("WebUrl");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int depth
			{
				get
				{
					return this.depthField;
				}
				set
				{
					if (this.depthField.Equals(value) != true)
					{
						this.depthField = value;
						this.RaisePropertyChanged("depth");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public int width
			{
				get
				{
					return this.widthField;
				}
				set
				{
					if (this.widthField.Equals(value) != true)
					{
						this.widthField = value;
						this.RaisePropertyChanged("width");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_WebScreen", Namespace = "http://schemas.datacontract.org/2004/07/EcmClcArchiveWCF"), System.SerializableAttribute()]public partial class DS_WebScreen : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string WebScreenField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string WebUrlField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string WebScreen
			{
				get
				{
					return this.WebScreenField;
				}
				set
				{
					if (object.ReferenceEquals(this.WebScreenField, value) != true)
					{
						this.WebScreenField = value;
						this.RaisePropertyChanged("WebScreen");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string WebUrl
			{
				get
				{
					return this.WebUrlField;
				}
				set
				{
					if (object.ReferenceEquals(this.WebUrlField, value) != true)
					{
						this.WebUrlField = value;
						this.RaisePropertyChanged("WebUrl");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0"), System.Runtime.Serialization.DataContractAttribute(Name = "DS_RssPull", Namespace = "http://schemas.datacontract.org/2004/07/EcmClcArchiveWCF"), System.SerializableAttribute()]public partial class DS_RssPull : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged
		{
			
			[System.NonSerializedAttribute()]private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RssNameField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string RssUrlField;
			
			[System.Runtime.Serialization.OptionalFieldAttribute()]private string UserIDField;
			
			[global::System.ComponentModel.BrowsableAttribute(false)]public System.Runtime.Serialization.ExtensionDataObject ExtensionData
			{
				get
				{
					return this.extensionDataField;
				}
				set
				{
					this.extensionDataField = value;
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RssName
			{
				get
				{
					return this.RssNameField;
				}
				set
				{
					if (object.ReferenceEquals(this.RssNameField, value) != true)
					{
						this.RssNameField = value;
						this.RaisePropertyChanged("RssName");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string RssUrl
			{
				get
				{
					return this.RssUrlField;
				}
				set
				{
					if (object.ReferenceEquals(this.RssUrlField, value) != true)
					{
						this.RssUrlField = value;
						this.RaisePropertyChanged("RssUrl");
					}
				}
			}
			
			[System.Runtime.Serialization.DataMemberAttribute()]public string UserID
			{
				get
				{
					return this.UserIDField;
				}
				set
				{
					if (object.ReferenceEquals(this.UserIDField, value) != true)
					{
						this.UserIDField = value;
						this.RaisePropertyChanged("UserID");
					}
				}
			}
			
			private System.ComponentModel.PropertyChangedEventHandler PropertyChangedEvent;
			public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged
			{
				add
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Combine(PropertyChangedEvent, value);
				}
				remove
				{
					PropertyChangedEvent = (System.ComponentModel.PropertyChangedEventHandler) System.Delegate.Remove(PropertyChangedEvent, value);
				}
			}
			
			
			protected void RaisePropertyChanged(string propertyName)
			{
				System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChangedEvent;
				if ((propertyChanged) != null)
				{
					propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
				}
			}
		}
		
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0"), System.ServiceModel.ServiceContractAttribute(ConfigurationName = "SVCCLCArchive.IService1")]public interface IService1
		{
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getProcessFileAsExt", ReplyAction = "http://tempuri.org/IService1/getProcessFileAsExtResponse")]string getProcessFileAsExt(int SecureID, string FileExt);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateSourceImageCompressed", ReplyAction = "http://tempuri.org/IService1/UpdateSourceImageCompressedResponse")]bool UpdateSourceImageCompressed(int SecureID, int ID, string UID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedImageBinary, string MachineID, string RetStr, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateSourceImage", ReplyAction = "http://tempuri.org/IService1/UpdateSourceImageResponse")]bool UpdateSourceImage(int SecureID, bool bCompressed, int ID, string UID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, string UploadFQN, string MachineID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertSourcefile", ReplyAction = "http://tempuri.org/IService1/InsertSourcefileResponse")]bool InsertSourcefile(int SecureID, int ID, string UID, string MachineID, string SourceGuid, string UploadFQN, string SourceName, string SourceTypeCode, string sLastAccessDate, string sCreateDate, string sLastWriteTime, string DataSourceOwnerUserID, int VersionNbr, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateEmailBinary", ReplyAction = "http://tempuri.org/IService1/UpdateEmailBinaryResponse")]bool UpdateEmailBinary(int SecureID, int ID, string UID, string FQN, string EmailGUID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertEmailBinary", ReplyAction = "http://tempuri.org/IService1/InsertEmailBinaryResponse")]bool InsertEmailBinary(int SecureID, int ID, string UID, string FQN, string EmailGuid, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ArchiveEmail", ReplyAction = "http://tempuri.org/IService1/ArchiveEmailResponse")]bool ArchiveEmail(int SecureID, int ID, string UID, string FqnEmailImage, string EmailGuid, string SUBJECT, string SentTO, string Body, string Bcc, string BillingInformation, string CC, string Companies, DateTime CreationTime, string ReadReceiptRequested, string ReceivedByName, DateTime ReceivedTime, string AllRecipients, string UserID, string SenderEmailAddress, string SenderName, string Sensitivity, DateTime SentOn, string MsgSize, DateTime DeferredDeliveryTime, string EntryID, DateTime ExpiryTime, DateTime LastModificationTime, string ShortSubj, string SourceTypeCode, string OriginalFolder, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateAttachmentByFQN", ReplyAction = "http://tempuri.org/IService1/UpdateAttachmentByFQNResponse")]bool UpdateAttachmentByFQN(int SecureID, int ID, string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateAttachment", ReplyAction = "http://tempuri.org/IService1/UpdateAttachmentResponse")]bool UpdateAttachment(int SecureID, int ID, string UID, string EmailGUID, byte[] CompressedImageBinary, string AttachmentName, string AttachmentCode, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateEmailMsg", ReplyAction = "http://tempuri.org/IService1/UpdateEmailMsgResponse")]bool UpdateEmailMsg(int SecureID, int ID, string UID, string FQN, string EmailGUID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertEmailMsg", ReplyAction = "http://tempuri.org/IService1/InsertEmailMsgResponse")]bool InsertEmailMsg(int SecureID, int ID, string UID, string FQN, string EmailGUID, string UserID, string ReceivedByName, DateTime ReceivedTime, string SenderEmailAddress, string SenderName, DateTime SentOn, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getEmailFileRestoreName", ReplyAction = "http://tempuri.org/IService1/getEmailFileRestoreNameResponse")]string getEmailFileRestoreName(int SecureID, string EmailGuid, string WorkingDirectory, string Suffix);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getEmailRestoreFqnParms", ReplyAction = "http://tempuri.org/IService1/getEmailRestoreFqnParmsResponse")]void getEmailRestoreFqnParms(int SecureID, string EmailGuid, ref string Subject, ref string CreationTime, ref string SentOn, ref string MsgSize);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/RetrieveDocument", ReplyAction = "http://tempuri.org/IService1/RetrieveDocumentResponse")]byte[] RetrieveDocument(int SecureID, int ID, string UID, string DocID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/updateSourcefile", ReplyAction = "http://tempuri.org/IService1/updateSourcefileResponse")]bool updateSourcefile(int SecureID, int ID, string UID, string SourceGuid, string UploadFQN, bool StoredExternally, string SourceName, string SourceTypeCode, string LastAccessDate, string CreateDate, string LastWriteTime, byte[] AttachmentBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ExecuteSqlNewConn", ReplyAction = "http://tempuri.org/IService1/ExecuteSqlNewConnResponse")]bool ExecuteSqlNewConn(int SecureID, int ID, string UserGuidID, string sql, ref string RetVal);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetData", ReplyAction = "http://tempuri.org/IService1/GetDataResponse")]string GetData(int value);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GetDataUsingDataContract", ReplyAction = "http://tempuri.org/IService1/GetDataUsingDataContractResponse")]SVCCLCArchive.CompositeType GetDataUsingDataContract(SVCCLCArchive.CompositeType composite);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GET_WebSite", ReplyAction = "http://tempuri.org/IService1/GET_WebSiteResponse")]SVCCLCArchive.DS_WebSite[] GET_WebSite(int SecureID, string WhereClause, bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/Save_WebSiteURL", ReplyAction = "http://tempuri.org/IService1/Save_WebSiteURLResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.CompositeType)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull))]object Save_WebSiteURL(int SecureID, string WebSite, string WebUrl, int depth, int width, string UserID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GET_WebScreen", ReplyAction = "http://tempuri.org/IService1/GET_WebScreenResponse")]SVCCLCArchive.DS_WebScreen[] GET_WebScreen(int SecureID, string WhereClause, bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/Save_WebScreenURL", ReplyAction = "http://tempuri.org/IService1/Save_WebScreenURLResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.CompositeType)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull))]object Save_WebScreenURL(int SecureID, string WebScreen, string WebUrl, string UserID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/GET_RssPull", ReplyAction = "http://tempuri.org/IService1/GET_RssPullResponse")]SVCCLCArchive.DS_RssPull[] GET_RssPull(int SecureID, string WhereClause, bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/Save_RssPull", ReplyAction = "http://tempuri.org/IService1/Save_RssPullResponse"), System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.CompositeType)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebSite)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_WebScreen)), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull[])), System.ServiceModel.ServiceKnownTypeAttribute(typeof(SVCCLCArchive.DS_RssPull))]object Save_RssPull(int SecureID, string RssName, string RssUrl, string UserID, ref bool RC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/genRandomKey", ReplyAction = "http://tempuri.org/IService1/genRandomKeyResponse")]string genRandomKey(int SecureID, ref int KID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/consoleOcrSingleAllPendingFiles", ReplyAction = "http://tempuri.org/IService1/consoleOcrSingleAllPendingFilesResponse")]void consoleOcrSingleAllPendingFiles(int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/consoleOcrSingleFile", ReplyAction = "http://tempuri.org/IService1/consoleOcrSingleFileResponse")]void consoleOcrSingleFile(int SecureID, string ContentGuid, string TypeCode);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ReturnString", ReplyAction = "http://tempuri.org/IService1/ReturnStringResponse")]string ReturnString();
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/VerifyRetentionDates", ReplyAction = "http://tempuri.org/IService1/VerifyRetentionDatesResponse")]void VerifyRetentionDates(int SecureID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/iCount", ReplyAction = "http://tempuri.org/IService1/iCountResponse")]int iCount(int SecureID, int ID, string UID, string S);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGuidsOfAllEmailGraphicFiles", ReplyAction = "http://tempuri.org/IService1/getGuidsOfAllEmailGraphicFilesResponse")]void getGuidsOfAllEmailGraphicFiles(int SecureID, int ID, bool bGetAllRecords, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ProcessEmailAttachmentOCR", ReplyAction = "http://tempuri.org/IService1/ProcessEmailAttachmentOCRResponse")]void ProcessEmailAttachmentOCR(int SecureID, int ID, string tgtSourceGuid, ref bool RC, ref string ReturnMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGuidsOfPendingGraphicFiles", ReplyAction = "http://tempuri.org/IService1/getGuidsOfPendingGraphicFilesResponse")]void getGuidsOfPendingGraphicFiles(int SecureID, int ID, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getGuidsOfAllGraphicFiles", ReplyAction = "http://tempuri.org/IService1/getGuidsOfAllGraphicFilesResponse")]void getGuidsOfAllGraphicFiles(int SecureID, int ID, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ProcessSourceOCR", ReplyAction = "http://tempuri.org/IService1/ProcessSourceOCRResponse")]void ProcessSourceOCR(int SecureID, int ID, string tgtSourceGuid, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/OcrDocument", ReplyAction = "http://tempuri.org/IService1/OcrDocumentResponse")]bool OcrDocument(int SecureID, string TypeSource, byte[] SourceBinary, string FileDir, string FileNameOnly, string SourceGuid, string UserID, string MachineName, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/OcrGraphic", ReplyAction = "http://tempuri.org/IService1/OcrGraphicResponse")]string OcrGraphic(int SecureID, byte[] SourceBinary, string FileNameOnly, string UserID, string MachineName, bool RC, string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/PDFExtract", ReplyAction = "http://tempuri.org/IService1/PDFExtractResponse")]void PDFExtract(int SecureID, bool bEmailAttachment, string SourceGuid, string FileNameOnly, string SourceType, byte[] SourceBinary, string UserID, string MachineName, ref bool RC, ref string RetMsg);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/SaveUploadStats", ReplyAction = "http://tempuri.org/IService1/SaveUploadStatsResponse")]bool SaveUploadStats(int SecureID, string RepositoryTable, string SourceGuid, int OriginalSize, int CompressedSize, DateTime TxStartTime, DateTime TxEndTime, decimal TxTotalTime, decimal BPS, string AttachmentName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertEmailAttachmentRecord", ReplyAction = "http://tempuri.org/IService1/InsertEmailAttachmentRecordResponse")]string InsertEmailAttachmentRecord(int SecureID, string EmailGuid, string AttachmentName, string AttachmentCode, string AttachmentType, string UserID, ref string RetMsg, string CRC);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UploadBufferedCreate", ReplyAction = "http://tempuri.org/IService1/UploadBufferedCreateResponse")]string UploadBufferedCreate(int SecureID, int ID, string UID, string tgtGuid, int iRead, string FileCrc, long FileLength, string FileName, string RepositoryTable, bool LastSegment, string OriginalFileName, byte[] Buffer);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UploadBufferedAppend", ReplyAction = "http://tempuri.org/IService1/UploadBufferedAppendResponse")]string UploadBufferedAppend(int SecureID, string UID, string tgtGuid, int iRead, string FileCrc, long FileLength, string FileName, string RepositoryTable, ref string RetMsg, bool LastSegment, string OriginalFileName, byte[] Buffer);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/ckDbConnection", ReplyAction = "http://tempuri.org/IService1/ckDbConnectionResponse")]bool ckDbConnection(int SecureID, string From, string MachineID);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/getAttachmentRowID", ReplyAction = "http://tempuri.org/IService1/getAttachmentRowIDResponse")]int getAttachmentRowID(int SecureID, string EmailGuid, string AttachmentName);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/InsertAttachmentFqn", ReplyAction = "http://tempuri.org/IService1/InsertAttachmentFqnResponse")]bool InsertAttachmentFqn(int SecureID, int ID, string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, bool bImageCompressed, string Sha1Hash);
			
			[System.ServiceModel.OperationContractAttribute(Action = "http://tempuri.org/IService1/UpdateUrlBinaryHtml", ReplyAction = "http://tempuri.org/IService1/UpdateUrlBinaryHtmlResponse")]bool UpdateUrlBinaryHtml(int SecureID, int ID, string UID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime);
		}
		
		[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public interface IService1Channel : SVCCLCArchive.IService1,System.ServiceModel.IClientChannel
		{
		}
		
		[System.Diagnostics.DebuggerStepThroughAttribute(), System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]public partial class Service1Client : System.ServiceModel.ClientBase<SVCCLCArchive.IService1>, SVCCLCArchive.IService1
		{
			
			public Service1Client()
			{
			}
			
			public Service1Client(string endpointConfigurationName) : base(endpointConfigurationName)
			{
			}
			
			public Service1Client(string endpointConfigurationName, string remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}
			
			public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : base(endpointConfigurationName, remoteAddress)
			{
			}
			
			public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : base(binding, remoteAddress)
			{
			}
			
			public string getProcessFileAsExt(int SecureID, string FileExt)
			{
				return base.Channel.getProcessFileAsExt(SecureID, FileExt);
			}
			
			public bool UpdateSourceImageCompressed(int SecureID, int ID, string UID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedImageBinary, string MachineID, string RetStr, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateSourceImageCompressed(SecureID, ID, UID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedImageBinary, MachineID, RetStr, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool UpdateSourceImage(int SecureID, bool bCompressed, int ID, string UID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, string UploadFQN, string MachineID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateSourceImage(SecureID, bCompressed, ID, UID, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, UploadFQN, MachineID, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool InsertSourcefile(int SecureID, int ID, string UID, string MachineID, string SourceGuid, string UploadFQN, string SourceName, string SourceTypeCode, string sLastAccessDate, string sCreateDate, string sLastWriteTime, string DataSourceOwnerUserID, int VersionNbr, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic)
			{
				return base.Channel.InsertSourcefile(SecureID, ID, UID, MachineID, SourceGuid, UploadFQN, SourceName, SourceTypeCode, sLastAccessDate, sCreateDate, sLastWriteTime, DataSourceOwnerUserID, VersionNbr, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime, RetentionCode, isPublic);
			}
			
			public bool UpdateEmailBinary(int SecureID, int ID, string UID, string FQN, string EmailGUID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateEmailBinary(SecureID, ID, UID, FQN, EmailGUID, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool InsertEmailBinary(int SecureID, int ID, string UID, string FQN, string EmailGuid, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic)
			{
				return base.Channel.InsertEmailBinary(SecureID, ID, UID, FQN, EmailGuid, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime, RetentionCode, isPublic);
			}
			
			public bool ArchiveEmail(int SecureID, int ID, string UID, string FqnEmailImage, string EmailGuid, string SUBJECT, string SentTO, string Body, string Bcc, string BillingInformation, string CC, string Companies, DateTime CreationTime, string ReadReceiptRequested, string ReceivedByName, DateTime ReceivedTime, string AllRecipients, string UserID, string SenderEmailAddress, string SenderName, string Sensitivity, DateTime SentOn, string MsgSize, DateTime DeferredDeliveryTime, string EntryID, DateTime ExpiryTime, DateTime LastModificationTime, string ShortSubj, string SourceTypeCode, string OriginalFolder, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.ArchiveEmail(SecureID, ID, UID, FqnEmailImage, EmailGuid, SUBJECT, SentTO, Body, Bcc, BillingInformation, CC, Companies, CreationTime, ReadReceiptRequested, ReceivedByName, ReceivedTime, AllRecipients, UserID, SenderEmailAddress, SenderName, Sensitivity, SentOn, MsgSize, DeferredDeliveryTime, EntryID, ExpiryTime, LastModificationTime, ShortSubj, SourceTypeCode, OriginalFolder, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool UpdateAttachmentByFQN(int SecureID, int ID, string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateAttachmentByFQN(SecureID, ID, UID, FQN, EmailGUID, AttachmentName, AttachmentCode, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool UpdateAttachment(int SecureID, int ID, string UID, string EmailGUID, byte[] CompressedImageBinary, string AttachmentName, string AttachmentCode, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateAttachment(SecureID, ID, UID, EmailGUID, CompressedImageBinary, AttachmentName, AttachmentCode, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool UpdateEmailMsg(int SecureID, int ID, string UID, string FQN, string EmailGUID, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateEmailMsg(SecureID, ID, UID, FQN, EmailGUID, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool InsertEmailMsg(int SecureID, int ID, string UID, string FQN, string EmailGUID, string UserID, string ReceivedByName, DateTime ReceivedTime, string SenderEmailAddress, string SenderName, DateTime SentOn, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, string RetentionCode, string isPublic)
			{
				return base.Channel.InsertEmailMsg(SecureID, ID, UID, FQN, EmailGUID, UserID, ReceivedByName, ReceivedTime, SenderEmailAddress, SenderName, SentOn, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime, RetentionCode, isPublic);
			}
			
			public string getEmailFileRestoreName(int SecureID, string EmailGuid, string WorkingDirectory, string Suffix)
			{
				return base.Channel.getEmailFileRestoreName(SecureID, EmailGuid, WorkingDirectory, Suffix);
			}
			
			public void getEmailRestoreFqnParms(int SecureID, string EmailGuid, ref string Subject, ref string CreationTime, ref string SentOn, ref string MsgSize)
			{
				base.Channel.getEmailRestoreFqnParms(SecureID, EmailGuid, Subject, CreationTime, SentOn, MsgSize);
			}
			
			public byte[] RetrieveDocument(int SecureID, int ID, string UID, string DocID)
			{
				return base.Channel.RetrieveDocument(SecureID, ID, UID, DocID);
			}
			
			public bool updateSourcefile(int SecureID, int ID, string UID, string SourceGuid, string UploadFQN, bool StoredExternally, string SourceName, string SourceTypeCode, string LastAccessDate, string CreateDate, string LastWriteTime, byte[] AttachmentBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.updateSourcefile(SecureID, ID, UID, SourceGuid, UploadFQN, StoredExternally, SourceName, SourceTypeCode, LastAccessDate, CreateDate, LastWriteTime, AttachmentBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
			
			public bool ExecuteSqlNewConn(int SecureID, int ID, string UserGuidID, string sql, ref string RetVal)
			{
				return base.Channel.ExecuteSqlNewConn(SecureID, ID, UserGuidID, sql, RetVal);
			}
			
			public string GetData(int value)
			{
				return base.Channel.GetData(value);
			}
			
			public SVCCLCArchive.CompositeType GetDataUsingDataContract(SVCCLCArchive.CompositeType composite)
			{
				return base.Channel.GetDataUsingDataContract(composite);
			}
			
			public SVCCLCArchive.DS_WebSite[] GET_WebSite(int SecureID, string WhereClause, bool RC)
			{
				return base.Channel.GET_WebSite(SecureID, WhereClause, RC);
			}
			
			public object Save_WebSiteURL(int SecureID, string WebSite, string WebUrl, int depth, int width, string UserID, ref bool RC)
			{
				return base.Channel.Save_WebSiteURL(SecureID, WebSite, WebUrl, depth, width, UserID, RC);
			}
			
			public SVCCLCArchive.DS_WebScreen[] GET_WebScreen(int SecureID, string WhereClause, bool RC)
			{
				return base.Channel.GET_WebScreen(SecureID, WhereClause, RC);
			}
			
			public object Save_WebScreenURL(int SecureID, string WebScreen, string WebUrl, string UserID, ref bool RC)
			{
				return base.Channel.Save_WebScreenURL(SecureID, WebScreen, WebUrl, UserID, RC);
			}
			
			public SVCCLCArchive.DS_RssPull[] GET_RssPull(int SecureID, string WhereClause, bool RC)
			{
				return base.Channel.GET_RssPull(SecureID, WhereClause, RC);
			}
			
			public object Save_RssPull(int SecureID, string RssName, string RssUrl, string UserID, ref bool RC)
			{
				return base.Channel.Save_RssPull(SecureID, RssName, RssUrl, UserID, RC);
			}
			
			public string genRandomKey(int SecureID, ref int KID)
			{
				return base.Channel.genRandomKey(SecureID, KID);
			}
			
			public void consoleOcrSingleAllPendingFiles(int SecureID)
			{
				base.Channel.consoleOcrSingleAllPendingFiles(SecureID);
			}
			
			public void consoleOcrSingleFile(int SecureID, string ContentGuid, string TypeCode)
			{
				base.Channel.consoleOcrSingleFile(SecureID, ContentGuid, TypeCode);
			}
			
			public string ReturnString()
			{
				return base.Channel.ReturnString;
			}
			
			public void VerifyRetentionDates(int SecureID)
			{
				base.Channel.VerifyRetentionDates(SecureID);
			}
			
			public int iCount(int SecureID, int ID, string UID, string S)
			{
				return base.Channel.iCount(SecureID, ID, UID, S);
			}
			
			public void getGuidsOfAllEmailGraphicFiles(int SecureID, int ID, bool bGetAllRecords, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids)
			{
				base.Channel.getGuidsOfAllEmailGraphicFiles(SecureID, ID, bGetAllRecords, ListOfGuids);
			}
			
			public void ProcessEmailAttachmentOCR(int SecureID, int ID, string tgtSourceGuid, ref bool RC, ref string ReturnMsg)
			{
				base.Channel.ProcessEmailAttachmentOCR(SecureID, ID, tgtSourceGuid, RC, ReturnMsg);
			}
			
			public void getGuidsOfPendingGraphicFiles(int SecureID, int ID, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids)
			{
				base.Channel.getGuidsOfPendingGraphicFiles(SecureID, ID, ListOfGuids);
			}
			
			public void getGuidsOfAllGraphicFiles(int SecureID, int ID, ref System.Collections.Generic.Dictionary<string, int> ListOfGuids)
			{
				base.Channel.getGuidsOfAllGraphicFiles(SecureID, ID, ListOfGuids);
			}
			
			public void ProcessSourceOCR(int SecureID, int ID, string tgtSourceGuid, ref string RetMsg)
			{
				base.Channel.ProcessSourceOCR(SecureID, ID, tgtSourceGuid, RetMsg);
			}
			
			public bool OcrDocument(int SecureID, string TypeSource, byte[] SourceBinary, string FileDir, string FileNameOnly, string SourceGuid, string UserID, string MachineName, ref bool RC, ref string RetMsg)
			{
				return base.Channel.OcrDocument(SecureID, TypeSource, SourceBinary, FileDir, FileNameOnly, SourceGuid, UserID, MachineName, RC, RetMsg);
			}
			
			public string OcrGraphic(int SecureID, byte[] SourceBinary, string FileNameOnly, string UserID, string MachineName, bool RC, string RetMsg)
			{
				return base.Channel.OcrGraphic(SecureID, SourceBinary, FileNameOnly, UserID, MachineName, RC, RetMsg);
			}
			
			public void PDFExtract(int SecureID, bool bEmailAttachment, string SourceGuid, string FileNameOnly, string SourceType, byte[] SourceBinary, string UserID, string MachineName, ref bool RC, ref string RetMsg)
			{
				base.Channel.PDFExtract(SecureID, bEmailAttachment, SourceGuid, FileNameOnly, SourceType, SourceBinary, UserID, MachineName, RC, RetMsg);
			}
			
			public bool SaveUploadStats(int SecureID, string RepositoryTable, string SourceGuid, int OriginalSize, int CompressedSize, DateTime TxStartTime, DateTime TxEndTime, decimal TxTotalTime, decimal BPS, string AttachmentName)
			{
				return base.Channel.SaveUploadStats(SecureID, RepositoryTable, SourceGuid, OriginalSize, CompressedSize, TxStartTime, TxEndTime, TxTotalTime, BPS, AttachmentName);
			}
			
			public string InsertEmailAttachmentRecord(int SecureID, string EmailGuid, string AttachmentName, string AttachmentCode, string AttachmentType, string UserID, ref string RetMsg, string CRC)
			{
				return base.Channel.InsertEmailAttachmentRecord(SecureID, EmailGuid, AttachmentName, AttachmentCode, AttachmentType, UserID, RetMsg, CRC);
			}
			
			public string UploadBufferedCreate(int SecureID, int ID, string UID, string tgtGuid, int iRead, string FileCrc, long FileLength, string FileName, string RepositoryTable, bool LastSegment, string OriginalFileName, byte[] Buffer)
			{
				return base.Channel.UploadBufferedCreate(SecureID, ID, UID, tgtGuid, iRead, FileCrc, FileLength, FileName, RepositoryTable, LastSegment, OriginalFileName, Buffer);
			}
			
			public string UploadBufferedAppend(int SecureID, string UID, string tgtGuid, int iRead, string FileCrc, long FileLength, string FileName, string RepositoryTable, ref string RetMsg, bool LastSegment, string OriginalFileName, byte[] Buffer)
			{
				return base.Channel.UploadBufferedAppend(SecureID, UID, tgtGuid, iRead, FileCrc, FileLength, FileName, RepositoryTable, RetMsg, LastSegment, OriginalFileName, Buffer);
			}
			
			public bool ckDbConnection(int SecureID, string From, string MachineID)
			{
				return base.Channel.ckDbConnection(SecureID, From, MachineID);
			}
			
			public int getAttachmentRowID(int SecureID, string EmailGuid, string AttachmentName)
			{
				return base.Channel.getAttachmentRowID(SecureID, EmailGuid, AttachmentName);
			}
			
			public bool InsertAttachmentFqn(int SecureID, int ID, string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime, bool bImageCompressed, string Sha1Hash)
			{
				return base.Channel.InsertAttachmentFqn(SecureID, ID, UID, FQN, EmailGUID, AttachmentName, AttachmentCode, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime, bImageCompressed, Sha1Hash);
			}
			
			public bool UpdateUrlBinaryHtml(int SecureID, int ID, string UID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedImageBinary, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
			{
				return base.Channel.UpdateUrlBinaryHtml(SecureID, ID, UID, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedImageBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime);
			}
		}
	}
	
}
