/* TODO ERROR: Skipped DefineDirectiveTrivia */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using global::System.Data.SqlClient;
using System.Diagnostics;
using System.Drawing;
using global::System.Globalization;
using global::System.IO;
using System.Linq;
using System.Windows.Forms;
using global::ECMEncryption;
using global::Ionic.Zip;
using Microsoft.VisualBasic;
using Microsoft.VisualBasic.CompilerServices;
using global::Microsoft.Win32;
using MODI;

namespace EcmArchiver
{
    public class clsDatabaseARCH : IDisposable
    {
        private AppDomain currDomain = AppDomain.CurrentDomain;

        // Inherits System.Web.UI.Page

        private clsIsolatedStorage ISO = new clsIsolatedStorage();
        private clsRegistry REG = new clsRegistry();

        // Dim ProxyArchive As New SVCCLCArchive.Service1Client
        // Dim ProxyFS As New SVCFS.Service1Client

        private clsTimeCalcs TC = new clsTimeCalcs();
        private clsCompression COMP = new clsCompression();
        private int bUseCommandProcessForInventory = Conversions.ToInteger(System.Configuration.ConfigurationManager.AppSettings["UseCommandProcessForInventory"]);
        public bool ddebug = false;
        private int IXV1 = 0;
        private clsFile CF = new clsFile();
        private ECMEncrypt ENC = new ECMEncrypt();
        private clsLogging LOG = new clsLogging();
        private clsUtility UTIL = new clsUtility();
        private clsDma DMA = new clsDma();
        private clsKeyGen KGEN = new clsKeyGen();

        // ** Public ConnectionStringID As String = "XOMR1.1ConnectionString"
        // ** Do not forget that this is a global access var to thte DBARCH
        // ** and MUST be changed to run on different platforms.
        public string ConnectionStringID = "";
        public string ServerName = "";
        public string TgtGuid = "";
        public Dictionary<string, string> slMachineNetwork = new Dictionary<string, string>();
        public Dictionary<string, Guid> slContainerGuid = new Dictionary<string, Guid>();
        public SortedList slProjects = new SortedList();
        public SortedList slProjectTeams = new SortedList();
        public SortedList slMetricPeriods = new SortedList();
        public SortedList slExcelColNames = new SortedList();
        public SortedList slGrowthPlatform = new SortedList();
        public SortedList slOperatingGroup = new SortedList();
        public SortedList slOperatingUnit = new SortedList();
        public SortedList slGeography = new SortedList();
        public SortedList slGeographicUnit = new SortedList();
        public SortedList slClientServiceGroup = new SortedList();
        public SortedList slDeliveryCenter = new SortedList();
        public SortedList slTypeOfWork = new SortedList();
        public SortedList slProjectTeamTypeOfWork = new SortedList();
        public SortedList slSubmissionStatus = new SortedList();
        public SortedList slSubmittedBy = new SortedList();
        public ArrayList EL = new ArrayList();
        public string[,] TblCols = new string[5, 1];

        // Dim owner As IWin32Window
        private string gConnStr = "";
        private string DBDIR = @"C:\Program Files\Microsoft SQL Server\MSSQL.1\MSSQL\Data\org_db.mdf";
        private string DQ = Conversions.ToString('"');

        // Private gCurrUserGuidID = ""
        private string CurrUserPW = "";
        private SqlConnection gConn = null;
        private SqlCommand gCmd = null;
        private bool OverwriteOnce = false;
        private bool OverwriteAlways = false;
        private string _GatewayID = "";

        public clsDatabaseARCH()
        {
            // Dim sDebug  = System.Configuration.ConfigurationManager.AppSettings("debug_clsDatabase")
            // Dim sDebug As String = getUserParm("debug_ClsDatabase")

            currDomain.UnhandledException += modGlobals.MYExnHandler;
            Application.ThreadException += modGlobals.MYThreadHandler;
        }

        public DataSet getDataSet(string MySql)
        {
            var ds = new DataSet();
            var adapter = new SqlDataAdapter();
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            try
            {
                CONN.Open();
                using (CONN)
                {
                    var command = new SqlCommand(MySql, CONN);
                    using (command)
                    {
                        adapter.SelectCommand = command;
                        adapter.Fill(ds);
                        adapter.Dispose();
                    }
                }
            }

            // For i = 0 To ds.Tables(0).Rows.Count - 1
            // MsgBox(ds.Tables(0).Rows(i).Item(0) & "  --  " & ds.Tables(0).Rows(i).Item(1))
            // Next

            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getDataSet 01: " + ex.Message + Constants.vbCrLf + MySql);
            }

            return ds;
        }

        public List<string> getUsersAllowedFileExt(string UserID)
        {
            var L = new List<string>();
            string S = "Select distinct lower(ExtCode) from IncludedFiles where UserID = '" + UserID + "'";
            string ext = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                var command = new SqlCommand(S, CONN);
                using (command)
                using (var RSD = command.ExecuteReader())
                {
                    if (RSD.HasRows)
                    {
                        while (RSD.Read())
                        {
                            ext = RSD.GetValue(0).ToString().ToLower();
                            if (!L.Contains(ext))
                            {
                                L.Add(ext);
                            }
                        }
                    }
                }
            }

            return L;
        }

        public Dictionary<string, string> getDSFQN(string TOPN, string PASSEDfqn)
        {
            var L = new Dictionary<string, string>();
            string S = "Select top " + TOPN + " FqnHASH, FQN from DataSourceFQN";
            string fqn = "";
            string hash = "";
            if (PASSEDfqn.Length > 0)
            {
                S = "Select FqnHASH, FQN from DataSourceFQN where fqn = '" + PASSEDfqn + "' ";
            }

            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                var command = new SqlCommand(S, CONN);
                using (command)
                using (var RSD = command.ExecuteReader())
                {
                    if (RSD.HasRows)
                    {
                        while (RSD.Read())
                        {
                            hash = RSD.GetValue(0).ToString().ToLower();
                            fqn = RSD.GetValue(1).ToString().ToLower();
                            L.Add(hash, fqn);
                        }
                    }
                }
            }

            return L;
        }

        public void setDSFQN()
        {
            var FM = new frmMessageBar();
            FM.Show();
            FM.ResetText();
            FM.Text = "Long Running Process - Validating Long File names";
            FM.lblmsg.Text = "";
            FM.Refresh();
            Application.DoEvents();
            var ListOfDirs = new Dictionary<string, string>();
            string S = "Select distinct upper(FQN) from DataSource where FqnHASH is null or ltrim(rtrim(FqnHASH)) = '' ";
            string fqn = "";
            string hash = "";
            FM.lblmsg.Text = "Finding Long File names, standby";
            FM.Refresh();
            Application.DoEvents();
            int iTotal = getCount("Select count(*) from DataSource WHERE FqnHASH is null or ltrim(rtrim(FqnHASH)) = '' ");
            if (iTotal.Equals(0))
            {
                FM.Close();
                FM.Dispose();
                MessageBox.Show("No files found to be missing their Hash Codes, returning...");
                return;
            }

            FM.lblmsg.Text = "Total files to process: " + iTotal.ToString();
            FM.Refresh();
            Application.DoEvents();
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var cmdSql = new SqlCommand("…");
            cmdSql.Parameters.Add(new SqlParameter("@sId", SqlDbType.VarChar, 10));
            FM.lblmsg.Text = "Building Long File names' HASH, standby";
            FM.Refresh();
            Application.DoEvents();
            int icnt = 0;
            try
            {
                using (CONN)
                {
                    FM.lblmsg.Text = "Calculating HASH:";
                    var command = new SqlCommand(S, CONN);
                    command.CommandType = CommandType.Text;
                    using (command)
                    using (var RSD = command.ExecuteReader())
                    {
                        if (RSD.HasRows)
                        {
                            while (RSD.Read())
                            {
                                icnt += 1;
                                FM.lblCnt.Text = icnt.ToString();
                                FM.Refresh();
                                Application.DoEvents();
                                fqn = RSD.GetValue(0).ToString().ToUpper();
                                if (File.Exists(fqn))
                                {
                                    hash = ENC.SHA512SqlServerHash(fqn);
                                    if (!ListOfDirs.Keys.Contains(hash))
                                    {
                                        ListOfDirs.Add(hash, fqn);
                                    }
                                }
                                else
                                {
                                    LOG.WriteToArchiveLog("MISSING FILE: " + fqn);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("ERROR setDSFQN 120A: " + ex.Message);
                LOG.WriteToArchiveLog("ERROR setDSFQN 120A: " + ex.Message);
            }

            iTotal = ListOfDirs.Count;
            var CON = new SqlConnection(CS);
            CON.Open();
            using (CON)
            {
                var CMD = new SqlCommand("", CON);
                using (CMD)
                {
                    FM.Text = "UPDATING ALL LONG NAMES - Long Running Process";
                    CMD.Parameters.Add(new SqlParameter("@fqn", SqlDbType.VarChar, 8000));
                    CMD.Parameters.Add(new SqlParameter("@FqnHASH", SqlDbType.VarChar, 150));
                    iTotal = ListOfDirs.Count;
                    icnt = 0;
                    foreach (var currentHash in ListOfDirs.Keys)
                    {
                        hash = currentHash;
                        icnt += 1;
                        FM.lblmsg.Text = icnt.ToString() + " of " + iTotal.ToString();
                        FM.Refresh();
                        Application.DoEvents();
                        fqn = ListOfDirs[hash];
                        if (fqn.Contains("'"))
                        {
                            Console.WriteLine(fqn);
                            // fqn = fqn.Replace("'", "''")
                        }

                        try
                        {
                            CMD.Parameters["@fqn"].Value = fqn;
                            CMD.Parameters["@FqnHASH"].Value = hash;
                            S = "update DataSource set FqnHASH = @FqnHASH where fqn = @fqn ; ";
                            CMD.CommandText = S;
                            CMD.ExecuteNonQuery();
                            S = @"If not exists (Select 1 from DataSourceFQN where FqnHASH = @FqnHASH )
                              INSERT INTO DataSourceFQN (FqnHASH, fqn) values (@FqnHASH, @fqn);";
                            CMD.CommandText = S;
                            CMD.ExecuteNonQuery();
                        }
                        catch (Exception ex)
                        {
                            LOG.WriteToArchiveLog("ERROR setDSFQN: " + ex.Message);
                            Console.WriteLine(ex.Message);
                        }
                    }
                }
            }

            FM.Close();
            FM.Dispose();
        }

        public void validateFileHash()
        {
            My.MyProject.Forms.frmMessageBar.Show();
            My.MyProject.Forms.frmMessageBar.ResetText();
            My.MyProject.Forms.frmMessageBar.Text = "Long Running Process - Validating File Hashes";
            My.MyProject.Forms.frmMessageBar.lblmsg.Text = "";
            My.MyProject.Forms.frmMessageBar.Refresh();
            Application.DoEvents();
            string SS = "ExecuteSql(delete from DataSource where FQN is null or ltrim(rtrim(FQN)) = '';";
            var ListToUpdateFromFileHash = new Dictionary<string, string>();
            var ListToUpdateFromSourceImage = new Dictionary<string, string>();
            string S = "select SourceGuid, FQN from DataSource DS where HashFile is null or ltrim(rtrim(HashFile)) = '' ;";
            string FQN = "";
            string hash = "";
            string SourceGuid = "";
            My.MyProject.Forms.frmMessageBar.lblmsg.Text = "Finding Long File names, standby";
            My.MyProject.Forms.frmMessageBar.Refresh();
            Application.DoEvents();
            int iTotal = getCount("Select count(*) from DataSource WHERE FqnHASH IS NULL");
            My.MyProject.Forms.frmMessageBar.lblmsg.Text = "Total files to process: " + iTotal.ToString();
            My.MyProject.Forms.frmMessageBar.Refresh();
            Application.DoEvents();
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            bSuccess = ExecuteSql(SS, CS, false);
            var cmdSql = new SqlCommand("…");
            cmdSql.Parameters.Add(new SqlParameter("@sId", SqlDbType.VarChar, 10));
            My.MyProject.Forms.frmMessageBar.lblmsg.Text = "Validating files in Repositoty";
            My.MyProject.Forms.frmMessageBar.Refresh();
            Application.DoEvents();
            int icnt = 0;
            try
            {
                using (CONN)
                {
                    var command = new SqlCommand(S, CONN);
                    command.CommandType = CommandType.Text;
                    using (command)
                    using (var RSD = command.ExecuteReader())
                    {
                        if (RSD.HasRows)
                        {
                            while (RSD.Read())
                            {
                                icnt += 1;
                                My.MyProject.Forms.frmMessageBar.lblCnt.Text = icnt.ToString();
                                My.MyProject.Forms.frmMessageBar.Refresh();
                                Application.DoEvents();
                                SourceGuid = RSD.GetValue(0).ToString();
                                FQN = RSD.GetValue(1).ToString();
                                if (!File.Exists(FQN))
                                {
                                    if (!ListToUpdateFromSourceImage.Keys.Contains(SourceGuid))
                                    {
                                        ListToUpdateFromSourceImage.Add(SourceGuid, FQN);
                                        LOG.WriteToArchiveLog(">> HASHED BINARY: " + FQN);
                                    }
                                }
                                else
                                {
                                    hash = ENC.GenerateSHA512HashFromFile(FQN);
                                    if (!ListToUpdateFromFileHash.Keys.Contains(SourceGuid))
                                    {
                                        ListToUpdateFromFileHash.Add(SourceGuid, hash);
                                    }

                                    LOG.WriteToArchiveLog("** HASHED FILE: " + FQN);
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("ERROR validateFileHash 220A: " + ex.Message);
                LOG.WriteToArchiveLog("ERROR validateFileHash 220A: " + ex.Message);
            }

            iTotal = ListToUpdateFromSourceImage.Count;
            var CON = new SqlConnection(CS);
            CON.Open();
            using (CON)
            {
                var CMD = new SqlCommand("", CON);
                // CMD.Parameters.Add(New SqlParameter("@SourceGuid", SqlDbType.NVarChar, 50))
                using (CMD)
                {
                    My.MyProject.Forms.frmMessageBar.Text = "UPDATING HASH from SourceImage";
                    // CMD.Parameters.Add(New SqlParameter("@SourceGuid", SqlDbType.NVarChar, 50))

                    iTotal = ListToUpdateFromSourceImage.Count;
                    icnt = 0;
                    foreach (var currentSourceGuid in ListToUpdateFromSourceImage.Keys)
                    {
                        SourceGuid = currentSourceGuid;
                        icnt += 1;
                        My.MyProject.Forms.frmMessageBar.lblmsg.Text = icnt.ToString() + " of " + iTotal.ToString();
                        My.MyProject.Forms.frmMessageBar.Refresh();
                        Application.DoEvents();
                        try
                        {
                            // CMD.Parameters("@SourceGuid").Value = SourceGuid
                            S = "Update DataSource set SourceImageOrigin = 'SRCIMG', HashFile = UPPER(convert(char(128), HASHBYTES('sha2_512', cast(SourceImage as nvarchar(max))),1)) where SourceGuid = '" + SourceGuid + "'  ;";
                            CMD.CommandText = S;
                            CMD.ExecuteNonQuery();
                            Application.DoEvents();
                        }
                        catch (Exception ex)
                        {
                            LOG.WriteToArchiveLog("ERROR validateFileHash 221X: " + ex.Message);
                            Console.WriteLine(ex.Message);
                        }
                    }
                }
            }

            string HashFile = "";
            var CONX = new SqlConnection(CS);
            CONX.Open();
            using (CONX)
            {
                var CMD = new SqlCommand("", CONX);
                using (CMD)
                {
                    My.MyProject.Forms.frmMessageBar.Text = "UPDATING HASH from FILE";
                    // CMD.Parameters.Add(New SqlParameter("@SourceGuid", SqlDbType.NVarChar, 50))
                    // CMD.Parameters.Add(New SqlParameter("@HashFile", SqlDbType.NVarChar, 50))

                    iTotal = ListToUpdateFromFileHash.Count;
                    icnt = 0;
                    foreach (var currentSourceGuid1 in ListToUpdateFromFileHash.Keys)
                    {
                        SourceGuid = currentSourceGuid1;
                        icnt += 1;
                        HashFile = ListToUpdateFromFileHash[SourceGuid];
                        My.MyProject.Forms.frmMessageBar.lblmsg.Text = icnt.ToString() + " of " + iTotal.ToString();
                        My.MyProject.Forms.frmMessageBar.Refresh();
                        Application.DoEvents();
                        try
                        {
                            // CMD.Parameters("@SourceGuid").Value = SourceGuid
                            // CMD.Parameters("@HashFile").Value = HashFile
                            // S = "Update DataSource set SourceImageOrigin = 'FILE', HashFile = @HashFile where SourceGuid = @SourceGuid ;"
                            S = "Update DataSource set SourceImageOrigin = 'FILE', HashFile = '" + HashFile + "' where SourceGuid = '" + SourceGuid + "' ;";
                            CMD.CommandText = S;
                            CMD.ExecuteNonQuery();
                            Application.DoEvents();
                        }
                        catch (Exception ex)
                        {
                            LOG.WriteToArchiveLog("ERROR validateFileHash 221X: " + ex.Message);
                            Console.WriteLine(ex.Message);
                        }
                    }
                }
            }

            My.MyProject.Forms.frmMessageBar.Close();
        }

        public string getSqlServerHASH(string str, bool ReturnHEX = false)
        {

            // If IsNothing(ReturnHEX) Then
            // ReturnHEX = False
            // End If
            string S = "";
            str = str.Replace(" ''", "'");
            str = str.Replace("'", "''");
            var L = new Dictionary<string, string>();
            if (ReturnHEX.Equals(true))
            {
                S = "SELECT convert(char(128), HASHBYTES('sha2_512', '" + str.ToUpper() + "'), 1) as XHASH; ";
            }
            else
            {
                S = "SELECT convert(char(128), HASHBYTES('sha2_512', '" + str.ToUpper() + "'), 2) as XHASH; ";
            }

            string hash = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            try
            {
                using (CONN)
                {
                    var command = new SqlCommand(S, CONN);
                    using (command)
                    using (var RSD = command.ExecuteReader())
                    {
                        if (RSD.HasRows)
                        {
                            RSD.Read();
                            hash = RSD.GetValue(0).ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: getSqlServerHASH <" + str + ">");
                return "";
            }

            return hash;
        }


        /// <summary>
    /// Gets or sets the global gateway ID.
    /// </summary>
        public string GatewayID
        {
            get
            {
                return _GatewayID;
            }

            private set
            {
                _GatewayID = value;
            }
        }

        /// <summary>
    /// Sets the ocr processing parms.
    /// </summary>
    /// <param name="SourceGuid">    The source GUID.</param>
    /// <param name="SourceTypeCode">The source type code.</param>
    /// <returns></returns>
        public bool SetOcrProcessingParms(string SourceGuid, string SourceTypeCode, string FileName)
        {
            FileName = UTIL.RemoveSingleQuotes(FileName);
            bool b = false;
            string S = "";
            if (SourceTypeCode.ToUpper().Equals("A"))
            {
                S = "Update EmailAttachment set RequireOcr = 1 where EmailGuid = '" + SourceGuid + "' and AttachmentName = '" + FileName + "' ";
            }
            else if (SourceTypeCode.ToUpper().Equals("C"))
            {
                S = "Update DataSource set RequireOcr = 1 where SourceGuid = '" + SourceGuid + "'";
            }
            else
            {
                return false;
            }

            b = ExecuteSqlNewConn(90101, S);

            // WDM CHECK THIS
            // If b Then
            // ProxyArchive.consoleOcrSingleFile(gGateWayID, SourceGuid, SourceTypeCode)
            // End If

            return b;
        }

        public string CkColData(string TblName, string ColName, string tData)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string xData = "";
            int K;
            int CurrLen = tData.Length;
            int MaxLen = 0;
            string table_name = "";
            string column_name = "";
            string data_type = "";
            int character_maximum_length = 0;
            bool B = false;
            var loopTo = Information.UBound(TblCols, 2);
            for (K = 1; K <= loopTo; K++)
            {
                table_name = Strings.UCase(TblCols[0, K]);
                column_name = Strings.UCase(TblCols[1, K]);
                data_type = TblCols[2, K];
                character_maximum_length = Conversions.ToInteger(TblCols[3, K]);
                if (table_name.Equals(Strings.UCase(TblName)))
                {
                    if (column_name.Equals(Strings.UCase(ColName)))
                    {
                        B = true;
                        xData = tData;
                        break;
                    }
                }
            }

            if (B)
            {
                if (character_maximum_length < CurrLen)
                {
                    // tData  = Mid(tData, 1, MaxLen)
                    xData = Strings.Mid(tData, 1, character_maximum_length);
                }
                // 'Session("ErrMsgs") = 'Session("ErrMsgs") + "<br>" + "" + ColName + " > " + Str(character_maximum_length) + " characters - truncated."
                else
                {
                    xData = tData;
                }
            }

            return xData;
        }

        /// <summary>
    /// LoadColInfo reads table_name, column_name, data_type, character_maximum_length from INFORMATION_SCHEMA.COLUMNS.
    /// </summary>
    /// <remarks></remarks>
        public void LoadColInfo()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " select table_name, column_name, data_type, character_maximum_length  ";
            S = S + " from INFORMATION_SCHEMA.COLUMNS ";
            // S = S + " where table_name = 'Project' "
            S = S + " order by table_name, column_name";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string table_name = "";
            string column_name = "";
            string data_type = "";
            string character_maximum_length = "";
            if (Information.UBound(TblCols, 2) > 2)
            {
                return;
            }

            TblCols = new string[5, 1];
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    table_name = RSData.GetValue(0).ToString();
                    column_name = RSData.GetValue(1).ToString();
                    data_type = RSData.GetValue(2).ToString();
                    character_maximum_length = RSData.GetValue(3).ToString();
                    II = Information.UBound(TblCols, 2) + 1;
                    var oldTblCols = TblCols;
                    TblCols = new string[5, II + 1];
                    if (oldTblCols is object)
                        for (var i1 = 0; i1 <= oldTblCols.Length / oldTblCols.GetLength(1) - 1; ++i1)
                            Array.Copy(oldTblCols, i1 * oldTblCols.GetLength(1), TblCols, i1 * TblCols.GetLength(1), Math.Min(oldTblCols.GetLength(1), TblCols.GetLength(1)));
                    TblCols[0, II] = table_name;
                    TblCols[1, II] = column_name;
                    TblCols[2, II] = data_type;
                    TblCols[3, II] = character_maximum_length;
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
        }

        public void setEmailCrcHash(bool isadmin)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (!isadmin)
            {
                MessageBox.Show("Sorry, administrative authority needed for this function, please contact your corporate admin - returning.");
                return;
            }

            var ListOfEmailIdentifiers = new Dictionary<string, string>();
            string S = "";
            S = S + " select EmailGuid, CreationTime, SenderEmailAddress, Subject ";
            S = S + " from Email ";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string EmailGuid = "";
            DateTime CreationTime;
            string SenderEmailAddress = "";
            string Subject = "";
            if (Information.UBound(TblCols, 2) > 2)
            {
                return;
            }

            II = 0;
            TblCols = new string[5, 1];
            string Msg = "";
            SqlDataReader RSData = null;
            My.MyProject.Forms.frmMain.PB1.Value = 0;
            My.MyProject.Forms.frmMain.PB1.Maximum = 15000;

            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    My.MyProject.Forms.frmMain.SB.Text = II.ToString();
                    My.MyProject.Forms.frmMain.SB.Refresh();
                    Application.DoEvents();
                    Msg = "";
                    try
                    {
                        EmailGuid = RSData.GetValue(0).ToString();
                        CreationTime = RSData.GetDateTime(1);
                        SenderEmailAddress = RSData.GetValue(2).ToString();
                        Subject = RSData.GetValue(3).ToString();
                        string EmailIdentifier = UTIL.genEmailIdentifier(CreationTime, SenderEmailAddress, Subject);
                        ListOfEmailIdentifiers.Add(EmailGuid, EmailIdentifier);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            My.MyProject.Forms.frmMain.PB1.Value = 0;
            My.MyProject.Forms.frmMain.PB1.Maximum = ListOfEmailIdentifiers.Count + 2;
            II = 0;
            var ListOfGuids = new List<string>();
            string MySql = "";
            string sVal = "";
            foreach (string sGuid in ListOfEmailIdentifiers.Keys)
            {
                Application.DoEvents();
                sVal = ListOfEmailIdentifiers[sGuid];
                MySql = "*";
                MySql = "Update Email set EmailIdentifier = '" + sVal + "' where EmailGuid = '" + sGuid + "' ";
                b = ExecuteSqlNewConn(90102, MySql);
                if (!b)
                {
                    ListOfGuids.Add(sGuid);
                }

                II += 1;
                if (II % 5 == 0)
                {
                    My.MyProject.Forms.frmMain.SB.Text = II.ToString() + " of " + ListOfEmailIdentifiers.Count.ToString() + " / " + ListOfGuids.Count.ToString();
                    My.MyProject.Forms.frmMain.SB.Refresh();
                }

                Application.DoEvents();
                MySql = "***********";
            }

            II = 0;
            foreach (string sGuid in ListOfGuids)
            {
                Application.DoEvents();
                MySql = "*";
                MySql = "delete from Email where EmailGuid = '" + sGuid + "' ";
                b = ExecuteSqlNewConn(90103, MySql);
                II += 1;
                if (II % 10 == 0)
                {
                    My.MyProject.Forms.frmMain.SB.Text = II.ToString() + " of " + ListOfEmailIdentifiers.Count.ToString();
                    My.MyProject.Forms.frmMain.SB.Refresh();
                }

                Application.DoEvents();
                MySql = "***********";
            }

            My.MyProject.Forms.frmMain.SB.Text = "Done.";
            MessageBox.Show("Update complete.");
        }

        /// <summary>
    /// LoadColInfo reads table_name, column_name, data_type, character_maximum_length from
    /// INFORMATION_SCHEMA.COLUMNS based on the provided Table Name.
    /// </summary>
    /// <param name="TableName">The name of the table to retrieve column information about.</param>
    /// <remarks></remarks>
        public void LoadColInfo(string TableName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " select table_name, column_name, data_type, character_maximum_length  " + Constants.vbCrLf;
            S = S + " from INFORMATION_SCHEMA.COLUMNS " + Constants.vbCrLf;
            S = S + " where table_name = '" + TableName + "' " + Constants.vbCrLf;
            S = S + " order by table_name, column_name" + Constants.vbCrLf;
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string table_name = "";
            string column_name = "";
            string data_type = "";
            string character_maximum_length = "";
            if (Information.UBound(TblCols, 2) > 2)
            {
                return;
            }

            TblCols = new string[5, 1];
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    table_name = RSData.GetValue(0).ToString();
                    column_name = RSData.GetValue(1).ToString();
                    data_type = RSData.GetValue(2).ToString();
                    character_maximum_length = RSData.GetValue(3).ToString();
                    II = Information.UBound(TblCols, 2) + 1;
                    var oldTblCols = TblCols;
                    TblCols = new string[5, II + 1];
                    if (oldTblCols is object)
                        for (var i1 = 0; i1 <= oldTblCols.Length / oldTblCols.GetLength(1) - 1; ++i1)
                            Array.Copy(oldTblCols, i1 * oldTblCols.GetLength(1), TblCols, i1 * TblCols.GetLength(1), Math.Min(oldTblCols.GetLength(1), TblCols.GetLength(1)));
                    TblCols[0, II] = table_name;
                    TblCols[1, II] = column_name;
                    TblCols[2, II] = data_type;
                    TblCols[3, II] = character_maximum_length;
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
        }

        public void Audit(string sql, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int i = 0;
            int j = 0;
            string s = sql.Trim();
            string Tbl = GetTableNameFromSql(sql);
            // Dim wc As String = GetWhereClauseFromSql(sql)
            string TypeStmt = GetTypeSqlStmt(sql);
            Tbl = Strings.UCase(Tbl);
            sql = UTIL.RemoveSingleQuotes(sql);
            var A = Strings.Split(sql, " ");
            modGlobals.gCurrUserGuidID = UserID;
            bool b = AuditInsert(DateTime.Today.ToString(), modGlobals.gCurrUserGuidID, sql, Tbl, TypeStmt, DateAndTime.Now.ToString());
            if (!b)
            {
                Console.WriteLine("Audit Failed: " + sql);
            }
        }

        public string ckNull(string tVal)
        {
            if (tVal.Trim().Length == 0)
            {
                return "null";
            }
            else
            {
                return tVal;
            }
        }

        public bool AuditInsert(string ChangeID, string UserID, string Msg, string TableName, string TypeChange, string ChangeDate)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = false;
            string S = "";
            S = S + " INSERT INTO audit(";
            S = S + "UserID,";
            S = S + "SqlStmt,";
            S = S + "TableName,";
            S = S + "TypeChange,";
            S = S + "ChangeDate, ChangeID) values (";
            S = S + "'" + UserID + "'" + ",";
            S = S + "'" + Msg + "'" + ",";
            S = S + "'" + TableName + "'" + ",";
            S = S + "'" + TypeChange + "'" + ",";
            S = S + "'" + ChangeDate + "',";
            S = S + "'" + ChangeID + "'" + ")";
            b = ExecuteSqlNoAudit(S);
            if (!b)
            {
                Console.WriteLine("Audit Failed: " + S);
            }

            return b;
        }

        public string AddNulls(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int i = 0;
            int j = 0;
            while (Strings.InStr(S, ",,", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, ",,", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 1);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, ",)", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, ",)", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 1);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "=)", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "=)", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 1);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "= ,", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "= ,", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 2);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "= )", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "= )", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 2);
                S = s1 + "null" + s2;
            }

            return S;
        }

        public string AddNullsToUpdate(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int i = 0;
            int j = 0;
            while (Strings.InStr(S, "= ,", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "= ,", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 2);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "= )", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "= )", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 2);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "=,", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "=,", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 1);
                S = s1 + "null" + s2;
            }

            while (Strings.InStr(S, "=)", CompareMethod.Text) > 0)
            {
                i = Strings.InStr(S, "=)", CompareMethod.Text);
                j = i + 1;
                string s1 = Strings.Mid(S, 1, i);
                string s2 = Strings.Mid(S, i + 1);
                S = s1 + "null" + s2;
            }

            return S;
        }

        public bool ckDbConnection(string From)
        {
            ddebug = false;
            bool b = false;
            string CS = getRepoConnStr();
            CkConn();
            try
            {
                if (gConn is null)
                {
                    try
                    {
                        gConn.ConnectionString = CS;
                        gConn.Open();
                        b = true;
                    }
                    catch (Exception ex)
                    {
                        xTrace(28000, "ckDbConnection", ex.Message.ToString());
                        b = false;
                        LOG.WriteToArchiveLog("ERROR From '" + From + "' clsDatabaseARCH : ckDbConnection : 243a : ", ex);
                        if (ddebug)
                            LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbConnection : 25 : " + gConn.ConnectionString);
                    }
                }

                if (gConn.State == ConnectionState.Closed)
                {
                    if (ddebug)
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbConnection : 26 : " + gConn.ConnectionString);
                    try
                    {
                        CS = getRepoConnStr();
                        if (CS == null)
                        {
                            CS = System.Configuration.ConfigurationManager.AppSettings["ECMREPO"];
                        }

                        if (gConn.State == ConnectionState.Open)
                        {
                            gConn.Close();
                        }

                        gConn.ConnectionString = CS;
                        gConn.Open();
                        b = true;
                    }
                    catch (Exception ex)
                    {
                        try
                        {
                            if (gConn.State == ConnectionState.Open)
                            {
                                gConn.Close();
                            }

                            CS = System.Configuration.ConfigurationManager.AppSettings["ECMREPO"];
                            if (gConn.State == ConnectionState.Open)
                            {
                                gConn.Close();
                            }

                            gConn.ConnectionString = CS;
                            gConn.Open();
                            return true;
                        }
                        catch (Exception ex2)
                        {
                            LOG.WriteToArchiveLog("ERROR From '" + From + " ' clsDatabaseARCH : ckDbConnection : 23e: ", ex);
                        }

                        LOG.WriteToArchiveLog("ERROR From '" + From + " ' clsDatabaseARCH : ckDbConnection : 23b: ", ex);
                        b = false;
                        bool ShowBox = false;
                        if (ShowBox & modGlobals.gRunUnattended == false)
                            MessageBox.Show("The database connection failed at error marker 2301.2334.1 : " + Constants.vbCrLf + ex.Message);
                    }
                }
                else
                {
                    b = true;
                }
            }
            catch (Exception ex)
            {
                if (ddebug)
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbConnection : 43 : " + CS);
                xTrace(28002, "ckDbConnection", ex.Message.ToString());
                b = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbConnection : 313 : ", ex);
            }

            if (ddebug)
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbConnection : 44 : " + CS);
            return b;
        }

        public bool UseEncrypted()
        {
            string strVal = System.Configuration.ConfigurationManager.AppSettings["UseEncrypted"];
            if (strVal.Equals("1"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public string resetIsoConnStr(int SecureID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tKey = "CS" + SecureID.ToString();
            string fn = "CS" + SecureID.ToString() + ".cs";
            ISO.PersistDataSave(tKey, "");
            return fn;
        }

        public string getIsoConnStr(int SecureID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tKey = "CS" + SecureID.ToString();
            string cs = ISO.PersistDataRead(tKey);
            return cs;
        }

        public void saveIsoConnStr(int SecureID, string ECS)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tKey = "CS" + SecureID.ToString();
            string fn = "CS" + SecureID.ToString() + ".cs";
            ISO.PersistDataSave(tKey, ECS);
        }

        // Public Function getGateWayConnStr(SecureID As Integer) As String

        // Dim CS As String = "" Dim strSecID = SecureID.ToString

        // CS = getIsoConnStr(SecureID) If (CS.Length > 0) Then gDictOfConstr.Add(SecureID, CS) CS =
        // ENC.AES256DecryptString(CS) Return CS End If If gDictOfConstr.Count > 0 Then If
        // gDictOfConstr.ContainsKey(SecureID) Then CS = gDictOfConstr(SecureID) CS =
        // ENC.AES256DecryptString(CS) End If Else 'Dim ProxyGateway As New SVCGateway.Service1Client Try If
        // (ProxyGateway Is Nothing) Then ProxyGateway = New SVCGateway.Service1Client End If 'The next
        // statement, GetCS, is defined in clsSecureLogin.cls , project clsSecureLogin CS =
        // ProxyGateway.getCS(SecureID) If (CS.Contains("ERROR:")) Then Else saveIsoConnStr(SecureID, CS)
        // gDictOfConstr.Add(SecureID, CS) CS = ENC.AES256DecryptString(CS) End If Catch ex As Exception CS =
        // "" ' xTrace(666, "getRepoConnStr", "Failed to get Gateway CS: " , ex) Finally
        // ProxyGateway = Nothing GC.Collect() GC.WaitForPendingFinalizers() End Try End If

        // Return CS

        // End Function

        public string getLicenseConnStr()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string pw = System.Configuration.ConfigurationManager.AppSettings["ENCPW"];
            pw = ENC.AES256DecryptString(pw);
            string CS = System.Configuration.ConfigurationManager.AppSettings["ECMLICENSE"];
            CS = CS.Replace("@@PW@@", pw);
            return CS;
        }

        public string getRepoConnStr()
        {
            // If gTraceFunctionCalls.Equals(1) Then
            // LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodInfo.GetCurrentMethod().ToString)
            // End If

            string pw = System.Configuration.ConfigurationManager.AppSettings["ENCPW"];
            pw = ENC.AES256DecryptString(pw);
            string CS = System.Configuration.ConfigurationManager.AppSettings["ECMREPO"];
            CS = CS.Replace("@@PW@@", pw);
            return CS;
        }

        public string setConnStr()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            return getRepoConnStr();
        }

        public string getGateWayConnStrX(string gGateWayID)
        {
            return setConnStr();
        }

        public string getThesaurusConnStr()
        {
            return modGlobals.setThesaurusConnStr();
        }

        public void setpW(string tVal)
        {
            CurrUserPW = tVal;
        }

        public SqlConnection GetConnection()
        {
            CkConn();
            return gConn;
        }

        public SqlDataAdapter getSqlAdaptor(string Sql)
        {
            CkConn();
            string sSelect = Sql;
            var da = new SqlDataAdapter(sSelect, gConn);
            // da.MissingSchemaAction = MissingSchemaAction.AddWithKey
            var CMD = new SqlCommandBuilder(da);
            return da;
        }

        public void CkConn()
        {
            if (gConn is null)
            {
                try
                {
                    gConn = new SqlConnection();
                    gConn.ConnectionString = getRepoConnStr();
                    gConn.Open();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR: clsDatabaseARCH : CkConn : 338 : ", ex);
                }
            }

            if (gConn.State == ConnectionState.Closed)
            {
                try
                {
                    gConn.ConnectionString = getRepoConnStr();
                    gConn.Open();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("clsDatabaseARCH : CkConn : 348.1 : ", ex);
                }
            }
        }

        public void CloseConn()
        {
            if (gConn is null)
            {
            }
            else
            {
                if (gConn.State == ConnectionState.Open)
                {
                    gConn.Close();
                }

                gConn.Dispose();
            }

            GC.Collect();
        }

        public void ResetConn()
        {
            if (gConn is null)
            {
                try
                {
                    gConn.ConnectionString = getRepoConnStr();
                    gConn.Open();
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ResetConn : 378 : ", ex);
                }
            }
            else
            {
                if (gConn.State == ConnectionState.Open)
                {
                    gConn.Close();
                }

                try
                {
                    gConn.ConnectionString = getRepoConnStr();
                    gConn.Open();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ResetConn : 390 : ", ex);
                }
            }

            if (gConn.State == ConnectionState.Closed)
            {
                try
                {
                    gConn.ConnectionString = getRepoConnStr();
                    gConn.Open();
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ResetConn : 400 : ", ex);
                }
            }
        }

        public int iExecCountStmt(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            CloseConn();
            CkConn();
            int cnt = -1;
            string wc = "";
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                xTrace(30021, "iExecCountStmt", ex.Message.ToString());
                cnt = -1;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iExecCountStmt : 100 : ", ex);
            }

            return cnt;
        }

        public int iGetRowCount(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int i;
            int cnt = -1;
            string wc = "";
            i = Strings.InStr(S, "order by", CompareMethod.Text);
            if (i > 0)
            {
                S = Strings.Mid(S, 1, i - 1);
            }

            i = Strings.InStr(S, " WHERE", CompareMethod.Text);
            if (i > 0)
            {
                wc = Strings.Mid(S, i);
            }

            i = Strings.InStr(S, "select", CompareMethod.Text);
            if (i > 0)
            {
                s1 = "Select count(*) as CNT from";
                i = Strings.InStr(S, " from", CompareMethod.Text);
                if (i > 0)
                {
                    s2 = Strings.Mid(S, i + 5);
                    s2 = Strings.Trim(s2);
                    i = Strings.InStr(1, s2, " ");
                    if (i > 0)
                    {
                        s2 = Strings.Mid(s2, 1, i);
                        s2 = Strings.Trim(s2);
                    }
                }
                else
                {
                    return -1;
                }
            }
            else
            {
                return -1;
            }

            S = s1 + " " + s2 + wc;
            try
            {
                using (gConn)
                {
                    // Console.WriteLine(gConnStr)

                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    // Call Read before accessing data.
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    // Dim ss As String = ""
                    // ss = RSData.GetValue(0).ToString
                    // cnt = RSData.Item(0)
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // WDM Write to log
                xTrace(30021, "iGetRowCount", ex.Message.ToString());
                cnt = -1;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iGetRowCount : 449 : ", ex);
            }

            return cnt;
        }

        public int iDataExist(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = 0;
            using (gConn)
            {
                // Console.WriteLine(gConnStr)

                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();

                // Call Read before accessing data.
                RSData.Read();
                cnt = RSData.GetInt32(0);
                // Dim ss As String = ""
                // ss = RSData.GetValue(0).ToString
                // cnt = RSData.Item(0)
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public int iGetMaxRowNbrFromXml()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string S = " select max(RowNbr) from InitialLoadData";
            CloseConn();
            CkConn();
            int cnt = 1;
            using (gConn)
            {
                // Console.WriteLine(gConnStr)

                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                // Call Read before accessing data.
                RSData.Read();
                cnt = RSData.GetInt32(0);
                // Dim ss As String = ""
                // ss = RSData.GetValue(0).ToString
                // cnt = RSData.Item(0)
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public string getOneVal(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tVal = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                tVal = RSData.GetValue(0).ToString();
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return tVal;
        }

        public bool xckEmailExists(string SenderEmailAddress, string ReceivedByName, string ReceivedTime, string SenderName, string SentOn)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string S = "";
            S = S + " SELECT [SenderEmailAddress]     ";
            S = S + " ,[ReceivedByName]";
            S = S + " ,[ReceivedTime]     ";
            S = S + " ,[SenderName]";
            S = S + " ,[SentOn]";
            S = S + " FROM  [Email]";
            S = S + " where [UserID] = '" + modGlobals.gCurrUserGuidID + "'";
            S = S + " and [SenderEmailAddress] = 'XXX'";
            S = S + " and [ReceivedByName] = 'XXX'";
            S = S + " and [ReceivedTime] = '2008-01-10 12:22:06.000'";
            S = S + " and [SenderName] = 'XXX'";
            S = S + " and [SentOn] = '2008-01-10 12:19:14.000'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            if (cnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        /// <summary>
    /// Cks the email unique identifier exists.
    /// </summary>
    /// <param name="EmailGuid">The email unique identifier.</param>
    /// <returns></returns>
        public int ckEmailGuidExists(string EmailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " SELECT count(*) from Email where EmailGuid = '" + EmailGuid + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public int ckContentGuidExists(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " SELECT count(*) from DataSource where SourceGuid = '" + SourceGuid + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public string getSourceDatatypeByGuid(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " SELECT[SourceTypeCode] from DataSource where SourceGuid = '" + SourceGuid + "'";
            CloseConn();
            CkConn();
            string tVal = "";
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                tVal = RSData.GetValue(0).ToString();
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
                GC.Collect();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return tVal;
        }

        public void IncrementNextID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            CloseConn();
            CkConn();
            string S = "update [NextIdNbr] set IdNbr = IdNbr + 1 ";
            bool b = ExecuteSqlNewConn(S, false);
        }

        public bool SetFolderAsActive(string FolderName, string sAction)
        {
            string SS = " ";
            SS = "update  [EmailFolder] set [SelectedForArchive] = '" + sAction + "' where FolderName = '" + FolderName + "'";
            bool b = ExecuteSqlNewConn(SS, false);
            return b;
        }

        public int getNextID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string S = "Select max([IdNbr]) FROM [NextIdNbr] ";
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                cnt = cnt + 1;
            }

            return cnt;
        }

        public void SetUserDefaultNotifications(string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "INSERT INTO [OwnerNotifications]";
            S = S + " ([OwnerNotificationID]";
            S = S + " ,[NotifyText]";
            S = S + " ,[NotifyType]";
            S = S + " ,[ImportanceLevel]";
            S = S + " ,[CreateDate]";
            S = S + " , [ExpireDate]";
            S = S + " ,[ResponseRequired]";
            S = S + " ,[OwnerNotificationDate]";
            S = S + " ,[EnteredById]";
            S = S + " )";
            S = S + " VALUES ";
            S = S + " ('" + UserID + "'";
            S = S + " ,'Please Setup your account'";
            S = S + " ,'O'";
            S = S + " ,'H'";
            S = S + " ,getdate()";
            S = S + " ,getdate() + 360";
            S = S + " ,'Y'";
            S = S + " ,getdate()";
            S = S + " ,'AutoUpdate')";
            bool b = ExecuteSqlNewConn(S, false);
        }

        public int CountUserEntries()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string S = "Select count(*) from UserData ";
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public int getGlobalSeachCnt(string UID)
        {
            string tQuery = "";
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) FROM [GlobalSeachResults] where userid = '" + UID + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public void ckUserInfoData()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string S = "Select count(*) from UserData where UserID = '" + modGlobals.gCurrUserGuidID + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            if (cnt < 100)
            {
                for (int i = 100; i <= 705; i++)
                {
                    string tUid = "PP" + Conversion.Str(i).Trim();
                    if (i == 700)
                    {
                        tUid = "PPADMIN";
                    }

                    if (i == 701)
                    {
                        tUid = "PPDEV";
                    }

                    string S1 = "Select count(*) from UserData where UserID = '" + tUid + "'";
                    int k = SelCount(S1);
                    if (k == 0)
                    {
                        S1 = "INSERT INTO Userdata";
                        S1 = S1 + " (UserID";
                        S1 = S1 + " ,UserPW";
                        S1 = S1 + " ,ExpireDate";
                        S1 = S1 + " ,UserLevel";
                        S1 = S1 + " ,UserClassification";
                        S1 = S1 + " ,CreateDate";
                        S1 = S1 + " ,UserName";
                        S1 = S1 + " ,UserEmail";
                        S1 = S1 + " ,SecurityQuestion";
                        S1 = S1 + " ,SecurityAnswer";
                        S1 = S1 + " ,EmergencyPhoneNbr)";
                        S1 = S1 + " VALUES ";
                        S1 = S1 + " ('" + tUid + "'";
                        if (tUid.Equals("PP621") | tUid.Equals("PPADMIN") | tUid.Equals("PPDEV"))
                        {
                            S1 = S1 + " ,'junebug'";
                        }
                        else
                        {
                            S1 = S1 + " ,'password'";
                        }

                        S1 = S1 + " ,getdate() + 720";
                        if (tUid.Equals("PP621") | tUid.Equals("PPADMIN") | tUid.Equals("PPDEV"))
                        {
                            S1 = S1 + " ,'" + "A" + "'";
                        }
                        else
                        {
                            S1 = S1 + " ,'" + "U" + "'";
                        }

                        S1 = S1 + " ,'" + "O" + "'";
                        S1 = S1 + " ,'" + DateAndTime.Now.ToString() + "'";
                        S1 = S1 + " ,'Owner Name'";
                        S1 = S1 + " ,'" + tUid + ".PassagePoint.org" + "'";
                        S1 = S1 + " ,'" + "You need to set this up." + "'";
                        S1 = S1 + " ,'" + "You need to set this up." + "'";
                        S1 = S1 + " ,'" + "555-555-1212" + "')";
                        bool b = ExecuteSqlNewConn(S1, false);
                        if (b)
                        {
                            SetUserDefaultNotifications(tUid);
                        }
                    }
                }
            }
        }

        public int SelCount(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public bool ckAdminUser(string Userid, string PW)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select userid from dco.<SchemaName>.admin_user where userid = '" + Userid + "' and password = '" + PW + "'";
            S = "Select userid from ADMIN_USER where userid = '" + Userid + "' and password = '" + PW + "'";
            int i = 0;
            SqlDataReader rsData;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                b = true;
            }
            else
            {
                b = false;
            }

            rsData.Close();
            rsData = null;
            return b;
        }

        public string getAdminUserId(string Userid, string PW)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select useridnbr from admin_user where userid = '" + Userid + "' and password = '" + PW + "'";
            S = "Select useridnbr from ADMIN_USER where userid = '" + Userid + "' and password = '" + PW + "'";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public string getDocCatIdByName(string CatName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select CategoryID  FROM DocumentCategories  where CategoryName = '" + CatName + "' ";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public string getUserNameByID(string Userid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select UserName FROM Users where UserID = '" + Userid + "' ";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public string getUserLoginByUserid(string Userid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select UserLoginID FROM Users where UserID = '" + Userid + "' ";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public void AddProfileFileTypes(string ProfileName, ListBox LB)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SqlDataReader rsData = null;
            try
            {
                bool b = true;
                string S = "Select [SourceTypeCode] FROM  [LoadProfileItem] where ProfileName = '" + ProfileName + "' order by [SourceTypeCode]";
                int i = 0;
                string FileType = "";
                int II = 0;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        b = true;
                        FileType = rsData.GetValue(0).ToString();
                        var loopTo = LB.Items.Count - 1;
                        for (II = 0; II <= loopTo; II++)
                        {
                            string tStr = LB.Items[II].ToString();
                            if ((tStr ?? "") == (FileType ?? ""))
                            {
                                b = false;
                                break;
                            }
                        }

                        if (b == true)
                        {
                            LB.Items.Add(FileType);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                // WDM Write to log
                LOG.WriteToArchiveLog("clsDatabaseARCH : AddProfileFileTypes : 816 : ", ex);
            }

            rsData.Close();
            rsData = null;
        }

        public void GetSkipWords(ref ArrayList A)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SqlDataReader rsData = null;
            try
            {
                bool b = true;
                string S = "Select [tgtWord] FROM [SkipWords] order by [tgtWord]";
                int i = 0;
                string SkipWord = "";
                int II = 0;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        b = true;
                        SkipWord = rsData.GetValue(0).ToString().ToUpper();
                        A.Add(SkipWord);
                    }
                }
            }
            catch (Exception ex)
            {
                // WDM Write to log
                xTrace(300277, "GetSkipWords", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetSkipWords : 100 : ", ex);
            }

            rsData.Close();
            rsData = null;
        }

        public string getDeviceID(string InventoryNo)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select DEVICEID FROM INVENTORY WHERE INVENTORYNO = " + InventoryNo;
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public string getPhotoTitle(ref int PhotoID, ref string pTitle)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select Caption, PhotoID from photos ";
            int i = 0;
            string tempTitle = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                while (rsData.Read())
                {
                    if (i == PhotoID)
                    {
                        PhotoID = rsData.GetInt32(1);
                        pTitle = rsData.GetValue(0).ToString();
                        break;
                    }

                    i = i + 1;
                }

                tempTitle = pTitle;
            }
            else
            {
                tempTitle = "No Photo Found";
            }

            rsData.Close();
            rsData = null;
            return tempTitle;
        }

        public string getPhotoTitle(ref int PhotoID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string S = "Select Caption from photos where PhotoID = " + PhotoID;
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(1).ToString();
            }
            else
            {
                id = "No Photo Found";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public string getContactID(string FirstName, string LastName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string SS = "Select ContactID FROM Contacts ";
            SS = SS + " where NameFirst = '" + FirstName + "' ";
            SS = SS + " 	and NameLast = '" + LastName + "'";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(SS, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public bool RecordExists(string Tbl, string WhereVar, string CompareVal)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string SQL = "Select * from " + Tbl + " where " + WhereVar + " = '" + CompareVal + "'";
            int i = 0;
            i = iGetRowCount(SQL);
            if (i == 0)
            {
                b = false;
            }

            return b;
        }

        public string getNextKey(string TBL, string tCol)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            CloseConn();
            CkConn();
            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string S = "Select max(" + tCol + ") + 1 from " + TBL;
            string d = "";

            // Dim cnt As Double = -1

            SqlDataReader rsData = null;
            bool b = false;
            try
            {
                // rsData = SqlQry(sql, rsData)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                d = rsData.GetValue(0).ToString();
                if (Strings.Len(d) == 0)
                {
                    d = "0";
                }
                // Dim ss As String = ""
                // ss = rsData.GetValue(0).ToString
                // cnt = rsData.Item(0)
                rsData.Close();
            }
            // End Using
            catch (Exception ex)
            {
                // WDM Write to log
                // xTrace(1010177, "getNextKey", ex.Message.ToString + " : " + "Error 99.23.1x - " + S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getNextKey : 908 : ", ex);
            }

            return d;
        }

        public string getNextKey(string TBL, string tCol, string SQL)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            // Dim sql As String = "Select max(" + tCol + ") + 1 from " + TBL
            string d = "";

            // Dim cnt As Double = -1

            SqlDataReader rsData = null;
            bool b = false;
            b = SqlQry(SQL, ref rsData);
            rsData.Read();
            d = rsData.GetValue(0).ToString();
            rsData.Close();
            return d;
        }

        public string getKeyByLookupCol(string TBL, string kCol, string tCol, string LookUpVal)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string sql = "Select " + kCol + " from " + TBL + " where " + tCol + " = '" + LookUpVal + "'";
            string d = "";

            // Dim cnt As Double = -1

            SqlDataReader rsData = null;
            bool b = false;
            b = SqlQry(sql, ref rsData);
            if (rsData.HasRows)
            {
                rsData.Read();
                d = rsData.GetValue(0).ToString();
            }
            else
            {
                d = "";
            }

            rsData.Close();
            // End Using
            return d;
        }

        public string getKeyByLookupCol(string TBL, string kCol, string tCol, int LookUpVal)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tQuery = "";
            string s1 = "";
            string s2 = "";
            string s3 = "";
            string sql = "Select " + kCol + " from " + TBL + " where " + tCol + " = " + LookUpVal.ToString();
            string d = "";

            // Dim cnt As Double = -1

            SqlDataReader rsData = null;
            bool b = false;
            b = SqlQry(sql, ref rsData);
            if (rsData.HasRows)
            {
                rsData.Read();
                d = rsData.GetValue(0).ToString();
            }
            else
            {
                d = "";
            }

            rsData.Close();
            // End Using
            return d;
        }

        public int ValidateUserByUid(string uid, string upw)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) as CNT from Users where UserID = '" + uid + "' and UserPassword = '" + upw + "'";
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    RSData.Read();
                    i = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateUserByUid : 965 : ", ex);
                }
            }

            return i;
        }

        public bool ValidateContentOwnership(string tgtGuid, string contentTypeCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            string uid = modGlobals.gCurrUserGuidID;
            if (contentTypeCode.ToUpper().Equals(".MSG"))
            {
                S = "Select count(*) as CNT from EMAIL where Emailguid = '" + tgtGuid + "' and UserID = '" + uid + "' ";
            }
            else
            {
                S = "Select count(*) as CNT from DataSource where SourceGuid = '" + tgtGuid + "' and DataSourceOwnerUserID = '" + uid + "' ";
            }

            bool isOwner = false;
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    // Call Read before accessing data.
                    RSData.Read();
                    i = RSData.GetInt32(0);
                    // Dim ss As String = ""
                    // ss = RSData.GetValue(0).ToString
                    // cnt = RSData.Item(0)
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    if (i > 0)
                    {
                        isOwner = true;
                    }
                    else
                    {
                        isOwner = false;
                    }
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateContentOwnership : 100 : ", ex);
                    isOwner = false;
                }
            }

            return isOwner;
        }

        public bool ValidateCoOwner(string OwnerGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from CoOwner where PreviousOwnerUserID = '" + OwnerGuid + "' and CurrentOwnerUserID = '" + modGlobals.gCurrUserGuidID + "'";
            string uid = modGlobals.gCurrUserGuidID;

            // If contentTypeCode.ToUpper.Equals(".MSG") Then
            // S = "Select count(*) as from EMAIL where Emailguid = '" + tgtGuid  + "' and UserID = '" + uid + "' "
            // Else
            // S = "Select count(*) as from DataSource where SourceGuid = '" + tgtGuid  + "' and DataSourceOwnerUserID = '" + uid + "' "
            // End If

            bool isCoOwner = false;
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    // Call Read before accessing data.
                    RSData.Read();
                    i = RSData.GetInt32(0);
                    // Dim ss As String = ""
                    // ss = RSData.GetValue(0).ToString
                    // cnt = RSData.Item(0)
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    if (i > 0)
                    {
                        isCoOwner = true;
                    }
                    else
                    {
                        isCoOwner = false;
                    }
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateContentOwnership : 100 : ", ex);
                    isCoOwner = false;
                }
            }

            return isCoOwner;
        }

        public bool ValidateCoOwnerOfContent(string ContentGuid, string ContentType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string OwnerGuid = getContentOwnerGuid(ContentGuid, ContentType);
            if (OwnerGuid.Trim().Length == 0)
            {
                return false;
            }

            string S = "Select count(*) from CoOwner where PreviousOwnerUserID = '" + OwnerGuid + "' and CurrentOwnerUserID = '" + modGlobals.gCurrUserGuidID + "'";
            string uid = modGlobals.gCurrUserGuidID;
            bool isCoOwner = false;
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    // Call Read before accessing data.
                    RSData.Read();
                    i = RSData.GetInt32(0);
                    // Dim ss As String = ""
                    // ss = RSData.GetValue(0).ToString
                    // cnt = RSData.Item(0)
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    if (i > 0)
                    {
                        isCoOwner = true;
                    }
                    else
                    {
                        isCoOwner = false;
                    }
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateContentOwnership : 100 : ", ex);
                    isCoOwner = false;
                }
            }

            return isCoOwner;
        }

        public string getContentOwnerGuid(string tgtGuid, string contentTypeCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            string OwnerGuid = "";
            if (contentTypeCode.ToUpper().Equals(".MSG"))
            {
                S = "Select Userid from EMAIL where Emailguid = '" + tgtGuid + "'";
            }
            else
            {
                S = "Select DataSourceOwnerUserID from DataSource where SourceGuid = '" + tgtGuid + "' ";
            }

            bool isOwner = false;
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    // Call Read before accessing data.
                    if (RSData.HasRows)
                    {
                        RSData.Read();
                        OwnerGuid = RSData.GetValue(0).ToString();
                        RSData.Close();
                        RSData = null;
                        command.Connection.Close();
                        command = null;
                    }
                    else
                    {
                        OwnerGuid = "";
                    }
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateContentOwnership : 100 : ", ex);
                }
            }

            return OwnerGuid;
        }

        public int ValidateUserId(string uid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) as CNT from Userdata where UserID = '" + uid + "'";
            int i = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                try
                {
                    // Call Read before accessing data.
                    RSData.Read();
                    i = RSData.GetInt32(0);
                    // Dim ss As String = ""
                    // ss = RSData.GetValue(0).ToString
                    // cnt = RSData.Item(0)
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
                catch (Exception ex)
                {
                    // WDM Write to log
                    i = 0;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ValidateUserId : 980 : ", ex);
                }
            }

            return i;
        }

        public string getAuthority(string uid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (uid == null)
            {
                // "Error","User id has not been set...")
                return "";
            }

            string S = "";
            S = S + " Select Admin ";
            S = S + " FROM Users ";
            S = S + " where UserID = '" + uid + "'";
            string Auth = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(0).ToString();
            rsData.Close();
            rsData = null;
            string AuthDesc = "User";
            if (Auth.ToUpper().Equals("A"))
            {
                AuthDesc = "Admin";
            }

            if (Auth.ToUpper().Equals("G"))
            {
                AuthDesc = "Global Searcher";
            }

            if (Auth.ToUpper().Equals("S"))
            {
                AuthDesc = "Super Admin";
            }

            return AuthDesc;
        }

        public string getPhotoExt(string pid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (pid == null)
            {
                // "Error","User id has not been set...")
                return "";
            }

            string S = "";
            S = S + " Select [PhotoFqn]";
            S = S + " FROM Photos ";
            S = S + " where PhotoID = '" + pid + "'";
            string Auth = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(0).ToString();
            rsData.Close();
            rsData = null;
            return Auth;
        }

        public string getPhotoImgType(string pid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (pid == null)
            {
                // "Error","User id has not been set...")
                return "";
            }

            string S = "";
            S = S + " Select ImgType ";
            S = S + " FROM Photos ";
            S = S + " where PhotoID = '" + pid + "'";
            string Auth = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(0).ToString();
            rsData.Close();
            rsData = null;
            return Auth;
        }

        public string getUserType(string uid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " Select [UserID]";
            S = S + " ,[UserPW]";
            S = S + " ,[ExpireDate]";
            S = S + " ,[UserLevel]";
            S = S + " ,[UserNbr]";
            S = S + " ,[UserClassification]";
            S = S + " ,[CreateDate]";
            S = S + " FROM Userdata";
            S = S + " where UserID = '" + uid + "'";
            string Auth = "";
            string queryString = S;
            CloseConn();
            CkConn();
            int cnt = -1;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(5).ToString();
            rsData.Close();
            rsData = null;
            return Auth.Trim();
        }

        public string getSourceCrc(string SourceGuid, string SourceType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "";
                if (SourceType.Equals("EMAIL"))
                {
                    S = "Select CRC from email where EmailGuid = '" + SourceGuid + "'";
                }
                else
                {
                    S = "Select AttributeValue from SourceAttribute where SourceGuid = '" + SourceGuid + "' AND AttributeName = 'CRC'";
                }

                string CRC = "";
                string queryString = S;
                CloseConn();
                CkConn();
                int cnt = -1;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                CRC = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
                return CRC.Trim();
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public string getSourceImageHash(string SourceGuid, string SourceType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string ImageHash = "";
                string S = "";
                if (SourceType.Equals("EMAIL"))
                {
                    S = "Select ImageHash from email where EmailGuid = '" + SourceGuid + "'";
                }
                else
                {
                    S = "Select ImageHash from DataSource where SourceGuid = '" + SourceGuid + "'";
                }

                string CRC = "";
                string queryString = S;
                CloseConn();
                CkConn();
                int cnt = -1;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                ImageHash = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
                return ImageHash.Trim();
            }
            catch (Exception ex)
            {
                return "";
            }
        }

        public int getSourceLength(string SourceGuid, string SourceType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "";
                if (SourceType.Equals("EMAIL"))
                {
                    S = "Select MsgSize from Email where EmailGuid = '" + SourceGuid + "'";
                }
                else
                {
                    S = "Select FileLength from DataSource where SourceGuid = '" + SourceGuid + "'";
                }

                int FLEN = 0;
                string queryString = S;
                CloseConn();
                CkConn();
                int cnt = -1;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                FLEN = rsData.GetInt32(0);
                rsData.Close();
                rsData = null;
                return FLEN;
            }
            catch (Exception ex)
            {
                return -1;
            }
        }

        public bool SqlQry(string sql, ref SqlDataReader rsData)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (ddebug)
            {
                LOG.WriteToArchiveLog("____________________________________________");
                LOG.WriteToArchiveLog("Started: " + DateAndTime.Now.ToString());
                LOG.WriteToArchiveLog(sql);
                Console.WriteLine("____________________________________________");
                Console.WriteLine("Started: " + DateAndTime.Now.ToString());
                Console.WriteLine(sql);
            }

            var CMDX = new SqlCommand();
            string queryString = sql;
            bool rc = false;
            rsData = null;
            if (gConn.State == ConnectionState.Open)
            {
                gConn.Close();
            }

            CloseConn();
            CkConn();
            if (ddebug)
                Console.WriteLine("SQLQRY Started: " + DateAndTime.Now.ToString());
            if (ddebug)
                LOG.WriteToArchiveLog("SQLQRY Started: " + DateAndTime.Now.ToString());
            try
            {
                // Dim CMDX As New SqlCommand(sql, gConn)
                CMDX.Connection = gConn;
                CMDX.ExecuteReader();
                rsData = CMDX.ExecuteReader();
                CMDX.Dispose();
                CMDX = null;
                return true;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQry : 1085 : ", ex);
                return false;
            }
        }

        public int NewID(string Tbl, string idCol)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select max(" + idCol + ")+1 from " + Tbl;
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                int iStr = rsData.GetInt32(0);
                rsData.Close();
                rsData = null;
                return iStr;
            }
            else
            {
                rsData.Close();
                rsData = null;
                return 0;
            }
        }

        public string getMaxPhotoID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select max(photoid) from photos ";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                string iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
                return iStr;
            }
            else
            {
                rsData.Close();
                rsData = null;
                return "0";
            }
        }

        public string getPhotoIDBycaption(string Caption)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select photoid from photos where caption = '" + Caption + "'";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                string iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
                return iStr;
            }
            else
            {
                rsData.Close();
                rsData = null;
                return "0";
            }
        }

        public string getUserPW(string UID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select UserPW from userdata where userid = '" + UID + "'";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                rsData.Close();
                rsData = null;
            }

            return iStr.Trim();
        }

        public string getFqnFromGuid(string SourceGuid, string TgtTbl = "DataSource")
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            if (TgtTbl.ToUpper().Equals("DATASOURCE"))
            {
                s = "Select FQN FROM DataSource Where SourceGuid = '" + SourceGuid + "'";
            }
            else
            {
                s = "Select AttachmentName FROM EmailAttachment Where RowGuid = '" + SourceGuid + "'";
            }

            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
            }
            // rsData = Nothing
            else
            {
                rsData.Close();
                // rsData = Nothing
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            return iStr.Trim();
        }

        public string getFilenameByGuid(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select SourceName FROM DataSource Where SourceGuid = '" + SourceGuid + "'";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                rsData.Close();
                rsData = null;
            }

            return iStr.Trim();
        }

        public string getUserGuidID(string UserLoginId)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }


            // MessageBox.Show("getUserGuidID 1: " + UserLoginId)
            string s = "";
            s = "Select [UserID] FROM  [Users] Where UserLoginID = '" + UserLoginId + "'";
            int I = 0;
            string iStr = "";
            SqlDataReader rsData = null;
            // MessageBox.Show("getUserGuidID 2")
            try
            {
                // MessageBox.Show("getUserGuidID 3 gGateWayID: " + gGateWayID.ToString)
                string CS = getRepoConnStr();
                // MessageBox.Show("getUserGuidID 4: " + CS)
                var CONN = new SqlConnection(CS);
                // MessageBox.Show("getUserGuidID 5")
                CONN.Open();
                // MessageBox.Show("getUserGuidID 6: " + s)
                var command = new SqlCommand(s, CONN);
                // MessageBox.Show("getUserGuidID 7")
                rsData = command.ExecuteReader();
                // MessageBox.Show("getUserGuidID 8")
                if (rsData.HasRows)
                {
                    // MessageBox.Show("getUserGuidID 9")
                    rsData.Read();
                    iStr = rsData.GetValue(0).ToString();
                    rsData.Close();
                    rsData = null;
                }
                else
                {
                    // MessageBox.Show("getUserGuidID 10")
                    rsData.Close();
                    rsData = null;
                }
            }
            // MessageBox.Show("getUserGuidID 11")
            catch (Exception ex)
            {
                // MessageBox.Show("Could not attach to the server with the current loginid of: " + UserLoginId + " - continuing.")
            }
            // MessageBox.Show("getUserGuidID 12: " + iStr.Trim)
            return iStr.Trim();
        }

        public string getQuickRefIdNbr(string QuickRefName, string UserGuidID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select  [QuickRefIdNbr] FROM [QuickRef] where QuickRefName = '" + QuickRefName + "' and UserID = '" + UserGuidID + "'";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                iStr = "-1";
                rsData.Close();
                rsData = null;
            }

            return iStr.Trim();
        }

        public string getNextDocID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select max (DocumentID) FROM [Documents]";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                rsData.Close();
                rsData = null;
            }

            return iStr.Trim();
        }

        public string getDocIdByFqn(string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            string s = "";
            s = "Select DocumentID FROM [Documents] where DocFqn = '" + FQN + "'";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                rsData.Close();
                rsData = null;
            }

            return iStr.Trim();
        }

        public bool ckDocExistByFqn(string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            string s = "";
            s = "Select DocumentID FROM [Documents] where DocFqn = '" + FQN + "'";
            SqlDataReader rsData = null;
            int I = 0;
            bool B = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Close();
                rsData = null;
                B = true;
            }
            else
            {
                rsData.Close();
                rsData = null;
                B = false;
            }

            return B;
        }

        public int ExecCountSQL(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int I = 0;
            try
            {
                SqlDataReader rsData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    string iStr = rsData.GetValue(0).ToString();
                    I = Conversions.ToInteger(iStr);
                    rsData.Close();
                    rsData = null;
                }
                else
                {
                    rsData.Close();
                    rsData = null;
                    I = 0;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecCountSQL : 0001 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecCountSQL : 0001a : " + S);
                I = -1;
            }

            return I;
        }

        public bool VerifyUserID(string UID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            s = "Select count(*) from Userdata where Userid = '" + UID + "'";
            SqlDataReader rsData = null;
            int I = 0;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                string iStr = rsData.GetValue(0).ToString();
                I = Conversions.ToInteger(iStr);
                rsData.Close();
                rsData = null;
                if (I > 0)
                {
                    return true;
                }
                else
                {
                    return false;
                }
            }
            else
            {
                rsData.Close();
                rsData = null;
                return false;
            }
        }

        public bool ItemExists(string Tbl, string idCol, string ColVal, string ColType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            bool b = false;
            CloseConn();
            CkConn();
            if (ColType == "N")
            {
                s = "Select count(*) from " + Tbl + " where " + idCol + " = " + ColVal;
            }
            else
            {
                s = "Select count(*) from " + Tbl + " where " + idCol + " = '" + ColVal + "'";
            }

            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                int iStr = rsData.GetInt32(0);
                if (iStr > 0)
                {
                    b = true;
                }
                else
                {
                    b = false;
                }
            }
            else
            {
                return b;
            }

            rsData.Close();
            rsData = null;
            return b;
        }

        public bool ValidateDeviceID(string ID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "";
            if (ID.Length == 0)
            {
                return false;
            }

            bool b = false;
            s = "Select count(*) from Devices where deviceid = " + ID;
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                int iStr = rsData.GetInt32(0);
                if (iStr > 0)
                {
                    b = true;
                }
                else
                {
                    b = false;
                }
            }
            else
            {
                return b;
            }

            rsData.Close();
            rsData = null;
            return b;
        }

        public SqlDataReader xxSqlQry(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            lock (this)
            {
                SqlDataReader rsDataQry = null;
                try
                {
                    // 'Session("ActiveError") = False
                    bool ddebug = true;
                    string queryString = sql;
                    bool rc = false;
                    CloseConn();
                    CkConn();
                    if (gConn.State == ConnectionState.Open)
                    {
                        gConn.Close();
                    }

                    CloseConn();
                    CkConn();
                    var command = new SqlCommand(sql, gConn);
                    try
                    {
                        rsDataQry = command.ExecuteReader();
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQry : 1319 : ", ex);
                        LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQry : 1319 Server too Busy : " + Constants.vbCrLf + sql);
                    }

                    command.Dispose();
                    command = null;
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR: SqlQry 100 - Server too busy: ", ex);
                }

                return rsDataQry;
            }
        }

        public void SqlQryNewThread(string tSql, ref SqlConnection tConn, ref SqlDataReader rsDataQry)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool rc = false;

            // SyncLock Me
            // Dim tConn As New SqlConnection
            string CS = getRepoConnStr();
            var xConn = new SqlConnection(CS);
            xConn.Open();
            var command = new SqlCommand(tSql, xConn);
            try
            {
                rsDataQry = command.ExecuteReader();
            }
            catch (Exception ex)
            {
                // xTrace(10081, "clsDataBase:SqlQry" + ex.Message)
                // xTrace(10092, "clsDataBase:SqlQry", ex.StackTrace)
                // xTrace(10033, "clsDataBase:SqlQry", tSql)
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryNewThread : 1337 : ", ex);
            }

            command.Dispose();
            command = null;

            // End SyncLock

        }

        public SqlDataReader SqlQry(string sql, SqlConnection Conn)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }


            // 'Session("ActiveError") = False
            bool ddebug = false;
            string queryString = sql;
            bool rc = false;
            SqlDataReader rsDataQry = null;
            if (Conn.State != ConnectionState.Open)
            {
                Conn.Open();
            }

            var command = new SqlCommand(sql, Conn);
            try
            {
                rsDataQry = command.ExecuteReader();
            }
            catch (Exception ex)
            {
                // 'Session("ActiveError") = True
                // 'Session("ErrMsg") = ex.Message
                // 'Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                // xTrace(18001, "clsDataBase:SqlQry" + ex.Message)
                // xTrace(19002, "clsDataBase:SqlQry", ex.StackTrace)
                // xTrace(13003, "clsDataBase:SqlQry", sql)
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQry : 1352 : ", ex);
            }

            // If ddebug Then log.WriteToArchiveLog("SQLQRY Ended: " + Now.tostring)
            // If ddebug Then Console.WriteLine("SQLQRY Ended: " + Now.tostring)

            command.Dispose();
            command = null;
            return rsDataQry;
        }

        public SqlDataReader SqlQryNewConn(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }


            // 'Session("ActiveError") = False
            bool ddebug = false;
            string queryString = sql;
            bool rc = false;
            SqlDataReader rsDataQry = null;
            var CN = new SqlConnection(getRepoConnStr());
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            var command = new SqlCommand(sql, CN);
            try
            {
                rsDataQry = command.ExecuteReader();
            }
            catch (Exception ex)
            {
                // 'Session("ActiveError") = True
                // 'Session("ErrMsg") = ex.Message
                // 'Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                // xTrace(10301, "clsDataBase:SqlQry" + ex.Message)
                // xTrace(10042, "clsDataBase:SqlQry", ex.StackTrace)
                // xTrace(10035, "clsDataBase:SqlQry", sql)
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryNewConn : 1368a : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryNewConn : 1368b : " + sql);
            }

            // If ddebug Then log.WriteToArchiveLog("SQLQRY Ended: " + Now.tostring)
            // If ddebug Then Console.WriteLine("SQLQRY Ended: " + Now.tostring)

            command.Dispose();
            command = null;
            return rsDataQry;
        }

        public void UpdateRemoteMachine(string CompanyID, string MachineID, string Applied, string LicenseID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string RemoteConnStr = "";
            CompanyID = UTIL.RemoveSingleQuotes(CompanyID);
            MachineID = UTIL.RemoveSingleQuotes(MachineID);
            RemoteConnStr = System.Configuration.ConfigurationManager.AppSettings["HELP.DBARCH"];
            RemoteConnStr = ENC.AES256DecryptString(RemoteConnStr);
            var CN = new SqlConnection(RemoteConnStr);
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            string QrySql = "UPDATE [License] SET [MachineID] = '" + MachineID + "' ,[Applied] = " + Applied + " WHERE CompanyID = '" + CompanyID + "' and LicenseID = " + LicenseID;
            var command = new SqlCommand(QrySql, CN);
            int iRows = command.ExecuteNonQuery();
            if (iRows == 0)
            {
                LOG.WriteToArchiveLog("ERROR 132.34.1 - Failed to udpate remote Machine ID.");
            }

            // UPDATE [License] SET [MachineID] = 'XX' ,[Applied] = 1 WHERE CompanyID = 'XX' and LicenseID = 0
        }

        public SqlDataReader SqlQryRemoteConn(string QrySql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // 'Session("ActiveError") = False
            bool ddebug = false;
            bool rc = false;
            SqlDataReader rsDataQry = null;
            string RemoteConnStr = "";
            RemoteConnStr = System.Configuration.ConfigurationManager.AppSettings["HELP.DBARCH"];
            RemoteConnStr = ENC.AES256DecryptString(RemoteConnStr);
            var CN = new SqlConnection(RemoteConnStr);
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            var command = new SqlCommand(QrySql, CN);
            try
            {
                rsDataQry = command.ExecuteReader();
            }
            catch (Exception ex)
            {
                // 'Session("ActiveError") = True
                // 'Session("ErrMsg") = ex.Message
                // 'Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                // xTrace(104501, "clsDataBase:SqlQryRemoteConn" + ex.Message)
                // xTrace(106502, "clsDataBase:SqlQryRemoteConn", ex.StackTrace)
                // xTrace(107503, "clsDataBase:SqlQryRemoteConn", QrySql)
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryRemoteConn : 1368 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryRemoteConn : 1368a : " + QrySql);
            }

            // If ddebug Then log.WriteToArchiveLog("SQLQRY Ended: " + Now.tostring)
            // If ddebug Then Console.WriteLine("SQLQRY Ended: " + Now.tostring)

            command.Dispose();
            command = null;
            return rsDataQry;
        }

        public SqlDataReader SqlQryNewConn(string sql, string ConnectionString)
        {

            // 'Session("ActiveError") = False
            bool ddebug = false;
            string queryString = sql;
            bool rc = false;
            SqlDataReader rsDataQry = null;
            var CN = new SqlConnection(ConnectionString);
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            var command = new SqlCommand(sql, CN);
            try
            {
                rsDataQry = command.ExecuteReader();
            }
            catch (Exception ex)
            {
                // 'Session("ActiveError") = True
                // 'Session("ErrMsg") = ex.Message
                // 'Session("ErrStack") = ex.StackTrace + vbCrLf + vbCrLf + sql
                // xTrace(80401, "clsDataBase:SqlQry" + ex.Message)
                // xTrace(80052, "clsDataBase:SqlQry", ex.StackTrace)
                // xTrace(80036, "clsDataBase:SqlQry", sql)
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryNewConn : 1368aa : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : SqlQryNewConn : 1368bb : " + sql);
            }

            // If ddebug Then log.WriteToArchiveLog("SQLQRY Ended: " + Now.tostring)
            // If ddebug Then Console.WriteLine("SQLQRY Ended: " + Now.tostring)

            command.Dispose();
            command = null;
            return rsDataQry;
        }

        public void setGlobalConection()
        {
            CloseConn();
            CkConn();
        }

        public void closeGlobalConection()
        {
            if (gConn.State == ConnectionState.Open)
            {
                gConn.Close();
            }
        }

        public void ckSiteFacility(string FacilityID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string NewKey = Strings.Trim(FacilityID);
            string H = Conversion.Hex(Conversions.ToInteger(NewKey));
            int iCnt = SelCount("Select count(*) from sites where facilityID = " + FacilityID);
            if (iCnt > 0)
            {
                return;
            }

            iCnt = SelCount("Select count(*) from sites where sitecode = '?" + H + "'");
            if (iCnt > 0)
            {
                return;
            }

            int NextDispOrder = NewID("SITES", "SiteDisplayOrder");
            string S = "";
            S = S + " insert into sites (sitecode, sitename, facilityid, sitemenuname, SiteDisplayOrder)";
            S = S + " values ";
            S = S + " ('?" + H + "', 'Undefined Site', " + FacilityID + ", 'NA','" + NextDispOrder.ToString() + "')";
            bool b = ExecuteSqlNewConn(S, false);
        }

        public bool ExecuteSqlTx(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string TxName = "TX001";
            bool rc = false;

            // 'Session("ActiveError") = False
            // 'Session("ErrMsg") = ""
            // 'Session("ErrStack") = ""

            CloseConn();
            CkConn();
            using (gConn)
            {
                var dbCmd = gConn.CreateCommand();
                SqlTransaction transaction;

                // Start a local transaction
                transaction = gConn.BeginTransaction(TxName);

                // Must assign both transaction object and connection to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn;
                dbCmd.Transaction = transaction;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    // Attempt to commit the transaction.
                    transaction.Commit();

                    // Audit(sql)

                    // Dim debug As Boolean = False
                    // If debug Then
                    // Console.WriteLine("Successful execution: " + vbCrLf + sql)
                    // End If
                    rc = true;
                }
                catch (Exception ex)
                {
                    rc = false;

                    // 'Session("ActiveError") = True
                    // 'Session("ErrMsg") = "SQL Error check table PgmTrace: " , ex
                    // 'Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlTx : 1412.1 : ", ex);
                    // xTrace(1991, "ExecuteSql: ", "-----------------------")
                    // xTrace(1992, "ExecuteSql: ", ex.Message.ToString)
                    // xTrace(2993, "ExecuteSql: ", ex.StackTrace.ToString)
                    // xTrace(3994, "ExecuteSql: ", sql)

                    // Attempt to roll back the transaction.
                    try
                    {
                        transaction.Rollback();
                    }
                    catch (Exception ex2)
                    {
                        // This catch block will handle any errors that may have occurred on the server
                        // that would cause the rollback to fail, such as a closed connection.
                        Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
                        Console.WriteLine("  Message: {0}", ex2.Message);
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlTx : 1412 : " + ex2.Message);
                    }
                }
            }

            return rc;
        }

        public bool ExecuteSqlNoTx(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool rc = false;

            // 'Session("ActiveError") = False
            // 'Session("ErrMsg") = ""
            // 'Session("ErrStack") = ""

            CloseConn();
            CkConn();
            using (gConn)
            {
                var dbCmd = gConn.CreateCommand();

                // Must assign both transaction object and connection to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    rc = true;
                }
                catch (Exception ex)
                {
                    rc = false;

                    // 'Session("ActiveError") = True
                    // 'Session("ErrMsg") = "ExecuteNoTx SQL: " + vbCrLf + sql + vbCrLf + vbCrLf + ex.Message
                    // 'Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace

                    // xTrace(87, "ExecuteSqlNoTx: ", "-----------------------")
                    // xTrace(134360, "ExecuteSqlNoTx: ", ex.Message.ToString)
                    // xTrace(234361, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                    // xTrace(334362, "ExecuteSqlNoTx: ", sql)

                    // EL.Add("error 12.23.68: ", ex)

                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNoTx : 1428 : ", ex);
                }
            }

            return rc;
        }

        public bool xExecuteSqlNewConn(string sql, bool ValidateOwnerShip)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (ValidateOwnerShip == true)
            {
                if (TgtGuid.Length == 0)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.01 - TgtGuid left blank and is required, contact Dale as this is an error.")
                    LOG.WriteToArchiveLog("ERROR 666.01 - TgtGuid left blank and is required, contact Dale as this is an error.");
                    return false;
                }

                bool isOwner = ckContentOwnership(TgtGuid, modGlobals.gCurrUserGuidID);
                if (isOwner == false)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.01a - This will be removed - tried to update content you do not own, ABORTED!")
                    LOG.WriteToTraceLog("ExecuteSql: User '" + modGlobals.gCurrUserGuidID + "' tried to change '" + TgtGuid + "' w/o ownership.");
                    return false;
                }
            }

            bool rc = false;
            CloseConn();
            CkConn();
            using (gConn)
            {
                var dbCmd = gConn.CreateCommand();
                // Must assign both transaction object and connection to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    return true;
                }
                catch (Exception ex)
                {
                    rc = false;
                    if (Strings.InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0)
                    {
                        MessageBox.Show("It appears this user has DATA within the repository associated to them and cannot be deleted." + Constants.vbCrLf + Constants.vbCrLf + ex.Message);
                    }
                    else if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                    {
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSql : 1442.a : ", ex);
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSql : 1442.a : " + sql);
                        return true;
                    }
                    // messagebox.show("Execute SQL: " + ex.message + vbCrLf + "Please review the trace log." + vbCrLf + sql)
                    else if (ddebug)
                        Clipboard.SetText(sql);

                    // ' xTrace(39901, "ExecuteSqlNoTx: " , ex.Message.ToString)
                    // ' xTrace(39901, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                    // ' xTrace(39901, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSql : 1442.x : ", ex);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSql : 1442.x : " + Constants.vbCrLf + sql + Constants.vbCrLf);
                }
            }

            return rc;
        }

        public string MachineRegister(string MachineName, string NetWorkName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string MySql = "Select Count(*) from MachineRegistered where MachineName ='" + MachineName + "' and NetworkName = '" + NetWorkName + "' ";
            int iCnt = iCount(MySql);
            string MachineGuid = "";
            if (iCnt > 0)
            {
                try
                {
                    MySql = "Select MachineGuid from MachineRegistered where MachineName ='" + MachineName + "' and NetworkName = '" + NetWorkName + "' ";
                    CloseConn();
                    CkConn();
                    SqlDataReader rsData = null;
                    bool b = false;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(MySql, CONN);
                    rsData = command.ExecuteReader();
                    rsData.Read();
                    MachineGuid = rsData.GetValue(0).ToString();
                    rsData.Close();
                    rsData = null;
                }
                catch (Exception ex)
                {
                    // xTrace(12306, "clsDataBase:MachineRegister" + ex.Message)
                    LOG.WriteToArchiveLog("ERROR 56453.21: ", ex);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : MachineRegister : 2054 : ", ex);
                    return "NA";
                }
            }
            else
            {
                MySql = "";
                MachineGuid = getGuid();
                MySql += "INSERT INTO [MachineRegistered]" + Constants.vbCrLf;
                MySql += "(" + Constants.vbCrLf;
                MySql += "[MachineGuid]" + Constants.vbCrLf;
                MySql += ",[MachineName]" + Constants.vbCrLf;
                MySql += ",[NetWorkName]" + Constants.vbCrLf;
                MySql += ")" + Constants.vbCrLf;
                MySql += "VALUES " + Constants.vbCrLf;
                MySql += "(" + Constants.vbCrLf;
                MySql += "'" + MachineGuid + "'," + Constants.vbCrLf;
                MySql += "'" + MachineName + "'," + Constants.vbCrLf;
                MySql += "'" + NetWorkName + "'" + Constants.vbCrLf;
                MySql += ")" + Constants.vbCrLf;
                bool B = ExecuteSqlNewConn(90104, MySql);
            }

            return MachineGuid;
        }

        public bool ExecuteSqlNewConn(string sql, bool ValidateOwnerShip)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool BB = true;
            lock (this)
            {
                if (ValidateOwnerShip == true)
                {
                    if (TgtGuid.Length == 0)
                    {
                        if (modGlobals.gTgtGuid.Length > 0)
                        {
                            TgtGuid = modGlobals.gTgtGuid;
                        }
                        else
                        {
                            // If gRunUnattended = False Then MessageBox.Show("ERROR 666.04x1 - TgtGuid left blank and is required, contact ADMINISTRATOR as this is an error.")
                            LOG.WriteToArchiveLog("ERROR 666.04x1 - TgtGuid left blank and is required, contact ADMINISTRATOR as this is an error.");
                            return false;
                        }
                    }

                    bool isOwner = ckContentOwnership(TgtGuid, modGlobals.gCurrUserGuidID);
                    if (isOwner == false)
                    {
                        // messagebox.show("ERROR 666.04a - This will be removed - tried to update content you do not own, ABORTED!")
                        LOG.WriteToTraceLog("ExecuteSqlNewConn: User '" + modGlobals.gCurrUserGuidID + "' tried to change '" + TgtGuid + "' w/o ownership.");
                        return false;
                    }
                }

                bool rc = false;
                string CnStr = getRepoConnStr();
                if (CnStr.Contains("ERROR:"))
                {
                    // xTrace(19554121, "ExecuteSqlNoTx: ", "ERROR: Failed to acquire connection string from gateway.")
                    BB = false;
                }
                else if (CnStr.Length > 0)
                {
                    var CN = new SqlConnection(CnStr);
                    CN.Open();
                    var dbCmd = CN.CreateCommand();
                    using (CN)
                    {
                        dbCmd.Connection = CN;
                        try
                        {
                            dbCmd.CommandText = sql;
                            dbCmd.ExecuteNonQuery();
                            BB = true;
                        }
                        catch (Exception ex)
                        {
                            rc = false;
                            if (Strings.InStr(ex.Message, "Could not allocate space", CompareMethod.Text) > 0 & Strings.InStr(ex.Message, "is full", CompareMethod.Text) > 0)
                            {
                                My.MyProject.Forms.frmOutOfSpace.Show();
                                Application.DoEvents();
                            }

                            if (Strings.InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0)
                            {
                                // If gRunUnattended = False Then MessageBox.Show("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c0 It appears this user has DATA within the repository associated to them and cannot be deleted." + Constants.vbCrLf + Constants.vbCrLf + ex.Message);
                                BB = false;
                            }
                            else if (Strings.InStr(ex.Message, "HelpText", CompareMethod.Text) > 0)
                            {
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                            {
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                                LOG.WriteToArchiveLog("Advisory - clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 : ", ex);
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0)
                            {
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c2 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                                LOG.WriteToArchiveLog("Advisory - clsDatabaseARCH : ExecuteSqlNewConn : 1465c2 : ", ex);
                                LOG.WriteToArchiveLog("Advisory - clsDatabaseARCH : ExecuteSqlNewConn : 1465c2 : " + sql);
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate", CompareMethod.Text) > 0)
                            {
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c3 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                                LOG.WriteToArchiveLog("Advisory - clsDatabaseARCH : ExecuteSqlNewConn : 1466c3 : ", ex);
                                LOG.WriteToArchiveLog("Advisory - clsDatabaseARCH : ExecuteSqlNewConn : 1466c3 : " + sql);
                                BB = true;
                            }
                            else
                            {
                                // messagebox.show("Execute SQL: " + ex.message + vbCrLf + "Please review the trace log." + vbCrLf + sql)
                                // If ddebug Then Clipboard.SetText(sql)
                                BB = false;
                                // xTrace(1998121, "ExecuteSqlNoTx: ", ex.Message.ToString)
                                // xTrace(2998121, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                                // xTrace(3998121, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9448a2x.1: ", ex);
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9448a2x.2: " + Constants.vbCrLf + sql + Constants.vbCrLf);
                            }
                        }
                        finally
                        {
                            if (CN is object)
                            {
                                if (CN.State == ConnectionState.Open)
                                {
                                    CN.Close();
                                }

                                CN = null;
                            }

                            if (dbCmd is object)
                            {
                                dbCmd = null;
                            }
                        }
                    }
                }

                GC.Collect();
                GC.WaitForPendingFinalizers();
                GC.WaitForFullGCComplete();
            }

            return BB;
        }

        public bool ExecuteSqlSameConn(string sql, SqlConnection CN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool rc = false;
            var dbCmd = CN.CreateCommand();
            bool BB = true;
            using (CN)
            {
                dbCmd.Connection = CN;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    BB = true;
                }
                catch (Exception ex)
                {
                    rc = false;
                    if (Strings.InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0)
                    {
                        // If gRunUnattended = False Then MessageBox.Show("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c0 It appears this user has DATA within the repository associated to them and cannot be deleted." + Constants.vbCrLf + Constants.vbCrLf + ex.Message);
                        BB = false;
                    }
                    else if (Strings.InStr(ex.Message, "HelpText", CompareMethod.Text) > 0)
                    {
                        BB = true;
                    }
                    else if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                    {
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                        LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 : ", ex);
                        // LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 : " + sql)
                        BB = true;
                    }
                    else if (Strings.InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0)
                    {
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c2 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                        LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1465c2 : ", ex);
                        LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1465c2 : " + sql);
                        BB = true;
                    }
                    else if (Strings.InStr(ex.Message, "duplicate", CompareMethod.Text) > 0)
                    {
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c3 - NOT AN ERROR, JUST RI PROTECTING THE DBARCH.");
                        LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1466c3 : ", ex);
                        LOG.WriteToArchiveLog("Notification - clsDatabaseARCH : ExecuteSqlNewConn : 1466c3 : " + sql);
                        BB = true;
                    }
                    else
                    {
                        // messagebox.show("Execute SQL: " + ex.message + vbCrLf + "Please review the trace log." + vbCrLf + sql)
                        if (ddebug)
                            Clipboard.SetText(sql);
                        BB = false;
                        // xTrace(1998134, "ExecuteSqlNoTx: ", ex.Message.ToString)
                        // xTrace(2998134, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                        // xTrace(3998134, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9442a2x.1: ", ex);
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9442a2x.2: " + Constants.vbCrLf + sql + Constants.vbCrLf);
                    }
                }
            }

            GC.Collect();
            return BB;
        }

        public bool ExecuteSqlNewConn(int loc, string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool RC = true;
            string RetMsg = "";
            var CMD = new SqlCommand();
            string connString = getRepoConnStr();
            var conn = new SqlConnection(connString);
            try
            {
                conn.Open();
                bool SkipThis = false;
                if (!SkipThis)
                {
                    if (conn is null)
                    {
                        conn = new SqlConnection(getRepoConnStr());
                    }

                    if (conn.State == ConnectionState.Closed)
                    {
                        conn.ConnectionString = getRepoConnStr();
                        conn.Open();
                    }

                    CMD = conn.CreateCommand();
                    CMD.Connection = conn;

                    // Dim dbCmd As SqlCommand = conn.CreateCommand()
                    bool BB = true;
                    using (conn)
                    {
                        if (CMD.Connection.State == ConnectionState.Closed)
                        {
                            CMD.Connection = conn;
                        }

                        try
                        {
                            CMD.CommandText = sql;
                            CMD.ExecuteNonQuery();
                            BB = true;
                        }
                        catch (Exception ex)
                        {
                            RC = false;
                            if (Strings.InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0)
                            {
                                // If gRunUnattended = False Then MessageBox.Show("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                                LOG.WriteToArchiveLog("It appears this user has DATA within the repository associated to them and cannot be deleted." + Constants.vbCrLf + Constants.vbCrLf + ex.Message);
                            }
                            else if (Strings.InStr(ex.Message, "HelpText", CompareMethod.Text) > 0)
                            {
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                            {
                                // LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 : ", ex)
                                // LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c1 : " + sql)
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate key", CompareMethod.Text) > 0)
                            {
                                // log.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1465c2 : " , ex)
                                // log.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c2 : " + sql)
                                BB = true;
                            }
                            else if (Strings.InStr(ex.Message, "duplicate", CompareMethod.Text) > 0)
                            {
                                // log.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1466c3 : " , ex)
                                // log.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464c3 : " + sql)
                                BB = true;
                            }
                            else
                            {
                                if (ddebug)
                                    Clipboard.SetText(sql);
                                BB = false;
                                // xTrace(19981647, "ExecuteSqlNoTx: ", ex.Message.ToString)
                                if (ddebug)
                                    Debug.Print(ex.Message.ToString());
                                // xTrace(29981647, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                                // xTrace(39981647, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9442a1p1: " + loc.ToString() + " : ", ex);
                                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 9442a1p2: " + Constants.vbCrLf + sql + Constants.vbCrLf);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 2166a3x.2: " + Constants.vbCrLf + sql + Constants.vbCrLf);
            }
            finally
            {
                if (conn.State == ConnectionState.Open)
                {
                    conn.Close();
                }

                conn.Dispose();
                CMD.Dispose();
            }

            GC.Collect();
            GC.WaitForPendingFinalizers();
            return RC;
        }

        public bool ApplySqlStmt(string sql, ref string ErrMsg)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool rc = false;
            var CN = new SqlConnection(getRepoConnStr());
            CN.Open();
            var dbCmd = CN.CreateCommand();
            using (CN)
            {
                dbCmd.Connection = CN;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    rc = true;
                    ErrMsg = "";
                }
                catch (Exception ex)
                {
                    ErrMsg = ex.Message;
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ApplySqlStmt : 100: ", ex);
                }
            }

            if (CN.State == ConnectionState.Open)
            {
                CN.Close();
            }

            CN = null;
            dbCmd = null;
            return rc;
        }

        public bool ExecuteSqlLookupTable(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool rc = false;
            var CN = new SqlConnection(getRepoConnStr());
            CN.Open();
            var dbCmd = CN.CreateCommand();
            using (CN)
            {
                dbCmd.Connection = CN;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    rc = true;
                }
                catch (Exception ex)
                {
                    rc = false;
                    if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                    {
                        return true;
                    }
                    // xTrace(934161, "ExecuteSqlLookupTable: ", ex.Message.ToString)
                    // xTrace(934162, "ExecuteSqlLookupTable: ", Mid(sql, 1, 2000))
                }
            }

            if (CN.State == ConnectionState.Open)
            {
                CN.Close();
            }

            CN = null;
            dbCmd = null;
            return rc;
        }

        public bool ExecuteSql(string sql, string NewConnectionStr, bool ValidateOwnerShip)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (ValidateOwnerShip == true)
            {
                if (TgtGuid.Length == 0)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.05 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    LOG.WriteToArchiveLog("ERROR 666.05 - TgtGuid left blank and is required, contact ADMIN as this is an error.");
                    return false;
                }

                bool isOwner = ckContentOwnership(TgtGuid, modGlobals.gCurrUserGuidID);
                if (isOwner == false)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.05a - This will be removed - tried to update content you do not own, ABORTED!")
                    LOG.WriteToTraceLog("ExecuteSqlNewConn2: User '" + modGlobals.gCurrUserGuidID + "' tried to change '" + TgtGuid + "' w/o ownership.");
                    return false;
                }
            }

            try
            {
                bool rc = true;
                var CN = new SqlConnection(NewConnectionStr);
                CN.Open();
                var dbCmd = CN.CreateCommand();
                using (CN)
                {
                    dbCmd.Connection = CN;
                    try
                    {
                        dbCmd.CommandText = sql;
                        dbCmd.ExecuteNonQuery();
                        rc = true;
                    }
                    catch (Exception ex)
                    {
                        rc = false;
                        if (Strings.InStr(ex.Message, "The DELETE statement conflicted with the REFERENCE", CompareMethod.Text) > 0)
                        {
                            // If gRunUnattended = False Then MessageBox.Show("It appears this user has DATA within the repository associated to them and cannot be deleted." + vbCrLf + vbCrLf + ex.Message)
                            LOG.WriteToArchiveLog("It appears this user has DATA within the repository associated to them and cannot be deleted." + Constants.vbCrLf + Constants.vbCrLf + ex.Message);
                        }
                        else if (Strings.InStr(ex.Message, "duplicate key row", CompareMethod.Text) > 0)
                        {
                            LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNewConn : 1464 : ", ex);
                            return true;
                        }
                        // messagebox.show("Execute SQL: " + ex.message + vbCrLf + "Please review the trace log." + vbCrLf + sql)
                        else if (ddebug)
                            Clipboard.SetText(sql);
                        // xTrace(2343111, "ExecuteSqlNoTx: ", "-----------------------")
                        // xTrace(2343112, "ExecuteSqlNoTx: ", ex.Message.ToString)
                        // xTrace(2343113, "ExecuteSqlNoTx: ", ex.StackTrace.ToString)
                        // xTrace(2343114, "ExecuteSqlNoTx: ", Mid(sql, 1, 2000))
                        LOG.WriteToArchiveLog("ERROR: ExecuteSql 2001 - " + sql);
                    }
                }

                if (CN.State == ConnectionState.Open)
                {
                    CN.Close();
                }

                CN = null;
                dbCmd = null;
                return rc;
            }
            catch (Exception ex)
            {
                // xTrace(9914, "ExecuteSql", ex.Message.ToString)
                // If gRunUnattended = False Then MessageBox.Show(ex.Message)
                LOG.WriteToArchiveLog("ERROR ExecuteSql 100a1: ", ex);
                return false;
            }
        }

        public bool ExecSP(string spName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            bool TimeTrk = true;
            try
            {
                CloseConn();
                CkConn();
                if (TimeTrk)
                {
                    Console.WriteLine(spName + " Start: " + DateTime.Today.ToString());
                }

                var command = new SqlCommand(spName, gConn);
                command.CommandType = CommandType.StoredProcedure;
                command.CommandText = spName;
                command.CommandTimeout = 3600;
                command.ExecuteNonQuery();
                command = null;
                gConn.Close();
                B = true;
                if (TimeTrk)
                {
                    Console.WriteLine(spName + " End: " + DateTime.Today.ToString());
                }
            }
            catch (Exception ex)
            {
                // Session("ErrorLocation") = 'Session("ErrorLocation") + " : " , ex
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : ExecSP : 1498 : ", ex);
            }

            return B;
        }

        public bool SP_ApplyUpdate(string UpdateSql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string spName = "";
            spName = "funcEcmUpdateDB " + UpdateSql;
            bool B = false;
            // Dim TimeTrk As Boolean = True
            try
            {
                CloseConn();
                CkConn();
                // If TimeTrk Then
                // System.Console.WriteLine(spName + " Start: " + DateTime.Today.ToString)
                // End If
                // Dim command As SqlCommand = New SqlCommand(spName, gConn)
                // command.CommandType = Data.CommandType.StoredProcedure
                // command.CommandText = spName
                // command.CommandTimeout = 3600
                // command.ExecuteNonQuery()
                // command = Nothing
                // gConn.Close()

                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("funcEcmUpdateDB", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@pSql", UpdateSql));
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        connection.Dispose();
                        command.Dispose();
                    }
                }

                B = true;
            }
            // If TimeTrk Then
            // System.Console.WriteLine(spName + " End: " + DateTime.Today.ToString)
            // End If
            catch (Exception ex)
            {
                // Session("ErrorLocation") = 'Session("ErrorLocation") + " : " , ex
                Console.WriteLine(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : SP_ApplyUpdate : 100 : ", ex);
            }

            return B;
        }

        public bool ExecuteSqlNoAudit(string sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string TxName = "TX001";
            bool rc = false;
            CloseConn();
            CkConn();
            using (gConn)
            {
                var dbCmd = gConn.CreateCommand();

                // Dim transaction As SqlTransaction

                // transaction = gConn.BeginTransaction(TxName)

                // Must assign both transaction object and connection to dbCmd object for a pending local transaction.
                dbCmd.Connection = gConn;
                // dbCmd.Transaction = transaction

                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    // Attempt to commit the transaction.
                    // transaction.Commit()
                    // Dim debug As Boolean = False
                    // If debug Then
                    // Console.WriteLine("Successful execution: " + vbCrLf + sql)
                    // End If
                    rc = true;
                }
                catch (Exception ex)
                {
                    rc = false;
                    Console.WriteLine("Exception Type: {0}", ex.GetType());
                    Console.WriteLine("  Message: {0}" + ex.Message);
                    Console.WriteLine(sql);

                    // 'Session("ActiveError") = True
                    // 'Session("ErrMsg") = "ExecuteSqlNoAudit - SQL Error check table PgmTrace: " , ex
                    // 'Session("ErrStack") = "Stack Trace: " + vbCrLf + vbCrLf + ex.StackTrace

                    // xTrace(23435460, "ExecuteSql: ", "-----------------------")
                    // xTrace(23435461, "ExecuteSql: ", ex.Message.ToString)
                    // xTrace(23435462, "ExecuteSql: ", ex.StackTrace.ToString)
                    // xTrace(23435463, "ExecuteSql: ", sql)

                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSqlNoAudit : 1516 : ", ex);
                }
            }

            return rc;
        }

        public bool saveHistory(string SQL)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string typeSql = "";
            string tbl = "";
            int i = 0;
            int j = 0;
            i = Strings.InStr(1, SQL, " ", CompareMethod.Text);
            typeSql = Strings.Mid(SQL, 1, i - 1);
            typeSql = Strings.UCase(typeSql);
            if (typeSql == "INSERT")
            {
                i = Strings.InStr(1, SQL, "into", CompareMethod.Text);
                i = i + Strings.Len("into ");
                j = Strings.InStr(i, SQL, " ");
                tbl = Strings.Mid(SQL, i, j - i);
            }

            if (typeSql == "DELETE")
            {
                i = Strings.InStr(1, SQL, "from", CompareMethod.Text);
                i = i + Strings.Len("from ");
                j = Strings.InStr(i, SQL, " ");
                tbl = Strings.Mid(SQL, i, j - i);
            }

            if (typeSql == "UPDATE")
            {
                i = Strings.InStr(1, SQL, " ", CompareMethod.Text);
                i = i + Strings.Len(" ");
                j = Strings.InStr(i, SQL, " ");
                tbl = Strings.Mid(SQL, i, j - i);
            }

            tbl = Strings.UCase(tbl);
            if (tbl == "USER_ACCESS")
            {
                return true;
            }

            if (tbl == "HISTORY")
            {
                return true;
            }

            SQL = UTIL.RemoveSingleQuotes(SQL);
            // ** select tbl, sqlstmt,LAST_MOD_DATE,user_name,action from history
            // Public MachineName As String = ""
            // Public MachineIP As String = ""
            // Public UserID As String = ""

            string S = "insert into HISTORY (tbl, sqlstmt,LAST_MOD_DATE,user_name,action, HostName, IPAddr, Last_Mod_User, Create_user) values (";
            S = S + "'" + tbl + "',";
            S = S + "'" + SQL + "', ";
            S = S + " getdate(), ";
            // S = S + "'" + Now() + "',"
            S = S + "'" + LOG.getEnvVarUserID() + "',";
            S = S + "'" + typeSql + "',";
            S = S + "'" + DMA.getHostname() + "',";
            S = S + "'" + DMA.getIpAddr() + "',";
            S = S + "'" + LOG.getEnvVarUserID() + "',";
            S = S + "'" + LOG.getEnvVarUserID() + "')";

            // Clipboard.Clear()
            // Clipboard.SetText(S)

            b = ExecuteSqlNewConn(S, false);
            return b;
        }

        public string getCpuTime()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }


            // ** You can browse the available performance counters by
            // ** going to Control Panel | Administrative Tools | Performance and clicking Add.
            var perfCounter = new PerformanceCounter();
            int loopCount;
            string CPU = "";
            perfCounter.CategoryName = "Processor";
            perfCounter.CounterName = "% Processor Time";
            perfCounter.InstanceName = "_Total";
            for (loopCount = 1; loopCount <= 2; loopCount++)
                // Debug.WriteLine(perfCounter.NextValue.ToString())
                CPU = perfCounter.NextValue().ToString();
            perfCounter.Close();
            return CPU;
        }

        public string GetTableNameFromSql(string Sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string typeSql = "";
            string tbl = "";
            int i = 0;
            int j = 0;
            Sql = Strings.Trim(Sql);
            string s1 = "";
            string s2 = "";
            string ch = "";
            var loopTo = Strings.Len(Sql);
            for (i = 1; i <= loopTo; i++)
            {
                ch = Strings.Mid(Sql, i, 1);
                if (ch == "(")
                {
                    s1 = s1 + " " + ch;
                }
                else if (ch == ")")
                {
                    s1 = s1 + ch + " ";
                }
                else
                {
                    s1 = s1 + ch;
                }
            }

            Sql = s1;
            i = Strings.InStr(1, Sql, " ", CompareMethod.Text);
            typeSql = Strings.Mid(Sql, 1, i - 1);
            typeSql = Strings.UCase(typeSql);
            if (typeSql == "INSERT")
            {
                i = Strings.InStr(1, Sql, "into", CompareMethod.Text);
                i = i + Strings.Len("into ");
                j = Strings.InStr(i, Sql, " ");
                tbl = Strings.Mid(Sql, i, j - i);
            }

            if (typeSql == "DELETE")
            {
                i = Strings.InStr(1, Sql, "from", CompareMethod.Text);
                i = i + Strings.Len("from ");
                j = Strings.InStr(i, Sql, " ");
                tbl = Strings.Mid(Sql, i, j - i);
            }

            if (typeSql == "UPDATE")
            {
                i = Strings.InStr(1, Sql, " ", CompareMethod.Text);
                i = i + Strings.Len(" ");
                j = Strings.InStr(i, Sql, " ");
                tbl = Strings.Mid(Sql, i, j - i);
            }

            return tbl;
        }

        public string GetWhereClauseFromSql(string Sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string typeSql = "";
            string wc = "";
            string tbl = "";
            int i = 0;
            int j = 0;
            i = Strings.InStr(1, Sql, " where", CompareMethod.Text);
            if (i > 0)
            {
                wc = Strings.Mid(Sql, i);
            }

            return wc;
        }

        public string GetTypeSqlStmt(string Sql)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            string typeSql = "";
            string tbl = "";
            int i = 0;
            int j = 0;
            string SqlType = "";
            Sql = Strings.Trim(Sql);
            i = Strings.InStr(1, Sql, " ", CompareMethod.Text);
            typeSql = Strings.Mid(Sql, 1, i - 1);
            typeSql = Strings.UCase(typeSql);
            if (typeSql == "INSERT")
            {
                SqlType = typeSql;
            }

            if (typeSql == "DELETE")
            {
                SqlType = typeSql;
            }

            if (typeSql == "UPDATE")
            {
                SqlType = typeSql;
            }

            if (typeSql == "SELECT")
            {
                SqlType = typeSql;
            }

            return SqlType;
        }

        public bool ckModuleAuth(string UID, string AuthCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            AuthCode = Strings.UCase(AuthCode);
            bool AuthGranted = false;
            switch (AuthCode ?? "")
            {
                case "DBA":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "GRAPHICS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "INVENTORY":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "STANDARDS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "ACCESS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "ACTION":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "REPORTS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "COMPLAINTS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "COMPLAINANTS":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "EMPLOYMENT":
                    {
                        AuthGranted = false;
                        break;
                    }

                default:
                    {
                        AuthGranted = false;
                        // DMA.SaveErrMsg(, "Error 121.99.2", "100.10c - Incorrect authority code entered, returning...")
                        // 'Session("ErrMsg") = "Error 121.99.2"
                        // 'Session("ErrStack") = "100.10c - Incorrect authority code entered, returning..."
                        // Response.Redirect("frmErrDisplay.aspx")
                        return AuthGranted;
                    }
            }

            string Level = "";
            string s = "Select * from user_rights where user_name = '" + UID + "'";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            try
            {
                if (rsData.IsClosed)
                {
                    Console.WriteLine("ckModuleAuth HERE it is closed: " + UID);
                }
                else
                {
                    Console.WriteLine("ckModuleAuth HERE it is OPEN: " + UID);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckModuleAuth : 1680 : ", ex);
            }

            if (rsData.HasRows)
            {
                rsData.Read();
                Level = rsData.GetValue(rsData.GetOrdinal(AuthCode)).ToString();
                if (Level != "0")
                {
                    AuthGranted = true;
                }
                else
                {
                    AuthGranted = false;
                }
            }
            else
            {
                AuthGranted = false;
            }

            rsData.Close();
            // connection.Close()

            return AuthGranted;
        }

        public string getServerDbName()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // SELECT DB_NAME() AS DataBaseName
            string s = "Select DB_NAME() AS DataBaseName";
            SqlDataReader rsData = null;
            bool b = false;
            string ServerDbName = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            try
            {
                if (rsData.IsClosed)
                {
                    Console.WriteLine("getServerName HERE it is closed.");
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getServerDbName : 10 : ", ex);
            }

            if (rsData.HasRows)
            {
                rsData.Read();
                ServerDbName = rsData.GetValue(0).ToString();
            }

            rsData.Close();
            rsData = null;
            return ServerDbName;
        }

        public bool ckAuthority(string UID, string AuthCode)
        {
            bool AuthGranted = false;
            AuthCode = Strings.UCase(AuthCode);
            switch (AuthCode ?? "")
            {
                case "ADMIN":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "SUPER USER":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "USER":
                    {
                        AuthGranted = false;
                        break;
                    }

                default:
                    {
                        AuthGranted = false;
                        LOG.WriteToArchiveLog("Error 100.10a - Incorrect authority code entered, returning.");
                        return AuthGranted;
                    }
            }

            string Auth = "";
            string s = "Select user_type_cd from user_database where user_name = '" + UID + "' ";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(rsData.GetOrdinal(AuthCode)).ToString();
            if ((Auth ?? "") == (AuthCode ?? ""))
            {
                AuthGranted = true;
            }
            else
            {
                AuthGranted = false;
            }

            rsData.Close();
            return AuthGranted;
        }

        public bool UserHasAuthority(string UID, string AuthCode)
        {
            bool AuthGranted = false;
            AuthCode = Strings.UCase(AuthCode);
            switch (AuthCode ?? "")
            {
                case "EDIT":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "INSERT":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "UPDATE":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "DELETE":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "READ":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "MAINT":
                    {
                        AuthGranted = false;
                        break;
                    }

                case "EXECUTE":
                    {
                        AuthGranted = false;
                        break;
                    }

                default:
                    {
                        AuthGranted = false;
                        LOG.WriteToArchiveLog("Error 100.10t - Incorrect authority code entered, returning.");
                        return AuthGranted;
                    }
            }

            string Auth = "";
            string s = "Select user_type_cd from user_database where user_name = '" + UID + "' ";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Auth = rsData.GetValue(0).ToString();
            if (Auth == "ADMIN")
            {
                AuthGranted = true;
            }
            else
            {
                switch (AuthCode ?? "")
                {
                    case "INSERT":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "EDIT":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "UPDATE":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "DELETE":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = false;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "READ":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = true;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "MAINT":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    case "EXECUTE":
                        {
                            if (Auth == "SUPER USER")
                            {
                                AuthGranted = true;
                            }
                            else if (Auth == "USER")
                            {
                                AuthGranted = false;
                            }
                            else
                            {
                                AuthGranted = false;
                            }

                            break;
                        }

                    default:
                        {
                            AuthGranted = false;
                            break;
                        }
                }
            }

            rsData.Close();
            return AuthGranted;
        }

        public bool ckFldLen(string Title, string fld)
        {
            if (Strings.Len(fld) == 0)
            {
                LOG.WriteToArchiveLog("Error ckFldLen 100.10i - " + Title + " is a required field.");
                return false;
            }
            else
            {
                return true;
            }
        }

        // Public Sub log.WriteToArchiveLog(ByVal Msg )

        // Dim cPath As String = GetCurrDir() Dim tFQN = cPath + "\AdmsApp.Log" ' Create an instance of
        // StreamWriter to write text to a file. Using sw As StreamWriter = New StreamWriter(tFQN, True) '
        // Add some text to the file. sw.WriteLine(Now() + ": " + Msg) sw.Close() End Using

        // End Sub

        public string GetCurrDir()
        {
            string s = "";
            string ch = "";
            int i = 0;
            // s = Application.ExecutablePath
            s = System.Reflection.Assembly.GetExecutingAssembly().Location.ToString();
            if (Strings.InStr(1, s, @"\") > 0)
            {
                i = Strings.Len(s);
                ch = "";
                while (ch != @"\")
                {
                    i = i - 1;
                    ch = Strings.Mid(s, i, 1);
                }
            }

            string cPath = "";
            cPath = Strings.Mid(s, 1, i - 1);
            return cPath;
        }

        public byte[] RetrieveDocument(string DocID)
        {
            SqlConnection cn = null;
            cn.ConnectionString = gConnStr;
            cn.Open();
            string sql = "Select DocumentText from documents where documentid = " + DocID;
            var CMD = new SqlCommand(sql, cn);
            var da = new SqlDataAdapter(CMD);
            var ds = new DataSet();
            da.Fill(ds, "BLOBIMAGE");
            int c = ds.Tables["BLOBIMAGE"].Rows.Count;
            if (c > 0)
            {
                try
                {
                    byte[] bytBLOBData = (byte[])ds.Tables["BLOBIMAGE"].Rows[c - 1]["DocumentText"];
                    // Dim stmBLOBData As New MemoryStream(bytBLOBData)
                    // MS = stmBLOBData
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("Document Bytes Retrieved: " + bytBLOBData.Length);
                    cn.Close();
                    cn = null;
                    return bytBLOBData;
                }
                catch (Exception ex)
                {
                    // xTrace(12304, "clsDataBase:RetrieveDocument" + ex.Message)
                    Console.Write(ex.StackTrace);
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("*************************************");
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine(ex.Message);
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("********Inner Exception *********");
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine(ex.InnerException.Message);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : RetrieveDocument : 1856 : ", ex);
                }
            }

            cn.Close();
            cn = null;
            return null;
        }

        public string getDocumentFqnById(string DocID)
        {
            SqlConnection cn = null;

            // gConnStr = ConfigurationManager.ConnectionStrings(ConnectionStringID).ConnectionString

            cn.ConnectionString = gConnStr;
            cn.Open();
            string sql = "Select DocFqn from documents where documentid = " + DocID;
            var CMD = new SqlCommand(sql, cn);
            var da = new SqlDataAdapter(CMD);
            var ds = new DataSet();
            da.Fill(ds, "DocFqn");
            int c = ds.Tables["DocFqn"].Rows.Count;
            if (c > 0)
            {
                try
                {
                    string FQN = Conversions.ToString(ds.Tables["DocFqn"].Rows[c - 1]["DocFqn"]);
                    // Dim stmBLOBData As New MemoryStream(bytBLOBData)
                    // MS = stmBLOBData
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("Graphic Bytes Retrieved: " + FQN.Length);
                    cn.Close();
                    cn = null;
                    return FQN;
                }
                catch (Exception ex)
                {
                    // xTrace(12305, "clsDataBase:GetDocumentFqnById" + ex.Message)
                    Console.Write(ex.StackTrace);
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("*************************************");
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine(ex.Message);
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("********Inner Exception *********");
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine(ex.InnerException.Message);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : getDocumentFqnById : 1880 : ", ex);
                }
            }

            cn.Close();
            cn = null;
            return null;
        }

        public void ZTrace(int StmtID, string Stmt, string PgmName, Exception ex)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string ErrStack = ex.StackTrace.ToString();
            string ErrorSource = ex.Source.ToString();
            // Dim InnerException = ex.InnerException.Message.ToString
            string ErrMsg = ex.Message.ToString();
            // Dim exData As Collection = ex.Data
            string ConnectiveGuid = getGuid();
            PgmName = UTIL.RemoveSingleQuotes(PgmName);
            string S = "";
            Stmt = UTIL.RemoveSingleQuotes(Stmt);
            S = "INSERT INTO PgmTrace ([StmtID] ,[PgmName], ConnectiveGuid, stmt, UserID) VALUES(" + StmtID + ", '" + PgmName + "' , '" + ConnectiveGuid + "', '" + Stmt + "', '" + modGlobals.gCurrUserGuidID + "')";
            bool b = ExecuteSqlNewConn(S, false);
            if (b == false)
            {
                // 'Session("ErrMsg") = "StmtId Call: " + 'Session("ErrMsg")
                // 'Session("ErrStack") = "StmtId Call Stack: " + ''Session("ErrStack")
            }

            SaveErrMsg(ErrMsg, ErrStack, StmtID.ToString(), ConnectiveGuid);
        }

        public void FixSingleQuotes(ref string Stmt)
        {
            int I = 0;
            string CH = "";
            var loopTo = Stmt.Length;
            for (I = 1; I <= loopTo; I++)
            {
                CH = Strings.Mid(Stmt, I, 1);
                if (CH == "'")
                {
                    StringType.MidStmtStr(ref Stmt, I, 1, "`");
                }
            }
        }

        public void xTrace(int StmtID, string PgmName, string Stmt)
        {
            if (Stmt.Contains("Failed to save search results"))
            {
                return;
            }

            if (Stmt.Contains("Column names in each table must be unique"))
            {
                return;
            }

            if (Stmt.Contains("clsArchiver:ArchiveQuickRefItems"))
            {
                return;
            }

            try
            {
                FixSingleQuotes(ref Stmt);
                string S = "";
                PgmName = UTIL.RemoveSingleQuotes(PgmName);
                S = "INSERT INTO PgmTrace (StmtID ,PgmName, Stmt) VALUES(" + StmtID + ", '" + PgmName + "','" + Stmt + "')";
                bool b = ExecuteSqlNewConn(S, false);
                if (b == false)
                {
                    // 'Session("ErrMsg") = "StmtId Call: " + 'Session("ErrMsg")
                    // 'Session("ErrStack") = "StmtId Call Stack: " + ''Session("ErrStack")
                }
            }
            catch (Exception ex)
            {
                if (ddebug)
                    Debug.Print(ex.Message);
                if (modGlobals.gClipBoardActive == true)
                    Console.WriteLine(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ' xTrace : 1907 : ", ex);
            }
        }

        public bool ClearRestoreQueue(int gGateWayID, string UserID)
        {
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            try
            {
                string S = "Delete from RestoreQueue where UserID = '" + UserID + "'";
                bool b = ExecuteSqlNewConn(S, CS, false);
                return b;
            }
            catch (Exception ex)
            {
                if (ddebug)
                    Debug.Print(ex.Message);
                if (modGlobals.gClipBoardActive == true)
                    Console.WriteLine(ex.Message);
                LOG.WriteToArchiveLog("ClearRestoreQueue : ' xTrace : 5567 : ", ex);
                return false;
            }
        }

        public void RemoteTrace(int StmtID, string PgmName, string Stmt)
        {
            if (Stmt.Contains("Failed to save search results"))
            {
                return;
            }

            if (Stmt.Contains("Column names in each table must be unique"))
            {
                return;
            }

            if (Stmt.Contains("clsArchiver:ArchiveQuickRefItems"))
            {
                return;
            }

            // Dim CS As String = System.Configuration.ConfigurationManager.AppSettings("DEBUGREPO")
            string CS = getRepoConnStr();
            try
            {
                FixSingleQuotes(ref Stmt);
                string S = "";
                PgmName = UTIL.RemoveSingleQuotes(PgmName);
                S = "INSERT INTO PgmTrace (StmtID ,PgmName, Stmt) VALUES(" + StmtID + ", '" + PgmName + "','" + Stmt + "')";
                bool b = ExecuteSqlNewConn(S, CS, false);
                if (b == false)
                {
                    // 'Session("ErrMsg") = "StmtId Call: " + 'Session("ErrMsg")
                    // 'Session("ErrStack") = "StmtId Call Stack: " + ''Session("ErrStack")
                }
            }
            catch (Exception ex)
            {
                if (ddebug)
                    Debug.Print(ex.Message);
                if (modGlobals.gClipBoardActive == true)
                    Console.WriteLine(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ' xTrace : 1907 : ", ex);
            }
        }

        public void ZeroTrace()
        {
            string S = "";
            S = "delete from PgmTrace ";
            bool b = ExecuteSqlNewConn(S, false);
            if (b == false)
            {
                // 'Session("ErrMsg") = "ZeroTrace Call: " + 'Session("ErrMsg")
                // 'Session("ErrStack") = "ZeroTrace Call Stack: " + ''Session("ErrStack")
                // Response.Redirect("frmErrDisplay.aspx")
            }
        }

        public void ZeroizeEmailToDelete(string Userid)
        {
            string S = "";
            S = "delete from EmailToDelete where UserID = '" + Userid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (b == false)
            {
                // 'Session("ErrMsg") = "ZeroTrace Call: " + 'Session("ErrMsg")
                // 'Session("ErrStack") = "ZeroTrace Call Stack: " + ''Session("ErrStack")
                // Response.Redirect("frmErrDisplay.aspx")
            }
        }

        public int LogEntryNew(string IPADDR)
        {
            string NextKey = getNextKey("LOGINS", "LoginTrackingNbr");
            string S = "";
            S = S + "INSERT INTO [Logins]";
            S = S + "([LoginID]";
            S = S + ",[LoginDate]";
            S = S + ",[LoginTrackingNbr]";
            S = S + ",[Duration]";
            S = S + ",[IPAddress])";
            S = S + "VALUES( ";
            S = S + "'VISITOR'";
            S = S + ",getdate()";
            S = S + "," + NextKey;
            S = S + ",getdate()";
            S = S + ",'" + IPADDR + "')";
            bool b = ExecuteSqlNoTx(S);
            if (b)
            {
                return Conversions.ToInteger(NextKey);
            }
            else
            {
                return -1;
            }
        }

        public void LogEntryUpdate(string UID, int LoginTrackingNbr)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (UID == null)
            {
                if (LoginTrackingNbr != default)
                {
                    LogEntryUpdate(LoginTrackingNbr);
                }

                return;
            }

            if (UID.Length == 0)
            {
                return;
            }

            string S = "";
            S = S + "UPDATE [Logins]";
            S = S + " SET [LoginID] = '" + UID + "'";
            S = S + " ,[Duration] = getdate()      ";
            S = S + " WHERE (LoginTrackingNbr = " + Conversion.Str(LoginTrackingNbr) + ") ";
            bool b = ExecuteSqlNoTx(S);
        }

        public void LogEntryUpdate(int LoginTrackingNbr)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + "UPDATE [Logins]";
            S = S + " SET [Duration] = getdate()      ";
            S = S + " WHERE (LoginTrackingNbr = " + Conversion.Str(LoginTrackingNbr) + ") ";
            bool b = ExecuteSqlNoTx(S);
        }

        public bool InsertEmail(string EmailFrom, string EmailTo, string EmailSubj, string EmailCC, string EmailBCC, string EMailBody, string EMailBody2, DateTime EmailDate)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " INSERT INTO [Emails]";
            S = S + " ([EmailTo]";
            S = S + " ,[EmailFrom]";
            S = S + " ,[EmailSubj]";
            S = S + " ,[EmailBody]";
            S = S + " ,[EmailBody2]";
            S = S + " ,[EmailDate]";
            S = S + " ,[EmailCC]";
            S = S + " ,[EmailBcc])";
            S = S + " VALUES";
            S = S + " ('" + EmailTo + "','";
            S = S + EmailFrom + "','";
            S = S + EmailSubj + "','";
            S = S + EMailBody + "','";
            S = S + EMailBody2 + "','";
            S = S + EmailDate.ToString() + "','";
            S = S + EmailCC + "','";
            S = S + EmailBCC + "')";
            bool b = ExecuteSqlNewConn(S, false);
            return b;
        }

        public void AddUploadFileData(string FQN, string UploadedBy)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = ckDatasourceExists(FQN, UploadedBy);
            if (!B)
            {
                InsertFileAudit(FQN, UploadedBy);
            }
        }

        public bool InsertFileAudit(string FN, string UploadedBy)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = false;
            string s = "";
            b = ckDatasourceExists(FN, UploadedBy);
            if (b)
            {
                return true;
            }

            s = s + " INSERT INTO [FileUpload] ([FileName],[UploadedBy]) VALUES( ";
            s = s + "'" + FN + "',";
            s = s + "'" + UploadedBy + "')";
            b = ExecuteSqlNoAudit(s);
            if (!b)
            {
                Console.WriteLine("Audit Failed: " + s);
            }

            return b;
        }

        public bool setUploadSuccessTrue(int UploadID)
        {
            bool b = false;
            string s = "";
            s = " Update FileUpload set SuccessfulLoad = 1 where UploadID = " + UploadID;
            b = ExecuteSqlNoAudit(s);
            s = " Update FileUpload set EndTime = getdate() where UploadID = " + UploadID;
            b = ExecuteSqlNoAudit(s);
            s = " update FileUpload set ElapsedTime = DATEDIFF(second, StartTime, GETDATE()) where UploadID = " + UploadID;
            b = ExecuteSqlNoAudit(s);
            if (!b)
            {
                Console.WriteLine("Audit Failed: " + s);
            }

            return b;
        }

        public string GetLastUploadTime()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            CloseConn();
            CkConn();
            string S = "";
            S = "Select max(UploadID) from FileUpload where SuccessfulLoad = 1 ";
            SqlDataReader rsData = null;
            int I = 0;
            string iStr = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                iStr = rsData.GetValue(0).ToString();
                rsData.Close();
                rsData = null;
            }
            else
            {
                rsData.Close();
                rsData = null;
            }

            if (iStr.Length == 0)
            {
                return "No file has been loaded as of now...";
            }

            string FN = "";
            string ET = "";
            GetElapsedTime(iStr, ref FN, ref ET);
            if (FN.Length > 0)
            {
                return "The last upload, '" + FN + "', took " + ET + " seconds.";
            }
            else
            {
                return "The current load could possibly take several minutes...";
            }
        }

        public void GetElapsedTime(string UploadID, ref string FN, ref string ET)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "";
                S = "Select FileName, ElapsedTime from FileUpload where UploadID = " + UploadID;
                SqlDataReader rsData = null;
                int I = 0;
                string iStr = "";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    FN = rsData.GetValue(0).ToString();
                    ET = rsData.GetValue(1).ToString();
                    rsData.Close();
                    rsData = null;
                }
                else
                {
                    rsData.Close();
                    rsData = null;
                }
            }
            catch (Exception ex)
            {
                FN = "";
                ET = "";
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetElapsedTime : 2043 : ", ex);
            }
        }

        public bool ckAttributeExists(string AttributeName, string PropVal)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string s = "Select count(*) from Attribute where AttributeName = '" + AttributeName + "'";
            int Cnt;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Cnt = rsData.GetInt32(0);
            if (Cnt > 0)
            {
                b = true;
            }
            else
            {
                b = false;
            }

            rsData.Close();
            return b;
        }

        public bool ckEmailFolderExist(string UserID, string FolderID, string FolderName, string ContainerName)
        {
            string s = "select count(*) from EmailFolder where [UserID] = '" + UserID + "' and [FolderID] = '" + FolderID + "' and [FolderName] = '" + FolderName + "' and [ContainerName] = '" + ContainerName + "' ";
            int Cnt;
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            try
            {
                rsData.Read();
                Cnt = rsData.GetInt32(0);
                if (Cnt > 0)
                {
                    b = true;
                }
                else
                {
                    b = false;
                }

                rsData.Close();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: " + ex.Message + Constants.vbCrLf + s);
            }

            return b;
        }

        // ' <summary>
        // ' Determines of a file has alraedy been loaded into the system or not.
        // ' </summary>
        // ' <param name="FN"></param>
        // ' <returns>TRUE if the file has been loaded, FALSE if not.</returns>
        // ' <remarks></remarks>
        public bool ckDatasourceExists(string FQN, string UID)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            CloseConn();
            CkConn();
            int Cnt;
            string s = "Select count(*) FROM DataSource ";
            s = s + " where FQN = '" + FQN + "' and UserID = '" + UID + "'";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            Cnt = rsData.GetInt32(0);
            if (Cnt > 0)
            {
                b = true;
            }
            else
            {
                b = false;
            }

            rsData.Close();
            return b;
        }

        public int getTableCount(string TblName)
        {
            try
            {
                string S = "Select  count(*) FROM " + TblName;
                CloseConn();
                CkConn();
                int Cnt;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                Cnt = rsData.GetInt32(0);
                rsData.Close();
                return Cnt;
            }
            catch (Exception ex)
            {
                // xTrace(12306, "clsDataBase:getTableCount" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getTableCount : 2083 : ", ex);
                return 0;
            }
        }

        public int iCount(string S)
        {
            lock (this)
            {
                try
                {
                    int Cnt;
                    SqlDataReader rsData = null;
                    bool b = false;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    rsData = command.ExecuteReader();
                    rsData.Read();
                    Cnt = rsData.GetInt32(0);
                    rsData.Close();
                    rsData = null;
                    return Cnt;
                }
                catch (Exception ex)
                {
                    // xTrace(12306, "clsDataBase:iCount" + ex.Message)
                    LOG.WriteToArchiveLog("ERROR 1993.21: ", ex);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : iCount : 2054 : ", ex);
                    return -1;
                }
            }
        }

        public int iCountContent(string S)
        {
            int I = 0;
            int J = 0;
            int K = 0;
            string S1 = "";
            string S2 = "";
            S = S.Trim();
            string NewSql = "";
            var A = S.Split(Conversions.ToChar(Constants.vbCrLf));
            var loopTo = Information.UBound(A);
            for (I = 0; I <= loopTo; I++)
            {
                if (Strings.InStr(A[I], "and KEY_TBL.RANK", CompareMethod.Text) > 0)
                {
                }
                // Console.WriteLine(A(I))
                else
                {
                    NewSql = NewSql + A[I] + Constants.vbCrLf;
                }

                S = NewSql;
            }

            if (Strings.InStr(1, S, "FROM ", CompareMethod.Text) > 0)
            {
                I = Strings.InStr(1, S, "select", CompareMethod.Text);
                // I = I + 5
                // I = InStr(I, S, "select", CompareMethod.Text)
                if (I <= 0)
                {
                    return -1;
                }

                J = Strings.InStr(1, S, "FROM ", CompareMethod.Text);
                S1 = "";
                S2 = Strings.Mid(S, J);
                string SS = "Select count(*) " + S2;
                J = Strings.InStr(1, SS, "order by", CompareMethod.Text);
                if (J > 0)
                {
                    SS = Strings.Mid(SS, 1, J - 1);
                }

                S = SS;
            }
            // Clipboard.Clear()
            // Clipboard.SetText(S)
            // Console.WriteLine(S)
            else
            {
                return 1;
            }

            K = Strings.InStr(S, "order by", CompareMethod.Text);
            if (K > 0)
            {
                S = Strings.Mid(S, 1, K - 1);
            }

            try
            {
                CloseConn();
                CkConn();
                int Cnt;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                Cnt = rsData.GetInt32(0);
                rsData.Close();
                rsData = null;
                return Cnt;
            }
            catch (Exception ex)
            {
                // xTrace(12309, "clsDataBase:iCountContent" + ex.Message)
                LOG.WriteToArchiveLog("Warning - clsDatabaseARCH : iCountContent : 2150 : ", ex);
                return 1;
            }
        }

        public string getSSCountDataSourceFiles(string SourceName, string CRC)
        {
            string SourceGuid = "";
            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                string S = "Select top 1 SourceGuid from DataSource";
                S = S + " where ";
                S = S + " [SourceName] = '" + SourceName + "'";
                S = S + " and CRC = " + CRC + "";
                try
                {
                    CloseConn();
                    CkConn();
                    SqlDataReader rsData = null;
                    bool b = false;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    rsData = command.ExecuteReader();
                    rsData.Read();
                    SourceGuid = rsData.GetValue(0).ToString();
                    rsData.Close();
                }
                catch (Exception ex)
                {
                    return "";
                }
            }
            catch (Exception ex)
            {
                // xTrace(12309, "clsDataBase:getCountDataSourceFiles" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2162a : ", ex);
                return "";
            }

            return SourceGuid;
        }

        public string HexStringToBinary(string hexString)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // hexString = "0x" + hexString
            int num = int.Parse(hexString, NumberStyles.HexNumber);
            return Convert.ToString(num, 2);
        }
        // Function BinaryToHexString(ByVal BinData As Byte()) As String
        // 'hexString = "0x" + hexString
        // Dim num As Integer = Integer.Parse(BinData, NumberStyles.HexNumber)
        // Return Convert.ToString(num, 2)
        // End Function

        public int getCountDataSourceFiles(string SourceName, string HexHash)
        {
            int CNT = -1;
            // If Not HexHash.Contains("0x") Then
            // HexHash = "0x" + HexHash
            // End If
            // 'Dim HexStr As String = HexStringToBinary(HexHash)
            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                string S = "Select count(*) FROM DataSource where SourceName = '" + SourceName + "' and ImageHash = '" + HexHash + "'; ";
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                CNT = rsData.GetInt32(0);
                rsData.Close();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2174 : ", ex);
            }

            return CNT;
        }

        public bool UpdateDataSourceFileInfo(string FQN, string SourceGuid, int FileLength, string Imagehash)
        {
            bool b = true;
            string SourceName = "";
            // Dim Imagehash As String = ""
            string CRC = "";
            var LastAccessDate = DateAndTime.Now;
            var LastWriteTime = DateAndTime.Now;
            string SourceTypeCode = "";
            string OriginalFileType = "";
            string MachineID = "";
            string RecLen = "";
            string RecHash = "";
            var FI = new FileInfo(FQN);
            try
            {
                SourceName = FI.Name;
                SourceTypeCode = getProcessAsExt(FI.Extension);
                Imagehash = ENC.GenerateSHA512HashFromFile(FQN);
                if (Imagehash.Length < 10)
                {
                    return false;
                }

                CRC = Imagehash;
                LastAccessDate = FI.LastAccessTime;
                LastWriteTime = FI.LastWriteTime;
                OriginalFileType = FI.Extension;
                MachineID = Environment.MachineName;
                RecLen = FileLength.ToString();
                RecHash = CRC;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR  UpdateDataSourceFileInfo 022: " + ex.Message);
            }
            finally
            {
                FI = null;
            }

            string S = "";
            S = @"update DataSource
        set  [SourceName] = @SourceName,
            [Imagehash] = @Imagehash,
            [CRC] = @Imagehash,
            [LastAccessDate] = @LastAccessDate,
            [LastWriteTime] = @LastWriteTime,
            [SourceTypeCode] = @SourceTypeCode,
            [OriginalFileType] = @OriginalFileType,
            [MachineID] = @MachineID,
            [FileLength] = @FileLength,
            [RecLen] = @FileLength,
            [RecHash] = @Imagehash
        where SourceGuid = @SourceGuid  ";
            string ConnStr = setConnStr();
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            LL = 35;
            var CMD = new SqlCommand();
            CMD.CommandType = CommandType.StoredProcedure;
            try
            {
                CMD.Connection = CONN;
                CMD.CommandText = "UpdateDataSourceImage";
                CMD.CommandText = S;
                CMD.CommandType = CommandType.Text;
                using (CONN)
                using (CMD)
                {
                    CMD.Parameters.Add(new SqlParameter("@SourceName", SourceName));
                    CMD.Parameters.Add(new SqlParameter("@Imagehash", Imagehash));
                    CMD.Parameters.Add(new SqlParameter("@CRC", Imagehash));
                    CMD.Parameters.Add(new SqlParameter("@LastAccessDate", LastAccessDate));
                    CMD.Parameters.Add(new SqlParameter("@LastWriteTime", LastWriteTime));
                    CMD.Parameters.Add(new SqlParameter("@SourceTypeCode", SourceTypeCode));
                    CMD.Parameters.Add(new SqlParameter("@OriginalFileType", OriginalFileType));
                    CMD.Parameters.Add(new SqlParameter("@MachineID", MachineID));
                    CMD.Parameters.Add(new SqlParameter("@FileLength", FileLength));
                    CMD.Parameters.Add(new SqlParameter("@RecLen", FileLength));
                    CMD.Parameters.Add(new SqlParameter("@RecHash", Imagehash));
                    CMD.Parameters.Add(new SqlParameter("@SourceGuid", SourceGuid));
                    CMD.ExecuteNonQuery();
                }

                b = true;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR 721x UpdateDataSourceFileInfo 00: " + ex.Message);
                LOG.WriteToArchiveLog("[SourceName] " + SourceName.Length.ToString());
                LOG.WriteToArchiveLog(Conversions.ToString("[Imagehash] " == Imagehash.Length.ToString()));
                LOG.WriteToArchiveLog(Conversions.ToString("[CRC] " == Imagehash.Length.ToString()));
                LOG.WriteToArchiveLog(Conversions.ToString("[SourceTypeCode] " == SourceTypeCode.Length.ToString()));
                LOG.WriteToArchiveLog(Conversions.ToString("[OriginalFileType] " == OriginalFileType.Length.ToString()));
                LOG.WriteToArchiveLog(Conversions.ToString("[MachineID] " == MachineID.Length.ToString()));
                LOG.WriteToArchiveLog(Conversions.ToString("[RecHash] " == Imagehash.Length.ToString()));
                b = false;
            }

            return b;
        }

        public bool UpdateSouceImage(string MachineID, string FQN, string Imagehash)
        {
            if (FQN.Contains("'"))
            {
                FQN = FQN.Replace("''", "'");
            }

            bool b = false;
            string ConnStr = setConnStr();
            string MySql = "";
            MySql = "UPDATE DataSource SET ";
            MySql += " SourceImage = @FileContents ";
            MySql += " , Imagehash = @Imagehash";
            MySql += " , LastAccessDate = getdate()";
            MySql += " where MachineID = @MachineID and FQN = @FQN";
            try
            {
                using (var connection = new SqlConnection(ConnStr))
                {
                    if (connection.State.Equals(ConnectionState.Closed))
                    {
                        connection.Open();
                    }

                    using (var Command = new SqlCommand(MySql, connection))
                    {
                        Command.Parameters.Add(new SqlParameter("@MachineID", MachineID));
                        Command.Parameters.Add(new SqlParameter("@FQN", FQN));
                        Command.Parameters.Add(new SqlParameter("@Imagehash", Imagehash));
                        Command.Parameters.Add("@FileContents", SqlDbType.VarBinary).Value = File.ReadAllBytes(FQN);
                        Command.ExecuteNonQuery();
                    }
                }

                b = true;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("FATAL ERROR :UpdateSouceImage 22.345.22 - Failed to add source image." + Constants.vbCrLf + MySql + Environment.NewLine + ex.Message);
                b = false;
            }

            return b;
        }

        public int ckFileExistInRepo(string MachineID, string FQN)
        {
            int CNT = -1;
            try
            {
                FQN = FQN.Replace("''", "'");
                FQN = FQN.Replace("'", "''");
                string S = "select count(*) from DataSource where MachineID = '" + MachineID + "' and  FQN = '" + FQN + "' ";
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                using (command)
                using (CONN)
                using (rsData)
                {
                    rsData.Read();
                    CNT = rsData.GetInt32(0);
                }
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:getCountDataSourceFiles" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2174 : ", ex);
            }

            return CNT;
        }

        public int getCountDataSourceFiles(string SourceName, DateTime WebPagePublishDate)
        {
            int CNT = -1;
            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                string S = "Select  count(*) FROM DataSource where SourceName = '" + SourceName + "' and WebPagePublishDate = '" + WebPagePublishDate.ToString() + "' ";
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                CNT = rsData.GetInt32(0);
                rsData.Close();
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:getCountDataSourceFiles" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2174 : ", ex);
            }

            return CNT;
        }

        public int getCountRssFile(string SourceName, string WebPagePublishDate)
        {
            int CNT = -1;
            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                string S = "Select  count(*) FROM DataSource where SourceName = '" + SourceName + "' and WebPagePublishDate = '" + WebPagePublishDate + "' ";
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                CNT = rsData.GetInt32(0);
                rsData.Close();
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:getCountDataSourceFiles" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2174 : ", ex);
            }

            return CNT;
        }

        public int GetMaxDataSourceVersionNbr(string UserID, string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                FQN = UTIL.RemoveSingleQuotes(FQN);
                string S = "Select  max ([VersionNbr]) FROM DataSource where FQN = '" + FQN + "' and DataSourceOwnerUserID = '" + UserID + "'";
                CloseConn();
                CkConn();
                int Cnt;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                try
                {
                    if (rsData.HasRows)
                    {
                        rsData.Read();
                        Cnt = rsData.GetInt32(0);
                    }
                    else
                    {
                        Cnt = -1;
                    }
                }
                catch (Exception ex)
                {
                    Cnt = -1;
                }

                if (!rsData.IsClosed)
                {
                    rsData.Close();
                }

                rsData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
                return Cnt;
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:GetMaxDataSourceVersionNbr" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetMaxDataSourceVersionNbr : 2157 : ", ex);
                return 0;
            }
        }

        public int GetMaxDataSourceVersionNbr(string SourceName, string CRC, string FileLength)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                string S = "Select  max ([VersionNbr]) FROM DataSource  where  SourceName = '" + SourceName + "' and FIleLength = " + FileLength + " and CRC = " + CRC + " ";
                CloseConn();
                CkConn();
                int Cnt;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    Cnt = rsData.GetInt32(0);
                }
                else
                {
                    Cnt = -1;
                }

                rsData.Close();
                rsData = null;
                return Cnt;
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:GetMaxDataSourceVersionNbr" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetMaxDataSourceVersionNbr : 2157 : ", ex);
                return 0;
            }
        }

        public string getGuid()
        {
            var MyGuid = Guid.NewGuid();
            return MyGuid.ToString();
        }

        // ' <summary>
        // ' Bilds the sorted lists for blazing fast lookup speeds.
        // ' </summary>
        // ' <remarks></remarks>
        public void PopulateSortedLists()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            PopulateProjectSortedList();
            PopulateProjectTeamSortedList();
        }

        // ' <summary>
        // ' The subroutine PopulateProjectSortedList populates a sorted list with all projects from the
        // ' input Excel spreadsheet. This list allows us to verify that a project exists without having to
        // ' access the database thus giving us extreme speed.
        // ' </summary>
        // ' <remarks></remarks>
        public void PopulateProjectSortedList()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int PID = 0;
            string s = "Select RomID, ProjectID from Project";
            SqlDataReader rsData = null;
            slProjects.Clear();
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                while (rsData.Read())
                {
                    string RomID = rsData.GetValue(0).ToString();
                    int ProjectID = rsData.GetInt32(1);
                    slProjects.Add(ProjectID, RomID);
                }
            }
            else
            {
                slProjects.Add(-1, "  New Project");
            }

            rsData.Close();
        }

        public void PopulateProjectTeamSortedList()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            slProjectTeams.Clear();
            int PID = 0;
            string s = "Select [ProjectTeamIdentifier] +'|'+ cast([ProjectID] as varchar(50)), ProjectTeamID FROM [ProjectTeam]";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                while (rsData.Read())
                {
                    string TeamKey = rsData.GetValue(0).ToString();
                    int ProjectTeamID = rsData.GetInt32(1);
                    slProjectTeams.Add(ProjectTeamID, TeamKey);
                }
            }
            else
            {
                slProjectTeams.Add(-1, "XXXX");
            }

            rsData.Close();
        }

        public void PopulateMetricPeriodSortedList()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            slMetricPeriods.Clear();
            int PID = 0;
            string s = "Select cast([MetricPeriod] as varchar(50)) + '|' + cast([ProjectTeamID] as varchar(50)), [MetricRowGuid] FROM [MetricPeriodData]";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                while (rsData.Read())
                {
                    string MetricKey = rsData.GetValue(0).ToString();
                    int MetricID = rsData.GetInt32(1);
                    slMetricPeriods.Add(MetricID, MetricKey);
                }
            }
            else
            {
                slMetricPeriods.Add(-1, "~~~~");
            }

            rsData.Close();
        }

        public string getMetricPeriodIdByKey(string MetricPeriod, string ProjectTeamID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            slMetricPeriods.Clear();
            int PID = 0;
            string s = "";
            string tKey = "";
            s = s + "Select [MetricRowGuid] ";
            s = s + "FROM [MetricPeriodData]";
            s = s + "where MetricPeriod= '" + MetricPeriod + "'";
            s = s + "and ProjectTeamID = " + ProjectTeamID;
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                while (rsData.Read())
                    tKey = rsData.GetValue(0).ToString();
            }
            else
            {
                tKey = "";
            }

            rsData.Close();
            return tKey;
        }

        public void LinkRunId()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int LoadID = 0;
            string s = "Select max([UploadID]) FROM [FileUpload]";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                LoadID = rsData.GetInt32(0);
                rsData.Close();
                s = s + "update MetricPeriodData set UploadID = " + LoadID + " where UploadID is null";
                bool b = ExecuteSqlNoAudit(s);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }
        }

        public int getLastUploadID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int LoadID = -1;
            string s = "Select max([UploadID]) FROM [FileUpload]";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                LoadID = rsData.GetInt32(0);
                rsData.Close();
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            return LoadID;
        }

        public int getLastProjectID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int LoadID = -1;
            string s = "Select max([ProjectID]) FROM [Project]";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            rsData = command.ExecuteReader();
            rsData.Read();
            if (rsData.HasRows)
            {
                LoadID = rsData.GetInt32(0);
                rsData.Close();
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            return LoadID;
        }

        public bool ckExcelColName(string ColName)
        {
            bool B = false;
            int I = slExcelColNames.IndexOfKey(ColName);
            if (I < 0)
            {
                B = false;
            }
            else
            {
                B = true;
            }

            return B;
        }

        public void populateSortedLists(string ListName, string tKey, string tDesc)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }


            // Public slGrowthPlatform As New SortedList
            // Public slOperatingGroup As New SortedList
            // Public slOperatingUnit As New SortedList
            // Public slGeography As New SortedList
            // Public slGeographicUnit As New SortedList
            // Public slClientServiceGroup As New SortedList
            // Public slDeliveryCenter As New SortedList
            // Public slTypeOfWork As New SortedList
            // Public slProjectTeamTypeOfWork As New SortedList
            // Public slSubmissionStatus As New SortedList

            if (ListName.Equals("GrowthPlatform"))
            {
                slGrowthPlatform.Add(tKey, tDesc);
            }
            else if (ListName.Equals("OperatingGroup"))
            {
                slOperatingGroup.Add(tKey, tDesc);
            }
            else if (ListName.Equals("OperatingUnit"))
            {
                slOperatingUnit.Add(tKey, tDesc);
            }
            else if (ListName.Equals("Geography"))
            {
                slGeography.Add(tKey, tDesc);
            }
            else if (ListName.Equals("GeographicUnit"))
            {
                slGeographicUnit.Add(tKey, tDesc);
            }
            else if (ListName.Equals("ClientServiceGroup"))
            {
                slClientServiceGroup.Add(tKey, tDesc);
            }
            else if (ListName.Equals("DeliveryCenter"))
            {
                slDeliveryCenter.Add(tKey, tDesc);
            }
            else if (ListName.Equals("TypeOfWork"))
            {
                slTypeOfWork.Add(tKey, tDesc);
            }
            else if (ListName.Equals("ProjectTeamTypeOfWork"))
            {
                slProjectTeamTypeOfWork.Add(tKey, tDesc);
            }
            else if (ListName.Equals("SubmissionStatus"))
            {
                slSubmissionStatus.Add(tKey, tDesc);
            }
            else if (ListName.Equals("SubmittedBy"))
            {
                slSubmittedBy.Add(tKey, tDesc);
            }
        }

        public void AddLookupData(string TBL, string CodeCol, string DescCol, string tCode, string tDesc)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            populateSortedLists(TBL, tCode, tDesc);
            bool b = ItemExists(TBL, CodeCol, tCode, "S");
            if (!b)
            {
                S = "";
                S = S + " insert into " + TBL + " (" + CodeCol + "," + DescCol + ")";
                S = S + " values ";
                S = S + " ('" + tCode + "','" + tDesc + "')";
                b = ExecuteSqlNewConn(S, false);
            }
        }

        public void SetConfigDb(string DbId)
        {
            ConnectionStringID = DbId;
        }

        public string GetDsValue(SqlDataReader RS, int I)
        {
            string tVal = RS.GetValue(I).ToString();
            tVal = UTIL.RemoveSingleQuotes(tVal);
            return tVal;
        }

        public void AddToSL(ref SortedList SL, string S, ref int dups)
        {
            try
            {
                int I = SL.IndexOfKey(S);
                if (I >= 0)
                {
                    dups = dups + 1;
                }
                else
                {
                    SL.Add(S, S);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine("Duplicate SQL statement, skipping and continuing.");
                dups = dups + 1;
                LOG.WriteToArchiveLog("clsDatabaseARCH : AddToSL : 2351 : ", ex);
            }
        }

        public void spCkNextID(string ID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            bool TimeTrk = true;
            try
            {
                CloseConn();
                CkConn();
                var command = new SqlCommand("exec spCkNextID " + ID, gConn);
                command.CommandType = CommandType.Text;
                // command.CommandText = "spCkNextID " + ID
                command.CommandTimeout = 3600;
                command.ExecuteNonQuery();
                command = null;
                gConn.Close();
            }
            catch (Exception ex)
            {
                // Session("ErrorLocation") = 'Session("ErrorLocation") + " : " , ex
                LOG.WriteToArchiveLog("clsDatabaseARCH : spCkNextID : 2361 : ", ex);
            }
        }

        public bool InsertEmailMsg(int ID, string UID, string FQN, string EmailGUID, string UserID, string ReceivedByName, DateTime ReceivedTime, string SenderEmailAddress, string SenderName, DateTime SentOn, string RetentionCode, string isPublic)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = false;
            try
            {
                var EmailBinary = CF.FileToByte(FQN);

                // *******************************************************
                int OriginalSize = EmailBinary.Length;
                EmailBinary = COMP.CompressBuffer(EmailBinary);
                int CompressedSize = EmailBinary.Length;
                bool RC = false;
                string rMsg = "";
                var TransmissionStartTime = DateAndTime.Now;
                var txEndTime = DateAndTime.Now;

                // Dim ProxyArchive As New SVCCLCArchive.Service1Client
                // WDM CHECK THIS
                // *******************************************************

                // 'UserID, ReceivedByName As String, ReceivedTime As DateTime, SenderEmailAddress As
                // String, SenderName As String, SentOn As DateTime
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("spInsertEmailMsg", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGUID));
                        command.Parameters.Add(new SqlParameter("@EmailImage", EmailBinary));
                        command.Parameters.Add(new SqlParameter("@UserID", UserID));
                        command.Parameters.Add(new SqlParameter("@ReceivedByName", ReceivedByName));
                        command.Parameters.Add(new SqlParameter("@ReceivedTime", ReceivedTime));
                        command.Parameters.Add(new SqlParameter("@SenderEmailAddress", SenderEmailAddress));
                        command.Parameters.Add(new SqlParameter("@SenderName", SenderName));
                        command.Parameters.Add(new SqlParameter("@SentOn", SentOn));
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        connection.Dispose();
                        command.Dispose();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(12315, "clsDataBase:InsertEmailMsg" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : InsertEmailMsg : 2386 : ", ex);
            }

            return B;
        }

        public bool UpdateEmailMsg(string OriginalName, int ID, string UID, string FQN, string EmailGUID, string RetentionCode, string isPublic, string SourceHash, string DirName)
        {
            int LL = 0;
            FQN = UTIL.RemoveSingleQuotes(FQN);
            LL = 1;
            bool B = false;
            LL = 2;
            int OriginalSize = 0;
            LL = 3;
            int CompressedSize = 0;
            LL = 4;
            try
            {
                var EmailBinary = CF.FileToByte(FQN);
                LL = 5;
                // *******************************************************
                OriginalSize = EmailBinary.Length;
                LL = 6;

                // ** Use Compression to cut down on transmit time here
                EmailBinary = COMP.CompressBuffer(EmailBinary);
                LL = 7;
                CompressedSize = EmailBinary.Length;
                LL = 8;
                bool RC = false;
                LL = 9;
                string rMsg = "";
                LL = 10;
                var TransmissionStartTime = DateAndTime.Now;
                LL = 11;
                var txEndTime = DateAndTime.Now;
                LL = 12;

                // *******************************************************
                bool bUseNewDbArch = true;
                LL = 13;
                if (bUseNewDbArch)
                {
                    LL = 14;
                    InsertSourceImage(modGlobals.gCurrUserGuidID, Environment.MachineName, OriginalName, EmailGUID, FQN, "Email", RetentionCode, isPublic, SourceHash, DirName, false);
                    B = true;
                }
                // *******************************************************
                LL = 18;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UPLOADED EMAIL - OriginalSize = " + OriginalSize.ToString() + " : CompressedSize =" + CompressedSize.ToString());
            }
            catch (Exception ex)
            {
                // xTrace(12315, "UpdateEmailMsg: LL=" + LL.ToString, ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UpdateEmailMsg : 2404 : LL = " + LL.ToString() + " : " + ex.Message + Constants.vbCrLf + " : " + FQN + Constants.vbCrLf + " : " + EmailGUID);
                LOG.WriteToUploadLog("clsDatabaseARCH ERROR: UpdateEmailMsg : OriginalSize = " + OriginalSize.ToString() + " : CompressedSize =" + CompressedSize.ToString());
            }

            return B;
        }

        public bool UpdateAttachment(string EmailGUID, byte[] AttachmentBinary, string AttachmentName, string AttachmentCode)
        {
            bool bExtendTime = false;
            if (AttachmentBinary.Length > 4000000000L)
            {
                LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661b : Loading extremely large file: " + AttachmentName + Constants.vbCrLf + "File Length: " + AttachmentBinary.Length.ToString());
            }

            string InsertConnStr = getRepoConnStr();
            UTIL.ExtendTimeoutBySize(ref InsertConnStr, AttachmentBinary.Length);
            bool B = false;
            try
            {
                using (var connection = new SqlConnection(InsertConnStr))
                {
                    using (var command = new SqlCommand("UpdateAttachment", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGUID));
                        command.Parameters.Add(new SqlParameter("@Attachment", AttachmentBinary));
                        command.Parameters.Add(new SqlParameter("@AttachmentName", AttachmentName));
                        command.Parameters.Add(new SqlParameter("@AttachmentCode", AttachmentCode));
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        command.Dispose();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(12315, "clsDataBase:UpdateAttachment" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UpdateAttachment : 2423 : ", ex);
            }

            return B;
        }

        public bool Exec_spUpdateLongNameHash(string SourceGuid, string FQN)
        {
            string InsertConnStr = getRepoConnStr();
            bool B = false;
            string SpCMD = "exec spUpdateLongNameHash '" + FQN + "', '" + SourceGuid + "' ";
            // SpCMD += vbCrLf + "select * from DataSourceFQN where fqn = '" + FQN + "' "
            // Clipboard.Clear()
            // Clipboard.SetText(SpCMD)
            try
            {
                using (var connection = new SqlConnection(InsertConnStr))
                {
                    using (var command = new SqlCommand("spUpdateLongNameHash", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.AddWithValue("@SourceGuid", SourceGuid);
                        command.Parameters.AddWithValue("@FQN", FQN);
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(12315, "clsDataBase:UpdateAttachment" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : Exec_spUpdateLongNameHash : 2423 : " + ex.Message);
            }

            return B;
        }

        public bool UpdateAttachmentByFQN(int ID, string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = false;
            try
            {
                var AttachmentBinary = CF.FileToByte(FQN);
                // *******************************************************
                int OriginalSize = AttachmentBinary.Length;
                AttachmentBinary = COMP.CompressBuffer(AttachmentBinary);
                int CompressedSize = AttachmentBinary.Length;
                bool RC = false;
                string rMsg = "";
                var TransmissionStartTime = DateAndTime.Now;
                var txEndTime = DateAndTime.Now;
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("UpdateAttachment", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGUID));
                        command.Parameters.Add(new SqlParameter("@Attachment", AttachmentBinary));
                        command.Parameters.Add(new SqlParameter("@AttachmentName", AttachmentName));
                        command.Parameters.Add(new SqlParameter("@AttachmentCode", AttachmentCode));
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        command.Dispose();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(12315, "clsDataBase:UpdateAttachmentByFQN" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UpdateAttachmentByFQN : 2443 : ", ex);
            }

            return B;
        }

        public bool xInsertAttachment(string EmailGUID, byte[] AttachmentBinary, string AttachmentName, string AttachmentCode)
        {
            bool B = false;
            try
            {
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("InsertAttachment", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGUID));
                        command.Parameters.Add(new SqlParameter("@Attachment", AttachmentBinary));
                        command.Parameters.Add(new SqlParameter("@AttachmentName", AttachmentName));
                        command.Parameters.Add(new SqlParameter("@AttachmentCode", AttachmentCode));
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(82711, "InsertAttachment: ", ex.Message.ToString)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : InsertAttachment : 2460 : ", ex);
            }

            return B;
        }

        public void ValidateExtExists(string FQN)
        {
            var ATYPE = new clsATTACHMENTTYPE();
            string FileExt = "." + UTIL.getFileSuffix(FQN);
            int bCnt = ATYPE.cnt_PK29(FileExt);
            if (bCnt == 0)
            {
                string argval = "Auto added this code.";
                ATYPE.setDescription(ref argval);
                ATYPE.setAttachmentcode(ref FileExt);
                ATYPE.Insert();
            }

            ATYPE = null;
        }

        public bool InsertAttachmentFqn(string UID, string FQN, string EmailGUID, string AttachmentName, string AttachmentCode, string UserGuidID, string RetentionCode, string CrcHASH, string isPublic, string FileDirectory)
        {

            // ** See if the attachment has been added previously
            string OriginalFileName = DMA.getFileName(FQN);
            string AttachmentType = DMA.getFileExtension(FQN);
            FQN = UTIL.RemoveSingleQuotes(FQN);
            AttachmentName = UTIL.RemoveSingleQuotes(AttachmentName);
            bool B = false;
            bool RC = false;
            string ReturnMsg = "";
            var TxStartTime = DateAndTime.Now;
            var TxEndTime = DateAndTime.Now;
            string RetMsg = "";
            string SS = "select COUNT(*) from EmailAttachment where AttachmentName = '" + AttachmentName + "' and CRC = '" + CrcHASH + "'";
            int iCnt = iCount(SS);
            if (iCnt > 0)
            {
                My.MyProject.Forms.frmNotify2.BackColor = Color.HotPink;
                My.MyProject.Forms.frmNotify2.Refresh();
                string RowGuid = GetEmailAttachmentGuid(AttachmentName, CrcHASH);
                saveContentOwner(RowGuid, UID, "A", FileDirectory, modGlobals.gMachineID, modGlobals.gNetworkID);
                return true;
            }
            // ** See if the file already exists in the EMAIL ATTACHMENT table
            // ** If so, increment the counter and return
            // ** If not, add it and fall through to the rest of the code

            // If UseFileStream Then
            string NewAttachmentGuid = "";
            modGlobals.gMachineID = Environment.MachineName;
            // ********************************************************************************************************************************************
            NewAttachmentGuid = InsertEmailAttachmentRecord(EmailGUID, AttachmentName, AttachmentCode, AttachmentType, UID, ref RetMsg, CrcHASH);
            saveContentOwner(NewAttachmentGuid, UserGuidID, "A", FileDirectory, modGlobals.gMachineID, modGlobals.gNetworkID);
            InsertSourceImage(modGlobals.gCurrUserGuidID, Environment.MachineName, AttachmentName, NewAttachmentGuid, FQN, "EmailAttachment", RetentionCode, isPublic, CrcHASH, FileDirectory, false);
            // ********************************************************************************************************************************************

            bool bOcrNeeded = ckOcrNeeded(AttachmentCode);
            if (bOcrNeeded)
            {
                SetOcrProcessingParms(EmailGUID, "A", AttachmentName);
            }

            GC.Collect();
            GC.WaitForPendingFinalizers();
            TxEndTime = DateAndTime.Now;
            Console.WriteLine("TX Time: " + TC.ElapsedTimeInMS(TxStartTime, TxEndTime));
            if (RetMsg.Length == 0)
            {
                if (ckOcrNeeded(AttachmentType))
                {
                    SetOcrProcessingParms(EmailGUID, "A", AttachmentName);
                    // ** call service to LAUNCH server side console app here
                }

                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckOcrNeeded(string AttachmentType)
        {
            // ** Convert to use [ImageTypeCode] table in database
            if (AttachmentType.ToLower().Equals(".pdf"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("pdf"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("jpg"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".jpg"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("png"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".png"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("trf"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".trf"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("gif"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".gif"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("bmp"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".bmp"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("tif"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".tif"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("tiff"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".tiff"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals("jif"))
            {
                return true;
            }
            else if (AttachmentType.ToLower().Equals(".jif"))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public bool UpdateEmailBinary(int ID, string UID, string FQN, string EmailGUID)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = false;
            var EmailBinary = CF.FileToByte(FQN);

            // *******************************************************
            int OriginalSize = EmailBinary.Length;
            EmailBinary = COMP.CompressBuffer(EmailBinary);
            int CompressedSize = EmailBinary.Length;
            bool RC = false;
            string rMsg = "";
            var TransmissionStartTime = DateAndTime.Now;
            var txEndTime = DateAndTime.Now;
            try
            {
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("spUpdateEmailMsg", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGUID));
                        command.Parameters.Add(new SqlParameter("@EmailImage", EmailBinary));
                        connection.Open();
                        command.ExecuteNonQuery();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // xTrace(82713, "UpdateEmailBinary: ", ex.Message.ToString)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UpdateEmailBinary : 2495a : ", ex);
            }

            return B;
        }

        public bool ckDocumentExists(string SourceName, string CRC)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            string S = "";
            bool B = false;
            int cnt = -1;
            try
            {
                S = " select count(*) from DataSource where SourceName = '" + SourceName + "' and CRC = '" + CRC.ToString() + "' ";
                CloseConn();
                CkConn();
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error 199.99.1 - clsDatabaseARCH : ckDocumentExists: ", ex);
                B = false;
            }

            return B;
        }

        public bool ckDocumentExists(string SourceName, string MachineID, string CRC)
        {
            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            string S = "";
            bool B = false;
            int cnt = -1;
            try
            {
                S = " select count(*) from DataSource where SourceName = '" + SourceName + "' and CRC = " + CRC + " and MachineID = '" + MachineID + "'";
                CloseConn();
                CkConn();
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error 199.99.1 - clsDatabaseARCH : ckDocumentExists: ", ex);
                B = false;
            }

            return B;
        }

        public string getProcessAsExt(string CurrExt)
        {
            string pext = "";
            bool B = false;
            string S = "";
            SqlDataReader rsData = null;
            try
            {
                S = "select ProcessExtCode from ProcessFileAs where ExtCode = '" + CurrExt + "' ";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    pext = rsData.GetValue(0).ToString();
                }
                else
                {
                    pext = CurrExt;
                }

                rsData.Close();
                rsData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getProcessAsExt: 9755.21cx - " + ex.Message);
                B = true;
            }
            finally
            {
                rsData = null;
            }

            return pext;
        }

        /// <summary>
    /// Inserts the sourcefile.
    /// </summary>
    /// <param name="UID">                  The uid.</param>
    /// <param name="MachineID">            The machine identifier.</param>
    /// <param name="NetworkName">          Name of the network.</param>
    /// <param name="SourceGuid">           The source unique identifier.</param>
    /// <param name="UploadFQN">            The upload FQN.</param>
    /// <param name="SourceName">           Name of the source.</param>
    /// <param name="SourceTypeCode">       The source type code.</param>
    /// <param name="sLastAccessDate">      The s last access date.</param>
    /// <param name="sCreateDate">          The s create date.</param>
    /// <param name="sLastWriteTime">       The s last write time.</param>
    /// <param name="DataSourceOwnerUserID">The data source owner user identifier.</param>
    /// <param name="VersionNbr">           The version NBR.</param>
    /// <param name="RetentionCode">        The retention code.</param>
    /// <param name="isPublic">             The is public.</param>
    /// <param name="CrcHASH">              The CRC hash.</param>
    /// <param name="FolderName">           Name of the folder.</param>
    /// <returns></returns>
        public bool AddSourceToRepo(string UID, string MachineID, string NetworkName, string SourceGuid, string UploadFQN, string SourceName, string SourceTypeCode, string sLastAccessDate, string sCreateDate, string sLastWriteTime, string DataSourceOwnerUserID, int VersionNbr, string RetentionCode, string isPublic, string FileHash, string FolderName)
        {
            if (SourceName.Trim().Length.Equals(0))
            {
                SourceName = Path.GetFileName(UploadFQN);
            }

            if (SourceTypeCode.Trim().Length.Equals(0))
            {
                SourceTypeCode = getProcessAsExt(Path.GetExtension(UploadFQN));
            }

            DateTime LastAccessDate = default;
            DateTime CreateDate = default;
            DateTime LastWriteTime = default;
            saveContentOwner(SourceGuid, DataSourceOwnerUserID, "C", FolderName, MachineID, NetworkName);
            try
            {
                LastWriteTime = Conversions.ToDate(sLastWriteTime);
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: InsertSourceFile 100 - LastWriteTime: " + ex.Message + Constants.vbCrLf + sLastWriteTime);
            }

            try
            {
                LastAccessDate = Conversions.ToDate(sLastAccessDate);
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: InsertSourceFile 101 - LastAccessDate: " + ex.Message + Constants.vbCrLf + sLastAccessDate);
            }

            try
            {
                CreateDate = Conversions.ToDate(sCreateDate);
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: InsertSourceFile 102 - CreateDate: " + ex.Message + Constants.vbCrLf + sCreateDate);
            }

            string fExt = SourceTypeCode;
            UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN);
            bool B = false;
            B = ckDocumentExists(SourceName, FileHash);
            if (B == true)
            {
                saveContentOwner(SourceGuid, modGlobals.gCurrUserGuidID, "C", FolderName, modGlobals.gMachineID, modGlobals.gNetworkID);
                LOG.WriteToArchiveLog("Info: clsDatabaseARCH : AddSourceToRepo: file exists, did not update or overwrite." + Constants.vbCrLf + UploadFQN);
                return true;
            }
            else
            {
                Console.WriteLine("No Exists: " + SourceName);
            }

            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            SourceTypeCode = UTIL.RemoveSingleQuotes(SourceTypeCode);
            LastAccessDate = Conversions.ToDate(UTIL.RemoveSingleQuotes(Conversions.ToString(LastAccessDate)));
            CreateDate = Conversions.ToDate(UTIL.RemoveSingleQuotes(Conversions.ToString(CreateDate)));
            LastWriteTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(Conversions.ToString(LastWriteTime)));
            DataSourceOwnerUserID = UTIL.RemoveSingleQuotes(DataSourceOwnerUserID);
            UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN);
            if (!File.Exists(UploadFQN))
            {
                LOG.WriteToArchiveLog("ERROR - AddSourceToRepo : 2519.2c : could not find file {" + UploadFQN + "}, skipped.");
                return false;
            }

            var SourceImage = CF.FileToByte(UploadFQN);
            if (SourceImage is null)
            {
                LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661c1 : FILE Failed to load: " + UploadFQN + ".");
                return false;
            }

            if (SourceImage.Length == 0)
            {
                LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661z1 : FILE Failed to load: " + UploadFQN + ".");
                return false;
            }

            if (SourceImage.Length > 500000000)
            {
                LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661b : Loading large file: " + UploadFQN + Constants.vbCrLf + "File Length: " + SourceImage.Length.ToString());
            }

            if (SourceImage.Length > 1000000000)
            {
                LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661b : Loading extremely large file: " + UploadFQN + Constants.vbCrLf + "File Length: " + SourceImage.Length.ToString());
            }

            try
            {
                bool RC = false;
                string ReturnMsg = "";
                var TxStartTime = DateAndTime.Now;
                var TxEndTime = DateAndTime.Now;
                int OriginalSize = SourceImage.Length;
                SourceImage = COMP.CompressBuffer(SourceImage);
                int CompressedSize = SourceImage.Length;

                // ** Check to see if this file requires OCR or PDF processing here
                // ** If so, copy it to the Processing directory and let the command line utiltiy process it
                // Dim ProxyArchive As New SVCCLCArchive.Service1Client
                // WDM CHECK THIS OUT
                // B = AddSourceToRepo(UID, MachineID, "LOCAL", SourceGuid, UploadFQN, SourceName, SourceTypeCode, sLastAccessDate, sCreateDate, sLastWriteTime, UID, VersionNbr, RetentionCode, isPublic, FileHash, FolderName)

                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR Load Failed for: " + UploadFQN + Constants.vbCrLf + ReturnMsg);
                }
                else
                {
                    LOG.WriteToArchiveLog("Notice Load successful for: " + UploadFQN);
                    saveContentOwner(SourceGuid, modGlobals.gCurrUserGuidID, "C", FolderName, modGlobals.gMachineID, modGlobals.gNetworkID);
                    if (ckOcrNeeded(fExt))
                    {
                        SetOcrProcessingParms(SourceGuid, "C", SourceName);
                    }
                }

                // ProxyArchive = Nothing
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
            catch (Exception ex)
            {
                B = false;
                // xTrace(82715, "AddSourceToRepo: ", ex.Message.ToString)
                LOG.WriteToArchiveLog("clsDatabaseARCH : xInsertSourcefile : 2495b : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : xInsertSourcefile : 2495b File: " + UploadFQN);
            }

            return B;
        }

        private bool ApplySourceTypeCode(string MachineName, string UserID, string SourceName, string FileExt, string SourceGuid)
        {
            bool bb = true;
            try
            {
                string cs = getRepoConnStr();
                var conn = new SqlConnection(cs);
                conn.Open();
                using (conn)
                {
                    var cmd = new SqlCommand("sp_ApplySourceTypeCode", conn);
                    using (cmd)
                    {
                        cmd.CommandType = CommandType.StoredProcedure;
                        cmd.Parameters.Add(new SqlParameter("@MachineID", MachineName));
                        cmd.Parameters.Add(new SqlParameter("@UserID", UserID));
                        cmd.Parameters.Add(new SqlParameter("@SourceName", SourceName));
                        cmd.Parameters.Add(new SqlParameter("@FileExt", FileExt));
                        cmd.Parameters.Add(new SqlParameter("@SourceGuid", SourceGuid));
                        cmd.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR ApplySourceTypeCode 00: " + ex.Message);
                bb = false;
            }

            return bb;
        }

        public bool UpdateSourceImageInRepo(string SourceName, string UID, string MachineID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, string UploadFQN, string RetentionCode, string isPublic, string FileHash, byte[] FileBytes = null)
        {

            // DALE
            SourceName = SourceName.Replace("''", "'");
            string FileExt = Path.GetExtension(SourceName);
            ApplySourceTypeCode(MachineID, UID, SourceName, FileExt, SourceGuid);
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string FileDirectory = "NA";
            string TrackUploads = System.Configuration.ConfigurationManager.AppSettings["TrackUploads"];
            int LL = 0;
            bool B = false;
            bool bLogUploads = true;
            int OriginalSize = 0;
            int CompressedSize = 0;
            bool bError = false;
            try
            {
                if (TrackUploads.Equals("1"))
                {
                    bLogUploads = true;
                }
                else
                {
                    bLogUploads = false;
                }

                LL = 1;
                LastAccessDate = UTIL.RemoveSingleQuotes(LastAccessDate);
                CreateDate = UTIL.RemoveSingleQuotes(CreateDate);
                LastWriteTime = UTIL.RemoveSingleQuotes(LastWriteTime);
                LL = 2;
                if (Strings.InStr(UploadFQN, "''") > 0)
                {
                    UploadFQN = UTIL.ReplaceSingleQuotes(UploadFQN);
                }

                LL = 4;
                if (!File.Exists(UploadFQN))
                {
                    LOG.WriteToArchiveLog("NOTICE 100-B: Cannot update '" + UploadFQN + "' as it does not appear to exist.");
                    return false;
                }

                LL = 5;

                // ******************************************************************************************
                byte[] AttachmentBinary = null;
                if (FileBytes is null) // nothing assigned
                {
                    AttachmentBinary = File.ReadAllBytes(UploadFQN);
                }
                else if (FileBytes.Length.Equals(0))
                {
                    // AttachmentBinary = CF.FileToByte(UploadFQN)
                    AttachmentBinary = File.ReadAllBytes(UploadFQN);
                }
                else
                {
                    AttachmentBinary = FileBytes;
                }
                // ******************************************************************************************

                bool bExtendTime = false;
                LL = 6;
                if (AttachmentBinary.Length <= 0)
                {
                    LOG.WriteToArchiveLog("ERROR : AddSourceToRepo : 661b failed to open file: " + UploadFQN + ".");
                    return false;
                }

                if (AttachmentBinary.Length > 1000000)
                {
                    bExtendTime = true;
                }

                LL = 7;
                if (AttachmentBinary.Length > 4000000000L)
                {
                    LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661b : Loading extremely large file: " + UploadFQN + Constants.vbCrLf + "File Length: " + AttachmentBinary.Length.ToString());
                }

                if (AttachmentBinary.Length > 1000000000)
                {
                    LOG.WriteToArchiveLog("Notification : AddSourceToRepo : 661b : Loading HUGE large file: " + UploadFQN + Constants.vbCrLf + "File Length: " + AttachmentBinary.Length.ToString());
                    My.MyProject.Forms.frmNotifyMessage.Show();
                    modGlobals.gNotifyMsg = "Notification : 661 : Loading HUGE large file: " + UploadFQN + Constants.vbCrLf + "File Length: " + AttachmentBinary.Length.ToString() + Constants.vbCrLf + "Over a network, this can take hours.";
                }

                LL = 8;
                bool RC = false;
                string ReturnMsg = "";
                var TxStartTime = DateAndTime.Now;
                var TxEndTime = DateAndTime.Now;
                bool bFileCompressed = false;
                var CopyOfAttachmentBinary = AttachmentBinary;
                OriginalSize = AttachmentBinary.Length;
                AttachmentBinary = COMP.CompressBuffer(AttachmentBinary);
                CompressedSize = AttachmentBinary.Length;
                LL = 10;
                if (CompressedSize >= OriginalSize)
                {
                    LL = 11;
                    AttachmentBinary = CopyOfAttachmentBinary;
                    CopyOfAttachmentBinary = null;
                    bFileCompressed = false;
                }
                else
                {
                    LL = 12;
                    CopyOfAttachmentBinary = null;
                    bFileCompressed = true;
                }

                LL = 13;
                if (bLogUploads)
                {
                    LL = 14;
                    string sMsg = "Start Upload: oSize=" + OriginalSize + " / cSize=" + CompressedSize + ", Time: " + DateAndTime.Now.ToString() + " - " + UploadFQN;
                    LOG.WriteToUploadLog(sMsg);
                }

                LL = 15;
                // ** Herein lies the Problem:
                // **     1 - 16k seems to be the maximum size that will successfully upload.
                // **     2 - See if MS will help us setup a STREAM to memory upload as well
                // **     3 - See if MS can get us a 4GB upload both in stream to file on the
                // **         server side as well as a stream to memory on the server side.
                // **     4 - Possibly MS can give us a better way to compresss/zip messages on both ends
                // Dim ProxyArchive As New SVCCLCArchive.Service1Client

                MachineID = Environment.MachineName;
                B = true;
                LL = 16;

                // ************************************************************************************************************************************************************************************************
                InsertSourceImage(modGlobals.gCurrUserGuidID, Environment.MachineName, SourceName, SourceGuid, UploadFQN, "DataSource", RetentionCode, isPublic, FileHash, FileDirectory, false);
                // ************************************************************************************************************************************************************************************************

                LL = 18;
                if (ReturnMsg.Length > 0 | !B)
                {
                    LL = 19;
                    string sMsg = "ERROR Upload: " + ReturnMsg + "  / oSize=" + OriginalSize + " / cSize=" + CompressedSize + ", Time: " + DateAndTime.Now.ToString() + " - " + UploadFQN;
                    LOG.WriteToUploadLog(sMsg);
                }

                LL = 20;
                // ProxyArchive = Nothing
                GC.Collect();
                GC.WaitForPendingFinalizers();
                LL = 24;
            }
            catch (Exception ex)
            {
                bError = true;
                var FI = new FileInfo(UploadFQN);
                int fSIze = (int)FI.Length;
                FI = null;
                B = false;
                LOG.WriteToArchiveLog("Unrecoverable Error - clsDatabaseARCH : UpdateSourcefile : 2517a LL= '" + LL.ToString() + "' : SourceGuid = '" + SourceGuid + "' : Size = " + fSIze.ToString() + Constants.vbCrLf + ex.Message);
                LOG.WriteToArchiveLog("ERROR         UpdateSourcefile : 2517a : " + UploadFQN);
                if (ex.InnerException is object)
                {
                    LOG.WriteToArchiveLog("ERROR         UpdateSourcefile : 2517a.1 : " + ex.InnerException.ToString());
                }
            }

            if (bLogUploads)
            {
                if (bError)
                {
                    string sMsg = "END Upload: (ERROR) oSize=" + OriginalSize + " / cSize=" + CompressedSize + ", Time: " + DateAndTime.Now.ToString() + " - " + UploadFQN;
                    LOG.WriteToUploadLog(sMsg);
                }
                else
                {
                    string sMsg = "END Upload: oSize=" + OriginalSize + " / cSize=" + CompressedSize + ", Time: " + DateAndTime.Now.ToString() + " - " + UploadFQN;
                    LOG.WriteToUploadLog(sMsg);
                }
            }

            return B;
        }

        public void UpdateSourceName(string SourceGuid, string SourceName)
        {
            bool b = false;
            string S = "";
            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            S = "Update DataSOurce set SourceName = '" + SourceName + "' where SourceGuid = '" + SourceGuid + "' ";
            b = ExecuteSqlNewConn(90101, S);
        }

        public bool UpdateUrlBinaryHtml(string UID, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, string HTML)
        {
            bool B = false;
            bool RC = false;
            string ReturnMsg = "";
            var TxStartTime = DateAndTime.Now;
            var TxEndTime = DateAndTime.Now;
            var AttachmentBinary = StrToByteArray(HTML);
            int OriginalSize = AttachmentBinary.Length;
            AttachmentBinary = COMP.CompressBuffer(AttachmentBinary);
            int CompressedSize = AttachmentBinary.Length;

            // B = ProxyArchive.UpdateUrlBinaryHtml(gGateWayID, 2, UID, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, AttachmentBinary, OriginalSize, CompressedSize, RC, ReturnMsg, TxStartTime, TxEndTime)
            B = UpdateUrlBinaryHtml(UID, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, HTML);
            // ProxyArchive = Nothing
            GC.Collect();
            GC.WaitForPendingFinalizers();
            Console.WriteLine("TX Time: " + TC.ElapsedTimeInMS(TxStartTime, TxEndTime));
            return B;
        }

        public bool isSourcefileOlderThanLastEntry(string SourceName, string CrcHASH)
        {
            bool B = false;
            string S = "";
            SqlDataReader rsData = null;
            try
            {
                SourceName = UTIL.RemoveSingleQuotes(SourceName);
                S = "Select  count(*) from DataSource where SourceName = '" + SourceName + "' and CRC = '" + CrcHASH + "' ";
                int iCnt = 0;
                iCnt = iCount(S);
                if (iCnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: 9755.21cx - ", ex);
                B = true;
            }
            finally
            {
                rsData = null;
            }

            return B;
        }

        public bool XXisSourcefileOlderThanLastEntry(string UserID, string SourceGuid, string UploadFQN, string SourceName, string SourceTypeCode, string FileLength, string LastAccessDate, string CreateDate, string LastWriteTime, string VersionNbr)
        {
            bool B = false;
            string S = "";
            SqlDataReader rsData = null;
            try
            {
                UploadFQN = UTIL.RemoveSingleQuotes(UploadFQN);
                S = "Select  ";
                S = S + "  [FileLength]";
                S = S + " ,[LastAccessDate]";
                S = S + " ,[CreateDate]";
                S = S + " ,[LastWriteTime]";
                S = S + " FROM DataSource ";
                S = S + " where FQN = '" + UploadFQN + "' ";
                S = S + " and VersionNbr = " + VersionNbr;
                S = S + " and DataSourceOwnerUserID = '" + UserID + "'";
                int i = 0;
                string id = "";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    string tFileLength = rsData.GetValue(0).ToString();
                    string tLastAccessDate = rsData.GetValue(1).ToString();
                    string tCreateDate = rsData.GetValue(2).ToString();
                    string tLastWriteTime = rsData.GetValue(3).ToString();
                    LastAccessDate = UTIL.VerifyDate(LastAccessDate);
                    CreateDate = UTIL.VerifyDate(CreateDate);
                    LastWriteTime = UTIL.VerifyDate(LastWriteTime);
                    tLastAccessDate = UTIL.VerifyDate(tLastAccessDate);
                    tCreateDate = UTIL.VerifyDate(tCreateDate);
                    tLastWriteTime = UTIL.VerifyDate(tLastWriteTime);
                    if (Conversions.ToInteger(FileLength) != Conversions.ToInteger(tFileLength))
                    {
                        B = true;
                    }
                    else if (Conversions.ToDate(CreateDate) != Conversions.ToDate(tCreateDate))
                    {
                        B = true;
                    }
                    else if (Conversions.ToDate(LastWriteTime) > Conversions.ToDate(tLastWriteTime))
                    {
                        B = true;
                    }
                }
                else
                {
                    id = "";
                }

                rsData.Close();
                rsData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: 9755.21cx - ", ex);
                B = true;
            }
            finally
            {
                rsData = null;
            }

            return B;
        }

        public byte[] GetAttachmentFromDB(string EmailGuid)
        {
            var con = new SqlConnection(getRepoConnStr());
            var da = new SqlDataAdapter("Select * From EmailAttachment where EmailGuid = '" + EmailGuid + "'", con);
            var MyCB = new SqlCommandBuilder(da);
            var ds = new DataSet();
            string TypeAttachmentCode = "";
            con.Open();
            da.Fill(ds, "Attachments");
            DataRow myRow;
            myRow = ds.Tables["Attachments"].Rows[0];
            byte[] MyData;
            MyData = (byte[])myRow["Attachment"];
            TypeAttachmentCode = Conversions.ToString(myRow["AttachmentCode"]);
            MyCB = null;
            ds = null;
            da = null;
            con.Close();
            con = null;
            return MyData;
        }

        /// <summary>
    /// Determines if an email has already been stored based on the short subject, received time, and
    /// the sender's email address.
    /// </summary>
    /// <param name="EmailSubj">         The subject of the email.</param>
    /// <param name="EmailReceivedTime"> The time the email was received.</param>
    /// <param name="SenderEmailAddress">The email addres of the sender.</param>
    /// <returns>Boolean</returns>
    /// <remarks>This funcition, if extended to include other parms in the lookup will be overloaded.</remarks>
        public bool isEmailStored(string EmailSubj, string EmailCreationTime, string EmailReceivedTime, string EmailSentOn, string SenderEmailAddress)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            EmailSubj = UTIL.RemoveSingleQuotes(EmailSubj);
            SenderEmailAddress = UTIL.RemoveSingleQuotes(SenderEmailAddress);
            S = " SELECT count(*)";
            S = S + " FROM [Email] ";
            S = S + " where [ShortSubj] = '" + EmailSubj + "' ";
            S = S + " and creationtime = '" + EmailCreationTime + "' ";
            S = S + " and SentOn = '" + EmailSentOn + "' ";
            S = S + " and [ReceivedTime] = '" + EmailReceivedTime + "' ";
            S = S + " and [SenderEmailAddress] = '" + SenderEmailAddress + "' ";
            CloseConn();
            CkConn();
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckBackupFolder(string UserID, string FolderName)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            S = " SELECT count(*)";
            S = S + " FROM [EmailFolder] ";
            S = S + " WHERE [UserID] = '" + UserID + "' ";
            S = S + " AND [FolderName] = '" + FolderName + "' ";
            S = S + " AND [ArchiveEmails] = 'Y' ";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            using (CONN)
            {
                SqlDataReader RSData = null;
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN = null;
            return B;
        }

        public void delSubDirs(string UID, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "delete FROM [SubDir] where [UserID] = '" + UID + "' and [FQN] = '" + FQN + "' ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                ExecuteSqlNewConn(S, false);
            }
        }

        public void delFileParms(string SGUID)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            CloseConn();
            CkConn();

            // Dim ConnStr  = System.Configuration.ConfigurationManager.AppSettings(ConnStrID)
            // Dim Conn As New SqlConnection(ConnStr)

            S = "DELETE FROM [SourceAttribute] WHERE SourceGuid = '" + SGUID + "'";
            using (gConn)
            {
                if (gConn.State == ConnectionState.Closed)
                {
                    gConn.Open();
                }

                B = ExecuteSqlNewConn(S, false);
            }
        }

        /// <summary>
    /// Looks to see what filetypes have been defined to the system It looks in table AvailFileTypes.
    /// </summary>
    /// <returns>Bolean True/False</returns>
    /// <remarks></remarks>
        public bool ckFileExtExists()
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "Select count(*) FROM [AvailFileTypes]";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckFQNExists(string fqn)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            fqn = fqn.Replace("'", "''");
            S = "Select count(*) FROM DataSource where FQN = '" + fqn + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                using (RSData)
                {
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                }

                command.Connection.Close();
                command = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckUserExists(string UserID)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "Select count(*) FROM [Users] where UserID = '" + UserID + "' ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    try
                    {
                        Conn.Open();
                    }
                    catch (Exception ex)
                    {
                        // xTrace(12325, "clsDataBase:ckUserExists" + ex.Message)
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ckUserExists : 2656 : ", ex);
                        return false;
                    }
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public int ckUserLoginExists(string UserLogin, ref bool RC, ref string RetMsg)
        {
            string S = "";
            bool B = true;
            int cnt = -1;

            // Dim ConnStr As String = getRepoConnStr()

            string ConnStr = getRepoConnStr();
            // ConnStr = ENC.AES256DecryptString(ConnStr)

            var Conn = new SqlConnection(ConnStr);

            // S = "Select count(*) FROM [User] where UserLoginID = '" + UserLogin + "' "
            S = "Select count(*) FROM [Users] where UserID = '" + UserLogin + "' ";

            // MessageBox.Show("REMOVE THIS: checking for user at: " + ConnStr + vbCrLf + S)
            // Clipboard.Clear()
            // Clipboard.SetText("REMOVE THIS: checking for user at: " + ConnStr + vbCrLf + S)

            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    try
                    {
                        Conn.Open();
                    }
                    catch (Exception ex)
                    {
                        RetMsg = "ERROR: " + ex.ToString();
                        // xTrace(12325, "clsDataBase:ckUserExists" + ex.Message)
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ckUserExists : 2656 : ", ex);
                        return -1;
                    }
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                if (cnt > 0)
                {
                    RC = true;
                }
                else
                {
                    RC = false;
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return cnt;
        }

        public string getBinaryPassword(string UserLogin)
        {
            string S = "";
            bool B = false;
            string BPW = "";
            // Dim ConnStr As String = getRepoConnStr()
            string ConnStr = getRepoConnStr();
            // ConnStr = ENC.AES256DecryptString(ConnStr)

            var Conn = new SqlConnection(ConnStr);
            S = "Select UserPassword FROM [Users] where UserID = '" + UserLogin + "' ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    try
                    {
                        Conn.Open();
                    }
                    catch (Exception ex)
                    {
                        // xTrace(12325, "clsDataBase:ckUserExists" + ex.Message)
                        LOG.WriteToArchiveLog("clsDatabaseARCH : ckUserExists : 2656 : ", ex);
                        return Conversions.ToString(false);
                    }
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                BPW = RSData.GetValue(0).ToString();
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return BPW;
        }

        public bool ckFolderExists(string FileDirectory, string UserID, string FolderName)
        {
            try
            {
                string S = "";
                bool B = false;
                int cnt = -1;
                string ConnStr = getRepoConnStr();
                var Conn = new SqlConnection(ConnStr);
                FileDirectory = UTIL.RemoveSingleQuotes(FileDirectory);
                S = "Select count(*) FROM [EmailArchParms] where FolderName = '" + FileDirectory + "' and [UserID] = '" + UserID + "' and [FolderName] = '" + FolderName + "' ";
                // S = "Select count(*) FROM [EmailFolder] where [UserID] = '" + UserID  + "' and [FolderName] = '" + FolderName  + "' "
                // SELECT COUNT(*)  FROM EmailArchParms where UserID = 'wmiller' and FolderName = 'Personal Folders|Dale''s Stuff'
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                return B;
            }
            catch (Exception ex)
            {
                // xTrace(12325, "clsDataBase:ckFolderExists" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckFolderExists : 2704 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckFolderExists : 2670 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckFolderExists : 2681 : ", ex);
                return false;
            }
        }

        public bool ckUrlExists(string FQN)
        {
            try
            {
                string S = "";
                bool B = false;
                int cnt = -1;
                string ConnStr = getRepoConnStr();
                var Conn = new SqlConnection(ConnStr);
                S = "Select count(*) FROM DataSource where FQN = '" + FQN + "' ";
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                return B;
            }
            catch (Exception ex)
            {
                // xTrace(12325, "clsDataBase:ckFolderExists" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckFolderExists : 2681 : ", ex);
                return false;
            }
        }

        public bool ckMasterExists(string FileName, string TblName, string ColName, string SourceGuid = null)
        {
            // SELECT count(*) FROM  [DataSource] where [SourceName] = 'Current State of ECM.docx' and [isMaster] = 'Y'

            // SELECT SourceName FROM  [DataSource] where SourceGuid = 'XX'

            if (SourceGuid == null)
            {
            }
            else
            {
                FileName = getFilenameByGuid(SourceGuid);
            }

            try
            {
                string S = "";
                bool B = false;
                int cnt = -1;
                string ConnStr = getRepoConnStr();
                var Conn = new SqlConnection(ConnStr);
                S = "Select count(*) FROM  [DataSource] where [SourceName] = '" + FileName + "' and [isMaster] = 'Y'";
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                return B;
            }
            catch (Exception ex)
            {
                // xTrace(12326, "clsDataBase:ckMasterExists" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckMasterExists : 2738 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckMasterExists : 2704 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckMasterExists : 2716 : ", ex);
                return false;
            }
        }

        public bool ckParmsFolderExists(string UserID, string FolderName)
        {
            try
            {
                string S = "";
                bool B = false;
                int cnt = -1;
                string ConnStr = getRepoConnStr();
                var Conn = new SqlConnection(ConnStr);
                S = "Select count(*) FROM [EmailArchParms] where [UserID] = '" + UserID + "' and [FolderName] = '" + FolderName + "' ";
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                return B;
            }
            catch (Exception ex)
            {
                // xTrace(12326, "clsDataBase:ckParmsFolderExists" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckParmsFolderExists : 2768 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckParmsFolderExists : 2734 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckParmsFolderExists : 2747 : ", ex);
                return false;
            }
        }

        public Array SelectOneEmailParm(string WhereClause)
        {
            var A = new string[12];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            s = s + " SELECT ";
            s = s + "UserID,";
            s = s + "ArchiveEmails,";
            s = s + "RemoveAfterArchive,";
            s = s + "SetAsDefaultFolder,";
            s = s + "ArchiveAfterXDays,";
            s = s + "RemoveAfterXDays,";
            s = s + "RemoveXDays,";
            s = s + "ArchiveXDays,";
            s = s + "FolderName,";
            s = s + "DB_ID ,";
            s = s + "ArchiveOnlyIfRead, isSysDefault ";
            s = s + " FROM EmailArchParms ";
            s = s + WhereClause;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    A[0] = RSData.GetValue(0).ToString();
                    A[1] = RSData.GetValue(1).ToString();
                    A[2] = RSData.GetValue(2).ToString();
                    A[3] = RSData.GetValue(3).ToString();
                    A[4] = RSData.GetValue(4).ToString();
                    A[5] = RSData.GetValue(5).ToString();
                    A[6] = RSData.GetValue(6).ToString();
                    A[7] = RSData.GetValue(7).ToString();
                    A[8] = RSData.GetValue(8).ToString();
                    A[9] = RSData.GetValue(9).ToString();
                    A[10] = RSData.GetValue(10).ToString();
                    A[11] = RSData.GetValue(11).ToString();
                    // UserID = a(0)
                    // ArchiveEmails = a(1)
                    // RemoveAfterArchive = a(2)
                    // SetAsDefaultFolder = a(3)
                    // ArchiveAfterXDays = a(4)
                    // RemoveAfterXDays = a(5)
                    // RemoveXDays = a(6)
                    // ArchiveXDays = a(7)
                    // FolderName = a(8)
                    // DB_ID = a(9)
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return A;
        }

        public void LoadAvailFileTypes(ref ComboBox CB)
        {
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            s = " SELECT distinct [ExtCode] FROM [AvailFileTypes] order by [ExtCode]";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        CB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void LoadAvailUsers(ref ComboBox CB)
        {
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            s = " SELECT UserLoginID FROM Users ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        CB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void LoadRetentionCodes(ref ComboBox CB)
        {
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            int iCnt = 0;
            s = "select RetentionCode from Retention order by RetentionCode";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        iCnt += 1;
                        string SS = RSData.GetValue(0).ToString();
                        CB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
                if (iCnt == 0)
                {
                    // If gRunUnattended = False Then MessageBox.Show("Failed to load the retention codes, this will cause issues.")
                    LOG.WriteToArchiveLog("ERROR - Failed to load the retention codes, this will cause issues.");
                }
            }
        }

        public void LoadAvailFileTypes(ref ListBox LB)
        {
            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            s = " SELECT distinct [ExtCode] FROM [AvailFileTypes] order by ExtCode";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        if (SS.Equals("*"))
                        {
                        }
                        else if (SS.Equals(".*"))
                        {
                        }
                        else
                        {
                            LB.Items.Add(SS);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void LoadFileTypeProfiles(ref ComboBox CB)
        {
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            s = " SELECT [ProfileName] FROM [LoadProfile] order by [ProfileName] ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        CB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public string getIncludedFileTypeWhereIn(string UserID, string DirName)
        {
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            string WC = "";
            bool bFound = false;
            DirName = UTIL.RemoveSingleQuotes(DirName);
            s = " SELECT [UserID]";
            s = s + " ,[ExtCode]";
            s = s + " ,[FQN]";
            s = s + " FROM IncludedFiles ";
            s = s + " where Userid = '" + UserID + "' ";
            s = s + " and FQN = '" + DirName + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        bFound = true;
                        string SS = RSData.GetValue(1).ToString().ToLower();
                        WC += SS + ",";
                    }

                    if (bFound)
                    {
                        WC = WC.Trim().Substring(0, WC.Length - 1);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return WC;
        }

        public Dictionary<string, string> getIncludedFileTypeWhereIn(string UserID)
        {
            var TDict = new Dictionary<string, string>();
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            string WC = "";
            bool bFound = false;
            string CurrDir = "";
            string ExtCode = "";
            string PrevDir = "";
            int iCnt = 0;
            int idx = 0;
            s = @" SELECT distinct ExtCode
                FROM IncludedFiles 
                where Userid = '" + UserID + "'";
            s = "select distinct FQN, EXtcode from IncludedFiles where UserID = '" + UserID + "' order by fqn";
            try
            {
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(s, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            bFound = true;
                            CurrDir = RSData.GetValue(0).ToString().ToLower();
                            ExtCode = RSData.GetValue(1).ToString().ToLower();
                            if ((PrevDir ?? "") != (CurrDir ?? "") & iCnt > 0)
                            {
                                // WDM Do not remove the last commas as it is used in the contains stmt later in the code
                                // If WC.Contains(",") Then
                                // WC = WC.Trim.Substring(0, WC.Length - 1)
                                // End If
                                TDict.Add(PrevDir, WC);
                                WC = "";
                                WC += ExtCode.ToLower() + ",";
                            }
                            else
                            {
                                WC += ExtCode.ToLower() + ",";
                            }

                            iCnt += 1;
                            PrevDir = CurrDir;
                        }
                    }

                    if (!TDict.Keys.Contains(CurrDir))
                    {
                        WC += ExtCode.ToLower() + ",";
                        // WC = WC.Trim.Substring(0, WC.Length - 1)
                        TDict.Add(PrevDir, WC);
                        WC = "";
                        WC += ExtCode.ToLower() + ",";
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getIncluded Exts 00 : " + ex.Message);
                Console.WriteLine("ERROR getIncluded Exts 00 : " + ex.Message);
            }

            return TDict;
        }

        public void LoadIncludedFileTypes(ref ListBox LB, string UserID, string DirName)
        {
            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            DirName = UTIL.RemoveSingleQuotes(DirName);
            s = " SELECT [UserID]";
            s = s + " ,[ExtCode]";
            s = s + " ,[FQN]";
            s = s + " FROM IncludedFiles ";
            s = s + " where Userid = '" + UserID + "' ";
            s = s + " and FQN = '" + DirName + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(1).ToString();
                        LB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void LoadExcludedFileTypes(ref ListBox LB, string UserID, string DirName)
        {
            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string s = "";
            DirName = UTIL.RemoveSingleQuotes(DirName);
            s = " SELECT [UserID]";
            s = s + " ,[ExtCode]";
            s = s + " ,[FQN]";
            s = s + " FROM ExcludedFiles ";
            s = s + " where Userid = '" + UserID + "' ";
            s = s + " and FQN = '" + DirName + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(s, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(1).ToString();
                        LB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetActiveEmailFolders(string TopLevelOutlookFolderName, ref ListBox LB, string UserID, SortedList<string, string> CF, ArrayList ArchivedEmailFolders)
        {
            ArchivedEmailFolders.Clear();
            TopLevelOutlookFolderName = UTIL.RemoveSingleQuotes(TopLevelOutlookFolderName);
            string S = " ";
            S = " Select distinct FolderName ";
            S = S + " FROM EmailFolder ";
            S = S + " where (UserID = '" + modGlobals.gCurrUserGuidID + "' ";
            S = S + " and SelectedForArchive = 'Y' ";
            S = S + " and FolderName like '" + TopLevelOutlookFolderName + "') ";
            S = S + " or isSysDefault = 1 ";
            S = S + " order by FolderName ";
            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        var A2 = SS.Split('|');
                        SS = A2[Information.UBound(A2)];
                        LB.Items.Add(SS);
                        ArchivedEmailFolders.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;

                // Dim S  = "Update EmailFolder set SelectedForArchive = NULL where UserID = '" + gCurrUserGuidID + "'"
                // Dim BB As Boolean = ExecuteSqlNoTx(S)

                bool BB = true;
                bool B1 = false;
                if (BB)
                {
                    for (int II = 0, loopTo = LB.Items.Count - 1; II <= loopTo; II++)
                        ActivateArchiveFolder(TopLevelOutlookFolderName, LB.Items[II].ToString(), UserID);
                }
            }
        }

        public void ActivateArchiveFolder(string ParentFolder, string FolderName, string UserID)
        {
            // Update EmailFolder set
            // SelectedForArchive = 'Y'
            // where UserID = 'wmiller'
            // and FolderName = '_Passage'
            // and ParentFolderName = 'Personal Folders'
            string FolderFQN = ParentFolder + "|" + FolderName;
            FolderFQN = UTIL.RemoveSingleQuotes(FolderFQN);
            string S = "Update EmailFolder set SelectedForArchive = 'Y' where UserID = '" + UserID + "' and FolderName = '" + FolderFQN + "' and FileDirectory = '" + ParentFolder + "' ";
            bool B1 = ExecuteSqlNoTx(S);
            if (!B1)
            {
                MessageBox.Show("Failed to Activate folder " + FolderName);
            }
        }

        public void deActivateArchiveFolder(string FolderName, string UserID)
        {
            string S = "Update EmailFolder set SelectedForArchive = 'N' where UserID = '" + UserID + "' and FolderName = '" + FolderName + "'";
            bool B1 = ExecuteSqlNoTx(S);
            if (!B1)
            {
                MessageBox.Show("Failed to Activate folder " + FolderName);
            }
        }

        public int setActiveEmailFolders(string TopLevelOutlookFolder, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int SubFoldersToProcess = 0;
            var SLB = new SortedList();
            string S = " Select distinct FolderName ";
            S = S + " FROM EmailFolder ";
            S = S + " where UserID = '" + UserID + "' and FolderName like '" + TopLevelOutlookFolder + "|%'  ";
            S = S + " and SelectedForArchive = 'Y' ";
            S = S + " or isSysDefault = 1 ";
            S = S + " order by FolderName ";

            // select distinct FolderName from EmailFolder
            // where FolderName like 'Personal Folders|%' and UserID = 'wmiller'

            // Dim A (9)
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SubFoldersToProcess += 1;
                        string SS = RSData.GetValue(0).ToString();
                        int bKeyExists = -1;
                        bKeyExists = SLB.IndexOfKey(SS);
                        if (bKeyExists < 0)
                        {
                            // If CF.ContainsKey(SS) Then
                            // SLB.Add(SS, SS)
                            // End If
                            SLB.Add(SS, SS);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;

                // '** in - Determined we may not need to do the following on 9/27/2009
                // Dim WeNeedThis As Boolean = True
                // If WeNeedThis Then
                // Dim S  = "Update EmailFolder set SelectedForArchive = 'N' where UserID = '" + UserID  + "'"
                // Dim BB As Boolean = ExecuteSqlNoTx(S)
                // Dim B1 As Boolean = False
                // If BB Then
                // For II As Integer = 0 To SLB.Count - 1
                // If ddebug Then Debug.Print(SLB.GetKey(II).ToString)
                // S  = "Update EmailFolder set SelectedForArchive = 'Y' where UserID = '" + UserID  + "' and FolderName = '" + SLB.GetKey(II).ToString + "'"
                // B1 = ExecuteSqlNoTx(S)
                // If Not B1 Then
                // messagebox.show("Failed to set the Selected For Archive flag for folder " + SLB.GetKey(II).ToString)
                // End If
                // Next
                // End If
                // End If
            }

            return SubFoldersToProcess;
        }

        public void GetDirectoryData(string UserID, string FQN, ref string DBID, ref string IncludeSubDirs, ref string VersionFiles, ref string FolderDisabled, ref string ckMetaData, ref string ckPublic, ref string OcrDirectory, ref string isSysDefault, ref bool ArchiveSkipBit, ref bool ListenForChanges, ref bool ListenDirectory, ref bool ListenSubDirectory, ref string DirGuid, ref string OcrPdf, ref string DeleteOnArchive)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select IncludeSubDirs, DB_ID, VersionFiles, ckDisableDir, ckMetaData, ckPublic, OcrDirectory,isSysDefault, ArchiveSkipBit, DirGuid, ListenDirectory,ListenSubDirectory, OcrPdf, DeleteOnArchive FROM [Directory] where [UserID] = '" + UserID + "' and FQN = '" + FQN + "'";
            // Dim A (9)
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        IncludeSubDirs = RSData.GetValue(0).ToString();
                        DBID = RSData.GetValue(1).ToString();
                        VersionFiles = RSData.GetValue(2).ToString();
                        FolderDisabled = RSData.GetValue(3).ToString();
                        ckMetaData = RSData.GetValue(4).ToString();
                        ckPublic = RSData.GetValue(5).ToString();
                        OcrDirectory = RSData.GetValue(6).ToString();
                        isSysDefault = RSData.GetValue(7).ToString();
                        ArchiveSkipBit = RSData.GetBoolean(8);
                        DirGuid = RSData.GetValue(9).ToString();
                        string SX = RSData.GetValue(10).ToString();
                        SX = RSData.GetValue(11).ToString();
                        OcrPdf = RSData.GetValue(12).ToString();
                        DeleteOnArchive = RSData.GetValue(13).ToString();
                        try
                        {
                            ListenDirectory = RSData.GetBoolean(10);
                        }
                        catch (Exception ex)
                        {
                            ListenDirectory = false;
                        }

                        try
                        {
                            ListenSubDirectory = RSData.GetBoolean(11);
                        }
                        catch (Exception ex)
                        {
                            ListenSubDirectory = false;
                        }

                        // If sArchiveSkipBit Then
                        // ArchiveSkipBit = True
                        // Else
                        // ArchiveSkipBit = False
                        // End If
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public bool isSubDirProcessed(string UserID, string DirFQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            DirFQN = UTIL.RemoveSingleQuotes(DirFQN);
            string S = "Select IncludeSubDirs FROM [Directory] where [UserID] = '" + UserID + "' and FQN = '" + DirFQN + "'";
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool B = false;
            string IncludeSubDirs = "";
            try
            {
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            IncludeSubDirs = RSData.GetValue(0).ToString();
                            if (IncludeSubDirs.ToUpper().Equals("Y"))
                            {
                                B = true;
                            }
                            else
                            {
                                B = false;
                            }
                        }
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR isSubDirProcessed 100: ", ex);
                B = false;
            }

            return B;
        }

        public void GetDirectories(ref ListBox LB, string UserID, bool ShowDisabled)
        {
            // *WDM 7/20/2009 - Modified query to bring back DISTINCT directories
            string S = "";
            S = "update Directory set ckDisableDir = 'N'  where [UserID] = '" + modGlobals.gCurrUserGuidID + "' and ckDisableDir is null ";
            ExecuteSqlNewConn(90105, S);
            S = "";
            if (ShowDisabled == true)
            {
                S = "Select    distinct [FQN], ckDisableDir " + Constants.vbCrLf;
                S = S + "             FROM [Directory] " + Constants.vbCrLf;
                S = S + " where [UserID] = '" + modGlobals.gCurrUserGuidID + "' " + Constants.vbCrLf;
                S = S + " and (QuickRefEntry = 0  or QuickRefEntry is null) and ckDisableDir = 'Y'" + Constants.vbCrLf;
                S = S + " or isSysDefault = 1" + Constants.vbCrLf;
                S = S + " group by FQN, ckDisableDir " + Constants.vbCrLf;
                S = S + " order by fqn " + Constants.vbCrLf;
            }
            else
            {
                S = "Select    distinct [FQN], ckDisableDir " + Constants.vbCrLf;
                S = S + "             FROM [Directory] " + Constants.vbCrLf;
                S = S + " where [UserID] = '" + modGlobals.gCurrUserGuidID + "' " + Constants.vbCrLf;
                S = S + " and (QuickRefEntry = 0  or QuickRefEntry is null) and ckDisableDir <> 'Y'  " + Constants.vbCrLf;
                // ** S = S + " or isSysDefault = 1" + vbCrLf
                S = S + " group by FQN, ckDisableDir " + Constants.vbCrLf;
                S = S + " order by fqn " + Constants.vbCrLf;
            }

            // Clipboard.Clear()
            // Clipboard.SetText(S)

            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                int II = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        II += 1;
                        string SS = RSData.GetValue(0).ToString();
                        // frmReconMain.SB2.Text = "Processing Dir/File # " + II.ToString
                        // frmReconMain.Refresh()
                        Application.DoEvents();
                        if (Strings.InStr(SS, "%userid%", CompareMethod.Text) > 0)
                        {
                            LB.Items.Add(SS);
                        }
                        else if (Directory.Exists(SS))
                        {
                            LB.Items.Add(SS);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetIncludedFiles(ref ListBox LB, string UserID, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select [ExtCode] FROM [IncludedFiles] where [UserID] = '" + UserID + "'  and [FQN] = '" + FQN + "'";
            LB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            int II = 0;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        II += 1;
                        My.MyProject.Forms.frmMain.SB2.Text = "Processing Extension# " + II.ToString();
                        My.MyProject.Forms.frmMain.Refresh();
                        Application.DoEvents();
                        string SS = RSData.GetValue(0).ToString();
                        LB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetActiveDatabases(ref ComboBox CB)
        {
            string S = " SELECT [DB_ID] FROM [Databases] ";
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string SS = RSData.GetValue(0).ToString();
                        CB.Items.Add(SS);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetProcessAsList(ref ComboBox CB)
        {
            string S = "Select [ExtCode] ,[ProcessExtCode] FROM [ProcessFileAs] order by [ExtCode],[ProcessExtCode]";
            CB.Items.Clear();
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string P = RSData.GetValue(0).ToString();
                        string C = RSData.GetValue(1).ToString();
                        CB.Items.Add(P + " --> " + C);
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public bool ckReconParmExists(string UserID, string ReconParm)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "Select count(*) FROM [RunParms] ";
            S = S + " where Parm = '" + ReconParm + "' ";
            S = S + " and UserID = '" + UserID + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckProcessAsExists(string Pext)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "Select count(*) FROM [ProcessFileAs] where [ExtCode] = '" + Pext + "' ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckExtExists(string tExt)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            S = "Select count(*) from AvailFileTypes where ExtCode = '" + tExt + "' ";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool ckDirectoryExists(string UserID, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            bool B = false;
            int cnt = -1;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            FQN = UTIL.RemoveSingleQuotes(FQN);
            S = "Select count(*) FROM [Directory] ";
            S = S + " where FQN = '" + FQN + "' ";
            S = S + " and UserID = '" + UserID + "'";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public string getRconParm(string UserID, string ParmID)
        {
            string S = " SELECT [ParmValue] FROM [RunParms] where Parm = '" + ParmID + "' and UserID = '" + UserID + "'";
            string SS = "";
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        SS = RSData.GetValue(0).ToString();
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return SS;
        }

        public bool ExecuteSqlNewConn(string sql, string ConnStr, bool ValidateOwnerShip)
        {
            if (ValidateOwnerShip == true)
            {
                if (TgtGuid.Length == 0)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.02 - TgtGuid left blank and is required, contact ADMIN as this is an error.")
                    LOG.WriteToArchiveLog("ERROR 666.02 - TgtGuid left blank and is required, contact ADMIN as this is an error.");
                    return false;
                }

                bool isOwner = ckContentOwnership(TgtGuid, modGlobals.gCurrUserGuidID);
                if (isOwner == false)
                {
                    // If gRunUnattended = False Then MessageBox.Show("ERROR 666.02b - This will be removed - tried to update content you do not own, ABORTED!")
                    LOG.WriteToTraceLog("ExecuteSql2: User '" + modGlobals.gCurrUserGuidID + "' tried to change '" + TgtGuid + "' w/o ownership.");
                    return false;
                }
            }

            string TxName = "TX001";
            bool rc = false;
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var dbCmd = Conn.CreateCommand();
                dbCmd.Connection = Conn;
                try
                {
                    dbCmd.CommandText = sql;
                    dbCmd.ExecuteNonQuery();
                    bool debug = true;
                    rc = true;
                }
                catch (Exception ex)
                {
                    rc = false;
                    Console.WriteLine("Exception Type: {0}", ex.GetType());
                    Console.WriteLine("  Message: {0}" + ex.Message);
                    Console.WriteLine(sql);
                    // xTrace(997110, "ExecuteSql: ", "-----------------------")
                    // xTrace(997111, "ExecuteSql: ", ex.Message.ToString)
                    // xTrace(997112, "ExecuteSql: ", ex.StackTrace.ToString)
                    // xTrace(997113, "ExecuteSql: ", sql)
                    LOG.WriteToArchiveLog("clsDatabaseARCH : ExecuteSql : 3382 : ", ex);
                }
            }

            if (Conn.State == ConnectionState.Closed)
            {
                Conn.Close();
            }

            Conn = null;
            return rc;
        }

        public string GetEmailDBConnStr(ref string DBID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select DB_CONN_STR from databases where DB_ID = '" + DBID + "' ";
            var A = new string[10];
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        DbConnStr = RSData.GetValue(0).ToString();
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return DbConnStr;
        }

        public void GetEmailFolders(ref string UID, ref string[] aFolders)
        {
            string S = "Select ";
            S = S + "  [FolderName]";
            S = S + " FROM Email ";
            S = S + " where UserID = '" + UID + "' ";
            aFolders = new string[1];
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        DbConnStr = RSData.GetValue(0).ToString();
                        if (I == 0)
                        {
                            aFolders[0] = DbConnStr;
                        }
                        else
                        {
                            Array.Resize(ref aFolders, I + 1);
                            aFolders[I] = DbConnStr;
                        }

                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public Dictionary<string, string> GetUserDirectories(string UID)
        {
            var LOF = new Dictionary<string, string>();
            IXV1 = 0;
            DMA.IXV1 = 0;
            string SQL = @"SELECT Directory.FQN, 
                Directory.IncludeSubDirs
                FROM  Directory 
                WHERE ((Directory.UserID = '" + UID + @"') OR
                (Directory.isSysDefault = 1)) and
		        Directory.ckDisableDir = 'N'
                order by Directory.fqn";
            ;
#error Cannot convert ReDimStatementSyntax - see comment for details
            /* Cannot convert ReDimStatementSyntax, System.InvalidCastException: Unable to cast object of type 'Microsoft.CodeAnalysis.VisualBasic.Symbols.Metadata.PE.PENamedTypeSymbolWithEmittedNamespaceName' to type 'Microsoft.CodeAnalysis.IArrayTypeSymbol'.
               at ICSharpCode.CodeConverter.CSharp.MethodBodyExecutableStatementVisitor.CreateNewArrayAssignment(ExpressionSyntax vbArrayExpression, ExpressionSyntax csArrayExpression, List`1 convertedBounds, Int32 nodeSpanStart)
               at ICSharpCode.CodeConverter.CSharp.MethodBodyExecutableStatementVisitor.<ConvertRedimClauseAsync>d__41.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.CSharp.MethodBodyExecutableStatementVisitor.<<VisitReDimStatement>b__40_0>d.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.Shared.AsyncEnumerableTaskExtensions.<SelectAsync>d__3`2.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.Shared.AsyncEnumerableTaskExtensions.<SelectManyAsync>d__0`2.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.CSharp.MethodBodyExecutableStatementVisitor.<VisitReDimStatement>d__40.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.CSharp.HoistedNodeStateVisitor.<AddLocalVariablesAsync>d__6.MoveNext()
            --- End of stack trace from previous location where exception was thrown ---
               at ICSharpCode.CodeConverter.CSharp.CommentConvertingMethodBodyVisitor.<DefaultVisitInnerAsync>d__3.MoveNext()

            Input:

                    ReDim aFolders(0)

             */
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string FQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string ckDisableDir = "";
            bool FirstEntryComplete = false;
            var ListOfFiles = new List<string>();
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(SQL, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        FQN = RSData.GetValue(0).ToString();
                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        if (!LOF.Keys.Contains(FQN))
                        {
                            LOF.Add(FQN, IncludeSubDirs);
                        }

                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return LOF;
        }

        public void GetContentArchiveFileFolders(string UID, ref string[] aFolders)
        {
            IXV1 = 0;
            DMA.IXV1 = 0;
            string S = " ";
            S = S + " SELECT Directory.FQN, ";
            S = S + " Directory.IncludeSubDirs, ";
            S = S + " Directory.DB_ID,";
            S = S + " Directory.VersionFiles, ";
            S = S + " Directory.ckDisableDir, ";
            S = S + " Directory.OcrDirectory, ";
            S = S + " Directory.RetentionCode, ";
            S = S + " SubDir.SUBFQN ";
            S = S + " FROM  Directory FULL OUTER JOIN";
            S = S + " SubDir ON Directory.FQN = SubDir.FQN";
            S = S + " WHERE (Directory.UserID = '" + UID + "') OR";
            S = S + " (Directory.isSysDefault = 1) ";
            S = S + " order by Directory.fqn";
            aFolders = new string[1];
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string FQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string VersionFiles = "";
            string DisableFolder = "";
            string OcrDirectory = "";
            string RetentionCode = "";
            bool FirstEntryComplete = false;
            string SUBFQN = "";
            var ListOfFiles = new List<string>();
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        FQN = RSData.GetValue(0).ToString();
                        FQN = UTIL.RemoveSingleQuotes(FQN);
                        if (!Directory.Exists(FQN))
                        {
                            goto SkipThisOne;
                        }

                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        DB_ID = RSData.GetValue(2).ToString();
                        VersionFiles = RSData.GetValue(3).ToString();
                        DisableFolder = RSData.GetValue(4).ToString();
                        OcrDirectory = RSData.GetValue(5).ToString();
                        RetentionCode = RSData.GetValue(6).ToString();
                        SUBFQN = RSData.GetValue(7).ToString();
                        if (DisableFolder.ToUpper().Equals("Y"))
                        {
                            goto SkipThisOne;
                        }

                        if (SUBFQN.Length == 0)
                        {
                        }
                        // ** do nothing
                        else if (SUBFQN.Trim().Length > 0)
                        {
                            FQN = SUBFQN;
                        }

                        ListOfFiles.Clear();
                        if (IncludeSubDirs.Equals("Y"))
                        {
                            // ListOfFiles = DMA.GetFilesRecursive(FQN)
                            // DMA.GetAllDirs(FQN, ListOfFiles)
                            if (bUseCommandProcessForInventory == 1)
                            {
                                bool BB = DMA.GetSubDirs(FQN, ListOfFiles);
                                if (BB == false)
                                {
                                    ListOfFiles = DMA.GetDirsRecursive(FQN);
                                }
                            }
                            else
                            {
                                ListOfFiles = DMA.GetDirsRecursive(FQN);
                            }
                        }

                        if (!ListOfFiles.Contains(FQN))
                        {
                            ListOfFiles.Add(FQN);
                        }

                        for (int k = 0, loopTo = ListOfFiles.Count - 1; k <= loopTo; k++)
                        {
                            string tFqn = ListOfFiles[k];
                            if (FirstEntryComplete == false)
                            {
                                FirstEntryComplete = true;
                                aFolders[0] = FQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode;
                            }
                            else
                            {
                                int X = Information.UBound(aFolders) + 1;
                                Array.Resize(ref aFolders, X + 1);
                                aFolders[X] = FQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode;
                            }
                        }

                        SkipThisOne:
                        ;
                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetContentArchiveFileFolders(string UID, ref List<string> tgtFolders, string TgtFolder)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {

                // , ByRef tgtFolders As List(Of String)
                if (UID is null)
                {
                    UID = modGlobals.gCurrUserGuidID;
                }

                if (UID.Length == 0)
                {
                    UID = modGlobals.gCurrUserGuidID;
                }

                TgtFolder = UTIL.RemoveSingleQuotes(TgtFolder);
                string S = " ";
                IXV1 = 0;
                DMA.IXV1 = 0;
                string AutoIncludeSubDirs = System.Configuration.ConfigurationManager.AppSettings["AutoIncludeSubDirs"];

                // S = "delete FROM [DirectoryTemp] where [gCurrUserGuidID] = '" + gCurrUserGuidID + "' "
                // Me.ExecuteSqlNewConn(S, False)

                S = S + " SELECT Directory.FQN, ";
                S = S + " Directory.IncludeSubDirs, ";
                S = S + " Directory.DB_ID,";
                S = S + " Directory.VersionFiles, ";
                S = S + " Directory.ckDisableDir, ";
                S = S + " Directory.OcrDirectory, ";
                S = S + " Directory.RetentionCode, ";
                S = S + " Directory.ArchiveSkipBit, ";
                S = S + " Directory.OcrPdf, ";
                S = S + " Directory.DeleteOnArchive, ";
                S = S + " Directory.ckPublic ";
                S = S + " FROM  Directory ";
                if (TgtFolder.Trim().Length > 0)
                {
                    S = S + " WHERE Directory.UserID = '" + UID + "' and (AdminDisabled = 0 or AdminDisabled is null) and FQN = '" + TgtFolder + "' or isSysDefault = 1 ";
                }
                else
                {
                    S = S + " WHERE Directory.UserID = '" + UID + "' and (AdminDisabled = 0 or AdminDisabled is null)  or isSysDefault = 1 ";
                }

                S = S + " order by Directory.fqn";
                tgtFolders.Clear();
                int I = 0;
                string ConnStr = getRepoConnStr();
                var Conn = new SqlConnection(ConnStr);
                bool b = false;
                string FQN = "";
                string IncludeSubDirs = "";
                string DB_ID = "";
                string VersionFiles = "";
                string DisableFolder = "";
                string OcrDirectory = "";
                string OcrPdf = "";
                string RetentionCode = "";
                bool FirstEntryComplete = false;
                string SUBFQN = "";
                string ArchiveSkipBit = "";
                string DeleteOnArchive = "";
                string ckPublic = "";
                var ListOfFiles = new List<string>();
                string DbConnStr = "";
                using (Conn)
                {
                    if (Conn.State == ConnectionState.Closed)
                    {
                        Conn.Open();
                    }

                    var command = new SqlCommand(S, Conn);
                    SqlDataReader RSData = null;
                    RSData = command.ExecuteReader();
                    I = 0;
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            if (modGlobals.gTerminateImmediately)
                            {
                                return;
                            }

                            FQN = RSData.GetValue(0).ToString();
                            FQN = UTIL.RemoveSingleQuotes(FQN);
                            string ParentDir = FQN;

                            // If InStr(FQN, "xuser", CompareMethod.Text) > 0 Then
                            // Console.WriteLine("Here 999")
                            // End If

                            if (Strings.InStr(FQN, "%userid%", CompareMethod.Text) > 0 & !modGlobals.gCurrLoginID.ToUpper().Equals("SERVICEMANAGER"))
                            {
                                if (modGlobals.gClipBoardActive == true)
                                    Console.WriteLine("Wildcard directory: " + FQN);
                                string S1 = "";
                                string S2 = "";
                                int iLoc = Strings.InStr(FQN, "%userid%", CompareMethod.Text);
                                S1 = Strings.Mid(FQN, 1, iLoc - 1);
                                S2 = Strings.Mid(FQN, iLoc + Strings.Len("%userid%"));
                                string UserName = Environment.UserName;
                                FQN = S1 + UserName + S2;
                                ParentDir = FQN;
                            }
                            else
                            {
                                FQN = UTIL.ReplaceSingleQuotes(FQN);
                                if (!Directory.Exists(FQN))
                                {
                                    goto SkipThisOne;
                                }
                            }

                            IncludeSubDirs = RSData.GetValue(1).ToString();
                            DB_ID = RSData.GetValue(2).ToString();
                            VersionFiles = RSData.GetValue(3).ToString();
                            DisableFolder = RSData.GetValue(4).ToString();
                            OcrDirectory = RSData.GetValue(5).ToString();
                            RetentionCode = RSData.GetValue(6).ToString();
                            ArchiveSkipBit = RSData.GetValue(7).ToString();
                            OcrPdf = RSData.GetValue(8).ToString();
                            DeleteOnArchive = RSData.GetValue(9).ToString();
                            ckPublic = RSData.GetValue(10).ToString();
                            if (DisableFolder.ToUpper().Equals("Y"))
                            {
                                goto SkipThisOne;
                            }

                            if (FQN.Trim().Length > 260)
                            {
                                FQN = modGlobals.getShortDirName(FQN);
                            }

                            AddArchiveDir(FQN);
                            if (SUBFQN.Length == 0)
                            {
                            }
                            // ** do nothing
                            else if (SUBFQN.Trim().Length > 0)
                            {
                                FQN = SUBFQN;
                            }

                            ListOfFiles.Clear();
                            if (!ListOfFiles.Contains(FQN))
                            {
                                ListOfFiles.Add(FQN);
                            }

                            for (int k = 0, loopTo = ListOfFiles.Count - 1; k <= loopTo; k++)
                            {
                                string tFqn = ListOfFiles[k];
                                string SS = tFqn + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode + "|" + ParentDir + "|" + ArchiveSkipBit + "|" + OcrPdf + "|" + DeleteOnArchive + "|" + ckPublic;
                                if (tgtFolders.Contains(SS))
                                {
                                }
                                // Console.WriteLine("Duplicate: " + FQN)
                                else
                                {
                                    tgtFolders.Add(SS);
                                }
                            }

                            SkipThisOne:
                            ;
                            I = I + 1;
                        }
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR GetContentArchiveFileFolders: ", ex);
            }
            finally
            {
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }
        }

        public bool setContentArchiveFileFolder(string UID, ref List<string> tgtFolders, string TgtFolder)
        {
            TgtFolder = UTIL.RemoveSingleQuotes(TgtFolder);
            bool isGood = false;
            string S = " ";
            IXV1 = 0;
            DMA.IXV1 = 0;
            string AutoIncludeSubDirs = System.Configuration.ConfigurationManager.AppSettings["AutoIncludeSubDirs"];
            S = S + " SELECT Directory.FQN, ";
            S = S + " Directory.IncludeSubDirs, ";
            S = S + " Directory.DB_ID,";
            S = S + " Directory.VersionFiles, ";
            S = S + " Directory.ckDisableDir, ";
            S = S + " Directory.OcrDirectory, ";
            S = S + " Directory.RetentionCode, ";
            S = S + " Directory.ArchiveSkipBit ";
            S = S + " FROM  Directory ";
            if (TgtFolder.Trim().Length > 0)
            {
                S = S + " WHERE Directory.UserID = '" + UID + "' and (AdminDisabled = 0 or AdminDisabled is null) and FQN = '" + TgtFolder + "' ";
            }
            else
            {
                S = S + " WHERE Directory.UserID = '" + UID + "' and (AdminDisabled = 0 or AdminDisabled is null) ";
            }

            S = S + " order by Directory.fqn";
            tgtFolders.Clear();
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string FQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string VersionFiles = "";
            string DisableFolder = "";
            string OcrDirectory = "";
            string RetentionCode = "";
            bool FirstEntryComplete = false;
            string SUBFQN = "";
            string ArchiveSkipBit = "";
            var ListOfFiles = new List<string>();
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        isGood = true;
                        if (modGlobals.gTerminateImmediately)
                        {
                            return false;
                        }

                        FQN = RSData.GetValue(0).ToString();
                        FQN = UTIL.RemoveSingleQuotes(FQN);
                        string ParentDir = FQN;

                        // If InStr(FQN, "xuser", CompareMethod.Text) > 0 Then
                        // Console.WriteLine("Here 999")
                        // End If

                        if (Strings.InStr(FQN, "%userid%", CompareMethod.Text) > 0 & !modGlobals.gCurrLoginID.ToUpper().Equals("SERVICEMANAGER"))
                        {
                            if (modGlobals.gClipBoardActive == true)
                                Console.WriteLine("Wildcard directory: " + FQN);
                            string S1 = "";
                            string S2 = "";
                            int iLoc = Strings.InStr(FQN, "%userid%", CompareMethod.Text);
                            S1 = Strings.Mid(FQN, 1, iLoc - 1);
                            S2 = Strings.Mid(FQN, iLoc + Strings.Len("%userid%"));
                            string UserName = Environment.UserName;
                            FQN = S1 + UserName + S2;
                            ParentDir = FQN;
                        }
                        else
                        {
                            FQN = UTIL.ReplaceSingleQuotes(FQN);
                            if (!Directory.Exists(FQN))
                            {
                                goto SkipThisOne;
                            }
                        }

                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        DB_ID = RSData.GetValue(2).ToString();
                        VersionFiles = RSData.GetValue(3).ToString();
                        DisableFolder = RSData.GetValue(4).ToString();
                        OcrDirectory = RSData.GetValue(5).ToString();
                        RetentionCode = RSData.GetValue(6).ToString();
                        ArchiveSkipBit = RSData.GetValue(7).ToString();
                        if (DisableFolder.ToUpper().Equals("Y"))
                        {
                            goto SkipThisOne;
                        }

                        if (FQN.Trim().Length > 254)
                        {
                            FQN = modGlobals.getShortDirName(FQN);
                        }

                        AddArchiveDir(FQN);
                        if (SUBFQN.Length == 0)
                        {
                        }
                        // ** do nothing
                        else if (SUBFQN.Trim().Length > 0)
                        {
                            FQN = SUBFQN;
                        }

                        ListOfFiles.Clear();
                        if (IncludeSubDirs.Equals("Y") & TgtFolder.Trim().Length == 0)
                        {
                            if (bUseCommandProcessForInventory == 1)
                            {
                                bool BB = DMA.GetSubDirs(FQN, ListOfFiles);
                                if (BB == false)
                                {
                                    ListOfFiles = DMA.GetDirsRecursive(FQN);
                                }
                            }
                            else
                            {
                                ListOfFiles = DMA.GetDirsRecursive(FQN);
                            }
                        }

                        if (!ListOfFiles.Contains(FQN))
                        {
                            ListOfFiles.Add(FQN);
                        }

                        for (int k = 0, loopTo = ListOfFiles.Count - 1; k <= loopTo; k++)
                        {
                            string tFqn = ListOfFiles[k];
                            string SS = tFqn + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode + "|" + ParentDir + "|" + ArchiveSkipBit;
                            if (tgtFolders.Contains(SS))
                            {
                            }
                            // Console.WriteLine("Duplicate: " + FQN)
                            else
                            {
                                tgtFolders.Add(SS);
                            }
                        }

                        SkipThisOne:
                        ;
                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return isGood;
        }

        public void xGetContentArchiveFileFolders(string UID, ref string[] aFolders)
        {
            string S = " ";
            S = S + " select FQN, IncludeSubDirs, DB_ID, VersionFiles, ckDisableDir, OcrDirectory, RetentionCode";
            S = S + " from Directory where UserID = '" + UID + "' or isSysDefault = 1 ";
            S = S + " UNION ALL ";
            S = S + " select subFQN as FQN, 'N' as IncludeSubDirs, 'na' AS DB_ID, VersionFiles, ckDisableDir, OcrDirectory, ' '  as RetentionCode ";
            S = S + " from SubDir where UserID = '" + UID + "' or isSysDefault = 1 ";
            S = S + " and subFQN not in (select FQN from Directory)";
            S = S + " ORDER BY FQN";
            aFolders = new string[1];
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string SUBFQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string VersionFiles = "";
            string DisableFolder = "";
            string OcrDirectory = "";
            string RetentionCode = "";
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SUBFQN = RSData.GetValue(0).ToString();
                        SUBFQN = UTIL.RemoveSingleQuotes(SUBFQN);
                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        DB_ID = RSData.GetValue(2).ToString();
                        VersionFiles = RSData.GetValue(3).ToString();
                        DisableFolder = RSData.GetValue(4).ToString();
                        OcrDirectory = RSData.GetValue(5).ToString();
                        RetentionCode = RSData.GetValue(6).ToString();
                        if (I == 0)
                        {
                            aFolders[0] = SUBFQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode;
                        }
                        else
                        {
                            Array.Resize(ref aFolders, I + 1);
                            aFolders[I] = SUBFQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + OcrDirectory + "|" + RetentionCode;
                        }

                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }
        }

        public void GetContentArchiveFileFolders(string UID, ref string[] aFolders, string DirPath)
        {
            string S = "Select     S.SUBFQN, D.IncludeSubDirs, D.DB_ID, D.VersionFiles, D.ckDisableDir, D.FQN";
            S = S + " FROM         Directory AS D FULL OUTER JOIN";
            S = S + "                       SubDir AS S ON D.UserID = S.UserID AND D.FQN = S.FQN";
            S = S + " WHERE     (D.UserID = '" + UID + "')";
            S = S + " ORDER BY S.SUBFQN";
            aFolders = new string[1];
            int I = 0;
            bool DirFound = false;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string SUBFQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string VersionFiles = "";
            string DisableFolder = "";
            string ParentDir = "";
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SUBFQN = RSData.GetValue(0).ToString();
                        SUBFQN = UTIL.RemoveSingleQuotes(SUBFQN);
                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        DB_ID = RSData.GetValue(2).ToString();
                        VersionFiles = RSData.GetValue(3).ToString();
                        DisableFolder = RSData.GetValue(4).ToString();
                        ParentDir = RSData.GetValue(5).ToString();
                        ParentDir = UTIL.RemoveSingleQuotes(ParentDir);
                        if (Strings.UCase(SUBFQN).Equals(Strings.UCase(DirPath)))
                        {
                            aFolders[0] = SUBFQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder;
                            DirFound = true;
                            break;
                        }

                        if (SUBFQN.Length == 0 & Strings.UCase(ParentDir).Equals(Strings.UCase(DirPath)))
                        {
                            aFolders[0] = ParentDir + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder;
                            DirFound = true;
                            break;
                        }

                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
                if (!DirFound)
                {
                    aFolders[0] = DirPath + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder;
                }
            }
        }

        public void GetQuickArchiveFileFolders(string UID, ref string[] aFolders, string DirPath)
        {
            string S = "Select     S.SUBFQN, D.IncludeSubDirs, D.DB_ID, D.VersionFiles, D.ckDisableDir, D.FQN, D.RetentionCode";
            S = S + " FROM         QuickDirectory AS D FULL OUTER JOIN";
            S = S + "                       SubDir AS S ON D.UserID = S.UserID AND D.FQN = S.FQN";
            S = S + " WHERE     (D.UserID = '" + UID + "')";
            S = S + " ORDER BY S.SUBFQN";
            aFolders = new string[1];
            int I = 0;
            bool DirFound = false;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string SUBFQN = "";
            string IncludeSubDirs = "";
            string DB_ID = "";
            string VersionFiles = "";
            string DisableFolder = "";
            string ParentDir = "";
            string RetentionCode = "";
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                I = 0;
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SUBFQN = RSData.GetValue(0).ToString();
                        SUBFQN = UTIL.RemoveSingleQuotes(SUBFQN);
                        IncludeSubDirs = RSData.GetValue(1).ToString();
                        DB_ID = RSData.GetValue(2).ToString();
                        VersionFiles = RSData.GetValue(3).ToString();
                        DisableFolder = RSData.GetValue(4).ToString();
                        ParentDir = RSData.GetValue(5).ToString();
                        ParentDir = UTIL.RemoveSingleQuotes(ParentDir);
                        RetentionCode = RSData.GetValue(6).ToString();
                        if (Strings.UCase(SUBFQN).Equals(Strings.UCase(DirPath)))
                        {
                            aFolders[0] = SUBFQN + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + RetentionCode;
                            DirFound = true;
                            break;
                        }

                        if (SUBFQN.Length == 0 & Strings.UCase(ParentDir).Equals(Strings.UCase(DirPath)))
                        {
                            aFolders[0] = ParentDir + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder + "|" + RetentionCode;
                            DirFound = true;
                            break;
                        }

                        I = I + 1;
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
                if (!DirFound)
                {
                    aFolders[0] = DirPath + "|" + IncludeSubDirs + "|" + DB_ID + "|" + VersionFiles + "|" + DisableFolder;
                }
            }
        }

        // SELECT [ArchiveEmails]
        // ,[RemoveAfterArchive]
        // ,[SetAsDefaultFolder]
        // ,[ArchiveAfterXDays]
        // ,[RemoveAfterXDays]
        // ,[RemoveXDays]
        // ,[ArchiveXDays]
        // ,[DB_ID]
        // FROM [Email]
        // where UserID = 'wmiller'
        public bool GetEmailFolderParms(string TopFolder, string UID, string FolderName, ref string ArchiveEmails, ref string RemoveAfterArchive, ref string SetAsDefaultFolder, ref string ArchiveAfterXDays, ref string RemoveAfterXDays, ref string RemoveXDays, ref string ArchiveXDays, ref string DB_ID, ref string ArchiveOnlyIfRead)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ArchiveEmails = "";
            RemoveAfterArchive = "";
            SetAsDefaultFolder = "";
            ArchiveAfterXDays = "";
            RemoveAfterXDays = "";
            RemoveXDays = "";
            ArchiveXDays = "";
            DB_ID = "";
            bool BB = false;
            FolderName = UTIL.RemoveSingleQuotes(FolderName);

            // ** Sometimes, the full name includeing the "|" is passed in -
            // ** If so, just remove the string up to the "|" and fix it,
            // ** and continue.

            if (Strings.InStr(FolderName, "|", CompareMethod.Text) > 0)
            {
                FolderName = Strings.Mid(FolderName, Strings.InStr(FolderName, "|", CompareMethod.Text) + 1);
            }

            string S = "Select [ArchiveEmails]";
            S = S + " ,[RemoveAfterArchive]";
            S = S + " ,[SetAsDefaultFolder]";
            S = S + " ,[ArchiveAfterXDays]";
            S = S + " ,[RemoveAfterXDays]";
            S = S + " ,[RemoveXDays]";
            S = S + " ,[ArchiveXDays]";
            S = S + " ,[DB_ID], ArchiveOnlyIfRead ";
            S = S + " from [EmailArchParms] ";
            S = S + " where UserID = '" + UID + "' ";
            S = S + " and  [FolderName] = '" + TopFolder + "|" + FolderName + "'";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        BB = true;
                        ArchiveEmails = RSData.GetValue(0).ToString();
                        RemoveAfterArchive = RSData.GetValue(1).ToString();
                        SetAsDefaultFolder = RSData.GetValue(2).ToString();
                        ArchiveAfterXDays = RSData.GetValue(3).ToString();
                        RemoveAfterXDays = RSData.GetValue(4).ToString();
                        RemoveXDays = RSData.GetValue(5).ToString();
                        ArchiveXDays = RSData.GetValue(6).ToString();
                        DB_ID = RSData.GetValue(7).ToString();
                        ArchiveOnlyIfRead = RSData.GetValue(8).ToString();
                    }
                }
                else
                {
                    LOG.WriteToArchiveLog("ERROR GetEmailFolderParms 100: - could not find: " + S);
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return BB;
        }

        public string GetEmailSubject(string EmailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string Subject = "";
            bool BB = false;
            string S = "Select [Subject]";
            S = S + " from [Email] ";
            S = S + " where EmailGuid = '" + EmailGuid + "' ";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        BB = true;
                        Subject = RSData.GetValue(0).ToString();
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return Subject;
        }

        public string GetEmailAttachmentGuid(string AttachmentName, string CrcHASH)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string RowGuid = "";
            bool BB = false;
            string SS = "select RowGuid from EmailAttachment where AttachmentName = '" + AttachmentName + "' and CRC = '" + CrcHASH + "'";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(SS, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        BB = true;
                        RowGuid = RSData.GetValue(0).ToString();
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return RowGuid;
        }

        public string GetEmailBody(string EmailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string Subject = "";
            bool BB = false;
            string S = "Select [Body]";
            S = S + " from [Email] ";
            S = S + " where EmailGuid = '" + EmailGuid + "' ";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        BB = true;
                        Subject = RSData.GetValue(0).ToString();
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            return Subject;
        }

        public string GetDocTitle(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool TitleFound = false;
            string Subject = "";
            bool BB = false;
            string S = "Select [AttributeValue]     ";
            S = S + "   FROM [SourceAttribute]";
            S = S + " where [AttributeName] like 'Title'";
            S = S + " and [SourceGuid] = '" + SourceGuid + "'";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    TitleFound = true;
                    BB = true;
                    Subject = RSData.GetValue(0).ToString();
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (TitleFound == false)
            {
                Subject = "No subject metadata found, document name is: " + GetDocFilename(SourceGuid);
            }

            return Subject;
        }

        public string GetDocFilename(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string FileName = "";
            bool BB = false;
            string S = "Select [SourceName] FROM  [DataSource] where [SourceGuid] = '" + SourceGuid + "'";
            int I = 0;
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string DbConnStr = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    BB = true;
                    RSData.Read();
                    FileName = RSData.GetValue(0).ToString();
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
            }

            if (BB == false)
            {
                FileName = "No file name supplied for this content.";
            }
            else
            {
                FileName = Constants.vbCrLf + FileName;
            }

            return FileName;
        }

        public ArrayList AddIncludedFiletypes(string FQN, string IncludeSubDirs)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var L = new ArrayList();
            var L2 = new ArrayList();
            var AllDirs = new string[1];
            string tDir = "";
            if (Information.IsNothing(IncludeSubDirs))
            {
                IncludeSubDirs = "Y";
            }

            IncludeSubDirs = IncludeSubDirs.ToUpper();
            if (IncludeSubDirs.Equals("N"))
            {
                tDir = FQN;
                L = GetIncludedFiletypes(tDir);
            }
            else
            {
                AllDirs = FQN.Split('\\');
                for (int i = 0, loopTo = Information.UBound(AllDirs); i <= loopTo; i++)
                {
                    tDir = tDir + AllDirs[i];
                    L2 = GetIncludedFiletypes(tDir);
                    tDir = tDir + @"\";
                    for (int j = 0, loopTo1 = L2.Count - 1; j <= loopTo1; j++)
                        L.Add(L2[j]);
                }
            }

            return L;
        }

        public ArrayList AddExcludedFiletypes(string FQN, string IncludeSubDirs)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var L = new ArrayList();
            var L2 = new ArrayList();
            var AllDirs = new string[1];
            string tDir = "";
            IncludeSubDirs = IncludeSubDirs.ToUpper();
            if (IncludeSubDirs.Equals("N"))
            {
                tDir = FQN;
                L = GetExcludedFiletypes(tDir);
            }
            else
            {
                AllDirs = FQN.Split('\\');
                for (int i = 0, loopTo = Information.UBound(AllDirs); i <= loopTo; i++)
                {
                    tDir = tDir + AllDirs[i];
                    L2 = GetExcludedFiletypes(tDir);
                    for (int j = 0, loopTo1 = L2.Count - 1; j <= loopTo1; j++)
                        L.Add(L2[j]);
                }
            }

            return L;
        }

        public ArrayList GetAllIncludedFiletypes(string FQN, string IncludeSubDirs)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var L2 = new ArrayList();
            var L = new ArrayList();
            var AllDirs = new string[1];
            string tDir = "";
            int K = 0;
            if (Information.IsNothing(IncludeSubDirs))
            {
                IncludeSubDirs = "Y";
            }

            IncludeSubDirs = IncludeSubDirs.ToUpper();
            if (IncludeSubDirs.Equals("N"))
            {
                tDir = FQN;
                L = GetIncludedFiletypes(tDir);
            }
            else
            {
                AllDirs = FQN.Split('\\');
                for (int i = 0, loopTo = Information.UBound(AllDirs); i <= loopTo; i++)
                {
                    tDir = tDir + AllDirs[i];
                    L2 = GetIncludedFiletypes(tDir);
                    var loopTo1 = L2.Count - 1;
                    for (K = 0; K <= loopTo1; K++)
                        L.Add(L2[K]);
                    tDir = tDir + @"\";
                }
            }

            return L;
        }

        public ArrayList GetAllExcludedFiletypes(string FQN, string IncludeSubDirs)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var L = new ArrayList();
            var L1 = new ArrayList();
            var AllDirs = new string[1];
            string tDir = "";
            int J = 0;
            if (Information.IsNothing(IncludeSubDirs))
            {
                IncludeSubDirs = "Y";
            }

            IncludeSubDirs = IncludeSubDirs.ToUpper();
            if (IncludeSubDirs.Equals("N"))
            {
                tDir = FQN;
                L = GetExcludedFiletypes(tDir);
            }
            else
            {
                AllDirs = FQN.Split('\\');
                for (int i = 0, loopTo = Information.UBound(AllDirs); i <= loopTo; i++)
                {
                    tDir = tDir + AllDirs[i];
                    L1 = GetExcludedFiletypes(tDir);
                    for (int ij = 0, loopTo1 = L1.Count - 1; ij <= loopTo1; ij++)
                        L.Add(L1[J]);
                    tDir = tDir + @"\";
                }
            }

            return L;
        }

        public ArrayList GetIncludedFiletypes(string FQN)
        {
            var L = new ArrayList();
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            if (FQN.Length == 0)
            {
                S = "Select distinct [ExtCode] FROM [IncludedFiles] order by [ExtCode]";
            }
            else
            {
                FQN = UTIL.RemoveSingleQuotes(FQN);
                S = "Select [ExtCode] FROM [IncludedFiles] where FQN = '" + FQN + "' order by [ExtCode]";
            }

            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string IncludeExt = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        IncludeExt = RSData.GetValue(0).ToString();
                        IncludeExt = Strings.UCase(IncludeExt);
                        IncludeExt = IncludeExt.Trim();
                        if (Strings.Mid(IncludeExt, 1, 1) == ".")
                        {
                            IncludeExt = Strings.Mid(IncludeExt, 2);
                            IncludeExt = IncludeExt.Trim();
                        }

                        if (!L.Contains(IncludeExt))
                        {
                            L.Add(IncludeExt);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
                L.Sort();
            }

            return L;
        }

        public ArrayList GetExcludedFiletypes(string FQN)
        {
            var L = new ArrayList();
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select [ExtCode] FROM [ExcludedFiles] where FQN = '" + FQN + "' order by [ExtCode]";
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            string IncludeExt = "";
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        IncludeExt = RSData.GetValue(0).ToString();
                        IncludeExt = Strings.UCase(IncludeExt);
                        IncludeExt = IncludeExt.Trim();
                        if (Strings.Mid(IncludeExt, 1, 1) == ".")
                        {
                            IncludeExt = Strings.Mid(IncludeExt, 2);
                            IncludeExt = IncludeExt.Trim();
                        }

                        if (!L.Contains(IncludeExt))
                        {
                            L.Add(IncludeExt);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
                Conn.Close();
                Conn = null;
                L.Sort();
            }

            return L;
        }

        public void AddSecondarySOURCETYPE(string Sourcetypecode, string Sourcetypedesc, string Storeexternal, string Indexable)
        {
            var ST = new clsSOURCETYPE();
            ST.setSourcetypecode(ref Sourcetypecode);
            ST.setSourcetypedesc(ref Sourcetypedesc);
            ST.setStoreexternal(ref Storeexternal);
            ST.setIndexable(ref Indexable);
            ST.Insert();
        }

        public void delSecondarySOURCETYPE(string Sourcetypecode)
        {
            var ST = new clsSOURCETYPE();
            ST.setSourcetypecode(ref Sourcetypecode);
            string WhereClause = "Where SourceTypeCode = '" + Sourcetypecode + "'";
            ST.Delete(WhereClause);
        }

        public Array FindAllTableIndexes(string TBL)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var SL = new SortedList();
            string S = "";
            S = S + " select distinct si.name";
            S = S + " from sys.indexes si";
            S = S + " inner join sys.index_columns ic on si.object_id = ic.object_id and si.index_id = ic.index_id";
            S = S + " inner join information_schema.tables st on object_name(si.object_id) = st.table_name";
            S = S + " inner join information_schema.columns sc on ic.column_id = sc.ordinal_position and sc.table_name = st.table_name";
            S = S + " where si.name Is Not null And si.index_id > 0 And si.is_hypothetical = 0 ";
            S = S + " and sc.table_name = '" + TBL + "'";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string IndexName = "";
            var TblIndexes = new string[1];
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    IndexName = RSData.GetValue(0).ToString();
                    II = Information.UBound(TblIndexes) + 1;
                    Array.Resize(ref TblIndexes, II + 1);
                    TblIndexes[II] = IndexName;
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            return TblIndexes;
        }

        public Array FindAllIndexCols(string TBL, string IdxName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var SL = new SortedList();
            string S = "";
            S = S + " select distinct sc.table_name,si.name,si.type_desc,sc.column_name";
            S = S + " from sys.indexes si";
            S = S + " inner join sys.index_columns ic on si.object_id = ic.object_id and si.index_id = ic.index_id";
            S = S + " inner join information_schema.tables st on object_name(si.object_id) = st.table_name";
            S = S + " inner join information_schema.columns sc on ic.column_id = sc.ordinal_position and sc.table_name = st.table_name";
            S = S + " where si.name Is Not null And si.index_id > 0 And si.is_hypothetical = 0 ";
            S = S + " and sc.table_name = '" + TBL + "'";
            S = S + " and name = '" + IdxName + "'";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string ColName = "";
            var IndexColumns = new string[1];
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    ColName = RSData.GetValue(3).ToString();
                    ColName = TBL + "|" + ColName;
                    II = Information.UBound(IndexColumns) + 1;
                    Array.Resize(ref IndexColumns, II + 1);
                    IndexColumns[II] = ColName;
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            return IndexColumns;
        }

        public string getColumnDataType(string TBL, string ColName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var SL = new SortedList();
            string S = "";
            S = S + " SELECT table_name, column_name, is_nullable, data_type, character_maximum_length";
            S = S + " FROM information_schema.columns ";
            S = S + " where  table_name = '" + TBL + "'";
            S = S + " AND column_name = '" + ColName + "'";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string DataType = "";
            string IsNullable = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    IsNullable = RSData.GetValue(2).ToString();
                    DataType = RSData.GetValue(3).ToString();
                    DataType = DataType + "|" + IsNullable;
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            return DataType;
        }

        public SqlDataReader GetRowByKey(string TBL, string WC)
        {
            try
            {
                string Auth = "";
                string s = "Select * from " + TBL + " " + WC;
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(s, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    Auth = rsData.GetValue(0).ToString();
                    return rsData;
                }
                else
                {
                    return null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12330, "clsDataBase:GetRowByKey" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetRowByKey : 3963 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetRowByKey : 3931 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetRowByKey : 3945 : ", ex);
                return null;
            }
        }

        public int ckArchEmailFolder(string KeyFolder, string UserID)
        {
            bool b = true;
            string S = "Select count(*) ";
            S = S + "   FROM [EmailFolder]";
            S = S + " where [SelectedForArchive] = 'Y'";
            S = S + " and FolderName ='" + KeyFolder + "'";
            S = S + " and UserID ='" + UserID + "'";
            int i = 0;
            string tQuery = "";

            // Dim i As Integer
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public string getArchEmailFolderIDByFolder(string KeyFolder, string UserID)
        {
            bool b = true;
            string S = "Select FolderID ";
            S = S + "   FROM [EmailFolder]";
            S = S + " where [SelectedForArchive] = 'Y'";
            S = S + " and FolderName ='" + KeyFolder + "'";
            S = S + " and UserID ='" + UserID + "'";
            int i = 0;
            string tQuery = "";

            // Dim i As Integer
            string xint = "";
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                try
                {
                    xint = RSData.GetValue(0).ToString();
                }
                catch (Exception ex)
                {
                    xint = "";
                }

                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return xint;
        }

        public int ckArchChildEmailFolder(string FolderID, string UserID)
        {
            bool b = true;
            string S = "Select COUNT(*) from EmailFolder ";
            S = S + " where FolderID = '" + FolderID + "'";
            S = S + " and UserID = '" + UserID + "'";
            int i = 0;
            string tQuery = "";

            // Dim i As Integer
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return cnt;
        }

        public string getArchEmailFolderRetentionCode(string FolderID, string UserID)
        {
            string rCode = "";
            bool b = true;
            string S = "Select RetentionCode ";
            S = S + "   FROM [EmailFolder]";
            S = S + " where ";
            S = S + " FolderID ='" + FolderID + "'";
            S = S + " and UserID ='" + UserID + "'";
            int i = 0;
            string tQuery = "";

            // Dim i As Integer
            int cnt = -1;
            using (gConn)
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                rCode = RSData.GetValue(0).ToString();
                RSData.Close();
                RSData = null;
                command.Connection.Close();
                command = null;
            }

            return rCode;
        }

        public bool iCount(string Tbl, string WhereClause)
        {
            bool b = true;
            string SQL = "Select count(*) from " + Tbl + " " + WhereClause;
            int i = 0;
            i = iGetRowCount(SQL);
            if (i == 0)
            {
                b = false;
            }

            return b;
        }

        public int iGetRowCount(string TBL, string WhereClause)
        {
            int cnt = -1;
            try
            {
                string tQuery = "";
                string s = "";
                s = "Select count(*) as CNT from " + TBL + " " + WhereClause;
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(s, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    if (!RSData.IsClosed)
                    {
                        RSData.Close();
                    }

                    RSData = null;
                    command.Dispose();
                    command = null;
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }

                    CONN.Dispose();
                }
            }
            catch (Exception ex)
            {
                // xTrace(12335, "clsDataBase:iGetRowCount" + ex.Message)
                // messagebox.show("Error 3932.11: " , ex)
                if (ddebug)
                    Debug.Print("Error .11: ", ex);
                Console.WriteLine("Error 3932.11.11: ", ex);
                cnt = 0;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iGetRowCount : 4010 : ", ex);
            }

            return cnt;
        }

        public int iGetRowCount(string TBL, string WhereClause, string ConnectionStr)
        {
            int cnt = -1;
            var tConn = new SqlConnection(ConnectionStr);
            if (tConn.State == ConnectionState.Closed)
            {
                tConn.Open();
            }

            try
            {
                string tQuery = "";
                string s = "";
                s = "Select count(*) as CNT from " + TBL + " " + WhereClause;
                using (tConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(s, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12335, "clsDataBase:iGetRowCount" + ex.Message)
                // messagebox.show("Error 3932.11: " , ex)
                if (ddebug)
                    Debug.Print("Error 3932.11.12: ", ex);
                Console.WriteLine("Error 3932.11.12: ", ex);
                cnt = 0;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iGetRowCount : 4010 : ", ex);
            }

            if (tConn.State == ConnectionState.Open)
            {
                tConn.Close();
            }

            tConn = null;
            return cnt;
        }

        public bool ArchiveEmail(string UID, string FqnEmailImage, string EmailGuid, string SUBJECT, string SentTO, string Body, string Bcc, string BillingInformation, string CC, string Companies, DateTime CreationTime, string ReadReceiptRequested, string ReceivedByName, DateTime ReceivedTime, string AllRecipients, string UserID, string SenderEmailAddress, string SenderName, string Sensitivity, DateTime SentOn, string MsgSize, DateTime DeferredDeliveryTime, string EntryID, DateTime ExpiryTime, DateTime LastModificationTime, string ShortSubj, string SourceTypeCode, string OriginalFolder)
        {
            int ID = 13345;
            FqnEmailImage = UTIL.RemoveSingleQuotes(FqnEmailImage);
            bool B = false;
            EmailGuid = UTIL.RemoveSingleQuotes(EmailGuid);
            SUBJECT = UTIL.RemoveSingleQuotes(SUBJECT);
            SentTO = UTIL.RemoveSingleQuotes(SentTO);
            Body = UTIL.RemoveSingleQuotes(Body);
            Bcc = UTIL.RemoveSingleQuotes(Bcc);
            BillingInformation = UTIL.RemoveSingleQuotes(BillingInformation);
            CC = UTIL.RemoveSingleQuotes(CC);
            Companies = UTIL.RemoveSingleQuotes(Companies);
            CreationTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(CreationTime.ToString()));
            ReadReceiptRequested = UTIL.RemoveSingleQuotes(ReadReceiptRequested);
            ReceivedByName = UTIL.RemoveSingleQuotes(ReceivedByName);
            ReceivedTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(ReceivedTime.ToString()));
            AllRecipients = UTIL.RemoveSingleQuotes(AllRecipients);
            UserID = UTIL.RemoveSingleQuotes(UserID);
            SenderEmailAddress = UTIL.RemoveSingleQuotes(SenderEmailAddress);
            SenderName = UTIL.RemoveSingleQuotes(SenderName);
            Sensitivity = UTIL.RemoveSingleQuotes(Sensitivity);
            SentOn = Conversions.ToDate(UTIL.RemoveSingleQuotes(SentOn.ToString()));
            MsgSize = UTIL.RemoveSingleQuotes(MsgSize);
            DeferredDeliveryTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(DeferredDeliveryTime.ToString()));
            EntryID = UTIL.RemoveSingleQuotes(EntryID);
            ExpiryTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(ExpiryTime.ToString()));
            LastModificationTime = Conversions.ToDate(UTIL.RemoveSingleQuotes(LastModificationTime.ToString()));
            try
            {
                var EmailBinary = CF.FileToByte(FqnEmailImage);
                int OriginalSize = EmailBinary.Length;
                EmailBinary = COMP.CompressBuffer(EmailBinary);
                int CompressedSize = EmailBinary.Length;
                bool RC = false;
                string rMsg = "";
                var TransmissionStartTime = DateAndTime.Now;
                var txEndTime = DateAndTime.Now;

                // Dim ProxyArchive As New SVCCLCArchive.Service1Client
                // B = ProxyArchive.ArchiveEmail(gGateWayID, ID, UID, FqnEmailImage, EmailGuid, SUBJECT, SentTO, Body, Bcc, BillingInformation, CC, Companies, CreationTime, ReadReceiptRequested, ReceivedByName, ReceivedTime, AllRecipients, UserID, SenderEmailAddress, SenderName, Sensitivity, SentOn, MsgSize, DeferredDeliveryTime, EntryID, ExpiryTime, LastModificationTime, ShortSubj, SourceTypeCode, OriginalFolder, EmailBinary, OriginalSize, CompressedSize, RC, rMsg, TransmissionStartTime, txEndTime)
                MessageBox.Show("Get Connection String Here");
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand("EmailInsProc", connection))
                    {
                        command.CommandType = CommandType.StoredProcedure;
                        command.Parameters.Add(new SqlParameter("@EmailGuid", EmailGuid));
                        command.Parameters.Add(new SqlParameter("@SUBJECT", SUBJECT));
                        command.Parameters.Add(new SqlParameter("@SentTO", SentTO));
                        command.Parameters.Add(new SqlParameter("@Body", Body));
                        command.Parameters.Add(new SqlParameter("@Bcc", Bcc));
                        command.Parameters.Add(new SqlParameter("@BillingInformation", BillingInformation));
                        command.Parameters.Add(new SqlParameter("@CC", CC));
                        command.Parameters.Add(new SqlParameter("@Companies", Companies));
                        command.Parameters.Add(new SqlParameter("@CreationTime", CreationTime));
                        command.Parameters.Add(new SqlParameter("@ReadReceiptRequested", ReadReceiptRequested));
                        command.Parameters.Add(new SqlParameter("@ReceivedByName", ReceivedByName));
                        command.Parameters.Add(new SqlParameter("@ReceivedTime", ReceivedTime));
                        command.Parameters.Add(new SqlParameter("@AllRecipients", AllRecipients));
                        command.Parameters.Add(new SqlParameter("@UserID", UserID));
                        command.Parameters.Add(new SqlParameter("@SenderEmailAddress", SenderEmailAddress));
                        command.Parameters.Add(new SqlParameter("@SenderName", SenderName));
                        command.Parameters.Add(new SqlParameter("@Sensitivity", Sensitivity));
                        command.Parameters.Add(new SqlParameter("@SentOn", SentOn));
                        command.Parameters.Add(new SqlParameter("@MsgSize", MsgSize));
                        command.Parameters.Add(new SqlParameter("@DeferredDeliveryTime", DeferredDeliveryTime));
                        command.Parameters.Add(new SqlParameter("@EntryID", EntryID));
                        command.Parameters.Add(new SqlParameter("@ExpiryTime", ExpiryTime));
                        command.Parameters.Add(new SqlParameter("@LastModificationTime", LastModificationTime));
                        command.Parameters.Add(new SqlParameter("@EmailImage", EmailBinary));
                        command.Parameters.Add(new SqlParameter("@ShortSubj", ShortSubj));
                        command.Parameters.Add(new SqlParameter("@SourceTypeCode", SourceTypeCode));
                        command.Parameters.Add(new SqlParameter("@OriginalFolder", OriginalFolder));
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        connection.Dispose();
                        command.Dispose();
                    }
                }
            }
            catch (Exception ex)
            {
                // xTrace(12340, "clsDataBase:ArchiveEmail" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                // Debug.Print(ex.StackTrace)
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH :  : 4076 : ", ex);
            }

            return B;
        }

        public void InsertEmailBinary(string FQN, string tGuid)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            // Read a bitmap contents in a stream
            var fs = new FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read);
            var rawData = new byte[(int)fs.Length + 1];
            fs.Read(rawData, 0, Convert.ToInt32(fs.Length));
            fs.Close();
            // Construct a SQL string and a connection object
            string S = " ";
            S = S + " select * ";
            S = S + " FROM  [Email]";
            S = S + " where [EmailGuid] = '" + tGuid + "'";
            CloseConn();
            CkConn();

            // Open connection
            if (gConn.State != ConnectionState.Open)
            {
                gConn.Open();
            }
            // Create a data adapter and data set
            // Dim CMD As New SqlCommand(S, gConn)
            // Dim da As New SqlDataAdapter(CMD)
            // Dim ds As New Data.DataSet

            var con = new SqlConnection(getRepoConnStr());
            var da = new SqlDataAdapter(S, con);
            var MyCB = new SqlCommandBuilder(da);
            var ds = new DataSet();
            da.Fill(ds, "Emails");
            DataRow myRow;
            myRow = ds.Tables["Emails"].Rows[0];
            myRow["EmailImage"] = rawData;
            ds.AcceptChanges();
            MyCB = null;
            ds = null;
            da = null;
            con.Close();
            con = null;
        }

        public void ApplyCC()
        {
            var L = new List<string>();
            var RECIPS = new clsRECIPIENTS();
            var SL = new SortedList();
            string S = " SELECT [EmailGuid]     ";
            S = S + " ,[CC]      ";
            S = S + " FROM  [Email]";
            S = S + " where CC Is Not null ";
            S = S + " and len(cc) > 0 ";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string CC = "";
            string EmailGuid = "";
            SL.Clear();
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    EmailGuid = RSData.GetValue(0).ToString();
                    CC = RSData.GetValue(1).ToString();
                    if (CC is object)
                    {
                        SL.Clear();
                        if (CC.Trim().Length > 0)
                        {
                            var A = new string[1];
                            if (Strings.InStr(1, CC, ";") > 0)
                            {
                                A = Strings.Split(CC, ";");
                            }
                            else
                            {
                                A[0] = CC;
                            }

                            for (int KK = 0, loopTo = Information.UBound(A); KK <= loopTo; KK++)
                            {
                                string SKEY = A[KK];
                                if (SKEY is object)
                                {
                                    bool BX = SL.ContainsKey(SKEY);
                                    if (!BX)
                                    {
                                        SL.Add(SKEY, SKEY);
                                    }
                                }
                            }
                        }

                        for (int KK = 0, loopTo1 = SL.Count - 1; KK <= loopTo1; KK++)
                        {
                            string Addr = Conversions.ToString(SL.GetKey(KK));
                            RECIPS.setEmailguid(ref EmailGuid);
                            RECIPS.setRecipient(ref Addr);
                            int BX = RECIPS.cnt_PK32A(EmailGuid, Addr);
                            if (BX == 0)
                            {
                                string argval = "RECIP";
                                RECIPS.setTyperecp(ref argval);
                                RECIPS.Insert();
                            }
                            else
                            {
                                string argval1 = "CC";
                                RECIPS.setTyperecp(ref argval1);
                                string SS = "UPDATE  [Recipients]";
                                SS = SS + " SET [TypeRecp] = 'CC'";
                                SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' ";
                                SS = SS + " and Recipient = '" + Addr + "'";
                                L.Add(SS);
                            }
                        }
                    }
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            var loopTo2 = L.Count - 1;
            for (II = 0; II <= loopTo2; II++)
            {
                S = L[II].ToString();
                bool bb = ExecuteSqlNewConn(S, false);
                if (!bb)
                {
                    if (ddebug)
                        Debug.Print("ERROR: " + S);
                }
            }
        }

        public void BuildAllRecips()
        {
            var L = new List<string>();
            var RECIPS = new clsRECIPIENTS();
            var SL = new SortedList();
            string S = " SELECT [EmailGuid] ,[Recipient] ,[TypeRecp] FROM  [Recipients] order by EmailGuid ";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string CC = "";
            string EmailGuid = "";
            string Recipient = "";
            string TypeRecp = "";
            string CurrGuid = "";
            string PrevGuid = "";
            string AllRecipients = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    EmailGuid = RSData.GetValue(0).ToString();
                    Recipient = RSData.GetValue(1).ToString();
                    TypeRecp = RSData.GetValue(2).ToString();
                    if (II == 1)
                    {
                        PrevGuid = EmailGuid;
                    }

                    if (!EmailGuid.Equals(PrevGuid))
                    {
                        string SS = "UPDATE  [Email]";
                        SS = SS + " SET [AllRecipients] = '" + Strings.Mid(AllRecipients, 2) + "'";
                        SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' ";
                        L.Add(SS);
                        AllRecipients = "";
                        AllRecipients = AllRecipients + ";" + Recipient;
                    }
                    else
                    {
                        AllRecipients = AllRecipients + ";" + Recipient;
                    }

                    PrevGuid = EmailGuid;
                    My.MyProject.Forms.frmMain.SB.Text = "Recips: " + II.ToString();
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
            var loopTo = L.Count - 1;
            for (II = 0; II <= loopTo; II++)
            {
                S = L[II].ToString();
                bool bb = ExecuteSqlNewConn(S, false);
                if (!bb)
                {
                    if (ddebug)
                        Debug.Print("ERROR: " + S);
                }

                My.MyProject.Forms.frmMain.SB.Text = "Applying Recips: " + II.ToString();
                Application.DoEvents();
            }
        }

        public void BuildAllMissingData()
        {
            var L = new List<string>();
            var RECIPS = new clsRECIPIENTS();
            var SL = new SortedList();
            string S = " SELECT SourceGuid, FQN FROM DataSource ";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string CC = "";
            string SourceGuid = "";
            string FQN = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    SourceGuid = RSData.GetValue(0).ToString();
                    FQN = RSData.GetValue(1).ToString();
                    FQN = DMA.GetFilePath(FQN);
                    string SS = "UPDATE [DataSource] ";
                    SS = SS + " SET [FileDirectory] = '" + FQN + "'";
                    SS = SS + " WHERE SourceGuid = '" + SourceGuid + "' ";
                    L.Add(SS);
                    My.MyProject.Forms.frmMain.SB.Text = "Files Read: " + II.ToString();
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
            var loopTo = L.Count - 1;
            for (II = 0; II <= loopTo; II++)
            {
                S = L[II].ToString();
                bool bb = ExecuteSqlNewConn(S, false);
                if (!bb)
                {
                    if (ddebug)
                        Debug.Print("ERROR: " + S);
                }

                My.MyProject.Forms.frmMain.SB.Text = "Applying Files: " + II.ToString();
                Application.DoEvents();
            }
        }

        public void BuildAllCCs()
        {
            var L = new List<string>();
            var RECIPS = new clsRECIPIENTS();
            var SL = new SortedList();
            string S = " SELECT [EmailGuid] ,[Recipient] ,[TypeRecp] FROM  [Recipients] where TypeRecp = 'CC' order by EmailGuid ";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string CC = "";
            string EmailGuid = "";
            string Recipient = "";
            string TypeRecp = "";
            string CurrGuid = "";
            string PrevGuid = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    EmailGuid = RSData.GetValue(0).ToString();
                    Recipient = RSData.GetValue(1).ToString();
                    TypeRecp = RSData.GetValue(2).ToString();
                    if (II == 1)
                    {
                        PrevGuid = EmailGuid;
                    }

                    if (!EmailGuid.Equals(PrevGuid))
                    {
                        string SS = "UPDATE  [Email]";
                        SS = SS + " SET [CC] = '" + Strings.Mid(CC, 2) + "'";
                        SS = SS + " WHERE EmailGuid = '" + EmailGuid + "' ";
                        L.Add(SS);
                        CC = "";
                        CC = CC + ";" + Recipient;
                    }
                    else
                    {
                        CC = CC + ";" + Recipient;
                    }

                    PrevGuid = EmailGuid;
                    My.MyProject.Forms.frmMain.SB.Text = "CC: " + II.ToString();
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
            var loopTo = L.Count - 1;
            for (II = 0; II <= loopTo; II++)
            {
                S = L[II].ToString();
                bool bb = ExecuteSqlNewConn(S, false);
                if (!bb)
                {
                    if (ddebug)
                        Debug.Print("ERROR: " + S);
                }

                My.MyProject.Forms.frmMain.SB.Text = "Applying CC: " + II.ToString();
                Application.DoEvents();
            }
        }

        public void getExcludedEmails(string UserID)
        {
            var L = new List<string>();
            var RECIPS = new clsRECIPIENTS();
            var SL = new SortedList();
            string S = " SELECT [FromEmailAddr] FROM  [ExcludeFrom] where  Userid = '" + modGlobals.gCurrUserGuidID + "' ";
            modGlobals.zeroizeExcludedEmailAddr();
            bool b = true;
            string Email = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    Email = RSData.GetValue(0).ToString();
                    modGlobals.AddExcludedEmailAddr(Email);
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
        }

        public bool getDirectoryParms(ref string[] A, string FQN, string UserID)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = false;
            A = new string[1];
            string IncludeSubDirs = "";
            string VersionFiles = "";
            string ckMetaData = "";
            int NumberOfDirs = 0;
            int CurrDir = 0;
            int I = 0;
            string OcrDirectory = "";
            string OcrPdf = "";
            string RetentionCode = "";
            string ckPublic = "";
            var loopTo = FQN.Length;
            for (I = 1; I <= loopTo; I++)
            {
                string ch = Strings.Mid(FQN, I, 1);
                if (ch == @"\")
                {
                    NumberOfDirs += 1;
                }
            }

            CurrDir = NumberOfDirs;
            var DIRS = Strings.Split(FQN, @"\");
            REDO:
            ;
            string CurrFqn = "";
            var loopTo1 = CurrDir;
            for (I = 0; I <= loopTo1; I++)
            {
                if (I == 0)
                {
                    CurrFqn = DIRS[0];
                }
                else
                {
                    CurrFqn = CurrFqn + @"\" + DIRS[I];
                }
            }

            try
            {
                SqlDataReader rsData = null;
                string S = "";
                S = S + " SELECT [UserID]" + Constants.vbCrLf;
                S = S + " ,[IncludeSubDirs]" + Constants.vbCrLf;
                S = S + " ,[FQN]" + Constants.vbCrLf;
                S = S + " ,[DB_ID]" + Constants.vbCrLf;
                S = S + " ,[VersionFiles]" + Constants.vbCrLf;
                S = S + " ,[ckMetaData] " + Constants.vbCrLf;
                S = S + " ,OcrDirectory " + Constants.vbCrLf;
                S = S + " ,RetentionCode" + Constants.vbCrLf;
                S = S + " ,OcrPdf" + Constants.vbCrLf;
                S = S + " ,ckPublic" + Constants.vbCrLf;
                S = S + " FROM [Directory]" + Constants.vbCrLf;
                S = S + " where fqn = '" + CurrFqn + "' and Userid = '" + UserID + "'";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                setConnStr();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        B = true;
                        IncludeSubDirs = rsData.GetValue(1).ToString();
                        VersionFiles = rsData.GetValue(4).ToString();
                        ckMetaData = rsData.GetValue(5).ToString();
                        OcrDirectory = rsData.GetValue(6).ToString();
                        RetentionCode = rsData.GetValue(7).ToString();
                        OcrPdf = rsData.GetValue(8).ToString();
                        ckPublic = rsData.GetValue(9).ToString();
                        A = new string[8];
                        A[0] = IncludeSubDirs;
                        A[1] = VersionFiles;
                        A[2] = ckMetaData;
                        A[3] = OcrDirectory;
                        A[4] = RetentionCode;
                        A[5] = OcrPdf;
                        A[6] = ckPublic;
                    }
                }

                rsData.Close();
                rsData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                // xTrace(12341, "clsDataBase:getDirectoryParms" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : getDirectoryParms : 4390 : ", ex);
            }

            if (B)
            {
                return true;
            }
            else
            {
                A = new string[8];
                A[0] = IncludeSubDirs;
                A[1] = VersionFiles;
                A[2] = ckMetaData;
                A[3] = OcrDirectory;
                if (RetentionCode.Length == 0)
                {
                    RetentionCode = getFirstRetentionCode();
                }

                A[4] = RetentionCode;
                A[5] = OcrPdf;
                A[6] = ckPublic;
                if (CurrDir == 1)
                {
                    return false;
                }
                else
                {
                    CurrDir = CurrDir - 1;
                    if (CurrDir <= 0)
                    {
                        A[0] = "N";   // IncludeSubDirs
                        A[1] = "Y";   // VersionFiles
                        A[2] = "N";   // ckMetaData
                        A[3] = "Y";   // OcrDirectory
                        A[4] = getFirstRetentionCode();
                        A[5] = "Y";   // OcrPdf
                        A[6] = "N";   // OcrPdf
                        return false;
                    }
                    else
                    {
                        goto REDO;
                    }
                }
            }
        }

        public string getFirstRetentionCode()
        {
            string rCode = "";
            string S = "Select RetentionCode ";
            S = S + " FROM [Retention]";
            int I = 0;
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    rCode = RSData.GetValue(0).ToString();
                }

                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                // xTrace(12341, "clsDataBase:getFirstRetentionCode" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getFirstRetentionCode : 4419 : ", ex);
            }

            return rCode;
        }

        public int getNextDocVersionNbr(string Userid, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select max([VersionNbr]) ";
            S = S + " FROM DataSource";
            S = S + " where fqn = '" + FQN + "'";
            S = S + " and [DataSourceOwnerUserID] = '" + Userid + "'";
            int I = 0;
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    I = Conversions.ToInteger(RSData.GetValue(0).ToString());
                }

                RSData.Close();
                RSData = null;
                return I + 1;
            }
            catch (Exception ex)
            {
                // xTrace(12341, "clsDataBase:getNextDocVersionNbr" + ex.Message)
                I = -1;
                LOG.WriteToArchiveLog("clsDatabaseARCH : getNextDocVersionNbr : 4419 : ", ex);
            }

            return I;
        }

        public bool DeleteDocumentByName(string Userid, string FQN, string SourceGuid)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool b = false;
            string S = "delete ";
            S = S + " FROM DataSource";
            S = S + " where fqn = '" + FQN + "'";
            S = S + " and [DataSourceOwnerUserID] = '" + Userid + "' or SourceGuid = '" + SourceGuid + "'";
            try
            {
                b = ExecuteSqlNewConn(S, false);
                return b;
            }
            catch (Exception ex)
            {
                // xTrace(12345, "clsDataBase:DeleteDocumentByName" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteDocumentByName : 4429 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteDocumentByName : 4402 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteDocumentByName : 4417 : ", ex);
                return b;
            }

            // S = " delete FROM DataSource"
            // S = S + " where SourceGuid = '" + SourceGuid  + "'"

            // Try
            // b = ExecuteSqlNewConn(S,false)
            // Return b
            // Catch ex As Exception
            // if ddebug then    Debug.Print(ex.Message)
            // Return b
            // End Try

        }

        public bool DeleteDocumentByGuid(string SourceGuid)
        {
            var SHIST = new clsSEARCHHISTORY();
            bool b = false;
            string S = "delete ";
            S = S + " FROM DataSource";
            S = S + " where SourceGuid = '" + SourceGuid + "'";
            int I = 0;
            try
            {
                b = ExecuteSqlNewConn(S, false);
                S = "DELETE FROM [SourceAttribute] WHERE SourceGuid = '" + SourceGuid + "' ";
                b = ExecuteSqlNewConn(S, false);
                string argval = "clsDatabaseARCH:DeleteDocumentByGuid";
                SHIST.setCalledfrom(ref argval);
                SHIST.setEndtime(ref DateAndTime.Now.ToString());
                string argval1 = "1";
                SHIST.setReturnedrows(ref argval1);
                string argval2 = "Delete";
                SHIST.setTypesearch(ref argval2);
                SHIST.setStarttime(ref DateAndTime.Now.ToString());
                SHIST.setSearchdate(ref DateAndTime.Now.ToString());
                SHIST.setSearchsql(ref S);
                SHIST.setUserid(ref modGlobals.gCurrUserGuidID);
                b = SHIST.Insert();
                if (!b)
                {
                    Console.WriteLine("Error 1943.244 - Failed to save history of search.");
                }

                b = true;
            }
            catch (Exception ex)
            {
                // xTrace(12345, "clsDataBase:DeleteDocumentByGuid" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteDocumentByGuid : 4438 : ", ex);
                b = false;
            }

            SHIST = null;
            return b;
        }

        public bool hasDocumentBeenUpdated(string Userid, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool b = false;
            string S = "delete ";
            S = S + " FROM DataSource";
            S = S + " where fqn = '" + FQN + "'";
            S = S + " and [DataSourceOwnerUserID] = '" + Userid + "'";
            int I = 0;
            try
            {
                b = ExecuteSqlNewConn(S, false);
                return b;
            }
            catch (Exception ex)
            {
                // xTrace(12345, "clsDataBase:hasDocumentBeenUpdated" + ex.Message)
                if (ddebug)
                    Debug.Print(ex.Message);
                LOG.WriteToArchiveLog("clsDatabaseARCH : hasDocumentBeenUpdated : 4449 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : hasDocumentBeenUpdated : 4424 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : hasDocumentBeenUpdated : 4441 : ", ex);
                return b;
            }
        }

        public void UpdateDocSize(string DocGuid, string fSize)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [FileLength] = " + fSize;
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File Size for GUID '" + DocGuid + "'.");
            }
        }

        public void UpdateDocSize(string FQN, string UID, string fSize)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [FileLength] = " + fSize;
            S = S + "  WHERE [DataSourceOwnerUserID] = '" + UID + "' and FQN = '" + FQN + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File Size for FQN '" + FQN + "'.");
            }
        }

        public void UpdateRssLinkFlgToTrue(string DocGuid)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [RssLinkFlg] = 1 ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File UpdateWebLinkFlgToTrue Feed '" + DocGuid + "'.");
            }
        }

        public void UpdateWebLinkFlgToTrue(string DocGuid)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [isWebPage] = 'Y' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File UpdateWebLinkFlgToTrue Feed '" + DocGuid + "'.");
            }
        }

        public void UpdateSourceCRC(string SourceGuid, string CRC)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [CRC] = convert(nvarchar(100), " + CRC + "), ";
            S = S + "  [ImageHash] = convert(nvarchar(100), " + CRC + ") ";
            S = S + "  WHERE [SourceGuid] = '" + SourceGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File UpdateSourceCRC Feed '" + SourceGuid + "'.");
            }
        }

        public void UpdateContentDescription(string DocGuid, string Description)
        {
            string sDescription = Description.Replace("'", "''");
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [Description] = '" + Description + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File UpdateContentDescription '" + DocGuid + "'.");
            }
        }

        public void UpdateContentKeyWords(string DocGuid, string KeyWords)
        {
            string sKeyWords = KeyWords.Replace("'", "''");
            if (sKeyWords.Length > 1999)
            {
                sKeyWords = sKeyWords.Substring(0, 1999);
            }

            sKeyWords = sKeyWords.Trim();
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [KeyWords] = '" + sKeyWords + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File UpdateContentKeyWords '" + DocGuid + "'.");
            }
        }

        public void UpdateWebPageUrlRef(string DocGuid, string PageUrl)
        {
            string sPageUrl = PageUrl.Replace("'", "''");
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [PageUrl] = '" + sPageUrl + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update WebPage reference Feed '" + DocGuid + "'.");
            }
        }

        public void UpdateWebPageHash(string DocGuid, string URLHash)
        {
            string sURLHash = URLHash.Replace("'", "''");
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [URLHash] = '" + sURLHash + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update WebPage URL HASH: '" + DocGuid + "'.");
            }
        }

        public void UpdateWebPagePublishDate(string DocGuid, string WebPagePublishDate)
        {
            string sWebPagePublishDate = WebPagePublishDate.Replace("'", "''");
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [WebPagePublishDate] = '" + sWebPagePublishDate + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed UpdateWebPagePublishDate '" + DocGuid + "'.");
            }
        }

        public void UpdateDocFqn(string DocGuid, string FQN)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [FQN] = '" + FQN + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File FQN '" + FQN + "'.");
            }
        }

        public void UpdateDocCrc(string DocGuid, string CRC)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [CRC] = convert(nvarchar(100), " + CRC + ") ";
            S = S + "  set [ImageHash] = convert(nvarchar(100), " + CRC + ") ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToSaveSql("Failed to update File FQN '" + CRC + "'.");
            }
        }

        public void xUpdateAllDocCrc(string FQN, string CRC)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [CRC] = convert(nvarchar(100), " + CRC + ") ";
            S = S + "  set [ImageHash] = convert(nvarchar(100), " + CRC + ") ";
            S = S + "  WHERE [FQN] = '" + FQN + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToSaveSql("Failed to update File FQN '" + CRC + "'.");
            }
        }

        public void UpdateDocOriginalFileType(string DocGuid, string OriginalFileType)
        {
            OriginalFileType = UTIL.RemoveSingleQuotes(OriginalFileType);
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [OriginalFileType] = '" + OriginalFileType + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update OriginalFileType '" + OriginalFileType + "'.");
            }
        }

        public void UpdateZipFileIndicator(string DocGuid, bool cZipFile)
        {
            string C = "";
            if (cZipFile)
            {
                C = "Y";
            }
            else
            {
                C = "N";
            }

            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [IsZipFile] = '" + C + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR 285.34.2 Failed to update ZIPFILE flag: '" + DocGuid + "'.");
            }
        }

        public void UpdateEmailIndicator(string DocGuid, string EmailGuid)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [EmailGuid] = '" + EmailGuid + "', isEmailAttachment = 1 ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR 285.34.2 UpdateEmailIndicator: Failed to update EMAIL flag: '" + DocGuid + "'.");
            }
        }

        public void UpdateZipFileOwnerGuid(string ParentGuid, string ZipFileGuid, string ZipFileFQN)
        {
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [ZipFileGuid] = '" + ParentGuid + "', ZipFileFQN = '" + ZipFileFQN + "', isContainedWithinZipFile = 'Y', ParentGuid = '" + ParentGuid + "'  ";
            S = S + "  WHERE [SourceGuid] = '" + ZipFileGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR 2858.34.2 Failed to update ZIPFILE FQN: '" + ZipFileGuid + "'.");
            }

            S = "Update DataSource set isZipFile = 'Y' where SourceGuid = '" + ParentGuid + "' ";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR 2858.34.3 Failed to update ZIPFILE FQN: '" + ParentGuid + "'.");
            }
        }

        public void UpdateIsContainedWithinZipFile(string DocGuid)
        {
            string C = "";
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [isContainedWithinZipFile] = 'Y' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR 285.34.21 Failed to update ZIPFILE flag: '" + DocGuid + "'.");
            }
        }

        public void UpdateDocDir(string DocGuid, string DocDir)
        {
            DocDir = UTIL.RemoveSingleQuotes(DocDir);
            DocDir = DMA.GetFilePath(DocDir);
            string S = "";
            S = S + "  UPDATE [DataSource]";
            S = S + "  set [FileDirectory] = '" + DocDir + "' ";
            S = S + "  WHERE [SourceGuid] = '" + DocGuid + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Failed to update File Size for GUID '" + DocGuid + "'.");
            }
        }

        public bool DeleteDataSourceAndAttrs(string WhereClause)
        {
            string s = "";
            bool B = false;
            s = "delete from SourceAttribute where [SourceGuid] in (SELECT [SourceGuid] FROM DataSource " + WhereClause + ")";
            B = ExecuteSqlNewConn(s, false);
            if (B)
            {
                s = "delete from datasource " + WhereClause;
                B = ExecuteSqlNewConn(s, false);
            }
            else
            {
                B = false;
            }

            return B;
        }

        public string getProcessFileAsExt(string FileExt)
        {
            if (FileExt.Trim().Length == 0)
            {
                return ".UKN";
            }

            string NexExt = "";
            string ProcessExtCode = "";
            string S = "Select [ExtCode]";
            S = S + " ,[ProcessExtCode]";
            S = S + " FROM  [ProcessFileAs]";
            S = S + " where ExtCode = '" + FileExt + "'";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                NexExt = RSData.GetValue(0).ToString();
                ProcessExtCode = RSData.GetValue(1).ToString();
            }
            else
            {
                NexExt = null;
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            return ProcessExtCode;
        }

        public void SetDocumentPublicFlagByOwnerDir(string FQN, bool PublicFlag, bool bDisableDir, string OcrDirectory)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string UID = modGlobals.gCurrUserGuidID;
            string S = "";
            string sFlag = "";
            // Dim iFlag  = ""
            bool B;
            string DisableDir = "";
            if (PublicFlag)
            {
                sFlag = "Y";
            }
            // iFlag  = "1"
            else
            {
                sFlag = "N";
                // iFlag  = "0"
            }

            if (bDisableDir)
            {
                DisableDir = "Y";
            }
            else
            {
                DisableDir = "N";
            }

            string SS = "";

            // *******************************************************
            S = "update [Directory] set [ckPublic] = '" + sFlag + "', ckDisableDir = '" + DisableDir + "' where Userid = '" + UID + "' and [FQN] = '" + FQN + "'";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", S)
            else
            {
                LOG.WriteToArchiveLog("Info 01 : SetDocPubFlg: " + S);
            }

            S = "update [Directory] set [ckPublic] = '" + sFlag + "', ckDisableDir = '" + DisableDir + "' where Userid = '" + UID + "' and [FQN] = '" + FQN + "'";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", S)
            else
            {
                LOG.WriteToArchiveLog("Info 02 : SetDocPubFlg: " + S);
            }

            S = "update [Directory] set [OcrDirectory] = '" + OcrDirectory + "' where Userid = '" + UID + "' and [FQN] = '" + FQN + "'";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
            // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", S)
            else
            {
                LOG.WriteToArchiveLog("Info 03 : SetDocPubFlg: " + S);
            }

            // *******************************************************
            S = "update [SubDir] set ckPublic = '" + sFlag + "', ckDisableDir = '" + DisableDir + "' where Userid = '" + UID + "' ";
            S = S + " and ([FQN] = '" + FQN + "' or [SUBFQN] = '" + FQN + "')";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            else if (ddebug)
                LOG.WriteToArchiveLog("Info 04 : SetDocPubFlg: " + S);
            S = "update [SubDir] set ckPublic = '" + sFlag + "', ckDisableDir = '" + DisableDir + "' where Userid = '" + UID + "' ";
            S = S + " and ([FQN] = '" + FQN + "' or [SUBFQN] = '" + FQN + "')";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            else if (ddebug)
                LOG.WriteToArchiveLog("Info 05 : SetDocPubFlg: " + S);
            // *******************************************************
            S = "update [DataSource] set [isPublic] = '" + sFlag + "'";
            S = S + " where FileDirectory = '" + FQN + "'";
            S = S + " and DataSourceOwnerUserID = '" + UID + "'";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            else if (ddebug)
                LOG.WriteToArchiveLog("Info 06 : SetDocPubFlg: " + S);
            S = "update [DataSource] set [isPublic] = '" + sFlag + "'";
            S = S + " where FileDirectory = '" + FQN + "'";
            S = S + " and DataSourceOwnerUserID = '" + UID + "'";
            SS = SS + Constants.vbCrLf + Constants.vbCrLf + S;
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
            }
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
            // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            else if (ddebug)
                LOG.WriteToArchiveLog("Info 07 : SetDocPubFlg: " + S);
        }

        public void SetDocumentPublicFlag(string UID, string FQN, bool PublicFlag)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            string sFlag = "";
            string iFlag = "";
            bool B;
            string DisableDir = "";
            if (PublicFlag)
            {
                sFlag = "Y";
            }
            // iFlag  = "1"
            else
            {
                sFlag = "N";
                // iFlag  = "0"
            }

            S = "update [Directory] set [ckPublic] = '" + sFlag + "' where Userid = '" + UID + "' and [FQN] = '" + FQN + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DIRECTORY table.")
                // xTrace(93925, "clsDataBase:SetDocumentPublicFlag", S)
            }

            S = "update [SubDir] set ckPublic = '" + sFlag + "' where Userid = '" + UID + "' ";
            S = S + " and ([FQN] = '" + FQN + "' or [SUBFQN] = '" + FQN + "')";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in SUBDIR table.")
                // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            }

            S = "update [DataSource] set [isPublic] = '" + sFlag + "'";
            S = S + " where FileDirectory = '" + FQN + "'";
            S = S + " and DataSourceOwnerUserID = '" + UID + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
                // xTrace(93926, "clsDataBase:SetDocumentPublicFlag", S)
            }
        }

        public int ckMasterAlreadyDefined(string SourceName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var con = new SqlConnection(getRepoConnStr());
            con.Open();
            // Dim command As New SqlCommand(s, con)
            SqlDataReader RSData = null;
            int cnt = -1;
            try
            {
                string tQuery = "";
                string S = "Select COUNT(*) from DataSource where SourceName = '" + SourceName + "' and isMaster ='Y'";
                using (con)
                {
                    RSData = SqlQry(S, con);
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                }
            }
            catch (Exception ex)
            {
                // xTrace(12360, "clsDataBase:ckMasterAlreadyDefined" + ex.Message)
                Console.WriteLine("Error ckMasterAlreadyDefined 3932.11.14: ", ex);
                cnt = 0;
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckMasterAlreadyDefined : 5163 : ", ex);
            }
            finally
            {
                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                // command.Connection.Close()
                // command = Nothing
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }

                con = null;
            }

            return cnt;
        }

        public void SetDocumentToMaster(string SourceGuid, bool MasterFlag)
        {
            string S = "";
            string sFlag = "";
            string iFlag = "";
            bool B;
            string DisableDir = "";
            if (MasterFlag)
            {
                sFlag = "Y";
            }
            // iFlag  = "1"
            else
            {
                sFlag = "N";
                // iFlag  = "0"
            }

            S = "update [DataSource] set [isMaster] = '" + sFlag + "'";
            S = S + " where SourceGuid = '" + SourceGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(93926, "clsDataBase:SetDocumentToMaster", "Failed to set public flag in DataSource table.")
                // xTrace(93926, "clsDataBase:SetDocumentToMaster", S)
            }
        }

        public void SetDocumentPublicFlag(string SourceGuid, bool isPublic)
        {
            string S = "";
            string sFlag = "";
            string iFlag = "";
            bool B;
            string DisableDir = "";
            if (isPublic)
            {
                sFlag = "Y";
            }
            // iFlag  = "1"
            else
            {
                sFlag = "N";
                // iFlag  = "0"
            }

            S = "update [DataSource] set [isPublic] = '" + sFlag + "'";
            S = S + " where SourceGuid = '" + SourceGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(939288, "clsDataBase:SetDocumentPublicFlag", "Failed to set public flag in DataSource table.")
                // xTrace(939288, "clsDataBase:SetDocumentPublicFlag", S)
            }
        }

        public void SetEmailPublicFlag(string EmailGuid, bool isPublic)
        {
            string S = "";
            string sFlag = "";
            string iFlag = "";
            bool B;
            string DisableDir = "";
            if (isPublic)
            {
                sFlag = "Y";
            }
            // iFlag  = "1"
            else
            {
                sFlag = "N";
                // iFlag  = "0"
            }

            S = "update [Email] set [isPublic] = '" + sFlag + "'";
            S = S + " where EmailGuid = '" + EmailGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                // xTrace(939288, "clsDataBase:SetEmailPublicFlag", "Failed to set public flag in Email table.")
                // xTrace(939288, "clsDataBase:SetEmailPublicFlag", S)
            }
        }

        public void addImageUsingDataset(string S, string FQN, string SrcTable)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            // Dim da As New SqlDataAdapter("Select SourceImage From SourceImage where SourceGuid = 'SourceGuid' and DataSourceOwnerUserID = 'DataSourceOwnerUserID'", gConn)
            // FQN = "C:\winnt\Gone Fishing.BMP"
            CloseConn();
            CkConn();
            var da = new SqlDataAdapter(S, gConn);
            var MyCB = new SqlCommandBuilder(da);
            var ds = new DataSet();
            da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            var fs = new FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read);
            var MyData = new byte[(int)fs.Length + 1];
            fs.Read(MyData, 0, (int)fs.Length);
            fs.Close();
            gConn.Open();
            da.Fill(ds, SrcTable);
            DataRow myRow;
            myRow = ds.Tables[SrcTable].NewRow();
            myRow["SourceImage"] = MyData;
            ds.Tables[SrcTable].Rows.Add(myRow);
            da.Update(ds, SrcTable);
            fs = null;
            MyCB = null;
            ds = null;
            da = null;
            gConn.Close();
            gConn = null;
            // If gRunUnattended = False Then MessageBox.Show("Image saved to database")
        }

        public void updateImageUsingDataset(string S, string FQN, string SrcTable)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            // Dim da As New SqlDataAdapter("Select SourceImage From SourceImage where SourceGuid = 'SourceGuid' and DataSourceOwnerUserID = 'DataSourceOwnerUserID'", gConn)
            // FQN = "C:\winnt\Gone Fishing.BMP"
            CloseConn();
            CkConn();
            var da = new SqlDataAdapter(S, gConn);
            var MyCB = new SqlCommandBuilder(da);
            var ds = new DataSet();
            da.MissingSchemaAction = MissingSchemaAction.AddWithKey;
            var fs = new FileStream(FQN, FileMode.OpenOrCreate, FileAccess.Read);
            var MyData = new byte[(int)fs.Length + 1];
            fs.Read(MyData, 0, (int)fs.Length);
            fs.Close();
            gConn.Open();
            da.Fill(ds, SrcTable);
            DataRow myRow;

            // .NewRow()
            myRow = ds.Tables[SrcTable].NewRow();
            myRow["SourceImage"] = MyData;

            // .Add(myRow)
            ds.Tables["MyImages"].Rows.Add(myRow);
            da.Update(ds, "MyImages");
            fs = null;
            MyCB = null;
            ds = null;
            da = null;
            gConn.Close();
            gConn = null;
            // If gRunUnattended = False Then MessageBox.Show("Image saved to database")
        }

        public bool writeImageSourceDataFromDbWriteToFile(string SourceGuid, string FQN, bool OverWrite)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = true;
            string SourceTblName = "DataSource";
            string ImageFieldName = "SourceImage";
            try
            {
                string S = "";
                S = S + " SELECT ";
                S = S + " [SourceImage]";
                S = S + " FROM  [DataSource]";
                S = S + " where [SourceGuid] = '" + SourceGuid + "'";
                var CN = new SqlConnection(getRepoConnStr());
                if (CN.State == ConnectionState.Closed)
                {
                    CN.Open();
                }

                var da = new SqlDataAdapter(S, CN);
                var MyCB = new SqlCommandBuilder(da);
                var ds = new DataSet();
                da.Fill(ds, SourceTblName);
                DataRow myRow;
                myRow = ds.Tables[SourceTblName].Rows[0];
                byte[] MyData;
                MyData = (byte[])myRow[ImageFieldName];
                if (MyData.Length == 0)
                {
                    return false;
                }

                long K;
                K = Information.UBound(MyData);
                try
                {
                    var fs = new FileStream(FQN, FileMode.Create, FileAccess.Write);
                    // ** Liz and Dale try magic
                    fs.Write(MyData, 0, (int)(K + 1L));
                    fs.Close();
                    fs = null;
                }
                catch (Exception ex)
                {
                    // If gRunUnattended = False Then MessageBox.Show("No restore: ", ex)
                    if (ddebug)
                        Debug.Print(ex.Message);
                    // xTrace(CInt(58342.15), "clsDataBase:imageDataReadFromDbWriteToFile" + ex.Message)
                    LOG.WriteToArchiveLog("clsDatabaseARCH : writeImageSourceDataFromDbWriteToFile : 4749 : " + ex.Message + Constants.vbCrLf + ex.StackTrace);
                }

                MyCB = null;
                ds = null;
                da = null;
                CN.Close();
                CN = null;
                GC.Collect();
            }
            catch (Exception ex)
            {
                string AppName = ex.Source;
                // xTrace(CInt(58342.1), "clsDataBase:imageDataReadFromDbWriteToFile" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : writeImageSourceDataFromDbWriteToFile : 4757 : ", ex);
            }

            return B;
        }

        public bool writeAttachmentFromDbWriteToFile(string RowID, string FQN, bool OverWrite)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = true;
            string SourceTblName = "EmailAttachment";
            string ImageFieldName = "Attachment";
            try
            {
                string S = "";
                S = S + " SELECT ";
                S = S + " [Attachment]";
                S = S + " FROM  [EmailAttachment]";
                S = S + " where [RowID] = " + RowID;
                var CN = new SqlConnection(getRepoConnStr());
                if (CN.State == ConnectionState.Closed)
                {
                    CN.Open();
                }

                var da = new SqlDataAdapter(S, CN);
                var MyCB = new SqlCommandBuilder(da);
                var ds = new DataSet();
                da.Fill(ds, SourceTblName);
                DataRow myRow;
                myRow = ds.Tables[SourceTblName].Rows[0];
                byte[] MyData;
                MyData = (byte[])myRow[ImageFieldName];
                long K;
                K = Information.UBound(MyData);
                try
                {
                    if (OverWrite)
                    {
                    }
                    // If File.Exists(FQN) Then
                    // File.Delete(FQN )
                    // End If
                    else if (File.Exists(FQN))
                    {
                        return false;
                    }

                    var fs = new FileStream(FQN, FileMode.Create, FileAccess.Write);
                    // ** Liz and Dale try magic
                    fs.Write(MyData, 0, (int)(K + 1L));
                    fs.Close();
                    fs = null;
                }
                catch (Exception ex)
                {
                    if (ddebug)
                        Debug.Print(ex.Message);
                    // xTrace(CInt(58342.15), "clsDataBase:imageDataReadFromDbWriteToFile" + ex.Message)
                    LOG.WriteToArchiveLog("clsDatabaseARCH : writeAttachmentFromDbWriteToFile : 4795 : ", ex);
                }

                MyCB = null;
                ds = null;
                da = null;
                CN.Close();
                CN = null;
                GC.Collect();
            }
            catch (Exception ex)
            {
                string AppName = ex.Source;
                // xTrace(CInt(58342.1), "clsDataBase:imageDataReadFromDbWriteToFile" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : writeAttachmentFromDbWriteToFile : 4803 : ", ex);
            }

            return B;
        }

        public void xPopulateComboBox(ref ComboBox CB, string TblColName, string S)
        {
            try
            {
                CloseConn();
                CkConn();
                if (gConn.State == ConnectionState.Closed)
                {
                    gConn.Open();
                }

                var DA = new SqlDataAdapter(S, gConn);
                var DS = new DataSet();
                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                }

                if (iRowCnt == 0)
                {
                    return;
                }
                // Bind the DataTable to the ComboBox by setting the Combobox's DataSource property to the DataTable. To display the "Description" column in the Combobox's list, set the Combobox's DisplayMember property to the name of column. Likewise, to use the "Code" column as the value of an item in the Combobox set the ValueMember property.
                CB.DropDownStyle = ComboBoxStyle.DropDown;
                CB.DataSource = dt;
                CB.DisplayMember = TblColName;
                CB.SelectedIndex = 0;
                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (gConn is object)
                {
                    gConn.Close();
                    gConn = null;
                }
            }
            catch (Exception ex)
            {
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : xPopulateComboBox : 4841 : ", ex);
            }
            finally
            {
                GC.Collect();
            }
        }

        public void getEmailRestoreFqnParms(string EmailGuid, ref string Subject, ref string CreationTime, ref string SentOn, ref string MsgSize)
        {
            string S = "";
            S = S + " select Subject, CreationTime, SentOn, MsgSize, EmailGuid";
            S = S + " from Email ";
            S = S + " where EmailGuid = '" + EmailGuid + "'";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    Subject = RSData.GetValue(0).ToString();
                    CreationTime = RSData.GetValue(1).ToString();
                    SentOn = RSData.GetValue(2).ToString();
                    MsgSize = RSData.GetValue(3).ToString();
                }
            }

            RSData.Close();
            RSData = null;
        }

        public string getEmailFileRestoreName(string EmailGuid, string WorkingDirectory, string Suffix)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool SkipExistingFiles = false;
            bool OverwriteExistingFiles = false;
            bool doThisForAllFiles = false;
            bool VersionFiles = false;
            string FQN;
            string Subject = "";
            string SourceName = "";
            string CreationTime = "";
            string SentOn = "";
            string MsgSize = "";
            int K = 1;
            getEmailRestoreFqnParms(EmailGuid, ref Subject, ref CreationTime, ref SentOn, ref MsgSize);
            if (Subject.Trim().Length == 0)
            {
                Subject = "NO SUBJECT";
            }

            SourceName = Subject + "." + CreationTime + "." + SentOn + "." + MsgSize;
            // ** WDM 3/12/2010 SourceName  = DMA.CheckFileName(SourceName )
            UTIL.StripUnwantedChars(ref SourceName);
            SourceName += Suffix.ToUpper();
            string CH = Strings.Mid(WorkingDirectory, WorkingDirectory.Trim().Length, 1);
            if (CH.Equals(@"\"))
            {
            }
            else
            {
                WorkingDirectory = WorkingDirectory + @"\";
            }

            FQN = WorkingDirectory + SourceName;

            // Dim F As File
            if (File.Exists(FQN))
            {

                // ** WDM This section to be incorporated at a later time
                // If doThisForAllFiles = True Then
                // If SkipExistingFiles = True Then

                // End If If OverwriteExistingFiles = True Then

                // End If

                // If VersionFiles = True Then

                // End If
                // Else
                // If SkipExistingFiles = True Then

                // End If If OverwriteExistingFiles = True Then

                // End If

                // If VersionFiles = True Then

                // End If
                // End If

                while (File.Exists(FQN))
                {
                    K += 1;
                    Subject = Strings.Mid(Subject, 1, 80);
                    Subject = Strings.Trim(Subject);
                    SourceName = Subject + "." + CreationTime + "." + SentOn + "." + MsgSize + ".Ver" + K.ToString() + Suffix;
                    SourceName = DMA.CheckFileName(SourceName);
                    CH = Strings.Mid(WorkingDirectory, WorkingDirectory.Trim().Length, 1);
                    if (CH.Equals(@"\"))
                    {
                    }
                    else
                    {
                        WorkingDirectory = WorkingDirectory + @"\";
                    }

                    SourceName = DMA.CheckFileName(SourceName);
                    FQN = WorkingDirectory + SourceName;
                }
            }

            return FQN;
        }

        public bool writeEmailFromDbToFile(string EmailGuid, string WorkingDirectory, string Suffix, double currFileSize)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string FQN = "";
            FQN = getEmailFileRestoreName(EmailGuid, WorkingDirectory, Suffix);
            UTIL.RemoveDoubleSlashes(ref FQN);
            bool B = true;

            // Dim SourceFqn  = DMA.CheckFileName(FQN)

            string SourceTblName = "Email";
            string ImageFieldName = "EmailImage";
            try
            {
                // CloseConn()
                CkConn();
                string S = "";
                S = S + " SELECT ";
                S = S + " [EmailImage]";
                S = S + " FROM  [Email]";
                S = S + " where [EmailGuid] = '" + EmailGuid + "'";
                string NewConnStr = getRepoConnStr();
                UTIL.ExtendTimeoutBySize(ref NewConnStr, currFileSize);
                var CN = new SqlConnection(NewConnStr);
                if (CN.State == ConnectionState.Closed)
                {
                    CN.Open();
                }

                var da = new SqlDataAdapter(S, CN);
                var MyCB = new SqlCommandBuilder(da);
                var ds = new DataSet();
                da.Fill(ds, SourceTblName);
                DataRow myRow;
                myRow = ds.Tables[SourceTblName].Rows[0];
                byte[] MyData;
                MyData = (byte[])myRow[ImageFieldName];
                long K;
                K = Information.UBound(MyData);
                try
                {
                    var fs = new FileStream(FQN, FileMode.CreateNew, FileAccess.Write);
                    fs.Write(MyData, 0, (int)(K + 1L));
                    fs.Close();
                    fs = null;
                }
                catch (Exception ex)
                {
                    if (ddebug)
                        Debug.Print(ex.Message);
                    // xTrace(CInt(42342.15), "clsDataBase:writeEmailFromDbToFile" + ex.Message)
                    LOG.WriteToArchiveLog("clsDatabaseARCH : writeEmailFromDbToFile : 4871 : ", ex);
                    LOG.WriteToArchiveLog("clsDatabaseARCH : writeEmailFromDbToFile : FQN : 4871 : " + FQN);
                }

                MyCB = null;
                ds = null;
                da = null;
                CN.Close();
                CN = null;
                GC.Collect();
            }
            catch (Exception ex)
            {
                string AppName = ex.Source;
                // xTrace(CInt(42342.1), "clsDataBase:writeEmailFromDbToFile" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : writeEmailFromDbToFile : 4879 : ", ex);
            }

            return B;
        }

        public void PopulateComboBox(ref ComboBox CB, string TblColName, string S)
        {
            CB.Items.Clear();
            var tConn = new SqlConnection(getRepoConnStr());
            var DA = new SqlDataAdapter(S, tConn);
            var DS = new DataSet();
            try
            {
                if (tConn.State == ConnectionState.Closed)
                {
                    tConn.Open();
                }

                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                    string tItem = drDSRow[0].ToString();
                    tItem = UTIL.RemoveSingleQuotes(tItem);
                    CB.Items.Add(tItem);
                }

                if (iRowCnt == 0)
                {
                    return;
                }
                // Bind the DataTable to the ComboBox by setting the Combobox's DataSource property to the DataTable. To display the "Description" column in the Combobox's list, set the Combobox's DisplayMember property to the name of column. Likewise, to use the "Code" column as the value of an item in the Combobox set the ValueMember property.
                CB.DropDownStyle = ComboBoxStyle.DropDown;
                // CB.DataSource = dt
                CB.DisplayMember = TblColName;
                try
                {
                    if (CB.Items.Count > 0)
                    {
                        CB.SelectedIndex = 0;
                    }
                }
                catch (Exception ex)
                {
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12350, "clsDataBase:PopulateComboBox" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : PopulateComboBox : 4928.b : ", ex);
            }
            finally
            {
                if (DA is object)
                {
                    DA = null;
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }

                GC.Collect();
            }
        }

        public void PopulateComboBoxMerge(ref ComboBox CB, string TblColName, string S)
        {
            var tConn = new SqlConnection(getRepoConnStr());
            var DA = new SqlDataAdapter(S, tConn);
            var DS = new DataSet();
            try
            {
                if (tConn.State == ConnectionState.Closed)
                {
                    tConn.Open();
                }

                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                    string tItem = drDSRow[0].ToString();
                    tItem = UTIL.RemoveSingleQuotes(tItem);
                    bool bAdd = true;
                    for (int II = 0, loopTo = CB.Items.Count - 1; II <= loopTo; II++)
                    {
                        if (CB.Items[II].ToString().Equals(tItem))
                        {
                            bAdd = false;
                            break;
                        }
                    }

                    if (bAdd == true)
                    {
                        CB.Items.Add(tItem);
                    }
                }

                if (iRowCnt == 0)
                {
                    return;
                }
                // Bind the DataTable to the ComboBox by setting the Combobox's DataSource property to the DataTable. To display the "Description" column in the Combobox's list, set the Combobox's DisplayMember property to the name of column. Likewise, to use the "Code" column as the value of an item in the Combobox set the ValueMember property.
                CB.DropDownStyle = ComboBoxStyle.DropDown;
                // CB.DataSource = dt
                CB.DisplayMember = TblColName;
                try
                {
                    if (CB.Items.Count > 0)
                    {
                        CB.SelectedIndex = 0;
                    }
                }
                catch (Exception ex)
                {
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12350, "clsDataBase:PopulateComboBox" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : PopulateComboBox : 4928.c : ", ex);
            }
            finally
            {
                if (DA is object)
                {
                    DA = null;
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }

                GC.Collect();
            }
        }

        public void PopulateListBoxMerge(ref ListBox LB, string TblColName, string S)
        {
            var tConn = new SqlConnection(getRepoConnStr());
            var DA = new SqlDataAdapter(S, tConn);
            var DS = new DataSet();
            try
            {
                if (tConn.State == ConnectionState.Closed)
                {
                    tConn.Open();
                }

                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                    string tItem = drDSRow[0].ToString();
                    tItem = UTIL.RemoveSingleQuotes(tItem);
                    bool bAdd = true;
                    for (int II = 0, loopTo = LB.Items.Count - 1; II <= loopTo; II++)
                    {
                        if (LB.Items[II].ToString().Equals(tItem))
                        {
                            bAdd = false;
                            break;
                        }
                    }

                    if (bAdd == true)
                    {
                        LB.Items.Add(tItem);
                    }
                }

                if (iRowCnt == 0)
                {
                    return;
                }

                LB.DisplayMember = TblColName;
                try
                {
                    if (LB.Items.Count > 0)
                    {
                        LB.SelectedIndex = 0;
                    }
                }
                catch (Exception ex)
                {
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12350, "clsDataBase:PopulateComboBox" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : PopulateComboBox : 4928.d : ", ex);
            }
            finally
            {
                if (DA is object)
                {
                    DA = null;
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }

                GC.Collect();
            }
        }

        public void PopulateListBoxRemove(ref ListBox LB, string TblColName, string S)
        {
            var tConn = new SqlConnection(getRepoConnStr());
            var DA = new SqlDataAdapter(S, tConn);
            var DS = new DataSet();
            try
            {
                if (tConn.State == ConnectionState.Closed)
                {
                    tConn.Open();
                }

                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                    string tItem = drDSRow[0].ToString();
                    tItem = UTIL.RemoveSingleQuotes(tItem);
                    bool bAdd = true;
                    for (int II = 0, loopTo = LB.Items.Count - 1; II <= loopTo; II++)
                    {
                        if (LB.Items[II].ToString().Equals(tItem))
                        {
                            LB.Items.RemoveAt(II);
                            break;
                        }
                    }
                }

                if (iRowCnt == 0)
                {
                    return;
                }

                LB.DisplayMember = TblColName;
                try
                {
                    if (LB.Items.Count > 0)
                    {
                        LB.SelectedIndex = 0;
                    }
                }
                catch (Exception ex)
                {
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12350, "clsDataBase:PopulateComboBox" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : PopulateComboBox : 4928.a : ", ex);
            }
            finally
            {
                if (DA is object)
                {
                    DA = null;
                }

                if (DS is object)
                {
                    DS = null;
                }

                if (tConn is object)
                {
                    tConn.Close();
                    tConn = null;
                }

                GC.Collect();
            }
        }

        public void PopulateListBox(ref ListBox LB, string TblColName, string SelectionSql)
        {
            try
            {
                LB.DataSource = null;
                LB.Items.Clear();
                CloseConn();
                CkConn();
                if (gConn.State == ConnectionState.Closed)
                {
                    gConn.Open();
                }

                var DA = new SqlDataAdapter(SelectionSql, gConn);
                var DS = new DataSet();
                DA.Fill(DS, TblColName);

                // Create and populate the DataTable to bind to the ComboBox:
                var dt = new DataTable();

                // Populate the DataTable to bind to the Combobox.
                dt.Columns.Add(TblColName, typeof(string));
                DataRow drNewRow;
                int iRowCnt = 0;
                foreach (DataRow drDSRow in DS.Tables[TblColName].Rows)
                {
                    drNewRow = dt.NewRow();
                    drNewRow[TblColName] = drDSRow[TblColName];
                    dt.Rows.Add(drNewRow);
                    iRowCnt += 1;
                }

                if (iRowCnt == 0)
                {
                    return;
                }
                // Bind the DataTable to the ComboBox by setting the Combobox's DataSource property to the DataTable.
                // To display the "Description" column in the Combobox's list, set the Combobox's DisplayMember property
                // to the name of column. Likewise, to use the "Code" column as the value of an item in the Combobox set
                // the ValueMember property.
                LB.DataSource = dt;
                LB.DisplayMember = TblColName;
                LB.SelectedIndex = 0;
                if (DS is object)
                {
                    DS = null;
                }

                if (DA is object)
                {
                    DA = null;
                }

                if (gConn is object)
                {
                    gConn.Close();
                    gConn = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12350, "clsDataBase:PopulateListBox" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 2194.23: ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : PopulateListBox : 4968 : ", ex);
            }
            finally
            {
                GC.Collect();
            }
        }

        public void PopulateUserSL(ref SortedList SL)
        {
            SL.Clear();
            string S = "Select [UserName], [UserID]  FROM [Users] order by [UserName]";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string UserName = "";
            string UserID = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    UserName = RSData.GetValue(0).ToString();
                    UserID = RSData.GetValue(1).ToString();
                    SL.Add(UserID, UserName);
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
        }

        public string getDatasourceParm(string AttributeName, string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // Select AttributeValue
            // FROM [SourceAttribute]
            // where AttributeName = 'Author'
            // and SourceGuid = '6ff1c120-66cd-4aac-b2ec-85dda9f48bc8'
            // go

            string S = "";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string UserName = "";
            string UserID = "";
            string ColVAl = "";
            S = "Select AttributeValue ";
            S = S + " FROM [SourceAttribute]";
            S = S + " where AttributeName = '" + AttributeName + "'";
            S = S + " and SourceGuid = '" + SourceGuid + "'";

            // Dim ddebug As Boolean = False
            // Dim queryString As String = Sql
            // Dim rc As Boolean = False
            SqlDataReader rsDataQry = null;
            var CN = new SqlConnection(getRepoConnStr());
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            var command = new SqlCommand(S, CN);
            try
            {
                rsDataQry = command.ExecuteReader();
                if (rsDataQry.HasRows)
                {
                    while (rsDataQry.Read())
                        ColVAl = rsDataQry.GetValue(0).ToString();
                }
                else
                {
                    ColVAl = "";
                }
            }
            catch (Exception ex)
            {
                // xTrace(1001, "clsDataBase:getDatasourceParm" + ex.Message)
                // xTrace(1002, "clsDataBase:getDatasourceParm", ex.StackTrace)
                // xTrace(1003, "clsDataBase:getDatasourceParm", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getDatasourceParm : 5019 : ", ex);
            }

            if (CN.State == ConnectionState.Open)
            {
                CN.Close();
            }

            CN = null;
            command.Dispose();
            command = null;
            rsDataQry.Close();
            rsDataQry = null;
            return ColVAl;
        }

        public string getTblColString(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // Select AttributeValue
            // FROM [SourceAttribute]
            // where AttributeName = 'Author'
            // and SourceGuid = '6ff1c120-66cd-4aac-b2ec-85dda9f48bc8'
            // go

            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string UserName = "";
            string UserID = "";
            string ColVAl = "";

            // Dim ddebug As Boolean = False
            // Dim queryString As String = Sql
            // Dim rc As Boolean = False
            SqlDataReader rsDataQry = null;
            var CN = new SqlConnection(getRepoConnStr());
            if (CN.State == ConnectionState.Closed)
            {
                CN.Open();
            }

            var command = new SqlCommand(S, CN);
            try
            {
                rsDataQry = command.ExecuteReader();
                if (rsDataQry.HasRows)
                {
                    while (rsDataQry.Read())
                        ColVAl = rsDataQry.GetValue(0).ToString();
                }
                else
                {
                    ColVAl = "";
                }
            }
            catch (Exception ex)
            {
                // xTrace(1001, "clsDataBase:getTblColString" + ex.Message)
                // xTrace(1002, "clsDataBase:getTblColString", ex.StackTrace)
                // xTrace(1003, "clsDataBase:getTblColString", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getTblColString : 5019 : ", ex);
            }

            if (CN.State == ConnectionState.Open)
            {
                CN.Close();
            }

            CN = null;
            command.Dispose();
            command = null;
            rsDataQry.Close();
            rsDataQry = null;
            return ColVAl;
        }

        public string getSavedValue(string userid, string SaveName, string SaveTypeCode, string ValName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string UserName = "";
            string ColVAl = "";
            S = S + " Select [ValName]";
            S = S + " ,[ValValue]";
            S = S + " FROM [SavedItems]";
            S = S + " where userid = '" + userid + "'";
            S = S + " and SaveName = '" + SaveName + "'";
            S = S + " and SaveTypeCode = '" + SaveTypeCode + "'";
            S = S + " and ValName = '" + ValName + "'";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    ColVAl = RSData.GetValue(1).ToString();
                    ColVAl = ColVAl.Trim();
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl);
                }
            }
            else
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSavedValue : Error 0000 : Did not find library item: " + SaveName + " : " + SaveTypeCode + " : " + ValName);
                ColVAl = "";
            }

            RSData.Close();
            RSData = null;
            if (Strings.LCase(ColVAl).Equals("null"))
            {
                ColVAl = "";
            }

            return ColVAl;
        }

        public string getLastSuccessfulArchiveDate(string ArchiveType, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select  max(archiveEndDate)";
            S = S + " FROM  [ArchiveStats]";
            S = S + " where ";
            S = S + " [ArchiveType] = '" + ArchiveType + "'";
            S = S + " and [UserID] = '" + UserID + "'";
            S = S + " and Status = 'Successful'";
            string ColVAl = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    ColVAl = RSData.GetValue(0).ToString();
                    ColVAl = ColVAl.Trim();
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl);
                }
            }
            else
            {
                ColVAl = "";
            }
            // RSData.Close()
            // RSData = Nothing

            if (Strings.LCase(ColVAl).Equals("null"))
            {
                ColVAl = "";
            }

            DateTime d1;
            if (ColVAl.Trim().Length == 0)
            {
                // d1 = CDate("01/01/1900")
                d1 = default;
            }
            else
            {
                d1 = Conversions.ToDate(ColVAl);
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            RSData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            return Conversions.ToString(d1);
        }

        public int ckUserStartUpParameter(string Userid, string ValName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // where [SaveName] = 'UserStartUpParameters'
            // and [SaveTypeCode] = 'StartUpParm'
            // and ValName = 'Temp Directory'
            // and userid = 'smiller'

            string S = "";
            S = S + " where [SaveName] = 'UserStartUpParameters'";
            S = S + " and [SaveTypeCode] = 'StartUpParm'";
            S = S + " and ValName = '" + ValName + "'";
            S = S + " and userid = '" + Userid + "'";
            int B = iGetRowCount("SavedItems", S);
            return B;
        }

        public string getWorkingDirectory(string Userid, string ValName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string ColVAl = "";
            string S = "";
            try
            {
                S = S + "Select [ValValue]";
                S = S + " FROM [SavedItems]";
                S = S + " where [SaveName] = 'UserStartUpParameters'";
                S = S + " and [SaveTypeCode] = 'StartUpParm'";
                S = S + " and ValName = '" + ValName + "'";
                S = S + " and userid = '" + Userid + "'";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        ColVAl = RSData.GetValue(0).ToString();
                        ColVAl = ColVAl.Trim();
                        ColVAl = UTIL.RemoveSingleQuotes(ColVAl);
                    }
                }
                else
                {
                    ColVAl = "";
                }

                RSData.Close();
                RSData = null;
                if (Strings.LCase(ColVAl).Equals("null"))
                {
                    ColVAl = "";
                }

                if (ValName == "CONTENT WORKING DIRECTORY")
                {
                    if (ColVAl.Length > 0)
                    {
                        if (!Directory.Exists(ColVAl))
                        {
                            ColVAl = Path.GetTempPath();
                        }
                    }
                }
                else if (ValName == "EMAIL WORKING DIRECTORY")
                {
                    if (ColVAl.Length > 0)
                    {
                        if (!Directory.Exists(ColVAl))
                        {
                            ColVAl = Path.GetTempPath();
                        }
                    }
                }
                else if (ValName == "DBARCH WARNING LEVEL")
                {
                    if (ColVAl.Length == 0)
                    {
                        ColVAl = "250";
                    }
                }
                else if (ValName == "DBARCH RETURN INCREMENT")
                {
                    if (ColVAl.Length == 0)
                    {
                        ColVAl = "100";
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR clsDatabaseARCH:getWorkingDirectory 100 - " + ex.Message + Constants.vbCrLf + ex.StackTrace);
            }

            return ColVAl;
        }

        public int iCountNbrEmailAttachments(string EMailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var con = new SqlConnection(getRepoConnStr());
            con.Open();
            // Dim command As New SqlCommand(s, con)
            SqlDataReader RSData = null;
            int cnt = -1;
            try
            {
                string tQuery = "";
                string s = "";
                s = "Select count(*) as TheCount From EmailAttachment where EmailGuid = '" + EMailGuid + "'";
                using (con)
                {
                    RSData = SqlQry(s, con);
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                }
            }
            catch (Exception ex)
            {
                // xTrace(12360, "clsDataBase:iCountNbrEmailAttachments" + ex.Message)
                if (ddebug)
                    Debug.Print("Error 3932.11.13: ", ex);
                Console.WriteLine("Error 3932.11.13: ", ex);
                cnt = 0;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iCountNbrEmailAttachments : 5163 : ", ex);
            }
            finally
            {
                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                // command.Connection.Close()
                // command = Nothing
                if (con.State == ConnectionState.Open)
                {
                    con.Close();
                }

                con = null;
            }

            return cnt;
        }

        public void DefineFileExt(ref List<string> LB)
        {
            string ColVAl = "";
            string S = "";
            S = S + " SELECT distinct [OriginalFileType]";
            S = S + " FROM DataSource";
            S = S + " order by OriginalFileType";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    ColVAl = RSData.GetValue(0).ToString();
                    ColVAl = ColVAl.Trim();
                    ColVAl = UTIL.RemoveSingleQuotes(ColVAl);
                    DMA.ListRegistryKeys(ColVAl, ref LB);
                }
            }
        }

        public bool UpdateBlob(string TblName, string ImageColumnName, string WhereClause, string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool b = false;
            try
            {
                string ConnStr = getRepoConnStr();
                var connection = new SqlConnection(ConnStr);
                var command = new SqlCommand("UPDATE " + TblName + " SET " + ImageColumnName + " = @FileContents " + WhereClause, connection);
                command.Parameters.Add("@FileContents", SqlDbType.VarBinary).Value = File.ReadAllBytes(FQN);
                connection.Open();
                command.ExecuteNonQuery();
                connection.Close();
                b = true;
            }
            catch (Exception ex)
            {
                // xTrace(12365, "clsDataBase:UpdateBlob" + ex.Message)
                b = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : UpdateBlob : 5190 : ", ex);
            }

            return b;
        }

        public void RebuildFulltextCatalog()
        {
            string S = "";
            S = "EXEC sp_fulltext_catalog 'ftCatalog', 'start_full' ";
            ExecuteSqlNewConn(S, false);
            S = "EXEC sp_fulltext_catalog 'EMAIL_CATELOG', 'start_full' ";
            ExecuteSqlNewConn(S, false);
        }

        public bool isAdmin(string Userid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string ColVAl = "";
            string S = "Select [Admin] FROM [Users] where userid = '" + modGlobals.gCurrUserGuidID + "'";
            SqlDataReader RSData = null;
            // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                ColVAl = RSData.GetValue(0).ToString();
                ColVAl = ColVAl.Trim();
                if (ColVAl.Equals("True"))
                {
                    B = true;
                }

                if (ColVAl.Equals("0"))
                {
                    B = false;
                }

                if (ColVAl.Equals("1"))
                {
                    B = true;
                }

                if (ColVAl.Equals(""))
                {
                    B = false;
                }

                if (ColVAl.Equals("Y"))
                {
                    B = true;
                }

                if (ColVAl.Equals("N"))
                {
                    B = false;
                }

                if (ColVAl.Equals("A"))
                {
                    B = true;
                }

                if (ColVAl.Equals("S"))
                {
                    B = true;
                }

                if (ColVAl.Equals("G"))
                {
                    B = false;
                }
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            RSData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            return B;
        }

        public bool isGlobalSearcher(string Userid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string ColVAl = "";
            string S = "Select [Admin] FROM [Users] where userid = '" + Userid + "'";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                ColVAl = RSData.GetValue(0).ToString();
                ColVAl = ColVAl.Trim();
                if (ColVAl.Equals("G") | ColVAl.Equals("A") | ColVAl.Equals("S"))
                {
                    B = true;
                }
            }

            return B;
        }

        public bool isSuperAdmin(string Userid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string ColVAl = "";
            string S = "Select [Admin] FROM [Users] where userid = '" + Userid + "'";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                ColVAl = RSData.GetValue(0).ToString();
                ColVAl = ColVAl.Trim();
                if (ColVAl.Equals("S"))
                {
                    B = true;
                }
            }

            return B;
        }

        public bool isImageFile(string tFileType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (Strings.InStr(tFileType, @"\") > 0)
            {
                tFileType = DMA.getFileExtension(tFileType);
            }

            bool B = false;
            B = ckOcrNeeded(tFileType);
            if (B)
            {
                return true;
            }

            int I = 0;
            string S = "Select count(*) FROM [ImageTypeCodes] where [ImageTypeCode] = '" + tFileType + "'";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                I = RSData.GetInt32(0);
                if (I > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }

            return B;
        }

        public int getEmailSize(string EmailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int I = 0;
            bool B = false;
            string S = "Select msgsize from Email where EmailGuid = '" + EmailGuid + "'";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    I = RSData.GetInt32(0);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("getEmailSize - Warning: email - no msgsize found: ", ex);
                I = 0;
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            return I;
        }

        public string getDirGuid(string DirFQN, string MachineName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            DirFQN = UTIL.RemoveSingleQuotes(DirFQN);
            bool B = false;
            string tGuid = "";
            string S = "";
            S = " SELECT [DirGuid] FROM [DirectoryGuids] where [DirFQN]   = '" + DirFQN + "' ";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tGuid = RSData.GetValue(0).ToString();
                }
                else
                {
                    tGuid = Guid.NewGuid().ToString();
                    S = "Insert into DirectoryGuids (DirFQN,DirGuid) values ('" + DirFQN + "','" + tGuid + "') ";
                    bool BB = ExecuteSqlNewConn(90106, S);
                    if (BB == false)
                    {
                        tGuid = "";
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getDirGuid - : ", ex);
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            return tGuid;
        }

        public string getDirListenerNameByGuid(string DirGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string DirName = "";
            string S = "";
            S = " SELECT [DirFqn] FROM [DirectoryGuids] where [DirGuid]   = '" + DirGuid + "' ";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    DirName = RSData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getDirListenerNameByGuid - Warning: : ", ex);
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            return DirName;
        }

        public string getDescription(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string sData = "";
            string S = "Select Description from DataSource where SourceGuid = '" + SourceGuid + "'";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    sData = RSData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("getDocSize - Warning: email - no msgsize found: ", ex);
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            sData = UTIL.RemoveSingleQuotes(sData);
            return sData;
        }

        public string getSdCols(string ConnstrName, string TableName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ConnstrName = UTIL.RemoveSingleQuotes(ConnstrName);
            TableName = UTIL.RemoveSingleQuotes(TableName);
            bool B = false;
            string sData = "";
            string S = "Select [SelectedColumns] FROM [ConnectionStringsSaved] where ConnstrName  = '" + ConnstrName + "' and TableName = '" + TableName + "' ";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    sData = RSData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("getDocSize - Warning: email - no msgsize found: ", ex);
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            sData = UTIL.RemoveSingleQuotes(sData);
            return sData;
        }

        public string RefactorUserid(string FromUserid, string ToUserid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string Msg = "";
            var myConnection = new SqlConnection("Data Source=localhost;Initial Catalog=Northwind;uid=sa;pwd=sa;");
            myConnection.Open();
            var myTrans = myConnection.BeginTransaction();
            var myCommand = new SqlCommand();
            myCommand.Connection = myConnection;
            myCommand.Transaction = myTrans;
            try
            {
                myCommand.CommandText = "Insert into Region (RegionID, RegionDescription) VALUES (100, 'Description')";
                myCommand.ExecuteNonQuery();
                myCommand.CommandText = "delete * from Region where RegionID=101";
                myCommand.ExecuteNonQuery();
                myTrans.Commit();
                Msg = "The userid was successfully changed from " + FromUserid + " to " + ToUserid + " throughout the entire repository for both content and emails.";
            }
            catch (Exception ep)
            {
                myTrans.Rollback();
                Msg = "ERROR: The userid Failed to change from " + FromUserid + " to " + ToUserid + ". All transactions rolled back to original state.";
                LOG.WriteToArchiveLog("clsDatabaseARCH : RefactorUserid : 5255 : " + ep.Message);
            }
            finally
            {
                myConnection.Close();
            }

            return Msg;
        }

        public string getPw(string UID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string ColVAl = "";
            string S = "Select [UserPassword] FROM  [Users] where UserID = '" + UID + "'";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            // CS = ENC.AES256DecryptString(CS)

            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                RSData.Read();
                ColVAl = RSData.GetValue(0).ToString();
                ColVAl = ColVAl.Trim();
            }

            return ColVAl;
        }

        public int iCountUserContent(string UID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from DataSource where DataSourceOwnerUserID = '" + UID + "'";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12370, "clsDataBase:iCountUserContent" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : iCountUserContent : 5280 : ", ex);
            }

            return cnt;
        }

        public int iCountUserEmails(string UID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from email where Userid = '" + UID + "'";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(12371, "clsDataBase:iCountUserEmails" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : iCountUserEmails : 5296 : ", ex);
            }

            return cnt;
        }

        public string SaveErrMsg(string ErrMsg, string ErrStack, string IDNBR, string ConnectiveGuid)
        {
            var DBARCH = new clsDatabaseARCH();
            string rc = "";
            string SQL = "";
            string ConnectionString = getRepoConnStr();
            var CN = new SqlConnection(ConnectionString);
            try
            {
                if (CN.State == ConnectionState.Closed)
                {
                    CN.Open();
                }

                ErrMsg = UTIL.RemoveSingleQuotes(ErrMsg);
                ErrStack = UTIL.RemoveSingleQuotes(ErrStack);
                string S = "INSERT INTO [RuntimeErrors] ";
                S = S + "([ErrorMsg]";
                S = S + ",[StackTrace]";
                S = S + ",IdNbr, ConnectiveGuid, Userid)";
                S = S + "VALUES ";
                S = S + "('" + ErrMsg + "'";
                S = S + ",'" + ErrStack + "'";
                S = S + ",'" + IDNBR + "' ";
                S = S + ",'" + ConnectiveGuid + "' ";
                S = S + ",'" + modGlobals.gCurrUserGuidID + "')";
                using (CN)
                {
                    var dbCmd = CN.CreateCommand();
                    dbCmd.Connection = CN;
                    try
                    {
                        dbCmd.CommandText = S;
                        dbCmd.ExecuteNonQuery();
                        // Attempt to commit the transaction.
                        // transaction.Commit()

                        // Dim debug As Boolean = True
                        // If debug Then
                        // Console.WriteLine("Successful execution: " + vbCrLf + S )
                        // End If
                        rc = Conversions.ToString(true);
                    }
                    catch (Exception ex)
                    {
                        rc = "SaveErrMsg" + Constants.vbCrLf + ex.Message + Constants.vbCrLf + Constants.vbCrLf + ex.StackTrace;
                        LOG.WriteToArchiveLog("clsDatabaseARCH : SaveErrMsg : 5325 : ", ex);
                    }

                    if (CN.State == ConnectionState.Open)
                    {
                        CN.Close();
                    }

                    if (CN is object)
                    {
                        CN = null;
                    }

                    if (dbCmd is null)
                    {
                        dbCmd = null;
                    }
                }
            }
            catch (Exception ex)
            {
                rc = "SaveErrMsg" + Constants.vbCrLf + ex.Message + Constants.vbCrLf + Constants.vbCrLf + ex.StackTrace;
                LOG.WriteToArchiveLog("clsDatabaseARCH : SaveErrMsg : 5336 : ", ex);
            }

            // If CN.State = Data.ConnectionState.Open Then
            // CN.Close()
            // End If
            // If Not CN Is Nothing Then
            // CN = Nothing
            // End If

            return rc;
        }

        public void getMissingVaules(string tGuid, ref string VersionNbr, ref string LastAccessDate, ref string LastWriteTime, ref string RetentionExpirationDate, ref string IsPublic)
        {
            string S = " SELECt  [VersionNbr]";
            S = S + " ,[LastAccessDate]      ";
            S = S + " ,[LastWriteTime]";
            S = S + " ,[RetentionExpirationDate]";
            S = S + " ,[IsPublic]";
            S = S + " FROM DataSource";
            S = S + " where [SourceGuid] = '" + tGuid + "' ";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    VersionNbr = RSData.GetValue(0).ToString();
                    LastAccessDate = RSData.GetValue(1).ToString();
                    LastWriteTime = RSData.GetValue(2).ToString();
                    RetentionExpirationDate = RSData.GetValue(3).ToString();
                    IsPublic = RSData.GetValue(4).ToString();
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(9001, "clsDataBase:getMissingVaules" + ex.Message)
                // xTrace(9002, "clsDataBase:getMissingVaules", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getMissingVaules : 5363 : ", ex);
            }
        }

        public void getMissingEmailVaules(string tGuid, ref string RetentionExpirationDate, ref string IsPublic)
        {
            string S = " SELECT [isPublic],[RetentionExpirationDate] FROM [Email] where [EmailGuid] = '" + tGuid + "'";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    IsPublic = RSData.GetValue(0).ToString();
                    RetentionExpirationDate = RSData.GetValue(1).ToString();
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(92301, "clsDataBase:getMissingEmailVaules" + ex.Message)
                // xTrace(92302, "clsDataBase:getMissingEmailVaules", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getMissingEmailVaules : 5381 : ", ex);
            }
        }

        public string getMetaData(string tGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " SELECT [AttributeValue], [AttributeName] ";
            S = S + " FROM  [SourceAttribute]";
            S = S + " where [SourceGuid] = '" + tGuid + "' ";
            S = S + " order by [AttributeName]";
            string Msg = "";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            string AttributeValue = RSData.GetValue(0).ToString() + " ... " + Constants.vbCrLf;
                            string AttributeName = RSData.GetValue(1).ToString() + " ... " + Constants.vbCrLf;
                            Msg += AttributeName + ":" + AttributeValue + Constants.vbCrLf;
                        }
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(10101, "clsDataBase:getMetaData" + ex.Message)
                // xTrace(10102, "clsDataBase:getMetaData", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getMetaData : 5406 : ", ex);
            }

            return Msg;
        }

        public string getSystemParm(string SysParm)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SysParm = UTIL.RemoveSingleQuotes(SysParm);
            string S = "";
            S = S + " SELECT [SysParmVal] FROM [SystemParms] where [SysParm] = '" + SysParm + "' ";
            string SystemParameter = "";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                            SystemParameter = RSData.GetValue(0).ToString();
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(10101, "clsDataBase:getSystemParm" + ex.Message)
                // xTrace(10102, "clsDataBase:getSystemParm", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSystemParm : 5406 : ", ex);
            }

            return SystemParameter;
        }

        public string getUserParm(string UserParm)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gCurrUserGuidID.Length == 0)
            {
                return "0";
            }

            UserParm = UTIL.RemoveSingleQuotes(UserParm);
            string S = "Select ParmValue from [RunParms] where Parm = '" + UserParm + "' and userid = '" + modGlobals.gCurrUserGuidID + "'";
            string SystemParameter = "";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                            SystemParameter = RSData.GetValue(0).ToString();
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(10101, "clsDataBase:getUserParm" + ex.Message)
                // xTrace(10102, "clsDataBase:getUserParm", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserParm : 5406 : ", ex);
            }

            return SystemParameter;
        }

        public string getUserParm(string UserParm, string DefaultValue)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gCurrUserGuidID.Length == 0)
            {
                return "0";
            }

            UserParm = UTIL.RemoveSingleQuotes(UserParm);
            string S = "Select ParmValue from [RunParms] where Parm = '" + UserParm + "' and userid = '" + modGlobals.gCurrUserGuidID + "'";
            string SystemParameter = "";
            int cnt = 0;
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                            SystemParameter = RSData.GetValue(0).ToString();
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // xTrace(10101, "clsDataBase:getUserParm" + ex.Message)
                // xTrace(10102, "clsDataBase:getUserParm", S)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserParm : 5406 : ", ex);
            }

            return SystemParameter;
        }

        public void getContentColumns(string SourceGuid, ref SortedList SL)
        {
            string S = "";
            S = S + " SELECT  ";
            S = S + " [CreateDate]()";
            S = S + " ,[SourceName]";
            S = S + " ,[SourceTypeCode]";
            S = S + " ,[FQN]";
            S = S + " ,[VersionNbr]";
            S = S + " ,[LastAccessDate]";
            S = S + " ,[FileLength]";
            S = S + " ,[LastWriteTime]";
            S = S + " ,[UserID]";
            S = S + " ,[DataSourceOwnerUserID]";
            S = S + " ,[isPublic]";
            S = S + " ,[FileDirectory]";
            S = S + " ,[OriginalFileType]";
            S = S + " ,[RetentionExpirationDate]";
            S = S + " ,[IsPublicPreviousState]";
            S = S + " ,[isAvailable]";
            S = S + " ,[isContainedWithinZipFile]";
            S = S + " ,[ZipFileGuid]";
            S = S + " ,[IsZipFile]";
            S = S + " ,[DataVerified]";
            S = S + " FROM([DataSource])";
            S = S + " where [SourceGuid] = '" + SourceGuid + "'";
            CloseConn();
            CkConn();
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            SL.Clear();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    SL.Clear();
                    int iCols = RSData.FieldCount - 1;
                    var loopTo = RSData.FieldCount - 1;
                    for (iCols = 0; iCols <= loopTo; iCols++)
                        FillSortedList(RSData, iCols, ref SL);
                }
            }
            else
            {
                SL.Clear();
            }

            RSData.Close();
            RSData = null;
        }

        public void getEmailColumns(string SourceGuid, ref SortedList SL)
        {
            string S = "";
            S = S + " SELECT  ";
            S = S + " [EmailGuid]";
            S = S + " ,[SUBJECT]";
            S = S + " ,[SentTO]";
            S = S + " ,[Body]";
            S = S + " ,[Bcc]";
            S = S + " ,[BillingInformation]";
            S = S + " ,[CC]";
            S = S + " ,[Companies]";
            S = S + " ,[CreationTime]";
            S = S + " ,[ReadReceiptRequested]";
            S = S + " ,[ReceivedByName]";
            S = S + " ,[ReceivedTime]";
            S = S + " ,[AllRecipients]";
            S = S + " ,[UserID]";
            S = S + " ,[SenderEmailAddress]";
            S = S + " ,[SenderName]";
            S = S + " ,[Sensitivity]";
            S = S + " ,[SentOn]";
            S = S + " ,[MsgSize]";
            S = S + " ,[DeferredDeliveryTime]";
            S = S + " ,[EntryID]";
            S = S + " ,[ExpiryTime]";
            S = S + " ,[LastModificationTime]";
            S = S + " ,[EmailImage]";
            S = S + " ,[Accounts]";
            S = S + " ,[RowID]";
            S = S + " ,[ShortSubj]";
            S = S + " ,[SourceTypeCode]";
            S = S + " ,[OriginalFolder]";
            S = S + " ,[StoreID]";
            S = S + " ,[isPublic]";
            S = S + " ,[RetentionExpirationDate]";
            S = S + " ,[IsPublicPreviousState]";
            S = S + " ,[isAvailable]";
            S = S + " FROM  [Email]";
            S = S + " where [EmailGuid] = '" + SourceGuid + "'";
            CloseConn();
            CkConn();
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            SL.Clear();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    SL.Clear();
                    int iCols = RSData.FieldCount - 1;
                    var loopTo = RSData.FieldCount - 1;
                    for (iCols = 0; iCols <= loopTo; iCols++)
                        FillSortedList(RSData, iCols, ref SL);
                }
            }
            else
            {
                SL.Clear();
            }

            RSData.Close();
            RSData = null;
        }

        public void FillSortedList(SqlDataReader RSData, int iRow, ref SortedList SL)
        {
            string cName = RSData.GetName(iRow).ToString();
            try
            {
                string tColValue = RSData.GetValue(0).ToString();
                SL.Add(cName, tColValue);
            }
            catch (Exception ex)
            {
                string tColValue = "";
                SL.Add(cName, tColValue);
                LOG.WriteToArchiveLog("clsDatabaseARCH : FillSortedList : 5508 : ", ex);
            }
        }

        public string GetGuidByFqn(string FQN, string VersionNbr)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select SourceGuid from DataSource where FQN = '" + FQN + "' and machineid = '" + modGlobals.gMachineID + "' and VersionNbr = " + VersionNbr;
            CloseConn();
            CkConn();
            string xGuid = "";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                xGuid = rsData.GetValue(0).ToString();
            }
            else
            {
                xGuid = "";
            }

            rsData.Close();
            rsData = null;
            return xGuid;
        }

        public string GetGuidByURL(string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "Select  SourceGuid FROM DataSource where FQN = '" + FQN + "' ";
            CloseConn();
            CkConn();
            string xGuid = "";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                xGuid = rsData.GetValue(0).ToString();
            }
            else
            {
                xGuid = "";
            }

            rsData.Close();
            rsData = null;
            return xGuid;
        }

        public string GetLibOwnerByName(string LibraryName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (Strings.InStr(LibraryName, "''") > 0)
            {
            }
            else
            {
                LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
            }

            string S = "Select UserID from Library where LibraryName = '" + LibraryName + "' ";
            CloseConn();
            CkConn();
            string xGuid = "";
            SqlDataReader rsData = null;
            bool b = false;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                xGuid = rsData.GetValue(0).ToString();
            }
            else
            {
                xGuid = "";
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            return xGuid;
        }

        public bool addDocSourceDescription(string SourceGuid, string Description)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            Description = UTIL.RemoveSingleQuotes(Description);
            string S = "";
            S = "UPDATE [DataSource] set Description = '" + Description + "' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            return b;
        }

        // Function addDocSourceError(ByVal SourceGuid , ByVal Notes ) As Boolean
        // Notes = UTIL.RemoveSingleQuotes(Notes)
        // Dim S  = ""
        // S  = "UPDATE [DataSource] set Notes = '" + Notes + "' where SourceGuid = '" + SourceGuid + "'"
        // Dim b As Boolean = ExecuteSqlNewConn(S, False)
        // Return b
        // End Function

        public bool addDocSourceKeyWords(string SourceGuid, string KeyWords)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            KeyWords = UTIL.RemoveSingleQuotes(KeyWords);
            string S = "";
            S = "UPDATE [DataSource] set KeyWords = '" + KeyWords + "' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            return b;
        }

        public bool UpdateMetaData(string Author, string Description, string Keywords, string QuickRefIdNbr, string FQN, string MetadataTag, string MetadataValue, string Library)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            MetadataTag = UTIL.RemoveSingleQuotes(MetadataTag);
            MetadataValue = UTIL.RemoveSingleQuotes(MetadataValue);
            Library = UTIL.RemoveSingleQuotes(Library);
            FQN = UTIL.RemoveSingleQuotes(FQN);
            Author = UTIL.RemoveSingleQuotes(Author);
            Description = UTIL.RemoveSingleQuotes(Description);
            Keywords = UTIL.RemoveSingleQuotes(Keywords);
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            S = "update QuickRefItems set Author = '" + Author;
            S = S + "', Description = '" + Description;
            S = S + "', Keywords = '" + Keywords;
            S = S + "', MetadataTag = '" + MetadataTag;
            S = S + "', MetadataValue = '" + MetadataValue;
            S = S + "', Library = '" + Library;
            S = S + "' where QuickRefIdNbr = " + QuickRefIdNbr;
            S = S + " and FQN = '" + FQN.ToString() + "'";
            bool b = ExecuteSqlNewConn(S, false);
            return b;
        }

        public void LoadProcessDates()
        {
            string S = "";
            S = S + " select OriginalFolder, max(CreationTime) as MaxDate ";
            S = S + " FROM EMAIL ";
            S = S + " group by OriginalFolder";
            string OriginalFolder = "";
            var MaxDate = DateAndTime.Now;
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            string argConnStr = 600.ToString();
            UTIL.setConnectionStringTimeout(ref argConnStr);
            var CONN = new SqlConnection(CS);
            try
            {
                CloseConn();
                CkConn();
                modGlobals.slProcessDates.Clear();

                // RSData = SqlQryNo'Session(S)
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        OriginalFolder = RSData.GetValue(0).ToString();
                        MaxDate = Conversions.ToDate(RSData.GetValue(1).ToString());
                        modGlobals.addEmailProcessDate(OriginalFolder, MaxDate);
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: LoadProcessDates 100 - ", ex);
            }
            finally
            {
                if (RSData is object)
                {
                    if (!RSData.IsClosed)
                    {
                        RSData.Close();
                    }

                    RSData = null;
                }

                if (CONN is object)
                {
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }
                }

                RSData = null;
                CONN.Dispose();
                // Command = Nothing
            }
        }

        // select LibraryName FROM LibDirectory where DirectoryName = 'c:\temp'
        public void getLibDirs(string DirectoryName, ref List<string> L)
        {
            L.Clear();
            DirectoryName = UTIL.RemoveSingleQuotes(DirectoryName);
            string S = "Select LibraryName FROM LibDirectory where DirectoryName = '" + DirectoryName + "'";
            CloseConn();
            CkConn();
            modGlobals.slProcessDates.Clear();
            string LibraryName = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibraryName = RSData.GetValue(0).ToString();
                    LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
                    if (!L.Contains(LibraryName))
                    {
                        L.Add(LibraryName);
                    }
                }
            }

            RSData.Close();
            RSData = null;
        }

        public string getSourceGuidByFqn(string fqn, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            fqn = UTIL.RemoveSingleQuotes(fqn);
            try
            {
                string S = " SELECT SourceGuid FROM DataSource where FQN = '" + fqn + "' AND DataSourceOwnerUserID = '" + UserID + "' ";
                string SourceGuid = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()

                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SourceGuid = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
                return SourceGuid;
            }
            catch (Exception ex)
            {
                xTrace(23456, "getSourceGuidByFqn", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSourceGuidByFqn : 5593 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSourceGuidByFqn : 5585 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSourceGuidByFqn : 5603 : ", ex);
                return null;
            }
        }

        public string getSourceGuidBySourcenameCRC(string Sourcename, string CRC)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string sGuid = "";
            try
            {
                Sourcename = UTIL.RemoveSingleQuotes(Sourcename);
                string S = "Select  SourceGuid FROM DataSource where SourceName = '" + Sourcename + "' and CRC = " + CRC + " ";
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    sGuid = rsData.GetString(0);
                }

                rsData.Close();
            }
            catch (Exception ex)
            {
                // xTrace(12311, "clsDataBase:getCountDataSourceFiles" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCountDataSourceFiles : 2174 : ", ex);
            }

            return sGuid;
        }

        public string getSourceNameByGuid(string RowGuid)
        {
            var TD = new Dictionary<string, string>();
            string SourceName = "";
            string sGuid = "";
            try
            {
                string S = "select top 1 SourceName, SourceTypeCode, OriginalFileType from DataSource where RowGuid = '" + RowGuid + "'";
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                using (CONN)
                {
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    using (command)
                    using (rsData)
                    {
                        rsData = command.ExecuteReader();
                        if (rsData.HasRows)
                        {
                            rsData.Read();
                            SourceName = rsData.GetString(0);
                            SourceTypeCode = rsData.GetString(1);
                            OriginalFileType = rsData.GetString(2);
                            SourceName = Conversions.ToString(Operators.AddObject(Operators.AddObject(Operators.AddObject(SourceName + "|", SourceTypeCode), "|"), OriginalFileType));
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getSourceNameByGuid : 2174 : " + ex.Message);
            }

            return SourceName;
        }

        public void LoadEntryIdByUserID(ref SortedList L)
        {
            string S = "Select EmailIdentifier from email where UserID = '" + modGlobals.gCurrUserGuidID + "' ";
            L.Clear();
            CloseConn();
            CkConn();
            int I = 0;
            SqlDataReader RSData = null;
            RSData = SqlQryNewConn(S);
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string EmailIdentifier = RSData.GetValue(0).ToString();
                    I += 1;
                    if (I % 10 == 0)
                    {
                        My.MyProject.Forms.frmMain.SB.Text = "ID# " + I.ToString();
                        My.MyProject.Forms.frmMain.SB.Refresh();
                    }
                    // Dim II As Integer = L.IndexOfKey(EntryId)
                    if (!L.ContainsKey(EmailIdentifier))
                    {
                        L.Add(EmailIdentifier, I);
                    }
                    else if (ddebug)
                        Debug.Print("Dup found");
                    Application.DoEvents();
                }
            }
            else
            {
                L.Clear();
            }

            My.MyProject.Forms.frmMain.PB1.Value = 0;
            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            My.MyProject.Forms.frmMain.SB.Text = "";
        }

        public int getCountStoreIdByFolder()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int iCnt = 0;
            string S = "Select count(*) from email where Userid = '" + modGlobals.gCurrUserGuidID + "'";
            CloseConn();
            CkConn();
            int I = 0;
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            RSData = SqlQryNewConn(S);
            if (RSData is null)
            {
                return 0;
            }

            if (RSData.HasRows)
            {
                while (RSData.Read())
                    iCnt = RSData.GetInt32(0);
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            return iCnt;
        }

        public void getGroupUsers(string GroupName, ref ArrayList GroupList)
        {
            if (Strings.InStr(GroupName, "''") > 0)
            {
            }
            else
            {
                GroupName = UTIL.RemoveSingleQuotes(GroupName);
            }

            string S = "Select [UserID] FROM  [GroupUsers] where [GroupName] = '" + GroupName + "' ";
            CloseConn();
            CkConn();
            int I = 0;
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            RSData = SqlQryNewConn(S);
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string UserID = RSData.GetValue(0).ToString();
                    GroupList.Add(UserID);
                }
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            if (RSData is object)
            {
                RSData = null;
            }
        }

        public bool UpdateArchiveFlag(string ParentFolder, string UID, string aFlag, string FolderName)
        {
            bool b = false;
            string s = "";
            s = s + " update EmailFolder set ";
            s = s + "SelectedForArchive = '" + aFlag + "'" + " where UserID = '" + UID + "' and FolderName = '" + FolderName + "' and ParentFolderName = '" + ParentFolder + "' ";
            return ExecuteSqlNewConn(s, false);
        }

        public bool DeleteEmailArchiveFolder(string ParentFolder, string UID, string aFlag, string FolderName)
        {
            bool b = false;
            string s = "";
            string ConcatParName = ParentFolder + "|" + FolderName;
            s = s + " delete from EmailFolder ";
            // s = s + " where UserID = '" + UID + "' and FolderName = '" + FolderName + "' and ParentFolderName = '" + ParentFolder  + "' "
            s = s + " where UserID = '" + UID + "' and FolderName = '" + FolderName + "' ";
            return ExecuteSqlNewConn(s, false);
        }

        // Public Function getFolderNameById(ByVal FolderID ) As String
        // Dim b As Boolean = True
        // Dim S As String = ""
        // S = "Select [FolderName]      "
        // S = S + " FROM [EmailFolder]"
        // S = S + " where [FolderID] = '" + FolderID + "'"
        // Dim i As Integer = 0
        // Dim id  = ""

        // Dim rsData As SqlDataReader = Nothing

        // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
        // If rsData.HasRows Then
        // rsData.Read()
        // id = rsData.GetValue(0).ToString
        // Else
        // id = ""
        // End If
        // rsData.Close()
        // rsData = Nothing
        // Return id
        // End Function
        public string getParentFolderNameById(string FolderID)
        {
            bool b = true;
            string S = "";
            S = "Select [ParentFolderName]      ";
            S = S + " FROM [EmailFolder]";
            S = S + " where [FolderID] = '" + FolderID + "'";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public void getArchiveFolderIds(ref DataGridView DGV)
        {
            var SA = new SortedList<string, string>();
            try
            {
                bool b = true;
                string S = "";
                S = "Select FileDirectory, FolderName, FolderID, storeid from EmailFolder where SelectedForArchive = 'Y' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
                string cNames = "FileDirectory, FolderName, FolderID, storeid";
                var A = cNames.Split(',');
                var DGX = new clsDataGrid();
                DGX.PopulateDataGrid(S, ref DGV, ref A);
                DGX = null;
                int II = DGV.Rows.Count;
                LOG.WriteToArchiveLog("NOTICE: DGX Rowcount = " + II.ToString() + " : " + S);
                return;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getArchiveFolderIds 100 - : ", ex);
                SA = null;
            }

            DGV = null;
        }

        public bool RemoveGroupUser(string GroupName, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = true;
            var SqlList = new ArrayList();
            try
            {
                string S = " SELECT     GroupUsers.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID ";
                S = S + " FROM         GroupUsers INNER JOIN";
                S = S + "                       GroupLibraryAccess ON GroupUsers.GroupName = GroupLibraryAccess.GroupName";
                S = S + " where GroupUsers.groupName = '" + GroupName + "'";
                S = S + " and GroupUsers.UserID = '" + UserID + "'";
                S = S + " group by GroupUsers.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID ";
                string LibraryName = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        LibraryName = RSData.GetValue(1).ToString();
                        S = "delete from libraryusers where libraryname = '" + LibraryName + "' and UserID = '" + UserID + "'";
                        SqlList.Add(S);
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                for (int i = 0, loopTo = SqlList.Count - 1; i <= loopTo; i++)
                {
                    S = SqlList[i].ToString();
                    bool BB = ExecuteSqlNewConn(S, false);
                }

                SqlList.Clear();
                SqlList = null;
                GC.Collect();
                return B;
            }
            catch (Exception ex)
            {
                this.xTrace(23.456d, "getSourceGuidByFqn", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : RemoveGroupUser : 5704 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : RemoveGroupUser : 5697 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : RemoveGroupUser : 5716 : ", ex);
                return false;
            }
        }

        public string getGroupOwnerGuidByGroupName(string GroupName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (Strings.InStr(GroupName, "''") > 0)
            {
            }
            else
            {
                GroupName = UTIL.RemoveSingleQuotes(GroupName);
            }

            try
            {
                string S = "Select [GroupOwnerUserID] ,[GroupName] FROM  [UserGroup] where GroupName = '" + GroupName + "'";
                string SourceGuid = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SourceGuid = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                return SourceGuid;
            }
            catch (Exception ex)
            {
                xTrace(23456, "getSourceGuidByFqn", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getGroupOwnerGuidByGroupName : 5718 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getGroupOwnerGuidByGroupName : 5712 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getGroupOwnerGuidByGroupName : 5732 : ", ex);
                return null;
            }
        }

        public string getUserEmailAddrByUserID(string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select EmailAddress FROM Users where UserID = '" + UserID + "'";
                string SourceGuid = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SourceGuid = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                return SourceGuid;
            }
            catch (Exception ex)
            {
                xTrace(23, "getUserEmailAddrByUserID", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserEmailAddrByUserID : 5732 : ", ex);
                return "";
            }
        }

        public string getUserNameByEmailAddr(string EmailAddress)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select UserName FROM email where EmailAddress = '" + EmailAddress + "'";
                string SourceGuid = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SourceGuid = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                return SourceGuid;
            }
            catch (Exception ex)
            {
                xTrace(2334, "getUserNameByEmailAddr", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserNameByEmailAddr : 5746 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserNameByEmailAddr : 5742 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getUserNameByEmailAddr : 5764 : ", ex);
                return "";
            }
        }

        public void loadReassignHistory(string OldUid, string NewUid, ref ArrayList UserArray)
        {
            UserArray.Clear();
            string S = "  SELECT [UserID]";
            S = S + " ,[UserName]";
            S = S + " ,[EmailAddress]";
            S = S + " ,[UserPassword]";
            S = S + " ,[Admin]";
            S = S + " ,[isActive]";
            S = S + " ,[UserLoginID]";
            S = S + " from users WHERE (Users.UserID = '" + OldUid + "') ";
            string SourceGuid = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            int II = 0;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    string UserID = RSData.GetValue(0).ToString();
                    string UserName = RSData.GetValue(1).ToString();
                    string EmailAddress = RSData.GetValue(2).ToString();
                    string UserPassword = RSData.GetValue(3).ToString();
                    string Admin = RSData.GetValue(4).ToString();
                    string isActive = RSData.GetValue(5).ToString();
                    string UserLoginID = RSData.GetValue(6).ToString();
                    UserArray.Add(UserID);
                    UserArray.Add(UserName);
                    UserArray.Add(EmailAddress);
                    UserArray.Add(UserPassword);
                    UserArray.Add(Admin);
                    UserArray.Add(isActive);
                    UserArray.Add(UserLoginID);
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
            S = "  SELECT [UserID]";
            S = S + " ,[UserName]";
            S = S + " ,[EmailAddress]";
            S = S + " ,[UserPassword]";
            S = S + " ,[Admin]";
            S = S + " ,[isActive]";
            S = S + " ,[UserLoginID]";
            S = S + " from users WHERE Users.UserID = '" + NewUid + "' ";
            SourceGuid = "";
            CS = getRepoConnStr();
            CONN = new SqlConnection(CS);
            CONN.Open();
            command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            II = 0;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    string UserID = RSData.GetValue(0).ToString();
                    string UserName = RSData.GetValue(1).ToString();
                    string EmailAddress = RSData.GetValue(2).ToString();
                    string UserPassword = RSData.GetValue(3).ToString();
                    string Admin = RSData.GetValue(4).ToString();
                    string isActive = RSData.GetValue(5).ToString();
                    string UserLoginID = RSData.GetValue(6).ToString();
                    UserArray.Add(UserID);
                    UserArray.Add(UserName);
                    UserArray.Add(EmailAddress);
                    UserArray.Add(UserPassword);
                    UserArray.Add(Admin);
                    UserArray.Add(isActive);
                    UserArray.Add(UserLoginID);
                    Application.DoEvents();
                }
            }

            RSData.Close();
            RSData = null;
        }

        public string xGetXrt()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int iMax = GetMaxLicenseID();
            try
            {
                string S = "Select Agreement FROM  License where LicenseID = " + iMax.ToString();
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        tCnt = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                return tCnt;
            }
            catch (Exception ex)
            {
                xTrace(2334, "getUserNameByEmailAddr", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : xGetXrt : 5829 : ", ex);
                return "";
            }
        }

        // Function GetCurrMachineCnt() As Integer
        // Try
        // Dim S As String  = "Select count(*) FROM [Machine]"
        // Dim tCnt  = ""
        // Dim RSData As SqlDataReader = Nothing
        // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
        // If RSData.HasRows Then
        // RSData.Read()
        // tCnt  = RSData.GetValue(0).ToString
        // Application.DoEvents()
        // Else
        // tCnt = 0
        // End If

        // RSData.Close() RSData = Nothing

        // Return cint(tCnt )
        // Catch ex As Exception
        // Me.xTrace(2334, "getUserNameByEmailAddr" , ex.Message.ToString)
        // Return -1
        // End Try
        // End Function

        // SELECT max([LicenseID]) FROM  [License]
        public int GetMaxLicenseID()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tCnt = "";
            try
            {
                string S = "Select max([LicenseID]) FROM [License]";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tCnt = "0";
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                xTrace(2334, "getUserNameByEmailAddr", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetMaxLicenseID : 5844 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetMaxLicenseID : 5842 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetMaxLicenseID : 5866 : ", ex);
                tCnt = "-1";
            }

            return Conversions.ToInteger(tCnt);
        }

        public bool LicenseExists()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = false;
            string CS = "";
            CS = getRepoConnStr();
            try
            {
                CloseConn();
                CkConn();
                string s = "Select count(*) from License ";
                int Cnt;
                SqlDataReader rsData = null;
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(s, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                Cnt = rsData.GetInt32(0);
                if (Cnt > 0)
                {
                    b = true;
                }
                else
                {
                    b = false;
                }

                rsData.Close();
                rsData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: LicenseExists - ", ex);
                string Msg = "License validation error:" + Constants.vbCrLf;
                Msg += "A license could not be found for the product." + Constants.vbCrLf;
                Msg += ex.Message + Constants.vbCrLf;
                Msg += CS + Constants.vbCrLf + Constants.vbCrLf;
                Msg += "This message is on the clipboard if needed for debug.";
                MessageBox.Show(Msg);
                Clipboard.Clear();
                Clipboard.SetText(Msg);
                b = false;
            }

            return b;
        }

        public void getLicenseLastVersion()
        {
        }

        public string GetXrt(string CustomerName, string CustomerID, int dDebug = 0)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (modGlobals.gLicense.Length > 0)
            {
                return modGlobals.gLicense;
            }

            string S = "Select [License] from [dbo].[License] where CustomerID = '" + CustomerID + "' ";
            try
            {
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getLicenseConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        S = RSData.GetValue(0).ToString();
                        Application.DoEvents();
                    }
                }

                RSData.Close();
                RSData = null;
                modGlobals.gLicense = S;
                return S;
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetXrt", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetXrt : 5874 : ", ex);
                S = "";
                return S;
            }
        }

        public int GetCurrMachineCnt()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select count(*) FROM [Machine]";
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tCnt = 0.ToString();
                }

                RSData.Close();
                RSData = null;
                return Conversions.ToInteger(tCnt);
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetCurrMachineCnt", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetCurrMachineCnt : 5889 : ", ex);
                return -1;
            }
        }

        public int GetNbrUsers()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select count(*) from Users ";
                int tCnt;
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetInt32(0);
                    tCnt = tCnt - 1;
                    Application.DoEvents();
                }
                else
                {
                    tCnt = 0;
                }

                RSData.Close();
                RSData = null;
                return tCnt;
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetNbrMachine", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetNbrMachine : 5904 : ", ex);
                return -1;
            }
        }

        public int GetNbrMachine()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select count(*) from MachineRegistered ";
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tCnt = 0.ToString();
                }

                RSData.Close();
                RSData = null;
                return Conversions.ToInteger(tCnt);
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetNbrMachine", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetNbrMachine : 5904 : ", ex);
                return -1;
            }
        }

        public int GetNbrMachine(string MachineName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select COUNT(Distinct MachineName) from machine ";
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tCnt = 0.ToString();
                }

                RSData.Close();
                RSData = null;
                return Conversions.ToInteger(tCnt);
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetNbrMachine", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetNbrMachine : 5904 : ", ex);
                return -1;
            }
        }

        public int GetCurrUserCnt()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select count(*) FROM [Users]";
                string tCnt = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tCnt = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tCnt = 0.ToString();
                }

                RSData.Close();
                RSData = null;
                return Conversions.ToInteger(tCnt);
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetCurrUserCnt", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetCurrUserCnt : 5904 : ", ex);
                return -1;
            }
        }

        public bool saveLicenseCutAndPaste(string LS, string CustomerID, string MachineID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from License where CustomerID = '" + CustomerID + "' and MachineID = '" + MachineID + "' ";
            int iCnt = iCount(S);
            string sLic = "";
            if (iCnt == 0)
            {
                sLic = sLic + "INSERT INTO [License]";
                sLic = sLic + "([Agreement]";
                sLic = sLic + ",[VersionNbr]";
                sLic = sLic + ",[ActivationDate]";
                sLic = sLic + ",[InstallDate]";
                sLic = sLic + ",[CustomerID]";
                sLic = sLic + ",[CustomerName]";
                sLic = sLic + ",[XrtNxr1], MachineID)";
                sLic = sLic + "VALUES ";
                sLic = sLic + "('" + LS + "'";
                sLic = sLic + ",1";
                sLic = sLic + ",GETDATE()";
                sLic = sLic + ",GETDATE()";
                sLic = sLic + ",'" + CustomerID + "'";
                sLic = sLic + ",'XX'";
                sLic = sLic + ",'XX', '" + MachineID + "')";
            }
            else
            {
                sLic = sLic + " Update [License] ";
                sLic = sLic + " set [Agreement] = '" + LS + "' ";
                sLic = sLic + " where CustomerID = '" + CustomerID + "' and MachineID = '" + MachineID + "' ";
            }

            bool B = false;
            B = ExecuteSqlNewConn(sLic, false);
            if (!B)
            {
                Clipboard.Clear();
                Clipboard.SetText(sLic);
                MessageBox.Show("The License did not APPLY - check the error log. Error 66.527 loading License Failed.");
            }

            return B;
        }

        public string GetProfileDesc(string ProfileName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                string S = "Select [ProfileDesc] FROM [LoadProfile] where [ProfileName] ='" + ProfileName + "'";
                string tVal = "";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tVal = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tVal = "";
                }

                RSData.Close();
                RSData = null;
                return tVal;
            }
            catch (Exception ex)
            {
                xTrace(2334, "GetCurrUserCnt", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetProfileDesc : 5942 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetProfileDesc : 5945 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : GetProfileDesc : 5974 : ", ex);
                return "";
            }
        }

        public string getAttributeDataType(string AttributeName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tVal = "";
            string S = "Select AttributeDataType FROM [Attributes] where AttributeName = '" + AttributeName + "'";
            try
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tVal = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tVal = "";
                }

                RSData.Close();
                RSData = null;
                return tVal;
            }
            catch (Exception ex)
            {
                xTrace(2334, "getAttributeDataType", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getAttributeDataType : 5957 : ", ex);
                return "";
            }
        }

        public string getAttributeAllowedValues(string AttributeName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string tVal = "";
            string S = "Select AllowedValues FROM [Attributes] where AttributeName = '" + AttributeName + "'";
            try
            {
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tVal = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tVal = "";
                }

                RSData.Close();
                RSData = null;
                return tVal;
            }
            catch (Exception ex)
            {
                xTrace(2334, "getAttributeDataType", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getAttributeDataType : 5957 : ", ex);
                return "";
            }
        }

        public bool QuotesRequired(string DataType)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            DataType = Strings.UCase(DataType);
            switch (DataType ?? "")
            {
                case "INT":
                    {
                        return false;
                    }

                case "DATETIME":
                    {
                        return true;
                    }

                case "DECIMAL":
                    {
                        return false;
                    }

                case "FLOAT":
                    {
                        return false;
                    }

                case "VARCHAR":
                    {
                        return true;
                    }

                case "NVARCHAR":
                    {
                        return true;
                    }

                case "CHAR":
                    {
                        return true;
                    }

                case "NCHAR":
                    {
                        return true;
                    }

                default:
                    {
                        B = true;
                        break;
                    }
            }

            return B;
        }

        public double getDataSourceImageLength(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select max(datalength(SourceImage)) from DataSource where SourceGuid = '" + SourceGuid + "'";
            string tVal = "";
            var NewCN = new SqlConnection(getRepoConnStr());
            if (NewCN.State == ConnectionState.Closed)
            {
                NewCN.Open();
            }

            try
            {
                SqlDataReader RSData = null;
                RSData = SqlQry(S, NewCN);
                if (RSData.HasRows)
                {
                    RSData.Read();
                    tVal = RSData.GetValue(0).ToString();
                    Application.DoEvents();
                }
                else
                {
                    tVal = "0";
                }

                RSData.Close();
                RSData = null;
                NewCN.Close();
                NewCN = null;
                return Conversions.ToInteger(tVal);
            }
            catch (Exception ex)
            {
                xTrace(2334, "getDataSourceImageLength", ex.Message.ToString());
                LOG.WriteToArchiveLog("clsDatabaseARCH : getDataSourceImageLength : 5992 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getDataSourceImageLength : 5997 : ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH : getDataSourceImageLength : 6028 : ", ex);
                return 0d;
            }
        }

        public void UpdateCurrArchiveStats(string FQN, string SourceTypeCode)
        {
            if (modGlobals.gCurrentArchiveGuid.Trim().Length == 0)
                modGlobals.gCurrentArchiveGuid = Guid.NewGuid().ToString();
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var ARCHHIST = new clsARCHIVEHIST();
            var ARCHHISTTYPE = new clsARCHIVEHISTCONTENTTYPE();
            if (SourceTypeCode.Equals("MSG"))
            {
                if (ddebug)
                    Debug.Print("Processing Folder: " + FQN);
            }
            else if (SourceTypeCode.Equals("EML"))
            {
                if (ddebug)
                    Debug.Print("Processing Folder: " + FQN);
            }
            else
            {
                FQN = DMA.GetFilePath(FQN);
                FQN = UTIL.RemoveSingleQuotes(FQN);
            }

            int iCnt = ARCHHIST.cnt_PK110(modGlobals.gCurrentArchiveGuid);
            if (iCnt == 0)
            {
                ARCHHIST.setUserguid(ref modGlobals.gCurrUserGuidID);
                ARCHHIST.setArchivedate(ref DateAndTime.Now.ToString());
                ARCHHIST.setArchiveid(ref modGlobals.gCurrentArchiveGuid);
                string argval = 1.ToString();
                ARCHHIST.setNbrfilesarchived(ref argval);
                bool BBB = ARCHHIST.Insert();
                if (!BBB)
                {
                    if (ddebug)
                        Debug.Print("Error 22.921.3: Failed to update current archive data.");
                }
                else
                {
                    iCnt = ARCHHISTTYPE.cnt_PK111(modGlobals.gCurrentArchiveGuid, FQN, SourceTypeCode);
                    if (iCnt == 0)
                    {
                        ARCHHISTTYPE.setArchiveid(ref modGlobals.gCurrentArchiveGuid);
                        ARCHHISTTYPE.setDirectory(ref FQN);
                        ARCHHISTTYPE.setFiletype(ref SourceTypeCode);
                        string argval1 = 1.ToString();
                        ARCHHISTTYPE.setNbrfilesarchived(ref argval1);
                        bool BBBB = ARCHHISTTYPE.Insert();
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3d: Failed to update current archive data.");
                        }
                    }
                    else
                    {
                        string SS = "UPDATE [ArchiveHistContentType] SET ";
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1";
                        SS = SS + " WHERE [ArchiveID] = '" + modGlobals.gCurrentArchiveGuid + "'";
                        SS = SS + " and [Directory] = '" + FQN + "'";
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'";
                        bool BBBB = ExecuteSqlNewConn(SS, false);
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                        }
                    }
                }
            }
            else
            {
                string SS = "Update ArchiveHist set NbrFilesArchived = NbrFilesArchived + 1 where ArchiveID = '" + modGlobals.gCurrentArchiveGuid + "'";
                bool BBB = ExecuteSqlNewConn(SS, false);
                if (!BBB)
                {
                    if (ddebug)
                        Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                }
                else
                {
                    iCnt = ARCHHISTTYPE.cnt_PK111(modGlobals.gCurrentArchiveGuid, FQN, SourceTypeCode);
                    if (iCnt == 0)
                    {
                        ARCHHISTTYPE.setArchiveid(ref modGlobals.gCurrentArchiveGuid);
                        ARCHHISTTYPE.setDirectory(ref FQN);
                        ARCHHISTTYPE.setFiletype(ref SourceTypeCode);
                        string argval2 = 1.ToString();
                        ARCHHISTTYPE.setNbrfilesarchived(ref argval2);
                        bool BBBB = ARCHHISTTYPE.Insert();
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3d: Failed to update current archive data.");
                        }
                    }
                    else
                    {
                        SS = "UPDATE [ArchiveHistContentType] SET";
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1";
                        SS = SS + " WHERE [ArchiveID] = '" + modGlobals.gCurrentArchiveGuid + "'";
                        SS = SS + " and [Directory] = '" + FQN + "'";
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'";
                        bool BBBB = ExecuteSqlNewConn(SS, false);
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                        }
                    }
                }
            }
        }

        public void UpdateCurrArchiveStats(string FQN, string SourceTypeCode, string ArchiveGuid)
        {
            if (modGlobals.gCurrentArchiveGuid.Trim().Length == 0)
                modGlobals.gCurrentArchiveGuid = Guid.NewGuid().ToString();
            FQN = UTIL.RemoveSingleQuotes(FQN);
            var ARCHHIST = new clsARCHIVEHIST();
            var ARCHHISTTYPE = new clsARCHIVEHISTCONTENTTYPE();
            if (SourceTypeCode.Equals("MSG"))
            {
                if (ddebug)
                    Debug.Print("Processing Folder: " + FQN);
            }
            else if (SourceTypeCode.Equals("EML"))
            {
                if (ddebug)
                    Debug.Print("Processing Folder: " + FQN);
            }
            else
            {
                FQN = DMA.GetFilePath(FQN);
                FQN = UTIL.RemoveSingleQuotes(FQN);
            }

            int iCnt = ARCHHIST.cnt_PK110(ArchiveGuid);
            if (iCnt == 0)
            {
                ARCHHIST.setUserguid(ref modGlobals.gCurrUserGuidID);
                ARCHHIST.setArchivedate(ref DateAndTime.Now.ToString());
                ARCHHIST.setArchiveid(ref ArchiveGuid);
                string argval = 1.ToString();
                ARCHHIST.setNbrfilesarchived(ref argval);
                bool BBB = ARCHHIST.Insert();
                if (!BBB)
                {
                    if (ddebug)
                        Debug.Print("Error 22.921.3: Failed to update current archive data.");
                }
                else
                {
                    iCnt = ARCHHISTTYPE.cnt_PK111(ArchiveGuid, FQN, SourceTypeCode);
                    if (iCnt == 0)
                    {
                        ARCHHISTTYPE.setArchiveid(ref ArchiveGuid);
                        ARCHHISTTYPE.setDirectory(ref FQN);
                        ARCHHISTTYPE.setFiletype(ref SourceTypeCode);
                        string argval1 = 1.ToString();
                        ARCHHISTTYPE.setNbrfilesarchived(ref argval1);
                        bool BBBB = ARCHHISTTYPE.Insert();
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3d: Failed to update current archive data.");
                        }
                    }
                    else
                    {
                        string SS = "UPDATE [ArchiveHistContentType] SET ";
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1";
                        SS = SS + " WHERE [ArchiveID] = '" + ArchiveGuid + "'";
                        SS = SS + " and [Directory] = '" + FQN + "'";
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'";
                        bool BBBB = ExecuteSqlNewConn(SS, false);
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                        }
                    }
                }
            }
            else
            {
                string SS = "Update ArchiveHist set NbrFilesArchived = NbrFilesArchived + 1 where ArchiveID = '" + ArchiveGuid + "'";
                bool BBB = ExecuteSqlNewConn(SS, false);
                if (!BBB)
                {
                    if (ddebug)
                        Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                }
                else
                {
                    iCnt = ARCHHISTTYPE.cnt_PK111(ArchiveGuid, FQN, SourceTypeCode);
                    if (iCnt == 0)
                    {
                        ARCHHISTTYPE.setArchiveid(ref ArchiveGuid);
                        ARCHHISTTYPE.setDirectory(ref FQN);
                        ARCHHISTTYPE.setFiletype(ref SourceTypeCode);
                        string argval2 = 1.ToString();
                        ARCHHISTTYPE.setNbrfilesarchived(ref argval2);
                        bool BBBB = ARCHHISTTYPE.Insert();
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3d: Failed to update current archive data.");
                        }
                    }
                    else
                    {
                        SS = "UPDATE [ArchiveHistContentType] SET";
                        SS = SS + " NbrFilesArchived = NbrFilesArchived + 1";
                        SS = SS + " WHERE [ArchiveID] = '" + ArchiveGuid + "'";
                        SS = SS + " and [Directory] = '" + FQN + "'";
                        SS = SS + " and [FileType] = '" + SourceTypeCode + "'";
                        bool BBBB = ExecuteSqlNewConn(SS, false);
                        if (!BBBB)
                        {
                            if (ddebug)
                                Debug.Print("Error 22.921.3b: Failed to update current archive data.");
                        }
                    }
                }
            }
        }

        /// <summary>
    /// Now, we can get this data... So what, how do we pass it all back?
    /// </summary>
    /// <param name="frm">     </param>
    /// <param name="fControl"></param>
    /// <remarks></remarks>
        public void getFormHelpData(string FormName, ref SortedList<string, string> slFormHelp)
        {
            try
            {
                slFormHelp.Clear();
                string S = "";
                S = S + " SELECT [ScreenName]";
                S = S + " ,[HelpText]";
                S = S + " ,[WidgetName]";
                S = S + " FROM [HelpText]";
                S = S + " where ScreenName = '" + FormName + "' ";
                S = S + " and [DisplayHelpText] <> 0 ";
                bool b = true;
                int i = 0;
                int id = -1;
                int II = 0;
                string table_name = "";
                string column_name = "";
                string data_type = "";
                string character_maximum_length = "";
                string ScreenName = "";
                string HelpText = "";
                string WidgetName = "";
                string tKey = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        ScreenName = RSData.GetValue(0).ToString();
                        HelpText = RSData.GetValue(1).ToString();
                        WidgetName = RSData.GetValue(2).ToString();
                        tKey = ScreenName + "," + WidgetName;
                        b = slFormHelp.ContainsKey(tKey);
                        if (b == false)
                        {
                            slFormHelp.Add(tKey, HelpText);
                        }
                    }
                }
                else
                {
                    id = -1;
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getFormHelpData : 6102 : ", ex);
            }
        }

        public void getFormTooltips(ref Form frm, ref ToolTip TT, bool setActive)
        {
            var HELP = new clsHELPTEXT();
            var slFormHelp = new SortedList<string, string>();
            string FormName = frm.Name;
            string WidgetName = "";
            string lsTmp = "";
            var A = new ArrayList();
            string SS = "";
            string ctlText = "";
            string ControlType = "";
            string HelpText = "";
            getFormHelpData(FormName, ref slFormHelp);
            foreach (Control loControl in frm.Controls)
            {
                ctlText = loControl.Text;
                WidgetName = loControl.Name;
                string tKey = FormName + "," + WidgetName;
                if (slFormHelp.ContainsKey(tKey))
                {
                    // ** Great - now what ??
                    int iDx = slFormHelp.IndexOfKey(tKey);
                    HelpText = slFormHelp.Values[iDx];
                    TT.SetToolTip(loControl, HelpText);
                    TT.Active = setActive;
                }
            }
        }

        public void MarkImageCopyForDeletion(string fqn)
        {
            fqn = UTIL.RemoveSingleQuotes(fqn);
            bool B = false;
            var FTD = new clsFILESTODELETE();
            string mName = DMA.GetCurrMachineName();
            FTD.setFqn(ref fqn);
            FTD.setMachinename(ref mName);
            string argval = "Y";
            FTD.setPendingdelete(ref argval);
            FTD.setUserid(ref modGlobals.gCurrUserGuidID);
            int iCnt = FTD.cnt_PK_FileToDelete(fqn, mName, modGlobals.gCurrUserGuidID);
            if (iCnt > 0)
            {
                string WC = FTD.wc_PK_FileToDelete(fqn, mName, modGlobals.gCurrUserGuidID);
                B = FTD.Update(WC);
            }
            else
            {
                B = FTD.Insert();
            }

            if (!B)
            {
                if (ddebug)
                    Debug.Print("Error on OCR 12.99.1");
                // If gRunUnattended = False Then MessageBox.Show("Error on OCR 12.99.1")
                LOG.WriteToArchiveLog("Error on OCR 12.99.1 - " + fqn);
            }

            FTD = null;
            GC.Collect();
        }

        public void DeleteMarkedImageCopyFiles()
        {
            var FileToDelete = new ArrayList();
            SqlDataReader rsData = null;
            string mName = DMA.GetCurrMachineName();
            string FQN = "";
            string S = "";

            // ** S = S + " SELECT [UserID],[MachineName],[FQN],[PendingDelete]"
            S = S + " SELECT [FQN] ";
            S = S + " FROM [FilesToDelete] ";
            S = S + " where MachineName = '" + mName + "'";
            try
            {
                bool b = true;
                int i = 0;
                string FileType = "";
                int II = 0;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        Application.DoEvents();
                        b = true;
                        FQN = rsData.GetValue(0).ToString();
                        FileToDelete.Add(FQN);
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteMarkedImageCopyFiles : 6168 : ", ex);
            }

            if (rsData is object)
            {
                rsData.Close();
                rsData = null;
            }

            try
            {
                for (int i = 0, loopTo = FileToDelete.Count - 1; i <= loopTo; i++)
                {
                    Application.DoEvents();
                    FQN = FileToDelete[i].ToString();
                    var F = new FileInfo(FQN);
                    if (F.Exists)
                    {
                        try
                        {
                            F.Delete();
                        }
                        catch (Exception ex)
                        {
                            LOG.WriteToArchiveLog("NOTICE: DeleteMarkedImageCopyFiles : 6180.01 : ", ex);
                        }
                    }

                    F = null;
                    GC.Collect();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : DeleteMarkedImageCopyFiles : 6180 : ", ex);
            }

            GC.Collect();
            S = "Delete from FilesToDelete where MachineName = '" + mName + "'";
            bool BB = ExecuteSqlNewConn(S, false);
            if (!BB)
            {
                if (ddebug)
                    Debug.Print("Error Here");
            }
        }

        public void SetOcrAttributesToPass(string SourceGuid)
        {
            string S = "update DataSource set OcrPerformed = 'Y', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void SetOcrAttributesToFail(string SourceGuid)
        {
            string S = "update DataSource set OcrPerformed = 'F', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void SetOcrAttributesToNotPerformed(string SourceGuid)
        {
            string S = "update DataSource set OcrPerformed = 'N', isGraphic = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        // GraphicContainsText
        public void SetImageHiddenText(string SourceGuid, string ImageHiddenText)
        {
            ImageHiddenText = UTIL.RemoveSingleQuotes(ImageHiddenText);
            string S = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }

            S = "update DataSource set ImageHiddenText = '" + ImageHiddenText + "' where SourceGuid = '" + SourceGuid + "'";
            b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void AppendImageHiddenText(string SourceGuid, string ImageHiddenText)
        {
            ImageHiddenText = UTIL.RemoveSingleQuotes(ImageHiddenText);
            string S = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }

            S = "update DataSource set ImageHiddenText = ImageHiddenText + '|' + '" + ImageHiddenText + "' where SourceGuid = '" + SourceGuid + "'";
            b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void AppendOcrText(string SourceGuid, string OcrText)
        {
            var DTE = DateAndTime.Now;
            LOG.WriteToTimerLog("clsDatabaseARCH", "AppendOcrText", "START");
            string ExistingOcrText = getOcrText(ref SourceGuid, "DOC", "");
            ExistingOcrText = ExistingOcrText + " " + OcrText;
            OcrText = UTIL.RemoveSingleQuotes(ExistingOcrText);
            string S = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }

            BlankOutSingleQuotes(ref OcrText);
            S = "update DataSource set OcrText = '" + OcrText + "' where SourceGuid = '" + SourceGuid + "'";
            b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR text");
            }

            LOG.WriteToTimerLog("clsDatabaseARCH", "AppendOcrText", "END", DTE);
        }

        public void AppendEmailOcrText(string EmailGuid, string OcrText, string AttachmentName)
        {
            AttachmentName = AttachmentName.Replace("'", "''");
            string ExistingOcrText = getOcrText(ref EmailGuid, "EMAIL", AttachmentName);
            ExistingOcrText = ExistingOcrText + " " + OcrText;
            OcrText = UTIL.RemoveSingleQuotes(ExistingOcrText);
            BlankOutSingleQuotes(ref OcrText);
            string S = "update EmailAttachment set OcrText = '" + OcrText + "' where EmailGuid = '" + EmailGuid + "' and AttachmentName = '" + AttachmentName + "' ";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void BlankOutSingleQuotes(ref string sText)
        {
            for (int i = 1, loopTo = sText.Length; i <= loopTo; i++)
            {
                string CH = Strings.Mid(sText, i, 1);
                if (CH.Equals("'"))
                {
                    StringType.MidStmtStr(ref sText, i, 1, "`");
                }
            }
        }

        public void SetEmailOcrText(string EmailGuid, string OcrText, string AttachmentName)
        {
            AttachmentName = AttachmentName.Replace("'", "''");
            try
            {
                UTIL.CleanText(ref OcrText);
                OcrText = UTIL.ReplaceSingleQuotes(OcrText);
                BlankOutSingleQuotes(ref OcrText);
                string S = "update EmailAttachment set OcrText = '" + OcrText.Trim() + "' where EmailGuid = '" + EmailGuid + "' and AttachmentName = '" + AttachmentName + "'";
                bool b = ExecuteSqlNewConn(S, false);
                if (!b)
                {
                    LOG.WriteToArchiveLog("ERROR: SetEmailOcrText 100 Failed to set Email OCR Attributes");
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: SetEmailOcrText 200 Failed to set Email OCR Attributes");
            }
        }

        public void concatEmailBody(string BodyText, string EmailGuid)
        {
            try
            {
                BodyText = BodyText + GetEmailBody(EmailGuid);
                UTIL.CleanText(ref BodyText);
                BodyText = BodyText.Replace("'", "`");
                string S = "update Email " + Constants.vbCrLf;
                S += "set Body = '" + BodyText + "'" + Constants.vbCrLf;
                S += " where EmailGuid = '" + EmailGuid + "'";
                bool b = ExecuteSqlNewConn(90107, S);
                if (!b)
                {
                    LOG.WriteToArchiveLog("ERROR: concatEmailBody 100 Failed to set Email body");
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: concatEmailBody 200 Failed to set Email body");
            }
        }

        public void UpdateAttachmentCounts()
        {
            string S = "update Email ";
            S = S + " set NbrAttachments = (select count(*) from EmailAttachment where Email.EmailGuid = EmailAttachment.EmailGuid)";
            // S = S + " WHERE NbrAttachments Is NULL "
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("NOTICE: Failed to update the Attachment counts for Emails." + Constants.vbCrLf + S);
            }
        }

        public void UserParmUpdate(string ParmName, string UserID, string ParmVal)
        {
            int iCnt = UserParmExists(ParmName, UserID);
            if (iCnt == 0)
            {
                return;
            }

            ParmName = UTIL.RemoveSingleQuotes(ParmName);
            ParmVal = UTIL.RemoveSingleQuotes(ParmVal);
            // ParmName = UTIL.RemoveSingleQuotes(ParmName)

            string S = "UPDATE [UserCurrParm]";
            S = S + " SET ParmVal = '" + ParmVal + "'";
            S = S + " where UserID = '" + UserID + "'";
            S = S + " and ParmName = '" + ParmName + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                MessageBox.Show("UserParmUpdate failed.");
            }
        }

        public void UserParmDelete(string ParmName, string UserID)
        {
            int iCnt = UserParmExists(ParmName, UserID);
            if (iCnt == 0)
            {
                return;
            }

            ParmName = UTIL.RemoveSingleQuotes(ParmName);
            // ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            // ParmName = UTIL.RemoveSingleQuotes(ParmName)

            string S = "delete from [UserCurrParm]";
            S = S + " where UserID = '" + UserID + "'";
            S = S + " and ParmName = '" + ParmName + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                MessageBox.Show("UserParmDelete Failed.");
            }
        }

        public ArrayList GetActiveEmailFolders(string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var A = new ArrayList();
            string S = "Select distinct foldername from EmailArchParms where UserID = '" + UserID + "'";
            SqlDataReader RSData = null;
            string foldername = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        foldername = RSData.GetValue(0).ToString();
                        if (!A.Contains(foldername))
                        {
                            A.Add(foldername);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1a - ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString());
            }

            RSData.Close();
            RSData = null;
            return A;
        }

        public bool ValidateCurrUserPW(string EncPW)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from Users where UserID = '" + modGlobals.gCurrUserGuidID + "' and UserPassword = '" + EncPW + "' ";
            SqlDataReader RSData = null;
            string foldername = "";
            bool B = false;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    int i = RSData.GetInt32(0);
                    if (i == 1)
                    {
                        B = true;
                    }
                    else
                    {
                        B = false;
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1a - ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString());
            }

            RSData.Close();
            RSData = null;
            GC.Collect();
            return B;
        }

        public string GetEmailRetentionCode(string FolderName, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FolderName = UTIL.RemoveSingleQuotes(FolderName);
            string S = "";
            S = S + "Select RetentionCode from EmailFolder ";
            S = S + "where FolderName = '" + FolderName + "' ";
            S = S + "and UserID = '" + UserID + "'";
            SqlDataReader RSData = null;
            string rCode = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        rCode = RSData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1a - ", ex);
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetActiveEmailFolders 300.23.1b - " + ex.StackTrace.ToString());
            }

            RSData.Close();
            RSData = null;
            return rCode;
        }

        public void UserParmInsert(string ParmName, string UserID, string ParmVal)
        {
            int iCnt = UserParmExists(ParmName, UserID);
            if (iCnt > 0)
            {
                return;
            }

            ParmVal = UTIL.RemoveSingleQuotes(ParmVal);
            string S = "INSERT INTO [UserCurrParm]";
            S = S + " ([UserID]";
            S = S + " ,[ParmName]";
            S = S + " ,[ParmVal])";
            S = S + " VALUES ";
            S = S + " ('" + UserID + "',";
            S = S + " '" + ParmName + "',";
            S = S + "'" + ParmVal + "')";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                MessageBox.Show("Failed UserParmInsert " + S);
            }
        }

        public void UserParmInsertUpdate(string ParmName, string UserID, string ParmVal)
        {
            int iCnt = UserParmExists(ParmName, UserID);
            if (iCnt > 0)
            {
                UserParmUpdate(ParmName, UserID, ParmVal);
                return;
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ParmVal = UTIL.RemoveSingleQuotes(ParmVal);
            string S = "INSERT INTO [UserCurrParm]";
            S = S + " ([UserID]";
            S = S + " ,[ParmName]";
            S = S + " ,[ParmVal])";
            S = S + " VALUES ";
            S = S + " ('" + UserID + "',";
            S = S + " '" + ParmName + "',";
            S = S + "'" + ParmVal + "')";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                MessageBox.Show("Failed UserParmInsert " + S);
            }
        }

        public int iSelectCount(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public int UserParmExists(string ParmName, string UserID)
        {
            string S = "";
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ParmName = UTIL.RemoveSingleQuotes(ParmName);
            // ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            // ParmName = UTIL.RemoveSingleQuotes(ParmName)

            S = S + " SELECT count(*)";
            S = S + " FROM [UserCurrParm]";
            S = S + " where UserID = '" + UserID + "'";
            S = S + " and ParmName = '" + ParmName + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public string UserParmRetrive(string ParmName, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            int iCnt = UserParmExists(ParmName, UserID);
            if (iCnt == 0)
            {
                return "";
            }

            ParmName = UTIL.RemoveSingleQuotes(ParmName);
            // ParmVal = UTIL.RemoveSingleQuotes(ParmVal)
            // ParmName = UTIL.RemoveSingleQuotes(ParmName)

            S = S + " SELECT [ParmVal]";
            S = S + " FROM [UserCurrParm]";
            S = S + " where UserID = '" + UserID + "'";
            S = S + " and ParmName = '" + ParmName + "'";
            CloseConn();
            CkConn();
            string sVal = "";
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                try
                {
                    if (!RSData.IsDBNull(0))
                    {
                        sVal = RSData.GetString(0);
                    }
                    else
                    {
                        sVal = "";
                    }
                }
                catch (Exception ex)
                {
                    xTrace(27000, "UserParmRetrive", ex.Message.ToString());
                    sVal = "";
                    LOG.WriteToArchiveLog("clsDatabaseARCH : UserParmRetrive : 6331 : ", ex);
                }

                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return sVal;
        }

        public string getHelpConnStr()
        {
            bool bUseConfig = true;
            string HelpConnStr = "";
            HelpConnStr = System.Configuration.ConfigurationManager.AppSettings["HELP.DBARCH"];
            return HelpConnStr;
        }

        public void LoadUserSearchHistory(int MaxNbrSearches, string Uid, string Screen, ref ArrayList SearchHistoryArrayList, ref int NbrReturned)
        {
            try
            {
                NbrReturned = 0;
                SearchHistoryArrayList.Clear();
                int EntryID = -1;
                string QryParms = "";
                string S = "";
                S = S + " SELECT top " + MaxNbrSearches.ToString() + " [EntryID], QryParms ";
                S = S + " FROM [SearhParmsHistory] ";
                S = S + " where [UserID] = '" + Uid + "' ";
                S = S + " and Screen = '" + Screen + "'";
                S = S + " order by [EntryID] DESC ";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        NbrReturned += 1;
                        EntryID = RSData.GetInt32(0);
                        QryParms = RSData.GetValue(1).ToString();
                        SearchHistoryArrayList.Add(QryParms);
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("NOTICE: clsDatabaseARCH:LoadUserSearchHistory - Failed to load search history.");
            }
        }

        public void LimitToExistingRecs(DataGridView DGV, string UIDCellName, string GuidCellName, ref ProgressBar PB, bool DeleteAll)
        {
            var ASG = new clsACTIVESEARCHGUIDS();
            if (DeleteAll == true)
            {
                string S = "delete FROM ActiveSearchGuids where  UserID = '" + modGlobals.gCurrUserGuidID + "'";
                bool B = ExecuteSqlNewConn(S, false);
            }

            int iRec = 0;
            PB.Value = 0;
            PB.Maximum = DGV.Rows.Count + 1;
            int iCnt = 0;
            foreach (DataGridViewRow DR in DGV.Rows)
            {
                try
                {
                    iCnt += 1;
                    PB.Value = iCnt;
                    PB.Refresh();
                    Application.DoEvents();
                    string TgtGuid = DR.Cells[GuidCellName].Value.ToString();
                    string TgtUserID = DR.Cells[UIDCellName].Value.ToString();
                    ASG.setDocguid(ref TgtGuid);
                    ASG.setUserid(ref TgtUserID);
                    bool BB = ASG.Insert();
                    if (BB)
                    {
                        if (ddebug)
                            LOG.WriteToTraceLog("clsDatabaseARCH:LimitingToExistingRecs SUCCESSFUL");
                    }
                    else if (ddebug)
                        LOG.WriteToTraceLog("clsDatabaseARCH:LimitingToExistingRecs FAILED '" + TgtGuid + "'");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }

            PB.Value = 0;
            ASG = null;
        }

        public void LimitToExistingRecs(List<string> CurrentGuids)
        {
            var ASG = new clsACTIVESEARCHGUIDS();
            string S = "delete FROM ActiveSearchGuids where  UserID = '" + modGlobals.gCurrUserGuidID + "'";
            bool B = ExecuteSqlNewConn(S, false);
            int iRec = 0;
            int iCnt = 0;
            var loopTo = CurrentGuids.Count - 1;
            for (iCnt = 0; iCnt <= loopTo; iCnt++)
            {
                try
                {
                    Application.DoEvents();
                    string TgtGuid = CurrentGuids[iCnt];
                    string TgtUserID = modGlobals.gCurrUserGuidID;
                    ASG.setDocguid(ref TgtGuid);
                    ASG.setUserid(ref TgtUserID);
                    bool BB = ASG.Insert();
                    if (BB)
                    {
                        if (ddebug)
                            LOG.WriteToTraceLog("clsDatabaseARCH:LimitingToExistingRecs SUCCESSFUL");
                    }
                    else if (ddebug)
                        LOG.WriteToTraceLog("clsDatabaseARCH:LimitingToExistingRecs FAILED '" + TgtGuid + "'");
                }
                catch (Exception ex)
                {
                    Console.WriteLine(ex.Message);
                }
            }

            ASG = null;
        }

        public string getDefaultThesaurus()
        {
            // Dim EcmLibConnectionString As String = ""

            string DefaultThesaurus = "";
            string s = "";
            CloseConn();
            CkConn();
            try
            {
                string tQuery = "";
                s = "Select [SysParmVal] FROM [SystemParms] where [SysParm] = 'Default Thesaurus' ";
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(s, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    DefaultThesaurus = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                // ' xTrace(12335, "clsDataBase:iGetRowCount" + ex.Message)
                // messagebox.show("Error 3932.11: " , ex)
                if (ddebug)
                    Debug.Print("Error 3932.11.10: CountOfThesauri ", ex);
                Console.WriteLine("Error 3932.11.10: getDefaultThesaurus", ex);
                DefaultThesaurus = "";
                LOG.WriteToArchiveLog("clsDB : getDefaultThesaurus : 100 : ", ex);
            }

            if (!(gConn.State == ConnectionState.Closed))
            {
                gConn.Close();
            }

            gConn = null;
            GC.Collect();
            return DefaultThesaurus;
        }

        public string ExpandInflectionTerms(string S)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string Msg = "";
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string S1 = RSData.GetValue(0).ToString();
                        string S2 = RSData.GetValue(1).ToString();
                        Msg = Msg + S1 + " : " + S2 + Constants.vbCrLf;
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ExpandInflectionTerms : 100 : ", ex);
            }

            return Msg;
        }

        // SELECT COUNT(*) FROM [DB_UpdateHist] where [FixID] = 1 and Status = 'applied'
        public int ckDbUpdate(string FixID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select COUNT(*) FROM [DB_UpdateHist] where [FixID] = " + FixID + " and Status = 'applied'";
            int ii = 0;
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        ii = RSData.GetInt32(0);
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbUpdate : 100 : ", ex);
            }

            return ii;
        }

        public void DeleteEmailByGuid(string EmailGuid)
        {
            var SHIST = new clsSEARCHHISTORY();
            string S = "";
            bool B = true;
            S = "delete from Recipients where EmailGuid = '" + EmailGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13 - failed to delete Recipients = '" + EmailGuid + "'");
            }
            else
            {
                LOG.WriteToArchiveLog("Notice 126.77.13 - Deleted Email Recipients = '" + EmailGuid + "'");
                string argval = "clsDatabaseARCH:DeleteEmailByGuid";
                SHIST.setCalledfrom(ref argval);
                SHIST.setEndtime(ref DateAndTime.Now.ToString());
                string argval1 = "1";
                SHIST.setReturnedrows(ref argval1);
                string argval2 = "Delete";
                SHIST.setTypesearch(ref argval2);
                SHIST.setStarttime(ref DateAndTime.Now.ToString());
                SHIST.setSearchdate(ref DateAndTime.Now.ToString());
                SHIST.setSearchsql(ref S);
                SHIST.setUserid(ref modGlobals.gCurrUserGuidID);
                B = SHIST.Insert();
                if (!B)
                {
                    Console.WriteLine("Error 1943.244 - Failed to save history of search.");
                }
            }

            S = "delete from LibraryItems where SourceGuid = '" + EmailGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13a - failed to delete Library Items = '" + EmailGuid + "'");
            }

            S = "delete from EmailAttachment where EmailGuid = '" + EmailGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13 - failed to delete EmailAttachment = '" + EmailGuid + "'");
            }
            else
            {
                LOG.WriteToArchiveLog("Notice 126.77.13 - Deleted Email EmailAttachment = '" + EmailGuid + "'");
                string argval3 = "clsDatabaseARCH:DeleteEmailByGuid";
                SHIST.setCalledfrom(ref argval3);
                SHIST.setEndtime(ref DateAndTime.Now.ToString());
                string argval4 = "1";
                SHIST.setReturnedrows(ref argval4);
                string argval5 = "Delete";
                SHIST.setTypesearch(ref argval5);
                SHIST.setStarttime(ref DateAndTime.Now.ToString());
                SHIST.setSearchdate(ref DateAndTime.Now.ToString());
                SHIST.setSearchsql(ref S);
                SHIST.setUserid(ref modGlobals.gCurrUserGuidID);
                B = SHIST.Insert();
                if (!B)
                {
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("Error 1943.244 - Failed to save history of search.");
                    LOG.WriteToArchiveLog("Notice 1943.244 - Failed to save history of search = '" + EmailGuid + "'");
                }
            }

            S = "delete from Email where EmailGuid = '" + EmailGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13 - failed to delete Email = '" + EmailGuid + "'");
            }
            else
            {
                LOG.WriteToArchiveLog("Notice 1943.244 -  failed to delete Email = '" + EmailGuid + "'");
                string argval6 = "clsDatabaseARCH:DeleteEmailByGuid";
                SHIST.setCalledfrom(ref argval6);
                SHIST.setEndtime(ref DateAndTime.Now.ToString());
                string argval7 = "1";
                SHIST.setReturnedrows(ref argval7);
                string argval8 = "Delete";
                SHIST.setTypesearch(ref argval8);
                SHIST.setStarttime(ref DateAndTime.Now.ToString());
                SHIST.setSearchdate(ref DateAndTime.Now.ToString());
                SHIST.setSearchsql(ref S);
                SHIST.setUserid(ref modGlobals.gCurrUserGuidID);
                B = SHIST.Insert();
                if (!B)
                {
                    if (modGlobals.gClipBoardActive == true)
                        Console.WriteLine("Error 1943.244 - Failed to save history of search.");
                    LOG.WriteToArchiveLog("Error 1943.244 - Failed to save history of search." + EmailGuid + "'");
                }
            }

            SHIST = null;
        }

        public void DeleteSourceByGuid(string SourceGuid)
        {
            string S = "";
            bool B = true;
            S = "delete from SourceAttribute where SourceGuid = '" + SourceGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13 - failed to delete SourceAttribute = '" + SourceGuid + "'");
            }

            S = "delete from DataSource  where SourceGuid = '" + SourceGuid + "'";
            B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 126.77.13 - failed to delete DataSource = '" + SourceGuid + "'");
            }
        }

        public void RetentionTempZeroize()
        {
            string S = "DELETE FROM [RetentionTemp] WHERE UserID = '" + modGlobals.gCurrUserGuidID + "'";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 772.00.13 - failed to Zeroize RetentionTemp");
            }
        }

        public void RetentionTempInsert(string UserID, string ContentGuid, string TypeContent)
        {
            string S = "";
            S = S + " INSERT INTO [RetentionTemp]";
            S = S + " ([UserID]";
            S = S + " ,[ContentGuid]";
            S = S + " ,[TypeContent])";
            S = S + " VALUES";
            S = S + " ('" + UserID + "'";
            S = S + " ,'" + ContentGuid + "'";
            S = S + " ,'" + TypeContent + "')";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("Error 772.00.13 - failed to Zeroize RetentionTemp");
            }
        }

        public int RetentionTempCountType(string TypeContent, string UserID)
        {
            string S = "";
            S = S + " SELECT COUNT(*) as iCnt";
            S = S + " FROM [RetentionTemp] ";
            S = S + " where [TypeContent] = '" + TypeContent + "' and UserID = '" + UserID + "' ";
            CloseConn();
            CkConn();
            int cnt = 0;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public bool adminExist()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " SELECT [UserID]";
            S = S + " ,[UserName]";
            S = S + " ,[EmailAddress]";
            S = S + " ,[UserPassword]";
            S = S + " ,[Admin]";
            S = S + " ,[isActive]";
            S = S + " ,[UserLoginID]";
            S = S + " FROM [Users]";
            S = S + " where UserLoginID = 'admin'";
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            bool b = false;
            using (Conn)
            {
                if (Conn.State == ConnectionState.Closed)
                {
                    Conn.Open();
                }

                var command = new SqlCommand(S, Conn);
                SqlDataReader RSData = null;
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                    return true;
                }
                else
                {
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                    Conn.Close();
                    Conn = null;
                    S = "";
                    S = S + "INSERT INTO [Users]";
                    S = S + "([UserID]";
                    S = S + ",[UserName]";
                    S = S + ",[EmailAddress]";
                    S = S + ",[UserPassword]";
                    S = S + ",[Admin]";
                    S = S + ",[isActive]";
                    S = S + ",[UserLoginID])";
                    S = S + "VALUES( ";
                    S = S + "'admin'";
                    S = S + ",'administrator'";
                    S = S + ",'NA'";
                    S = S + ",'password'";
                    S = S + ",'Y'";
                    S = S + ",'Y'";
                    S = S + ",'admin')";
                    b = ExecuteSqlNewConn(S, false);
                    if (!b)
                    {
                        MessageBox.Show("Failed to add the required ADMIN account. Add the account manually to allow login.");
                        return false;
                    }
                    else
                    {
                        MessageBox.Show("The ADMIN account has been created, you will have to login under ADMIN using the password 'password' to continue." + Constants.vbCrLf + "You must change the password or security will be compromised.");
                        return false;
                    }
                }
            }
        }

        public bool LicenseVersionExist(string VersionNbr)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) FROM [License] where VersionNbr = " + VersionNbr;
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            if (cnt == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public void getLicenseDataCurrent(ref string ExistingVersionNbr, ref string ExistingActivationDate, ref string ExistingInstallDate, ref string ExistingCustomerID, ref string ExistingCustomerName, ref string ExistingLicenseID, ref string ExistingXrtNxr1, ref string ExistingServerIdentifier, ref string ExistingSqlInstanceIdentifier)
        {
            string S = "";
            S = S + "Select [Agreement] ";
            S = S + "      ,[VersionNbr] ";
            S = S + "      ,[ActivationDate] ";
            S = S + "      ,[InstallDate] ";
            S = S + "      ,[CustomerID] ";
            S = S + "      ,[CustomerName] ";
            S = S + "      ,[LicenseID] ";
            S = S + "      ,[XrtNxr1] ";
            S = S + "      ,[SqlServerInstanceNameX] ";
            S = S + "      ,[SqlServerMachineName] ";
            S = S + "  FROM [License] ";
            S = S + "  where VersionNbr = (select MAX(versionnbr) from License) ";
            CloseConn();
            CkConn();
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    ExistingVersionNbr = RSData.GetValue(0).ToString();
                    ExistingActivationDate = RSData.GetValue(0).ToString();
                    ExistingInstallDate = RSData.GetValue(0).ToString();
                    ExistingCustomerID = RSData.GetValue(0).ToString();
                    ExistingCustomerName = RSData.GetValue(0).ToString();
                    ExistingLicenseID = RSData.GetValue(0).ToString();
                    ExistingXrtNxr1 = RSData.GetValue(0).ToString();
                    ExistingServerIdentifier = RSData.GetValue(0).ToString();
                    ExistingSqlInstanceIdentifier = RSData.GetValue(0).ToString();
                }

                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }
        }

        public int CountQuickRefItems(int QuickRefIdNbr)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from QuickRefItems where QuickRefIdNbr = " + QuickRefIdNbr.ToString();
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public int getQuickRefId(string QuickRef)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select QuickRefIdNbr from QuickRef where QuickRefName = '" + QuickRef + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                }

                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public void retrieveSearchHistory(ArrayList SearchHistoryArrayList)
        {
            SearchHistoryArrayList.Clear();
            string S = "Select top 25 * from SearchHistory where UserID = '" + modGlobals.gCurrUserGuidID + "' order by RowID desc ";
            int ii = 0;
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        ii = RSData.GetInt32(0);
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbUpdate : 100 : ", ex);
            }
        }

        public void AddMissingCrc()
        {
            // SELECT FQN, SourceGuid FROM DataSource
            string S = "Select count(*) ";
            S = S + " FROM DataSource ";
            string WC = " where DataSource.SourceGuid not in (Select SourceGuid from SourceAttribute where AttributeName = 'CRC')";
            int iMax = iGetRowCount("DataSource", WC);
            S = "Select DataSource.FQN, DataSource.SourceGuid";
            S = S + " FROM DataSource ";
            S = S + " where DataSource.SourceGuid not in (";
            S = S + " Select SourceGuid from SourceAttribute where AttributeName = 'CRC')";
            int ii = 0;
            string FQN = "";
            string sGuid = "";
            // 'FrmMDIMain.TSPB1.Maximum = iMax + 2

            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        ii += 1;
                        // 'FrmMDIMain.TSPB1.Value = ii
                        // If ii Mod 100 = 0 Then
                        // frmreconMain.SB.Text = ii.ToString
                        // ''FrmMDIMain.Refresh()
                        // End If
                        Application.DoEvents();
                        FQN = RSData.GetValue(0).ToString();
                        sGuid = RSData.GetValue(1).ToString();
                        // Dim F As File
                        if (File.Exists(FQN))
                        {
                            string HexStr = ENC.GenerateSHA512HashFromFile(FQN);
                            InsertSrcAttrib(sGuid, "CRC", HexStr, "CONTENT");
                        }
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : ckDbUpdate : 100 : ", ex);
            }
            // 'FrmMDIMain.TSPB1.Value = 0
        }

        public void InsertSrcAttrib(string SGUID, string aName, string aVal, string OriginalFileType)
        {
            var SRCATTR = new clsSOURCEATTRIBUTE();
            SRCATTR.setSourceguid(ref SGUID);
            SRCATTR.setAttributename(ref aName);
            SRCATTR.setAttributevalue(ref aVal);
            SRCATTR.setDatasourceowneruserid(ref modGlobals.gCurrUserGuidID);
            SRCATTR.setSourcetypecode(ref OriginalFileType);
            SRCATTR.Insert();
            SRCATTR = null;
        }

        // select count(*) from Attributes where AttributeName = 'XX'
        public void AttributeExists(string AttributeName)
        {
            // SELECT FQN, SourceGuid FROM DataSource
            string S = "Select count(*) from Attributes where AttributeName = '" + AttributeName + "'";
            string WC = " where AttributeName = '" + AttributeName + "'";
            int iMax = iGetRowCount("Attributes", WC);
            if (iMax > 0)
            {
                return;
            }

            S = "";
            S = S + " INSERT INTO [Attributes]";
            S = S + " ([AttributeName]";
            S = S + " ,[AttributeDataType]";
            S = S + " ,[AttributeDesc]";
            S = S + " ,[AssoApplication])";
            S = S + " VALUES ";
            S = S + " ('" + AttributeName + "'";
            S = S + " ,'NVARCHAR'";
            S = S + " ,'ADDED BY ECM Library'";
            S = S + " ,'???')";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : AttributeExists : 100 : Failed to add attribute.");
            }
        }

        public bool ckAttributeExists(string AttributeName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select count(*) from Attributes where AttributeName = '" + AttributeName + "'";
            string WC = " where AttributeName = '" + AttributeName + "'";
            int iMax = iGetRowCount("Attributes", WC);
            if (iMax > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void RemoveFreetextStopWords(ref string SearchPhrase)
        {
            SearchPhrase = SearchPhrase.Trim();
            if (SearchPhrase.Trim().Length == 0)
            {
                return;
            }

            var AL = new ArrayList();
            GetSkipWords(ref AL);
            for (int i = 1, loopTo = SearchPhrase.Length; i <= loopTo; i++)
            {
                string CH = Strings.Mid(SearchPhrase, i, 1);
                if (CH == Conversions.ToString('"'))
                {
                    StringType.MidStmtStr(ref SearchPhrase, i, 1, " ");
                }
            }

            string NewPhrase = "";
            var A = SearchPhrase.Split(' ');
            for (int i = 0, loopTo1 = Information.UBound(A); i <= loopTo1; i++)
            {
                string tWord = A[i].Trim();
                string TempWord = tWord;
                tWord = tWord.ToUpper();
                if (tWord.Length > 0)
                {
                    if (AL.Contains(tWord))
                    {
                        A[i] = "";
                    }
                    else
                    {
                        A[i] = TempWord;
                    }
                }
            }

            NewPhrase = "";
            for (int i = 0, loopTo2 = Information.UBound(A); i <= loopTo2; i++)
            {
                if (A[i].Trim().Length > 0)
                {
                    NewPhrase = NewPhrase + " " + A[i];
                }
            }

            SearchPhrase = NewPhrase;
        }

        public bool SetSourceGlobalAccessFlags(string tgtGuid, string FileType, bool rbPublic, bool rbPrivate, bool rbMstrYes, bool rbMstrNot, ref TextBox SB)
        {
            string tKey = tgtGuid;
            bool Bb = true;
            if (rbPublic)
            {
                string SS = "";
                bool isOwner = ValidateContentOwnership(tgtGuid, FileType);
                if (isOwner == false)
                {
                    isOwner = ValidateCoOwnerOfContent(tgtGuid, FileType);
                    if (isOwner == false)
                    {
                        // SB.Text = "You do not own all of this content, so some changes are not allowed."
                        SB.Text = "You do not own all of this content, so some changes are not allowed.";
                        return false;
                    }
                }

                if (!FileType.ToUpper().Equals(".MSG") & !FileType.ToUpper().Equals(".EML"))
                {
                    SS = "Update DataSource set isPublic = 'Y' where SourceGuid = '" + tKey + "'";
                }
                else
                {
                    SS = "Update email set isPublic = 'Y' where EmailGuid = '" + tKey + "'";
                }

                Bb = ExecuteSqlNewConn(SS, false);
                if (Bb)
                {
                    LOG.WriteToArchiveLog("Reset the isPublic  for guid '" + tKey + "'");
                }
            }

            if (rbPrivate)
            {
                string SS = "";
                bool isOwner = ValidateContentOwnership(tgtGuid, FileType);
                if (isOwner == false)
                {
                    isOwner = ValidateCoOwnerOfContent(tgtGuid, FileType);
                    if (isOwner == false)
                    {
                        SB.Text = "You do not own all of this content, so some changes are not allowed.";
                        // messagebox.show("You do not own all of this content, so some changes are not allowed.")
                        return false;
                    }
                }

                if (!FileType.ToUpper().Equals(".MSG") & !FileType.ToUpper().Equals(".EML"))
                {
                    SS = "Update DataSource set isPublic = 'N' where SourceGuid = '" + tKey + "'";
                }
                else
                {
                    SS = "Update email set isPublic = 'N' where EmailGuid = '" + tKey + "'";
                }

                Bb = ExecuteSqlNewConn(SS, false);
                if (Bb)
                {
                    LOG.WriteToArchiveLog("Reset the isPublic  for guid '" + tKey + "'");
                }
            }

            if (rbMstrYes)
            {
                string SS = "";
                bool isOwner = ValidateContentOwnership(tgtGuid, FileType);
                if (isOwner == false)
                {
                    isOwner = ValidateCoOwnerOfContent(tgtGuid, FileType);
                    if (isOwner == false)
                    {
                        SB.Text = "You do not own all of this content, so some changes are not allowed.";
                        // messagebox.show("You do not own all of this content, so some changes are not allowed.")
                        return false;
                    }
                }

                if (!FileType.ToUpper().Equals(".MSG") & !FileType.ToUpper().Equals(".EML"))
                {
                    SS = "Update DataSource set isMaster = 'Y' where SourceGuid = '" + tKey + "'";
                    // Else
                    // SS  = "Update email set isPublic = 'Y' where EmailGuid = '" + tKey  + "'"
                    Bb = ExecuteSqlNewConn(SS, false);
                    if (Bb)
                    {
                        LOG.WriteToArchiveLog("Reset the isMaster for guid '" + tKey + "'");
                    }
                }
                else
                {
                    SS = "Update Email set isMaster = 'Y' where EmaileGuid = '" + tKey + "'";
                    // Else
                    // SS  = "Update email set isPublic = 'N' where EmailGuid = '" + tKey  + "'"
                    Bb = ExecuteSqlNewConn(SS, false);
                    if (Bb)
                    {
                        LOG.WriteToArchiveLog("Reset the isMaster  for EMAIL guid '" + tKey + "'");
                    }
                }
            }

            if (rbMstrNot)
            {
                string SS = "";
                bool isOwner = ValidateContentOwnership(tgtGuid, FileType);
                if (isOwner == false)
                {
                    isOwner = ValidateCoOwnerOfContent(tgtGuid, FileType);
                    if (isOwner == false)
                    {
                        SB.Text = "You do not own all of this content, so some changes are not allowed.";
                        // messagebox.show("You do not own all of this content, so some changes are not allowed.")
                        return false;
                    }
                }

                if (!FileType.ToUpper().Equals(".MSG") & !FileType.ToUpper().Equals(".EML"))
                {
                    SS = "Update DataSource set isMaster = 'N' where SourceGuid = '" + tKey + "'";
                    // Else
                    // SS  = "Update email set isPublic = 'N' where EmailGuid = '" + tKey  + "'"
                    Bb = ExecuteSqlNewConn(SS, false);
                    if (Bb)
                    {
                        LOG.WriteToArchiveLog("Reset the isMaster  for guid '" + tKey + "'");
                    }
                }
                else
                {
                    SS = "Update Email set isMaster = 'N' where EmaileGuid = '" + tKey + "'";
                    // Else
                    // SS  = "Update email set isPublic = 'N' where EmailGuid = '" + tKey  + "'"
                    Bb = ExecuteSqlNewConn(SS, false);
                    if (Bb)
                    {
                        LOG.WriteToArchiveLog("Reset the isMaster  for EMAIL guid '" + tKey + "'");
                    }
                }
            }

            return Bb;
        }

        public bool DoIownThisContent(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            int i = 0;
            string id = "";
            string S = "";
            try
            {
                S = S + " select DataSourceOwnerUserID  ";
                S = S + " from DataSource ";
                S = S + " where SourceGuid = '" + SourceGuid + "' ";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    id = RSData.GetValue(0).ToString();
                    if ((id ?? "") == (modGlobals.gCurrUserGuidID ?? ""))
                    {
                        b = true;
                    }
                    else
                    {
                        b = false;
                    }
                }
                else
                {
                    id = (-1).ToString();
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:DoIownThisContent: ", ex);
                b = false;
            }

            return b;
        }

        public bool isEmailPublic(string EmailGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool b = true;
            int i = 0;
            string id = "";
            string S = "";
            try
            {
                S = "Select ispublic from Email where EmailGuid = '" + EmailGuid + "'";
                SqlDataReader RSData = null;
                // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    id = RSData.GetValue(0).ToString();
                    if (id.ToUpper().Equals("Y"))
                    {
                        b = true;
                    }
                    else
                    {
                        b = false;
                    }
                }
                else
                {
                    b = false;
                }

                RSData.Close();
                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:isEmailPublic: ", ex);
                b = false;
            }

            return b;
        }

        public void ZeroizeGlobalSearch()
        {
            string S = "delete from GlobalSeachResults where UserID = '" + modGlobals.gCurrUserGuidID + "'";
            bool B = false;
            try
            {
                B = ExecuteSqlNewConn(S, false);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR 100 - clsDatabaseARCH:ZeroizeGlobalSearch: Failed to seroize global search - " + Constants.vbCrLf + S);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR 200 - clsDatabaseARCH:ZeroizeGlobalSearch: ", ex);
                B = false;
            }
        }

        public string getOwnerGuid(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // select DataSourceOwnerUserID from DataSource where SourceGuid= 'XX'
            bool b = true;
            int i = 0;
            string id = "";
            string S = "";
            try
            {
                S = "Select DataSourceOwnerUserID from DataSource where SourceGuid= '" + SourceGuid + "'";
                SqlDataReader RSData = null;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    id = RSData.GetValue(0).ToString();
                }
                else
                {
                    id = "";
                }

                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getOwnerGuid: ", ex);
                id = "";
            }

            return id;
        }

        public bool ckContentOwnership(string SourceGuid, string LoggedInUserGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (isAdmin(LoggedInUserGuid))
            {
                return true;
            }

            bool b = true;
            int i = 0;
            string id = "";
            string S = "";
            string OwnerGuid = getOwnerGuid(SourceGuid);
            if (OwnerGuid.Equals(LoggedInUserGuid))
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void GetAllLibrariesUserCanAccess(ref ArrayList AccessibleLibraries, bool isAdmin)
        {
            SqlDataReader rsData = null;
            string LibraryName = "";
            AccessibleLibraries.Clear();
            if (isAdmin == true)
            {
                string S = "Select LibraryName, UserID from Library order by LibraryName";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        LibraryName = rsData.GetValue(0).ToString();
                        if (!AccessibleLibraries.Contains(LibraryName))
                        {
                            AccessibleLibraries.Add(LibraryName);
                        }
                    }
                }
            }
            else
            {
                try
                {
                    string S = "Select   distinct   GroupLibraryAccess.LibraryName ";
                    S = S + " FROM         GroupUsers INNER JOIN";
                    S = S + " GroupLibraryAccess ON GroupUsers.UserID = GroupLibraryAccess.UserID";
                    S = S + " group by GroupUsers.UserID, GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupName  ";
                    S = S + " HAVING      (GroupUsers.UserID = '" + modGlobals.gCurrUserGuidID + "')  ";
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    rsData = command.ExecuteReader();
                    if (rsData.HasRows)
                    {
                        while (rsData.Read())
                        {
                            LibraryName = rsData.GetValue(0).ToString();
                            if (!AccessibleLibraries.Contains(LibraryName))
                            {
                                AccessibleLibraries.Add(LibraryName);
                            }
                        }
                    }

                    if (!rsData.IsClosed)
                    {
                        rsData.Close();
                    }

                    S = "Select LibraryName from Library where userid = '" + modGlobals.gCurrUserGuidID + "'";
                    CONN = new SqlConnection(CS);
                    CONN.Open();
                    command = new SqlCommand(S, CONN);
                    rsData = command.ExecuteReader();
                    if (rsData.HasRows)
                    {
                        while (rsData.Read())
                        {
                            LibraryName = rsData.GetValue(0).ToString();
                            if (!AccessibleLibraries.Contains(LibraryName))
                            {
                                AccessibleLibraries.Add(LibraryName);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                }
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
        }

        public string getServerInstanceName()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select @@SERVERNAME AS 'ServerName'";
            SqlDataReader rsData = null;
            string ServerName = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                    ServerName = rsData.GetValue(0).ToString();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getServerName Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return ServerName;
        }

        public string getServerMachineName()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select SERVERPROPERTY('MachineName')";
            SqlDataReader rsData = null;
            string ServerName = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                    ServerName = rsData.GetValue(0).ToString();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getServerName Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return ServerName;
        }

        public bool setServerIdentifier(string SqlServerInstanceNameX, string CustomerID, string LicenseID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string X = ENC.AES256EncryptString(SqlServerInstanceNameX);
            X = UTIL.RemoveSingleQuotes(X);
            string S = "Update License set  SqlServerInstanceNameX = '" + SqlServerInstanceNameX + "' where CustomerID = '" + CustomerID + "' and VersionNbr = '" + LicenseID + "'";
            bool B = ExecuteSqlNewConn(90108, S);
            if (B == false)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:setServerIdentifier Error 100: Failed to add Server Identifier, system may be inoperable.");
                MessageBox.Show("clsDatabaseARCH:setServerIdentifier Error 100: Failed to add Server Identifier, system may be inoperable.");
                return false;
            }

            return true;
        }

        public string getServerIdentifier(string CustomerID, string LicenseID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string SqlServerInstanceNameX = "";
            string S = "Select SqlServerInstanceNameX from License where CustomerID = '" + CustomerID + "' and VersionNbr = '" + LicenseID + "'";
            SqlDataReader rsData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    SqlServerInstanceNameX = rsData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getServerIdentifier Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return SqlServerInstanceNameX;
        }

        public bool setSqlInstanceIdentifier(string SqlServerMachineName, string CustomerID, string LicenseID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string X = ENC.AES256EncryptString(SqlServerMachineName);
            X = UTIL.RemoveSingleQuotes(X);
            string S = "Update License set  SqlServerInstanceNameX = '" + SqlServerMachineName + "' where CustomerID = '" + CustomerID + "' and LicenseID = '" + LicenseID + "'";
            bool B = ExecuteSqlNewConn(90109, S);
            if (B == false)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:setServerIdentifier Error 100: Failed to add SQL Instance Identifier, system may be inoperable.");
                MessageBox.Show("clsDatabaseARCH:setServerIdentifier Error 100: Failed to add SQL Instance Identifier, system may be inoperable.");
                return false;
            }

            return true;
        }

        public bool getSqlInstanceIdentifier(string CustomerID, string LicenseID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string SqlServerMachineName = "";
            string S = "Select SqlServerMachineName from License where CustomerID = '" + CustomerID + "' and LicenseID = '" + LicenseID + "'";
            SqlDataReader rsData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    SqlServerMachineName = rsData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getSqlInstanceIdentifier Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return Conversions.ToBoolean(SqlServerMachineName);
        }

        public static byte[] StrToByteArray(string str)
        {
            var encoding = new System.Text.ASCIIEncoding();
            // Dim encoding As New System.Text.UnicodeEncoding
            return encoding.GetBytes(str);
        } // StrToByteArray

        public void getSatusFlags(ref CheckBox isPublic, ref CheckBox isMaster, ref CheckBox isWebPage, string SourceGuid, string SourceType)
        {
            string sPublic = "";
            string sMaster = "";
            string sWebPage = "";
            isMaster.Checked = false;
            isPublic.Checked = false;
            isWebPage.Checked = false;
            string S = "";
            if (SourceType.ToUpper().Equals(".EML"))
            {
                S = "Select isPublic, 'N' as isMaster, 'N' as isWebPage from EMAIL where EmailGuid = '" + SourceGuid + "' ";
            }
            else if (SourceType.ToUpper().Equals(".MSG"))
            {
                S = "Select isPublic, 'N' as isMaster, 'N' as isWebPage from EMAIL where EmailGuid = '" + SourceGuid + "' ";
            }
            else
            {
                S = "Select isPublic, isMaster, isWebPage from DataSource where SourceGuid = '" + SourceGuid + "'";
            }

            SqlDataReader rsData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    try
                    {
                        if (Information.IsDBNull(rsData.GetValue(0).ToString()))
                        {
                            sPublic = "N";
                        }
                        else
                        {
                            sPublic = rsData.GetValue(0).ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        sPublic = "N";
                    }

                    try
                    {
                        if (Information.IsDBNull(rsData.GetValue(1).ToString()))
                        {
                            sMaster = "N";
                        }
                        else
                        {
                            sMaster = rsData.GetValue(1).ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        sMaster = "N";
                    }

                    try
                    {
                        if (Information.IsDBNull(rsData.GetValue(2).ToString()))
                        {
                            sWebPage = "N";
                        }
                        else
                        {
                            sWebPage = rsData.GetValue(2).ToString();
                        }
                    }
                    catch (Exception ex)
                    {
                        sWebPage = "N";
                    }
                }

                if (sPublic.Equals("Y"))
                {
                    isPublic.Checked = true;
                }
                else
                {
                    isPublic.Checked = false;
                }

                if (sMaster.Equals("Y"))
                {
                    isMaster.Checked = true;
                }
                else
                {
                    isMaster.Checked = false;
                }

                if (sWebPage.Equals("Y"))
                {
                    isWebPage.Checked = true;
                }
                else
                {
                    isWebPage.Checked = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:getSqlInstanceIdentifier Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
        }

        public int getRetentionPeriod(string RetentionCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (RetentionCode.Trim().Length == 0)
            {
                return 50;
            }

            // Dim SqlServerMachineName  = ""
            RetentionCode = UTIL.RemoveSingleQuotes(RetentionCode);
            string S = "Select RetentionUnits from Retention where RetentionCode = '" + RetentionCode + "'";
            SqlDataReader rsData = null;
            int rPeriod = 10;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    rPeriod = rsData.GetInt32(0);
                }
            }
            catch (Exception ex)
            {
                rPeriod = 10;
                LOG.WriteToArchiveLog("clsDatabaseARCH:getSqlInstanceIdentifier Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return rPeriod;
        }

        public string getRetentionPeriodMax()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // Dim SqlServerMachineName  = ""
            string S = "";
            string MaxYears = getRetentionPeriodYearsMax();
            string MaxPeriod = "";
            S = " SELECT [RetentionCode] FROM [Retention] where RetentionUnits = " + MaxYears;
            SqlDataReader rsData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    MaxPeriod = rsData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                MaxPeriod = "";
                LOG.WriteToArchiveLog("clsDatabaseARCH:getRetentionPeriodMax Error 100: ", ex);
            }

            if (rsData is object)
            {
                if (!rsData.IsClosed)
                {
                    rsData.Close();
                }

                rsData = null;
            }

            GC.Collect();
            return MaxPeriod;
        }

        public string getRetentionPeriodYearsMax()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // Dim SqlServerMachineName  = ""
            string S = "";
            S = " select MAX(RetentionUnits) FROM [Retention]";
            SqlDataReader rsData = null;
            string rPeriod = "100";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    rPeriod = rsData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                rPeriod = 10.ToString();
                LOG.WriteToArchiveLog("clsDatabaseARCH:getRetentionPeriodYearsMax Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return rPeriod;
        }

        public void SetExchangeDefaultRetentionCode()
        {
            string S = "";
            S = S + " update ExchangeHostPop ";
            S = S + " set RetentionCode = (select top(1) RetentionCode from Retention)";
            S = S + " where RetentionCode Is null ";
            ExecuteSqlNewConn(90110, S);
        }

        public string GetDirRetentionCode(string FQN, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            string rCode = "";
            try
            {
                S = S + " select RetentionCode from Directory";
                S = S + " where UserID = '" + UserID + "'";
                S = S + " and FQN = '" + FQN + "'";
                SqlDataReader rsData = null;
                int rPeriod = 10;
                try
                {
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    rsData = command.ExecuteReader();
                    if (rsData.HasRows)
                    {
                        rsData.Read();
                        rCode = rsData.GetValue(0).ToString();
                    }

                    if (!rsData.IsClosed)
                    {
                        rsData.Close();
                    }

                    rsData = null;
                    command.Dispose();
                    command = null;
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }

                    CONN.Dispose();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("clsDatabaseARCH:GetDirRetentionCode Error 100: ", ex);
                }

                // If Not rsData.IsClosed Then
                // rsData.Close()
                // End If
                // rsData = Nothing
                GC.Collect();
                return rCode;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error 2323.45 GetDirRetentionCode: ", ex);
                return "Retain 20";
            }

            return "";
        }

        public string GetRetentionMgr(string RetentionCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = S + " select ManagerName from Retention   ";
            S = S + " where RetentionCode = '" + RetentionCode + "'";
            string rCode = "";
            SqlDataReader rsData = null;
            int rPeriod = 10;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    rCode = rsData.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH:GetRetentionMgr Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return rCode;
        }

        public void setRetentionDate(string SourceGuid, string RetentionCode, string FileExtention)
        {
            int RetentionUnits = getRetentionPeriod(RetentionCode);
            var rightNow = DateAndTime.Now;
            rightNow = rightNow.AddYears(RetentionUnits);
            string RetentionExpirationDate = rightNow.ToString();
            string S = "";
            if (FileExtention.ToUpper().Equals(".MSG") | FileExtention.ToUpper().Equals(".EML"))
            {
                S = "Update email set RetentionExpirationDate = '" + RetentionExpirationDate + "' where EmailGuid = '" + SourceGuid + "' ";
            }
            else
            {
                S = "Update DataSource set RetentionExpirationDate = '" + RetentionExpirationDate + "' where SourceGuid = '" + SourceGuid + "' ";
            }

            bool B = ExecuteSqlNewConn(S, false);
            if (FileExtention.ToUpper().Equals(".MSG") | FileExtention.ToUpper().Equals(".EML"))
            {
                S = "Update email set RetentionCode = '" + RetentionCode + "' where EmailGuid = '" + SourceGuid + "' ";
            }
            else
            {
                S = "Update DataSource set RetentionCode = '" + RetentionCode + "' where SourceGuid = '" + SourceGuid + "' ";
            }

            B = ExecuteSqlNewConn(S, false);
        }

        public bool cntMachine(string MachineName, string FQN, string SourceGuid)
        {
            FQN = UTIL.RemoveSingleQuotes(FQN);
            string S = "";
            bool B = false;
            int cnt = -1;
            SqlDataReader RSData = null;
            S = " SELECT COUNT(*) FROM [Machine] where MachineName = '" + MachineName + "' and FQN = '" + FQN + "' and SourceGuid = '" + SourceGuid + "' ";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            try
            {
                using (CONN)
                {
                    RSData.Read();
                    cnt = Conversions.ToInteger(RSData.GetValue(0).ToString());
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error - 1432.654.a - Failed to add machine for " + FQN);
                B = false;
            }

            return B;
        }

        public bool AddMachineSourceXX(string FQN, string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string MachineName = Environment.MachineName.ToString();
            B = cntMachine(MachineName, FQN, SourceGuid);
            if (!B)
            {
                string S = "INSERT INTO [Machine]";
                S = S + " ([MachineName]";
                S = S + " ,[FQN]";
                S = S + " ,[ContentType]";
                S = S + " ,[CreateDate]";
                S = S + " ,[LastUpdate]";
                S = S + " ,[SourceGuid]";
                S = S + " ,[UserID])";
                S = S + " VALUES ";
                S = S + " ('" + MachineName + "'";
                S = S + " ,'" + FQN + "'";
                S = S + " ,'Source'";
                S = S + " ,GETDATE()";
                S = S + " ,GETDATE()";
                S = S + " ,'" + SourceGuid + "'";
                S = S + " ,'" + modGlobals.gCurrUserGuidID + "'";
                S = S + " )";
                B = ExecuteSqlNewConn(S, false);
            }

            return B;
        }

        public bool isLibOwner(string LibName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool B = false;
            int cnt = -1;
            S = " SELECT count(*) FROM [Library] where LibraryName = '" + LibName + "' and UserID = '" + modGlobals.gCurrUserGuidID + "' ";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            try
            {
                using (CONN)
                {
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error - 2133.654.x - Failed to validate lib owner.");
                B = false;
            }

            return B;
        }

        public bool isLibItemOwner(string LibraryItemGuid)
        {
            string S = "";
            bool B = false;
            int cnt = -1;
            S = " SELECT count(*) FROM [LibraryItems] where LibraryItemGuid = '" + LibraryItemGuid + "' and LibraryOwnerUserID = '" + modGlobals.gCurrUserGuidID + "' ";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            try
            {
                using (CONN)
                {
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                if (cnt > 0)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }

                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error - 2133.696.y - Failed to validate lib item owner.");
                B = false;
            }

            return B;
        }

        public void getWebMetadata(string SourceGuid, ref SortedList<string, string> WebParms)
        {
            WebParms.Clear();
            string S = "Select ";
            S = S + " [SourceName]";
            S = S + " ,[SourceTypeCode]";
            S = S + " ,[FQN]";
            S = S + " ,[FileLength]";
            S = S + " ,[FileDirectory]";
            S = S + " ,[OriginalFileType]";
            S = S + " ,[Description]";
            S = S + " ,[isGraphic]";
            S = S + " ,[isWebPage]";
            S = S + " FROM DataSource";
            S = S + " where SourceGuid  = '" + SourceGuid + "'";
            string SourceName = "";
            string SourceTypeCode = "";
            string FQN = "";
            string FileLength = "";
            string FileDirectory = "";
            string OriginalFileType = "";
            string Description = "";
            string isGraphic = "";
            string isWebPage = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            try
            {
                using (CONN)
                {
                    if (RSData.HasRows)
                    {
                        RSData.Read();
                        SourceName = RSData.GetValue(0).ToString();
                        WebParms.Add("SourceName", SourceName);
                        SourceTypeCode = RSData.GetValue(1).ToString();
                        WebParms.Add("SourceTypeCode", SourceTypeCode);
                        FQN = RSData.GetValue(2).ToString();
                        WebParms.Add("FQN", FQN);
                        FileLength = RSData.GetValue(3).ToString();
                        WebParms.Add("FileLength", FileLength);
                        FileDirectory = RSData.GetValue(4).ToString();
                        WebParms.Add("FileDirectory", FileDirectory);
                        OriginalFileType = RSData.GetValue(5).ToString();
                        WebParms.Add("OriginalFileType", OriginalFileType);
                        Description = RSData.GetValue(6).ToString();
                        WebParms.Add("Description", Description);
                        isGraphic = RSData.GetValue(7).ToString();
                        WebParms.Add("isGraphic", isGraphic);
                        isWebPage = RSData.GetValue(8).ToString();
                        WebParms.Add("isWebPage", isWebPage);
                    }

                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }

                CONN.Close();
                CONN = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error getWebMetadata - 2133.696.y - Failed to acquire web metadata: ", ex);
            }
        }

        public void PopulateLibCombo(ref ComboBox CB)
        {
            try
            {
                CB.Items.Clear();
            }
            catch (Exception ex)
            {
                Debug.Print(ex.Message);
            }

            string S = "";
            bool isAdmin = this.isAdmin(modGlobals.gCurrUserGuidID);
            if (isAdmin)
            {
                S = "Select LibraryName FROM Library order by LibraryName ";
            }
            else
            {
                S = "Select distinct [LibraryName]";
                S = S + " FROM [LibraryUsers]";
                S = S + " where UserID = '" + modGlobals.gCurrUserGuidID + "' ";
                S = S + " group by LibraryName";
            }

            PopulateComboBox(ref CB, "LibraryName", S);
        }

        public int getCntSource(string SourceName, string CRC)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            string S = "";
            S = S + " SELECT count(*) ";
            S = S + " FROM DataSource";
            S = S + " where SourceName = ";
            S = S + "'" + SourceName + "'";
            S = S + " and CRC = " + CRC + "";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                // Dim CS  = getRepoConnStr() : Dim CONN As New SqlConnection(CS) : CONN.Open() : Dim command As New SqlCommand(S, CONN) : rsdata= command.ExecuteReader()

                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        // select datalength(SourceImage)  from DataSource where SourceGuid = '15bd8f45-5795-4526-adee-b0ddde66490b'
        public int GetImageSize(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            S = "Select datalength(SourceImage)  from DataSource where SourceGuid = '" + SourceGuid + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public int GetMaxVersionNbr(string SourceName, string CRC)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int cnt = -1;
            string S = "";
            int iCnt = getCntSource(SourceName, CRC);
            if (iCnt == 0)
            {
                return -1;
            }

            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            S = S + " SELECT MAX(VersionNbr) FROM DataSource where SourceName = '" + SourceName + "' ";
            try
            {
                CloseConn();
                CkConn();

                // Dim CMD As New SqlCommand(S, gConn)
                SqlDataReader RSData = null;
                using (gConn)
                {
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        RSData.Read();
                        cnt = RSData.GetInt32(0);
                        RSData.Close();
                        RSData = null;
                    }
                    else
                    {
                        cnt = 0;
                    }
                    // CMD.Connection.Close()
                    // CMD = Nothing
                }

                if (RSData is object)
                {
                    RSData = null;
                }
            }
            // If Not CMD Is Nothing Then
            // CMD = Nothing
            // End If
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: clsDatabaseARCH : GetMaxVersionNbr 100 - ", ex);
                LOG.WriteToArchiveLog("ERROR: clsDatabaseARCH : GetMaxVersionNbr 100 - SQL: " + Constants.vbCrLf + S);
            }

            return cnt;
        }

        public void ckFilesNeedUpdate(ref List<string> ListOfFiles, bool CheckArchiveBit)
        {
            var INFO = new Dictionary<string, string>();
            var DBLocal = new clsDbLocal();
            string HexCrc = "";
            int LL = 0;
            string fiFullName = "";
            try
            {
                var A = new string[1];
                string ArchFlag = "";
                for (int i = 0, loopTo = ListOfFiles.Count - 1; i <= loopTo; i++)
                {
                    try
                    {
                        LL = 1;
                        Application.DoEvents();
                        if (i % 10 == 0)
                        {
                            My.MyProject.Forms.frmNotify.lblFileSpec.Text = "Check Update Needed: " + i.ToString() + " of " + ListOfFiles.Count.ToString();
                            My.MyProject.Forms.frmNotify.Refresh();
                        }

                        Application.DoEvents();
                        string S = ListOfFiles[i];
                        LL = 10;
                        // If CheckArchiveBit Then
                        // ArchFlag = Mid(S, 1, InStr(S, "|") - 1)
                        // ArchFlag = ArchFlag.ToUpper
                        // If ArchFlag.Equals("FALSE") Then
                        // ListOfFiles(i) = ""
                        // GoTo NxtRec
                        // End If
                        // End If
                        LL = 20;
                        // False| xx.png|.png|C:\Temp\Tiff_Files|17630|22-Dec-10 8:00:57 PM|22-Dec-10 8:04:55 PM|22-Dec-10 8:01:02 PM
                        if (S == null)
                        {
                            goto NxtRec;
                        }

                        if (Strings.InStr(S, "|") == 0)
                        {
                            goto NxtRec;
                        }

                        A = S.Split('|');
                        LL = 30;
                        string Indicator = A[0];
                        string fiName = A[1].ToString();
                        string fiExtension = A[2].ToString();
                        fiFullName = A[3].ToString() + @"\" + A[1];
                        string Filength = A[4].ToString();
                        string fiCreationTime = A[5].ToString();
                        string fiLastAccessTime = A[6].ToString();
                        string fiLastWriteTime = A[7].ToString();
                        long FileLength = Conversions.ToInteger(Filength);
                        DateTime LastAccessDate = default;
                        try
                        {
                            LastAccessDate = Conversions.ToDate(fiLastAccessTime);
                        }
                        catch (Exception ex)
                        {
                            LastAccessDate = DateAndTime.Now;
                        }

                        LL = 40;
                        DateTime LastWriteTime = default;
                        try
                        {
                            LastWriteTime = Conversions.ToDate(fiLastWriteTime);
                        }
                        catch (Exception ex)
                        {
                            LastWriteTime = DateAndTime.Now;
                        }

                        DateTime CreateDate = default;
                        try
                        {
                            CreateDate = Conversions.ToDate(fiCreationTime);
                        }
                        catch (Exception ex)
                        {
                            CreateDate = LastWriteTime;
                        }

                        bool BB = false;
                        if (Indicator.ToUpper().Equals("FALSE"))
                        {
                            BB = false;
                        }
                        else
                        {
                            BB = true;
                        }

                        LL = 50;
                        bool NeedsUpdate = false;
                        INFO = DBLocal.getFileArchiveInfo(fiFullName);
                        if (INFO.Count.Equals(0) | INFO.Count.Equals(1))
                        {
                            NeedsUpdate = true;
                        }
                        else if (LastAccessDate > Convert.ToDateTime(INFO["LastArchiveDate"]))
                        {
                            NeedsUpdate = true;
                        }
                        else if (FileLength != Convert.ToInt64(INFO["FileSize"]))
                        {
                            NeedsUpdate = true;
                        }

                        if (INFO["AddNewRec"].Equals("Y"))
                        {
                            DBLocal.AddFileArchiveInfo(fiFullName);
                        }

                        if (NeedsUpdate.Equals(false))
                        {
                            goto NxtRec;
                        }

                        HexCrc = ENC.GenerateSHA512HashFromFile(fiFullName);
                        LL = 60;

                        // BB = DBLocal.ckNeedsArchive(fiFullName, BB, HexCrc)
                        if (NeedsUpdate.Equals(true))
                        {
                            BB = true;
                        }
                        else
                        {
                            BB = false;
                        }

                        LL = 70;
                        if (!BB)
                        {
                            ListOfFiles[i] = "";
                            goto NxtRec;
                        }

                        bool b = false;
                        LL = 75;
                        int VersionNbr = GetMaxVersionNbr(fiName, HexCrc);
                        if (VersionNbr < 0)
                        {
                            // ** The file does not exist in the repository, add it.
                            b = true;
                        }
                        else
                        {
                            LL = 80;
                            b = ckSourceNeedsUpdate(fiName, HexCrc);
                            LL = 90;
                            if (b)
                            {
                                if (!ListOfFiles.Contains(S))
                                {
                                    ListOfFiles.Add(S);
                                }
                            }
                            else
                            {
                                ListOfFiles[i] = "";
                            }

                            LL = 100;
                        }
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("ERROR 134 clsDatabaseARCH:ckFilesNeedUpdate - Skipping file: " + fiFullName, ex);
                    }

                    NxtRec:
                    ;
                    LL = 110;
                }
            }
            catch (Exception ex)
            {
                var st = new StackTrace(true);
                st = new StackTrace(ex, true);
                LOG.WriteToArchiveLog("EX.TargetSite: " + ex.TargetSite.ToString());
                LOG.WriteToArchiveLog("Line: " + st.GetFrame(0).GetFileLineNumber().ToString());
                LOG.WriteToArchiveLog("ERROR 100 clsDatabaseARCH:ckFilesNeedUpdate LL = " + LL.ToString());
                LOG.WriteToArchiveLog("ERROR 100 clsDatabaseARCH:ckFilesNeedUpdate - ", ex);
                LOG.WriteToDirFileLog("EX.TargetSite: " + ex.TargetSite.ToString());
                LOG.WriteToDirFileLog("Line: " + st.GetFrame(0).GetFileLineNumber().ToString());
                LOG.WriteToDirFileLog("ERROR 100 clsDatabaseARCH:ckFilesNeedUpdate LL = " + LL.ToString());
                LOG.WriteToDirFileLog("ERROR 100 clsDatabaseARCH:ckFilesNeedUpdate - " + ex.Message);
            }
            finally
            {
                DBLocal = null;
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }

            My.MyProject.Forms.frmNotify.lblFileSpec.Text = "Check Completed: " + ListOfFiles.Count.ToString();
            My.MyProject.Forms.frmNotify.Refresh();
        }

        public bool ckSourceNeedsUpdate(string SourceName, string CRC)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool bNeedsUpdating = true;
            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            try
            {
                S = S + " select count(*) from datasource  where SourceName = '" + SourceName + "' and crc = " + CRC + " ";
                int iCnt = iCount(S);
                if (iCnt > 0)
                {
                    bNeedsUpdating = false;
                }
                else
                {
                    bNeedsUpdating = true;
                }
            }
            catch (Exception ex)
            {
                bNeedsUpdating = true;
                LOG.WriteToArchiveLog("ERROR 001 clsDatabaseARCH:ckSourceNeedsUpdate - " + S + Constants.vbCrLf + ex.Message);
            }

            return bNeedsUpdating;
        }

        public void AddArchiveDir(string DirFQN)
        {
            DirFQN = UTIL.RemoveSingleQuotes(DirFQN);
            int iCnt = ArchiveDirExists(DirFQN, modGlobals.gMachineID);
            if (iCnt == 0)
            {
                string S = "";
                bool B = false;
                S = "INSERT INTO [DirectoryTemp]";
                S = S + " ([DirFQN]";
                S = S + " ,[CurrUserGuidID]";
                S = S + " ,[MachineID])";
                S = S + " VALUES ";
                S = S + " ('" + DirFQN + "'";
                S = S + " ,'" + modGlobals.gCurrUserGuidID + "'";
                S = S + " ,'" + modGlobals.gMachineID + "'";
            }
        }

        public int ArchiveDirExists(string DirFqn, string MachineID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            DirFqn = UTIL.RemoveSingleQuotes(DirFqn);
            S = S + " SELECT COUNT(*) FROM [DirectoryTemp] where [DirFQN] = '" + DirFqn + "' and [CurrUserGuidID] = '" + modGlobals.gCurrUserGuidID + "' and [MachineID] = '" + MachineID + "'";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    cnt = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                }

                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public void getDbInfo(ref string ProductVersion, ref string ProductLevel, ref string Edition, ref string VersionDesc)
        {
            string S = "";
            S = S + " SELECT SERVERPROPERTY('productversion') as ProductVersion, ";
            S = S + " SERVERPROPERTY ('productlevel') as ProductLevel, ";
            S = S + " SERVERPROPERTY ('edition') as Edition, ";
            S = S + " @@VERSION as VersionDesc";
            CloseConn();
            CkConn();
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                ProductVersion = RSData.GetValue(0).ToString();
                ProductLevel = RSData.GetValue(1).ToString();
                Edition = RSData.GetValue(2).ToString();
                VersionDesc = RSData.GetValue(3).ToString();
                RSData.Close();
                RSData = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            GC.Collect();
            GC.WaitForFullGCComplete();
        }

        public void PopulateAllUserLibCombo(ComboBox cb)
        {
            string S = "";
            try
            {
                cb.Items.Clear();
                S = "";
                S = S + "Select LibraryName from Library order by LibraryName ";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string LibraryName = RSData.GetValue(0).ToString();
                        if (cb.Items.Contains(LibraryName))
                        {
                        }
                        else
                        {
                            cb.Items.Add(LibraryName);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR 33.44.1 - ", ex);
            }
        }

        public void PopulateGroupUserLibCombo(ComboBox cb)
        {
            string S = "";
            bool bIsAdmin = isAdmin(modGlobals.gCurrUserGuidID);
            try
            {
                cb.Items.Clear();
                if (bIsAdmin == true)
                {
                    S = "";
                    S = S + "Select [LibraryName] FROM [Library] order by [LibraryName]";
                }
                else
                {
                    S = "";
                    S = S + "Select distinct LibraryName from GroupLibraryAccess " + Constants.vbCrLf;
                    S = S + " where GroupName in " + Constants.vbCrLf;
                    S = S + " (select distinct GroupName from GroupUsers where UserID = '" + modGlobals.gCurrUserGuidID + "')" + Constants.vbCrLf;
                    S = S + "             union " + Constants.vbCrLf;
                    S = S + " select distinct LibraryName from LibraryUsers where UserID = '" + modGlobals.gCurrUserGuidID + "'" + Constants.vbCrLf;
                    S = S + " and LibraryName in (select LibraryName from Library)" + Constants.vbCrLf;
                    S = S + "             union " + Constants.vbCrLf;
                    S = S + " select LibraryName from Library where UserID = '" + modGlobals.gCurrUserGuidID + "'" + Constants.vbCrLf;
                }

                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string LibraryName = RSData.GetValue(0).ToString();
                        if (cb.Items.Contains(LibraryName))
                        {
                        }
                        else
                        {
                            cb.Items.Add(LibraryName);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR 33.44.1 - ", ex);
            }
        }

        public ArrayList GetUserGroupMembership()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var A = new ArrayList();
            string S = "Select distinct GroupName from GroupUsers where UserID = '" + modGlobals.gCurrUserGuidID + "'";
            try
            {
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string GroupyName = RSData.GetValue(0).ToString();
                        A.Add(GroupyName);
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR GetUserGroupMembership 33.44.2 - ", ex);
            }

            return A;
        }

        public int ckWorkingDirExists(string TypeDir)
        {
            TypeDir = TypeDir.ToUpper();
            string S = "";
            if (TypeDir.Equals("CONTENT"))
            {
                S = S + " select COUNT(*) from SavedItems where ValName = 'CONTENT WORKING DIRECTORY' and Userid = '" + modGlobals.gCurrUserGuidID + "'";
            }

            if (TypeDir.Equals("EMAIL"))
            {
                S = S + " select COUNT(*) from SavedItems where ValName = 'EMAIL WORKING DIRECTORY' and Userid = '" + modGlobals.gCurrUserGuidID + "'";
            }

            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return cnt;
        }

        public bool CreateNewWorkingDir(string TypeDir, string DirName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool B = false;
            DirName = UTIL.RemoveSingleQuotes(DirName);
            int iCnt = 0;
            if (TypeDir.Equals("EMAIL"))
            {
                iCnt = ckWorkingDirExists(TypeDir);
                if (iCnt == 0)
                {
                    S = S + " INSERT INTO [SavedItems]";
                    S = S + " ([Userid]";
                    S = S + " ,[SaveName]";
                    S = S + " ,[SaveTypeCode]";
                    S = S + " ,[ValName]";
                    S = S + " ,[ValValue])";
                    S = S + " VALUES ";
                    S = S + " ('" + modGlobals.gCurrUserGuidID + "'";
                    S = S + " ,'UserStartUpParameters'";
                    S = S + " ,'StartUpParm'";
                    S = S + " ,'EMAIL WORKING DIRECTORY'";
                    S = S + " ,'" + DirName + "')";
                }
                else
                {
                    S = S + " update SavedItems ";
                    S = S + " set ValValue = '" + DirName + "'";
                    S = S + " where ValName = 'EMAIL WORKING DIRECTORY'";
                    S = S + " and Userid = '" + modGlobals.gCurrUserGuidID + "'";
                }

                B = ExecuteSqlNewConn(90111, S);
                if (B)
                {
                    LOG.WriteToArchiveLog("The new EMAIL working directory has been set to : " + DirName + " for User " + modGlobals.gCurrUserGuidID);
                }
                else
                {
                    LOG.WriteToArchiveLog("Failed to set new EMAIL working directory to : " + DirName + " for User " + modGlobals.gCurrUserGuidID);
                }
            }
            else if (TypeDir.Equals("CONTENT"))
            {
                iCnt = ckWorkingDirExists(TypeDir);
                if (iCnt == 0)
                {
                    S = S + " INSERT INTO [SavedItems]";
                    S = S + " ([Userid]";
                    S = S + " ,[SaveName]";
                    S = S + " ,[SaveTypeCode]";
                    S = S + " ,[ValName]";
                    S = S + " ,[ValValue])";
                    S = S + " VALUES ";
                    S = S + " ('" + modGlobals.gCurrUserGuidID + "'";
                    S = S + " ,'UserStartUpParameters'";
                    S = S + " ,'StartUpParm'";
                    S = S + " ,'CONTENT WORKING DIRECTORY'";
                    S = S + " ,'" + DirName + "')";
                }
                else
                {
                    S = S + " update SavedItems ";
                    S = S + " set ValValue = '" + DirName + "'";
                    S = S + " where ValName = 'CONTENT WORKING DIRECTORY'";
                    S = S + " and Userid = '" + modGlobals.gCurrUserGuidID + "'";
                }

                B = ExecuteSqlNewConn(90112, S);
                if (B)
                {
                    LOG.WriteToArchiveLog("The new CONTENT working directory has been set to : " + DirName + " for User " + modGlobals.gCurrUserGuidID);
                }
                else
                {
                    LOG.WriteToArchiveLog("Failed to set new CONTENT working directory to : " + DirName + " for User " + modGlobals.gCurrUserGuidID);
                }
            }

            return B;
        }

        public void ckMissingWorkingDirs()
        {
            int iCnt = 0;
            string TempDirName = DMA.getEnvVarTempDir();
            iCnt = ckWorkingDirExists("EMAIL");
            if (iCnt == 0)
            {
                CreateNewWorkingDir("EMAIL", TempDirName);
            }

            iCnt = ckWorkingDirExists("CONTENT");
            if (iCnt == 0)
            {
                CreateNewWorkingDir("CONTENT", TempDirName);
            }
        }

        public bool ExchangeEmailExists(string EmailIdentifier)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            EmailIdentifier = UTIL.RemoveSingleQuotes(EmailIdentifier);

            // Dim SS As String = "select COUNT(*) from Email where EmailIdentifier = '" + EmailIdentifier + "' and RecHash = '" + RecHash + "'"
            string SS = "select COUNT(*) from Email where EmailIdentifier = '" + EmailIdentifier + "' ";
            int iCnt = iCount(SS);
            if (iCnt == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public bool ExchangeEmailExistsV2(string EmailIdentifier, string RecHash)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            EmailIdentifier = UTIL.RemoveSingleQuotes(EmailIdentifier);

            // Dim SS As String = "select COUNT(*) from Email where EmailIdentifier = '" + EmailIdentifier + "' and RecHash = '" + RecHash + "'"
            string SS = "select COUNT(*) from Email where EmailIdentifier = '" + EmailIdentifier + "' ";
            int iCnt = iCount(SS);
            if (iCnt == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public bool isArchiveDisabled(string ArchiveTypeCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool b = false;
            try
            {
                if (ArchiveTypeCode.Equals("EXCHANGE"))
                {
                    S = "Select ParmValue from RunParms where Parm = 'ExchangeDisabled' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
                }
                else if (ArchiveTypeCode.Equals("CONTENT"))
                {
                    S = "Select ParmValue from RunParms where Parm = 'ContentDisabled' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
                }
                else if (ArchiveTypeCode.Equals("EMAIL"))
                {
                    S = "Select ParmValue from RunParms where Parm = 'OutlookDisabled' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
                }
                else if (ArchiveTypeCode.Equals("ALL"))
                {
                    S = "Select ParmValue from RunParms where Parm = 'ckDisable' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
                }
                else
                {
                    return false;
                }

                string ParmVal = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    ParmVal = RSData.GetValue(0).ToString();
                    if (ParmVal.ToUpper().Equals("TRUE"))
                    {
                        b = true;
                    }
                    else
                    {
                        b = false;
                    }
                }
                else
                {
                    b = false;
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR - isArchiveDisabled : ", ex);
                b = false;
            }

            GC.Collect();
            GC.WaitForFullGCComplete();
            return b;
        }

        public void WriteXMLData(string TblName, string FQN)
        {
            getRepoConnStr();
            string S = "Select * from " + TblName;
            var dsXmlData = new DataSet();
            var cn = new SqlConnection(gConnStr);
            var daTempData = new SqlDataAdapter(S, cn);

            // Load data from database
            daTempData.Fill(dsXmlData, TblName);

            // Write XML to file
            dsXmlData.WriteXml(FQN);
        }

        public void LoadRsFromXML(string TblName, string FQN)
        {
            getRepoConnStr();
            string S = "Select * from " + TblName;
            var daSvr = new SqlDataAdapter(S, gConn);
            var DsSvr = new DataSet();
            daSvr.Fill(DsSvr, TblName);
            var dsXml = new DataSet();
            // Read in XML from file
            dsXml.ReadXml(FQN);
            int iCols = DsSvr.Tables[0].Columns.Count;
            DataTable DT;
            DT = DsSvr.Tables[0];
            var myBuilder = new SqlCommandBuilder(daSvr);
            myBuilder.GetUpdateCommand();
            daSvr.UpdateCommand = myBuilder.GetUpdateCommand();
            daSvr.InsertCommand = myBuilder.GetInsertCommand();
            if (modGlobals.gClipBoardActive == true)
                Console.WriteLine(myBuilder.GetUpdateCommand());
            if (modGlobals.gClipBoardActive == true)
                Console.WriteLine(daSvr.UpdateCommand.ToString());
            for (int I = 0, loopTo = dsXml.Tables[0].Rows.Count - 1; I <= loopTo; I++)
            {
                DataRow DR = null;
                DR = DT.NewRow();
                for (int II = 0, loopTo1 = iCols - 1; II <= loopTo1; II++)
                    DR[II] = dsXml.Tables[0].Rows[I][II];
                DT.Rows.Add(DR);
                try
                {
                    daSvr.Update(DsSvr, TblName);
                }
                catch (Exception ex)
                {
                    if (Strings.InStr(ex.Message.ToString(), "duplicate key", CompareMethod.Text) > 0)
                    {
                        Console.WriteLine("ERROR clsDatabaseARCH:LoadRsFromXML - ", ex);
                    }
                    else
                    {
                        LOG.WriteToArchiveLog("ERROR clsDatabaseARCH:LoadRsFromXML - ", ex);
                    }
                }

                DR = null;
            }

            daSvr.Update(DsSvr, TblName);
            daSvr.Dispose();
            daSvr = null;
        }

        public bool FixIdExists(int ID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool B = false;
            S = S + " select count(*) from [DB_Updates] where FixID = " + ID.ToString();
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                RSData.Read();
                cnt = RSData.GetInt32(0);
                RSData.Close();
                RSData = null;
                CMD.Connection.Close();
                CMD = null;
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            if (cnt > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public void InitializeServiceParameters()
        {
            string S = "";
            bool B = false;
            B = SysParmExists("srv_LogDirectory");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_LogDirectory','Set to blank for default. Change where the service logs are written. This directory is relative to the SERVICE machine.','','Y')";
                B = ExecuteSqlNewConn(90113, S);
            }

            B = SysParmExists("srv_DetailedLogging");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_DetailedLogging','When set to 0 no logging will be limited, when 1, full execution details will be logged.','0','Y')";
                B = ExecuteSqlNewConn(90114, S);
            }

            B = SysParmExists("srv_MaxFileSize");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_MaxFileSize','When set to 0 no limit on upload file size, any other value set the max limit.','0','Y')";
                B = ExecuteSqlNewConn(90115, S);
            }

            B = SysParmExists("srv_disable");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_disable','When set to anything other than 0 the ECM Service will continue to run but will NOT archive.','0','Y')";
                B = ExecuteSqlNewConn(90116, S);
            }

            B = SysParmExists("srv_shutdown");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_shutdown','When set to 1, the service (next poll) will stop running.','0','Y')";
                B = ExecuteSqlNewConn(90117, S);
            }

            B = SysParmExists("srv_PollingInterval");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_PollingInterval','This is the number of MINUTES between executing an archive.','60','Y')";
                B = ExecuteSqlNewConn(90118, S);
            }

            B = SysParmExists("srv_ArchiveNow");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_ArchiveNow','Set this value to a 1 to set the archive state to immediate."; // ,'0','Y')"
                B = ExecuteSqlNewConn(90119, S);
            }

            B = SysParmExists("srv_LastArchive");
            if (B == false)
            {
                S = "insert into SystemParms (SysParm,SysParmDesc,SysParmVal,flgActive)";
                S = S + " values ('srv_LastArchive','This is the datetime of the last completed archive.','" + DateAndTime.Now.ToString() + "','Y')";
                B = ExecuteSqlNewConn(90120, S);
            }
        }

        public bool SysParmExists(string ParmName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            int I = 0;
            string ConnStr = getRepoConnStr();
            try
            {
                string S = "Select count(*) FROM [SystemParms] where [SysParm] = '" + ParmName + "'";
                var dsSharePoint = SqlQryNewConn(S, ConnStr);
                if (dsSharePoint.HasRows)
                {
                    dsSharePoint.Read();
                    I = dsSharePoint.GetInt32(0);
                    if (I > 0)
                    {
                        B = true;
                    }
                    else
                    {
                        B = false;
                    }
                }
                else
                {
                    B = false;
                }

                dsSharePoint.Close();
                dsSharePoint = null;
            }
            catch (Exception ex)
            {
                B = false;
                LOG.WriteToArchiveLog("SysParmExists: 100 - " + ex.Message + Constants.vbCrLf + ConnStr + Constants.vbCrLf);
            }

            return B;
        }

        public void AddDefaultRetentionCode()
        {
            string UID = getUserGuidID("admin");
            string S = "INSERT INTO [Retention]";
            S = S + " ([RetentionCode]";
            S = S + " ,[RetentionDesc]";
            S = S + " ,[RetentionUnits]";
            S = S + " ,[RetentionAction]";
            S = S + " ,[ManagerID]";
            S = S + " ,[ManagerName])";
            S = S + " VALUES ";
            S = S + " ('R-10'";
            S = S + " ,'Retain for 10 years.'";
            S = S + " ,10";
            S = S + " ,'Move'";
            S = S + " ,'admin'";
            S = S + " ,'admin')";
            bool b = ExecuteSqlNewConn(S, false);
        }

        public void updateIp(string HostName, string IP, int checkCode)
        {
            // 0 = add if new 1 = update access count 2 = update search count 2 = update access count and
            // search count
            bool B = false;
            string S = "";
            if (checkCode == 0)
            {
                S = "Select count(*) from IP where HostName ='" + HostName + "' and AccessingIP = '" + IP + "'";
                string WC = "where  HostName ='" + HostName + "' and AccessingIP = '" + IP + "'";
                int iCnt = iGetRowCount("IP", WC);
                if (iCnt == 0)
                {
                    S = "INSERT INTO [IP]";
                    S = S + " (HostName, [AccessingIP]";
                    S = S + " ,[AccessCnt]";
                    S = S + " ,[BlockIP]";
                    S = S + " ,[SearchCnt]";
                    S = S + " ,[FirstAccessDate]";
                    S = S + " ,[LastAccessDate])";
                    S = S + " VALUES ";
                    S = S + " ('" + HostName + "', '" + IP + "'";
                    S = S + " ,1";
                    S = S + " ,0";
                    S = S + " ,0";
                    S = S + " ,'" + DateAndTime.Now.ToString() + "'";
                    S = S + " ,'" + DateAndTime.Now.ToString() + "')";
                    B = ExecuteSqlNewConn(90121, S);
                    if (B == false)
                    {
                        xTrace(952, "updateIp: Failed to add IP - " + IP, "updateIp");
                    }
                }
            }
            else if (checkCode == 1)
            {
                S = "update [IP] set LastAccessDate = '" + DateAndTime.Now.ToString() + "', AccessCnt = AccessCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' ";
                B = ExecuteSqlNewConn(90122, S);
                if (B == false)
                {
                    xTrace(953, "updateIp: Failed to update IP - " + IP, "updateIp");
                }
            }
            else if (checkCode == 2)
            {
                S = "update [IP] set LastAccessDate = '" + DateAndTime.Now.ToString() + "', SearchCnt = SearchCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' ";
                B = ExecuteSqlNewConn(90123, S);
                if (B == false)
                {
                    xTrace(954, "updateIp: Failed to add IP - " + IP, "updateIp");
                }
            }
            else if (checkCode == 3)
            {
                S = "update [IP] set LastAccessDate = '" + DateAndTime.Now.ToString() + "', SearchCnt = SearchCnt + 1, AccessCnt = AccessCnt + 1 where HostName ='" + HostName + "' and AccessingIP = '" + IP + "' ";
                B = ExecuteSqlNewConn(90124, S);
                if (B == false)
                {
                    xTrace(955, "updateIp: Failed to add IP - " + IP, "updateIp");
                }
            }
        }

        public bool UpdateDoNotChangeHelpText(string WhereClause, string ScreenName, string WidgetName, string WidgetText)
        {
            bool b = false;
            string s = "";
            if (Strings.Len(WhereClause) == 0)
                return false;
            s = s + " update HelpText set ";
            s = s + "ScreenName = '" + ScreenName + "'" + ", ";
            s = s + "WidgetName = '" + WidgetName + "'" + ", ";
            s = s + "WidgetText = '" + WidgetText + "'";
            WhereClause = " " + WhereClause;
            s = s + WhereClause;
            b = ExecuteSqlNewConn(s, false);
            return b;
        }

        public bool isClientOnly(string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            string S = "Select ClientOnly from Users where UserID = '" + UserID + "'";
            try
            {
                CloseConn();
                CkConn();
                var CMD = new SqlCommand(S, gConn);
                SqlDataReader RSData = null;
                using (gConn)
                {
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        RSData.Read();
                        try
                        {
                            B = RSData.GetBoolean(0);
                        }
                        catch (Exception ex)
                        {
                            B = false;
                        }

                        RSData.Close();
                        RSData = null;
                        CMD.Connection.Close();
                        CMD = null;
                    }
                    else
                    {
                        B = false;
                    }
                }

                if (RSData is object)
                {
                    RSData = null;
                }

                if (CMD is object)
                {
                    CMD = null;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERR: isClientOnly - ", ex);
                LOG.WriteToArchiveLog("ERR: isClientOnly - " + ex.StackTrace);
                B = false;
            }

            return B;
        }

        public bool isSingleInstance()
        {
            // select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool B = false;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    string tVal = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                    B = false;
                    if (tVal.Equals("Y") | tVal.Equals("y"))
                    {
                        B = true;
                    }

                    if (tVal.Equals("1"))
                    {
                        B = true;
                    }
                }
                else
                {
                    B = false;
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return B;
        }

        public bool isExtendedPdfProcessing()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            string S = "";
            bool B = true;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EcmPDFX' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    string tVal = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                    B = false;
                    if (tVal.Equals("Y") | tVal.Equals("y"))
                    {
                        B = true;
                    }

                    if (tVal.Equals("1"))
                    {
                        B = true;
                    }
                }
                else
                {
                    B = false;
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return B;
        }

        public string getPdfProcessingDir()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            string S = "";
            bool B = true;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EcmPDFdir' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    S = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                }
                else
                {
                    B = false;
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            if (S.Length == 0)
            {
                string InsertSql = "";
                InsertSql = @"INSERT [dbo].[SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_EcmPDFdir', 'Set this as the temporary PDF/Graphics processing directory. NO SPACES ALLOWED IN NAME.', 'C:\TEMP\PdfProcessing\', NULL, NULL, NULL, NULL)";
                ExecuteSqlNewConn(90125, InsertSql);
                S = @"C:\TEMP\PdfProcessing\";
            }

            return S;
        }

        public bool isPublicAllowed()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            bool B = false;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_AllowPublic' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    string tVal = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                    B = false;
                    if (tVal.Equals("Y") | tVal.Equals("y"))
                    {
                        B = true;
                    }
                    else if (tVal.Equals("1"))
                    {
                        B = true;
                    }
                    else
                    {
                        B = false;
                    }
                }
                else
                {
                    B = true;
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return B;
        }

        public void setMaxFileUploadSize()
        {
            string S = "";
            bool B = false;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_MaxFileSize' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            double MaxSize = 0d;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    string tVal = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                    modGlobals.gMaxSize = Conversions.ToInteger(tVal);
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            CloseConn();
        }

        public bool ShowGraphicMetaDataScreen()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // select SysParmVal from SystemParms where SysParm = 'SYS_SingleInstance'
            string S = "";
            bool B = false;
            S = S + " select SysParmVal from SystemParms where SysParm = 'SYS_EmbededJPGMetadata' ";
            CloseConn();
            CkConn();
            int cnt = -1;
            var CMD = new SqlCommand(S, gConn);
            SqlDataReader RSData = null;
            using (gConn)
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    string tVal = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    CMD.Connection.Close();
                    CMD = null;
                    B = false;
                    if (tVal.Equals("Y") | tVal.Equals("y"))
                    {
                        B = true;
                    }

                    if (tVal.Equals("1"))
                    {
                        B = true;
                    }
                }
                else
                {
                    B = false;
                }
            }

            if (RSData is object)
            {
                RSData = null;
            }

            if (CMD is object)
            {
                CMD = null;
            }

            return B;
        }

        // Sub LoadDefaultSystemParms()
        // Dim S  = ""
        // Dim I As Integer = 0

        // S = "Select count(*) from SystemParms where SysParm = 'Default Thesaurus'" I = iCount(S) If I =
        // 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('MaxUrlsToProcess', 'The number of
        // levels to penetrate in a web site.', '2', NULL, NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90126,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'EmailFolder1'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('Default Thesaurus', 'This is the
        // thesaurus that will be used when a specific thesaurus is not specified.', 'Roget', NULL, NULL,
        // NULL, NULL)" Me.ExecuteSqlNewConn(90127,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'MaxSearchesToTrack'" I = iCount(S) If I
        // = 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('RETENTION YEARS', 'The default number
        // years to retain content.', '10', 'N', NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90128,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'MaxUrlsToProcess'" I = iCount(S) If I =
        // 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('EmailFolder1', 'This is the Top Level
        // folder name and is required. It can be overridden for an individual user using the APP.CONFIG
        // file, entry name EmailFolder1', 'Personal Folders', 'Y', NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90129,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'RETENTION YEARS'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SharePointVirtualLimit', 'When there
        // are less records than this number, then a linked list is used for PURE speed.', '100001', 'Y',
        // NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90130,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'SharePointECMVirtualLimit'" I =
        // iCount(S) If I = 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc],
        // [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES
        // ('SharePointECMVirtualLimit', 'When there are less records than this number, then a linked list
        // is used for PURE speed.', '1000001', 'Y', NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90131,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'SharePointVirtualLimit'" I = iCount(S)
        // If I = 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal],
        // [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_disable', 'When set
        // to anything other than 0 the ECM Service will continue to run but will NOT archive.', '0', 'Y',
        // NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90132,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'SqlServerTimeout'" I = iCount(S) If I =
        // 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_PollingInterval', 'This is the
        // number of MINUTES between executing an archive.', '60', 'Y', NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90133,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'srv_disable'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_LastArchive', 'This is the
        // datetime of the last completed archive.', '10/22/2009 7:58:57 PM', 'Y', NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90134,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'srv_LastArchive'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('MaxSearchesToTrack', 'The number of
        // searches the user has in their immediate history.', '25', NULL, NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90135,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'srv_PollingInterval'" I = iCount(S) If I
        // = 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SqlServerTimeout', 'This is the value
        // that will be assigned to the SQL Server timeout for users that do not have a specific timeout
        // established.', '90', NULL, NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90136,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'srv_shutdown'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('srv_shutdown', 'When set to 1, the
        // service (next poll) will stop running.', '0', 'Y', NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90137,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'SYS_SingleInstance'" I = iCount(S) If I
        // = 0 Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_SingleInstance', 'When set to 1,
        // ECM will store just 1 copy of an archive.', '0', NULL, NULL, NULL, NULL)"
        // Me.ExecuteSqlNewConn(90138,S) End If

        // S = "Select count(*) from SystemParms where SysParm = 'SYS_AllowPublic'" I = iCount(S) If I = 0
        // Then S = " INSERT into [SystemParms] ([SysParm], [SysParmDesc], [SysParmVal], [flgActive],
        // [isDirectory], [isEmailFolder], [flgAllSubDirs]) VALUES ('SYS_AllowPublic', 'When set to 1, ECM
        // will allow a user to set their content so it can be viewed by all users, otherwise, only they
        // can see their content.', '0', NULL, NULL, NULL, NULL)" Me.ExecuteSqlNewConn(90139,S) End If

        // End Sub

        public Guid getContainerGuid(string ContainerName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ContainerName = Strings.Mid(ContainerName, 1, 449);
            ContainerName = UTIL.RemoveSingleQuotes(ContainerName);
            string S = "Select ContainerGuid from Container where ContainerName = '" + ContainerName + "' ";
            string S2 = "Select Count(*) from Container where ContainerName = '" + ContainerName + "' ";
            Guid TgtGuid;
            int iCnt = iCount(S2);
            if (iCnt == 0)
            {
                TgtGuid = Guid.NewGuid();
                S2 = "INSERT INTO [Container]([ContainerGuid],[ContainerName])VALUES('" + TgtGuid.ToString() + "', '" + ContainerName + "')";
                bool B = ExecuteSqlNewConn(90140, S2);
                if (B == false)
                {
                    return default;
                }
            }

            try
            {
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                TgtGuid = rsData.GetGuid(0);
                rsData.Close();
                rsData = null;
            }
            catch (Exception ex)
            {
                // xTrace(12455, "clsDataBase:getContainerGuid" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getContainerGuid : 4445 : ", ex);
                TgtGuid = default;
            }

            return TgtGuid;
        }

        public bool SaveContentContainer(Guid ContainerGuid, Guid ContentUserRowGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = true;
            string S = "";
            if (ContainerGuid.Equals(Guid.Empty))
            {
                // LOG.WriteToArchiveLog("NOTICE SaveContentContainer 77342.A1 - ContainerGuid is EMPTY.")
                return false;
            }

            if (ContentUserRowGuid.Equals(Guid.Empty))
            {
                // LOG.WriteToArchiveLog("NOTICE SaveContentContainer 77342.A2 - ContentUserRowGuid is EMPTY.")
                return false;
            }

            try
            {
                S += " if not exists (select ContainerGuid from [ContentContainer] where [ContentUserRowGuid] = '" + ContentUserRowGuid.ToString() + "' and [ContainerGuid] = '" + ContainerGuid.ToString() + "')" + Constants.vbCrLf;
                S += " begin " + Constants.vbCrLf;
                S += " INSERT INTO [ContentContainer]" + Constants.vbCrLf;
                S += " ([ContentUserRowGuid]" + Constants.vbCrLf;
                S += " ,[ContainerGuid])" + Constants.vbCrLf;
                S += " VALUES " + Constants.vbCrLf;
                S += " ('" + ContentUserRowGuid.ToString() + "'" + Constants.vbCrLf;
                S += " ,'" + ContainerGuid.ToString() + "')" + Constants.vbCrLf;
                S += " END" + Constants.vbCrLf;
                B = ExecuteSqlNewConn(90141, S);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR SaveContentContainer 77342.B - Failed to insert content container: " + Constants.vbCrLf + S);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR SaveContentContainer 77342.C - Failed to insert content container: " + Constants.vbCrLf + S);
            }

            return B;
        }

        public bool saveContentOwner(string ContentGuid, string UserID, string ContentTypeCode, string ContainerName, string MachineName, string NetworkName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // AddHandler currDomain.UnhandledException, AddressOf MYExnHandler
            // AddHandler Application.ThreadException, AddressOf MYThreadHandler

            int iCnt = 0;
            string S = "";
            string MachineGuid = "\"";
            Guid ContainerGuid = default;
            Guid contentUserRowGuid = default;
            bool BB = SaveContentContainer(ContainerGuid, contentUserRowGuid);
            try
            {
                if (!slMachineNetwork.ContainsKey(MachineName + "|" + NetworkName))
                {
                    MachineGuid = MachineRegister(MachineName, NetworkName);
                    slMachineNetwork.Add(MachineName + "|" + NetworkName, MachineGuid);
                }
                else
                {
                    MachineGuid = slMachineNetwork[MachineName + "|" + NetworkName];
                }

                if (!slContainerGuid.ContainsKey(ContainerName))
                {
                    ContainerGuid = getContainerGuid(ContainerName);
                    slContainerGuid.Add(ContainerName, ContainerGuid);
                }
                else
                {
                    ContainerGuid = getContainerGuid(ContainerName);
                }

                S = "Select count(*) from ContentUser where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "'";
                iCnt = iCount(S);
                if (iCnt == 0)
                {
                    try
                    {
                        S = "INSERT INTO [ContentUser] ([ContentGuid] ,[UserID], ContentTypeCode, NbrOccurances) VALUES ('" + ContentGuid + "' ,'" + UserID + "' ,'" + ContentTypeCode + "', 1)";
                        bool B = ExecuteSqlNewConn(90142, S);
                        if (!B)
                        {
                            // xTrace(88652, "saveContentOwner", "ERROR: AddContentOwner - " + vbCrLf + S)
                            LOG.WriteToArchiveLog("ERROR: AddContentOwner 00 - " + S);
                        }
                        else
                        {
                            saveMachine(MachineGuid, ContentGuid, UserID);
                        }
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("ERROR: AddContentOwner - ", ex);
                    }
                }
                else
                {
                    try
                    {
                        S = "update [ContentUser] set nbrOccurances = nbrOccurances + 1, LastAdded = getdate() where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "'";
                        bool B = ExecuteSqlNewConn(90142, S);
                        if (!B)
                        {
                            // xTrace(88652, "saveContentOwner", "ERROR: AddContentOwner 01 - " + vbCrLf + S)
                            LOG.WriteToArchiveLog("ERROR: AddContentOwner - " + S);
                        }
                        else
                        {
                            saveMachine(MachineGuid, ContentGuid, UserID);
                        }
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("Error 100 - CLSDBARCH : saveContentOwner: ", ex);
                        LOG.WriteToArchiveLog("Error 101 - CLSDBARCH : saveContentOwner: " + ex.StackTrace);
                    }
                }

                contentUserRowGuid = getContentUserGuid(ContentGuid, UserID);
                BB = SaveContentContainer(ContainerGuid, contentUserRowGuid);
                return BB;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error 200 - CLSDBARCH : saveContentOwner: ", ex);
                LOG.WriteToArchiveLog("Error 201 - CLSDBARCH : saveContentOwner: " + ex.StackTrace);
            }

            return default;

            // RemoveHandler currDomain.UnhandledException, AddressOf MYExnHandler
            // RemoveHandler Application.ThreadException, AddressOf MYThreadHandler

        }

        /// <summary>
    /// Saves the machine by name and the associated peice of content on that machine.
    /// </summary>
    /// <param name="MachineName">Name of the machine.</param>
    /// <param name="SourceGuid"> The source GUID.</param>
    /// <param name="UserID">     The user ID.</param>
        public void saveMachine(string MachineName, string SourceGuid, string UserID)
        {
            string MySql = "";
            MySql += "  if NOT exists (Select MachineName from Machine " + Constants.vbCrLf;
            MySql += "      where MachineName = '" + MachineName + "' " + Constants.vbCrLf;
            MySql += "      and SourceGuid = '" + SourceGuid + "' " + Constants.vbCrLf;
            MySql += "      and UserID = '" + UserID + "')" + Constants.vbCrLf;
            MySql += "  Begin " + Constants.vbCrLf;
            MySql += "      INSERT INTO [Machine] (SourceGuid, MachineName, UserID) VALUES ('" + SourceGuid + "','" + MachineName + "', '" + UserID + "' )" + Constants.vbCrLf;
            MySql += "  End" + Constants.vbCrLf;
            bool BB = ExecuteSqlNewConn(90143, MySql);
            if (!BB)
            {
                // xTrace(334561, "SaveMachine", "ERRROR 77623.11 - Failed to add Machine: " + vbCrLf + MySql)
                LOG.WriteToArchiveLog("ERRROR 77623.11 - Failed to add Machine.");
            }
        }

        /// <summary>
    /// Gets the content GUID based on the name of the File/Email and the HASH code.
    /// </summary>
    /// <param name="SourceName">Name of the source document.</param>
    /// <param name="CrcHash">   The CRC hash.</param>
    /// <returns></returns>
        public string getContentGuid(string SourceName, string CrcHash)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SourceName = UTIL.RemoveSingleQuotes(SourceName);
            string S = "Select SourceGuid from DataSource where SourceName = '" + SourceName + "' and CRC = " + CrcHash + " ";
            string TgtGuid = "";
            try
            {
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    rsData.Read();
                    TgtGuid = rsData.GetString(0);
                }

                rsData.Close();
                rsData = null;
            }
            catch (Exception ex)
            {
                // xTrace(12455, "clsDataBase:getContentUserGuid" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getContentUserGuid : 4445 : ", ex);
                TgtGuid = null;
            }

            return TgtGuid;
        }

        public Guid getContentUserGuid(string ContentGuid, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select ContentUserRowGuid from ContentUser where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "' ";
            Guid TgtGuid;
            try
            {
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                TgtGuid = rsData.GetGuid(0);
                rsData.Close();
                rsData = null;
            }
            catch (Exception ex)
            {
                // xTrace(12455, "clsDataBase:getContentUserGuid" + ex.Message)
                LOG.WriteToArchiveLog("clsDatabaseARCH : getContentUserGuid : 4445 : ", ex);
                TgtGuid = default;
            }

            return TgtGuid;
        }

        public bool ContentOwnerExists(string ContentGuid, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int iCnt = 0;
            string S = "";
            S = "Select count(*) from ContentUser where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "'";
            iCnt = iCount(S);
            if (iCnt == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public void SyncSourceOwners()
        {
            var SqlStmts = new List<string>();
            string S = "Select Count(*) from DataSource";
            int iCnt = iCount(S);
            int I = 0;
            // frmreconMain.SB.Text = "0 of " + iCnt.ToString

            S = "Select SourceGuid, DataSourceOwnerUserID from DataSource where [SourceGuid] not in (Select SourceGuid from [ContentUser]) ";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    I += 1;
                    if (I % 100 == 0)
                    {
                        // frmreconMain.SB.Text = I.ToString + " of " + iCnt.ToString
                        // 'FrmMDIMain.Refresh()
                        Application.DoEvents();
                    }

                    string SourceGuid = RSData.GetValue(0).ToString();
                    string DataSourceOwnerUserID = RSData.GetValue(0).ToString();
                    // Dim B As Boolean = ContentOwnerExists(SourceGuid , gCurrUserGuidID)
                    // If Not B Then
                    S = "INSERT INTO [ContentUser] ([ContentGuid] ,[UserID], NbrOccurances) VALUES ('" + SourceGuid + "' ,'" + DataSourceOwnerUserID + "', 1)";
                    SqlStmts.Add(S);
                    // End If
                }
            }

            RSData.Close();
            RSData = null;
            var loopTo = SqlStmts.Count - 1;
            for (I = 0; I <= loopTo; I++)
            {
                if (I % 100 == 0)
                {
                    // frmreconMain.SB.Text = "+ " + I.ToString + " of " + iCnt.ToString
                    // 'FrmMDIMain.Refresh()
                    Application.DoEvents();
                }

                S = SqlStmts[I];
                bool B = ExecuteSqlNewConn(90144, S);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: SyncSourceOwners - " + S);
                }
            }
        }

        public void ckRunAtStartUp()
        {
            string C = "";
            bool RunAtStart = false;
            C = getRconParm(modGlobals.gCurrUserGuidID, "LoadAtStartup");
            if (C.Length > 0)
            {
                if (C.Equals("True"))
                {
                    RunAtStart = true;
                }
                else if (C.Equals("False"))
                {
                    RunAtStart = false;
                }
                else
                {
                    return;
                }

                try
                {
                    string aPath = "";
                    aPath = System.Reflection.Assembly.GetExecutingAssembly().Location;
                    if (RunAtStart)
                    {
                        var oReg = Registry.CurrentUser;
                        // Dim oKey As RegistryKey = oReg.OpenSubKey("HKEY_CURRENT_USER\Software\Microsoft\Windows\CurrentVersion\Run", True)
                        var oKey = oReg.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);
                        oKey.CreateSubKey("EcmLibrary");
                        oKey.SetValue("EcmLibrary", aPath);
                        oKey.Close();
                    }
                    else
                    {
                        var oReg = Registry.CurrentUser;
                        var oKey = oReg.OpenSubKey(@"Software\Microsoft\Windows\CurrentVersion\Run", true);
                        oKey.CreateSubKey("EcmLibrary");
                        oKey.SetValue("EcmLibrary", "");
                        oKey.DeleteSubKey("EcmLibrary");
                        oKey.Close();
                    }
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR ckRunAtStartUp 102.22.1 - Failed to set start up parameter." + Constants.vbCrLf + ex.Message);
                }
            }
        }

        public void RegisterMachineToDB(string MachineName)
        {
            MachineName = UTIL.RemoveSingleQuotes(MachineName);
            int iCnt = iGetRowCount("MachineRegistered", " Where MachineName = '" + MachineName + "' ");
            if (iCnt == 0)
            {
                string S = "";
                bool B = false;
                S = "Insert into MachineRegistered (MachineName,CreateDate,LastUpdate) values ('" + MachineName + "', '" + DateAndTime.Now.ToString() + "', '" + DateAndTime.Now.ToString() + "')";
                B = ExecuteSqlNewConn(90145, S);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR RegisterMachineToDB 100 - Failed to add machine ID." + Constants.vbCrLf + S);
                }
            }
        }

        public bool isMachineRegistered(string MachineName)
        {
            MachineName = UTIL.RemoveSingleQuotes(MachineName);
            int iCnt = iGetRowCount("MachineRegistered", " Where MachineName = '" + MachineName + "' ");
            if (iCnt == 0)
            {
                return false;
            }
            else
            {
                return true;
            }
        }

        public void RegisterEcmClient(string MachineName)
        {
            int iCnt = 0;
            MachineName = UTIL.ReplaceSingleQuotes(MachineName);
            iCnt = iCount("Select count(*) from LoginClient where MachineName = '" + MachineName + "'");
            if (iCnt == 0)
            {
                string S = "Insert into LoginClient (MachineName) values ('" + MachineName + "') ";
                bool B = ExecuteSqlNewConn(90146, S);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: RegisterEcmClient - Failed to register client for " + MachineName + ".");
                }
            }
        }

        public bool isDirAdminDisabled(string UserID, string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = false;
            try
            {
                string S = "Select count(*) from Directory where UserID = '" + UserID + "' and FQN = '" + FQN + "' and AdminDisabled = 1";
                int I = iCount(S);
                if (I >= 1)
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR clsDatabaseARCH:isDirAdminDisabled 100 - ", ex);
                B = false;
            }

            return B;
        }

        public string getFolderNameById(string FolderID)
        {
            bool b = true;
            string S = "";
            S = "Select [FolderName]      ";
            S = S + " FROM [EmailFolder]";
            S = S + " where [FolderID] = '" + FolderID + "' and Userid = '" + modGlobals.gCurrUserGuidID + "' ";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            // log.WriteToArchiveLog("*** FOLDER NOTICE getFolderNameById ID 001z - : " + id + vbCrLf + S)
            return id;
        }

        public string getFolderIdByName(string FolderName, string UID)
        {
            FolderName = UTIL.RemoveSingleQuotes(FolderName);
            bool b = true;
            string S = "";
            S = "Select [FolderID]      ";
            S = S + " FROM [EmailFolder]";
            S = S + " where [FolderName] = '" + FolderName + "' and UserID = '" + UID + "' ";
            int i = 0;
            string id = "";
            SqlDataReader rsData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            rsData = command.ExecuteReader();
            if (rsData.HasRows)
            {
                rsData.Read();
                id = rsData.GetValue(0).ToString();
            }
            else
            {
                id = "";
            }

            rsData.Close();
            rsData = null;
            return id;
        }

        public void RemoveLibraryDirectories(string DirectoryName, string LibraryName)
        {
            DirectoryName = UTIL.RemoveSingleQuotes(DirectoryName);
            string s = "";
            s = s + " select count(*) from LibraryItems";
            s = s + " where LibraryName = '" + LibraryName + "'";
            s = s + " and SourceGuid in (select SourceGuid from DataSource where FileDirectory = '" + DirectoryName + "')";
            int icnt = iCount(s);
            if (icnt == 0)
            {
                MessageBox.Show("No archived DOCUMENTS associated with Library '" + LibraryName + "/" + DirectoryName + "', returning.");
            }
            else
            {
                MessageBox.Show("There are " + icnt.ToString() + " DOCUMENTS associated with Library '" + LibraryName + "/" + DirectoryName + "', removing the association.");
            }

            LOG.WriteToArchiveLog("INFO RemoveLibraryDirectories: removed " + icnt.ToString() + " rows from directory " + DirectoryName + " in library " + LibraryName + ".");
            string ULogin = getUserLoginByUserid(modGlobals.gCurrUserGuidID);
            s = "";
            s = s + " DELETE FROM LibraryItems ";
            s = s + " where LibraryName = '" + LibraryName + "'";
            s = s + " and SourceGuid in (select SourceGuid from DataSource where FileDirectory = '" + DirectoryName + "')";
            bool B = ExecuteSqlNewConn(90147, s);
            if (B == true)
            {
                string Msg = "Notice: Directory '" + DirectoryName + "' was removed from library '" + LibraryName + "' by User '" + ULogin + "'";
                LOG.WriteToArchiveLog(Msg);
                AddSysMsg(Msg);
            }
            else
            {
                string Msg = "Notice: Directory '" + DirectoryName + "' FAILED to remove from library '" + LibraryName + "' by User '" + ULogin + "'";
                LOG.WriteToArchiveLog(Msg);
                AddSysMsg(Msg);
            }
        }

        public void RemoveLibraryEmails(string FolderName, string LibraryName, string UserID)
        {
            string s = "";
            string CurrentmailFolderID = getFolderIdByName(FolderName, UserID);
            s = s + " select count(*) from LibraryItems";
            s = s + " where LibraryName = '" + LibraryName + "'";
            s = s + " and SourceGuid in (select EmailGuid from Email where OriginalFolder = '" + FolderName + "')";
            int icnt = iCount(s);
            if (icnt == 0)
            {
                MessageBox.Show("No archived emails associated with Library '" + LibraryName + "/" + FolderName + "', returning.");
            }
            else
            {
                MessageBox.Show("There are " + icnt.ToString() + " emails associated with Library '" + LibraryName + "/" + FolderName + "', removing the association.");
            }

            LOG.WriteToArchiveLog("INFO: RemoveLibraryEmails removed " + icnt.ToString() + " records from email folder + " + FolderName + " and Library " + LibraryName + ".");
            s = "";
            s = s + " delete from LibraryItems";
            s = s + " where LibraryName = '" + LibraryName + "'";
            s = s + " and SourceGuid in (select EmailGuid from Email where OriginalFolder = '" + FolderName + "')";
            bool B = ExecuteSqlNewConn(90148, s);
            if (B == true)
            {
                string Msg = "Notice: EMAIL Folder '" + FolderName + "' was removed from library '" + LibraryName + "' by User '" + UserID + "'";
                LOG.WriteToArchiveLog(Msg);
                AddSysMsg(Msg);
            }
            else
            {
                string Msg = "Notice: EMAIL Folder '" + FolderName + "' - FAILED to remove from library '" + LibraryName + "' by User '" + UserID + "'";
                LOG.WriteToArchiveLog(Msg);
                AddSysMsg(Msg);
            }
        }

        public void AddLibraryDirectory(string FolderName, string LibraryName, string UserID, ref int RecordsAdded, bool bAddSubDir)
        {
            // select sourceguid,SourceName,OriginalFileType from DataSource where FileDirectory = 'c:\temp'
            RecordsAdded = 0;
            string s = "Select count(*) from DataSource where FileDirectory = '" + FolderName + "' and DataSourceOwnerUserID = '" + UserID + "' ";
            if (bAddSubDir)
            {
                s = "Select count(*) from DataSource where FileDirectory like '" + FolderName + "%' and DataSourceOwnerUserID = '" + UserID + "' ";
            }
            else
            {
                s = "Select count(*) from DataSource where FileDirectory = '" + FolderName + "' and DataSourceOwnerUserID = '" + UserID + "' ";
            }

            int iCnt = iCount(s);
            if (iCnt == 0)
            {
                return;
            }

            if (bAddSubDir)
            {
                s = "Select sourceguid,SourceName,OriginalFileType from DataSource where FileDirectory like '" + FolderName + "%' and DataSourceOwnerUserID = '" + UserID + "' ";
            }
            else
            {
                s = "Select sourceguid,SourceName,OriginalFileType from DataSource where FileDirectory = '" + FolderName + "' and DataSourceOwnerUserID = '" + UserID + "' ";
            }

            // Select [SourceGuid]
            // ,[SourceName]
            // ,[ItemType]
            // ,[LibraryItemGuid]
            // ,[DataSourceOwnerUserID]
            // ,[LibraryOwnerUserID]
            // ,[LibraryName]
            // ,[AddedByUserGuidId]

            string SourceName = "";
            string ItemType = "";
            string LibraryItemGuid = "";
            string LibraryOwnerUserID = GetLibOwnerByName(LibraryName);
            string AddedByUserGuidId = modGlobals.gCurrUserGuidID;
            string DataSourceOwnerUserID = UserID;
            string SourceGuid = "";
            string OriginalFileType = "";
            int i = 0;
            SqlDataReader RSData = null;
            string TempDirName = DMA.getEnvVarTempDir();
            string TempFQN = TempDirName + @"\AddLibItems.txt";
            File F;
            if (File.Exists(TempFQN))
            {
                File.Delete(TempFQN);
            }

            F = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    Application.DoEvents();
                    i += 1;
                    if (i % 2 == 0)
                    {
                        My.MyProject.Forms.frmLibraryAssignment.SB.Text = i.ToString() + " of " + iCnt.ToString();
                        // 'FrmMDIMain.Refresh()
                        Application.DoEvents();
                    }

                    SourceGuid = RSData.GetValue(0).ToString();
                    SourceName = RSData.GetValue(1).ToString();
                    OriginalFileType = RSData.GetValue(2).ToString();
                    ItemType = OriginalFileType;
                    LibraryItemGuid = Guid.NewGuid().ToString();
                    string sData = SourceGuid;
                    sData += Conversions.ToString('þ') + SourceName;
                    sData += Conversions.ToString('þ') + ItemType;
                    sData += Conversions.ToString('þ') + LibraryItemGuid;
                    sData += Conversions.ToString('þ') + DataSourceOwnerUserID;
                    sData += Conversions.ToString('þ') + LibraryOwnerUserID;
                    sData += Conversions.ToString('þ') + LibraryName;
                    sData += Conversions.ToString('þ') + AddedByUserGuidId;
                    LOG.WriteToTempFile(TempFQN, sData);
                }
            }

            RSData.Close();
            RSData = null;
            int iRecCount = 0;
            var objReaderCtr = new StreamReader(TempFQN);
            while (objReaderCtr.Peek() != -1)
            {
                string TextLine = objReaderCtr.ReadLine();
                iRecCount += 1;
                if (i % 2 == 0)
                {
                    My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Pass #2: " + i.ToString() + " of " + iCnt.ToString();
                    // 'FrmMDIMain.Refresh()
                    Application.DoEvents();
                }
            }

            objReaderCtr = null;

            // 'FrmMDIMain.TSPB1.Minimum = 0
            // 'FrmMDIMain.TSPB1.Maximum = iRecCount + 10
            // 'FrmMDIMain.SB.Text = "Remaining to validate: " + iRecCount.ToString

            var LI = new clsLIBRARYITEMS();
            i = 0;
            var objReader = new StreamReader(TempFQN);
            while (objReader.Peek() != -1)
            {
                if (modGlobals.gTerminateImmediately == true)
                {
                    return;
                }

                i += 1;
                // 'FrmMDIMain.SB4.Text = i.ToString
                Application.DoEvents();
                if (i % 2 == 0)
                {
                    My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Pass #3: " + i.ToString() + " of " + iCnt.ToString();
                    // 'FrmMDIMain.Refresh()
                    Application.DoEvents();
                }

                string TextLine = objReader.ReadLine();
                if (TextLine.Length == 0)
                {
                    goto NextRec;
                }

                var A = TextLine.Split('þ');
                if (A.Length < 2)
                {
                    goto NextRec;
                }

                SourceGuid = A[0];
                SourceName = A[1];
                ItemType = A[2];
                LibraryItemGuid = A[3];
                DataSourceOwnerUserID = A[4];
                LibraryOwnerUserID = A[5];
                LibraryName = A[6];
                AddedByUserGuidId = A[7];
                RecordsAdded += 1;
                s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'";
                iCnt = iCount(s);
                if (iCnt == 0)
                {
                    LI.setAddedbyuserguidid(ref AddedByUserGuidId);
                    LI.setDatasourceowneruserid(ref DataSourceOwnerUserID);
                    LI.setItemtitle(ref SourceName);
                    LI.setItemtype(ref ItemType);
                    LI.setLibraryitemguid(ref LibraryItemGuid);
                    LI.setLibraryname(ref LibraryName);
                    LI.setLibraryowneruserid(ref LibraryOwnerUserID);
                    LI.setSourceguid(ref SourceGuid);
                    bool b = LI.Insert();
                    if (!b)
                    {
                        LOG.WriteToArchiveLog("ERROR: Failed to add Library Item Directory: '" + FolderName + "', Library: '" + LibraryName + "', SourceName: '" + SourceName + "'");
                    }
                }

                NextRec:
                ;
            }

            objReader = null;
            LI = null;
            GC.Collect();
            s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'";
            iCnt = iCount(s);

            // 'FrmMDIMain.SB.Text = "Library additions: " + iCnt.ToString + " added."
            // 'FrmMDIMain.SB4.Text = ""
            My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Library additions complete: " + iCnt.ToString() + " added.";
            My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Done: " + i.ToString() + " of " + iCnt.ToString();
        }

        public void AddLibraryEmail(string EmailFolder, string LibraryName, string UserID, int RecordsAdded)
        {
            string CurrentmailFolderID = getFolderIdByName(EmailFolder, UserID);

            // select emailguid, SUBSTRING(subject,1,100) as Subject, sourcetypecode from Email where Currmailfolderid  = '00000000AE37B53150C4EF4991D438C857CB5B08A2B40000'
            string s = "Select count(*) from Email where OriginalFolder  = '" + EmailFolder + "'";
            s = "";
            s = s + " select count(*) ";
            s = s + " from Email where OriginalFolder  = '" + EmailFolder + "'";
            s = s + " and Email.UserID in (select UserID from LibraryUsers where LibraryName = '" + LibraryName + "')";
            int iCnt = iCount(s);
            if (iCnt == 0)
            {
                My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Done.";
                My.MyProject.Forms.frmLibraryAssignment.SB.Refresh();
                return;
            }

            s = "Select emailguid, SUBSTRING(subject,1,100) as Subject, SUBSTRING(body,1,100) as Body, sourcetypecode from Email where OriginalFolder  = '" + EmailFolder + "'";
            s = "";
            s = s + " select emailguid, SUBSTRING(subject,1,100) as Subject, SUBSTRING(body,1,100) as Body, sourcetypecode ";
            s = s + " from Email where OriginalFolder  = '" + EmailFolder + "'";
            s = s + " and Email.UserID in (select UserID from LibraryUsers where LibraryName = '" + LibraryName + "')";
            string SourceName = "";
            string ItemType = "";
            string LibraryItemGuid = "";
            string LibraryOwnerUserID = GetLibOwnerByName(LibraryName);
            string AddedByUserGuidId = modGlobals.gCurrUserGuidID;
            string DataSourceOwnerUserID = UserID;
            string Body = "";
            string EmailGuid = "";
            string OriginalFileType = "";
            int i = 0;
            SqlDataReader RSData = null;
            string TempDirName = DMA.getEnvVarTempDir();
            string TempFQN = TempDirName + @"\AddLibItems.txt";
            File F;
            if (File.Exists(TempFQN))
            {
                try
                {
                    File.Delete(TempFQN);
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("Warning: could not delete " + TempFQN + "." + Constants.vbCrLf + ex.Message);
                }
            }

            F = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(s, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    i += 1;
                    if (i % 5 == 0)
                    {
                        My.MyProject.Forms.frmLibraryAssignment.SB.Text = "Applied: " + i.ToString() + " of " + iCnt.ToString();
                        My.MyProject.Forms.frmLibraryAssignment.SB.Refresh();
                        // 'FrmMDIMain.SB.Text = i.ToString + " of " + iCnt.ToString
                        // 'FrmMDIMain.Refresh()
                        Application.DoEvents();
                    }

                    EmailGuid = RSData.GetValue(0).ToString();
                    SourceName = RSData.GetValue(1).ToString();
                    Body = RSData.GetValue(2).ToString();
                    OriginalFileType = RSData.GetValue(3).ToString();
                    if (Strings.InStr(SourceName, Constants.vbCrLf) > 0 | Strings.InStr(SourceName, Constants.vbCr) > 0 | Strings.InStr(SourceName, Constants.vbLf) > 0)
                    {
                        SourceName = UTIL.RemoveCrLF(SourceName);
                    }

                    if (Strings.InStr(Body, Constants.vbCrLf) > 0 | Strings.InStr(Body, Constants.vbCr) > 0 | Strings.InStr(Body, Constants.vbLf) > 0)
                    {
                        Body = UTIL.RemoveCrLF(Body);
                    }

                    if (SourceName.Trim().Length == 0)
                    {
                        SourceName = "-";
                    }

                    if (Body.Trim().Length == 0)
                    {
                        Body = "-";
                    }

                    if (OriginalFileType.Trim().Length == 0)
                    {
                        OriginalFileType = "?";
                    }

                    ItemType = OriginalFileType;
                    LibraryItemGuid = Guid.NewGuid().ToString();
                    string sData = "";
                    sData = EmailGuid + Conversions.ToString('ý');
                    sData = sData + SourceName + Conversions.ToString('ý');
                    sData = sData + Body + Conversions.ToString('ý');
                    sData = sData + ItemType + Conversions.ToString('ý');
                    sData = sData + LibraryItemGuid + Conversions.ToString('ý');
                    sData = sData + DataSourceOwnerUserID + Conversions.ToString('ý');
                    sData = sData + LibraryOwnerUserID + Conversions.ToString('ý');
                    sData = sData + LibraryName + Conversions.ToString('ý');
                    sData = sData + AddedByUserGuidId + Conversions.ToString('ý');
                    LOG.WriteToTempFile(TempFQN, sData);
                }
            }

            RSData.Close();
            RSData = null;
            int iRecCount = 0;
            var objReaderCtr = new StreamReader(TempFQN);
            while (objReaderCtr.Peek() != -1)
            {
                string TextLine = objReaderCtr.ReadLine();
                iRecCount += 1;
            }

            objReaderCtr = null;
            var LI = new clsLIBRARYITEMS();

            // 'FrmMDIMain.SB.Text = "Validating library entries: " + iRecCount.ToString
            // 'FrmMDIMain.TSPB1.Minimum = 0
            // 'FrmMDIMain.TSPB1.Maximum = iRecCount + 10

            i = 0;
            var objReader = new StreamReader(TempFQN);
            while (objReader.Peek() != -1)
            {
                i += 1;
                if (i % 10 == 0)
                {
                    int iToProcess = iRecCount - i;
                    // If iToProcess > 0 Then
                    // 'FrmMDIMain.TSPB1.Value = iToProcess
                    // End If
                    Application.DoEvents();
                }

                string TextLine = objReader.ReadLine();
                if (TextLine.Trim().Length == 0)
                {
                    goto SkipRec01;
                }

                var A = TextLine.Split('ý');
                if (A.Length != 10)
                {
                    LOG.WriteToArchiveLog("Warning: Failed to enter email lib item " + A[1].Trim() + ",  " + A[0].Trim());
                    goto SkipRec01;
                }

                EmailGuid = A[0].Trim();
                SourceName = A[1].Trim();
                Body = A[2].Trim();
                ItemType = A[3].Trim();
                LibraryItemGuid = A[4].Trim();
                DataSourceOwnerUserID = A[5].Trim();
                LibraryOwnerUserID = A[6].Trim();
                LibraryName = A[7].Trim();
                AddedByUserGuidId = A[8].Trim();
                string NewSubj = SourceName + " : " + Body;
                NewSubj = Strings.Mid(NewSubj, 1, 199);
                s = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + EmailGuid + "'";
                iCnt = iCount(s);
                if (iCnt == 0)
                {
                    LI.setAddedbyuserguidid(ref AddedByUserGuidId);
                    LI.setDatasourceowneruserid(ref DataSourceOwnerUserID);
                    LI.setItemtitle(ref NewSubj);
                    LI.setItemtype(ref ItemType);
                    LI.setLibraryitemguid(ref LibraryItemGuid);
                    LI.setLibraryname(ref LibraryName);
                    LI.setLibraryowneruserid(ref LibraryOwnerUserID);
                    LI.setSourceguid(ref EmailGuid);
                    bool b = LI.Insert();
                    if (!b)
                    {
                        LOG.WriteToArchiveLog("ERROR: Failed to add Library Item to EMAIL Folder: '" + EmailFolder + "', Library: '" + LibraryName + "', ItemTitle: '" + SourceName + "'");
                    }
                }

                SkipRec01:
                ;
            }

            objReader = null;
            LI = null;
            GC.Collect();
            My.MyProject.Forms.frmMain.SB.Text = "Library audit complete.";
        }

        public void AddSysMsg(string tMsg)
        {
            tMsg = UTIL.RemoveSingleQuotesV1(tMsg);
            bool b = false;
            string S = "";
            string eGuid = "";
            eGuid = Guid.NewGuid().ToString();
            S = S + " INSERT INTO [SystemMessage]";
            S = S + "            ([UserID]";
            S = S + "            ,[EntryDate]";
            S = S + "            ,[EntryGuid]";
            S = S + "            ,[EntryMsg])";
            S = S + " VALUES ";
            S = S + "            ('" + modGlobals.gCurrUserGuidID + "'";
            S = S + "            ,'" + DateAndTime.Now.ToString() + "'";
            S = S + "            ,'" + eGuid + "'";
            S = S + "            ,'" + tMsg + "')";
            b = ExecuteSqlNewConn(90149, S);
            if (!b)
            {
                LOG.WriteToArchiveLog("Warning: Failed to add system notice '" + tMsg + "' to log.");
            }
        }

        public bool isDirEnabled(string FQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            FQN = UTIL.RemoveSingleQuotes(FQN);
            bool B = true;
            string S = "Select ckDisableDir from Directory where fqn = '" + FQN + "' and UserID = '" + modGlobals.gCurrUserGuidID + "' ";
            CloseConn();
            GC.Collect();

            // Dim CNN As New SqlConnection
            SqlDataReader RSData = null;
            string tVal = "";
            try
            {
                CloseConn();
                CkConn();
                using (gConn)
                {
                    var command = new SqlCommand(S, gConn);
                    RSData = SqlQryNewConn(S);
                    RSData.Read();
                    tVal = RSData.GetValue(0).ToString();
                    command.Connection.Close();
                    command = null;
                }

                if (tVal.ToUpper().Equals("Y"))
                {
                    B = true;
                }
                else
                {
                    B = false;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error 100 - CLSDBARCH : isDirEnabled: ", ex);
                LOG.WriteToArchiveLog("Error 100 - CLSDBARCH : isDirEnabled: " + ex.StackTrace);
                B = false;
            }
            finally
            {
                if (RSData is object)
                {
                    if (!RSData.IsClosed)
                    {
                        RSData.Close();
                    }

                    RSData = null;
                }
                // CNN.Close()
                // CNN.Dispose()
                // CNN = Nothing
                GC.Collect();
            }

            CloseConn();
            return B;
        }

        public void AddHashedDirName(string sName)
        {
            string S = "";
            double d = UTIL.HashName(sName);
            bool NameExists = false;
            string NewGuid = Guid.NewGuid().ToString();
            try
            {
                string HashedString = "";
                int icnt = iCount("Select count(*) from HashDir where Hash = " + d.ToString());
                if (icnt == 0)
                {
                    HashedString = UTIL.ReplaceSingleQuotes(sName);
                    S = "Insert into HashDir (Hash, HashedString, HashID) values (" + d.ToString() + ",'" + HashedString + "', '" + NewGuid + "' ) ";
                    bool B = ExecuteSqlNewConn(90150, S);
                    if (B == false)
                    {
                        LOG.WriteToArchiveLog("ERROR: AddHashedDirName 200 - " + S);
                    }

                    return;
                }
                else
                {
                    NameExists = false;
                    S = "Select HashedString, HashID from HashDir where Hash = " + d.ToString();
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            string tName = RSData.GetValue(0).ToString();
                            string ID = RSData.GetValue(1).ToString();
                            if (tName.ToUpper().Equals(sName.ToUpper()))
                            {
                                // * it already exists
                                NameExists = true;
                                break;
                            }
                        }

                        if (NameExists == false)
                        {
                            HashedString = UTIL.ReplaceSingleQuotes(sName);
                            S = "Insert into HashDir (Hash, HashedString, HashID) values (" + d.ToString() + ",'" + HashedString + "', '" + NewGuid + "') ";
                            bool B = ExecuteSqlNewConn(90151, S);
                            if (B == false)
                            {
                                LOG.WriteToArchiveLog("ERROR: AddHashedDirName 400 - " + S);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddHashedDirName 100 - ", ex);
            }
        }

        public void AddHashedFileName(string sName)
        {
            string S = "";
            // Dim d As Double = UTIL.HashName(sName )
            double d = UTIL.HashCalc(sName);
            bool NameExists = false;
            string NewGuid = Guid.NewGuid().ToString();
            try
            {
                string HashedString = "";
                int icnt = iCount("Select count(*) from HashFile where Hash = " + d.ToString());
                if (icnt == 0)
                {
                    HashedString = UTIL.ReplaceSingleQuotes(sName);
                    S = "Insert into HashFile (Hash, HashedString, HashID) values (" + d.ToString() + ",'" + HashedString + "', '" + NewGuid + "' ) ";
                    bool B = ExecuteSqlNewConn(90152, S);
                    if (B == false)
                    {
                        LOG.WriteToArchiveLog("ERROR: AddHashedFileName 200 - " + S);
                    }

                    return;
                }
                else
                {
                    NameExists = false;
                    S = "Select HashedString, HashID from HashFile where Hash = " + d.ToString();
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    if (RSData.HasRows)
                    {
                        while (RSData.Read())
                        {
                            string tName = RSData.GetValue(0).ToString();
                            string ID = RSData.GetValue(1).ToString();
                            if (tName.ToUpper().Equals(sName.ToUpper()))
                            {
                                // * it already exists
                                NameExists = true;
                                break;
                            }
                        }

                        if (NameExists == false)
                        {
                            HashedString = UTIL.ReplaceSingleQuotes(sName);
                            S = "Insert into HashFile (Hash, HashedString, HashID) values (" + d.ToString() + ",'" + HashedString + "', '" + NewGuid + "') ";
                            bool B = ExecuteSqlNewConn(90153, S);
                            if (B == false)
                            {
                                LOG.WriteToArchiveLog("ERROR: AddHashedFileName 400 - " + S);
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddHashedFileName 100 - ", ex);
            }
        }

        public ArrayList getFqns(string Qty)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            var A = new ArrayList();
            string S = "";
            S = S + " select top " + Qty + " fqn from DataSource";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string table_name = "";
            string column_name = "";
            string data_type = "";
            string character_maximum_length = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string FQN = RSData.GetValue(0).ToString();
                    A.Add(FQN);
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            return A;
        }

        public bool AddPstFolder(string StoreID, string ParentFolderName, string ParentFolderID, string FolderKeyName, string FolderID, string PstFQN, string RetentionCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // ByVal FolderID , ByVal CurrFolder As Microsoft.Office.Interop.Outlook.MAPIFolder,
            bool B = true;
            ParentFolderName = UTIL.RemoveSingleQuotes(ParentFolderName);
            string FolderName = ParentFolderName;
            string UID = modGlobals.gCurrUserGuidID;
            string SelectedForArchive = "Y";

            // Dim FolderFQN  = ParentFolderName + "|" + FolderKeyName
            string FolderFQN = FolderKeyName;
            FolderFQN = UTIL.RemoveSingleQuotes(FolderFQN);

            // Dim SS  = " select count(*) from EmailFolder where UserID = '" + gCurrUserGuidID + "' and FolderID = '" + ParentFolderName  + "'"
            string SS = " select count(*) from EmailFolder where UserID = '" + modGlobals.gCurrUserGuidID + "' and FolderID = '" + FolderFQN + "'";
            int iCnt = iCount(SS);
            if (iCnt == 1)
            {
                return true;
            }

            string S = "";
            S = S + " INSERT INTO [EmailFolder]";
            S = S + "    ([UserID]";
            S = S + "    ,[FolderName]";
            S = S + "    ,[ParentFolderName]";
            S = S + "    ,[FolderID]";
            S = S + "    ,[ParentFolderID]";
            S = S + "    ,[SelectedForArchive]";
            S = S + "    ,[StoreID]";
            S = S + "    ,[isSysDefault]";
            S = S + "    ,[RetentionCode])";
            S = S + " VALUES ";
            S = S + "    ('" + UID + "'";
            // S = S + "    ,'" + UTIL.RemoveSingleQuotes(FolderKeyName ) + "'"
            S = S + "    ,'" + UTIL.RemoveSingleQuotes(FolderFQN) + "'";
            S = S + "    ,'" + UTIL.RemoveSingleQuotes(ParentFolderName) + "'";
            S = S + "    ,'" + FolderID + "'";
            S = S + "    ,'" + ParentFolderID + "'";
            S = S + "    ,'" + SelectedForArchive + "'";
            S = S + "    ,'" + StoreID + "'";
            S = S + "    ,0";
            S = S + "    ,'" + RetentionCode + "')";
            B = ExecuteSqlNewConn(90154, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR: AddPstFolder 100 - " + S);
            }

            return B;
        }

        public string getDirProfile(string ProfileName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ProfileName = UTIL.RemoveSingleQuotes(ProfileName);
            string S = "";
            S = S + " Select [ProfileName]";
            S = S + " ,[Parms]";
            S = S + " FROM [DirProfiles]";
            S = S + " where ProfileName = '" + ProfileName + "' ";
            CloseConn();
            CkConn();
            string ProfileStr = "";
            string wc = "";
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    ProfileStr = RSData.GetValue(1).ToString();
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                xTrace(30021, "iExecCountStmt", ex.Message.ToString());
                ProfileStr = (-1).ToString();
                LOG.WriteToArchiveLog("clsDatabaseARCH : iExecCountStmt : 100 : ", ex);
            }

            return ProfileStr;
        }

        public string getNameOfCurrentServer()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string SvrName = "";
            string S = "Select serverproperty('MachineName')";
            CloseConn();
            CkConn();
            string wc = "";
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    SvrName = RSData.GetValue(0).ToString();
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                xTrace(30021, "iExecCountStmt", ex.Message.ToString());
                SvrName = "";
                LOG.WriteToArchiveLog("clsDatabaseARCH : iExecCountStmt : 100 : ", ex);
            }

            return SvrName;
        }

        public int getQuickRowCnt(string TableName)
        {
            int I = 0;
            TableName = UTIL.RemoveSingleQuotes(TableName);
            string S = "Select o.name, rows from sysobjects o inner join sysindexes i on o.id = i.id where i.indid < 2 and o.name = '" + TableName + "'";
            CloseConn();
            CkConn();
            try
            {
                using (gConn)
                {
                    SqlDataReader RSData = null;
                    string CS = getRepoConnStr();
                    var CONN = new SqlConnection(CS);
                    CONN.Open();
                    var command = new SqlCommand(S, CONN);
                    RSData = command.ExecuteReader();
                    RSData.Read();
                    I = RSData.GetInt32(0);
                    RSData.Close();
                    RSData = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                xTrace(30021, "iExecCountStmt", ex.Message.ToString());
                I = -1;
                LOG.WriteToArchiveLog("clsDatabaseARCH : iExecCountStmt : 100 : ", ex);
            }

            return I;
        }

        public string getHelpInfo()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SqlDataReader RSData = null;
            string S = "Select [HelpName],[HelpEmailAddr],[HelpPhone],[AreaOfFocus],[HoursAvail] FROM [HelpInfo] order by HelpName ";
            string HelpInfo = "";
            try
            {
                string HelpName = "";
                string HelpEmailAddr = "";
                string HelpPhone = "";
                string AreaOfFocus = "";
                string HoursAvail = "";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        HelpName = RSData.GetValue(0).ToString();
                        HelpEmailAddr = RSData.GetValue(1).ToString();
                        HelpPhone = RSData.GetValue(2).ToString();
                        AreaOfFocus = RSData.GetValue(3).ToString();
                        HoursAvail = RSData.GetValue(4).ToString();
                        if (HelpName.Trim().Length > 0)
                        {
                            HelpInfo = HelpInfo + "Contact - " + HelpName + Constants.vbCrLf;
                        }

                        if (HelpName.Trim().Length > 0)
                        {
                            HelpInfo = HelpInfo + "Email - " + HelpEmailAddr + Constants.vbCrLf;
                        }

                        if (HelpName.Trim().Length > 0)
                        {
                            HelpInfo = HelpInfo + "Phone - " + HelpPhone + Constants.vbCrLf;
                        }

                        if (HelpName.Trim().Length > 0)
                        {
                            HelpInfo = HelpInfo + "Help Area - " + AreaOfFocus + Constants.vbCrLf;
                        }

                        if (HelpName.Trim().Length > 0)
                        {
                            HelpInfo = HelpInfo + "Hours - " + HoursAvail + Constants.vbCrLf;
                        }

                        HelpInfo += Constants.vbCrLf;
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getHelpInfo 100: ", ex);
                return "";
            }
            finally
            {
                RSData.Close();
                RSData = null;
            }

            return HelpInfo;
        }

        public string getHelpEmail()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            SqlDataReader RSData = null;
            string S = "Select [HelpEmailAddr] from HelpInfo where EmailNotification = 1 ";
            string HelpInfo = "";
            try
            {
                string HelpName = "";
                string HelpEmailAddr = "";
                string HelpPhone = "";
                string AreaOfFocus = "";
                string HoursAvail = "";
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        HelpEmailAddr = RSData.GetValue(0).ToString();
                        HelpInfo = HelpInfo + HelpEmailAddr + "|";
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR getHelpEmail 100: ", ex);
                return "support@EcmLibrary.com|dale@ecmlibrary.com|";
            }
            finally
            {
                RSData.Close();
                RSData = null;
                GC.Collect();
            }

            return HelpInfo;
        }

        public void PopulateGrid(string S, ref DataGridView DGV)
        {
            // System.Windows.Forms.DataGridViewCellEventArgs
            try
            {
                var BS = new BindingSource();
                string CS = getRepoConnStr();
                var sqlcn = new SqlConnection(CS);
                var sadapt = new SqlDataAdapter(S, sqlcn);
                var ds = new DataSet();
                if (sqlcn.State == ConnectionState.Closed)
                {
                    sqlcn.Open();
                }

                sadapt.Fill(ds, "GridData");
                DGV.DataSource = ds.Tables["GridData"];
            }
            catch (Exception ex)
            {
                // If gRunUnattended = False Then MessageBox.Show("Error PopulateGrid 122165.4: " + ex.Message)
                LOG.WriteToArchiveLog("Error PopulateGrid 122165.4: ", ex);
            }
        }

        public void TraceActivity(string Msg)
        {
            string S = "";
            Msg = UTIL.RemoveSingleQuotes(Msg);
            S = "Insert into Trace ( [LogEntry] ) values ( '" + Msg + "' ) ";
            ExecuteSqlNewConn(90155, S);
        }

        public void UpdateVersionInfo(string Product, string ProductVersion)
        {
            Product = UTIL.RemoveSingleQuotes(Product);
            ProductVersion = UTIL.RemoveSingleQuotes(ProductVersion);
            string S = "Select count(*) from VersionInfo where Product = '" + Product + "' ";
            int iCnt = iCount(S);
            if (iCnt == 0)
            {
                S = " INSERT INTO [VersionInfo] ([Product] ,[ProductVersion]) VALUES ('" + Product + "','" + ProductVersion + "')";
            }
            else
            {
                S = " UPDATE [VersionInfo] SET [ProductVersion] = '" + ProductVersion + "' WHERE Product = '" + Product + "' ";
            }

            bool B = ExecuteSqlNewConn(S, false);
            if (B == false)
            {
                LOG.WriteToArchiveLog("ERROR: UpdateVersionInfo - 100 : failed to update version info. " + Constants.vbCrLf + S);
            }
        }

        public string getVersionInfo(string Product)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string VerInfo = "";
            Product = UTIL.RemoveSingleQuotes(Product);
            string S = "Select count(*) from VersionInfo where Product = '" + Product + "' ";
            int iCnt = iCount(S);
            if (iCnt == 0)
            {
                VerInfo = "No version info exists on " + Product;
            }
            else
            {
                S = "Select [ProductVersion] FROM [VersionInfo] where [Product] = '" + Product + "' ";
                // S = "Select FixID, Applied, AppliedDate from DB_Updates order by FixID"
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                        // VerInfo  += " : " + RSData.GetValue(1).ToString
                        // VerInfo  += " : " + RSData.GetValue(2).ToString + vbCrLf
                        VerInfo += RSData.GetValue(0).ToString();
                }
                else
                {
                    VerInfo = "No version info exists on " + Product;
                }
            }

            bool B = ExecuteSqlNewConn(S, false);
            if (B == false)
            {
                LOG.WriteToArchiveLog("ERROR: UpdateVersionInfo - 100 : failed to update version info. " + Constants.vbCrLf + S);
            }

            return VerInfo;
        }

        public bool FixEmailKeys()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            try
            {
                // SELECT [FolderName], [FileDirectory] FROM [EmailFolder]
                string S = "Select [FolderName] FROM [EmailFolder]";
                string FolderName = "";
                var L = new List<string>();
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        FolderName = RSData.GetValue(0).ToString();
                        if (Strings.InStr(FolderName, "|") > 0)
                        {
                            string tFolderName = Strings.Mid(FolderName, 1, Strings.InStr(FolderName, "|") - 1);
                            tFolderName = tFolderName.Trim();
                            if (tFolderName.Length > 0)
                            {
                                if (L.Contains(tFolderName))
                                {
                                }
                                else
                                {
                                    L.Add(tFolderName);
                                }
                            }
                        }
                        else if (L.Contains(FolderName))
                        {
                        }
                        else
                        {
                            L.Add(FolderName);
                        }
                    }
                }

                RSData.Close();
                RSData = null;
                S = "update EmailFolder set FileDirectory = 'xx' where FolderName like 'xx%'";
                for (int i = 0, loopTo = L.Count - 1; i <= loopTo; i++)
                {
                    string tgtFolder = L[i];
                    tgtFolder = UTIL.RemoveSingleQuotes(tgtFolder);
                    S = "update EmailFolder set FileDirectory = '" + tgtFolder + "' where FolderName like '" + tgtFolder + "|%' and FileDirectory is null";
                    bool BB = ExecuteSqlNewConn(90156, S);
                    if (!BB)
                    {
                        LOG.WriteToArchiveLog("ERROR - FixEmailKeys 200 : " + S);
                    }

                    S = "update EmailArchParms set FileDirectory = '" + tgtFolder + "' where FolderName like '" + tgtFolder + "|%' and FileDirectory is null";
                    BB = ExecuteSqlNewConn(90157, S);
                    if (!BB)
                    {
                        LOG.WriteToArchiveLog("ERROR - FixEmailKeys 300 : " + S);
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR FixEmailKeys 100: ", ex);
                return false;
            }

            return default;
        }

        public void getAttachmentWeights(ref SortedList<string, int> SL)
        {
            SL.Clear();
            string S = "Select EmailGuid, Weight from EmailAttachmentSearchList where UserID = '" + modGlobals.gCurrUserGuidID + "'";
            S = S + " and EmailGuid is not null";
            string EmailGuid = "";
            int Weight = -1;
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    try
                    {
                        EmailGuid = RSData.GetValue(0).ToString();
                        try
                        {
                            Weight = RSData.GetInt32(1);
                        }
                        catch (Exception ex)
                        {
                            Weight = 0;
                            LOG.WriteToArchiveLog("INFO - returned null weights '" + EmailGuid + "' : " + S);
                        }

                        if (SL.Keys.Contains(EmailGuid))
                        {
                        }
                        else
                        {
                            SL.Add(EmailGuid, Weight);
                        }
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("INFO - returned null values: " + S);
                    }
                }
            }

            if (!RSData.IsClosed)
            {
                RSData.Close();
            }

            RSData = null;
            command.Dispose();
            command = null;
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
        }

        public void getDisabledDirectories(ref List<string> ListOfDirs)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ListOfDirs.Clear();
            string S = "Select [FQN] FROM [Directory] where UserID = '" + modGlobals.gCurrUserGuidID + "' and (ckDisableDir = 'Y' or AdminDisabled = 1)";
            string DirFQN = "";
            int Weight = -1;
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    DirFQN = RSData.GetValue(0).ToString();
                    if (ListOfDirs.Contains(DirFQN))
                    {
                    }
                    else
                    {
                        ListOfDirs.Add(DirFQN);
                    }
                }
            }

            RSData.Close();
            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public bool RunUnattended()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string ckVal = getUserParm("user_RunUnattended");
            // Dim ckVal  = getSystemParm("srv_RunUnattended")
            if (ckVal.Equals("1"))
            {
                modGlobals.gRunUnattended = true;
                return true;
            }
            else if (ckVal.Equals("0"))
            {
                modGlobals.gRunUnattended = false;
                return false;
            }
            else if (ckVal.ToUpper().Equals("Y"))
            {
                modGlobals.gRunUnattended = true;
                return true;
            }
            else if (ckVal.ToUpper().Equals("N"))
            {
                return false;
            }
            else
            {
                modGlobals.gRunUnattended = false;
                return false;
            }
        }

        public double getDbSize(ref DataGridView TargetGrid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = " ";
            S = S + " SELECT";
            S = S + " a.FILEID,";
            S = S + " CONVERT(decimal(12,2),ROUND(a.size/128.000,2)) as [FILESIZEINMB] ,";
            S = S + " CONVERT(decimal(12,2),ROUND(fileproperty(a.name,'SpaceUsed')/128.000,2)) as [SPACEUSEDINMB],";
            S = S + " CONVERT(decimal(12,2),ROUND((a.size-fileproperty(a.name,'SpaceUsed'))/128.000,2)) as [FREESPACEINMB],";
            S = S + " a.name as [DATABASENAME],";
            S = S + " a.FILENAME as [FILENAME]";
            S = S + "     FROM ";
            S = S + "     dbo.sysfiles a ";
            PopulateGrid(S, ref TargetGrid);
            return default;
        }

        public void getTableDasdUse(ref DataGridView TargetGrid)
        {
            string S = "";
            string CS = getRepoConnStr();
            var Connection = new SqlConnection(CS);
            if (Connection.State == ConnectionState.Closed)
            {
                Connection.Open();
            }

            var Command = new SqlCommand();
            Command.Connection = Connection;
            Command.CommandText = "GetAllTableSizes";
            var Adapter = new SqlDataAdapter(Command);
            var DataSet = new DataSet(Command.CommandText);
            Adapter.Fill(DataSet);
            TargetGrid.DataSource = DataSet.Tables[0];
        }

        public void getSpaceUsed(ref DataGridView TargetGrid)
        {
            string S = "";
            string CS = getRepoConnStr();
            var Connection = new SqlConnection(CS);
            if (Connection.State == ConnectionState.Closed)
            {
                Connection.Open();
            }

            var Command = new SqlCommand();
            Command.Connection = Connection;
            Command.CommandText = "ECM_spaceused";
            var Adapter = new SqlDataAdapter(Command);
            var DataSet = new DataSet(Command.CommandText);
            Adapter.Fill(DataSet);
            TargetGrid.DataSource = DataSet.Tables[0];
        }

        public bool isListeningOn()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string MachineName = DMA.GetCurrMachineName();
            string S = "Select COUNT(*) FROM [DirectoryListener] where Machinename = '" + MachineName + "' and [ListenerActive] = 1";
            int iCnt = iCount(S);
            if (iCnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void GetListenerFiles(ref SortedList<string, string> L)
        {
            string S = "";
            L.Clear();
            string MachineName = DMA.GetCurrMachineName();
            MachineName = UTIL.RemoveSingleQuotes(MachineName);
            S = "Select [SourceFile], DirGuid  FROM [DirectoryListenerFiles] where Archived = 0 and MachineName = '" + modGlobals.gMachineID + "'";
            string FQN = "";
            string SourceFile = "";
            bool Archived = false;
            DateTime EntryDate = default;
            string UserID = "";
            string DirGuid = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            try
            {
                if (CONN.State == ConnectionState.Closed)
                {
                    CONN.Open();
                }
            }
            catch (Exception ex)
            {
                L.Clear();
                LOG.WriteToArchiveLog("ERROR : GetListenerFiles 100 - ", ex);
                return;
            }

            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            try
            {
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        SourceFile = RSData.GetValue(0).ToString();
                        DirGuid = RSData.GetValue(1).ToString();
                        if (!L.ContainsKey(SourceFile))
                        {
                            L.Add(SourceFile, DirGuid);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: GetListenerFiles 100 - ", ex);
            }
            finally
            {
                if (!RSData.IsClosed)
                {
                    RSData.Close();
                }

                RSData = null;
                command.Dispose();
                command = null;
                if (CONN.State == ConnectionState.Open)
                {
                    CONN.Close();
                }

                CONN.Dispose();
            }
        }

        public void getModifiedFiles()
        {
            string cPath = LOG.getTempEnvironDir();
            string tFQN = cPath + @"\ListenerFilesLog.ECM";
            string NewFile = tFQN + ".rdy";
            var F0 = new FileInfo(NewFile);
            var F = new FileInfo(tFQN);
            var SL = new SortedList<string, string>();
            try
            {
                if (F0.Exists)
                {
                    LOG.WriteToInstallLog("ACTIVATED the TimerUploadFiles: getModifiedFiles - the RDY file missing. ");
                    goto P1;
                }

                if (F.Exists)
                {
                    File.Move(tFQN, NewFile);
                }
                else
                {
                    F = null;
                    GC.Collect();
                    return;
                }

                P1:
                ;


                // Create new StreamReader instance with Using block. Open file.txt with the Using statement.

                if (!File.Exists(NewFile))
                {
                    return;
                }

                var R = new StreamReader(NewFile);
                try
                {
                    using (R)
                    {
                        // Store contents in this String.
                        string line;

                        // Read first line.
                        line = R.ReadLine();
                        int I = 0;
                        // Loop over each line in file, While list is Not Nothing.
                        while (!R.EndOfStream)
                        {
                            Application.DoEvents();
                            I += 1;
                            // 'FrmMDIMain.ListenerStatus.Text = I.ToString
                            Application.DoEvents();
                            if (line.Trim().Length > 0)
                            {
                                var a = line.Split('þ');
                                string CDE = a[0].ToUpper();
                                string Fqn = a[1];
                                if (SL.Count > 10000)
                                {
                                    SL.Clear();
                                }

                                if (SL.ContainsKey(Fqn))
                                {
                                }
                                else
                                {
                                    var FI = new FileInfo(Fqn);
                                    if (FI.Exists)
                                    {
                                        string tDir = FI.DirectoryName;
                                        RegisterArchiveFile(Fqn, tDir);
                                        if (SL.ContainsKey(Fqn))
                                        {
                                        }
                                        else
                                        {
                                            SL.Add(Fqn, tDir);
                                            LOG.WriteToInstallLog("Registered file: getModifiedFiles: " + Fqn);
                                        }
                                    }

                                    FI = null;
                                }
                            }

                            line = R.ReadLine();
                        }
                    }
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR getModifiedFiles - 288: ", ex);
                }
                finally
                {
                    R.Close();
                    R.Dispose();
                    GC.Collect();
                }

                try
                {
                    if (F is object)
                    {
                        F = null;
                    }

                    if (F0 is object)
                    {
                        // F0.Delete()
                        F0 = null;
                    }
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR getModifiedFiles 100 - could not delete file - " + tFQN);
                }
                finally
                {
                    try
                    {
                        FileSystem.Kill(NewFile);
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: getModifiedFiles 200 Listener Files could not be processed for = " + tFQN + Constants.vbCrLf + ex.Message);
            }
            // 'FrmMDIMain.ListenerStatus.Text = "."
        }

        public int getDocSize(string SourceGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = false;
            int I = 0;
            string S = "Select FileLength from DataSource where SourceGuid = '" + SourceGuid + "'";
            SqlDataReader RSData = null;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    RSData.Read();
                    I = RSData.GetInt32(0);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("getDocSize - Warning: email - no msgsize found: ", ex);
            }
            finally
            {
                CloseConn();
                RSData.Close();
                RSData = null;
            }

            return I;
        }

        public bool RegisterArchiveFile(string SourceFile, string DirName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            modGlobals.gListenerActivityStart = DateAndTime.Now;
            Application.DoEvents();
            bool B = true;
            string RunGuid = getDirGuid(DirName, modGlobals.gMachineID);
            SourceFile = UTIL.RemoveSingleQuotes(SourceFile);
            string S = "Select count(*) FROM [DirectoryListenerFiles] where [DirGuid] = '" + RunGuid + "' and SourceFile = '" + SourceFile + "'  AND archived = 0 ";
            // Dim S  = "Select count(*) FROM [DirectoryListenerFiles] where SourceFile = '" + SourceFile + "'  AND archived = 0 and MachineName = '" + gMachineID + "' "

            int iCnt = iCount(S);
            if (iCnt == 0)
            {
                S = "";
                S = S + " INSERT INTO [DirectoryListenerFiles]";
                S = S + "            ([DirGuid]";
                S = S + "            ,[SourceFile]";
                S = S + "            ,[Archived]";
                S = S + "            ,[EntryDate]";
                S = S + "            ,[UserID]";
                S = S + "            ,[MachineName], NameHash)";
                S = S + "      VALUES";
                S = S + "            ('" + RunGuid + "'";
                S = S + "            ,'" + SourceFile + "'";
                S = S + "            ,0";
                S = S + "            ,'" + DateAndTime.Now.ToString() + "'";
                S = S + "            ,'" + modGlobals.gCurrUserGuidID + "'";
                S = S + "            ,'" + modGlobals.gMachineID + "'";
                S = S + "            ," + 555.555d;
                S = S + " )";
                B = ExecuteSqlNewConn(90158, S);
            }

            modGlobals.gListenerActivityStart = DateAndTime.Now;
            return B;
        }

        public void CleanOutOldListenerFiles()
        {
            string S = "delete from DirectoryListenerFiles where DATEDIFF(dd,entrydate,GETDATE()) > 30";
            bool B = ExecuteSqlNewConn(90159, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR CleanOutOldListenerFiles 100 - failed to delete files: " + S);
            }
        }

        public void removeTempOcrFiles()
        {
            try
            {
                string WorkingDirectory = getWorkingDirectory(modGlobals.gCurrUserGuidID, "CONTENT WORKING DIRECTORY");
                LOG.PurgeDirectory(WorkingDirectory, "*.tif*");
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("WARNING: removeTempOcrFiles Some temporary files may remain for a while in " + getWorkingDirectory(modGlobals.gCurrUserGuidID, "CONTENT WORKING DIRECTORY"));
            }
        }

        public void RemoveNullEmails()
        {
            string S = "";
            S = "Select count(*) from email where datalength(emailimage) < 1 or EmailImage is null";
            int icnt = iCount(S);
            if (icnt == 0)
            {
                MessageBox.Show("None to remove... returning");
                return;
            }

            string msg = "This will DELETE " + icnt.ToString() + " NULL items from emails, are you sure?";
            var dlgRes = MessageBox.Show(msg, "Delete Emails", MessageBoxButtons.YesNo);
            if (dlgRes == DialogResult.No)
            {
                return;
            }

            S = "Select EmailGuid, ShortSubj from email where datalength(emailimage) < 1 or EmailImage is null";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            int I = 0;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    I += 1;
                    string EmailGuid = RSData.GetValue(0).ToString();
                    string ShortSubj = RSData.GetValue(1).ToString();
                    Application.DoEvents();
                    // 'FrmMDIMain.SB4.Text = I.ToString
                    DeleteContent(EmailGuid, "EMAIL", ShortSubj);
                }
            }

            RSData.Close();
            RSData = null;

            // 'FrmMDIMain.SB4.Text = "Done"
        }

        public void RemoveNullSource()
        {
            string S = "";
            S = "Select count(*) from dataSource where datalength(SourceImage) < 1 or SourceImage is null";
            int icnt = iCount(S);
            if (icnt == 0)
            {
                MessageBox.Show("None to remove... returning");
                return;
            }

            string msg = "This will remove " + icnt.ToString() + " NULL items from Source, are you sure?";
            var dlgRes = MessageBox.Show(msg, "Delete Content", MessageBoxButtons.YesNo);
            if (dlgRes == DialogResult.No)
            {
                return;
            }

            S = "Select SourceGuid, fqn from dataSource where datalength(SourceImage) < 1 or SourceImage is null";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            int I = 0;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    I += 1;
                    string SourceGuid = RSData.GetValue(0).ToString();
                    string fqn = RSData.GetValue(1).ToString();
                    Application.DoEvents();
                    // FrmMDIMain.SB4.Text = I.ToString
                    DeleteContent(SourceGuid, "CONTENT", fqn);
                }
            }

            RSData.Close();
            RSData = null;

            // FrmMDIMain.SB4.Text = "Done"

        }

        public void GetDirectoryLibraries(string DirectoryName, ref List<string> L)
        {
            L.Clear();
            string ParentDirectoryToUse = "";
            bool isIncludedAsSubDir = isSubDirIncluded(DirectoryName, ref ParentDirectoryToUse);
            if (ParentDirectoryToUse.Length > 0)
            {
                DirectoryName = ParentDirectoryToUse;
            }

            DirectoryName = UTIL.RemoveSingleQuotes(DirectoryName);
            string LibName = "";
            string S = "Select LibraryName from LibDirectory where DirectoryName = '" + DirectoryName + "' and UserID = '" + modGlobals.gCurrUserGuidID + "'";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibName = RSData.GetValue(0).ToString();
                    if (!L.Contains(LibName))
                    {
                        L.Add(LibName);
                    }
                }
            }

            RSData.Close();
            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public bool ckFolderDisabled(string UID, string DirFQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = " ";
            DirFQN = UTIL.RemoveSingleQuotes(DirFQN);
            CloseConn();
            CkConn();
            S = "Select COUNT(*) from Directory where ckDisableDir = 'Y' and UserID = '" + modGlobals.gCurrUserGuidID + "' and FQN = '" + DirFQN + "'";
            int iCnt = iCount(S);
            if (iCnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }

            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void AddFileExt(string FileExt, string Description)
        {
            // FrmMDIMain.SB4.Text = FileExt
            FileExt = UTIL.RemoveSingleQuotes(FileExt);
            Description = UTIL.RemoveSingleQuotes(Description);
            string S = "Insert into FileType (FileExt, Description) Values ('" + FileExt + "', '" + Description + "')";
            bool B = ExecuteSqlNewConn(90160, S);
        }

        public void DeleteContent(string TgtGuid, string TypeContent, string FQN)
        {
            string S = "";
            bool B = false;
            S = "Delete from SourceAttribute where SourceGuid = '" + TgtGuid + "' ";
            B = ExecuteSqlNewConn(90161, S);
            S = "Delete from LibraryItems where SourceGuid = '" + TgtGuid + "' ";
            B = ExecuteSqlNewConn(90162, S);
            if (TypeContent.ToUpper().Equals("EMAIL"))
            {
                S = "Delete from [Recipients] where EmailGuid = '" + TgtGuid + "' ";
                B = ExecuteSqlNewConn(90163, S);
                S = "Delete from EMAIL where EmailGuid = '" + TgtGuid + "' ";
                B = ExecuteSqlNewConn(90164, S);
            }
            else
            {
                S = "Delete from DataSource where SourceGuid = '" + TgtGuid + "' ";
                B = ExecuteSqlNewConn(90165, S);
            }

            // xTrace(666, "DeleteContent : F10 : " + gCurrLoginID + " deleted file " + FQN + ".", "frmDocSearch")

        }

        public bool isParentDirDisabled(string DirFQN)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string TgtLib = "";
            string TempDir = "";
            string SS = "";
            if (DirFQN.Trim().Length > 2)
            {
                if (Strings.Mid(DirFQN, 1, 2) == @"\\")
                {
                    SS = @"\\";
                }
                else
                {
                    SS = "";
                }
            }

            var DirList = new List<string>();
            var A = DirFQN.Split('\\');
            for (int I = 0, loopTo = Information.UBound(A); I <= loopTo; I++)
            {
                TempDir = SS + TempDir + A[I];
                DirList.Add(TempDir);
                TempDir = TempDir + @"\";
            }

            for (int II = DirList.Count - 1; II >= 0; II -= 1)
            {
                TempDir = DirList[II];
                TempDir = UTIL.RemoveSingleQuotes(TempDir);
                int iCnt = isDirectoryDisabled(TempDir);
                if (iCnt == 1)
                {
                    return true;
                }
                else if (iCnt == 0)
                {
                    return false;
                }

                TempDir = TempDir + @"\";
            }

            return false;
        }

        public int isDirectoryDisabled(string DirFqn)
        {
            int RC = -1;
            // Dim CNN As New SqlConnection
            SqlDataReader rsData = null;
            try
            {
                string S = "Select ckDisableDir from Directory where FQN = '" + DirFqn + "' and UserID = '" + modGlobals.gCurrUserGuidID + "' ";
                string CS = getRepoConnStr();
                // Dim CONN As New SqlConnection(CS)
                // CONN.Open()

                bool b = false;
                rsData = SqlQryNewConn(S, CS);
                rsData.Read();
                if (rsData.HasRows)
                {
                    string sChar = rsData.GetValue(0).ToString();
                    if (sChar.ToUpper().Equals("Y"))
                    {
                        RC = 1;
                    }
                    else if (sChar.ToUpper().Equals("N"))
                    {
                        RC = 0;
                    }
                    else
                    {
                        RC = 0;
                    }
                }
                else
                {
                    RC = -1;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR isDirectoryDisabled 1993.21: ", ex);
                RC = -1;
            }
            finally
            {
                // CloseConn()
                // GC.Collect()
                if (rsData is object)
                {
                    if (!rsData.IsClosed)
                    {
                        rsData.Close();
                    }

                    rsData = null;
                }
                // CNN.Close()
                // CNN.Dispose()
                // CNN = Nothing
                GC.Collect();
            }

            return RC;
        }

        public int isSubDirIncludedBitON(string DirFqn)
        {
            int RC = -1;
            // Dim CNN As New SqlConnection
            SqlDataReader rsData = null;
            try
            {
                string S = "Select IncludeSubDirs from Directory where FQN = '" + DirFqn + "' and UserID = '" + modGlobals.gCurrUserGuidID + "' ";
                string CS = getRepoConnStr();
                // Dim CONN As New SqlConnection(CS)
                // CONN.Open()

                bool b = false;
                rsData = SqlQryNewConn(S, CS);
                rsData.Read();
                if (rsData.HasRows)
                {
                    string sChar = rsData.GetValue(0).ToString();
                    if (sChar.ToUpper().Equals("Y"))
                    {
                        RC = 1;
                    }
                    else if (sChar.ToUpper().Equals("N"))
                    {
                        RC = 0;
                    }
                    else
                    {
                        RC = 0;
                    }
                }
                else
                {
                    RC = -1;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR isDirectoryDisabled 1993.21: ", ex);
                RC = -1;
            }
            finally
            {
                // CloseConn()
                // GC.Collect()
                if (rsData is object)
                {
                    if (!rsData.IsClosed)
                    {
                        rsData.Close();
                    }

                    rsData = null;
                }
                // CNN.Close()
                // CNN.Dispose()
                // CNN = Nothing
                GC.Collect();
            }

            return RC;
        }

        public bool isIndexed(string FileTypeCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (Strings.InStr(FileTypeCode, ".") == 0)
            {
                FileTypeCode = "." + FileTypeCode;
            }

            int iCnt = iCount("Select COUNT(*) from sys.fulltext_document_types where document_type = '" + FileTypeCode + "'");
            if (iCnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        // 
        public bool isOcrd(string FileTypeCode)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (Strings.InStr(FileTypeCode, ".") == 0)
            {
                FileTypeCode = "." + FileTypeCode;
            }

            int iCnt = iCount("Select COUNT(*)  FROM [ImageTypeCodes] where ImageTypeCode = '" + FileTypeCode + "'");
            if (iCnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void getOcrTypes(ref List<string> L)
        {
            string S = "Select ImageTypeCode from ImageTypeCodes";
            L.Clear();
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string FileExt = RSData.GetValue(0).ToString();
                    FileExt = FileExt.ToUpper();
                    if (!L.Contains(FileExt))
                    {
                        L.Add(FileExt);
                    }
                }
            }

            RSData.Close();
            RSData = null;
        }

        public void getIndexedTypes(ref List<string> L)
        {
            string S = "Select document_type from sys.fulltext_document_types";
            L.Clear();
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string FileExt = RSData.GetValue(0).ToString();
                    FileExt = FileExt.ToUpper();
                    if (!L.Contains(FileExt))
                    {
                        L.Add(FileExt);
                    }
                }
            }

            RSData.Close();
            RSData = null;
        }

        public void getProcesssAsExt(ref SortedList<string, string> L)
        {
            L.Clear();
            string S = "Select [ExtCode],[ProcessExtCode] FROM [ProcessFileAs]";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string ExtCode = RSData.GetValue(0).ToString().ToUpper();
                    string ProcessExtCode = RSData.GetValue(1).ToString().ToUpper();
                    if (!L.ContainsKey(ExtCode))
                    {
                        L.Add(ExtCode, ProcessExtCode);
                    }
                }
            }

            RSData.Close();
            RSData = null;
        }

        public void ShowIndexedFiles(ref DataGridView D)
        {
            var AL = new ArrayList();
            // Dim dgCols() As String
            var OCRTYPES = new List<string>();
            var INDEXTYPES = new List<string>();
            string S = "";
            var ProcessAsExt = new SortedList<string, string>();
            getProcesssAsExt(ref ProcessAsExt);
            getOcrTypes(ref OCRTYPES);
            getIndexedTypes(ref INDEXTYPES);
            S = "Select     document_type AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs ";
            S = S + " FROM sys.fulltext_document_types ";
            S = S + " UNION";
            S = S + " SELECT     ExtCode AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  ";
            S = S + " FROM AvailFileTypes ";
            S = S + " UNION";
            S = S + " SELECT     ImageTypeCode AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  ";
            S = S + " FROM ImageTypeCodes ";
            S = S + " UNION";
            S = S + " SELECT DISTINCT OriginalFileType AS FileExt, '' as Indexed, '' as Ocrd, '' as IndexedAs  ";
            S = S + " FROM DataSource ";
            S = S + " ORDER BY FileExt";
            int iCount = 0;
            D.Rows.Clear();
            D.Columns.Add(0.ToString(), "EXT");
            D.Columns.Add(1.ToString(), "Indexed");
            D.Columns.Add(2.ToString(), "Ocrd");
            D.Columns.Add(3.ToString(), "IndexedAs");
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    string FileExt = RSData.GetValue(0).ToString();
                    FileExt = FileExt.ToUpper();
                    // If InStr(FileExt, "JPG", CompareMethod.Text) > 0 Then
                    // Console.WriteLine("XXX")
                    // End If
                    if (Strings.InStr(FileExt, ".") == 0)
                    {
                        FileExt = "." + FileExt;
                    }

                    string Indexed = RSData.GetValue(1).ToString();
                    string Ocrd = RSData.GetValue(2).ToString();
                    bool BB = false;
                    if (OCRTYPES.Contains(FileExt))
                    {
                        Ocrd = "Y";
                        Indexed = "Y";
                        BB = true;
                    }
                    else
                    {
                        Ocrd = "N";
                    }

                    if (BB == false)
                    {
                        if (INDEXTYPES.Contains(FileExt))
                        {
                            Indexed = "Y";
                        }
                        else
                        {
                            Indexed = "N";
                        }
                    }

                    string IndexedAs = "-";
                    if (ProcessAsExt.ContainsKey(FileExt))
                    {
                        int II = ProcessAsExt.IndexOfKey(FileExt);
                        IndexedAs = ProcessAsExt[FileExt].ToString();
                        // IndexedAs = ProcessAsExt.Values(II)
                    }

                    D.Rows.Add(FileExt, Indexed, Ocrd, IndexedAs);
                    iCount = iCount + 1;
                }
            }

            RSData.Close();
            RSData = null;
        }

        public string getOcrText(ref string SourceGuid, string ContentType, string AttachmentName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select document_type from sys.fulltext_document_types";
            if (ContentType.Equals("DOC"))
            {
                S = "Select OcrText from DataSource where SourceGuid = '" + SourceGuid + "' ";
            }
            else
            {
                AttachmentName = UTIL.RemoveSingleQuotes(AttachmentName);
                S = "Select OcrText from EmailAttachment where EmailGuid = '" + SourceGuid + "' and AttachmentName = '" + AttachmentName + "' ";
            }

            string OcrText = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                    OcrText = RSData.GetValue(0).ToString();
            }

            RSData.Close();
            RSData = null;
            return OcrText;
        }

        public string getSqlServerVersion()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "Select @@VERSION AS 'ServerVersion'";
            SqlDataReader rsData = null;
            string ServerVersion = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                    ServerVersion = rsData.GetValue(0).ToString();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getSqlServerVersion Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return ServerVersion;
        }

        public double getDBSIZEMB()
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "exec Sp_spaceused";
            S = "Select ";
            S = S + "     a.name as [DatabaseName], a.FILEID,";
            S = S + "     CONVERT(decimal(12,2),ROUND(a.size/128.000,2)) as [FileSizeInMB] ,";
            S = S + "     CONVERT(decimal(12,2),ROUND(fileproperty(a.name,'SpaceUsed')/128.000,2)) as [SpaceUsedInMB],";
            S = S + "     CONVERT(decimal(12,2),ROUND((a.size-fileproperty(a.name,'SpaceUsed'))/128.000,2)) as [FreeSpaceInMB],    ";
            S = S + "     a.FILENAME as [FILENAME]";
            S = S + "     FROM";
            S = S + "     dbo.sysfiles a";
            SqlDataReader rsData = null;
            double DBSIZEMB = 0d;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                    DBSIZEMB += (double)rsData.GetDecimal(2);
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getSqlDBSIZEMB Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return DBSIZEMB;
        }

        /// <summary>
    /// Builds the dictionary.
    /// </summary>
    /// <param name="MySql">My SQL.</param>
    /// <returns></returns>
        public Dictionary<string, string> BuildDictionary(string MySql)
        {
            var DICT = new Dictionary<string, string>();
            string C1 = "";
            string C2 = "";
            SqlDataReader rsData = null;
            double DBSIZEMB = 0d;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(MySql, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        C1 = rsData.GetValue(0).ToString();
                        C2 = rsData.GetValue(1).ToString();
                        if (!DICT.Keys.Contains(C1))
                        {
                            DICT.Add(C1, C2);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getSqlDBSIZEMB Error 100: " + ex.Message);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return DICT;
        }

        public List<string> getListOf(string MySql)
        {
            var L = new List<string>();
            string C1 = "";
            SqlDataReader rsData = null;
            double DBSIZEMB = 0d;
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(MySql, CONN);
                rsData = command.ExecuteReader();
                if (rsData.HasRows)
                {
                    while (rsData.Read())
                    {
                        C1 = rsData.GetValue(0).ToString();
                        if (!L.Contains(C1))
                        {
                            L.Add(C1);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getListOf Error 100: " + ex.Message + Constants.vbCrLf + MySql);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            return L;
        }

        public string getFileExt(string SourceGuid)
        {
            string MySQl = "Select FQN from DataSource where SourceGuid = '" + SourceGuid + "' ";
            var L = new List<string>();
            string C1 = "";
            SqlDataReader rsData = null;
            double DBSIZEMB = 0d;
            string EXT = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                using (CONN)
                {
                    CONN.Open();
                    var command = new SqlCommand(MySQl, CONN);
                    using (command)
                    using (rsData)
                    {
                        rsData = command.ExecuteReader();
                        if (rsData.HasRows)
                        {
                            while (rsData.Read())
                                C1 = rsData.GetValue(0).ToString();
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getFileExt Error 100: " + ex.Message + Constants.vbCrLf + MySQl);
            }

            GC.Collect();
            EXT = Path.GetDirectoryName(C1);
            return EXT;
        }

        public void RebuildCrossIndexFileTypes()
        {
            var FM = new frmNotify();
            FM.Show();
            FM.Text = "VALIDATING iFilter Extensions";
            var LisOfIncl = new List<string>();
            LisOfIncl = getListOf("Select distinct lower([ExtCode]) FROM IncludedFiles ");
            bool BB = true;
            var SqlStmts = new List<string>();
            int K = 0;
            string CurrEXT = "";
            string ProcessAsEXT = "";
            string SourceGuid = "";
            string OriginalFileType = "";
            string SourceTypeCode = "";
            int I = 0;
            string MySql = "";
            var DICT = new Dictionary<string, string>();
            int GoodCnt = 0;
            int BadCnt = 0;
            MySql = "select distinct lower(ExtCode), lower(ProcessExtCode) from ProcessFileAs";
            DICT = BuildDictionary(MySql);
            MySql = "select sourceGuid, lower([OriginalFileType]), lower([SourceTypeCode]) from DataSource where FQN is not null and ltrim(rtrim(fqn)) <> '' ";
            var DS = getDataSet(MySql);
            K = DS.Tables[0].Rows.Count;
            var loopTo = DS.Tables[0].Rows.Count - 1;
            for (I = 0; I <= loopTo; I++)
            {
                SourceGuid = Conversions.ToString(DS.Tables[0].Rows[I][0]);
                OriginalFileType = DS.Tables[0].Rows[I][1].ToString().ToLower().Trim();
                SourceTypeCode = DS.Tables[0].Rows[I][1].ToString().ToLower().Trim();
                FM.lblFileSpec.Text = "File# " + I.ToString() + " of " + K.ToString();
                FM.Refresh();
                Application.DoEvents();
                if (SourceTypeCode.Length > 0)
                {
                    if (!LisOfIncl.Contains(SourceTypeCode))
                    {
                        if (DICT.ContainsKey(SourceTypeCode))
                        {
                            S = "Update DataSource set SourceTypeCode = '" + DICT[SourceTypeCode] + "' where SourceGuid = '" + SourceGuid + "' ";
                            SqlStmts.Add(Conversions.ToString(S));
                            BadCnt += 1;
                        }
                        else
                        {
                            S = "Update DataSource set SourceTypeCode = '" + OriginalFileType + "' where SourceGuid = '" + SourceGuid + "' ";
                            SqlStmts.Add(Conversions.ToString(S));
                            BadCnt += 1;
                        }
                    }
                }
                else
                {
                    S = "Update DataSource set SourceTypeCode = '" + OriginalFileType + "' where SourceGuid = '" + SourceGuid + "' ";
                    SqlStmts.Add(Conversions.ToString(S));
                    BadCnt += 1;
                }

                if (OriginalFileType.Length > 0)
                {
                    if (!LisOfIncl.Contains(OriginalFileType))
                    {
                        S = "Update DataSource set SourceTypeCode = '" + OriginalFileType + "' where SourceGuid = '" + SourceGuid + "' ";
                        SqlStmts.Add(Conversions.ToString(S));
                        BadCnt += 1;
                    }
                    else if (!OriginalFileType.Equals(SourceTypeCode))
                    {
                        if (!LisOfIncl.Contains(SourceTypeCode))
                        {
                            ProcessAsEXT = DICT[OriginalFileType];
                            S = "Update DataSource set SourceTypeCode = '" + ProcessAsEXT + "' where SourceGuid = '" + SourceGuid + "' ";
                            SqlStmts.Add(Conversions.ToString(S));
                            BadCnt += 1;
                        }
                        else
                        {
                            GoodCnt += 1;
                        }
                    }
                    else if (DICT.Keys.Contains(OriginalFileType))
                    {
                        ProcessAsEXT = DICT[OriginalFileType];
                        S = "Update DataSource set SourceTypeCode = '" + ProcessAsEXT + "' where SourceGuid = '" + SourceGuid + "' ";
                        SqlStmts.Add(Conversions.ToString(S));
                        BadCnt += 1;
                    }
                    else
                    {
                        GoodCnt += 1;
                    }
                }
                else
                {
                    BadCnt += 1;
                    LOG.WriteToArchiveLog("ERROR Q23: (Manually FIX) NO extension for Sourceguid " + SourceGuid);
                    string ext = getFileExt(SourceGuid).ToLower();
                    S = "Update DataSource set OriginalFileType = '" + ext + "' where SourceGuid = '" + SourceGuid + "' ";
                    SqlStmts.Add(Conversions.ToString(S));
                    if (!LisOfIncl.Contains(ext))
                    {
                        S = "Update DataSource set SourceTypeCode = '" + ext + "' where SourceGuid = '" + SourceGuid + "' ";
                    }

                    if (DICT.ContainsKey(ext))
                    {
                        string pext = DICT[ext];
                        S = "Update DataSource set SourceTypeCode = '" + pext + "' where SourceGuid = '" + SourceGuid + "' ";
                    }

                    BadCnt += 1;
                }
            }

            if (SqlStmts.Count > 0)
            {
                var CMD = new SqlCommand();
                string connString = getRepoConnStr();
                var conn = new SqlConnection(connString);
                if (conn is null)
                {
                    conn = new SqlConnection(getRepoConnStr());
                }

                if (conn.State == ConnectionState.Closed)
                {
                    conn.ConnectionString = getRepoConnStr();
                    conn.Open();
                }

                FM.Text = "Applying Corrections";
                K = SqlStmts.Count;
                if (K > 0)
                {
                    I = 0;
                    CMD.Connection = conn;
                    CMD.CommandText = MySql;
                    CMD.CommandType = CommandType.Text;
                    using (conn)
                    using (CMD)
                        foreach (var currentMySql in SqlStmts)
                        {
                            MySql = currentMySql;
                            try
                            {
                                I += 1;
                                FM.lblFileSpec.Text = "File# " + I.ToString() + " of " + K.ToString();
                                FM.Refresh();
                                Application.DoEvents();
                                CMD.CommandText = MySql;
                                CMD.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                LOG.WriteToArchiveLog("ERROR 22x: updateDBUpdateLastwrite: " + ex.Message + Constants.vbCrLf + MySql);
                                B = false;
                            }
                        }
                }
            }

            FM.lblFileSpec.Text = "";
            FM.Refresh();
            Application.DoEvents();
            FM.Close();
            FM.Dispose();
        }

        public void ValidateFileTypesEmail()
        {
            string S = "Select rowid, attachmentname from EmailAttachment where OriginalFileTypeCode is null ";
            int I = 0;
            int rowid = 0;
            string ExtCode = "";
            string attachmentname = "";
            string OriginalFileType = "";
            string SourceTypeCode = "";
            string ProcessExtCode = "";
            int K = 0;
            SqlDataReader rsData = null;
            string ServerVersion = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                {
                    Application.DoEvents();
                    rowid = rsData.GetInt32(0);
                    attachmentname = rsData.GetValue(1).ToString();
                    OriginalFileType = UTIL.getFileSuffix(attachmentname).ToLower();
                    K += 1;
                    if (K % 10 == 0)
                    {
                        // FrmMDIMain.SB4.Text = K.ToString + "/" + I.ToString
                    }

                    if (Strings.InStr(OriginalFileType, ".") == 0)
                    {
                        OriginalFileType = "." + OriginalFileType;
                    }

                    I += 1;
                    S = "Update EmailAttachment set OriginalFileTypeCode = '" + OriginalFileType + "' where rowid = " + rowid.ToString();
                    bool b = ExecuteSqlNewConn(90167, S);
                    if (!b)
                    {
                        LOG.WriteToArchiveLog("ERROR ValidateFileTypesEmail: File with ROWID '" + rowid.ToString() + "' did not UPDATE file type from '" + OriginalFileType + "' to '" + ProcessExtCode + "'.");
                    }
                    // End If
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:ValidateFileTypesEmail Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            // FrmMDIMain.SB4.Text = ""

        }

        public void RebuildCrossIndexFileTypesEmail()
        {
            ValidateFileTypesEmail();
            string S = "";
            S = S + " SELECT     ProcessFileAs.ExtCode, ProcessFileAs.ProcessExtCode, EmailAttachment.AttachmentName, EmailAttachment.RowID, EmailAttachment.OriginalFileTypeCode ";
            S = S + " FROM         ProcessFileAs INNER JOIN";
            S = S + "              EmailAttachment ON ProcessFileAs.ExtCode = EmailAttachment.AttachmentCode                     ";
            int I = 0;
            int K = 0;
            string AttachmentName = "";
            string ExtCode = "";
            int RowID = 0;
            string OriginalFileTypeCode = "";
            string SourceTypeCode = "";
            string ProcessExtCode = "";
            SqlDataReader rsData = null;
            string ServerVersion = "";
            try
            {
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                rsData = command.ExecuteReader();
                while (rsData.Read())
                {
                    Application.DoEvents();
                    ExtCode = rsData.GetValue(0).ToString().ToLower();
                    ProcessExtCode = rsData.GetValue(1).ToString();
                    AttachmentName = rsData.GetValue(2).ToString().ToLower();
                    RowID = rsData.GetInt32(3);
                    OriginalFileTypeCode = rsData.GetValue(4).ToString().ToLower();
                    K += 1;
                    if (K % 10 == 0)
                    {
                        // FrmMDIMain.SB4.Text = K.ToString + "/" + I.ToString
                    }

                    if (ProcessExtCode.Equals(SourceTypeCode))
                    {
                    }
                    else
                    {
                        I += 1;
                        S = "Update EmailAttachment set AttachmentCode = '" + ProcessExtCode + "' where RowID = " + RowID.ToString();
                        bool b = ExecuteSqlNewConn(90168, S);
                        if (!b)
                        {
                            LOG.WriteToArchiveLog("ERROR RebuildCrossIndexFileTypesEmail: File with RowID '" + RowID.ToString() + "' did not UPDATE file type from '" + OriginalFileTypeCode + "' to '" + ProcessExtCode + "'.");
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("Error: clsDatabaseARCH:getSqlServerVersion Error 100: ", ex);
            }

            if (!rsData.IsClosed)
            {
                rsData.Close();
            }

            rsData = null;
            GC.Collect();
            // FrmMDIMain.SB4.Text = ""

        }

        public int EmailExists(string EmailIdentifier)
        {
            EmailIdentifier = UTIL.RemoveSingleQuotes(EmailIdentifier);
            int B = 0;
            string TBL = "Email";
            string WC = "Where EmailIdentifier = '" + EmailIdentifier + "'";
            B = iGetRowCount(TBL, WC);
            return B;
        }

        // update Email set EmailIdentifier = EmailGuid where EmailIdentifier is null
        public void resetMissingEmailIds()
        {
            bool B = false;
            string S = "";
            int ID = 217;
            S = S + "update Email set EmailIdentifier = EmailGuid where EmailIdentifier is null and UseriD = '" + modGlobals.gCurrUserGuidID + "' ";
            B = ExecuteSqlNewConn(S, false);
        }

        public void getLibUsers(bool isAdmin, ref DataGridView G)
        {
            G.Columns.Clear();
            G.Rows.Clear();
            G.Columns.Add("LibraryName", "Library Name");
            G.Columns.Add("UserName", "User Name");
            G.Columns.Add("OwnerName", "Owner Name");
            string S = "";
            if (isAdmin == true)
            {
                S = S + " SELECT distinct L.LibraryName, ";
                S = S + " L.LibraryOwnerUserID, ";
                S = S + " L.UserID";
                S = S + " from LibraryUsers L ";
                S = S + " order by LibraryName";
            }
            else
            {
                S = S + " SELECT distinct L.LibraryName, ";
                S = S + " L.LibraryOwnerUserID, ";
                S = S + " L.UserID";
                S = S + " from LibraryUsers L ";
                S = S + " Where  L.UserID = '" + modGlobals.gCurrUserGuidID + "' ";
                S = S + " order by LibraryName";
            }

            string LibraryName = "";
            string UserGuid = "";
            string OwnerGuid = "";
            string UserLoginID = "";
            string OwnerLoginID = "";
            string UserName = "";
            string OwnerName = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibraryName = RSData.GetValue(0).ToString();
                    OwnerGuid = RSData.GetValue(1).ToString();
                    UserGuid = RSData.GetValue(2).ToString();
                    OwnerLoginID = getUserLoginByUserid(OwnerGuid);
                    UserLoginID = getUserLoginByUserid(UserGuid);
                    OwnerName = getUserNameByID(OwnerGuid);
                    UserName = getUserNameByID(UserGuid);
                    G.Rows.Add(LibraryName, UserName, OwnerName);
                }
            }

            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            RSData.Close();
            RSData = null;
            GC.Collect();
        }

        public void cleanUpLibraryItems()
        {
            string S = "";
            S = S + " delete from LibraryItems where " + Constants.vbCrLf;
            S = S + " SourceGuid not in (select emailguid as TgtGuid from Email" + Constants.vbCrLf;
            S = S + " union " + Constants.vbCrLf;
            S = S + " select sourceguid as TgtGuid from DataSource)";
            bool B = ExecuteSqlNewConn(90169, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 100: did not successfully complete.");
            }

            S = "delete FROM LibraryItems where LibraryName not in  (select LibraryName from Library)";
            B = ExecuteSqlNewConn(90170, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 200: did not successfully complete.");
            }

            S = "delete from LibraryUsers where LibraryName not in  (select LibraryName from Library)";
            B = ExecuteSqlNewConn(90171, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 300: did not successfully complete.");
            }

            S = "delete from LibraryUsers where UserID not in  (select userid from users)";
            B = ExecuteSqlNewConn(90172, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 300.1: did not successfully complete.");
            }

            S = "delete from GroupUsers where UserID not in (select userid from users) ";
            B = ExecuteSqlNewConn(90173, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 400: did not successfully complete.");
            }

            S = "delete from GroupUsers where GroupName not in (select GroupName from UserGroup) ";
            B = ExecuteSqlNewConn(90174, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("Warning cleanUpLibraryItems 500: did not successfully complete.");
            }
        }

        public void inventoryContentLibraryItems()
        {
            string S = "";
            S = S + " SELECT COUNT(*)";
            S = S + " FROM LibDirectory INNER JOIN";
            S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory";
            int II = 0;
            int iCnt = iCount(S);
            int RecsToProcess = iCnt;
            if (iCnt == 0)
            {
                return;
            }

            string TGuid = Guid.NewGuid().ToString();

            // S = ""
            // S = S + " SELECT LibDirectory.DirectoryName, LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType"
            // 'S = S + "   INTO #T" + TGuid
            // S = S + " FROM LibDirectory INNER JOIN"
            // S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory"

            S = "";
            S = S + " SELECT DISTINCT LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType, Library.UserID, DataSource.SourceName, DataSource.DataSourceOwnerUserID";
            S = S + " FROM         LibDirectory INNER JOIN";
            S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory INNER JOIN";
            S = S + " Library ON LibDirectory.UserID = Library.UserID";
            // S = S + " GROUP BY LibDirectory.LibraryName, DataSource.SourceGuid, DataSource.OriginalFileType, Library.UserID, DataSource.SourceName"

            // SELECT FirstName, LastName
            // INTO TestTable
            // FROM Person.Contact
            // WHERE EmailPromotion = 2
            // ----Verify that Data in TestTable
            // SELECT FirstName, LastName
            // FROM TestTable
            // ----Clean Up Database
            // DROP TABLE TestTable

            string tDir = LOG.getTempEnvironDir();
            string LIKEYS = tDir + @"\" + TGuid + ".txt";
            var SW = new StreamWriter(LIKEYS);
            string DirectoryName = "";
            string LibraryName = "";
            string SourceGuid = "";
            string OriginalFileType = "";
            string SourceName = "";
            string DataSourceOwnerUserID = "";
            string UserID = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    // FrmMDIMain.SB4.Text = "Step 1 of 2: " + II.ToString + " of " + RecsToProcess.ToString
                    Application.DoEvents();
                    LibraryName = RSData.GetValue(0).ToString();
                    SourceGuid = RSData.GetValue(1).ToString();
                    OriginalFileType = RSData.GetValue(2).ToString();
                    UserID = RSData.GetValue(3).ToString();
                    SourceName = RSData.GetValue(4).ToString();
                    DataSourceOwnerUserID = RSData.GetValue(5).ToString();
                    if (Strings.InStr(OriginalFileType, ".") == 0)
                    {
                        OriginalFileType = "." + OriginalFileType;
                    }

                    S = "";
                    S += LibraryName + Conversions.ToString('þ');
                    S += SourceGuid + Conversions.ToString('þ');
                    S += OriginalFileType + Conversions.ToString('þ');
                    S += UserID + Conversions.ToString('þ');
                    S += SourceName + Conversions.ToString('þ');
                    S += DataSourceOwnerUserID;
                    SW.WriteLine(S);
                }
            }

            RSData.Close();
            RSData = null;
            SW.Close();
            StreamReader srFileReader;
            string sInputLine = "";
            II = 0;
            srFileReader = File.OpenText(LIKEYS);
            sInputLine = srFileReader.ReadLine();
            while (!(sInputLine is null))
            {
                // FrmMDIMain.SB4.Text = "Step 2 of 2: " + II.ToString + " of " + RecsToProcess.ToString
                Application.DoEvents();
                sInputLine = srFileReader.ReadLine();
                if (string.IsNullOrEmpty(sInputLine))
                {
                    goto NextRow;
                }

                var A = sInputLine.Split('þ');
                LibraryName = UTIL.RemoveSingleQuotes(A[0]);
                SourceGuid = A[1];
                OriginalFileType = A[2];
                UserID = A[3];
                SourceName = A[4];
                DataSourceOwnerUserID = A[5];
                S = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'";
                iCnt = iCount(S);
                if (iCnt == 0)
                {
                    S = "";
                    S = S + " INSERT INTO [LibraryItems]" + Constants.vbCrLf;
                    S = S + " ([SourceGuid]" + Constants.vbCrLf;
                    S = S + " ,[ItemTitle]" + Constants.vbCrLf;
                    S = S + " ,[ItemType]" + Constants.vbCrLf;
                    S = S + " ,[LibraryItemGuid]" + Constants.vbCrLf;
                    S = S + " ,[DataSourceOwnerUserID]" + Constants.vbCrLf;
                    S = S + " ,[LibraryOwnerUserID]" + Constants.vbCrLf;
                    S = S + " ,[LibraryName]" + Constants.vbCrLf;
                    S = S + " ,[AddedByUserGuidId])" + Constants.vbCrLf;
                    S = S + "      VALUES( " + Constants.vbCrLf;
                    S = S + " ('" + SourceGuid + "'" + Constants.vbCrLf;
                    S = S + " ,'" + SourceName + "'" + Constants.vbCrLf;
                    S = S + " ,'" + OriginalFileType + "'" + Constants.vbCrLf;
                    S = S + " ,'" + Guid.NewGuid().ToString() + "'" + Constants.vbCrLf;
                    S = S + " ,'" + DataSourceOwnerUserID + "'" + Constants.vbCrLf;
                    S = S + " ,'" + LibraryName + "'" + Constants.vbCrLf;
                    S = S + " ,'" + modGlobals.gCurrUserGuidID + "')";
                    bool B = ExecuteSqlNewConn(90175, S);
                    if (!B)
                    {
                        LOG.WriteToArchiveLog("Error: ValidateLibraryItems 100 - Failed to add library item Library: [" + LibraryName + "], SourceName: [" + SourceName + "], SourceGuid: [" + SourceGuid + "]");
                    }
                }

                NextRow:
                ;
            }

            srFileReader.Close();
            srFileReader.Dispose();
            SW.Dispose();
            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void inventoryEmailLibraryItems()
        {
            string S = "";
            // S = S + " SELECT COUNT(*)"
            // S = S + " FROM LibEmail INNER JOIN"
            // S = S + " DataSource ON LibDirectory.DirectoryName = DataSource.FileDirectory"

            int II = 0;
            int iCnt = 0;   // iCount(S)
            int RecsToProcess = iCnt;

            // If iCnt = 0 Then
            // Return
            // End If

            string TGuid = Guid.NewGuid().ToString();
            S = "";
            S = S + " Select DISTINCT" + Constants.vbCrLf;
            S = S + " LibEmail.LibraryName , email.emailGuid, " + Constants.vbCrLf;
            S = S + " email.SourceTypeCode, Library.UserID, Email.ShortSubj, " + Constants.vbCrLf;
            S = S + " Email.UserID" + Constants.vbCrLf;
            S = S + " FROM         LibEmail INNER JOIN" + Constants.vbCrLf;
            S = S + " Email ON LibEmail.FolderName = Email.OriginalFolder" + Constants.vbCrLf;
            S = S + " INNER Join " + Constants.vbCrLf;
            S = S + " Library ON LibEmail.UserID = Library.UserID";
            Clipboard.Clear();
            Clipboard.SetText(S);
            string tDir = LOG.getTempEnvironDir();
            string LIKEYS = tDir + @"\" + TGuid + ".txt";
            var SW = new StreamWriter(LIKEYS);
            string LibraryName = "";
            string SourceGuid = "";
            string OriginalFileType = "";
            string DataSourceOwnerUserID = "";
            string SourceName = "";
            string UserID = "";
            SqlDataReader rsEmail = null;
            // rsEmail = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            Clipboard.Clear();
            Clipboard.SetText(S);
            rsEmail = command.ExecuteReader();
            if (rsEmail.HasRows)
            {
                while (rsEmail.Read())
                {
                    II += 1;
                    // FrmMDIMain.SB4.Text = "Step 3 of 4: " + II.ToString + " of " + RecsToProcess.ToString
                    Application.DoEvents();
                    LibraryName = rsEmail.GetValue(0).ToString();
                    SourceGuid = rsEmail.GetValue(1).ToString();
                    OriginalFileType = rsEmail.GetValue(2).ToString();
                    DataSourceOwnerUserID = rsEmail.GetValue(3).ToString();
                    SourceName = rsEmail.GetValue(4).ToString();
                    UserID = rsEmail.GetValue(5).ToString();
                    if (Strings.InStr(OriginalFileType, ".") == 0)
                    {
                        OriginalFileType = "." + OriginalFileType;
                    }

                    S = "";
                    S += LibraryName + Conversions.ToString('þ');
                    S += SourceGuid + Conversions.ToString('þ');
                    S += OriginalFileType + Conversions.ToString('þ');
                    S += UserID + Conversions.ToString('þ');
                    S += SourceName + Conversions.ToString('þ');
                    S += DataSourceOwnerUserID;
                    SW.WriteLine(S);
                }
            }

            rsEmail.Close();
            rsEmail = null;
            SW.Close();
            StreamReader srFileReader;
            string sInputLine = "";
            II = 0;
            srFileReader = File.OpenText(LIKEYS);
            sInputLine = srFileReader.ReadLine();
            while (!(sInputLine is null))
            {
                // FrmMDIMain.SB4.Text = "Step 4 of 4: " + II.ToString + " of " + RecsToProcess.ToString
                Application.DoEvents();
                sInputLine = srFileReader.ReadLine();
                if (string.IsNullOrEmpty(sInputLine))
                {
                    goto NextRow;
                }

                var A = sInputLine.Split('þ');
                LibraryName = UTIL.RemoveSingleQuotes(A[0]);
                SourceGuid = A[1];
                OriginalFileType = A[2];
                UserID = A[3];
                SourceName = A[4];
                DataSourceOwnerUserID = A[5];
                S = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'";
                iCnt = iCount(S);
                if (iCnt == 0)
                {
                    S = "";
                    S = S + " INSERT INTO [LibraryItems]" + Constants.vbCrLf;
                    S = S + " ([SourceGuid]" + Constants.vbCrLf;
                    S = S + " ,[ItemTitle]" + Constants.vbCrLf;
                    S = S + " ,[ItemType]" + Constants.vbCrLf;
                    S = S + " ,[LibraryItemGuid]" + Constants.vbCrLf;
                    S = S + " ,[DataSourceOwnerUserID]" + Constants.vbCrLf;
                    S = S + " ,[LibraryOwnerUserID]" + Constants.vbCrLf;
                    S = S + " ,[LibraryName]" + Constants.vbCrLf;
                    S = S + " ,[AddedByUserGuidId])" + Constants.vbCrLf;
                    S = S + "      VALUES( " + Constants.vbCrLf;
                    S = S + " ('" + SourceGuid + "'" + Constants.vbCrLf;
                    S = S + " ,'" + SourceName + "'" + Constants.vbCrLf;
                    S = S + " ,'" + OriginalFileType + "'" + Constants.vbCrLf;
                    S = S + " ,'" + Guid.NewGuid().ToString() + "'" + Constants.vbCrLf;
                    S = S + " ,'" + DataSourceOwnerUserID + "'" + Constants.vbCrLf;
                    S = S + " ,'" + LibraryName + "'" + Constants.vbCrLf;
                    S = S + " ,'" + modGlobals.gCurrUserGuidID + "')";
                    bool B = ExecuteSqlNewConn(90176, S);
                    if (!B)
                    {
                        LOG.WriteToArchiveLog("Error: ValidateLibraryItems 100 - Failed to add library item Library: [" + LibraryName + "], SourceName: [" + SourceName + "], SourceGuid: [" + SourceGuid + "]");
                    }
                }

                NextRow:
                ;
            }

            srFileReader.Close();
            srFileReader.Dispose();
            SW.Dispose();
            rsEmail = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();

            // FrmMDIMain.SB4.Text = "Validation Complete"

        }

        public void GetListOfAssignedLibraries(string DirectoryName, string TypeEntry, ref List<string> AssignedLibraries)
        {
            string S = "";
            AssignedLibraries.Clear();
            if (TypeEntry.Equals("EMAIL"))
            {
                S = "Select LibraryName from LibEmail where FolderName = '" + DirectoryName + "'";
            }
            else
            {
                S = "Select LibraryName from LibDirectory where DirectoryName = '" + DirectoryName + "'";
            }

            string LibraryName = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibraryName = RSData.GetValue(0).ToString();
                    if (!AssignedLibraries.Contains(LibraryName))
                    {
                        AssignedLibraries.Add(LibraryName);
                    }
                }
            }
            else
            {
                AssignedLibraries.Add("No assigned libraries");
            }

            RSData.Close();
            RSData = null;
            command.Dispose();
            if (CONN.State == ConnectionState.Open)
            {
                CONN.Close();
            }

            CONN.Dispose();
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public bool isSubDirIncluded(string DirFQN, ref string ParentDir)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            ParentDir = "";
            string TgtLib = "";
            string TempDir = "";
            string SS = "";
            if (DirFQN.Trim().Length > 2)
            {
                if (Strings.Mid(DirFQN, 1, 2) == @"\\")
                {
                    SS = @"\\";
                }
                else
                {
                    SS = "";
                }
            }

            var DirList = new List<string>();
            var A = DirFQN.Split('\\');
            for (int I = 0, loopTo = Information.UBound(A); I <= loopTo; I++)
            {
                TempDir = SS + TempDir + A[I];
                DirList.Add(TempDir);
                TempDir = TempDir + @"\";
            }

            for (int II = DirList.Count - 1; II >= 0; II -= 1)
            {
                TempDir = DirList[II];
                TempDir = UTIL.RemoveSingleQuotes(TempDir);
                int iCnt = isSubDirIncludedBitON(TempDir);
                if (iCnt == 1)
                {
                    ParentDir = TempDir;
                    return true;
                }
                else if (iCnt == 0)
                {
                    return false;
                }

                TempDir = TempDir + @"\";
            }

            return false;
        }

        public void getLibraryOwnerGuids(ref SortedList<string, string> LibraryOwnerGuids)
        {
            string S = "Select LibraryName,UserID from Library";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            try
            {
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        string LibraryName = RSData.GetValue(0).ToString();
                        string UserID = RSData.GetValue(1).ToString();
                        if (!LibraryOwnerGuids.ContainsKey(LibraryName))
                        {
                            LibraryOwnerGuids.Add(LibraryName, UserID);
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddLibraryGroupUser 100 - ", ex);
            }
            finally
            {
                RSData.Close();
                RSData = null;
            }
        }

        public void AddLibraryGroupUser(string GroupName)
        {
            GroupName = UTIL.RemoveSingleQuotes(GroupName);
            var LibraryOwnerGuids = new SortedList<string, string>();
            getLibraryOwnerGuids(ref LibraryOwnerGuids);
            string S = "";
            S = S + " SELECT     GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupOwnerUserID, GroupLibraryAccess.GroupName, ";
            S = S + "               GroupUsers.UserID AS GroupUserGuid, GroupUsers.FullAccess, GroupUsers.ReadOnlyAccess, GroupUsers.DeleteAccess, GroupUsers.Searchable, ";
            S = S + "                       GroupUsers.GroupOwnerUserID AS GroupOwnerUserIDGuid";
            S = S + " FROM         GroupLibraryAccess INNER JOIN";
            S = S + "               GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName";
            if (GroupName.Equals("*"))
            {
            }
            else
            {
                S = S + " WHERE     (GroupLibraryAccess.GroupName = '" + GroupName + "')";
            }

            S = S + " order by GroupLibraryAccess.LibraryName";
            string LibraryName = "";
            string GroupOwnerUserID = "";
            string tGroupName = "";
            string GroupUserGuid = "";
            string FullAccess = "";
            string ReadOnlyAccess = "";
            string DeleteAccess = "";
            string Searchable = "";
            string GroupOwnerUserIDGuid = "";
            var deleteExecutionList = new List<string>();
            var insertExecutionList = new List<string>();
            string PrevLibName = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            try
            {
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        LibraryName = RSData.GetValue(0).ToString();
                        GroupOwnerUserID = RSData.GetValue(1).ToString();
                        tGroupName = RSData.GetValue(2).ToString();
                        GroupUserGuid = RSData.GetValue(3).ToString();
                        FullAccess = RSData.GetValue(4).ToString();
                        ReadOnlyAccess = RSData.GetValue(5).ToString();
                        DeleteAccess = RSData.GetValue(6).ToString();
                        Searchable = RSData.GetValue(7).ToString();
                        GroupOwnerUserIDGuid = RSData.GetValue(8).ToString();

                        // If PrevLibName <> LibraryName Then
                        // Dim tsql As String = "DELETE FROM LibraryUsers where [LibraryName] = '" + LibraryName + "' and (SingleUser is null or SingleUser = 0)"
                        // deleteExecutionList.Add(tsql)
                        // End If

                        string LibraryOwnerUserID = "";
                        if (LibraryOwnerGuids.ContainsKey(LibraryName)) // 
                        {
                            int iName = LibraryOwnerGuids.IndexOfKey(LibraryName);
                            LibraryOwnerUserID = LibraryOwnerGuids.Values[iName];
                        }
                        else
                        {
                            LibraryOwnerUserID = modGlobals.gCurrUserGuidID;
                        }

                        LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
                        string iSql = "";
                        // iSql = iSql + ""
                        // iSql = iSql + "INSERT INTO [LibraryUsers]"
                        // iSql = iSql + " ([ReadOnly]"
                        // iSql = iSql + ",[CreateAccess]"
                        // iSql = iSql + ",[UpdateAccess]"
                        // iSql = iSql + ",[DeleteAccess]"
                        // iSql = iSql + ",[UserID]"
                        // iSql = iSql + ",[LibraryOwnerUserID]"
                        // iSql = iSql + ",[LibraryName])"
                        // iSql = iSql + " VALUES"
                        // iSql = iSql + " (0"
                        // iSql = iSql + ",1"
                        // iSql = iSql + ",1"
                        // iSql = iSql + ",1"
                        // iSql = iSql + ",'" + GroupUserGuid + "'"
                        // iSql = iSql + ",'" + LibraryOwnerUserID + "'"
                        // iSql = iSql + ",'" + LibraryName + "')"

                        iSql = "";
                        iSql += "INSERT INTO [LibraryUsers]" + Constants.vbCrLf;
                        iSql += "           ([ReadOnly]" + Constants.vbCrLf;
                        iSql += "           ,[CreateAccess]" + Constants.vbCrLf;
                        iSql += "           ,[UpdateAccess]" + Constants.vbCrLf;
                        iSql += "           ,[DeleteAccess]" + Constants.vbCrLf;
                        iSql += "           ,[UserID]" + Constants.vbCrLf;
                        iSql += "           ,[LibraryOwnerUserID]" + Constants.vbCrLf;
                        iSql += "           ,[LibraryName]" + Constants.vbCrLf;
                        iSql += "           ,[NotAddedAsGroupMember]" + Constants.vbCrLf;
                        iSql += "           ,[GroupUser])" + Constants.vbCrLf;
                        iSql += "     VALUES" + Constants.vbCrLf;
                        iSql += "           (0" + Constants.vbCrLf;
                        iSql += "           ,1" + Constants.vbCrLf;
                        iSql += "           ,1" + Constants.vbCrLf;
                        iSql += "           ,0" + Constants.vbCrLf;
                        iSql += "           ,'" + GroupUserGuid + "'" + Constants.vbCrLf;
                        iSql += "           ,'" + GroupOwnerUserIDGuid + "'" + Constants.vbCrLf;
                        iSql += "           ,'" + LibraryName + "'" + Constants.vbCrLf;
                        iSql += "           ,0" + Constants.vbCrLf;
                        iSql += "           ,1)" + Constants.vbCrLf;
                        insertExecutionList.Add(iSql);
                        PrevLibName = LibraryName;
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddLibraryGroupUser 100 - ", ex);
            }
            finally
            {
                RSData.Close();
            }

            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
            for (int I = 0, loopTo = deleteExecutionList.Count - 1; I <= loopTo; I++)
            {
                string tSql = deleteExecutionList[I];
                bool B = true;
                B = ExecuteSqlNewConn(90177, tSql);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: Failed to DELETE library users for library " + LibraryName + " : " + tSql);
                }
            }

            for (int I = 0, loopTo1 = insertExecutionList.Count - 1; I <= loopTo1; I++)
            {
                string tSql = insertExecutionList[I];
                bool B = true;
                B = ExecuteSqlNewConn(90178, tSql);
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: Failed to ADD library user. " + Constants.vbCrLf + tSql);
                }
                else
                {
                    LOG.WriteToArchiveLog("NOTICE: ADDED library user. " + Constants.vbCrLf + tSql);
                }
            }
        }

        public void DeleteLibraryGroupUser(string GroupName, string LibraryName)
        {
            GroupName = UTIL.RemoveSingleQuotes(GroupName);
            LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
            string S = "";
            S += " SELECT     GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID AS Userid" + Constants.vbCrLf;
            S += " FROM       GroupLibraryAccess INNER JOIN" + Constants.vbCrLf;
            S += "            GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName" + Constants.vbCrLf;
            S += " WHERE      GroupLibraryAccess.GroupName = '" + GroupName + "'" + Constants.vbCrLf;
            S += " AND        LibraryName = '" + LibraryName + "'" + Constants.vbCrLf;
            S += " order by   GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName" + Constants.vbCrLf;
            string Userid = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            try
            {
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        Userid = RSData.GetValue(2).ToString();
                        string SS = "delete from GroupLibraryAccess where UseriD = '" + Userid + "' and LibraryName = '" + LibraryName + "' and groupname = '" + GroupName + "'";
                        int iCnt = countGroupsUserBelongsTo(LibraryName, Userid);
                        if (iCnt == 0)
                        {
                            SS = "delete from LibraryUsers where UserID = '" + Userid + "' and LibraryName = '" + LibraryName + "'  and SingleUser != 1";
                            bool B1 = ExecuteSqlNewConn(90179, S);
                            if (!B1)
                            {
                                Console.WriteLine("Failed to delete oD " + Userid + " from Library " + LibraryName + ".");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddLibraryGroupUser 100 - ", ex);
            }
            finally
            {
                RSData.Close();
            }

            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void DeleteLibraryGroupUser(string GroupName, string LibraryName, string GroupUserID)
        {
            GroupName = UTIL.RemoveSingleQuotes(GroupName);
            LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
            string S = "";
            S += " SELECT     GroupLibraryAccess.GroupName, GroupLibraryAccess.LibraryName, GroupUsers.UserID AS Userid" + Constants.vbCrLf;
            S += " FROM         GroupLibraryAccess INNER JOIN" + Constants.vbCrLf;
            S += "                       GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName" + Constants.vbCrLf;
            S += " WHERE     (GroupLibraryAccess.GroupName = '" + GroupName + "') " + Constants.vbCrLf;
            S += "     AND (GroupLibraryAccess.LibraryName = '" + LibraryName + "') " + Constants.vbCrLf;
            S += "     AND (GroupUsers.UserID = '" + GroupUserID + "')" + Constants.vbCrLf;
            Clipboard.Clear();
            Clipboard.SetText(S);
            string Userid = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            try
            {
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        Userid = GroupUserID;
                        string SS = "delete from GroupLibraryAccess where UseriD = '" + Userid + "' and LibraryName = '" + LibraryName + "' and groupname = '" + GroupName + "'";
                        int iCnt = countGroupsUserBelongsTo(LibraryName, Userid);
                        if (iCnt == 0)
                        {
                            SS = "delete from LibraryUsers where UserID = '" + Userid + "' and LibraryName = '" + LibraryName + "'  and SingleUser != 1";
                            bool B1 = ExecuteSqlNewConn(90180, S);
                            if (!B1)
                            {
                                Console.WriteLine("Failed to delete 0e " + Userid + " from Library " + LibraryName + ".");
                            }
                        }
                    }
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: AddLibraryGroupUser 100 - ", ex);
            }
            finally
            {
                RSData.Close();
            }

            RSData = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void VerifyOrphanSourceData()
        {
            try
            {
                string S = "Select sourceguid from DataSource where DATALENGTH(SourceImage) = 0";
                string sourceguid = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                // Data Source=DELLT100\ECMLIB;Initial Catalog=ECM.Library;Integrated Security=True; Connect Timeout = 30
                if (Strings.InStr(CS, "Connect Timeout", CompareMethod.Text) > 0)
                {
                    int II = Strings.InStr(CS, "Connect Timeout", CompareMethod.Text);
                    CS = Strings.Mid(CS, 1, II - 1);
                }

                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        Application.DoEvents();
                        System.Threading.Thread.Sleep(100);
                        sourceguid = RSData.GetValue(0).ToString();
                        DeleteContent(sourceguid, "CONTENT", "Orphan records");
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: VerifyOrphanSourceData - ", ex);
            }

            MessageBox.Show("Source Validation Complete.");
        }

        public void VerifyOrphanEmailData()
        {
            try
            {
                string S = "Select emailguid from Email where DATALENGTH(EmailImage) = 0 ";
                string EmailGuid = "";
                SqlDataReader RSData = null;
                // RSData = SqlQryNo'Session(S)
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                RSData = command.ExecuteReader();
                // Data Source=DELLT100\ECMLIB;Initial Catalog=ECM.Library;Integrated Security=True; Connect Timeout = 30
                if (Strings.InStr(CS, "Connect Timeout", CompareMethod.Text) > 0)
                {
                    int II = Strings.InStr(CS, "Connect Timeout", CompareMethod.Text);
                    CS = Strings.Mid(CS, 1, II - 1);
                }

                if (RSData.HasRows)
                {
                    while (RSData.Read())
                    {
                        System.Threading.Thread.Sleep(100);
                        Application.DoEvents();
                        EmailGuid = RSData.GetValue(0).ToString();
                        DeleteEmailByGuid(EmailGuid);
                    }
                }

                RSData.Close();
                RSData = null;
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: VerifyOrphanEmailData - ", ex);
            }

            MessageBox.Show("Email Validation Complete.");
        }

        public void AddStdTriggers(string TblName, List<string> Keys)
        {
            string S = "";
            bool B = false;
            string TriggerName = "";
            TriggerName = "trig<XX>_Update";
            TriggerName = TriggerName.Replace("<XX>", TblName.Trim());
            S = "";
            S = S + " IF EXISTS (SELECT * FROM sys.triggers" + Constants.vbCrLf;
            S = S + "     WHERE name = '<XX>')" + Constants.vbCrLf;
            S = S + " DROP TRIGGER <XX>" + Constants.vbCrLf;
            S = S.Replace("<XX>", TriggerName.Trim());
            B = ExecuteSqlNewConn(90181, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR: Failed to drop trigger - " + TriggerName);
            }

            Clipboard.Clear();
            Clipboard.SetText(S);
            S = "";
            S = S + "CREATE TRIGGER trig<XX>_Update" + Constants.vbCrLf;
            S = S + "   ON <XX>" + Constants.vbCrLf;
            S = S + "         AFTER Update " + Constants.vbCrLf;
            S = S + "   AS" + Constants.vbCrLf;
            S = S + "         BEGIN " + Constants.vbCrLf;
            S = S + "         UPDATE <XX> " + Constants.vbCrLf;
            S = S + "   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME" + Constants.vbCrLf;
            S = S + "         FROM inserted " + Constants.vbCrLf;
            S = S + "   WHERE ";
            for (int i = 0, loopTo = Keys.Count - 1; i <= loopTo; i++)
            {
                if (i == 0)
                {
                    S = S + "     <XX>" + "." + Keys[i] + " = inserted." + Keys[i] + Constants.vbCrLf;
                }
                else
                {
                    S = S + "     and <XX>" + "." + Keys[i] + " = inserted." + Keys[i] + Constants.vbCrLf;
                }
            }

            S = S.Replace("<XX>", TblName.Trim());
            S = S + " End" + Constants.vbCrLf;
            Clipboard.Clear();
            Clipboard.SetText(S);
            B = ExecuteSqlNewConn(90182, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR: Failed to CREATE trigger - " + TriggerName);
            }

            TriggerName = "<XX>_INS";
            TriggerName = TriggerName.Replace("<XX>", TblName.Trim());
            S = "";
            S = S + " IF EXISTS (SELECT * FROM sys.triggers" + Constants.vbCrLf;
            S = S + "     WHERE name = '<XX>')" + Constants.vbCrLf;
            S = S + " DROP TRIGGER <XX>" + Constants.vbCrLf;
            S = S.Replace("<XX>", TriggerName.Trim());
            Clipboard.Clear();
            Clipboard.SetText(S);
            B = ExecuteSqlNewConn(90183, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR: Failed to drop trigger - " + TriggerName);
            }

            S = "";
            S = S + " Create TRIGGER <XX>_INS" + Constants.vbCrLf;
            S = S + "   ON dbo.<XX>" + Constants.vbCrLf;
            S = S + "   FOR UPDATE " + Constants.vbCrLf;
            S = S + " AS" + Constants.vbCrLf;
            S = S + "   IF ( @@ROWCOUNT = 0 )" + Constants.vbCrLf;
            S = S + "                 Return" + Constants.vbCrLf;
            S = S + "   IF TRIGGER_NESTLEVEL() > 1" + Constants.vbCrLf;
            S = S + "                 Return" + Constants.vbCrLf;
            S = S + "   UPDATE <XX>" + Constants.vbCrLf;
            S = S + "   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME" + Constants.vbCrLf;
            S = S + "   FROM <XX> t" + Constants.vbCrLf;
            S = S + "   JOIN inserted i" + Constants.vbCrLf;
            // S = S + "   ON t.ArchiveID = i.ArchiveID" + vbCrLf
            S = S + "   ON " + Constants.vbCrLf;
            for (int i = 0, loopTo1 = Keys.Count - 1; i <= loopTo1; i++)
            {
                if (i == 0)
                {
                    S = S + "     t" + "." + Keys[i] + " = i." + Keys[i] + Constants.vbCrLf;
                }
                else
                {
                    S = S + "     and t" + "." + Keys[i] + " = i." + Keys[i] + Constants.vbCrLf;
                }
            }

            S = S.Replace("<XX>", TblName.Trim());
            Clipboard.Clear();
            Clipboard.SetText(S);
            B = ExecuteSqlNewConn(90184, S);
            if (!B)
            {
                LOG.WriteToArchiveLog("ERROR: Failed to CREATE trigger - " + TriggerName);
            }

            return;
        }

        public void VerifyStandardTriggers()
        {
            var Keys = new List<string>();
            string S = "";
            S = S + " select s.name as TABLE_SCHEMA, t.name as TABLE_NAME";
            S = S + " , k.name as CONSTRAINT_NAME, k.type_desc as CONSTRAINT_TYPE";
            S = S + " , c.name as COLUMN_NAME, ic.key_ordinal AS ORDINAL_POSITION";
            S = S + " from sys.key_constraints as k";
            S = S + " join sys.tables as t";
            S = S + " on t.object_id = k.parent_object_id";
            S = S + " join sys.schemas as s";
            S = S + " on s.schema_id = t.schema_id";
            S = S + " join sys.index_columns as ic";
            S = S + " on ic.object_id = t.object_id";
            S = S + " and ic.index_id = k.unique_index_id";
            S = S + " join sys.columns as c";
            S = S + " on c.object_id = t.object_id";
            S = S + " and c.column_id = ic.column_id";
            S = S + " order by TABLE_SCHEMA, TABLE_NAME, CONSTRAINT_NAME, ORDINAL_POSITION;";
            SqlDataReader RSData = null;
            string TABLE_NAME = "";
            string CONSTRAINT_NAME = "";
            string COLUMN_NAME = "";
            string CONSTRAINT_TYPE = "";
            string prevTABLE_NAME = "";
            string prevCONSTRAINT_NAME = "";
            string prevCOLUMN_NAME = "";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            bool bFirstRow = true;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    TABLE_NAME = RSData.GetValue(1).ToString();
                    CONSTRAINT_NAME = RSData.GetValue(2).ToString();
                    COLUMN_NAME = RSData.GetValue(4).ToString();
                    // FrmMDIMain.SB4.Text = "Processing " + TABLE_NAME
                    Application.DoEvents();
                    if (TABLE_NAME.Equals(prevTABLE_NAME) & CONSTRAINT_NAME.Equals(prevCONSTRAINT_NAME))
                    {
                        if (prevTABLE_NAME.Length > 0)
                        {
                            Keys.Add(COLUMN_NAME);
                        }
                    }
                    else if (bFirstRow)
                    {
                        bFirstRow = false;
                        Keys.Add(COLUMN_NAME);
                    }
                    else
                    {
                        AddStdTriggers(prevTABLE_NAME, Keys);
                        Keys.Clear();
                        Keys.Add(COLUMN_NAME);
                    }

                    prevTABLE_NAME = TABLE_NAME;
                    prevCONSTRAINT_NAME = CONSTRAINT_NAME;
                }
            }

            RSData.Close();
            RSData = null;
            // FrmMDIMain.SB4.Text = ""
            MessageBox.Show("Triggers validated!");
        }

        public int countGroupsUserBelongsTo(string TcbLibraryName, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "";
            TcbLibraryName = UTIL.RemoveSingleQuotes(TcbLibraryName);
            S = S + " select COUNT(*) from GroupLibraryAccess where UserID = '" + UserID + "'  and LibraryName = '" + TcbLibraryName + "'";
            int iCnt = iCount(S);
            return iCnt;
        }

        public void GetGroupLibraries(string GroupName, ref List<string> ListOfLibraries)
        {
            ListOfLibraries.Clear();
            string S = "";
            S = S + " SELECT     LibraryName from GroupLibraryAccess WHERE     GroupName = '" + GroupName + "' ";
            bool b = true;
            string LibraryName = "";

            // If UBound(TblCols, 2) > 2 Then
            // Return
            // End If

            // ReDim TblCols (4, 0)

            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibraryName = RSData.GetValue(0).ToString();
                    ListOfLibraries.Add(LibraryName);
                }
            }

            RSData.Close();
            RSData = null;
        }

        public void ResetLibraryUsersCount()
        {
            bool b = true;
            string S = "update LibraryUsers set GroupCnt = 0 ";
            b = ExecuteSqlNewConn(90185, S);
            if (!b)
            {
                LOG.WriteToArchiveLog("ERROR: failed to reset the LibraryUsers GroupCnt - aborting.");
                return;
            }

            S = "";
            S += " SELECT     GroupUsers.UserID, GroupLibraryAccess.LibraryName, GroupLibraryAccess.GroupName";
            S += " FROM         GroupLibraryAccess INNER JOIN";
            S += "                       GroupUsers ON GroupLibraryAccess.GroupName = GroupUsers.GroupName";
            S += " group by GroupUsers.UserID, LibraryName, GroupLibraryAccess.GroupName                      ";
            S += " order by GroupUsers.UserID, LibraryName, GroupName";
            string UserID = "";
            string LibraryName = "";
            string GroupName = "";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            int II = 0;
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    II += 1;
                    if (II % 5 == 0)
                    {
                        // FrmMDIMain.SB4.Text = II.ToString
                    }

                    UserID = RSData.GetValue(0).ToString();
                    LibraryName = RSData.GetValue(1).ToString();
                    GroupName = RSData.GetValue(2).ToString();
                    LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
                    GroupName = UTIL.RemoveSingleQuotes(GroupName);
                    S = "update LibraryUsers set GroupCnt = GroupCnt + 1 where LibraryName = '" + LibraryName + "' and UserID = '" + UserID + "'";
                    b = ExecuteSqlNewConn(90186, S);
                    if (!b)
                    {
                        LOG.WriteToArchiveLog("ERROR: Failed to udpate LibraryUsers GroupCnt for Library 'xx' and user 'xx'.");
                    }
                }
            }

            RSData.Close();
            RSData = null;
            S = "select count(*) from LibraryUsers where (SingleUser is null or SingleUser = 0) and GroupCnt = 0 ";
            int iCnt = iCount(S);
            if (iCnt > 0)
            {
                S = "delete from LibraryUsers where (SingleUser is null or SingleUser = 0) and GroupCnt = 0 ";
                b = ExecuteSqlNewConn(90187, S);
                if (!b)
                {
                    LOG.WriteToArchiveLog("ERROR XX1: Failed to delete NULL LibraryUsers." + Constants.vbCrLf + S);
                }
            }
            // FrmMDIMain.SB4.Text = "Complete."
        }

        public string getListOfContainingLibraries(string tGuid)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string S = "select LibraryName from LibraryItems where SourceGuid = '" + tGuid + "' ";
            string LibName = "";
            string ListOfLibs = "";
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    LibName = RSData.GetValue(0).ToString();
                    ListOfLibs += LibName + Constants.vbCrLf;
                }
            }
            else
            {
                ListOfLibs += "None";
            }

            RSData.Close();
            RSData = null;
            return ListOfLibs;
        }

        public void FixEmailFields()
        {
            string S = "";
            S = "";
            S = S + " select emailGuid, SenderEmailAddress,SentTO  ,AllRecipients ,SenderName ,ReceivedByName ,OriginalFolder, CC , BCC ";
            S = S + " from Email ";
            S = S + " where ";
            S = S + " SenderEmailAddress like '%''%'";
            S = S + " or SentTO  like '%''%'";
            S = S + " or AllRecipients like '%''%'";
            S = S + " or SenderName like '%''%'";
            S = S + " or ReceivedByName like '%''%'";
            S = S + " or OriginalFolder like '%''%' ";
            S = S + " or CC like '%''%'";
            S = S + " or BCC like '%''%'";
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string EmailGuid = "";
            string SenderEmailAddress = "";
            string SentTO = "";
            string AllRecipients = "";
            string SenderName = "";
            string ReceivedByName = "";
            string OriginalFolder = "";
            string CC = "";
            string BCC = "";
            if (Information.UBound(TblCols, 2) > 2)
            {
                return;
            }

            int iRec = 0;
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    Application.DoEvents();
                    iRec += 1;
                    if (iRec % 5 == 0)
                    {
                        // FrmMDIMain.SB4.Text = "** " + iRec.ToString
                        Application.DoEvents();
                    }

                    EmailGuid = RSData.GetValue(0).ToString();
                    SenderEmailAddress = RSData.GetValue(1).ToString();
                    SentTO = RSData.GetValue(2).ToString();
                    AllRecipients = RSData.GetValue(3).ToString();
                    SenderName = RSData.GetValue(4).ToString();
                    ReceivedByName = RSData.GetValue(5).ToString();
                    OriginalFolder = RSData.GetValue(6).ToString();
                    CC = RSData.GetValue(7).ToString();
                    BCC = RSData.GetValue(8).ToString();
                    UTIL.StripSingleQuotes(ref SenderEmailAddress);
                    UTIL.StripSingleQuotes(ref SentTO);
                    UTIL.StripSingleQuotes(ref AllRecipients);
                    UTIL.StripSingleQuotes(ref SenderName);
                    UTIL.StripSingleQuotes(ref ReceivedByName);
                    UTIL.StripSingleQuotes(ref OriginalFolder);
                    UTIL.StripSingleQuotes(ref CC);
                    UTIL.StripSingleQuotes(ref BCC);
                    string UpdateSql = "";
                    UpdateSql = UpdateSql + " update Email set ";
                    UpdateSql = UpdateSql + " SenderEmailAddress ='" + SenderEmailAddress + "',";
                    UpdateSql = UpdateSql + "  SentTO ='" + SentTO + "',";
                    UpdateSql = UpdateSql + "  AllRecipients ='" + AllRecipients + "',";
                    UpdateSql = UpdateSql + "  SenderName ='" + SenderName + "',";
                    UpdateSql = UpdateSql + "  ReceivedByName ='" + ReceivedByName + "',";
                    UpdateSql = UpdateSql + "  OriginalFolder ='" + OriginalFolder + "',";
                    UpdateSql = UpdateSql + "  CC ='" + CC + "',";
                    UpdateSql = UpdateSql + "  BCC ='" + BCC + "' ";
                    UpdateSql = UpdateSql + " where EmailGuid = '" + EmailGuid + "'";
                    b = ExecuteSqlNewConn(90188, UpdateSql);
                    if (!b)
                    {
                        Console.WriteLine("ERROR: " + UpdateSql);
                    }
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            // FrmMDIMain.SB4.Text = ""

            FixEmailRecipients();
        }

        public void FixEmailRecipients()
        {
            string Recipient = "";
            string S = "SELECT distinct [Recipient] FROM [Recipients] where [Recipient] like '%''%'";
            var L = new List<string>();
            bool b = true;
            int i = 0;
            int id = -1;
            int II = 0;
            string EmailGuid = "";
            if (Information.UBound(TblCols, 2) > 2)
            {
                return;
            }

            int iRec = 0;
            SqlDataReader RSData = null;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    Application.DoEvents();
                    iRec += 1;
                    if (iRec % 5 == 0)
                    {
                        // FrmMDIMain.SB4.Text = "** " + iRec.ToString
                        Application.DoEvents();
                    }

                    Recipient = RSData.GetValue(0).ToString();
                    if (!L.Contains(Recipient))
                    {
                        L.Add(Recipient);
                    }
                }
            }
            else
            {
                id = -1;
            }

            RSData.Close();
            RSData = null;
            var loopTo = L.Count - 1;
            for (i = 0; i <= loopTo; i++)
            {
                S = L[i];
                S = UTIL.RemoveSingleQuotes(S);
                Recipient = L[i];
                UTIL.StripSingleQuotes(ref Recipient);
                string UpdateSql = "";
                UpdateSql = UpdateSql + " update Recipients set ";
                UpdateSql = UpdateSql + " Recipient ='" + Recipient + "' ";
                UpdateSql = UpdateSql + " where Recipient = '" + S + "'";
                b = ExecuteSqlNewConn(90189, UpdateSql);
                if (!b)
                {
                    Console.WriteLine("ERROR: " + UpdateSql);
                }
            }

            // FrmMDIMain.SB4.Text = ""
        }

        public void RecordGrowth()
        {
            string S = "";
            S = S + " IF OBJECT_ID('DatabaseFiles') IS NULL";
            S = S + " BEGIN";
            S = S + " SELECT TOP 0 * INTO DatabaseFiles";
            S = S + " FROM sys.database_files    ";
            S = S + " ";
            S = S + " ALTER TABLE DatabaseFiles";
            S = S + " ADD CreationDate DATETIME DEFAULT(GETDATE())";
            S = S + " End";
            bool b = ExecuteSqlNewConn(90190, S);
            if (!b)
            {
                Console.WriteLine("ERROR: RecordGrowth = " + S);
            }

            S = S + " EXECUTE sp_msforeachdb 'INSERT INTO DatabaseFiles SELECT *, GETDATE() FROM [?].sys.database_files'";
            b = ExecuteSqlNewConn(90191, S);
            if (!b)
            {
                Console.WriteLine("ERROR: RecordGrowth = " + S);
            }
        }

        public void EmailHashRows()
        {
            string S = "";
            S = "";
            S = S + " select subject, CreationTime, SenderEmailAddress, nbrAttachments, SourceTypeCode ";
            S = S + " from Email where RecHash is NULL";
            string EmailGuid = "";
            string SenderEmailAddress = "";
            string subject = "";
            string body = "";
            string CreationTime = "";
            string nbrAttachments = "";
            string SourceTypeCode = "";
            string FileExt = "";
            string tHash = "";
            string tKey = "";
            int iCnt = 0;
            var L = new SortedList<string, string>();
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            UTIL.setConnectionStringTimeout(ref CS, "10000");
            int JumpTo = 0;
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            bool ProcessData = false;
            if (RSData.HasRows & ProcessData == true)
            {
                while (RSData.Read())
                {
                    iCnt += 1;
                    Application.DoEvents();
                    if (iCnt % 50 == 0)
                    {
                        // FrmMDIMain.SB4.Text = iCnt.ToString
                        Application.DoEvents();
                        // System.Threading.Thread.Sleep(250)
                    }

                    if (JumpTo > 0 & iCnt < JumpTo)
                    {
                        goto NextOne;
                    }

                    EmailGuid = RSData.GetValue(0).ToString();
                    subject = RSData.GetValue(1).ToString();
                    CreationTime = RSData.GetValue(2).ToString();
                    SenderEmailAddress = RSData.GetValue(3).ToString();
                    nbrAttachments = RSData.GetValue(4).ToString();
                    SourceTypeCode = RSData.GetValue(5).ToString();
                    tKey = subject + Conversions.ToString('þ') + CreationTime + Conversions.ToString('þ') + SenderEmailAddress + Conversions.ToString('þ') + nbrAttachments + Conversions.ToString('þ') + SourceTypeCode;
                    tHash = KGEN.genEmailHashCode(subject, body, SenderEmailAddress, CreationTime, nbrAttachments, FileExt);
                    LOG.WriteToEmailDuplicateLog("E", EmailGuid, tHash);
                    NextOne:
                    ;
                }
            }
            else
            {
                RSData.Close();
                RSData = null;
                // FrmMDIMain.SB4.Text = ""
                return;
            }

            RSData.Close();
            RSData = null;
            // FrmMDIMain.SB4.Text = ""

            LOG.LoadEmailDupLog(ref L);
            EmailHashRowsApply(ref L, CS);

            // FrmMDIMain.SB4.Text = "Done."
            L = null;
        }

        public void EmailHashRowsApply(ref SortedList<string, string> L, string CS)
        {
            bool rc = false;
            var CN = new SqlConnection(CS);
            CN.Open();
            var dbCmd = CN.CreateCommand();
            bool BB = true;
            string EmailGuid = "";
            string tHash = "";
            int iCnt = 0;
            int SkipTo = 215035;
            string UpdateSql = "";
            bool B = true;
            for (int I = SkipTo, loopTo = L.Count - 1; I <= loopTo; I++)
            {
                Application.DoEvents();
                try
                {
                    EmailGuid = L.Keys[I];
                    tHash = L.Values[I];
                    UpdateSql = "Update Email set RecHash = '" + tHash + "' where EmailGuid = '" + EmailGuid + "'";

                    // B = ExecuteSqlNewConn(90192,UpdateSql)
                    try
                    {
                        B = true;
                        dbCmd.CommandText = UpdateSql;
                        dbCmd.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        B = false;
                    }

                    // If I Mod 100 = 0 Then
                    // Try
                    // dbCmd.CommandText = "GO"
                    // dbCmd.ExecuteNonQuery()
                    // Catch ex As Exception
                    // Console.WriteLine("ERROR: EmailHashRows 200 - " , ex)
                    // End Try

                    // End If

                    if (!B)
                    {
                        Console.WriteLine("ERROR: " + UpdateSql);
                    }

                    iCnt += 1;
                    if (I % 10 == 0)
                    {
                        // FrmMDIMain.SB4.Text = "** " + I.ToString
                        Application.DoEvents();
                    }
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 100 - EmailHashRowsApply: " + ex.Message + Constants.vbCrLf + UpdateSql);
                    B = false;
                }
            }

            if (B == true)
            {
                L.Clear();
            }

            CN.Close();
            CN.Dispose();
        }

        public void ContentHashRows()
        {
            string S = "";
            S = "";
            S = S + " SELECT [SourceGuid],[VersionNbr], CreateDate,[SourceName],[OriginalFileType],[FileLength],[CRC] ";
            S = S + " FROM [DataSource] where RecHash is NULL";
            string SourceGuid = "";
            // Dim VersionNbr As String = ""
            string CreateDate = "";
            string SourceName = "";
            string OriginalFileType = "";
            string FileLength = "";
            string CRC = "";
            string tHash = "";
            string tKey = "";
            int iCnt = 0;
            var L = new SortedList<string, string>();
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            UTIL.setConnectionStringTimeout(ref CS, "10000");
            int JumpTo = 0;
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            bool ProcessData = false;
            if (RSData.HasRows & ProcessData == true)
            {
                while (RSData.Read())
                {
                    iCnt += 1;
                    Application.DoEvents();
                    if (iCnt % 50 == 0)
                    {
                        // FrmMDIMain.SB4.Text = iCnt.ToString
                        Application.DoEvents();
                        // System.Threading.Thread.Sleep(250)
                    }

                    if (JumpTo > 0 & iCnt < JumpTo)
                    {
                        goto NextOne;
                    }

                    SourceGuid = RSData.GetValue(0).ToString();
                    // VersionNbr = RSData.GetValue(1).ToString()
                    CreateDate = RSData.GetValue(2).ToString();
                    SourceName = RSData.GetValue(3).ToString();
                    OriginalFileType = RSData.GetValue(4).ToString();
                    FileLength = RSData.GetValue(5).ToString();
                    CRC = RSData.GetValue(6).ToString();
                    tKey = CreateDate + Conversions.ToString('þ') + SourceName + Conversions.ToString('þ') + OriginalFileType + Conversions.ToString('þ') + FileLength + Conversions.ToString('þ') + CRC;
                    tHash = KGEN.genHashContent(CreateDate, SourceName, OriginalFileType, FileLength, CRC);
                    LOG.WriteToContentDuplicateLog("C", SourceGuid, tHash);
                    NextOne:
                    ;
                }
            }
            else
            {
                RSData.Close();
                RSData = null;
                // FrmMDIMain.SB4.Text = ""
                return;
            }

            RSData.Close();
            RSData = null;
            // FrmMDIMain.SB4.Text = ""

            LOG.LoadContentDupLog(ref L);
            ContentHashRowsApply(ref L, CS);

            // FrmMDIMain.SB4.Text = "Done: Content Keyed"
            L = null;
        }

        public void ContentHashRowsApply(ref SortedList<string, string> L, string CS)
        {
            bool rc = false;
            var CN = new SqlConnection(CS);
            CN.Open();
            var dbCmd = CN.CreateCommand();
            bool BB = true;
            string SourceGuid = "";
            string tHash = "";
            int iCnt = 0;
            int SkipTo = 215035;
            string UpdateSql = "";
            bool B = true;
            for (int I = SkipTo, loopTo = L.Count - 1; I <= loopTo; I++)
            {
                Application.DoEvents();
                try
                {
                    SourceGuid = L.Keys[I];
                    tHash = L.Values[I];
                    UpdateSql = "Update DataSource set RecHash = '" + tHash + "' where SourceGuid = '" + SourceGuid + "'";
                    try
                    {
                        B = true;
                        dbCmd.CommandText = UpdateSql;
                        dbCmd.ExecuteNonQuery();
                    }
                    catch (Exception ex)
                    {
                        Console.WriteLine(ex.Message);
                        B = false;
                    }

                    if (!B)
                    {
                        Console.WriteLine("ERROR: " + UpdateSql);
                    }

                    iCnt += 1;
                    if (I % 10 == 0)
                    {
                        // FrmMDIMain.SB4.Text = "** " + I.ToString
                        Application.DoEvents();
                    }
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 100 - EmailHashRowsApply: " + ex.Message + Constants.vbCrLf + UpdateSql);
                    B = false;
                }
            }

            if (B == true)
            {
                L.Clear();
            }

            CN.Close();
            CN.Dispose();
        }

        public void ContentAddHash(string SourceGuid, string tHash, string MachineID)
        {
            string CS = getRepoConnStr();
            var CN = new SqlConnection(CS);
            CN.Open();
            var dbCmd = CN.CreateCommand();
            bool BB = true;
            int iCnt = 0;
            // where FQN = '" + FQN + "' and DataSourceOwnerUserID = '" + UserID  + "'"
            string UpdateSql = "Update DataSource set RecHash = '" + tHash + "', MachineID = '" + MachineID + "' where SourceGuid = '" + SourceGuid + "'";
            bool B = true;
            try
            {
                B = true;
                dbCmd.CommandText = UpdateSql;
                dbCmd.ExecuteNonQuery();
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: ContentHashRowsApply - 100 " + UpdateSql);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: ContentHashRowsApply - 200 " + ex.Message + Constants.vbCrLf + UpdateSql);
                B = false;
            }

            CN.Close();
            CN.Dispose();
        }

        public void EmailAddHash(string EmailGuid, string EmailIdentifier)
        {
            string CS = getRepoConnStr();
            var CN = new SqlConnection(CS);
            CN.Open();
            var dbCmd = CN.CreateCommand();
            bool BB = true;
            int iCnt = 0;
            EmailIdentifier = EmailIdentifier.Replace("'", "''");
            string UpdateSql = "Update Email set EmailIdentifier = '" + EmailIdentifier + "' where EmailGuid = '" + EmailGuid + "'";
            bool B = true;
            try
            {
                B = true;
                dbCmd.CommandText = UpdateSql;
                dbCmd.ExecuteNonQuery();
                if (!B)
                {
                    LOG.WriteToArchiveLog("ERROR: EmailHashRowsApply - 100 " + UpdateSql);
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR: EmailHashRowsApply - 200 " + ex.Message + Constants.vbCrLf + UpdateSql);
                B = false;
            }

            CN.Close();
            CN.Dispose();
        }

        public string genEmailHashCode(string subject, string body, string CreationTime, string SenderEmailAddress, string nbrAttachments, string SourceTypeCode)
        {
            string tHash = KGEN.genEmailHashCode(subject, body, SenderEmailAddress, CreationTime, nbrAttachments, SourceTypeCode);
            return tHash;
        }

        public void XXaddContentHashKey(string SourceGuid, string VersionNbr, string CreateDate, string SourceName, string OriginalFileType, string FileLength, string CRC, string MachineID)
        {
            string tHash = KGEN.genHashContent(CreateDate, SourceName, OriginalFileType, FileLength, CRC);
            ContentAddHash(SourceGuid, tHash, MachineID);
        }

        ~clsDatabaseARCH()
        {
            KGEN = null;
        }

        public void CleanUpEmailFolders()
        {
            string S = "";
            S = S + "         DELETE";
            S = S + "         FROM EmailFolder ";
            S = S + " WHERE nRowID NOT IN";
            S = S + " (";
            S = S + " Select Max(nRowID)";
            S = S + " FROM EmailFolder";
            S = S + " GROUP BY userid, folderid";
            S = S + " )";
            bool B = ExecuteSqlNewConn(90193, S);
            S = "";
            S = S + " delete from EmailArchParms ";
            S = S + " where FolderName not in (select FolderName from EmailFolder)";
            B = ExecuteSqlNewConn(90194, S);
        }

        public bool bFileNameExists(string SourceName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = true;
            int I = 0;
            string S = "";
            S = S + " SELECT count(*) from DataSource where SourceName = '" + SourceName + "'";
            I = iCount(S);
            if (I > 0)
            {
                B = true;
            }
            else
            {
                B = false;
            }

            return B;
        }

        public bool bIdenticalFile(string SourceName, string CRC, string CreateDate, string LastAccessDate, int FileLength)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            bool B = true;
            B = bFileNameExists(SourceName);
            if (B == false)
            {
                // ** the file does not exist.
                return B;
            }

            // ** The file does exist, verify wherther it is a duplicate file or not

            return B;
        }

        public string getUserGuidByLoginID(string LoginID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            if (LoginID.Length == 0)
            {
                return "";
            }

            string S = "SELECT [UserID] FROM [Users] where [UserLoginID] = '" + LoginID + "'";
            string UGuid = "";
            int cnt = 0;
            SqlDataReader rsCnt = null;
            try
            {
                rsCnt = SqlQryNewConn(S);
                if (rsCnt.HasRows)
                {
                    while (rsCnt.Read())
                        UGuid = rsCnt.GetValue(0).ToString();
                }
            }
            catch (Exception ex)
            {
                UGuid = "";
                LOG.WriteToArchiveLog("getUserGuidByLoginID : 5406 : ", ex);
            }
            finally
            {
                if (rsCnt is object)
                {
                    if (!rsCnt.IsClosed)
                    {
                        rsCnt.Close();
                    }

                    rsCnt = null;
                }
            }

            return UGuid;
        }

        public void AppendOcrTextEmail(string SourceGuid, string OCR_Text)
        {
            string OcrText = OCR_Text;
            string S = "";
            bool b = false;
            string EmailBody = GetEmailBody(SourceGuid);
            EmailBody = EmailBody + " " + OCR_Text;
            EmailBody = EmailBody.Replace("''", "'");
            EmailBody = EmailBody.Replace("'", "''");
            S = "update EMAIL set Body = '" + EmailBody + "' where EmailGuid = '" + SourceGuid + "'";
            b = ExecuteSqlNewConn(90195, S);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        public void AppendOcrTextEmail(string SourceGuid)
        {
            string OcrText = "";
            string S = "";
            bool b = false;

            // Dim S  = "update DataSource set GraphicContainsText = 'Y' where SourceGuid = '" + SourceGuid + "'"
            // Dim b As Boolean = ExecuteSqlNewConn(90196,S, False)
            // If Not b Then
            // If ddebug Then Debug.Print("Failed to set OCR Attributes")
            // End If

            string EmailBody = GetEmailBody(SourceGuid);
            OcrText = GetAllOcrData(SourceGuid);
            OcrText = UTIL.ReplaceSingleQuotesV1(OcrText);
            EmailBody = UTIL.ReplaceSingleQuotesV1(EmailBody);
            EmailBody = EmailBody + OcrText;
            // CleanText(EmailBody)

            S = "update EMAIL set BODY = '" + EmailBody + "' where EmailGuid = '" + SourceGuid + "'";
            // System.Windows.Forms.Clipboard.Clear()
            // System.Windows.Forms.Clipboard.SetText(S)

            b = ExecuteSqlNewConn(90197, S);
            if (!b)
            {
                if (ddebug)
                    Debug.Print("Failed to set OCR Attributes");
            }
        }

        private string GetAllOcrData(string EmailGuid)
        {
            string S = "select OcrText from emailattachment where EmailGuid = '" + EmailGuid + "'";
            string AllText = "";
            string ConnStr = getRepoConnStr();
            var Conn = new SqlConnection(ConnStr);
            if (Conn.State == ConnectionState.Closed)
            {
                Conn.Open();
            }

            SqlDataReader rsData = null;
            rsData = SqlQryNewConn(S);
            if (rsData.HasRows)
            {
                while (rsData.Read())
                    AllText = AllText + rsData.GetValue(0).ToString() + Conversions.ToString('þ');
            }

            return AllText;
        }

        public int cnt_UniqueEntry(string LibraryName, string SourceGuid)
        {
            LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
            int B = 0;
            string TBL = "LibraryItems";
            string WC = "Where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "' ";
            B = iGetRowCount(TBL, WC);
            return B;
        }     // ** cnt_UK_LibItems

        public void SetEmailOcrText(string Body, string EmailGuid, string OcrText, string AttachmentName)
        {
            AttachmentName = AttachmentName.Replace("'", "''");
            OcrText = UTIL.BlankOutSingleQuotes(OcrText);
            string S = "update EmailAttachment set OcrText = '" + OcrText + "' where EmailGuid = '" + EmailGuid + "' and AttachmentName = '" + AttachmentName + "'";
            bool b = ExecuteSqlNewConn(S, false);
            if (!b)
            {
                LOG.WriteToArchiveLog("ERROR: 100 Failed to set Email OCR Attributes");
            }
        }

        public bool addDocSourceError(string SourceType, string SourceGuid, string Notes)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            Notes = UTIL.RemoveSingleQuotes(Notes);
            string mySql = "";
            if (SourceType.ToUpper().Equals("CONTENT"))
            {
                mySql = "UPDATE [DataSource] set Notes = '" + Notes + "' where SourceGuid = '" + SourceGuid + "'";
            }
            else
            {
                mySql = "UPDATE Email set Notes = '" + Notes + "' where EmailGuid = '" + SourceGuid + "'";
            }

            bool b = ExecuteSqlNewConn(mySql, false);
            return b;
        }

        public bool AddLibraryItem(string SourceGuid, string ItemTitle, string FileExt, string LibraryName)
        {
            ItemTitle = UTIL.RemoveSingleQuotes(ItemTitle);
            LibraryName = UTIL.RemoveSingleQuotes(LibraryName);
            string LibraryOwnerUserID = modGlobals.gCurrUserGuidID;
            string DataSourceOwnerUserID = modGlobals.gCurrUserGuidID;
            string LibraryItemGuid = Guid.NewGuid().ToString();
            string AddedByUserGuidId = modGlobals.gCurrUserGuidID;
            string SS = "Select count(*) from LibraryItems where LibraryName = '" + LibraryName + "' and SourceGuid = '" + SourceGuid + "'";
            int iCnt = iCount(SS);
            if (iCnt > 0)
            {
                return true;
            }

            bool b = false;
            string s = "";
            s = s + " INSERT INTO LibraryItems(";
            s = s + "SourceGuid,";
            s = s + "ItemTitle,";
            s = s + "ItemType,";
            s = s + "LibraryItemGuid,";
            s = s + "DataSourceOwnerUserID,";
            s = s + "LibraryOwnerUserID,";
            s = s + "LibraryName,";
            s = s + "AddedByUserGuidId) values (";
            s = s + "'" + SourceGuid + "'" + ",";
            s = s + "'" + ItemTitle + "'" + ",";
            s = s + "'" + FileExt + "'" + ",";
            s = s + "'" + LibraryItemGuid + "'" + ",";
            s = s + "'" + DataSourceOwnerUserID + "'" + ",";
            s = s + "'" + LibraryOwnerUserID + "'" + ",";
            s = s + "'" + LibraryName + "'" + ",";
            s = s + "'" + AddedByUserGuidId + "'" + ")";
            Application.DoEvents();
            bool BB = ExecuteSqlNewConn(s, false);
            if (BB == false)
            {
                LOG.WriteToArchiveLog("ERROR: AddLibraryItem 100 - Failed to add '" + ItemTitle + "' to library '" + LibraryName + "'.");
            }
            else if (ddebug)
                LOG.WriteToArchiveLog("NOTICE : AddLibraryItem :'" + ItemTitle + "' to library '" + LibraryName + "'.");
            return BB;
        }

        public void AddExcgKey(string ExcgKey)
        {
            string S = "INSERT INTO [ExcgKey] ([MailKey]) VALUES ('" + ExcgKey.ToString() + "')";
            bool B = ExecuteSqlNewConn(90198, S);
        }

        public bool DeleteDirectory(string dirPath)
        {
            var objDI = new DirectoryInfo(dirPath);
            try
            {
                objDI.Delete(true);
                return true;
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
                return false;
            }
        }

        public void CreateDir(string dirPath)
        {
            try
            {
                if (Directory.Exists(dirPath))
                {
                }
                else
                {
                    Directory.CreateDirectory(dirPath);
                }
            }
            catch (Exception ex)
            {
                Console.WriteLine(ex.Message);
            }
        }

        // Public Sub PDFXTRACT(ByVal SourceGuid , ByVal FQN , ByVal SourceType As String)

        // Dim currDir As String = DMA.GetFilePath(FQN)

        // Dim RetentionCode As String = "Retain 10" Dim ispublic As String = "N"

        // If gPdfExtended = False Then Return End If Dim xDate As Date = #8/31/2010#

        // Dim PdfImages As New List(Of String) '**WDM Dim PDF As New clsPdfAnalyzer Dim B As Boolean = False

        // Try Dim FileExt = DMA.getFileExtension(FQN) If FileExt.ToUpper.Equals(".PDF") Then

        // Dim S = "" If SourceType.ToUpper.Equals("CONTEXT") Then S = "Update DataSource set OcrText = ''
        // where SourceGuid = '" + SourceGuid + "' " Else S = "Update EmailAttachment set OcrText = ''
        // where EmailGuid = '" + SourceGuid + "' " End If

        // B = ExecuteSqlNewConn(90199,S)

        // Dim iCnt As Integer = PDF.ExtractImages(SourceGuid , FQN , PdfImages)

        // If iCnt > 0 Then Try frmExchangeMonitor.lblMessageInfo.Text = FQN
        // frmExchangeMonitor.lblMessageInfo.Refresh() System.Windows.Forms.Application.DoEvents() Dim
        // tFqn As String = "" For II As Integer = 0 To PdfImages.Count - 1

        // Dim Sha1Hash As String = ENC.getCountDataSourceFiles(tFqn)

        // frmExchangeMonitor.lblMessageInfo.Text = II.ToString + " of " + PdfImages.Count.ToString + "
        // PDF Images." frmExchangeMonitor.lblMessageInfo.Refresh() System.Windows.Forms.Application.DoEvents()

        // tFqn = PdfImages(II) Dim AttachmentName As String = DMA.getFileName(tFqn ) 'DOES THE FILE EXIST
        // HERE? If SourceType.Equals("CONTENT") Then Else Dim AttachmentExists As Integer =
        // iCount("select count(*) from EmailAttachment where EmailGuid = '" + SourceGuid + "' and
        // AttachmentName = '" + AttachmentName + "' ") If AttachmentExists = 0 Then Dim BB As Boolean =
        // InsertAttachmentFqn(gCurrUserGuidID, tFqn , SourceGuid , AttachmentName , FileExt ,
        // gCurrUserGuidID, RetentionCode, Sha1Hash, ispublic, currDir) If BB = False Then GoTo SKIPX01
        // End If End If End If

        // System.Threading.Thread.Sleep(100)
        // SKIPX01:
        // Next

        // Catch ex As Exception LOG.WriteToArchiveLog("ERROR PDFXTRACT 100 - " + FQN + vbCrLf +
        // ex.Message) End Try End If

        // Dim PdfContent As String = PDF.ExtractText(FQN )

        // If PdfContent.Trim.Length > 0 Then AppendOcrText(SourceGuid , PdfContent) End If

        // End If Catch ex As Exception LOG.WriteToArchiveLog("ERROR: PDFXTRACT 100 - " + ex.message +
        // vbCrLf + FQN) Finally PDF = Nothing PdfImages = Nothing GC.Collect() End Try

        // System.Windows.Forms.Application.DoEvents()

        // End Sub

        public void LoadExckKeys(ref SortedList<string, string> L)
        {
            string SS = "select count(*) from [ExcgKey]";
            int iKeyCnt = iCount(SS);
            if (iKeyCnt == 0)
            {
                return;
            }
            else
            {
                My.MyProject.Forms.frmMain.PB1.Maximum = iKeyCnt + 5;
            }

            My.MyProject.Forms.frmMain.PB1.Value = 0;
            string S = "select distinct(mailkey) from [ExcgKey]";
            L.Clear();
            string mailkey = "";
            int cnt = 0;
            CloseConn();
            CkConn();
            string ConnStr = getRepoConnStr();
            try
            {
                using (gConn)
                {
                    var command = new SqlCommand(S, gConn);
                    SqlDataReader rsCnt = null;
                    rsCnt = SqlQry(S, gConn);
                    if (rsCnt.HasRows)
                    {
                        while (rsCnt.Read())
                        {
                            cnt += 1;
                            My.MyProject.Forms.frmMain.PB1.Value = cnt;
                            mailkey = rsCnt.GetValue(0).ToString();
                            if (L.IndexOfKey(mailkey) < 0)
                            {
                                try
                                {
                                    L.Add(mailkey, mailkey);
                                }
                                catch (Exception ex2)
                                {
                                    Console.WriteLine(ex2.Message);
                                }
                            }
                        }
                    }

                    rsCnt.Close();
                    rsCnt = null;
                    command.Connection.Close();
                    command = null;
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : LoadExckKeys : 100 : ", ex);
            }
            finally
            {
                My.MyProject.Forms.frmMain.PB1.Value = 0;
            }

            CloseConn();
        }

        // ''' <summary>
        // ''' This is not HOOKED into the system yet (3/20/11). It's purpose will be to speed up the
        // ''' search and loading of emails by 100 fold.
        // ''' </summary>
        // ''' <param name="L">A sorted list of strings/strings</param>
        // ''' <param name="CurrUserID">The user ID currently executing the archive.</param>
        // ''' <remarks></remarks>
        // Function LoadOutlookKeys(ByRef L As SortedList(Of String, String), ByVal CurrUserID As String) As Boolean

        // Dim Limit As Integer = 1000000 Dim B As Boolean = True Dim SS As String = "select COUNT(*) from
        // Email where UserID = '" + CurrUserID + "'" Dim iKeyCnt As Integer = iCount(SS)

        // If iKeyCnt = 0 Or iKeyCnt > Limit Then Return False Else frmReconMain.SB.Text = "Loading " +
        // iKeyCnt.ToString + "Outlook keys, standby." frmReconMain.PB1.Maximum = iKeyCnt + 5 End If
        // frmReconMain.PB1.Value = 0

        // Dim S As String = "select distinct(EntryID) from Email where UserID = '" + CurrUserID + "'"
        // L.Clear() Dim mailkey As String = ""

        // Dim cnt As Integer = 0 CloseConn() CkConn() Dim ConnStr As String = getRepoConnStr() Try Using
        // gConn Dim command As New SqlCommand(S, gConn) Dim rsCnt As SqlDataReader = Nothing rsCnt =
        // SqlQry(S, gConn) If rsCnt.HasRows Then Do While rsCnt.Read cnt += 1 frmReconMain.PB1.Value =
        // cnt mailkey = rsCnt.GetValue(0).ToString If L.IndexOfKey(mailkey) < 0 Then Try L.Add(mailkey,
        // cnt.ToString) Catch ex2 As System.Exception Console.WriteLine(ex2.Message) End Try End If Loop
        // End If

        // rsCnt.Close()
        // rsCnt = Nothing
        // command.Connection.Close()
        // command = Nothing
        // End Using
        // Catch ex As System.Exception
        // log.WriteToArchiveLog("clsDatabaseARCH : LoadExckKeys : 100 : " , ex)
        // B = False
        // Finally
        // frmReconMain.PB1.Value = 0
        // End Try
        // CloseConn()
        // Return B
        // End Function

        /// <summary>
    /// This is not HOOKED into the system yet (3/20/11). It's purpose will be to speed up the search
    /// for existing outlook emails but will not be as fast as if the function "LoadOutlookKeys" is
    /// used, but has unlimited size as one record at a time is searched.
    /// </summary>
    /// <param name="EntryID">   </param>
    /// <param name="CurrUserID"></param>
    /// <returns></returns>
    /// <remarks></remarks>
        public bool ckEntryIdExists(string EntryID, string CurrUserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string SS = "select COUNT(*) from Email where UserID = '" + CurrUserID + "'";
            int iKeyCnt = iCount(SS);
            if (iKeyCnt > 0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        public void AddSourceTypeCode(string SourceTypeCode, int bStoreExternal, string SourceTypeDesc, int bIndexable)
        {
            if (Strings.InStr(SourceTypeCode, ".") == 0)
            {
                SourceTypeCode = "." + SourceTypeCode;
            }

            SourceTypeDesc = SourceTypeDesc.Replace("'", "`");
            bool b = false;
            string s = "";
            s = s + " IF not Exists (Select SourceTypeCode from SourceType where SourceTypeCode = '" + SourceTypeCode + "') " + Constants.vbCrLf;
            s = s + " INSERT INTO SourceType(" + Constants.vbCrLf;
            s = s + "SourceTypeCode," + Constants.vbCrLf;
            s = s + "StoreExternal," + Constants.vbCrLf;
            s = s + "SourceTypeDesc," + Constants.vbCrLf;
            s = s + "Indexable) values (" + Constants.vbCrLf;
            s = s + "'" + SourceTypeCode + "'" + "," + Constants.vbCrLf;
            s = s + bStoreExternal + "," + Constants.vbCrLf;
            s = s + "'" + SourceTypeDesc + "'" + "," + Constants.vbCrLf;
            s = s + bIndexable + ")" + Constants.vbCrLf;
            b = ExecuteSqlNewConn(s, false);
            if (!b)
            {
                LOG.WriteToArchiveLog("clsSOURCETYPE : Insert : 01 : " + "ERROR: An unknown file type was NOT inserted. The SQL is: " + s);
                LOG.WriteToArchiveLog("clsSOURCETYPE : Insert : 01 : " + "ERROR: An unknown file type was NOT inserted. The SQL is: " + s);
            }
        }

        public void LoadProfiles()
        {
            string S = "";
            bool B = false;
            // *********************************************************************************
            S = @" INSERT [dbo].[LoadProfile] ([ProfileName], [ProfileDesc], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'Known graphic file types.', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB752 AS DateTime), CAST(0x00009D8B00CBB752 AS DateTime))";
            B = ExecuteSqlNewConn(90200, S);
            S = @" INSERT [dbo].[LoadProfile] ([ProfileName], [ProfileDesc], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'All MS Office content.', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB752 AS DateTime), CAST(0x00009D8B00CBB752 AS DateTime))";
            B = ExecuteSqlNewConn(90201, S);
            S = @" INSERT [dbo].[LoadProfile] ([ProfileName], [ProfileDesc], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - C#', N'Source Code - C#', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB752 AS DateTime), CAST(0x00009D8B00CBB752 AS DateTime))";
            B = ExecuteSqlNewConn(90202, S);
            S = @" INSERT [dbo].[LoadProfile] ([ProfileName], [ProfileDesc], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'Source Code - VB', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB752 AS DateTime), CAST(0x00009D8B00CBB752 AS DateTime))";
            B = ExecuteSqlNewConn(90203, S);
            // *********************************************************************************
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xlsx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90204, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xls', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90205, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.pdf', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90206, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.html', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90207, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.htm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90208, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.docx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90209, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.doc', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90210, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.Tiff', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90211, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.tif', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90212, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.gif', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90213, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.docm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90214, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.dotx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90215, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.dotm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90216, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xlsm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90217, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xltx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90218, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xltm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90219, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xlsb', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90220, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.xlam', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90221, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.pptx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90222, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.PDF', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90223, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.TXT', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90224, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.pptm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90225, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.potx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90226, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.potm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90227, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.ppam', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90228, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.ppsx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90229, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Office Documents', N'.ppsm', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90230, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.bmp', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90231, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.png', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90232, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.vb', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90233, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.xsd', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90234, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.xss', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90235, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.xsc', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90236, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.ico', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90237, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.rpt', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90238, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.rdlc', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90239, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.resx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90240, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.sql', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90241, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.xml', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90242, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.sln', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90243, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Source Code - VB', N'.vbx', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90244, S);
            S = @" INSERT [dbo].[LoadProfileItem] ([ProfileName], [SourceTypeCode], [HiveConnectionName], [HiveActive], [RepoSvrName], [RowCreationDate], [RowLastModDate]) VALUES (N'Graphics Files', N'.jpg', NULL, 0, N'DELLT100\ECMLIB', CAST(0x00009D8B00CBB786 AS DateTime), CAST(0x00009D8B00CBB786 AS DateTime))";
            B = ExecuteSqlNewConn(90245, S);
        }

        public void LoadFileTypeDictionary(ref Dictionary<string, int> DICT)
        {
            DICT.Clear();
            string S = "Select distinct SourceTypeCode from SourceType";
            string TgtVal;
            SqlDataReader RSData = null;
            int iKey = 0;
            // RSData = SqlQryNo'Session(S)
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    iKey += 1;
                    TgtVal = RSData.GetValue(0).ToString();
                    TgtVal = TgtVal.ToLower();
                    DICT.Add(TgtVal, iKey);
                }
            }

            RSData.Close();
            RSData = null;
            CONN.Dispose();
            GC.Collect();
        }

        public bool UpdateSourceImageCompressed(int ID, string UID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedImageBinary, string MachineID, string RetStr, ref int OriginalSize, ref int CompressedSize, ref bool RC, ref string rMsg, ref DateTime TransmissionStartTime, ref DateTime txEndTime)
        {
            var TxStartTime = DateAndTime.Now;
            bool B = false;

            // WDM CHECK THIS
            B = UpdateSourceImageCompressed(ID, UID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedImageBinary, MachineID, RetStr, ref OriginalSize, ref CompressedSize, ref RC, ref rMsg, ref TransmissionStartTime, ref txEndTime);
            // ProxyArchive = Nothing
            GC.Collect();
            GC.WaitForPendingFinalizers();
            Console.WriteLine("TX Time: " + TC.ElapsedTimeInMS(TxStartTime, txEndTime));
            return B;
        }

        public string getZipPassword()
        {
            string S = "";
            S += "X";
            S += "@";
            S += "v";
            S += "1";
            S += "3";
            S += "r";
            return S;
        }

        public void InsertSourceImage(string UserID, string MachineID, string OriginalFileName, string FileGuid, string FQN, string RepositoryTable, string RetentionCode, string isPublic, string SourceHash, string DirName, bool bUseZipFles)
        {
            bool bApplied = Exec_spUpdateLongNameHash(FileGuid, FQN);
            if (!bApplied)
            {
                LOG.WriteToArchiveLog("ERROR HA12X: (Exec_spUpdateLongNameHash) : Failed to update the long file names cross references: ");
                LOG.WriteToArchiveLog("HOW TO TEST in Sql Server: " + Constants.vbCrLf + "    exec spUpdateLongNameHash '" + FQN + "', '" + FileGuid + "' ");
            }

            bool BX = InsertBinaryData(RepositoryTable, FQN, SourceHash, FileGuid);
            if (BX)
            {
                LOG.WriteToArchiveLog(">> ADDED to Repo: " + FQN);
            }
            else
            {
                LOG.WriteToArchiveLog(">> ERROR failed ADD to Repo: " + FQN);
                return;
            }

            if (!bUseZipFles)
            {
                return;
            }

            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            // ** Check for a SingleSource upload here. If there exists a file with the same name and the same CRC, then just add it to the ContentUser table.
            int LL = 0;
            if (Conversions.ToBoolean(modGlobals.TrackUploads))
            {
                LL = 1;
                LOG.WriteToUploadLog("InsertSourceImage: File - start " + DateAndTime.Now.ToString() + FQN);
            }

            LL = 2;
            long OriginalSize = 0L;
            long CompressedSize = 0L;
            var StartTime = DateAndTime.Now;
            var CompressStartTime = DateAndTime.Now;
            var CompressEndTime = DateAndTime.Now;
            string TransmissionType = "";
            LL = 3;
            long totalCompressSecs = 0L;
            long totalTransmitSecs = 0L;
            TimeSpan ElapsedTime;
            TimeSpan ElapsedZipTime;
            bool RC = true;
            if (!File.Exists(FQN))
            {
                return;
            }

            var FIOriginal = new FileInfo(FQN);
            OriginalSize = FIOriginal.Length;
            string oFileName = FIOriginal.Name;
            FIOriginal = null;
            string tPath = LOG.getTempEnvironDir();
            string TransferFileName = FileGuid + ".NotReady";
            LL = 4;
            TransferFileName = tPath + @"\" + TransferFileName;

            // ******************************************
            CompressStartTime = DateAndTime.Now;
            LL = 5;
            using (var myZip = new ZipFile())
            {
                myZip.AddFile(FQN);
                myZip.Save(TransferFileName);
            }

            LL = 6;
            long ZipFileLength = 0L;
            var FITemp = new FileInfo(TransferFileName);
            ZipFileLength = FITemp.Length;
            FITemp = null;
            GC.Collect();
            GC.WaitForPendingFinalizers();
            CompressEndTime = DateAndTime.Now;
            // ******************************************
            try
            {
                byte[] FileBuffer = null;
                FileInfo oFile;
                oFile = new FileInfo(TransferFileName);
                var oFileStream = oFile.OpenRead();
                long lBytes = oFileStream.Length;
                LL = 10;
                if (lBytes > 0L)
                {
                    FileBuffer = new byte[(int)(lBytes - 1L) + 1];
                    oFileStream.Read(FileBuffer, 0, (int)lBytes);
                    oFileStream.Close();
                }

                var FI = new FileInfo(TransferFileName);
                long FLength = FI.Length;
                CompressedSize = FLength;
                FI = null;
                LL = 20;
                GC.Collect();
                GC.WaitForPendingFinalizers();
                long MaxMeg = 25000000L;
                long MaxGig = 2000000000L;
                FI = null;
                LL = 30;
                try
                {
                    // WDMXX This Is where the File Buffer Is uploaded to the repository
                    if (RepositoryTable.ToUpper().Equals("EMAILATTACHMENT"))
                    {
                        TransmissionType = "Buffered";
                        LL = 31;
                        InsertBufferedSource(1, FileBuffer, OriginalFileName, FileGuid, TransferFileName, RepositoryTable, RetentionCode, isPublic, SourceHash, DirName);
                    }
                    else if (RepositoryTable.ToUpper().Equals("EMAIL"))
                    {
                        TransmissionType = "Buffered";
                        LL = 34;
                        InsertBufferedSource(2, FileBuffer, OriginalFileName, FileGuid, TransferFileName, RepositoryTable, RetentionCode, isPublic, SourceHash, DirName);
                    }
                    else if (FLength > 0L & FLength <= MaxMeg)
                    {
                        // ** This is a small file and can be loaded quite well with a BUFFERED load
                        TransmissionType = "Buffered";
                        LL = 36;
                        InsertBufferedSource(3, FileBuffer, OriginalFileName, FileGuid, TransferFileName, RepositoryTable, RetentionCode, isPublic, SourceHash, DirName);
                    }
                    else if (FLength > MaxMeg & FLength < MaxGig)
                    {
                        // ** This is a Large file and can be loaded much better with a Streamed load
                        TransmissionType = "File Stream";
                        LL = 38;
                        // WDMXX - UploadFileStream might be able to do this, but not presently
                        // UploadFileStream(OriginalFileName, FileGuid, TransferFileName, RepositoryTable, SourceHash) : LL = 39
                        InsertBufferedSource(4, FileBuffer, OriginalFileName, FileGuid, TransferFileName, RepositoryTable, RetentionCode, isPublic, SourceHash, DirName);
                    }
                    else
                    {
                        // ** This is a Stupidly largr file to upload - better with a chunk load.
                        TransmissionType = "Chunked";
                        LL = 40;
                        ChunkFileUpload(OriginalFileName, FileGuid, TransferFileName, RepositoryTable, SourceHash);
                        LL = 41;
                    }

                    LL = 42;
                }
                catch (Exception ex)
                {
                    // xTrace(772341, "00 - InsertSourceImage LL=" + LL.ToString, ex.Message.ToString)
                    LOG.WriteToArchiveLog("ERROR: UploadFileStrem - ", ex);
                    LOG.WriteToArchiveLog("ERROR: UploadFileStrem -LL = " + LL.ToString());
                    RC = false;
                }
                finally
                {
                    // ISO.saveIsoFile(" FilesToDelete.dat", TransferFileName + "|")
                    // File.Delete(TransferFileName)
                }

                LL = 43;
                ElapsedTime = DateAndTime.Now.Subtract(StartTime);
                totalTransmitSecs = (long)ElapsedTime.TotalMilliseconds;
                LL = 44;
                ElapsedZipTime = CompressEndTime.Subtract(CompressStartTime);
                totalCompressSecs = ElapsedZipTime.Milliseconds;
                LL = 45;
                string Msg = "";
                if (RC)
                {
                    LL = 46;
                    Msg = "Successful Upload: " + TransmissionType + Constants.vbCrLf;
                    Msg += "   Original Size: " + OriginalSize.ToString() + Constants.vbCrLf;
                    Msg += "   Compressed Size: " + CompressedSize.ToString() + Constants.vbCrLf;
                    Msg += "   Compress Time: " + (totalCompressSecs / 1000d).ToString() + " sec" + Constants.vbCrLf;
                    Msg += "   Transmit Time: " + (totalTransmitSecs / 1000d).ToString() + " sec" + Constants.vbCrLf;
                    Msg += "   BPS: " + (CompressedSize / (totalTransmitSecs / 100d)).ToString() + Constants.vbCrLf;
                    Msg += "   File: " + FQN + Constants.vbCrLf;
                    LOG.WriteToArchiveLog(Msg);
                    // xTrace(663341, "SUCCESS: SaveUploadStats", Msg)
                    LL = 47;
                }
                else
                {
                    LL = 48;
                    Msg = "Failed Upload: " + TransmissionType + Constants.vbCrLf;
                    Msg += "   Original Size: " + OriginalSize.ToString() + Constants.vbCrLf;
                    Msg += "   Compressed Size: " + CompressedSize.ToString() + Constants.vbCrLf;
                    Msg += "   Compress Time: " + (totalCompressSecs / 1000d).ToString() + " sec" + Constants.vbCrLf;
                    Msg += "   Transmit Time: " + (totalTransmitSecs / 1000d).ToString() + " sec" + Constants.vbCrLf;
                    Msg += "   BPS: " + (CompressedSize / (totalTransmitSecs / 1000d)).ToString() + Constants.vbCrLf;
                    Msg += "   File: " + FQN + Constants.vbCrLf;
                    LOG.WriteToArchiveLog(Msg);
                    // xTrace(663342, "FAILED: SaveUploadStats", Msg)
                    LL = 49;
                }

                LL = 50;
                decimal BPS = (decimal)(CompressedSize / (totalTransmitSecs / 1000d));
                LL = 51;
                decimal TxTotalTime = (decimal)(totalCompressSecs / 1000d + totalTransmitSecs / 1000d);
                LL = 52;

                // ** Mark the file as successfully uploaded here and capture the stats
                string AttachmentName = oFileName;
                LL = 53;

                // WDM CHECK THIS
                SaveUploadStats(modGlobals.gGateWayID, RepositoryTable, FileGuid, (int)OriginalSize, (int)CompressedSize, StartTime, DateAndTime.Now, TxTotalTime, BPS, AttachmentName);
                LL = 54;
                LL = 54;
                if (Conversions.ToBoolean(modGlobals.TrackUploads))
                {
                    LOG.WriteToUploadLog("InsertSourceImage: File - END " + DateAndTime.Now.ToString() + " : " + FQN + " : Size - " + CompressedSize.ToString());
                }

                string ThisFileExt = Path.GetExtension(FQN);
                bool bUploadedc = ApplySourceTypeCode(MachineID, UserID, FQN, ThisFileExt, FileGuid);
                if (!bUploadedc)
                {
                    LOG.WriteToArchiveLog("ERROR - InsertSourceImage: Failed to Apply Source attributes.");
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("ERROR - InsertSourceImage: LL = " + LL.ToString() + Constants.vbCrLf + ex.Message.ToString());
            }
        }

        public void InsertBufferedSource(int LocID, byte[] CompressedBuffer, string OriginalFileName, string FileGuid, string FQN, string RepositoryTable, string RetentionCode, string isPublic, string FileHash, string DirName)
        {
            if (Conversions.ToBoolean(modGlobals.TrackUploads))
            {
                LOG.WriteToUploadLog("InsertBufferedSource: File - start " + DateAndTime.Now.ToString() + FQN);
            }

            int LL = 0;
            var FI = new FileInfo(FQN);
            string SourceName = FI.Name;
            string SourceTypeCode = FI.Extension;
            string sLastAccessDate = FI.LastAccessTime.ToString();
            string sCreateDate = FI.CreationTime.ToString();
            string sLastWriteTime = FI.LastAccessTime.ToString();
            int OriginalSize = (int)FI.Length;
            int CompressedSize = (int)FI.Length;
            bool RC = true;
            string RMsg = "";
            var TxStartDate = DateAndTime.Now;
            var TxEndDate = DateAndTime.Now;
            int VersionNbr = 1;
            // Dim CompressedBuffer As Byte() = Nothing
            FI = null;

            // ** Used only in testing WDMXX
            bool bTesting = false;
            if (bTesting)
            {
                try
                {
                    AddSourceToRepo(modGlobals.gCurrUserGuidID, modGlobals.gMachineID, "LOCAL", FileGuid, FQN, SourceName, SourceTypeCode, sLastAccessDate, sCreateDate, sLastWriteTime, modGlobals.gCurrUserGuidID, VersionNbr, RetentionCode, isPublic, FileHash, DirName);
                }
                catch (Exception ex)
                {
                    MessageBox.Show(ex.Message);
                    return;
                }
            }

            // Dim FileHash As String = ""
            long Ticks = 0L;
            long TotalTicks = 0L;
            var EndTime = DateAndTime.Now;
            if (!File.Exists(FQN))
            {
                return;
            }

            Ticks = DateAndTime.Now.Ticks;
            // FileHash = ENC.getCountDataSourceFiles(FQN)
            TotalTicks = DateAndTime.Now.Ticks - Ticks;
            long Filength = 0L;
            string FIName = "";
            var FI2 = new FileInfo(FQN);
            Filength = FI2.Length;
            FIName = FI2.Name;
            FI2 = null;

            // Open a file that is to be loaded into a byte array
            FileInfo oFile;
            LL = 1;
            oFile = new FileInfo(FQN);
            var oFileStream = oFile.OpenRead();
            long lBytes = oFileStream.Length;
            var SourceImage = new byte[(int)(lBytes - 1L) + 1];
            LL = 10;
            if (lBytes > 0L)
            {
                LL = 11;
                // Read the file into a byte array
                oFileStream.Read(SourceImage, 0, (int)lBytes);
                LL = 12;
                oFileStream.Close();
                LL = 13;
            }

            oFileStream.Close();
            LL = 14;
            oFileStream.Dispose();
            LL = 15;
            oFile = null;
            LL = 16;
            var StartTime = DateAndTime.Now;
            LL = 20;
            System.Net.ServicePointManager.DefaultConnectionLimit = 200;
            // Dim fStream As New System.IO.FileStream(FQN, FileMode.Open)

            try
            {
                LL = 30;
                int iFlen = SourceImage.Length;
                string sErrmsg = "";
                bool BB = true;
                LL = 38;
                sErrmsg = InsertImageToRepoTable(63221, modGlobals.gCurrUserGuidID, FileGuid, iFlen, FileHash, Filength, FIName, RepositoryTable, BB, OriginalFileName, SourceImage);
                LL = 40;
                LL = 39;
                if (sErrmsg.Length > 0)
                {
                    MessageBox.Show("ERROR: " + sErrmsg);
                }

                LL = 40;
                GC.Collect();
                GC.WaitForPendingFinalizers();
                LL = 41;
            }
            catch (Exception ex)
            {
                My.MyProject.Forms.frmNotifyMessage.Show();
                modGlobals.gNotifyMsg = "ERROR 167: - UploadBuffer: " + ex.ToString();
                LOG.WriteToArchiveLog("ERROR 167: - InsertBufferedSource: ", ex);
            }
            // xTrace(990134, "UploadBuffer LL:" + LL.ToString, ex.Message)
            // xTrace(990135, "UploadBuffer LL:" + LL.ToString, ex.InnerException.ToString)
            finally
            {
                // ProxyArchive.Close()
                // ProxyArchive = Nothing
                // oFileStream.Close()
                // oFileStream.Dispose()
                // oFile = Nothing
                GC.Collect();
                GC.WaitForPendingFinalizers();
                LL = 41;
            }

            int ElapsedSecs = modGlobals.ElapsedTimeSec(StartTime, DateAndTime.Now);
            double BytesPerSec = Filength / (double)ElapsedSecs;
            if (Conversions.ToBoolean(modGlobals.TrackUploads))
            {
                LOG.WriteToUploadLog("InsertBufferedSource: File - start " + DateAndTime.Now.ToString() + " + / " + FQN + " : " + Filength.ToString() + " / " + DateAndTime.Now.ToString());
            }
        }

        public void ChunkFileUpload(string OriginalFileName, string FileGuid, string FQN, string RepositoryTable, string CrcHASH)
        {
            long Ticks = 0L;
            long TotalTicks = 0L;
            var StartTime = DateAndTime.Now;
            var EndTime = DateAndTime.Now;
            long CurrByte = 0L;
            string RetMsg = "";
            bool LastSegment = false;

            // Dim ProxyFS As New SvcFS.Service1Client

            if (!File.Exists(FQN))
            {
                return;
            }

            Ticks = DateAndTime.Now.Ticks;
            TotalTicks = DateAndTime.Now.Ticks - Ticks;
            long Filength = 0L;
            string FIName = "";
            var FI = new FileInfo(FQN);
            Filength = FI.Length;
            FIName = FI.Name;
            FI = null;
            System.Net.ServicePointManager.DefaultConnectionLimit = 200;
            var fStream = new FileStream(FQN, FileMode.Open);
            string ErrMsg = "";
            StartTime = DateAndTime.Now;
            var Buffer = new byte[65537];
            int iBuffer = 65536;
            int I = 0;
            int P = 0;
            int iLoop = 0;
            try
            {
                I = fStream.Read(Buffer, 0, iBuffer);
                while (I > 0)
                {
                    if (iLoop == 0)
                    {
                        iLoop += 1;
                        if (I < Buffer.Length)
                        {
                            LastSegment = true;
                        }

                        ErrMsg = InsertImageToRepoTable(63222, modGlobals.gCurrUserGuidID, FileGuid, I, CrcHASH, Filength, FIName, RepositoryTable, LastSegment, OriginalFileName, Buffer);
                        if (ErrMsg.Length > 0)
                        {
                            MessageBox.Show("ERROR: " + ErrMsg);
                            LOG.WriteToArchiveLog("ERROR: " + ErrMsg);
                        }
                    }
                    else
                    {
                        iLoop += 1;
                        if (I < Buffer.Length)
                        {
                            LastSegment = true;
                        }

                        ErrMsg = UploadBufferedAppend(modGlobals.gCurrUserGuidID, FileGuid, I, CrcHASH, Filength, FIName, RepositoryTable, ref RetMsg, LastSegment, OriginalFileName, Buffer);
                        if (ErrMsg.Length > 0)
                        {
                            MessageBox.Show("ERROR: " + ErrMsg);
                            LOG.WriteToArchiveLog("ERROR: " + ErrMsg);
                        }
                    }

                    P += iBuffer - 1;
                    I = fStream.Read(Buffer, 0, iBuffer);
                    if (I == 0 & !LastSegment)
                    {
                        LastSegment = true;
                        ErrMsg = UploadBufferedAppend(modGlobals.gCurrUserGuidID, FileGuid, I, CrcHASH, Filength, FIName, RepositoryTable, ref RetMsg, LastSegment, OriginalFileName, Buffer);
                    }
                }

                Console.WriteLine("Loops to process = " + iLoop.ToString());
            }
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            EndTime = DateAndTime.Now;
            int ElapsedSecs = modGlobals.ElapsedTimeSec(StartTime, EndTime);
            double BytesPerSec = Filength / (double)ElapsedSecs;
            Console.WriteLine("Chunk Upload: Size= " + Filength.ToString() + " / Seconds: " + ElapsedSecs.ToString() + " / Bytes per sec: " + BytesPerSec.ToString());

            // ProxyFS.Close()
            Console.WriteLine("Loops to process = " + iLoop.ToString());
            fStream.Close();
            fStream.Dispose();
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void UploadFileStreamX(string OriginalFileName, string FileGuid, string FQN, string RepositoryTable, string Sha1HASH)
        {

            // WDMXX()

            bool isCompressed = true;
            // Dim Sha1HASH As String = ""
            long Ticks = 0L;
            long TotalTicks = 0L;
            var StartTime = DateAndTime.Now;
            var EndTime = DateAndTime.Now;
            if (!File.Exists(FQN))
            {
                LOG.WriteToArchiveLog("NOTICE: File not found - " + FQN);
                return;
            }

            if (Conversions.ToBoolean(modGlobals.TrackUploads))
            {
                LOG.WriteToUploadLog("FileStream: File - start " + DateAndTime.Now.ToString() + FQN);
            }

            Ticks = DateAndTime.Now.Ticks;
            // Sha1HASH = ENC.getCountDataSourceFiles(FQN)
            TotalTicks = DateAndTime.Now.Ticks - Ticks;
            long Filength = 0L;
            string FIName = "";
            var FI = new FileInfo(FQN);
            Filength = FI.Length;
            FIName = FI.Name;
            FI = null;
            System.Net.ServicePointManager.DefaultConnectionLimit = 200;
            var fStream = new FileStream(FQN, FileMode.Open);
            string ErrMsg = "";
            StartTime = DateAndTime.Now;
            try
            {
            }
            // WDMXX uncomment if needed
            // RemoteFileUpload(Sha1HASH, FileGuid, Filength, FIName, RepositoryTable, gCurrUserGuidID, isCompressed, fStream)
            catch (Exception ex)
            {
                MessageBox.Show(ex.Message);
                if (Conversions.ToBoolean(modGlobals.TrackUploads))
                {
                    LOG.WriteToArchiveLog("ERROR FileStream: File - start " + DateAndTime.Now.ToString() + FQN + " : ", ex);
                }
            }

            EndTime = DateAndTime.Now;
            int ElapsedSecs = modGlobals.ElapsedTimeSec(StartTime, EndTime);
            double BytesPerSec = Filength / (double)ElapsedSecs;
            if (Conversions.ToBoolean(modGlobals.TrackUploads))
            {
                LOG.WriteToArchiveLog("ERROR FileStream: File - END " + DateAndTime.Now.ToString() + FQN + " : Bytes = " + Filength.ToString());
            }

            fStream.Close();
            fStream.Dispose();
            GC.Collect();
            GC.WaitForPendingFinalizers();
        }

        public void VerifyRetentionDates()
        {
            string MySql = "";
            bool B = false;
            MySql = "";
            MySql += " update DataSource set RetentionCode = 'Retain 50',";
            MySql += " RetentionExpirationDate = getdate() + (select RetentionUnits from Retention where RetentionCode = DataSource.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSqlNewConn(90246, MySql);
            MySql = "";
            MySql += " update email set";
            MySql += " RetentionExpirationDate = getdate() + (select RetentionUnits from Retention where RetentionCode = email.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSqlNewConn(90247, MySql);
            MySql = "";
            MySql += " update EmailAttachment set ";
            MySql += " RetentionExpirationDate = getdate() + (select RetentionUnits from Retention where RetentionCode = EmailAttachment.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSqlNewConn(90248, MySql);
        }

        public bool XXsaveContentUserRecord(string MachineName, string NetworkName, string ContentTypeCode, string ContentGuid, string UserID)
        {
            int iCnt = ckContentUserRecordExists(ContentTypeCode, ContentGuid, UserID);
            if (iCnt == 0)
            {
                int I = 1;
                string MachineGuid = MachineRegister(MachineName, NetworkName);
                InsertContentUserRecord(ContentTypeCode, ContentGuid, UserID, I);
                string MySql = "";
                MySql += " if NOT exists (Select userID from Machine " + Constants.vbCrLf;
                MySql += " where MachineGuid = '" + MachineGuid + "' " + Constants.vbCrLf;
                MySql += " and ContentGuid = '" + ContentGuid + "')" + Constants.vbCrLf;
                MySql += " Begin " + Constants.vbCrLf;
                MySql += " INSERT INTO [Machine] ([UserID],[ContentGuid],[ContentTypeCode],[MachineGuid]) VALUES ('" + UserID + "','" + ContentGuid + "','" + ContentTypeCode + "','" + MachineGuid + "')" + Constants.vbCrLf;
                MySql += " End" + Constants.vbCrLf;
                bool BB = ExecuteSqlNewConn(90249, MySql);
            }

            return default;
        }

        public int ckContentUserRecordExists(string ContentTypeCode, string ContentGuid, string UserID)
        {
            string s = "";
            s = s + " Select count(*) from [ContentUser]" + Constants.vbCrLf;
            s = s + " where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "' ";
            int i = iCount(s);
            return i;
        }

        /// <summary>
    /// Inserts the content user record.
    /// </summary>
    /// <param name="ContentTypeCode">The content type code.</param>
    /// <param name="ContentGuid">    The content GUID.</param>
    /// <param name="UserID">         The user ID.</param>
    /// <param name="NbrOccurances">  The NBR occurances.</param>
    /// <returns></returns>
        public bool InsertContentUserRecord(string ContentTypeCode, string ContentGuid, string UserID, int NbrOccurances)
        {
            bool b = false;
            string NewID = Guid.NewGuid().ToString();
            string s = "";
            s = s + " INSERT INTO [ContentUser]" + Constants.vbCrLf;
            s = s + " ([ContentTypeCode]" + Constants.vbCrLf;
            s = s + " ,[ContentGuid]" + Constants.vbCrLf;
            s = s + " ,[UserID]" + Constants.vbCrLf;
            s = s + " ,[NbrOccurances])" + Constants.vbCrLf;
            s = s + " VALUES " + Constants.vbCrLf;
            s = s + " ('" + ContentTypeCode + "'" + Constants.vbCrLf;
            s = s + " ,'" + ContentGuid + "'" + Constants.vbCrLf;
            s = s + " ,'" + UserID + "'" + Constants.vbCrLf;
            s = s + " ," + NbrOccurances.ToString() + " )";
            bool BB = ExecuteSqlNewConn(90250, s);
            return BB;
        }

        // **************************************************************
        public bool Save_RssPull(int SecureID, string RssName, string RssUrl, string UserID, string RetentionCode, ref bool RC)
        {
            RC = true;
            string sRssName = RssName.Replace("'", "''");
            string sUserID = UserID.Replace("'", "''");
            string sRssUrl = RssUrl.Replace("'", "''");
            string WhereClause = " where RssUrl  = '" + sRssUrl + "' and UserID = '" + sUserID + "' ";
            string S = "Select count(*) from RssPull" + WhereClause;
            bool B = false;
            int iCnt = iCount(S);
            string MySql = "";
            string NewCS = getRepoConnStr();
            var connection = new SqlConnection(NewCS);
            if (connection.State == ConnectionState.Closed)
            {
                connection.Open();
            }

            if (iCnt == 0)
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@RssName", RssName));
                    command.Parameters.Add(new SqlParameter("@RssUrl", RssUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = MySql + "INSERT INTO [dbo].[RssPull]";
                    MySql = MySql + "(";
                    MySql = MySql + "           [RssName]";
                    MySql = MySql + "           ,[RssUrl]";
                    MySql = MySql + "           ,[UserID]";
                    MySql = MySql + "           ,[RetentionCode]";
                    MySql = MySql + ")";
                    MySql = MySql + "VALUES";
                    MySql = MySql + "(";
                    MySql = MySql + "@RssName";
                    MySql = MySql + ",@RssUrl";
                    MySql = MySql + ",@UserID";
                    MySql = MySql + ",@RetentionCode";
                    MySql = MySql + ")";
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: ", ex);
                    B = false;
                }
            }
            else
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@RssName", RssName));
                    command.Parameters.Add(new SqlParameter("@RssUrl", RssUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = MySql + "UPDATE [dbo].[RssPull]";
                    MySql = MySql + " SET [RssName] = @RssName ";
                    MySql = MySql + " ,[RssUrl] = @RssUrl ";
                    MySql = MySql + " ,[UserID] = @UserID ";
                    MySql = MySql + " ,[RetentionCode] = @RetentionCode ";
                    MySql = MySql + WhereClause;

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: 157848 " + ex.Message + Environment.NewLine + MySql);
                    B = false;
                }
            }

            return B;
        }

        public BindingSource GET_RssPull(int SecureID, string WhereClause, bool RC)
        {
            string MySql = null;
            MySql += "Select ";
            MySql += "[RssName], ";
            MySql += "[RssUrl], ";
            MySql += "[UserID], ";
            MySql += "[RetentionCode] ";
            MySql += " From [RssPull] ";
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            MySql += " Order by RssName ";
            string CSstr = getRepoConnStr();
            string ConnStr = CSstr;
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            var BSource = new BindingSource();
            var command = new SqlCommand(MySql, CONN);
            SqlDataReader rsDataQry = null;
            try
            {
                var dataAdapter = new SqlDataAdapter(MySql, ConnStr);
                var commandBuilder = new SqlCommandBuilder(dataAdapter);
                var table = new DataTable();
                table.Locale = CultureInfo.InvariantCulture;
                dataAdapter.Fill(table);
                BSource.DataSource = table;
            }
            catch (Exception e)
            {
            }
            // xTrace(13321, "clsDataBase:getRssPull", e.Message.ToString())
            finally
            {
                if (rsDataQry is object)
                {
                    if (!rsDataQry.IsClosed)
                    {
                        rsDataQry.Close();
                    }

                    rsDataQry = null;
                }

                command.Dispose();
                command = null;
            }

            return BSource;
        }

        public List<string> GET_RssPullData(int SecureID, string WhereClause, bool RC)
        {
            var ListOfUrls = new List<string>();
            string RssName = "";
            string RssUrl = "";
            string UserID = "";
            string RetentionCode = "";
            string RowGuid = "";
            string MySql = null;
            MySql += "Select ";
            MySql += "[RssName], ";
            MySql += "[RssUrl], ";
            MySql += "[UserID], RetentionCode, RowGuid ";
            MySql += " From [RssPull] ";
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            string CSstr = getRepoConnStr();
            string ConnStr = CSstr;
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            SqlDataReader RSData = null;
            var command = new SqlCommand(MySql, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    RssName = RSData.GetValue(0).ToString();
                    RssUrl = RSData.GetValue(1).ToString();
                    UserID = RSData.GetValue(2).ToString();
                    RetentionCode = RSData.GetValue(3).ToString();
                    RowGuid = RSData.GetValue(4).ToString();
                    string strItems = RssName + "|" + RssUrl + "|" + UserID + "|" + RetentionCode + "|" + RowGuid;
                    ListOfUrls.Add(strItems);
                }
            }

            RSData.Close();
            RSData = null;
            return ListOfUrls;
        }

        public List<string> GET_WebSiteData(int SecureID, string WhereClause, bool RC)
        {
            var ListOfUrls = new List<string>();
            string WebSite = "";
            string WebUrl = "";
            string UserID = "";
            string Depth = "";
            string Width = "";
            string RetentionCode = "";
            string RowGuid = "";
            string MySql = null;
            MySql += "Select ";
            MySql += "[WebSite], ";
            MySql += "[WebUrl], ";
            MySql += "Depth, ";
            MySql += "Width, ";
            MySql += "[UserID], ";
            MySql += "RetentionCode, ";
            MySql += "RowGuid ";
            MySql += " From [WebSite] ";
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            string CSstr = getRepoConnStr();
            string ConnStr = CSstr;
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            SqlDataReader RSData = null;
            var command = new SqlCommand(MySql, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    WebSite = RSData.GetValue(0).ToString();
                    WebUrl = RSData.GetValue(1).ToString();
                    Depth = RSData.GetValue(2).ToString();
                    Width = RSData.GetValue(3).ToString();
                    UserID = RSData.GetValue(4).ToString();
                    RetentionCode = RSData.GetValue(5).ToString();
                    RowGuid = RSData.GetValue(6).ToString();
                    string strItems = WebSite + "|" + WebUrl + "|" + UserID + "|" + Depth + "|" + Width + "|" + RetentionCode + "|" + RowGuid;
                    ListOfUrls.Add(strItems);
                }
            }

            RSData.Close();
            RSData = null;
            return ListOfUrls;
        }

        public List<string> GET_WebPageData(int SecureID, string WhereClause, bool RC)
        {
            var ListOfUrls = new List<string>();
            string WebSite = "";
            string WebUrl = "";
            string UserID = "";
            string Depth = "1";
            string Width = "0";
            string RetentionCode = "";
            string RowGuid = "";
            string MySql = null;
            MySql += "Select ";
            MySql += "[WebScreen], ";
            MySql += "[WebUrl], ";
            MySql += "'1' as Depth, ";
            MySql += "'0' as Width, ";
            MySql += "[UserID], ";
            MySql += "RetentionCode, ";
            MySql += "RowGuid ";
            MySql += " From [WebScreen] ";
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            string CSstr = getRepoConnStr();
            string ConnStr = CSstr;
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            SqlDataReader RSData = null;
            var command = new SqlCommand(MySql, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                {
                    WebSite = RSData.GetValue(0).ToString();
                    WebUrl = RSData.GetValue(1).ToString();
                    Depth = RSData.GetValue(2).ToString();
                    Width = RSData.GetValue(3).ToString();
                    UserID = RSData.GetValue(4).ToString();
                    RetentionCode = RSData.GetValue(5).ToString();
                    RowGuid = RSData.GetValue(6).ToString();
                    string strItems = WebSite + "|" + WebUrl + "|" + UserID + "|" + Depth + "|" + Width + "|" + RetentionCode + "|" + RowGuid;
                    ListOfUrls.Add(strItems);
                }
            }

            RSData.Close();
            RSData = null;
            return ListOfUrls;
        }

        public BindingSource GET_WebScreenForGRID(int SecureID, string WhereClause, bool RC)
        {
            string MySql = null;
            MySql += "Select ";
            MySql += "[WebScreen], ";
            MySql += "[WebUrl], ";
            MySql += "[UserID], ";
            MySql += "[RetentionCode] ";
            MySql += " From [WebScreen]" + Constants.vbCrLf;
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            MySql += " order by [WebScreen]" + Constants.vbCrLf;
            string ConnStr = getRepoConnStr();
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            var BSource = new BindingSource();
            var command = new SqlCommand(MySql, CONN);
            SqlDataReader rsDataQry = null;
            try
            {
                var dataAdapter = new SqlDataAdapter(MySql, ConnStr);
                var commandBuilder = new SqlCommandBuilder(dataAdapter);
                var table = new DataTable();
                table.Locale = CultureInfo.InvariantCulture;
                dataAdapter.Fill(table);
                BSource.DataSource = table;
            }
            catch (Exception e)
            {
            }
            // xTrace(13322, "clsDataBase:GET_WebScreen", e.Message.ToString())
            finally
            {
                if (rsDataQry is object)
                {
                    if (!rsDataQry.IsClosed)
                    {
                        rsDataQry.Close();
                    }

                    rsDataQry = null;
                }

                command.Dispose();
                command = null;
            }

            return BSource;
        }

        public bool Save_WebScreenURL(int SecureID, string WebScreen, string WebUrl, string RetentionCode, string UserID, ref bool RC)
        {
            string sWebScreen = WebScreen.Replace("'", "''");
            string sWebUrl = WebUrl.Replace("'", "''");
            string sUserID = UserID.Replace("'", "''");
            RC = true;
            string WhereClause = " where WebUrl  = '" + sWebUrl + "' and UserID = '" + UserID + "' ";
            string S = "Select count(*) from WebScreen" + WhereClause;
            bool B = false;
            int iCnt = iCount(S);
            string MySql = "";
            var connection = new SqlConnection(getRepoConnStr());
            if (connection.State == ConnectionState.Closed)
            {
                connection.Open();
            }

            if (iCnt == 0)
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@WebScreen", WebScreen));
                    command.Parameters.Add(new SqlParameter("@WebUrl", WebUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = MySql + "INSERT INTO [dbo].[WebScreen]";
                    MySql = MySql + "(";
                    MySql = MySql + "           [WebScreen]";
                    MySql = MySql + "           ,[WebUrl]";
                    MySql = MySql + "           ,[UserID]";
                    MySql = MySql + "           ,[RetentionCode]";
                    MySql = MySql + ")";
                    MySql = MySql + "VALUES";
                    MySql = MySql + "(";
                    MySql = MySql + "@WebScreen";
                    MySql = MySql + ",@WebUrl";
                    MySql = MySql + ",@UserID";
                    MySql = MySql + ",@RetentionCode";
                    MySql = MySql + ")";

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: ", ex);
                    B = false;
                }
            }
            else
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@WebScreen", WebScreen));
                    command.Parameters.Add(new SqlParameter("@WebUrl", WebUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = MySql + "UPDATE [dbo].[WebScreen] ";
                    MySql = MySql + " SET [WebScreen] = @WebScreen ";
                    MySql = MySql + " ,[WebUrl] = @WebUrl ";
                    MySql = MySql + " ,[UserID] = @UserID ";
                    MySql = MySql + " ,[RetentionCode] = @RetentionCode ";
                    MySql = MySql + WhereClause;

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: 157848 " + ex.Message + Environment.NewLine + MySql);
                    B = false;
                }
            }

            return B;
        }

        public BindingSource GET_WebSite(int SecureID, string WhereClause, bool RC)
        {
            string MySql = null;
            MySql += "Select ";
            MySql += "[WebSite], ";
            MySql += "[WebUrl], ";
            MySql += "[UserID], ";
            MySql += "[Depth], ";
            MySql += "[Width], ";
            MySql += "[RetentionCode] ";
            MySql += " From [WebSite]" + Constants.vbCrLf;
            if (WhereClause is object)
            {
                MySql += WhereClause;
            }

            MySql += "Order by WebSite";
            var ListOfRows = new List<DS_WebSite>();
            string ConnStr = getRepoConnStr();
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            var BSource = new BindingSource();
            var command = new SqlCommand(MySql, CONN);
            SqlDataReader rsDataQry = null;
            try
            {
                var dataAdapter = new SqlDataAdapter(MySql, ConnStr);
                var commandBuilder = new SqlCommandBuilder(dataAdapter);
                var table = new DataTable();
                table.Locale = CultureInfo.InvariantCulture;
                dataAdapter.Fill(table);
                BSource.DataSource = table;
            }
            catch (Exception e)
            {
            }
            // xTrace(13322, "clsDataBase:GET_WebSite", e.Message.ToString())
            finally
            {
                if (rsDataQry is object)
                {
                    if (!rsDataQry.IsClosed)
                    {
                        rsDataQry.Close();
                    }

                    rsDataQry = null;
                }

                command.Dispose();
                command = null;
            }

            return BSource;
        }

        public bool Save_WebSiteURL(int SecureID, string WebSite, string WebUrl, int depth, int width, string RetentionCode, string UserID, ref bool RC)
        {
            string sWebSite = WebSite.Replace("'", "''");
            string sUserID = UserID.Replace("'", "''");
            RC = true;
            string WhereClause = " where WebSite  = '" + sWebSite + "' and UserID = '" + sUserID + "' ";
            string S = "Select count(*) from WebSite" + WhereClause;
            bool B = false;
            int iCnt = iCount(S);
            string MySql = "";
            var connection = new SqlConnection(getRepoConnStr());
            if (connection.State == ConnectionState.Closed)
            {
                connection.Open();
            }

            if (iCnt == 0)
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@WebSite", WebSite));
                    command.Parameters.Add(new SqlParameter("@WebUrl", WebUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@depth", depth));
                    command.Parameters.Add(new SqlParameter("@width", width));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = "";
                    MySql = MySql + "INSERT INTO [dbo].[WebSite]";
                    MySql = MySql + "(";
                    MySql = MySql + "           [WebSite]";
                    MySql = MySql + "           ,[WebUrl]";
                    MySql = MySql + "           ,[UserID]";
                    MySql = MySql + "           ,[depth]";
                    MySql = MySql + "           ,[Width]";
                    MySql = MySql + "           ,[RetentionCode]";
                    MySql = MySql + ")";
                    MySql = MySql + "VALUES";
                    MySql = MySql + "(";
                    MySql = MySql + "@WebSite";
                    MySql = MySql + ",@WebUrl";
                    MySql = MySql + ",@UserID";
                    MySql = MySql + ",@depth";
                    MySql = MySql + ",@width";
                    MySql = MySql + ",@RetentionCode";
                    MySql = MySql + ")";

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: ", ex);
                    B = false;
                }
            }
            else
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@WebSite", WebSite));
                    command.Parameters.Add(new SqlParameter("@WebUrl", WebUrl));
                    command.Parameters.Add(new SqlParameter("@UserID", UserID));
                    command.Parameters.Add(new SqlParameter("@depth", depth));
                    command.Parameters.Add(new SqlParameter("@width", width));
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    MySql = MySql + "UPDATE [dbo].[WebSite]";
                    MySql = MySql + " SET [WebSite] = @WebSite ";
                    MySql = MySql + " ,[WebUrl] = @WebUrl ";
                    MySql = MySql + " ,[UserID] = @UserID ";
                    MySql = MySql + " ,[depth] = @depth ";
                    MySql = MySql + " ,[width] = @width ";
                    MySql = MySql + " ,[RetentionCode] = @RetentionCode ";
                    MySql = MySql + WhereClause;

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: 157848 " + ex.Message + Environment.NewLine + MySql);
                    B = false;
                }
            }

            return B;
        }

        public bool Save_RetentionCode(int SecureID, string RetentionCode, string RetentionDesc, int RetentionUnits, string RetentionAction, string ManagerID, int DaysWarning, string ResponseRequired, string RetentionPeriod, ref bool RC)
        {
            string sRetentionCode = RetentionCode.Replace("'", "''");
            RC = true;
            string WhereClause = " where RetentionCode  = '" + sRetentionCode + "' ";
            string S = "Select count(*) from Retention" + WhereClause;
            bool B = false;
            int iCnt = iCount(S);
            string MySql = "";
            var connection = new SqlConnection(getRepoConnStr());
            if (connection.State == ConnectionState.Closed)
            {
                connection.Open();
            }

            if (iCnt == 0)
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    command.Parameters.Add(new SqlParameter("@RetentionDesc", RetentionDesc));
                    command.Parameters.Add(new SqlParameter("@RetentionUnits", RetentionUnits));
                    command.Parameters.Add(new SqlParameter("@RetentionAction", RetentionAction.ToUpper()));
                    command.Parameters.Add(new SqlParameter("@ManagerID", ManagerID));
                    command.Parameters.Add(new SqlParameter("@DaysWarning", DaysWarning));
                    command.Parameters.Add(new SqlParameter("@ResponseRequired", ResponseRequired));
                    command.Parameters.Add(new SqlParameter("@RetentionPeriod", RetentionPeriod));
                    MySql = "INSERT INTO [dbo].[Retention]";
                    MySql = MySql + "(";
                    MySql = MySql + "           [RetentionCode]";
                    MySql = MySql + "           ,[RetentionDesc]";
                    MySql = MySql + "           ,[RetentionUnits]";
                    MySql = MySql + "           ,[RetentionAction]";
                    MySql = MySql + "           ,[ManagerID]";
                    MySql = MySql + "           ,[DaysWarning]";
                    MySql = MySql + "           ,[ResponseRequired]";
                    MySql = MySql + "           ,[RetentionPeriod]";
                    MySql = MySql + ")";
                    MySql = MySql + "VALUES";
                    MySql = MySql + "(";
                    MySql = MySql + "@RetentionCode";
                    MySql = MySql + ",@RetentionDesc";
                    MySql = MySql + ",@RetentionUnits";
                    MySql = MySql + ",@RetentionAction";
                    MySql = MySql + ",@ManagerID";
                    MySql = MySql + ",@DaysWarning";
                    MySql = MySql + ",@ResponseRequired";
                    MySql = MySql + ",@RetentionPeriod";
                    MySql = MySql + ")";

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: ", ex);
                    B = false;
                }
            }
            else
            {
                try
                {
                    var command = new SqlCommand(MySql, connection);
                    command.CommandType = CommandType.Text;
                    command.Parameters.Add(new SqlParameter("@RetentionCode", RetentionCode));
                    command.Parameters.Add(new SqlParameter("@RetentionDesc", RetentionDesc));
                    command.Parameters.Add(new SqlParameter("@RetentionUnits", RetentionUnits));
                    command.Parameters.Add(new SqlParameter("@RetentionAction", RetentionAction.ToUpper()));
                    command.Parameters.Add(new SqlParameter("@ManagerID", ManagerID));
                    command.Parameters.Add(new SqlParameter("@DaysWarning", DaysWarning));
                    command.Parameters.Add(new SqlParameter("@ResponseRequired", ResponseRequired));
                    command.Parameters.Add(new SqlParameter("@RetentionPeriod", RetentionPeriod));
                    MySql = MySql + "UPDATE [dbo].[Retention] ";
                    MySql = MySql + " SET [RetentionCode] = @RetentionCode ";
                    MySql = MySql + " ,[RetentionDesc] = @RetentionDesc ";
                    MySql = MySql + " ,[RetentionUnits] = @RetentionUnits ";
                    MySql = MySql + " ,[RetentionAction] = @RetentionAction ";
                    MySql = MySql + " ,[ManagerID] = @ManagerID ";
                    MySql = MySql + " ,[DaysWarning] = @DaysWarning ";
                    MySql = MySql + " ,[ResponseRequired] = @ResponseRequired ";
                    MySql = MySql + " ,[RetentionPeriod] = @RetentionPeriod ";
                    MySql = MySql + WhereClause;

                    // connection.Open()
                    command.CommandText = MySql;
                    command.ExecuteNonQuery();
                    connection.Close();
                    command.Dispose();
                    B = true;
                }
                catch (Exception ex)
                {
                    Console.WriteLine("ERROR: 157848 " + ex.Message + Environment.NewLine + MySql);
                    B = false;
                }
            }

            return B;
        }

        public BindingSource GET_RetentionCodes(int SecureID, bool RC)
        {
            string MySql = null;
            MySql += "Select ";
            MySql += "[RetentionCode], ";
            MySql += "[RetentionDesc], ";
            MySql += "[RetentionUnits], ";
            MySql += "[RetentionAction], ";
            MySql += "[ManagerID], ";
            MySql += "[DaysWarning], ";
            MySql += "[ResponseRequired], ";
            MySql += "[RetentionPeriod] ";
            MySql += " From [Retention] ";
            MySql += " Order by [RetentionCode] ";
            string CSstr = getRepoConnStr();
            string ConnStr = CSstr;
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            var BSource = new BindingSource();
            var command = new SqlCommand(MySql, CONN);
            SqlDataReader rsDataQry = null;
            try
            {
                var dataAdapter = new SqlDataAdapter(MySql, ConnStr);
                var commandBuilder = new SqlCommandBuilder(dataAdapter);
                var table = new DataTable();
                table.Locale = CultureInfo.InvariantCulture;
                dataAdapter.Fill(table);
                BSource.DataSource = table;
            }
            catch (Exception e)
            {
            }
            // xTrace(13321, "clsDataBase:getRssPull", e.Message.ToString())
            finally
            {
                if (rsDataQry is object)
                {
                    if (!rsDataQry.IsClosed)
                    {
                        rsDataQry.Close();
                    }

                    rsDataQry = null;
                }

                command.Dispose();
                command = null;
            }

            return BSource;
        }

        public void insertSourceChild(string ParentSourceGuid, string ChildSourceGuid)
        {
            // SELECT FQN, SourceGuid FROM DataSource
            string S = "Select count(*) from [DataSourceChildren] where ParentSourceGuid = '" + ParentSourceGuid + "' and ChildSourceGuid = '" + ChildSourceGuid + "' ";
            int iMax = iCount(S);
            if (iMax > 0)
            {
                return;
            }

            S = "INSERT INTO [dbo].[DataSourceChildren] ([ParentSourceGuid] ,[ChildSourceGuid]) VALUES ('" + ParentSourceGuid + "' ,'" + ChildSourceGuid + "')";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : insertSourceChild : 100 : Failed to add relationship.");
            }
        }

        public void insertrSSChild(string rssRowGuid, string SourceGuid)
        {
            string S = "Select count(*) from [RSSChildren] where RssRowGuid = '" + rssRowGuid + "' and SourceGuid = '" + SourceGuid + "' ";
            int iMax = iCount(S);
            if (iMax > 0)
            {
                return;
            }

            S = "INSERT INTO [dbo].[DataSourceChildren] ([ParentSourceGuid] ,[ChildSourceGuid]) VALUES ('" + rssRowGuid + "' ,'" + SourceGuid + "')";
            bool B = ExecuteSqlNewConn(S, false);
            if (!B)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : AttributeExists : 100 : Failed to add attribute.");
            }
        }

        public string InsertEmailAttachmentRecord(string EmailGuid, string AttachmentName, string AttachmentCode, string AttachmentType, string UserID, ref string RetMsg, string CRC)
        {
            string sGuid = "";
            AttachmentName = AttachmentName.Replace("'", "''");
            UserID = UserID.Replace("'", "''");
            string S = "";
            sGuid = Guid.NewGuid().ToString();
            S += " INSERT INTO [EmailAttachment]" + Constants.vbCrLf;
            S += " ( " + Constants.vbCrLf;
            S += "  [RowGuid]" + Constants.vbCrLf;
            S += " ,[AttachmentName]" + Constants.vbCrLf;
            S += " ,[EmailGuid]" + Constants.vbCrLf;
            S += " ,[AttachmentCode]" + Constants.vbCrLf;
            S += " ,[AttachmentType]" + Constants.vbCrLf;
            S += " ,[UserID]" + Constants.vbCrLf;
            S += " ,[CRC]" + Constants.vbCrLf;
            S += " )" + Constants.vbCrLf;
            S += " VALUES " + Constants.vbCrLf;
            S += " ('" + sGuid + "'" + Constants.vbCrLf;
            S += " ,'" + AttachmentName + "'" + Constants.vbCrLf;
            S += " ,'" + EmailGuid + "'" + Constants.vbCrLf;
            S += " ,'" + AttachmentCode + "'" + Constants.vbCrLf;
            S += " ,'" + AttachmentType + "'" + Constants.vbCrLf;
            S += " ,'" + UserID + "'" + Constants.vbCrLf;
            S += " , convert(nvarchar(100), " + CRC + ")" + Constants.vbCrLf;
            string cs = setConnStr();
            bool B = true;
            bool Validate = false;
            B = ExecuteSql(S, cs, false);
            if (B)
            {
                S = "Update EmailAttachment set isPublic = (Select ispublic from Email where EmailGuid = '" + EmailGuid + "') ";
                S += " where EmailGuid = '" + EmailGuid + "'";
                B = ExecuteSql(S, cs, false);
            }

            return sGuid;
        }

        public bool SaveUploadStats(int SecureID, string RepositoryTable, string SourceGuid, int OriginalSize, int CompressedSize, DateTime TxStartTime, DateTime TxEndTime, decimal TxTotalTime, decimal BPS, string AttachmentName)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            RepositoryTable = RepositoryTable.ToUpper();
            bool B = true;
            string ConnStr = setConnStr();
            var CONN = new SqlConnection(ConnStr);
            if (CONN.State == ConnectionState.Closed)
            {
                CONN.Open();
            }

            var CMD = new SqlCommand();
            CMD.CommandType = CommandType.Text;
            string S = "";
            try
            {
                if (RepositoryTable.Equals("DATASOURCE"))
                {
                    S = "Update DataSource set ";
                    S += "OriginalSize = @OriginalSize";
                    S += ", CompressedSize = @CompressedSize";
                    S += ", TxStartTime = @TxStartTime";
                    S += ", TxEndTime = @TxEndTime";
                    S += ", TxTotalTime = @TxTotalTime";
                    S += ", BPS = @BPS";
                    S += " Where SourceGuid = @SourceGuid";
                    CMD.Connection = CONN;
                    CMD.CommandText = S;
                    CMD.CommandType = CommandType.Text;
                    using (CONN)
                    using (CMD)
                    {
                        CMD.Parameters.AddWithValue("@SourceGuid", SourceGuid);
                        CMD.Parameters.AddWithValue("@OriginalSize", OriginalSize);
                        CMD.Parameters.AddWithValue("@CompressedSize", CompressedSize);
                        CMD.Parameters.AddWithValue("@TxStartTime", TxStartTime);
                        CMD.Parameters.AddWithValue("@TxEndTime", TxEndTime);
                        CMD.Parameters.AddWithValue("@TxTotalTime", TxTotalTime);
                        CMD.Parameters.AddWithValue("@BPS", BPS);
                        CMD.ExecuteNonQuery();
                    }
                }

                if (RepositoryTable.Equals("EMAIL"))
                {
                    S = "Update email set ";
                    S += "OriginalSize = @OriginalSize";
                    S += ", CompressedSize = @CompressedSize";
                    S += ", TxStartTime = @TxStartTime";
                    S += ", TxEndTime = @TxEndTime";
                    S += ", TxTotalTime = @TxTotalTime";
                    S += ", BPS = @BPS";
                    S += " Where EmailGuid = @EmailGuid";
                    CMD.Connection = CONN;
                    CMD.CommandText = S;
                    CMD.CommandType = CommandType.Text;
                    using (CONN)
                    using (CMD)
                    {
                        CMD.Parameters.AddWithValue("@EmailGuid", SourceGuid);
                        CMD.Parameters.AddWithValue("@OriginalSize", OriginalSize);
                        CMD.Parameters.AddWithValue("@CompressedSize", CompressedSize);
                        CMD.Parameters.AddWithValue("@TxStartTime", TxStartTime);
                        CMD.Parameters.AddWithValue("@TxEndTime", TxEndTime);
                        CMD.Parameters.AddWithValue("@TxTotalTime", TxTotalTime);
                        CMD.Parameters.AddWithValue("@BPS", BPS);
                        CMD.ExecuteNonQuery();
                    }
                }

                if (RepositoryTable.Equals("EMAILATTACHMENT"))
                {
                    S = "Update EmailAttachment set ";
                    S += "OriginalSize = @OriginalSize";
                    S += ", CompressedSize = @CompressedSize";
                    S += ", TxStartTime = @TxStartTime";
                    S += ", TxEndTime = @TxEndTime";
                    S += ", TxTotalTime = @TxTotalTime";
                    S += ", BPS = @BPS";
                    S += " Where EmailGuid = @EmailGuid";
                    S += " AND AttachmentName = @AttachmentName";
                    CMD.Connection = CONN;
                    CMD.CommandText = S;
                    CMD.CommandType = CommandType.Text;
                    using (CONN)
                    using (CMD)
                    {
                        CMD.Parameters.AddWithValue("@EmailGuid", SourceGuid);
                        CMD.Parameters.AddWithValue("@AttachmentName", AttachmentName);
                        CMD.Parameters.AddWithValue("@OriginalSize", OriginalSize);
                        CMD.Parameters.AddWithValue("@CompressedSize", CompressedSize);
                        CMD.Parameters.AddWithValue("@TxStartTime", TxStartTime);
                        CMD.Parameters.AddWithValue("@TxEndTime", TxEndTime);
                        CMD.Parameters.AddWithValue("@TxTotalTime", TxTotalTime);
                        CMD.Parameters.AddWithValue("@BPS", BPS);
                        CMD.ExecuteNonQuery();
                    }
                }
            }
            catch (Exception ex)
            {
            }
            // xTrace(66001, "SaveUploadStats" + ex.Message)
            finally
            {
                CMD.Dispose();
                CONN.Close();
                CONN.Dispose();
                GC.Collect();
            }

            return B;
        }

        public string InsertImageToRepoTable(int ID, string UID, string tgtGuid, int iRead, string FileHash, long FileLength, string FileName, string RepositoryTable, bool LastSegment, string OriginalFileName, byte[] Buffer)
        {
            double LL = 0d;
            bool B = true;
            string S = "";
            RepositoryTable = RepositoryTable.ToUpper();
            switch (RepositoryTable ?? "")
            {
                case "EMAIL":
                    {
                        S = "Update EMAIL set FileAttached = 0, CRC = '" + FileHash + "' where EmailGuid = '" + tgtGuid + "'";
                        break;
                    }

                case "EMAILATTACHMENT":
                    {
                        S = "Update EmailAttachment set FileAttached = 0, CRC = '" + FileHash + "'  where RowGuid = '" + tgtGuid + "'";
                        break;
                    }

                case "DATASOURCE":
                    {
                        S = "Update DataSource set FileAttached = 0, CRC = '" + FileHash + "' where SourceGuid = '" + tgtGuid + "'";
                        break;
                    }

                default:
                    {
                        S = "ERROR: 10029 - RepositoryTable not correctly set.";
                        break;
                    }
            }

            string RetMsg = "";
            FileStream oFileStream = null;
            long lByte = FileLength;
            LL = 2.2d;
            long lLoop = 0L;
            LL = 2.3d;
            bool bLoadFileToDB = false;
            bool bUploaded = false;
            LL = 5d;
            string ErrMsg = "";
            LL = 6d;

            // ' xTrace(8200, UID, "InsertImageToRepoTable", "LL = " + LL.ToString)

            string UploadPath = System.Configuration.ConfigurationManager.AppSettings["UploadPath"];
            LL = 7d;
            string EmailUploadPath = UploadPath + @"\Email";
            LL = 8d;
            EmailUploadPath = EmailUploadPath.Replace(@"\\", @"\");
            LL = 9d;
            string EmailAttachmentUploadPath = UploadPath + @"\OCR\Extract\StagedOcrFiles\";
            LL = 10d;
            EmailAttachmentUploadPath = EmailAttachmentUploadPath.Replace(@"\\", @"\");
            LL = 11d;
            string ContentUploadPath = UploadPath + @"\DataSource";
            LL = 12d;
            ContentUploadPath = ContentUploadPath.Replace(@"\\", @"\");
            LL = 13d;
            string FQN2Upload = UploadPath + @"\" + FileName;
            LL = 14d;
            FQN2Upload = FQN2Upload.Replace(@"\\", @"\");
            string FQN2Remove = UploadPath + @"\" + FileName;
            FQN2Remove = FQN2Remove.Replace(@"\\", @"\");
            LL = 15d;
            LL = 3d;
            try
            {
                string CS = setConnStr();
                B = ExecuteSql(S, CS, false);
                LL = 4d;
                // Create a file and write the byte data to a file.
                oFileStream = new FileStream(FQN2Upload, FileMode.Create);
                LL = 16d;
                oFileStream.Write(Buffer, 0, iRead);
                LL = 17d;
                if (iRead < Buffer.Length | iRead == FileLength | LastSegment)
                {
                    LL = 18d;
                    bLoadFileToDB = true;
                }

                LL = 19d;
            }
            catch (Exception ex)
            {
                bLoadFileToDB = false;
                ErrMsg = "ERROR - InsertImageToRepoTable: " + FileName + Constants.vbCrLf + ex.Message.ToString();
            }
            finally
            {
                oFileStream.Close();
                oFileStream.Dispose();
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }

            LL = 20d;
            // ' xTrace(8200, UID, "InsertImageToRepoTable", "LL = " + LL.ToString)

            if (bLoadFileToDB)
            {
                // ** Decompress
                // Dim A As System.Reflection.Assembly = Me.GetType.Assembly
                // Dim fStream As Stream = A.GetManifestResourceStream(FQN2Upload)
                var myZip = new C1.C1Zip.C1ZipFile();
                LL = 21d;
                try
                {
                    // *********************************************************
                    // ** Decompress Zip File
                    // ********************************************************
                    if (!Directory.Exists(EmailUploadPath))
                    {
                        Directory.CreateDirectory(EmailUploadPath);
                    }

                    LL = 23d;
                    if (!Directory.Exists(EmailAttachmentUploadPath))
                    {
                        Directory.CreateDirectory(EmailAttachmentUploadPath);
                    }

                    LL = 24d;
                    if (!Directory.Exists(ContentUploadPath))
                    {
                        Directory.CreateDirectory(ContentUploadPath);
                    }

                    LL = 25d;
                    myZip.Open(FQN2Upload);
                    LL = 26d;
                    foreach (C1.C1Zip.C1ZipEntry zipEntry in myZip.Entries)
                    {
                        LL = 27d;
                        bool bGoodCrc = zipEntry.CheckCRC32();
                        LL = 28d;
                        if (bGoodCrc)
                        {
                            string zFilename = zipEntry.FileName;
                            if (RepositoryTable.Equals("EMAIL"))
                            {
                                FQN2Upload = EmailUploadPath + @"\" + tgtGuid + ".RDY";
                                FQN2Upload = FQN2Upload.Replace(@"\\", @"\");
                                zipEntry.Extract(FQN2Upload);
                            }
                            else if (RepositoryTable.Equals("EMAILATTACHMENT"))
                            {
                                FQN2Upload = EmailAttachmentUploadPath + @"\" + tgtGuid + ".RDY";
                                FQN2Upload = FQN2Upload.Replace(@"\\", @"\");
                                zipEntry.Extract(FQN2Upload);
                            }
                            else if (RepositoryTable.Equals("DATASOURCE"))
                            {
                                FQN2Upload = ContentUploadPath + @"\" + tgtGuid + ".RDY";
                                FQN2Upload = FQN2Upload.Replace(@"\\", @"\");
                                zipEntry.Extract(FQN2Upload);
                            }
                        }

                        LL = 29d;
                    }

                    LL = 30d;
                }
                catch (Exception ex)
                {
                    Interaction.MsgBox(ex.Message);
                }
                // xTrace(82889, "InsertImageToRepoTable", "ERROR - InsertImageToRepoTable : LL = " + LL.ToString + ":" + FileName)
                finally
                {
                    LL = 31d;
                    // *********************************************************
                    // ** Delete zip file
                    // *********************************************************
                    myZip.Close();
                    LL = 32d;
                }

                LL = 33d;
                // ' xTrace(8200, UID, "InsertImageToRepoTable", "LL = " + LL.ToString)

                if (!File.Exists(FQN2Upload))
                {
                    // xTrace(82900, "ERROR - InsertImageToRepoTable", "LL = " + LL.ToString + ":" + FileName)

                }

                // **** Load a Byte Array with the just loaded file ************
                FileInfo oFile;
                oFile = new FileInfo(FQN2Upload);
                var xFileStream = oFile.OpenRead();
                long lBytes = xFileStream.Length;
                int iBytes = Convert.ToInt32(lBytes - 1L);
                var fileData = new byte[iBytes];
                LL = 34d;
                if (lBytes > 0L)
                {
                    // Read the file into a byte array
                    xFileStream.Read(fileData, 0, iBytes);
                    xFileStream.Close();
                    xFileStream.Dispose();
                }

                bool SuccessfulUpload = true;
                string ConnStr = setConnStr();
                var CONN = new SqlConnection(ConnStr);
                if (CONN.State == ConnectionState.Closed)
                {
                    CONN.Open();
                }

                LL = 35d;
                var CMD = new SqlCommand();
                CMD.CommandType = CommandType.StoredProcedure;
                try
                {
                    LL = 36d;
                    // ' xTrace(8200, UID, "InsertImageToRepoTable", "LL = " + LL.ToString)

                    string MySql = @"Update [DataSource] 
                                        set SourceImage = @SourceImage 
                                        Where SourceGuid = @SourceGuid";
                    if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        CMD.Connection = CONN;
                        // CMD.CommandText = "[UpdateDataSourceImage]"
                        // CMD.CommandType = CommandType.StoredProcedure
                        CMD.CommandText = MySql;
                        CMD.CommandType = CommandType.Text;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@SourceGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@SourceImage", fileData));
                            try
                            {
                                CMD.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                LOG.WriteToArchiveLog("FATAL ERROR InsertImageToRepoTable 01: " + ex.Message);
                            }
                        }
                    }

                    LL = 37d;
                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        LL = 38d;
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailFilestream";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@EmailGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@EmailImage", fileData));
                            try
                            {
                                CMD.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                LOG.WriteToArchiveLog("FATAL ERROR InsertImageToRepoTable 02: " + ex.Message);
                            }
                        }
                    }

                    LL = 39d;
                    if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        LL = 40d;
                        // Dim TSql As String = "Update [EmailAttachment] set Attachment = @Attachment Where RowGuid = @RowGuid"
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailAttachmentFilestreamV2";
                        // CMD.CommandText = TSql
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@RowGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@Attachment", fileData));
                            CMD.Parameters.Add(new SqlParameter("@LastAccessDate", DateAndTime.Now));
                            try
                            {
                                CMD.ExecuteNonQuery();
                            }
                            catch (Exception ex)
                            {
                                LOG.WriteToArchiveLog("FATAL ERROR InsertImageToRepoTable 03: " + ex.Message);
                            }
                        }
                    }

                    LL = 41d;
                }
                catch (Exception ex)
                {
                    SuccessfulUpload = false;
                }
                // xTrace(8285, "ERROR - InsertImageToRepoTable", "LL = " + LL.ToString + ":" + FileName + ":" + ex.ToString)
                finally
                {
                    LL = 42d;
                    oFile = null;
                    fileData = null;
                    CMD.Dispose();
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }

                    CONN.Dispose();
                    try
                    {
                        File.Delete(FQN2Upload);
                    }
                    catch (Exception ex)
                    {
                        // xTrace(82888, "InsertImageToRepoTable", "ERROR - InsertImageToRepoTable  @ LL = " + LL.ToString + ":" + FileName + ":" + ex.ToString)
                    }

                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        S = "Update EMAIL set FileAttached = 1 where EmailGuid = '" + tgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        S = "Update EmailAttachment set FileAttached = 1 where EmailGuid = '" + tgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        S = "Update DataSource set FileAttached = 1 where SourceGuid = '" + tgtGuid + "'";
                    }

                    LL = 43d;
                    string CS = setConnStr();
                    B = ExecuteSql(S, CS, false);
                    LL = 44d;
                }
            }

            GC.Collect();
            return ErrMsg;
        }

        public string UploadBufferedAppend(string UID, string tgtGuid, int iRead, string FileHash, long FileLength, string FileName, string RepositoryTable, ref string RetMsg, bool LastSegment, string OriginalFileName, byte[] Buffer)
        {

            // ** Check to see if this file requires OCR or PDF processing here
            // ** If so, copy it to the Processing directory and let the command line utiltiy process it

            RepositoryTable = RepositoryTable.ToUpper();
            bool bUploaded = false;
            string ErrMsg = "";
            string UploadPath = System.Configuration.ConfigurationManager.AppSettings["UploadPath"];
            string EmailUploadPath = UploadPath + @"\Email";
            string EmailAttachmentUploadPath = UploadPath + @"\OCR\Extract\StagedOcrFiles\";
            string ContentUploadPath = UploadPath + @"\DataSource";
            string FQN2Upload = UploadPath + @"\" + FileName;
            string FQN2Remove = UploadPath + @"\" + FileName;
            FileStream oFileStream = null;
            long lByte = FileLength;
            long lLoop = 0L;
            bool bLoadFileToDB = false;
            string FQN = UploadPath + @"\" + FileName;
            string S = "";
            if (RepositoryTable.Equals("EMAIL"))
            {
                S = "Update EMAIL set FileAttached = 0 where EmailGuid = '" + tgtGuid + "'";
            }
            else if (RepositoryTable.Equals("EMAILATTACHMENT"))
            {
                S = "Update EmailAttachment set FileAttached = 0 where EmailGuid = '" + tgtGuid + "'";
            }
            else if (RepositoryTable.Equals("DATASOURCE"))
            {
                S = "Update DataSource set FileAttached = 0 where SourceGuid = '" + tgtGuid + "'";
            }

            string CS = setConnStr();
            bool B = ExecuteSqlNewConn(S, CS, false);
            try
            {
                // Create a file and write the byte data to a file.
                oFileStream = new FileStream(FQN, FileMode.Append);
                oFileStream.Write(Buffer, 0, iRead - 1);
                if (iRead < Buffer.Length | LastSegment)
                {
                    // ** Add and EOF marker
                    var bufx = new byte[1];
                    bufx[0] = 0x0;
                    oFileStream.Write(bufx, 0, bufx.Length);
                    bLoadFileToDB = true;
                }
            }
            catch (Exception ex)
            {
                ErrMsg = "ERROR - UploadBufferedAppend: " + FileName + Constants.vbCrLf + ex.Message.ToString();
            }
            finally
            {
                oFileStream.Close();
                oFileStream.Dispose();
                GC.Collect();
                GC.WaitForPendingFinalizers();
            }

            if (bLoadFileToDB)
            {
                // ** Decompress
                // Dim A As System.Reflection.Assembly = Me.GetType.Assembly
                // Dim fStream As Stream = A.GetManifestResourceStream(FQN2Upload)
                var myZip = new C1.C1Zip.C1ZipFile();
                try
                {
                    // *********************************************************
                    // ** Decompress Zip File
                    // ********************************************************
                    if (!Directory.Exists(EmailUploadPath))
                    {
                        Directory.CreateDirectory(EmailUploadPath);
                    }

                    if (!Directory.Exists(EmailAttachmentUploadPath))
                    {
                        Directory.CreateDirectory(EmailAttachmentUploadPath);
                    }

                    if (!Directory.Exists(ContentUploadPath))
                    {
                        Directory.CreateDirectory(ContentUploadPath);
                    }

                    myZip.Open(FQN2Upload);
                    foreach (C1.C1Zip.C1ZipEntry zipEntry in myZip.Entries)
                    {
                        bool bGoodCrc = zipEntry.CheckCRC32();
                        if (bGoodCrc)
                        {
                            string zFilename = zipEntry.FileName;
                            if (RepositoryTable.Equals("EMAIL"))
                            {
                                FQN2Upload = EmailUploadPath + @"\" + tgtGuid + ".RDY";
                                zipEntry.Extract(FQN2Upload);
                            }
                            else if (RepositoryTable.Equals("EMAILATTACHMENT"))
                            {
                                FQN2Upload = EmailAttachmentUploadPath + @"\" + tgtGuid + ".RDY";
                                zipEntry.Extract(FQN2Upload);
                            }
                            else if (RepositoryTable.Equals("DATASOURCE"))
                            {
                                FQN2Upload = ContentUploadPath + @"\" + tgtGuid + ".RDY";
                                zipEntry.Extract(FQN2Upload);
                            }
                        }
                    }
                }
                catch (Exception ex)
                {
                    Interaction.MsgBox(ex.Message);
                    Console.Write(ex.Message);
                }
                finally
                {
                    // *********************************************************
                    // ** Delete zip file
                    // *********************************************************
                    myZip.Close();
                    File.Delete(FQN2Remove);
                }

                // **** Load a Byte Array with the just loaded file ************
                FileInfo oFile;
                oFile = new FileInfo(FQN2Upload);
                var xFileStream = oFile.OpenRead();
                long lBytes = xFileStream.Length;
                var fileData = new byte[Convert.ToInt32(lBytes - 1L) + 1];
                if (lBytes > 0L)
                {
                    // Read the file into a byte array
                    xFileStream.Read(fileData, 0, Convert.ToInt32(lBytes));
                    xFileStream.Close();
                    xFileStream.Dispose();
                }

                bool SuccessfulUpload = true;
                string ConnStr = setConnStr();
                var CONN = new SqlConnection(ConnStr);
                if (CONN.State == ConnectionState.Closed)
                {
                    CONN.Open();
                }

                var CMD = new SqlCommand();
                CMD.CommandType = CommandType.StoredProcedure;
                try
                {
                    if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateSourceFilestream";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@SourceGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@SourceImage", fileData));
                            CMD.ExecuteNonQuery();
                        }
                    }

                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailFilestream";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@EmailGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@EmailImage", fileData));
                            CMD.ExecuteNonQuery();
                        }
                    }

                    if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailAttachmentFilestream";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@EmailGuid", tgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@Attachment", fileData));
                            CMD.Parameters.Add(new SqlParameter("@AttachmentName", OriginalFileName));
                            CMD.ExecuteNonQuery();
                        }
                    }
                }
                catch (Exception ex)
                {
                    SuccessfulUpload = false;
                    Interaction.MsgBox("ERROR InsertImageToRepoTable 100: " + ex.Message);
                }
                finally
                {
                    oFile = null;
                    fileData = null;
                    CMD.Dispose();
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }

                    CONN.Dispose();
                    File.Delete(FQN2Upload);
                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        S = "Update EMAIL set FileAttached = 1 where EmailGuid = '" + tgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        S = "Update EmailAttachment set FileAttached = 1 where EmailGuid = '" + tgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        S = "Update DataSource set FileAttached = 1 where SourceGuid = '" + tgtGuid + "'";
                    }

                    CS = setConnStr();
                    B = ExecuteSqlNewConn(S, CS, false);
                }
            }

            GC.Collect();
            return ErrMsg;
        }

        public void VerifyRetentionDates(int SecureID)
        {
            string MySql = "";
            bool B = false;
            string RetMsg = " ";
            string CS = setConnStr();
            MySql = "";
            MySql += " update DataSource set ";
            MySql += " RetentionExpirationDate = getdate() + (select retentionYears from Retention where RetentionCode = DataSource.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSql(MySql, CS, false);
            if (RetMsg.Trim().Length > 0)
            {
                // xTrace(66110, "VerifyRetentionDates", MySql)
            }

            MySql = "";
            MySql += " update email set";
            MySql += " RetentionExpirationDate = getdate() + (select retentionYears from Retention where RetentionCode = email.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSql(MySql, CS, false);
            if (RetMsg.Trim().Length > 0)
            {
                // xTrace(66111, "VerifyRetentionDates", MySql)
            }

            MySql = "";
            MySql += " update EmailAttachment set ";
            MySql += " RetentionExpirationDate = getdate() + (select retentionYears from Retention where RetentionCode = EmailAttachment.RetentionCode) * 365.255";
            MySql += " where RetentionExpirationDate < GETDATE() - 25 * 365.55";
            B = ExecuteSql(MySql, CS, false);
            if (RetMsg.Trim().Length > 0)
            {
                // xTrace(66112, "VerifyRetentionDates", MySql)
            }
        }

        /// <summary>
    /// Cks the content exists.
    /// </summary>
    /// <param name="SourceName">Name of the source.</param>
    /// <param name="HexHash">The hexadecimal hash.</param>
    /// <returns>RID - the record rowid if exists, null if not</returns>
        public string ckContentExists(string SourceName, string HexHash)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string RID = "";
            if (!HexHash.Contains("0x"))
            {
                HexHash = "0x" + HexHash;
            }

            string S = @"Select RowID from datasource 
            where SourceName = '" + SourceName + @"'
            And ImageHash = " + HexHash + " ";
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            var command = new SqlCommand(S, CONN);
            RSData = command.ExecuteReader();
            if (RSData.HasRows)
            {
                while (RSData.Read())
                    RID = RSData.GetValue(0).ToString();
            }

            RSData.Close();
            RSData = null;
            CONN.Close();
            CONN.Dispose();
            return RID;
        }

        public bool ckContentOwnerExists(string ContentGuid, string UserID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int iCnt = 0;
            string S = "";
            string MachineGuid = "\"";
            S = "Select count(*) from ContentUser where ContentGuid = '" + ContentGuid + "' and UserID = '" + UserID + "'";
            iCnt = iCount(S);
            if (iCnt == 0)
            {
                return false;
            }

            return true;
        }

        public bool ckContentOwnerExists(string ContentGuid, int RID)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            int iCnt = 0;
            string S = "";
            string MachineGuid = "\"";
            S = "Select count(*) from ContentUser where ContentGuid = '" + ContentGuid + "' and RID = " + RID.ToString();
            iCnt = iCount(S);
            if (iCnt == 0)
            {
                return false;
            }

            return true;
        }

        public bool insertNewContent(Dictionary<string, string> tDict, byte[] SourceImage, string SourceImageOrigin)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string RowGuid = tDict["RowGuid"];
            string SourceGuid = tDict["SourceGuid"];
            string CreateDate = tDict["CreateDate"];
            string SourceName = tDict["SourceName"];
            // Dim SourceImage As String = tDict("SourceImage")
            string SourceTypeCode = tDict["SourceTypeCode"];
            string FQN = tDict["FQN"];
            string VersionNbr = tDict["VersionNbr"];
            string LastAccessDate = tDict["LastAccessDate"];
            string FileLength = tDict["FileLength"];
            string LastWriteTime = tDict["LastWriteTime"];
            string UserID = tDict["UserID"];
            string DataSourceOwnerUserID = tDict["DataSourceOwnerUserID"];
            string isPublic = tDict["isPublic"];
            string FileDirectory = tDict["FileDirectory"];
            string OriginalFileType = tDict["OriginalFileType"];
            string RetentionExpirationDate = tDict["RetentionExpirationDate"];
            string IsPublicPreviousState = tDict["IsPublicPreviousState"];
            string isAvailable = tDict["isAvailable"];
            string isContainedWithinZipFile = tDict["isContainedWithinZipFile"];
            string IsZipFile = tDict["IsZipFile"];
            string DataVerified = tDict["DataVerified"];
            string ZipFileGuid = tDict["ZipFileGuid"];
            string ZipFileFQN = tDict["ZipFileFQN"];
            string Description = tDict["Description"];
            string KeyWords = tDict["KeyWords"];
            string Notes = tDict["Notes"];
            string isPerm = tDict["isPerm"];
            string isMaster = tDict["isMaster"];
            string CreationDate = tDict["CreationDate"];
            string OcrPerformed = tDict["OcrPerformed"];
            string isGraphic = tDict["isGraphic"];
            string GraphicContainsText = tDict["GraphicContainsText"];
            string OcrText = tDict["OcrText"];
            string ImageHiddenText = tDict["ImageHiddenText"];
            string isWebPage = tDict["isWebPage"];
            string ParentGuid = tDict["ParentGuid"];
            string RetentionCode = tDict["RetentionCode"];
            string MachineID = tDict["MachineID"];
            string CRC = tDict["CRC"];
            string ImageHash = tDict["ImageHash"];
            string SharePoint = tDict["SharePoint"];
            string SharePointDoc = tDict["SharePointDoc"];
            string SharePointList = tDict["SharePointList"];
            string SharePointListItem = tDict["SharePointListItem"];
            string StructuredData = tDict["StructuredData"];
            string HiveConnectionName = tDict["HiveConnectionName"];
            string HiveActive = tDict["HiveActive"];
            string RepoSvrName = tDict["RepoSvrName"];
            string RowCreationDate = tDict["RowCreationDate"];
            string RowLastModDate = tDict["RowLastModDate"];
            string ContainedWithin = tDict["ContainedWithin"];
            string RecLen = tDict["RecLen"];
            string RecHash = tDict["RecHash"];
            string OriginalSize = tDict["OriginalSize"];
            string CompressedSize = tDict["CompressedSize"];
            string txStartTime = tDict["txStartTime"];
            string txEndTime = tDict["txEndTime"];
            string txTotalTime = tDict["txTotalTime"];
            string TransmitTime = tDict["TransmitTime"];
            string FileAttached = tDict["FileAttached"];
            string BPS = tDict["BPS"];
            string RepoName = tDict["RepoName"];
            string HashFile = tDict["HashFile"];
            string HashName = tDict["HashName"];
            string OcrSuccessful = tDict["OcrSuccessful"];
            string OcrPending = tDict["OcrPending"];
            string PdfIsSearchable = tDict["PdfIsSearchable"];
            string PdfOcrRequired = tDict["PdfOcrRequired"];
            string PdfOcrSuccess = tDict["PdfOcrSuccess"];
            string PdfOcrTextExtracted = tDict["PdfOcrTextExtracted"];
            string PdfPages = tDict["PdfPages"];
            string PdfImages = tDict["PdfImages"];
            string RequireOcr = tDict["RequireOcr"];
            string RssLinkFlg = tDict["RssLinkFlg"];
            string RssLinkGuid = tDict["RssLinkGuid"];
            string PageURL = tDict["PageURL"];
            string RetentionDate = tDict["RetentionDate"];
            string URLHash = tDict["URLHash"];
            string WebPagePublishDate = tDict["WebPagePublishDate"];
            string SapData = tDict["SapData"];
            // Dim RowID As String = tDict("RowID")

            bool B = true;
            string TSQL = @"INSERT INTO DataSource ( 
                        RowGuid,
                        SourceGuid,
                        CreateDate,
                        SourceName,
                        SourceImage,
                        SourceTypeCode,
                        FQN,
                        VersionNbr,
                        LastAccessDate,
                        FileLength,
                        LastWriteTime,
                        UserID,
                        DataSourceOwnerUserID,
                        isPublic,
                        FileDirectory,
                        OriginalFileType,
                        RetentionExpirationDate,
                        IsPublicPreviousState,
                        isAvailable,
                        isContainedWithinZipFile,
                        IsZipFile,
                        DataVerified,
                        ZipFileGuid,
                        ZipFileFQN,
                        Description,
                        KeyWords,
                        Notes,
                        isPerm,
                        isMaster,
                        CreationDate,
                        OcrPerformed,
                        isGraphic,
                        GraphicContainsText,
                        OcrText,
                        ImageHiddenText,
                        isWebPage,
                        ParentGuid,
                        RetentionCode,
                        MachineID,
                        CRC,
                        ImageHash,
                        SharePoint,
                        SharePointDoc,
                        SharePointList,
                        SharePointListItem,
                        StructuredData,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName,
                        RowCreationDate,
                        RowLastModDate,
                        ContainedWithin,
                        RecLen,
                        RecHash,
                        OriginalSize,
                        CompressedSize,
                        txStartTime,
                        txEndTime,
                        txTotalTime,
                        TransmitTime,
                        FileAttached,
                        BPS,
                        RepoName,
                        HashFile,
                        HashName,
                        OcrSuccessful,
                        OcrPending,
                        PdfIsSearchable,
                        PdfOcrRequired,
                        PdfOcrSuccess,
                        PdfOcrTextExtracted,
                        PdfPages,
                        PdfImages,
                        RequireOcr,
                        RssLinkFlg,
                        RssLinkGuid,
                        PageURL,
                        RetentionDate,
                        URLHash,
                        WebPagePublishDate,
                        SapData,
                        SourceImageOrigin
                        ) 
                        VALUES (
                        @RowGuid,
                        @SourceGuid,
                        @CreateDate,
                        @SourceName,
                        @SourceImage,
                        @SourceTypeCode,
                        @FQN,
                        @VersionNbr,
                        @LastAccessDate,
                        @FileLength,
                        @LastWriteTime,
                        @UserID,
                        @DataSourceOwnerUserID,
                        @isPublic,
                        @FileDirectory,
                        @OriginalFileType,
                        @RetentionExpirationDate,
                        @IsPublicPreviousState,
                        @isAvailable,
                        @isContainedWithinZipFile,
                        @IsZipFile,
                        @DataVerified,
                        @ZipFileGuid,
                        @ZipFileFQN,
                        @Description,
                        @KeyWords,
                        @Notes,
                        @isPerm,
                        @isMaster,
                        @CreationDate,
                        @OcrPerformed,
                        @isGraphic,
                        @GraphicContainsText,
                        @OcrText,
                        @ImageHiddenText,
                        @isWebPage,
                        @ParentGuid,
                        @RetentionCode,
                        @MachineID,
                        @CRC,
                        @ImageHash,
                        @SharePoint,
                        @SharePointDoc,
                        @SharePointList,
                        @SharePointListItem,
                        @StructuredData,
                        @HiveConnectionName,
                        @HiveActive,
                        @RepoSvrName,
                        @RowCreationDate,
                        @RowLastModDate,
                        @ContainedWithin,
                        @RecLen,
                        @RecHash,
                        @OriginalSize,
                        @CompressedSize,
                        @txStartTime,
                        @txEndTime,
                        @txTotalTime,
                        @TransmitTime,
                        @FileAttached,
                        @BPS,
                        @RepoName,
                        @HashFile,
                        @HashName,
                        @OcrSuccessful,
                        @OcrPending,
                        @PdfIsSearchable,
                        @PdfOcrRequired,
                        @PdfOcrSuccess,
                        @PdfOcrTextExtracted,
                        @PdfPages,
                        @PdfImages,
                        @RequireOcr,
                        @RssLinkFlg,
                        @RssLinkGuid,
                        @PageURL,
                        @RetentionDate,
                        @URLHash,
                        @WebPagePublishDate,
                        @SapData,
                        @SourceImageOrigin
                        )";
            try
            {
                CloseConn();
                CkConn();
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand(TSQL, connection))
                    {
                        command.CommandType = CommandType.Text;
                        // **************************************************************************
                        command.Parameters.AddWithValue("@RowGuid", RowGuid);
                        command.Parameters.AddWithValue("@SourceGuid", SourceGuid);
                        command.Parameters.AddWithValue("@CreateDate", CreateDate);
                        command.Parameters.AddWithValue("@SourceName", SourceName);
                        command.Parameters.AddWithValue("@SourceImage", SourceImage);
                        command.Parameters.AddWithValue("@SourceTypeCode", SourceTypeCode);
                        command.Parameters.AddWithValue("@FQN", FQN);
                        command.Parameters.AddWithValue("@VersionNbr", VersionNbr);
                        command.Parameters.AddWithValue("@LastAccessDate", LastAccessDate);
                        command.Parameters.AddWithValue("@FileLength", FileLength);
                        command.Parameters.AddWithValue("@LastWriteTime", LastWriteTime);
                        command.Parameters.AddWithValue("@UserID", UserID);
                        command.Parameters.AddWithValue("@DataSourceOwnerUserID", DataSourceOwnerUserID);
                        command.Parameters.AddWithValue("@isPublic", isPublic);
                        command.Parameters.AddWithValue("@FileDirectory", FileDirectory);
                        command.Parameters.AddWithValue("@OriginalFileType", OriginalFileType);
                        command.Parameters.AddWithValue("@RetentionExpirationDate", RetentionExpirationDate);
                        command.Parameters.AddWithValue("@IsPublicPreviousState", IsPublicPreviousState);
                        command.Parameters.AddWithValue("@isAvailable", isAvailable);
                        command.Parameters.AddWithValue("@isContainedWithinZipFile", isContainedWithinZipFile);
                        command.Parameters.AddWithValue("@IsZipFile", IsZipFile);
                        command.Parameters.AddWithValue("@DataVerified", DataVerified);
                        command.Parameters.AddWithValue("@ZipFileGuid", ZipFileGuid);
                        command.Parameters.AddWithValue("@ZipFileFQN", ZipFileFQN);
                        command.Parameters.AddWithValue("@Description", Description);
                        command.Parameters.AddWithValue("@KeyWords", KeyWords);
                        command.Parameters.AddWithValue("@Notes", Notes);
                        command.Parameters.AddWithValue("@isPerm", isPerm);
                        command.Parameters.AddWithValue("@isMaster", isMaster);
                        command.Parameters.AddWithValue("@CreationDate", CreationDate);
                        command.Parameters.AddWithValue("@OcrPerformed", OcrPerformed);
                        command.Parameters.AddWithValue("@isGraphic", isGraphic);
                        command.Parameters.AddWithValue("@GraphicContainsText", GraphicContainsText);
                        command.Parameters.AddWithValue("@OcrText", OcrText);
                        command.Parameters.AddWithValue("@ImageHiddenText", ImageHiddenText);
                        command.Parameters.AddWithValue("@isWebPage", isWebPage);
                        command.Parameters.AddWithValue("@ParentGuid", ParentGuid);
                        command.Parameters.AddWithValue("@RetentionCode", RetentionCode);
                        command.Parameters.AddWithValue("@MachineID", MachineID);
                        command.Parameters.AddWithValue("@CRC", CRC);
                        command.Parameters.AddWithValue("@ImageHash", ImageHash);
                        command.Parameters.AddWithValue("@SharePoint", SharePoint);
                        command.Parameters.AddWithValue("@SharePointDoc", SharePointDoc);
                        command.Parameters.AddWithValue("@SharePointList", SharePointList);
                        command.Parameters.AddWithValue("@SharePointListItem", SharePointListItem);
                        command.Parameters.AddWithValue("@StructuredData", StructuredData);
                        command.Parameters.AddWithValue("@HiveConnectionName", HiveConnectionName);
                        command.Parameters.AddWithValue("@HiveActive", HiveActive);
                        command.Parameters.AddWithValue("@RepoSvrName", RepoSvrName);
                        command.Parameters.AddWithValue("@RowCreationDate", RowCreationDate);
                        command.Parameters.AddWithValue("@RowLastModDate", RowLastModDate);
                        command.Parameters.AddWithValue("@ContainedWithin", ContainedWithin);
                        command.Parameters.AddWithValue("@RecLen", RecLen);
                        command.Parameters.AddWithValue("@RecHash", RecHash);
                        command.Parameters.AddWithValue("@OriginalSize", OriginalSize);
                        command.Parameters.AddWithValue("@CompressedSize", CompressedSize);
                        command.Parameters.AddWithValue("@txStartTime", txStartTime);
                        command.Parameters.AddWithValue("@txEndTime", txEndTime);
                        command.Parameters.AddWithValue("@txTotalTime", txTotalTime);
                        command.Parameters.AddWithValue("@TransmitTime", TransmitTime);
                        command.Parameters.AddWithValue("@FileAttached", FileAttached);
                        command.Parameters.AddWithValue("@BPS", BPS);
                        command.Parameters.AddWithValue("@RepoName", RepoName);
                        command.Parameters.AddWithValue("@HashFile", HashFile);
                        command.Parameters.AddWithValue("@HashName", HashName);
                        command.Parameters.AddWithValue("@OcrSuccessful", OcrSuccessful);
                        command.Parameters.AddWithValue("@OcrPending", OcrPending);
                        command.Parameters.AddWithValue("@PdfIsSearchable", PdfIsSearchable);
                        command.Parameters.AddWithValue("@PdfOcrRequired", PdfOcrRequired);
                        command.Parameters.AddWithValue("@PdfOcrSuccess", PdfOcrSuccess);
                        command.Parameters.AddWithValue("@PdfOcrTextExtracted", PdfOcrTextExtracted);
                        command.Parameters.AddWithValue("@PdfPages", PdfPages);
                        command.Parameters.AddWithValue("@PdfImages", PdfImages);
                        command.Parameters.AddWithValue("@RequireOcr", RequireOcr);
                        command.Parameters.AddWithValue("@RssLinkFlg", RssLinkFlg);
                        command.Parameters.AddWithValue("@RssLinkGuid", RssLinkGuid);
                        command.Parameters.AddWithValue("@PageURL", PageURL);
                        command.Parameters.AddWithValue("@RetentionDate", RetentionDate);
                        command.Parameters.AddWithValue("@URLHash", URLHash);
                        command.Parameters.AddWithValue("@WebPagePublishDate", WebPagePublishDate);
                        command.Parameters.AddWithValue("@SapData", SapData);
                        command.Parameters.AddWithValue("@SourceImageOrigin", SourceImageOrigin);
                        // **************************************************************************
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        connection.Dispose();
                        command.Dispose();
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // Session("ErrorLocation") tbl= 'Session("ErrorLocation") + " : " , ex
                Console.WriteLine(ex.Message);
                // xTrace(3084, "insertNewContent", "Failed: " + ex.ToString)
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : SP_ApplyUpdate : 100 : ", ex);
            }

            return B;
        }

        public bool updateExistingContent(Dictionary<string, string> tDict, string RowID, byte[] SourceImage)
        {
            if (modGlobals.gTraceFunctionCalls.Equals(1))
            {
                LOG.WriteToArchiveLog("--> CALL: " + System.Reflection.MethodBase.GetCurrentMethod().ToString());
            }

            string ImageHash = tDict["ImageHash"];
            string LastAccessDate = tDict["LastAccessDate"];
            string FileLength = tDict["FileLength"];
            string LastWriteTime = tDict["LastWriteTime"];
            string UserID = tDict["UserID"];
            string OcrPerformed = tDict["OcrPerformed"];
            string isGraphic = tDict["isGraphic"];
            string MachineID = tDict["MachineID"];
            string CRC = tDict["CRC"];
            string RowLastModDate = tDict["RowLastModDate"];
            string HashFile = tDict["HashFile"];
            string OcrPending = tDict["OcrPending"];
            string HashName = tDict["HashName"];
            bool B = true;
            string TSQL = @"UPDATE DataSource SET  
                        SourceImage = @SourceImage,
                        LastAccessDate = @LastAccessDate,
                        FileLength = @FileLength,
                        LastWriteTime = @LastWriteTime,
                        UserID = @UserID,
                        OcrPerformed = @OcrPerformed,
                        isGraphic = @isGraphic,
                        MachineID = @MachineID,
                        CRC = @CRC,
                        ImageHash = @ImageHash,
                        RowLastModDate = @RowLastModDate,
                        HashFile = @HashFile,
                        HashName = @HashName,
                        OcrPending = @OcrPending
                    Where RowID = " + RowID;
            try
            {
                CloseConn();
                CkConn();
                using (var connection = new SqlConnection(getRepoConnStr()))
                {
                    using (var command = new SqlCommand(TSQL, connection))
                    {
                        command.CommandType = CommandType.Text;
                        // **************************************************************************
                        command.Parameters.AddWithValue("@SourceImage", SourceImage);
                        command.Parameters.AddWithValue("@LastAccessDate", LastAccessDate);
                        command.Parameters.AddWithValue("@FileLength", FileLength);
                        command.Parameters.AddWithValue("@LastWriteTime", LastWriteTime);
                        command.Parameters.AddWithValue("@UserID", UserID);
                        command.Parameters.AddWithValue("@OcrPerformed", OcrPerformed);
                        command.Parameters.AddWithValue("@isGraphic", isGraphic);
                        command.Parameters.AddWithValue("@MachineID", MachineID);
                        command.Parameters.AddWithValue("@CRC", CRC);
                        command.Parameters.AddWithValue("@ImageHash", ImageHash);
                        command.Parameters.AddWithValue("@RowLastModDate", RowLastModDate);
                        command.Parameters.AddWithValue("@HashFile", HashFile);
                        command.Parameters.AddWithValue("@HashName", HashName);
                        command.Parameters.AddWithValue("@OcrPending", OcrPending);
                        // command.Parameters.AddWithValue("@RowID", RowID)
                        // **************************************************************************
                        connection.Open();
                        command.ExecuteNonQuery();
                        connection.Close();
                        connection.Dispose();
                        command.Dispose();
                        B = true;
                    }
                }

                B = true;
            }
            catch (Exception ex)
            {
                // Session("ErrorLocation") tbl= 'Session("ErrorLocation") + " : " , ex
                Console.WriteLine(ex.Message);
                // xTrace(3084, "insertNewContent", "Failed: " + ex.ToString)
                B = false;
                LOG.WriteToArchiveLog("clsDatabaseARCH : SP_ApplyUpdate : 100 : ", ex);
            }

            return B;
        }

        public int getCount(string MySql)
        {
            int CNT = 0;
            try
            {
                CloseConn();
                CkConn();
                SqlDataReader rsData = null;
                bool b = false;
                string CS = getRepoConnStr();
                var CONN = new SqlConnection(CS);
                CONN.Open();
                var command = new SqlCommand(MySql, CONN);
                rsData = command.ExecuteReader();
                rsData.Read();
                CNT = rsData.GetInt32(0);
                rsData.Close();
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("clsDatabaseARCH : getCount : 1299A : ", ex);
            }

            return CNT;
        }

        public void CleanupSourceName(string MachineName)
        {
            string UserID = "";
            string SourceName = "";
            string FileExt = "";
            string SourceGuid = "";
            string FQN = "";
            string OriginalFileType = "";
            bool B = true;
            int I = 0;
            My.MyProject.Forms.frmNotify.Show();
            My.MyProject.Forms.frmNotify.Text = "Validate SourceName";
            string S = "delete From DataSource Where LTrim(RTrim(FQN)) = '' ";
            S = "Select count(*) from DataSource " + Environment.NewLine;
            S += "where(LTrim(RTrim(UserID)) = '' ";
            S += " Or LTRIM(RTRIM(SOurceName)) = '' or LTRIM(RTRIM(OriginalFileType)) = ''  ";
            S += " Or LTRIM(RTRIM(SourceTypeCode)) = '' or LTRIM(RTRIM(MachineID)) = '' or MachineID is null ) " + Environment.NewLine;
            S += "And LTrim(RTrim(FQN)) <> ''   " + Environment.NewLine;
            int iCnt = getCount(S);
            if (iCnt.Equals(0))
            {
                MessageBox.Show("DONE - No files found to process");
                return;
            }

            S = "Select FQN, UserID, SourceName, OriginalFileType, SourceGuid from DataSource " + Environment.NewLine;
            S += "where(LTrim(RTrim(UserID)) = '' ";
            S += " Or LTRIM(RTRIM(SOurceName)) = '' or LTRIM(RTRIM(OriginalFileType)) = ''  ";
            S += " Or LTRIM(RTRIM(SourceTypeCode)) = '' or LTRIM(RTRIM(MachineID)) = '' or MachineID is null ) " + Environment.NewLine;
            S += "And LTrim(RTrim(FQN)) <> '' order by FQN  " + Environment.NewLine;
            SqlDataReader RSData = null;
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                CONN.Open();
                var command = new SqlCommand(S, CONN);
                using (command)
                {
                    RSData = command.ExecuteReader();
                    using (RSData)
                        if (RSData.HasRows)
                        {
                            while (RSData.Read())
                            {
                                Application.DoEvents();
                                I += 1;
                                FQN = RSData.GetValue(0).ToString().Trim();
                                UserID = RSData.GetValue(1).ToString().Trim();
                                SourceName = RSData.GetValue(2).ToString().Trim();
                                OriginalFileType = RSData.GetValue(3).ToString().ToUpper().Trim();
                                SourceGuid = RSData.GetValue(4).ToString().ToUpper().Trim();
                                FileExt = Path.GetExtension(FQN).ToUpper();
                                My.MyProject.Forms.frmNotify.lblFileSpec.Text = FQN;
                                My.MyProject.Forms.frmNotify.lblPdgPages.Text = "# " + I.ToString();
                                if (UserID.Length.Equals(0))
                                {
                                    UserID = modGlobals.gCurrLoginID;
                                }

                                if (SourceName.Length.Equals(0))
                                {
                                    SourceName = Path.GetFileName(FQN);
                                }

                                if (!OriginalFileType.Length.Equals(0))
                                {
                                    OriginalFileType = FileExt;
                                }
                                else if (!OriginalFileType.Equals(FileExt))
                                {
                                    FileExt = FileExt;
                                }

                                Application.DoEvents();
                                B = ApplySourceTypeCode(MachineName, UserID, SourceName, FileExt, SourceGuid);
                            }
                        }
                        else
                        {
                            id = -1;
                        }
                }
            }

            RSData.Close();
            RSData = null;
            My.MyProject.Forms.frmNotify.Close();
            MessageBox.Show("Validation Complete...");
        }

        public bool InsertBinaryData(string RepositoryTable, string FQN, string FileHash, string TgtGuid)
        {
            if (FileHash.Length < 10)
            {
                LOG.WriteToArchiveLog("ERROR InsertBinaryData File hash missing: " + FQN);
                return false;
            }

            bool B = true;
            int LL = 0;
            try
            {
                RepositoryTable = RepositoryTable.ToUpper();
                LL = 10;
                switch (RepositoryTable.ToUpper() ?? "")
                {
                    case "EMAIL":
                        {
                            S = "Update EMAIL set FileAttached = 0, CRC = '" + FileHash + "' where EmailGuid = '" + TgtGuid + "'";
                            break;
                        }

                    case "EMAILATTACHMENT":
                        {
                            S = "Update EmailAttachment set FileAttached = 0, CRC = '" + FileHash + "'  where RowGuid = '" + TgtGuid + "'";
                            break;
                        }

                    case "DATASOURCE":
                        {
                            S = "Update DataSource set FileAttached = 0, CRC = '" + FileHash + "' where SourceGuid = '" + TgtGuid + "'";
                            break;
                        }

                    default:
                        {
                            S = "ERROR: 10029 - RepositoryTable not correctly set.";
                            break;
                        }
                }

                LL = 20;
                string CS = setConnStr();
                LL = 30;
                B = ExecuteSql(Conversions.ToString(S), CS, false);
                LL = 4;
                LL = 40;
                var FileBinaryData = File.ReadAllBytes(FQN);
                int FileLength = FileBinaryData.Length;
                bool SuccessfulUpload = true;
                string ConnStr = setConnStr();
                var CONN = new SqlConnection(ConnStr);
                if (CONN.State == ConnectionState.Closed)
                {
                    CONN.Open();
                }

                LL = 50;
                var CMD = new SqlCommand();
                try
                {
                    if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        LL = 55;
                        var FI = new FileInfo(FQN);
                        var LastAccessDate = FI.LastAccessTime;
                        var LastWriteTime = FI.LastWriteTime;
                        FI = null;
                        CMD.Connection = CONN;
                        CMD.CommandText = "[UpdateDataSourceImage]";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@SourceGuid", TgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@SourceImage", FileBinaryData));
                            CMD.Parameters.Add(new SqlParameter("@LastAccessDate", LastAccessDate));
                            CMD.Parameters.Add(new SqlParameter("@LastWriteTime", LastWriteTime));
                            CMD.Parameters.Add(new SqlParameter("@VersionNbr", 1));
                            CMD.ExecuteNonQuery();
                        }
                    }

                    LL = 60;
                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        LL = 70;
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailFilestream";
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@EmailGuid", TgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@EmailImage", FileBinaryData));
                            CMD.ExecuteNonQuery();
                        }
                    }

                    LL = 80;
                    if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        LL = 90;
                        // Dim TSql As String = "Update [EmailAttachment] set Attachment = @Attachment Where RowGuid = @RowGuid"
                        CMD.Connection = CONN;
                        CMD.CommandText = "UpdateEmailAttachmentFilestreamV2";
                        // CMD.CommandText = TSql
                        CMD.CommandType = CommandType.StoredProcedure;
                        using (CONN)
                        using (CMD)
                        {
                            CMD.Parameters.Add(new SqlParameter("@RowGuid", TgtGuid));
                            CMD.Parameters.Add(new SqlParameter("@Attachment", FileBinaryData));
                            CMD.Parameters.Add(new SqlParameter("@LastAccessDate", DateAndTime.Now));
                            // CMD.Parameters.Add(New SqlParameter("@AttachmentName", OriginalFileName))
                            CMD.ExecuteNonQuery();
                        }
                    }

                    LL = 100;
                }
                catch (Exception ex)
                {
                    SuccessfulUpload = false;
                    LOG.WriteToArchiveLog("ERROR: X01 InsertBinaryData: " + ex.Message);
                    LOG.WriteToArchiveLog("ERROR: LL=" + LL.ToString());
                    LOG.WriteToArchiveLog("ERROR: Binary Data Length: " + FileBinaryData.LongLength.ToString());
                    LOG.WriteToArchiveLog("ERROR: TgtGuid Length: " + TgtGuid.ToString());
                }
                finally
                {
                    oFile = null;
                    FileBinaryData = null;
                    CMD.Dispose();
                    if (CONN.State == ConnectionState.Open)
                    {
                        CONN.Close();
                    }

                    CONN.Dispose();
                    if (RepositoryTable.Equals("EMAIL"))
                    {
                        S = "Update EMAIL set FileAttached = 1 where EmailGuid = '" + TgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("EMAILATTACHMENT"))
                    {
                        S = "Update EmailAttachment set FileAttached = 1 where EmailGuid = '" + TgtGuid + "'";
                    }
                    else if (RepositoryTable.Equals("DATASOURCE"))
                    {
                        S = "Update DataSource set FileAttached = 1 where SourceGuid = '" + TgtGuid + "'";
                    }

                    LL = 120;
                    try
                    {
                        B = ExecuteSql(Conversions.ToString(S), CS, false);
                        LL = 130;
                        B = UpdateDataSourceFileInfo(FQN, TgtGuid, FileLength, FileHash);
                    }
                    catch (Exception ex)
                    {
                        LOG.WriteToArchiveLog("ERROR 22 InsertBinaryData: LL=" + LL.ToString() + Constants.vbCrLf + ex.Message);
                    }
                }
            }
            catch (Exception ex)
            {
                B = false;
                LOG.WriteToArchiveLog("ERROR 00 InsertBinaryData: LL=" + LL.ToString() + Constants.vbCrLf + ex.Message);
            }

            return B;
        }

        public void spUpdateRetention()
        {
            string s = @"UPDATE DataSource 
                SET RetentionExpirationDate = DATEADD(year, R.RetentionUnits, DS.LastWriteTime) 
                From dbo.DataSource AS DS
                INNER JOIN dbo.Directory AS DIR
                On DS.FileDirectory Like '%' + DIR.FQN + '%'
                inner join [Retention] R
                On R.RetentionCode = DIR.RetentionCode
        WHERE DS.RetentionExpirationDate < '01-01-1971' or DS.RetentionExpirationDate is null";
            string CS = setConnStr();
            ExecuteSql(s, CS, false);
        }

        public bool insertDBUpdate(string FQN)
        {
            FQN = FQN.Replace("'", "''");
            bool B = true;
            int iExists = getDBUpdateExists(FQN);
            if (iExists > 0)
            {
                return true;
            }

            string MySql = "insert into [DBUpdate] (FileName) values ('" + FQN + "')";
            var CMD = new SqlCommand();
            string connString = getRepoConnStr();
            var conn = new SqlConnection(connString);
            if (conn is null)
            {
                conn = new SqlConnection(getRepoConnStr());
            }

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = getRepoConnStr();
                conn.Open();
            }

            CMD.Connection = conn;
            CMD.CommandText = MySql;
            CMD.CommandType = CommandType.Text;
            using (conn)
            using (CMD)
                try
                {
                    CMD.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 22x1: insertDBUpdate: " + ex.Message + Constants.vbCrLf + MySql);
                    B = false;
                }

            return B;
        }

        public bool updateDBUpdateLastwrite(string FQN)
        {
            FQN = FQN.Replace("'", "''");
            bool B = true;
            int iExists = getDBUpdateExists(FQN);
            if (iExists.Equals(0))
            {
                return false;
            }

            var FI = new FileInfo(FQN);
            string DateApplied = FI.LastWriteTime.ToString();
            FI = null;
            string MySql = "update [DBUpdate] set DateApplied = '" + DateApplied + "' where FileName = '" + FQN + "';";
            var CMD = new SqlCommand();
            string connString = getRepoConnStr();
            var conn = new SqlConnection(connString);
            if (conn is null)
            {
                conn = new SqlConnection(getRepoConnStr());
            }

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = getRepoConnStr();
                conn.Open();
            }

            CMD.Connection = conn;
            CMD.CommandText = MySql;
            CMD.CommandType = CommandType.Text;
            using (conn)
            using (CMD)
                try
                {
                    CMD.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 22x: updateDBUpdateLastwrite: " + ex.Message + Constants.vbCrLf + MySql);
                    B = false;
                }

            return B;
        }

        public bool ZeroizeDBUpdate()
        {
            bool B = true;
            string MySql = "delete from [DBUpdate]";
            var CMD = new SqlCommand();
            string connString = getRepoConnStr();
            var conn = new SqlConnection(connString);
            if (conn is null)
            {
                conn = new SqlConnection(getRepoConnStr());
            }

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = getRepoConnStr();
                conn.Open();
            }

            CMD.Connection = conn;
            CMD.CommandText = MySql;
            CMD.CommandType = CommandType.Text;
            using (conn)
            using (CMD)
                try
                {
                    CMD.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 22x: ReapplyDBUpdate: " + ex.Message + Constants.vbCrLf + MySql);
                    B = false;
                }

            return B;
        }

        public bool ckUpdateTbl()
        {
            bool B = true;
            string MySql = @"IF NOT EXISTS
                        (
                            SELECT 1
                            FROM sys.tables
                            WHERE name = 'DBUpdate'
                        )
                            BEGIN
                                CREATE TABLE [dbo].[DBUpdate]
                                ([FileName]      [NVARCHAR](100) NOT NULL, 
                                 [DateApplied]   [DATETIME] NOT NULL, 
                                 [RowCreateDate] [DATETIME] NOT NULL, 
                                 [UpdateApplied] [INT] NULL
                                );
                                ALTER TABLE [dbo].[DBUpdate]
                                ADD DEFAULT(GETDATE()) FOR [DateApplied];
                                ALTER TABLE [dbo].[DBUpdate]
                                ADD DEFAULT(GETDATE()) FOR [RowCreateDate];
                                ALTER TABLE [dbo].[DBUpdate]
                                ADD DEFAULT((0)) FOR [UpdateApplied];
                                CREATE UNIQUE CLUSTERED INDEX [PC_DBUpdate] ON [dbo].[DBUpdate]([FileName] ASC);
                        END;";
            var CMD = new SqlCommand();
            string connString = getRepoConnStr();
            var conn = new SqlConnection(connString);
            if (conn is null)
            {
                conn = new SqlConnection(getRepoConnStr());
            }

            if (conn.State == ConnectionState.Closed)
            {
                conn.ConnectionString = getRepoConnStr();
                conn.Open();
            }

            CMD.Connection = conn;
            CMD.CommandText = MySql;
            CMD.CommandType = CommandType.Text;
            using (conn)
            using (CMD)
                try
                {
                    CMD.ExecuteNonQuery();
                }
                catch (Exception ex)
                {
                    LOG.WriteToArchiveLog("ERROR 22x: updateDBUpdateLastwrite: " + ex.Message + Constants.vbCrLf + MySql);
                    B = false;
                }

            return B;
        }

        public List<string> getUsedExtension()
        {
            var exts = new List<string>();
            string ext = "";
            string s = "SELECT distinct [ExtCode] FROM [IncludedFiles]";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                var command = new SqlCommand(s, CONN);
                using (command)
                using (var RSD = command.ExecuteReader())
                {
                    if (RSD.HasRows)
                    {
                        while (RSD.Read())
                        {
                            ext = RSD.GetValue(0).ToString();
                            if (!exts.Contains(ext))
                            {
                                exts.Add(ext);
                            }
                        }
                    }
                }
            }

            return exts;
        }

        public int getDBUpdateExists(string FQN)
        {
            var iCnt = default(int);
            string S = "select count(*) from DBUpdate where FileName = '" + FQN + "'";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                var command = new SqlCommand(S, CONN);
                using (command)
                using (var RSD = command.ExecuteReader())
                {
                    if (RSD.HasRows)
                    {
                        while (RSD.Read())
                            iCnt = Conversions.ToInteger(RSD.GetValue(0).ToString().ToLower());
                    }
                }
            }

            return iCnt;
        }

        public DateTime getDBUpdateLastWriteDate(string FQN)
        {
            var AppliedDate = DateAndTime.Now;
            string S = "select DateApplied from DBUpdate where FileName = '" + FQN + "'";
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            CONN.Open();
            using (CONN)
            {
                var command = new SqlCommand(S, CONN);
                using (command)
                using (var RSD = command.ExecuteReader())
                {
                    if (RSD.HasRows)
                    {
                        while (RSD.Read())
                            AppliedDate = RSD.GetDateTime(0);
                    }
                }
            }

            return AppliedDate;
        }

        public DataTable getSrcDT()
        {
            string strSql = "select RowGuid, SourceName, OriginalFileType, SourceTypeCode from DataSource";
            var DT = new DataTable();
            string CS = getRepoConnStr();
            var CONN = new SqlConnection(CS);
            try
            {
                using (CONN)
                {
                    CONN.Open();
                    using (var dad = new SqlDataAdapter(strSql, CONN))
                    {
                        dad.Fill(DT);
                    }

                    CONN.Close();
                }
            }
            catch (Exception ex)
            {
                LOG.WriteToArchiveLog("FATAL ERROR getErrDT: " + ex.Message);
            }

            int count_row = DT.Rows.Count;
            return DT;
        }

        /* TODO ERROR: Skipped RegionDirectiveTrivia */
        private bool disposedValue; // To detect redundant calls

        // IDisposable
        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                    currDomain.UnhandledException -= modGlobals.MYExnHandler;
                    Application.ThreadException -= modGlobals.MYThreadHandler;
                }

                // TODO: free unmanaged resources (unmanaged objects) and override Finalize() below.
                // TODO: set large fields to null.
            }

            disposedValue = true;
        }


        // This code added by Visual Basic to correctly implement the disposable pattern.
        public void Dispose()
        {
            // Do not change this code.  Put cleanup code in Dispose(disposing As Boolean) above.
            Dispose(true);
            // TODO: uncomment the following line if Finalize() is overridden above.
            // GC.SuppressFinalize(Me)
        }
        /* TODO ERROR: Skipped EndRegionDirectiveTrivia */
    }
}