//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ECMSearchWPF.SVCSearch {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_Attachments", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_Attachments : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttachmentNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttachmentName {
            get {
                return this.AttachmentNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttachmentNameField, value) != true)) {
                    this.AttachmentNameField = value;
                    this.RaisePropertyChanged("AttachmentName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailGuid {
            get {
                return this.EmailGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailGuidField, value) != true)) {
                    this.EmailGuidField = value;
                    this.RaisePropertyChanged("EmailGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowID {
            get {
                return this.RowIDField;
            }
            set {
                if ((this.RowIDField.Equals(value) != true)) {
                    this.RowIDField = value;
                    this.RaisePropertyChanged("RowID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_SearchTerms", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_SearchTerms : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SearchTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermDatatypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TermValField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SearchTypeCode {
            get {
                return this.SearchTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SearchTypeCodeField, value) != true)) {
                    this.SearchTypeCodeField = value;
                    this.RaisePropertyChanged("SearchTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Term {
            get {
                return this.TermField;
            }
            set {
                if ((object.ReferenceEquals(this.TermField, value) != true)) {
                    this.TermField = value;
                    this.RaisePropertyChanged("Term");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TermDatatype {
            get {
                return this.TermDatatypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TermDatatypeField, value) != true)) {
                    this.TermDatatypeField = value;
                    this.RaisePropertyChanged("TermDatatype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TermVal {
            get {
                return this.TermValField;
            }
            set {
                if ((object.ReferenceEquals(this.TermValField, value) != true)) {
                    this.TermValField = value;
                    this.RaisePropertyChanged("TermVal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_EMAIL", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_EMAIL : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AllRecipientsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BccField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BodyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CCField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreationTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FoundInAttachField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MsgSizeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int NbrAttachmentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalFolderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RANKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ROWIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ReceivedByNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReceivedTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RetentionExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SUBJECTField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderEmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SenderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime SentOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SentTOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortSubjField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isPublicField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AllRecipients {
            get {
                return this.AllRecipientsField;
            }
            set {
                if ((object.ReferenceEquals(this.AllRecipientsField, value) != true)) {
                    this.AllRecipientsField = value;
                    this.RaisePropertyChanged("AllRecipients");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Bcc {
            get {
                return this.BccField;
            }
            set {
                if ((object.ReferenceEquals(this.BccField, value) != true)) {
                    this.BccField = value;
                    this.RaisePropertyChanged("Bcc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Body {
            get {
                return this.BodyField;
            }
            set {
                if ((object.ReferenceEquals(this.BodyField, value) != true)) {
                    this.BodyField = value;
                    this.RaisePropertyChanged("Body");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CC {
            get {
                return this.CCField;
            }
            set {
                if ((object.ReferenceEquals(this.CCField, value) != true)) {
                    this.CCField = value;
                    this.RaisePropertyChanged("CC");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreationTime {
            get {
                return this.CreationTimeField;
            }
            set {
                if ((this.CreationTimeField.Equals(value) != true)) {
                    this.CreationTimeField = value;
                    this.RaisePropertyChanged("CreationTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailGuid {
            get {
                return this.EmailGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailGuidField, value) != true)) {
                    this.EmailGuidField = value;
                    this.RaisePropertyChanged("EmailGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FoundInAttach {
            get {
                return this.FoundInAttachField;
            }
            set {
                if ((this.FoundInAttachField.Equals(value) != true)) {
                    this.FoundInAttachField = value;
                    this.RaisePropertyChanged("FoundInAttach");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int MsgSize {
            get {
                return this.MsgSizeField;
            }
            set {
                if ((this.MsgSizeField.Equals(value) != true)) {
                    this.MsgSizeField = value;
                    this.RaisePropertyChanged("MsgSize");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int NbrAttachments {
            get {
                return this.NbrAttachmentsField;
            }
            set {
                if ((this.NbrAttachmentsField.Equals(value) != true)) {
                    this.NbrAttachmentsField = value;
                    this.RaisePropertyChanged("NbrAttachments");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalFolder {
            get {
                return this.OriginalFolderField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalFolderField, value) != true)) {
                    this.OriginalFolderField = value;
                    this.RaisePropertyChanged("OriginalFolder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RANK {
            get {
                return this.RANKField;
            }
            set {
                if ((this.RANKField.Equals(value) != true)) {
                    this.RANKField = value;
                    this.RaisePropertyChanged("RANK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RID {
            get {
                return this.RIDField;
            }
            set {
                if ((object.ReferenceEquals(this.RIDField, value) != true)) {
                    this.RIDField = value;
                    this.RaisePropertyChanged("RID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ROWID {
            get {
                return this.ROWIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ROWIDField, value) != true)) {
                    this.ROWIDField = value;
                    this.RaisePropertyChanged("ROWID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReceivedByName {
            get {
                return this.ReceivedByNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ReceivedByNameField, value) != true)) {
                    this.ReceivedByNameField = value;
                    this.RaisePropertyChanged("ReceivedByName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReceivedTime {
            get {
                return this.ReceivedTimeField;
            }
            set {
                if ((this.ReceivedTimeField.Equals(value) != true)) {
                    this.ReceivedTimeField = value;
                    this.RaisePropertyChanged("ReceivedTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RetentionExpirationDate {
            get {
                return this.RetentionExpirationDateField;
            }
            set {
                if ((this.RetentionExpirationDateField.Equals(value) != true)) {
                    this.RetentionExpirationDateField = value;
                    this.RaisePropertyChanged("RetentionExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SUBJECT {
            get {
                return this.SUBJECTField;
            }
            set {
                if ((object.ReferenceEquals(this.SUBJECTField, value) != true)) {
                    this.SUBJECTField = value;
                    this.RaisePropertyChanged("SUBJECT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderEmailAddress {
            get {
                return this.SenderEmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderEmailAddressField, value) != true)) {
                    this.SenderEmailAddressField = value;
                    this.RaisePropertyChanged("SenderEmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SenderName {
            get {
                return this.SenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SenderNameField, value) != true)) {
                    this.SenderNameField = value;
                    this.RaisePropertyChanged("SenderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime SentOn {
            get {
                return this.SentOnField;
            }
            set {
                if ((this.SentOnField.Equals(value) != true)) {
                    this.SentOnField = value;
                    this.RaisePropertyChanged("SentOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SentTO {
            get {
                return this.SentTOField;
            }
            set {
                if ((object.ReferenceEquals(this.SentTOField, value) != true)) {
                    this.SentTOField = value;
                    this.RaisePropertyChanged("SentTO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortSubj {
            get {
                return this.ShortSubjField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortSubjField, value) != true)) {
                    this.ShortSubjField = value;
                    this.RaisePropertyChanged("ShortSubj");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceTypeCode {
            get {
                return this.SourceTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceTypeCodeField, value) != true)) {
                    this.SourceTypeCodeField = value;
                    this.RaisePropertyChanged("SourceTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isPublic {
            get {
                return this.isPublicField;
            }
            set {
                if ((object.ReferenceEquals(this.isPublicField, value) != true)) {
                    this.isPublicField = value;
                    this.RaisePropertyChanged("isPublic");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_CONTENT", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_CONTENT : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime CreateDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSourceOwnerUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FQNField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileDirectoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FileLengthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastAccessDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime LastWriteTimeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string OriginalFileTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RANKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ROWIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RetentionExpirationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool RssLinkFlgField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StructuredDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int VersionNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isMasterField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isPublicField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isWebPageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime CreateDate {
            get {
                return this.CreateDateField;
            }
            set {
                if ((this.CreateDateField.Equals(value) != true)) {
                    this.CreateDateField = value;
                    this.RaisePropertyChanged("CreateDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSourceOwnerUserID {
            get {
                return this.DataSourceOwnerUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSourceOwnerUserIDField, value) != true)) {
                    this.DataSourceOwnerUserIDField = value;
                    this.RaisePropertyChanged("DataSourceOwnerUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FQN {
            get {
                return this.FQNField;
            }
            set {
                if ((object.ReferenceEquals(this.FQNField, value) != true)) {
                    this.FQNField = value;
                    this.RaisePropertyChanged("FQN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileDirectory {
            get {
                return this.FileDirectoryField;
            }
            set {
                if ((object.ReferenceEquals(this.FileDirectoryField, value) != true)) {
                    this.FileDirectoryField = value;
                    this.RaisePropertyChanged("FileDirectory");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FileLength {
            get {
                return this.FileLengthField;
            }
            set {
                if ((this.FileLengthField.Equals(value) != true)) {
                    this.FileLengthField = value;
                    this.RaisePropertyChanged("FileLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastAccessDate {
            get {
                return this.LastAccessDateField;
            }
            set {
                if ((this.LastAccessDateField.Equals(value) != true)) {
                    this.LastAccessDateField = value;
                    this.RaisePropertyChanged("LastAccessDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime LastWriteTime {
            get {
                return this.LastWriteTimeField;
            }
            set {
                if ((this.LastWriteTimeField.Equals(value) != true)) {
                    this.LastWriteTimeField = value;
                    this.RaisePropertyChanged("LastWriteTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string OriginalFileType {
            get {
                return this.OriginalFileTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.OriginalFileTypeField, value) != true)) {
                    this.OriginalFileTypeField = value;
                    this.RaisePropertyChanged("OriginalFileType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RANK {
            get {
                return this.RANKField;
            }
            set {
                if ((this.RANKField.Equals(value) != true)) {
                    this.RANKField = value;
                    this.RaisePropertyChanged("RANK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ROWID {
            get {
                return this.ROWIDField;
            }
            set {
                if ((object.ReferenceEquals(this.ROWIDField, value) != true)) {
                    this.ROWIDField = value;
                    this.RaisePropertyChanged("ROWID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RetentionExpirationDate {
            get {
                return this.RetentionExpirationDateField;
            }
            set {
                if ((this.RetentionExpirationDateField.Equals(value) != true)) {
                    this.RetentionExpirationDateField = value;
                    this.RaisePropertyChanged("RetentionExpirationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool RssLinkFlg {
            get {
                return this.RssLinkFlgField;
            }
            set {
                if ((this.RssLinkFlgField.Equals(value) != true)) {
                    this.RssLinkFlgField = value;
                    this.RaisePropertyChanged("RssLinkFlg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceGuid {
            get {
                return this.SourceGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceGuidField, value) != true)) {
                    this.SourceGuidField = value;
                    this.RaisePropertyChanged("SourceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StructuredData {
            get {
                return this.StructuredDataField;
            }
            set {
                if ((this.StructuredDataField.Equals(value) != true)) {
                    this.StructuredDataField = value;
                    this.RaisePropertyChanged("StructuredData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int VersionNbr {
            get {
                return this.VersionNbrField;
            }
            set {
                if ((this.VersionNbrField.Equals(value) != true)) {
                    this.VersionNbrField = value;
                    this.RaisePropertyChanged("VersionNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isMaster {
            get {
                return this.isMasterField;
            }
            set {
                if ((object.ReferenceEquals(this.isMasterField, value) != true)) {
                    this.isMasterField = value;
                    this.RaisePropertyChanged("isMaster");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isPublic {
            get {
                return this.isPublicField;
            }
            set {
                if ((object.ReferenceEquals(this.isPublicField, value) != true)) {
                    this.isPublicField = value;
                    this.RaisePropertyChanged("isPublic");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isWebPage {
            get {
                return this.isWebPageField;
            }
            set {
                if ((object.ReferenceEquals(this.isWebPageField, value) != true)) {
                    this.isWebPageField = value;
                    this.RaisePropertyChanged("isWebPage");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_USERSEARCHSTATE", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_USERSEARCHSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiveActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HiveConnectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmValField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowLastModDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int SearchIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HiveActive {
            get {
                return this.HiveActiveField;
            }
            set {
                if ((this.HiveActiveField.Equals(value) != true)) {
                    this.HiveActiveField = value;
                    this.RaisePropertyChanged("HiveActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HiveConnectionName {
            get {
                return this.HiveConnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HiveConnectionNameField, value) != true)) {
                    this.HiveConnectionNameField = value;
                    this.RaisePropertyChanged("HiveConnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmDataType {
            get {
                return this.ParmDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmDataTypeField, value) != true)) {
                    this.ParmDataTypeField = value;
                    this.RaisePropertyChanged("ParmDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmName {
            get {
                return this.ParmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmNameField, value) != true)) {
                    this.ParmNameField = value;
                    this.RaisePropertyChanged("ParmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmVal {
            get {
                return this.ParmValField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmValField, value) != true)) {
                    this.ParmValField = value;
                    this.RaisePropertyChanged("ParmVal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowCreationDate {
            get {
                return this.RowCreationDateField;
            }
            set {
                if ((this.RowCreationDateField.Equals(value) != true)) {
                    this.RowCreationDateField = value;
                    this.RaisePropertyChanged("RowCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowLastModDate {
            get {
                return this.RowLastModDateField;
            }
            set {
                if ((this.RowLastModDateField.Equals(value) != true)) {
                    this.RowLastModDateField = value;
                    this.RaisePropertyChanged("RowLastModDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNbr {
            get {
                return this.RowNbrField;
            }
            set {
                if ((this.RowNbrField.Equals(value) != true)) {
                    this.RowNbrField = value;
                    this.RaisePropertyChanged("RowNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenName {
            get {
                return this.ScreenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenNameField, value) != true)) {
                    this.ScreenNameField = value;
                    this.RaisePropertyChanged("ScreenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int SearchID {
            get {
                return this.SearchIDField;
            }
            set {
                if ((this.SearchIDField.Equals(value) != true)) {
                    this.SearchIDField = value;
                    this.RaisePropertyChanged("SearchID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_USERSCREENSTATE", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_USERSCREENSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiveActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HiveConnectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmDataTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ParmValField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowLastModDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HiveActive {
            get {
                return this.HiveActiveField;
            }
            set {
                if ((this.HiveActiveField.Equals(value) != true)) {
                    this.HiveActiveField = value;
                    this.RaisePropertyChanged("HiveActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HiveConnectionName {
            get {
                return this.HiveConnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HiveConnectionNameField, value) != true)) {
                    this.HiveConnectionNameField = value;
                    this.RaisePropertyChanged("HiveConnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmDataType {
            get {
                return this.ParmDataTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmDataTypeField, value) != true)) {
                    this.ParmDataTypeField = value;
                    this.RaisePropertyChanged("ParmDataType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmName {
            get {
                return this.ParmNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmNameField, value) != true)) {
                    this.ParmNameField = value;
                    this.RaisePropertyChanged("ParmName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ParmVal {
            get {
                return this.ParmValField;
            }
            set {
                if ((object.ReferenceEquals(this.ParmValField, value) != true)) {
                    this.ParmValField = value;
                    this.RaisePropertyChanged("ParmVal");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowCreationDate {
            get {
                return this.RowCreationDateField;
            }
            set {
                if ((this.RowCreationDateField.Equals(value) != true)) {
                    this.RowCreationDateField = value;
                    this.RaisePropertyChanged("RowCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowLastModDate {
            get {
                return this.RowLastModDateField;
            }
            set {
                if ((this.RowLastModDateField.Equals(value) != true)) {
                    this.RowLastModDateField = value;
                    this.RaisePropertyChanged("RowLastModDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNbr {
            get {
                return this.RowNbrField;
            }
            set {
                if ((this.RowNbrField.Equals(value) != true)) {
                    this.RowNbrField = value;
                    this.RaisePropertyChanged("RowNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenName {
            get {
                return this.ScreenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenNameField, value) != true)) {
                    this.ScreenNameField = value;
                    this.RaisePropertyChanged("ScreenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_clsUSERGRIDSTATE", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_clsUSERGRIDSTATE : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ColNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ColReadOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ColSortAscField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColSortOrderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ColVisibleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ColWidthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GridNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiveActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HiveConnectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowLastModDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ScreenNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ColName {
            get {
                return this.ColNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ColNameField, value) != true)) {
                    this.ColNameField = value;
                    this.RaisePropertyChanged("ColName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColOrder {
            get {
                return this.ColOrderField;
            }
            set {
                if ((this.ColOrderField.Equals(value) != true)) {
                    this.ColOrderField = value;
                    this.RaisePropertyChanged("ColOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ColReadOnly {
            get {
                return this.ColReadOnlyField;
            }
            set {
                if ((this.ColReadOnlyField.Equals(value) != true)) {
                    this.ColReadOnlyField = value;
                    this.RaisePropertyChanged("ColReadOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ColSortAsc {
            get {
                return this.ColSortAscField;
            }
            set {
                if ((this.ColSortAscField.Equals(value) != true)) {
                    this.ColSortAscField = value;
                    this.RaisePropertyChanged("ColSortAsc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColSortOrder {
            get {
                return this.ColSortOrderField;
            }
            set {
                if ((this.ColSortOrderField.Equals(value) != true)) {
                    this.ColSortOrderField = value;
                    this.RaisePropertyChanged("ColSortOrder");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ColVisible {
            get {
                return this.ColVisibleField;
            }
            set {
                if ((this.ColVisibleField.Equals(value) != true)) {
                    this.ColVisibleField = value;
                    this.RaisePropertyChanged("ColVisible");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ColWidth {
            get {
                return this.ColWidthField;
            }
            set {
                if ((this.ColWidthField.Equals(value) != true)) {
                    this.ColWidthField = value;
                    this.RaisePropertyChanged("ColWidth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GridName {
            get {
                return this.GridNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GridNameField, value) != true)) {
                    this.GridNameField = value;
                    this.RaisePropertyChanged("GridName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HiveActive {
            get {
                return this.HiveActiveField;
            }
            set {
                if ((this.HiveActiveField.Equals(value) != true)) {
                    this.HiveActiveField = value;
                    this.RaisePropertyChanged("HiveActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HiveConnectionName {
            get {
                return this.HiveConnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HiveConnectionNameField, value) != true)) {
                    this.HiveConnectionNameField = value;
                    this.RaisePropertyChanged("HiveConnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowCreationDate {
            get {
                return this.RowCreationDateField;
            }
            set {
                if ((this.RowCreationDateField.Equals(value) != true)) {
                    this.RowCreationDateField = value;
                    this.RaisePropertyChanged("RowCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowLastModDate {
            get {
                return this.RowLastModDateField;
            }
            set {
                if ((this.RowLastModDateField.Equals(value) != true)) {
                    this.RowLastModDateField = value;
                    this.RaisePropertyChanged("RowLastModDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowNbr {
            get {
                return this.RowNbrField;
            }
            set {
                if ((this.RowNbrField.Equals(value) != true)) {
                    this.RowNbrField = value;
                    this.RaisePropertyChanged("RowNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ScreenName {
            get {
                return this.ScreenNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ScreenNameField, value) != true)) {
                    this.ScreenNameField = value;
                    this.RaisePropertyChanged("ScreenName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_License", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_License : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AppliedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CompanyIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EncryptedLicenseField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int LicenseNbrField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseTextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LicenseTypeCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurchasedMachinesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PurchasedUsersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ServerNAMEField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SqlInstanceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportActiveDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SupportInactiveDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Applied {
            get {
                return this.AppliedField;
            }
            set {
                if ((object.ReferenceEquals(this.AppliedField, value) != true)) {
                    this.AppliedField = value;
                    this.RaisePropertyChanged("Applied");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CompanyID {
            get {
                return this.CompanyIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CompanyIDField, value) != true)) {
                    this.CompanyIDField = value;
                    this.RaisePropertyChanged("CompanyID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EncryptedLicense {
            get {
                return this.EncryptedLicenseField;
            }
            set {
                if ((object.ReferenceEquals(this.EncryptedLicenseField, value) != true)) {
                    this.EncryptedLicenseField = value;
                    this.RaisePropertyChanged("EncryptedLicense");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseID {
            get {
                return this.LicenseIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseIDField, value) != true)) {
                    this.LicenseIDField = value;
                    this.RaisePropertyChanged("LicenseID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int LicenseNbr {
            get {
                return this.LicenseNbrField;
            }
            set {
                if ((this.LicenseNbrField.Equals(value) != true)) {
                    this.LicenseNbrField = value;
                    this.RaisePropertyChanged("LicenseNbr");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseText {
            get {
                return this.LicenseTextField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseTextField, value) != true)) {
                    this.LicenseTextField = value;
                    this.RaisePropertyChanged("LicenseText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LicenseTypeCode {
            get {
                return this.LicenseTypeCodeField;
            }
            set {
                if ((object.ReferenceEquals(this.LicenseTypeCodeField, value) != true)) {
                    this.LicenseTypeCodeField = value;
                    this.RaisePropertyChanged("LicenseTypeCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineID {
            get {
                return this.MachineIDField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineIDField, value) != true)) {
                    this.MachineIDField = value;
                    this.RaisePropertyChanged("MachineID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PurchasedMachines {
            get {
                return this.PurchasedMachinesField;
            }
            set {
                if ((object.ReferenceEquals(this.PurchasedMachinesField, value) != true)) {
                    this.PurchasedMachinesField = value;
                    this.RaisePropertyChanged("PurchasedMachines");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PurchasedUsers {
            get {
                return this.PurchasedUsersField;
            }
            set {
                if ((object.ReferenceEquals(this.PurchasedUsersField, value) != true)) {
                    this.PurchasedUsersField = value;
                    this.RaisePropertyChanged("PurchasedUsers");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServerNAME {
            get {
                return this.ServerNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.ServerNAMEField, value) != true)) {
                    this.ServerNAMEField = value;
                    this.RaisePropertyChanged("ServerNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SqlInstanceName {
            get {
                return this.SqlInstanceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SqlInstanceNameField, value) != true)) {
                    this.SqlInstanceNameField = value;
                    this.RaisePropertyChanged("SqlInstanceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportActive {
            get {
                return this.SupportActiveField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportActiveField, value) != true)) {
                    this.SupportActiveField = value;
                    this.RaisePropertyChanged("SupportActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportActiveDate {
            get {
                return this.SupportActiveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportActiveDateField, value) != true)) {
                    this.SupportActiveDateField = value;
                    this.RaisePropertyChanged("SupportActiveDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SupportInactiveDate {
            get {
                return this.SupportInactiveDateField;
            }
            set {
                if ((object.ReferenceEquals(this.SupportInactiveDateField, value) != true)) {
                    this.SupportInactiveDateField = value;
                    this.RaisePropertyChanged("SupportInactiveDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_ZipFiles", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_ZipFiles : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool isParentField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceGuid {
            get {
                return this.SourceGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceGuidField, value) != true)) {
                    this.SourceGuidField = value;
                    this.RaisePropertyChanged("SourceGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceName {
            get {
                return this.SourceNameField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceNameField, value) != true)) {
                    this.SourceNameField = value;
                    this.RaisePropertyChanged("SourceName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool isParent {
            get {
                return this.isParentField;
            }
            set {
                if ((this.isParentField.Equals(value) != true)) {
                    this.isParentField = value;
                    this.RaisePropertyChanged("isParent");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_Metadata", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_Metadata : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AttributeValueField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeName {
            get {
                return this.AttributeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeNameField, value) != true)) {
                    this.AttributeNameField = value;
                    this.RaisePropertyChanged("AttributeName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AttributeValue {
            get {
                return this.AttributeValueField;
            }
            set {
                if ((object.ReferenceEquals(this.AttributeValueField, value) != true)) {
                    this.AttributeValueField = value;
                    this.RaisePropertyChanged("AttributeValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_ListOfStrings01", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_ListOfStrings01 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string strItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string strItem {
            get {
                return this.strItemField;
            }
            set {
                if ((object.ReferenceEquals(this.strItemField, value) != true)) {
                    this.strItemField = value;
                    this.RaisePropertyChanged("strItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_ListOfStrings02", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_ListOfStrings02 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string strItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string strItem {
            get {
                return this.strItemField;
            }
            set {
                if ((object.ReferenceEquals(this.strItemField, value) != true)) {
                    this.strItemField = value;
                    this.RaisePropertyChanged("strItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_ListOfStrings03", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_ListOfStrings03 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string strItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string strItem {
            get {
                return this.strItemField;
            }
            set {
                if ((object.ReferenceEquals(this.strItemField, value) != true)) {
                    this.strItemField = value;
                    this.RaisePropertyChanged("strItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_ListOfStrings04", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_ListOfStrings04 : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string strItemField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string strItem {
            get {
                return this.strItemField;
            }
            set {
                if ((object.ReferenceEquals(this.strItemField, value) != true)) {
                    this.strItemField = value;
                    this.RaisePropertyChanged("strItem");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_VLibraryUsers", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_VLibraryUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryOwnerUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryOwnerUserID {
            get {
                return this.LibraryOwnerUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryOwnerUserIDField, value) != true)) {
                    this.LibraryOwnerUserIDField = value;
                    this.RaisePropertyChanged("LibraryOwnerUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_CoOwner", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_CoOwner : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoOwnerIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CoOwnerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RowIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoOwnerID {
            get {
                return this.CoOwnerIDField;
            }
            set {
                if ((object.ReferenceEquals(this.CoOwnerIDField, value) != true)) {
                    this.CoOwnerIDField = value;
                    this.RaisePropertyChanged("CoOwnerID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CoOwnerName {
            get {
                return this.CoOwnerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CoOwnerNameField, value) != true)) {
                    this.CoOwnerNameField = value;
                    this.RaisePropertyChanged("CoOwnerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RowID {
            get {
                return this.RowIDField;
            }
            set {
                if ((this.RowIDField.Equals(value) != true)) {
                    this.RowIDField = value;
                    this.RaisePropertyChanged("RowID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_VUserGrid", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_VUserGrid : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ClientOnlyField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HiveActiveField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HiveConnectionNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RepoSvrNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowCreationDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime RowLastModDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserLoginIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isActiveField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Admin {
            get {
                return this.AdminField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminField, value) != true)) {
                    this.AdminField = value;
                    this.RaisePropertyChanged("Admin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ClientOnly {
            get {
                return this.ClientOnlyField;
            }
            set {
                if ((this.ClientOnlyField.Equals(value) != true)) {
                    this.ClientOnlyField = value;
                    this.RaisePropertyChanged("ClientOnly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EmailAddress {
            get {
                return this.EmailAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailAddressField, value) != true)) {
                    this.EmailAddressField = value;
                    this.RaisePropertyChanged("EmailAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HiveActive {
            get {
                return this.HiveActiveField;
            }
            set {
                if ((this.HiveActiveField.Equals(value) != true)) {
                    this.HiveActiveField = value;
                    this.RaisePropertyChanged("HiveActive");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HiveConnectionName {
            get {
                return this.HiveConnectionNameField;
            }
            set {
                if ((object.ReferenceEquals(this.HiveConnectionNameField, value) != true)) {
                    this.HiveConnectionNameField = value;
                    this.RaisePropertyChanged("HiveConnectionName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepoSvrName {
            get {
                return this.RepoSvrNameField;
            }
            set {
                if ((object.ReferenceEquals(this.RepoSvrNameField, value) != true)) {
                    this.RepoSvrNameField = value;
                    this.RaisePropertyChanged("RepoSvrName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowCreationDate {
            get {
                return this.RowCreationDateField;
            }
            set {
                if ((this.RowCreationDateField.Equals(value) != true)) {
                    this.RowCreationDateField = value;
                    this.RaisePropertyChanged("RowCreationDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime RowLastModDate {
            get {
                return this.RowLastModDateField;
            }
            set {
                if ((this.RowLastModDateField.Equals(value) != true)) {
                    this.RowLastModDateField = value;
                    this.RaisePropertyChanged("RowLastModDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserLoginID {
            get {
                return this.UserLoginIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserLoginIDField, value) != true)) {
                    this.UserLoginIDField = value;
                    this.RaisePropertyChanged("UserLoginID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isActive {
            get {
                return this.isActiveField;
            }
            set {
                if ((object.ReferenceEquals(this.isActiveField, value) != true)) {
                    this.isActiveField = value;
                    this.RaisePropertyChanged("isActive");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_DgGroupUsers", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_DgGroupUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool DeleteAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool FullAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool ReadOnlyAccessField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool SearchableField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool DeleteAccess {
            get {
                return this.DeleteAccessField;
            }
            set {
                if ((this.DeleteAccessField.Equals(value) != true)) {
                    this.DeleteAccessField = value;
                    this.RaisePropertyChanged("DeleteAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool FullAccess {
            get {
                return this.FullAccessField;
            }
            set {
                if ((this.FullAccessField.Equals(value) != true)) {
                    this.FullAccessField = value;
                    this.RaisePropertyChanged("FullAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool ReadOnlyAccess {
            get {
                return this.ReadOnlyAccessField;
            }
            set {
                if ((this.ReadOnlyAccessField.Equals(value) != true)) {
                    this.ReadOnlyAccessField = value;
                    this.RaisePropertyChanged("ReadOnlyAccess");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool Searchable {
            get {
                return this.SearchableField;
            }
            set {
                if ((this.SearchableField.Equals(value) != true)) {
                    this.SearchableField = value;
                    this.RaisePropertyChanged("Searchable");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_dgGrpUsers", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_dgGrpUsers : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_LibItems", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_LibItems : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AddedByUserGuidIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DataSourceOwnerUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemTitleField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ItemTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryItemGuidField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryOwnerUserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SourceGuidField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AddedByUserGuidId {
            get {
                return this.AddedByUserGuidIdField;
            }
            set {
                if ((object.ReferenceEquals(this.AddedByUserGuidIdField, value) != true)) {
                    this.AddedByUserGuidIdField = value;
                    this.RaisePropertyChanged("AddedByUserGuidId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DataSourceOwnerUserID {
            get {
                return this.DataSourceOwnerUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.DataSourceOwnerUserIDField, value) != true)) {
                    this.DataSourceOwnerUserIDField = value;
                    this.RaisePropertyChanged("DataSourceOwnerUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemTitle {
            get {
                return this.ItemTitleField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTitleField, value) != true)) {
                    this.ItemTitleField = value;
                    this.RaisePropertyChanged("ItemTitle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ItemType {
            get {
                return this.ItemTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ItemTypeField, value) != true)) {
                    this.ItemTypeField = value;
                    this.RaisePropertyChanged("ItemType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryItemGuid {
            get {
                return this.LibraryItemGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryItemGuidField, value) != true)) {
                    this.LibraryItemGuidField = value;
                    this.RaisePropertyChanged("LibraryItemGuid");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryOwnerUserID {
            get {
                return this.LibraryOwnerUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryOwnerUserIDField, value) != true)) {
                    this.LibraryOwnerUserIDField = value;
                    this.RaisePropertyChanged("LibraryOwnerUserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SourceGuid {
            get {
                return this.SourceGuidField;
            }
            set {
                if ((object.ReferenceEquals(this.SourceGuidField, value) != true)) {
                    this.SourceGuidField = value;
                    this.RaisePropertyChanged("SourceGuid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_DgAssigned", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_DgAssigned : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GroupOwnerUserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupName {
            get {
                return this.GroupNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupNameField, value) != true)) {
                    this.GroupNameField = value;
                    this.RaisePropertyChanged("GroupName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GroupOwnerUserID {
            get {
                return this.GroupOwnerUserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.GroupOwnerUserIDField, value) != true)) {
                    this.GroupOwnerUserIDField = value;
                    this.RaisePropertyChanged("GroupOwnerUserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DS_VLibraryStats", Namespace="http://schemas.datacontract.org/2004/07/EcmSearchSvc")]
    [System.SerializableAttribute()]
    public partial class DS_VLibraryStats : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ItemsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LibraryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int MembersField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string isPublicField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Items {
            get {
                return this.ItemsField;
            }
            set {
                if ((this.ItemsField.Equals(value) != true)) {
                    this.ItemsField = value;
                    this.RaisePropertyChanged("Items");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LibraryName {
            get {
                return this.LibraryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LibraryNameField, value) != true)) {
                    this.LibraryNameField = value;
                    this.RaisePropertyChanged("LibraryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Members {
            get {
                return this.MembersField;
            }
            set {
                if ((this.MembersField.Equals(value) != true)) {
                    this.MembersField = value;
                    this.RaisePropertyChanged("Members");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string isPublic {
            get {
                return this.isPublicField;
            }
            set {
                if ((object.ReferenceEquals(this.isPublicField, value) != true)) {
                    this.isPublicField = value;
                    this.RaisePropertyChanged("isPublic");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="SVCSearch.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setLoginGuid", ReplyAction="http://tempuri.org/IService1/setLoginGuidResponse")]
        void setLoginGuid(string SecureID, string MyLoginGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setLoginGuid", ReplyAction="http://tempuri.org/IService1/setLoginGuidResponse")]
        System.IAsyncResult BeginsetLoginGuid(string SecureID, string MyLoginGuid, System.AsyncCallback callback, object asyncState);
        
        void EndsetLoginGuid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLoginGuid", ReplyAction="http://tempuri.org/IService1/getLoginGuidResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getLoginGuid(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getLoginGuid", ReplyAction="http://tempuri.org/IService1/getLoginGuidResponse")]
        System.IAsyncResult BegingetLoginGuid(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetLoginGuid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getHttpSessionID", ReplyAction="http://tempuri.org/IService1/getHttpSessionIDResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getHttpSessionID(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getHttpSessionID", ReplyAction="http://tempuri.org/IService1/getHttpSessionIDResponse")]
        System.IAsyncResult BegingetHttpSessionID(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetHttpSessionID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setSessionID", ReplyAction="http://tempuri.org/IService1/setSessionIDResponse")]
        void setSessionID(string SecureID, string MySessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSessionID", ReplyAction="http://tempuri.org/IService1/setSessionIDResponse")]
        System.IAsyncResult BeginsetSessionID(string SecureID, string MySessionID, System.AsyncCallback callback, object asyncState);
        
        void EndsetSessionID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExpandInflectionTerms", ReplyAction="http://tempuri.org/IService1/ExpandInflectionTermsResponse")]
        string ExpandInflectionTerms(string SecureID, string S);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExpandInflectionTerms", ReplyAction="http://tempuri.org/IService1/ExpandInflectionTermsResponse")]
        System.IAsyncResult BeginExpandInflectionTerms(string SecureID, string S, System.AsyncCallback callback, object asyncState);
        
        string EndExpandInflectionTerms(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getServerDatabaseName", ReplyAction="http://tempuri.org/IService1/getServerDatabaseNameResponse")]
        string getServerDatabaseName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getServerDatabaseName", ReplyAction="http://tempuri.org/IService1/getServerDatabaseNameResponse")]
        System.IAsyncResult BegingetServerDatabaseName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetServerDatabaseName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CleanLog", ReplyAction="http://tempuri.org/IService1/CleanLogResponse")]
        void CleanLog(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/CleanLog", ReplyAction="http://tempuri.org/IService1/CleanLogResponse")]
        System.IAsyncResult BeginCleanLog(string SecureID, System.AsyncCallback callback, object asyncState);
        
        void EndCleanLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateComboBox", ReplyAction="http://tempuri.org/IService1/PopulateComboBoxResponse")]
        void PopulateComboBox(string SecureID, ref string[] CB, string TblColName, string S);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateComboBox", ReplyAction="http://tempuri.org/IService1/PopulateComboBoxResponse")]
        System.IAsyncResult BeginPopulateComboBox(string SecureID, ref string[] CB, string TblColName, string S, System.AsyncCallback callback, object asyncState);
        
        void EndPopulateComboBox(ref string[] CB, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetEmailAttachments", ReplyAction="http://tempuri.org/IService1/GetEmailAttachmentsResponse")]
        ECMSearchWPF.SVCSearch.DS_Attachments[] GetEmailAttachments(string SecureID, string CurrEmailGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetEmailAttachments", ReplyAction="http://tempuri.org/IService1/GetEmailAttachmentsResponse")]
        System.IAsyncResult BeginGetEmailAttachments(string SecureID, string CurrEmailGuid, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_Attachments[] EndGetEmailAttachments(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DbWriteToFile", ReplyAction="http://tempuri.org/IService1/DbWriteToFileResponse")]
        bool DbWriteToFile(string SecureID, string UID, string SourceGuid, ref string FileName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DbWriteToFile", ReplyAction="http://tempuri.org/IService1/DbWriteToFileResponse")]
        System.IAsyncResult BeginDbWriteToFile(string SecureID, string UID, string SourceGuid, ref string FileName, System.AsyncCallback callback, object asyncState);
        
        bool EndDbWriteToFile(ref string FileName, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetSessionVariable", ReplyAction="http://tempuri.org/IService1/SetSessionVariableResponse")]
        void SetSessionVariable(string SecureID, string key, string KeyValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SetSessionVariable", ReplyAction="http://tempuri.org/IService1/SetSessionVariableResponse")]
        System.IAsyncResult BeginSetSessionVariable(string SecureID, string key, string KeyValue, System.AsyncCallback callback, object asyncState);
        
        void EndSetSessionVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetSessionVariable", ReplyAction="http://tempuri.org/IService1/GetSessionVariableResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object GetSessionVariable(string SecureID, string key);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetSessionVariable", ReplyAction="http://tempuri.org/IService1/GetSessionVariableResponse")]
        System.IAsyncResult BeginGetSessionVariable(string SecureID, string key, System.AsyncCallback callback, object asyncState);
        
        object EndGetSessionVariable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UpdateSourceImageCompressed", ReplyAction="http://tempuri.org/IService1/UpdateSourceImageCompressedResponse")]
        bool UpdateSourceImageCompressed(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/UpdateSourceImageCompressed", ReplyAction="http://tempuri.org/IService1/UpdateSourceImageCompressedResponse")]
        System.IAsyncResult BeginUpdateSourceImageCompressed(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer, System.AsyncCallback callback, object asyncState);
        
        bool EndUpdateSourceImageCompressed(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/writeEmailFromDbToFile", ReplyAction="http://tempuri.org/IService1/writeEmailFromDbToFileResponse")]
        void writeEmailFromDbToFile(string SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/writeEmailFromDbToFile", ReplyAction="http://tempuri.org/IService1/writeEmailFromDbToFileResponse")]
        System.IAsyncResult BeginwriteEmailFromDbToFile(string SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndwriteEmailFromDbToFile(ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/writeAttachmentFromDbWriteToFile", ReplyAction="http://tempuri.org/IService1/writeAttachmentFromDbWriteToFileResponse")]
        void writeAttachmentFromDbWriteToFile(string SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/writeAttachmentFromDbWriteToFile", ReplyAction="http://tempuri.org/IService1/writeAttachmentFromDbWriteToFileResponse")]
        System.IAsyncResult BeginwriteAttachmentFromDbWriteToFile(string SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndwriteAttachmentFromDbWriteToFile(ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFile", ReplyAction="http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFileResponse")]
        void writeImageSourceDataFromDbWriteToFile(string SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFile", ReplyAction="http://tempuri.org/IService1/writeImageSourceDataFromDbWriteToFileResponse")]
        System.IAsyncResult BeginwriteImageSourceDataFromDbWriteToFile(string SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndwriteImageSourceDataFromDbWriteToFile(ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLibraryItems", ReplyAction="http://tempuri.org/IService1/AddLibraryItemsResponse")]
        void AddLibraryItems(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddLibraryItems", ReplyAction="http://tempuri.org/IService1/AddLibraryItemsResponse")]
        System.IAsyncResult BeginAddLibraryItems(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg, System.AsyncCallback callback, object asyncState);
        
        void EndAddLibraryItems(ref bool RC, ref string rMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateGroupUserLibCombo", ReplyAction="http://tempuri.org/IService1/PopulateGroupUserLibComboResponse")]
        void PopulateGroupUserLibCombo(string SecureID, string UID, ref string[] cb);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateGroupUserLibCombo", ReplyAction="http://tempuri.org/IService1/PopulateGroupUserLibComboResponse")]
        System.IAsyncResult BeginPopulateGroupUserLibCombo(string SecureID, string UID, ref string[] cb, System.AsyncCallback callback, object asyncState);
        
        void EndPopulateGroupUserLibCombo(ref string[] cb, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLibOwnerByName", ReplyAction="http://tempuri.org/IService1/GetLibOwnerByNameResponse")]
        string GetLibOwnerByName(string SecureID, string LibraryName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLibOwnerByName", ReplyAction="http://tempuri.org/IService1/GetLibOwnerByNameResponse")]
        System.IAsyncResult BeginGetLibOwnerByName(string SecureID, string LibraryName, System.AsyncCallback callback, object asyncState);
        
        string EndGetLibOwnerByName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSearch", ReplyAction="http://tempuri.org/IService1/ExecuteSearchResponse")]
        void ExecuteSearch(int iMaxRow, string SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSearch", ReplyAction="http://tempuri.org/IService1/ExecuteSearchResponse")]
        System.IAsyncResult BeginExecuteSearch(int iMaxRow, string SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt, System.AsyncCallback callback, object asyncState);
        
        void EndExecuteSearch(ref int currSearchCnt, ref string EmailGenSql, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSearchState", ReplyAction="http://tempuri.org/IService1/getSearchStateResponse")]
        ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] getSearchState(string SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSearchState", ReplyAction="http://tempuri.org/IService1/getSearchStateResponse")]
        System.IAsyncResult BegingetSearchState(string SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] EndgetSearchState(ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saveSearchState", ReplyAction="http://tempuri.org/IService1/saveSearchStateResponse")]
        void saveSearchState(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/saveSearchState", ReplyAction="http://tempuri.org/IService1/saveSearchStateResponse")]
        System.IAsyncResult BeginsaveSearchState(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState);
        
        void EndsaveSearchState(ref string rMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getScreenState", ReplyAction="http://tempuri.org/IService1/getScreenStateResponse")]
        ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] getScreenState(string SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getScreenState", ReplyAction="http://tempuri.org/IService1/getScreenStateResponse")]
        System.IAsyncResult BegingetScreenState(string SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] EndgetScreenState(ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getGridLayout", ReplyAction="http://tempuri.org/IService1/getGridLayoutResponse")]
        ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] getGridLayout(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getGridLayout", ReplyAction="http://tempuri.org/IService1/getGridLayoutResponse")]
        System.IAsyncResult BegingetGridLayout(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] EndgetGridLayout(ref string rMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saveGridLayout", ReplyAction="http://tempuri.org/IService1/saveGridLayoutResponse")]
        void saveGridLayout(
                    string SecureID, 
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/saveGridLayout", ReplyAction="http://tempuri.org/IService1/saveGridLayoutResponse")]
        System.IAsyncResult BeginsaveGridLayout(
                    string SecureID, 
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        void EndsaveGridLayout(
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg, 
                    System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saveScreenState", ReplyAction="http://tempuri.org/IService1/saveScreenStateResponse")]
        void saveScreenState(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/saveScreenState", ReplyAction="http://tempuri.org/IService1/saveScreenStateResponse")]
        System.IAsyncResult BeginsaveScreenState(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState);
        
        void EndsaveScreenState(ref string rMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserParms", ReplyAction="http://tempuri.org/IService1/getUserParmsResponse")]
        void getUserParms(string SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getUserParms", ReplyAction="http://tempuri.org/IService1/getUserParmsResponse")]
        System.IAsyncResult BegingetUserParms(string SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms, System.AsyncCallback callback, object asyncState);
        
        void EndgetUserParms(ref System.Collections.Generic.Dictionary<string, string> UserParms, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ParseLicDictionary", ReplyAction="http://tempuri.org/IService1/ParseLicDictionaryResponse")]
        void ParseLicDictionary(string SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ParseLicDictionary", ReplyAction="http://tempuri.org/IService1/ParseLicDictionaryResponse")]
        System.IAsyncResult BeginParseLicDictionary(string SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D, System.AsyncCallback callback, object asyncState);
        
        void EndParseLicDictionary(ref System.Collections.Generic.Dictionary<string, string> D, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LicenseType", ReplyAction="http://tempuri.org/IService1/LicenseTypeResponse")]
        string LicenseType(string SecureID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/LicenseType", ReplyAction="http://tempuri.org/IService1/LicenseTypeResponse")]
        System.IAsyncResult BeginLicenseType(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        string EndLicenseType(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNbrUsers", ReplyAction="http://tempuri.org/IService1/GetNbrUsersResponse")]
        int GetNbrUsers(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetNbrUsers", ReplyAction="http://tempuri.org/IService1/GetNbrUsersResponse")]
        System.IAsyncResult BeginGetNbrUsers(string SecureID, System.AsyncCallback callback, object asyncState);
        
        int EndGetNbrUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLease", ReplyAction="http://tempuri.org/IService1/isLeaseResponse")]
        bool isLease(string SecureID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/isLease", ReplyAction="http://tempuri.org/IService1/isLeaseResponse")]
        System.IAsyncResult BeginisLease(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndisLease(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getMaxClients", ReplyAction="http://tempuri.org/IService1/getMaxClientsResponse")]
        int getMaxClients(string SecureID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getMaxClients", ReplyAction="http://tempuri.org/IService1/getMaxClientsResponse")]
        System.IAsyncResult BegingetMaxClients(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        int EndgetMaxClients(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserHostName", ReplyAction="http://tempuri.org/IService1/GetUserHostNameResponse")]
        string GetUserHostName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUserHostName", ReplyAction="http://tempuri.org/IService1/GetUserHostNameResponse")]
        System.IAsyncResult BeginGetUserHostName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserHostName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUserHostAddress", ReplyAction="http://tempuri.org/IService1/GetUserHostAddressResponse")]
        string GetUserHostAddress(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetUserHostAddress", ReplyAction="http://tempuri.org/IService1/GetUserHostAddressResponse")]
        System.IAsyncResult BeginGetUserHostAddress(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserHostAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserGuidID", ReplyAction="http://tempuri.org/IService1/getUserGuidIDResponse")]
        string getUserGuidID(string SecureID, string UserLoginId);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getUserGuidID", ReplyAction="http://tempuri.org/IService1/getUserGuidIDResponse")]
        System.IAsyncResult BegingetUserGuidID(string SecureID, string UserLoginId, System.AsyncCallback callback, object asyncState);
        
        string EndgetUserGuidID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ProcessDates", ReplyAction="http://tempuri.org/IService1/ProcessDatesResponse")]
        System.Collections.Generic.Dictionary<string, System.DateTime> ProcessDates(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ProcessDates", ReplyAction="http://tempuri.org/IService1/ProcessDatesResponse")]
        System.IAsyncResult BeginProcessDates(string SecureID, System.AsyncCallback callback, object asyncState);
        
        System.Collections.Generic.Dictionary<string, System.DateTime> EndProcessDates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNbrMachineAll", ReplyAction="http://tempuri.org/IService1/GetNbrMachineAllResponse")]
        int GetNbrMachineAll(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetNbrMachineAll", ReplyAction="http://tempuri.org/IService1/GetNbrMachineAllResponse")]
        System.IAsyncResult BeginGetNbrMachineAll(string SecureID, System.AsyncCallback callback, object asyncState);
        
        int EndGetNbrMachineAll(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNbrMachine", ReplyAction="http://tempuri.org/IService1/GetNbrMachineResponse")]
        int GetNbrMachine(string SecureID, string MachineName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetNbrMachine", ReplyAction="http://tempuri.org/IService1/GetNbrMachineResponse")]
        System.IAsyncResult BeginGetNbrMachine(string SecureID, string MachineName, System.AsyncCallback callback, object asyncState);
        
        int EndGetNbrMachine(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachine", ReplyAction="http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachineResponse")]
        bool isLicenseLocatedOnAssignedMachine(string SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachine", ReplyAction="http://tempuri.org/IService1/isLicenseLocatedOnAssignedMachineResponse")]
        System.IAsyncResult BeginisLicenseLocatedOnAssignedMachine(string SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndisLicenseLocatedOnAssignedMachine(ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetXrt", ReplyAction="http://tempuri.org/IService1/GetXrtResponse")]
        string GetXrt(string SecureID, bool RC, string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetXrt", ReplyAction="http://tempuri.org/IService1/GetXrtResponse")]
        System.IAsyncResult BeginGetXrt(string SecureID, bool RC, string RetMsg, System.AsyncCallback callback, object asyncState);
        
        string EndGetXrt(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSqlServerVersion", ReplyAction="http://tempuri.org/IService1/getSqlServerVersionResponse")]
        string getSqlServerVersion(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSqlServerVersion", ReplyAction="http://tempuri.org/IService1/getSqlServerVersionResponse")]
        System.IAsyncResult BegingetSqlServerVersion(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetSqlServerVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecordGrowth", ReplyAction="http://tempuri.org/IService1/RecordGrowthResponse")]
        void RecordGrowth(string SecureID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RecordGrowth", ReplyAction="http://tempuri.org/IService1/RecordGrowthResponse")]
        System.IAsyncResult BeginRecordGrowth(string SecureID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndRecordGrowth(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ParseLic", ReplyAction="http://tempuri.org/IService1/ParseLicResponse")]
        string ParseLic(string SecureID, string LT, string tgtKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ParseLic", ReplyAction="http://tempuri.org/IService1/ParseLicResponse")]
        System.IAsyncResult BeginParseLic(string SecureID, string LT, string tgtKey, System.AsyncCallback callback, object asyncState);
        
        string EndParseLic(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLoggedinUserName", ReplyAction="http://tempuri.org/IService1/GetLoggedinUserNameResponse")]
        string GetLoggedinUserName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLoggedinUserName", ReplyAction="http://tempuri.org/IService1/GetLoggedinUserNameResponse")]
        System.IAsyncResult BeginGetLoggedinUserName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndGetLoggedinUserName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDBSIZEMB", ReplyAction="http://tempuri.org/IService1/getDBSIZEMBResponse")]
        double getDBSIZEMB(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getDBSIZEMB", ReplyAction="http://tempuri.org/IService1/getDBSIZEMBResponse")]
        System.IAsyncResult BegingetDBSIZEMB(string SecureID, System.AsyncCallback callback, object asyncState);
        
        double EndgetDBSIZEMB(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/resetMissingEmailIds", ReplyAction="http://tempuri.org/IService1/resetMissingEmailIdsResponse")]
        void resetMissingEmailIds(string SecureID, string CurrUserGuidID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/resetMissingEmailIds", ReplyAction="http://tempuri.org/IService1/resetMissingEmailIdsResponse")]
        System.IAsyncResult BeginresetMissingEmailIds(string SecureID, string CurrUserGuidID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndresetMissingEmailIds(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/UserParmInsertUpdate", ReplyAction="http://tempuri.org/IService1/UserParmInsertUpdateResponse")]
        void UserParmInsertUpdate(string SecureID, string ParmName, string UserID, string ParmVal, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/UserParmInsertUpdate", ReplyAction="http://tempuri.org/IService1/UserParmInsertUpdateResponse")]
        System.IAsyncResult BeginUserParmInsertUpdate(string SecureID, string ParmName, string UserID, string ParmVal, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndUserParmInsertUpdate(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateLogin", ReplyAction="http://tempuri.org/IService1/validateLoginResponse")]
        bool validateLogin(string SecureID, string UserLogin, string PW, ref string UserGuidID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/validateLogin", ReplyAction="http://tempuri.org/IService1/validateLoginResponse")]
        System.IAsyncResult BeginvalidateLogin(string SecureID, string UserLogin, string PW, ref string UserGuidID, System.AsyncCallback callback, object asyncState);
        
        bool EndvalidateLogin(ref string UserGuidID, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLoggedInUser", ReplyAction="http://tempuri.org/IService1/getLoggedInUserResponse")]
        string getLoggedInUser(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getLoggedInUser", ReplyAction="http://tempuri.org/IService1/getLoggedInUserResponse")]
        System.IAsyncResult BegingetLoggedInUser(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetLoggedInUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAttachedMachineName", ReplyAction="http://tempuri.org/IService1/getAttachedMachineNameResponse")]
        string getAttachedMachineName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getAttachedMachineName", ReplyAction="http://tempuri.org/IService1/getAttachedMachineNameResponse")]
        System.IAsyncResult BegingetAttachedMachineName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetAttachedMachineName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getServerInstanceName", ReplyAction="http://tempuri.org/IService1/getServerInstanceNameResponse")]
        string getServerInstanceName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getServerInstanceName", ReplyAction="http://tempuri.org/IService1/getServerInstanceNameResponse")]
        System.IAsyncResult BegingetServerInstanceName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetServerInstanceName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getServerMachineName", ReplyAction="http://tempuri.org/IService1/getServerMachineNameResponse")]
        string getServerMachineName(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getServerMachineName", ReplyAction="http://tempuri.org/IService1/getServerMachineNameResponse")]
        System.IAsyncResult BegingetServerMachineName(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndgetServerMachineName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSystemParm", ReplyAction="http://tempuri.org/IService1/getSystemParmResponse")]
        void getSystemParm(string SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSystemParm", ReplyAction="http://tempuri.org/IService1/getSystemParmResponse")]
        System.IAsyncResult BegingetSystemParm(string SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms, System.AsyncCallback callback, object asyncState);
        
        void EndgetSystemParm(ref System.Collections.Generic.Dictionary<string, string> SystemParms, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSynonyms", ReplyAction="http://tempuri.org/IService1/getSynonymsResponse")]
        string getSynonyms(string SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSynonyms", ReplyAction="http://tempuri.org/IService1/getSynonymsResponse")]
        System.IAsyncResult BegingetSynonyms(string SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms, System.AsyncCallback callback, object asyncState);
        
        string EndgetSynonyms(ref string[] lbSynonyms, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getThesaurusID", ReplyAction="http://tempuri.org/IService1/getThesaurusIDResponse")]
        string getThesaurusID(string SecureID, string ThesaurusName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getThesaurusID", ReplyAction="http://tempuri.org/IService1/getThesaurusIDResponse")]
        System.IAsyncResult BegingetThesaurusID(string SecureID, string ThesaurusName, System.AsyncCallback callback, object asyncState);
        
        string EndgetThesaurusID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/iCountContent", ReplyAction="http://tempuri.org/IService1/iCountContentResponse")]
        int iCountContent(string SecureID, string S);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/iCountContent", ReplyAction="http://tempuri.org/IService1/iCountContentResponse")]
        System.IAsyncResult BeginiCountContent(string SecureID, string S, System.AsyncCallback callback, object asyncState);
        
        int EndiCountContent(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDatasourceParm", ReplyAction="http://tempuri.org/IService1/getDatasourceParmResponse")]
        string getDatasourceParm(string SecureID, string AttributeName, string SourceGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getDatasourceParm", ReplyAction="http://tempuri.org/IService1/getDatasourceParmResponse")]
        System.IAsyncResult BegingetDatasourceParm(string SecureID, string AttributeName, string SourceGuid, System.AsyncCallback callback, object asyncState);
        
        string EndgetDatasourceParm(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveRunParm", ReplyAction="http://tempuri.org/IService1/SaveRunParmResponse")]
        bool SaveRunParm(string SecureID, string UserID, ref string ParmID, ref string ParmVal);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveRunParm", ReplyAction="http://tempuri.org/IService1/SaveRunParmResponse")]
        System.IAsyncResult BeginSaveRunParm(string SecureID, string UserID, ref string ParmID, ref string ParmVal, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveRunParm(ref string ParmID, ref string ParmVal, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/iGetRowCount", ReplyAction="http://tempuri.org/IService1/iGetRowCountResponse")]
        int iGetRowCount(string SecureID, string TBL, string WhereClause);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/iGetRowCount", ReplyAction="http://tempuri.org/IService1/iGetRowCountResponse")]
        System.IAsyncResult BeginiGetRowCount(string SecureID, string TBL, string WhereClause, System.AsyncCallback callback, object asyncState);
        
        int EndiGetRowCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ZeroizeGlobalSearch", ReplyAction="http://tempuri.org/IService1/ZeroizeGlobalSearchResponse")]
        bool ZeroizeGlobalSearch(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ZeroizeGlobalSearch", ReplyAction="http://tempuri.org/IService1/ZeroizeGlobalSearchResponse")]
        System.IAsyncResult BeginZeroizeGlobalSearch(string SecureID, System.AsyncCallback callback, object asyncState);
        
        bool EndZeroizeGlobalSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/updateIp", ReplyAction="http://tempuri.org/IService1/updateIpResponse")]
        void updateIp(string SecureID, string HostName, string IP, int checkCode, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/updateIp", ReplyAction="http://tempuri.org/IService1/updateIpResponse")]
        System.IAsyncResult BeginupdateIp(string SecureID, string HostName, string IP, int checkCode, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndupdateIp(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateSourceGridWithWeights", ReplyAction="http://tempuri.org/IService1/PopulateSourceGridWithWeightsResponse")]
        ECMSearchWPF.SVCSearch.DS_CONTENT[] PopulateSourceGridWithWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateSourceGridWithWeights", ReplyAction="http://tempuri.org/IService1/PopulateSourceGridWithWeightsResponse")]
        System.IAsyncResult BeginPopulateSourceGridWithWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_CONTENT[] EndPopulateSourceGridWithWeights(ref bool bNewRows, ref int SourceRowCnt, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateSourceGridNoWeights", ReplyAction="http://tempuri.org/IService1/PopulateSourceGridNoWeightsResponse")]
        ECMSearchWPF.SVCSearch.DS_CONTENT[] PopulateSourceGridNoWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateSourceGridNoWeights", ReplyAction="http://tempuri.org/IService1/PopulateSourceGridNoWeightsResponse")]
        System.IAsyncResult BeginPopulateSourceGridNoWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_CONTENT[] EndPopulateSourceGridNoWeights(ref bool bNewRows, ref int SourceRowCnt, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateEmailGridWithNoWeights", ReplyAction="http://tempuri.org/IService1/PopulateEmailGridWithNoWeightsResponse")]
        ECMSearchWPF.SVCSearch.DS_EMAIL[] PopulateEmailGridWithNoWeights(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateEmailGridWithNoWeights", ReplyAction="http://tempuri.org/IService1/PopulateEmailGridWithNoWeightsResponse")]
        System.IAsyncResult BeginPopulateEmailGridWithNoWeights(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_EMAIL[] EndPopulateEmailGridWithNoWeights(ref bool bNewRows, ref int EmailRowCnt, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateEmailGridWithWeights", ReplyAction="http://tempuri.org/IService1/PopulateEmailGridWithWeightsResponse")]
        ECMSearchWPF.SVCSearch.DS_EMAIL[] PopulateEmailGridWithWeights(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateEmailGridWithWeights", ReplyAction="http://tempuri.org/IService1/PopulateEmailGridWithWeightsResponse")]
        System.IAsyncResult BeginPopulateEmailGridWithWeights(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_EMAIL[] EndPopulateEmailGridWithWeights(ref bool bNewRows, ref int EmailRowCnt, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/LoadUserSearchHistory", ReplyAction="http://tempuri.org/IService1/LoadUserSearchHistoryResponse")]
        void LoadUserSearchHistory(string SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/LoadUserSearchHistory", ReplyAction="http://tempuri.org/IService1/LoadUserSearchHistoryResponse")]
        System.IAsyncResult BeginLoadUserSearchHistory(string SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned, System.AsyncCallback callback, object asyncState);
        
        void EndLoadUserSearchHistory(ref string[] SearchHistoryArrayList, ref int NbrReturned, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAttachmentWeights", ReplyAction="http://tempuri.org/IService1/getAttachmentWeightsResponse")]
        void getAttachmentWeights(string SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getAttachmentWeights", ReplyAction="http://tempuri.org/IService1/getAttachmentWeightsResponse")]
        System.IAsyncResult BegingetAttachmentWeights(string SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID, System.AsyncCallback callback, object asyncState);
        
        void EndgetAttachmentWeights(ref System.Collections.Generic.Dictionary<string, int> SL, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConn1", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn1Response")]
        bool ExecuteSqlNewConn1(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConn1", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn1Response")]
        System.IAsyncResult BeginExecuteSqlNewConn1(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConn1(ref string EncryptedMySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConn2", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn2Response")]
        bool ExecuteSqlNewConn2(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConn2", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn2Response")]
        System.IAsyncResult BeginExecuteSqlNewConn2(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConn2(ref string EncryptedMySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConn3", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn3Response")]
        bool ExecuteSqlNewConn3(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConn3", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn3Response")]
        System.IAsyncResult BeginExecuteSqlNewConn3(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConn3(ref string EncryptedMySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConn4", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn4Response")]
        bool ExecuteSqlNewConn4(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConn4", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn4Response")]
        System.IAsyncResult BeginExecuteSqlNewConn4(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConn4(ref string EncryptedMySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConn5", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn5Response")]
        bool ExecuteSqlNewConn5(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConn5", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConn5Response")]
        System.IAsyncResult BeginExecuteSqlNewConn5(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConn5(ref string EncryptedMySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlNewConnSecure", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConnSecureResponse")]
        bool ExecuteSqlNewConnSecure(string SecureID, string SID, ref string MySql, string UserID, string ContractID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlNewConnSecure", ReplyAction="http://tempuri.org/IService1/ExecuteSqlNewConnSecureResponse")]
        System.IAsyncResult BeginExecuteSqlNewConnSecure(string SecureID, string SID, ref string MySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlNewConnSecure(ref string MySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetParmValue", ReplyAction="http://tempuri.org/IService1/GetParmValueResponse")]
        void GetParmValue(string SecureID, string UID, ref string[] Parms);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetParmValue", ReplyAction="http://tempuri.org/IService1/GetParmValueResponse")]
        System.IAsyncResult BeginGetParmValue(string SecureID, string UID, ref string[] Parms, System.AsyncCallback callback, object asyncState);
        
        void EndGetParmValue(ref string[] Parms, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DBisGlobalSearcher", ReplyAction="http://tempuri.org/IService1/DBisGlobalSearcherResponse")]
        bool DBisGlobalSearcher(string SecureID, string Userid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DBisGlobalSearcher", ReplyAction="http://tempuri.org/IService1/DBisGlobalSearcherResponse")]
        System.IAsyncResult BeginDBisGlobalSearcher(string SecureID, string Userid, System.AsyncCallback callback, object asyncState);
        
        bool EndDBisGlobalSearcher(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DBisAdmin", ReplyAction="http://tempuri.org/IService1/DBisAdminResponse")]
        bool DBisAdmin(string SecureID, string Userid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DBisAdmin", ReplyAction="http://tempuri.org/IService1/DBisAdminResponse")]
        System.IAsyncResult BeginDBisAdmin(string SecureID, string Userid, System.AsyncCallback callback, object asyncState);
        
        bool EndDBisAdmin(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserParm", ReplyAction="http://tempuri.org/IService1/getUserParmResponse")]
        void getUserParm(string SecureID, ref string sVariable, string UserParm);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getUserParm", ReplyAction="http://tempuri.org/IService1/getUserParmResponse")]
        System.IAsyncResult BegingetUserParm(string SecureID, ref string sVariable, string UserParm, System.AsyncCallback callback, object asyncState);
        
        void EndgetUserParm(ref string sVariable, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveUnwantedCharacters", ReplyAction="http://tempuri.org/IService1/RemoveUnwantedCharactersResponse")]
        void RemoveUnwantedCharacters(string SecureID, ref string tgtString);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RemoveUnwantedCharacters", ReplyAction="http://tempuri.org/IService1/RemoveUnwantedCharactersResponse")]
        System.IAsyncResult BeginRemoveUnwantedCharacters(string SecureID, ref string tgtString, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveUnwantedCharacters(ref string tgtString, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMachineIP", ReplyAction="http://tempuri.org/IService1/GetMachineIPResponse")]
        string GetMachineIP(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetMachineIP", ReplyAction="http://tempuri.org/IService1/GetMachineIPResponse")]
        System.IAsyncResult BeginGetMachineIP(string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndGetMachineIP(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getClientLicenses", ReplyAction="http://tempuri.org/IService1/getClientLicensesResponse")]
        ECMSearchWPF.SVCSearch.DS_License[] getClientLicenses(string SecureID, string CompanyID, ref string ErrorMessage, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getClientLicenses", ReplyAction="http://tempuri.org/IService1/getClientLicensesResponse")]
        System.IAsyncResult BegingetClientLicenses(string SecureID, string CompanyID, ref string ErrorMessage, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_License[] EndgetClientLicenses(ref string ErrorMessage, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/cleanUpLibraryItems", ReplyAction="http://tempuri.org/IService1/cleanUpLibraryItemsResponse")]
        void cleanUpLibraryItems(string SecureID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/cleanUpLibraryItems", ReplyAction="http://tempuri.org/IService1/cleanUpLibraryItemsResponse")]
        System.IAsyncResult BegincleanUpLibraryItems(string SecureID, string UserID, System.AsyncCallback callback, object asyncState);
        
        void EndcleanUpLibraryItems(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CleanLogTable", ReplyAction="http://tempuri.org/IService1/CleanLogTableResponse")]
        bool CleanLogTable(int SecureID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/CleanLogTable", ReplyAction="http://tempuri.org/IService1/CleanLogTableResponse")]
        System.IAsyncResult BeginCleanLogTable(int SecureID, string UserID, System.AsyncCallback callback, object asyncState);
        
        bool EndCleanLogTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSecEndPoint", ReplyAction="http://tempuri.org/IService1/getSecEndPointResponse")]
        string getSecEndPoint();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSecEndPoint", ReplyAction="http://tempuri.org/IService1/getSecEndPointResponse")]
        System.IAsyncResult BegingetSecEndPoint(System.AsyncCallback callback, object asyncState);
        
        string EndgetSecEndPoint(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getContractID", ReplyAction="http://tempuri.org/IService1/getContractIDResponse")]
        string getContractID(string SecureID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getContractID", ReplyAction="http://tempuri.org/IService1/getContractIDResponse")]
        System.IAsyncResult BegingetContractID(string SecureID, string UserID, System.AsyncCallback callback, object asyncState);
        
        string EndgetContractID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGroupLibraryAccess", ReplyAction="http://tempuri.org/IService1/AddGroupLibraryAccessResponse")]
        void AddGroupLibraryAccess(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddGroupLibraryAccess", ReplyAction="http://tempuri.org/IService1/AddGroupLibraryAccessResponse")]
        System.IAsyncResult BeginAddGroupLibraryAccess(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState);
        
        void EndAddGroupLibraryAccess(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddGroupUser", ReplyAction="http://tempuri.org/IService1/AddGroupUserResponse")]
        bool AddGroupUser(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddGroupUser", ReplyAction="http://tempuri.org/IService1/AddGroupUserResponse")]
        System.IAsyncResult BeginAddGroupUser(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection, System.AsyncCallback callback, object asyncState);
        
        bool EndAddGroupUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DecryptPhrase", ReplyAction="http://tempuri.org/IService1/DecryptPhraseResponse")]
        string DecryptPhrase(string SecureID, string SID, string Phrase, string shiftKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DecryptPhrase", ReplyAction="http://tempuri.org/IService1/DecryptPhraseResponse")]
        System.IAsyncResult BeginDecryptPhrase(string SecureID, string SID, string Phrase, string shiftKey, System.AsyncCallback callback, object asyncState);
        
        string EndDecryptPhrase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/EncryptPhrase", ReplyAction="http://tempuri.org/IService1/EncryptPhraseResponse")]
        string EncryptPhrase(string SecureID, string SID, string Phrase, string shiftKey);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/EncryptPhrase", ReplyAction="http://tempuri.org/IService1/EncryptPhraseResponse")]
        System.IAsyncResult BeginEncryptPhrase(string SecureID, string SID, string Phrase, string shiftKey, System.AsyncCallback callback, object asyncState);
        
        string EndEncryptPhrase(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DBExecuteEncryptedSql", ReplyAction="http://tempuri.org/IService1/DBExecuteEncryptedSqlResponse")]
        bool DBExecuteEncryptedSql(string SecureID, ref string MySql, string EKEY);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DBExecuteEncryptedSql", ReplyAction="http://tempuri.org/IService1/DBExecuteEncryptedSqlResponse")]
        System.IAsyncResult BeginDBExecuteEncryptedSql(string SecureID, ref string MySql, string EKEY, System.AsyncCallback callback, object asyncState);
        
        bool EndDBExecuteEncryptedSql(ref string MySql, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/validateAttachSecureLogin", ReplyAction="http://tempuri.org/IService1/validateAttachSecureLoginResponse")]
        bool validateAttachSecureLogin(ref string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/validateAttachSecureLogin", ReplyAction="http://tempuri.org/IService1/validateAttachSecureLoginResponse")]
        System.IAsyncResult BeginvalidateAttachSecureLogin(ref string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS, System.AsyncCallback callback, object asyncState);
        
        bool EndvalidateAttachSecureLogin(ref string SecureID, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetXrtTest", ReplyAction="http://tempuri.org/IService1/GetXrtTestResponse")]
        string GetXrtTest(System.DateTime dt);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetXrtTest", ReplyAction="http://tempuri.org/IService1/GetXrtTestResponse")]
        System.IAsyncResult BeginGetXrtTest(System.DateTime dt, System.AsyncCallback callback, object asyncState);
        
        string EndGetXrtTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ckContentFlags", ReplyAction="http://tempuri.org/IService1/ckContentFlagsResponse")]
        void ckContentFlags(string SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ckContentFlags", ReplyAction="http://tempuri.org/IService1/ckContentFlagsResponse")]
        System.IAsyncResult BeginckContentFlags(string SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic, System.AsyncCallback callback, object asyncState);
        
        void EndckContentFlags(ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getCustomerLogoTitle", ReplyAction="http://tempuri.org/IService1/getCustomerLogoTitleResponse")]
        string getCustomerLogoTitle();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getCustomerLogoTitle", ReplyAction="http://tempuri.org/IService1/getCustomerLogoTitleResponse")]
        System.IAsyncResult BegingetCustomerLogoTitle(System.AsyncCallback callback, object asyncState);
        
        string EndgetCustomerLogoTitle(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getAffinitydelay", ReplyAction="http://tempuri.org/IService1/getAffinitydelayResponse")]
        int getAffinitydelay();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getAffinitydelay", ReplyAction="http://tempuri.org/IService1/getAffinitydelayResponse")]
        System.IAsyncResult BegingetAffinitydelay(System.AsyncCallback callback, object asyncState);
        
        int EndgetAffinitydelay(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getClcURL", ReplyAction="http://tempuri.org/IService1/getClcURLResponse")]
        string getClcURL();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getClcURL", ReplyAction="http://tempuri.org/IService1/getClcURLResponse")]
        System.IAsyncResult BegingetClcURL(System.AsyncCallback callback, object asyncState);
        
        string EndgetClcURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getArchiverURL", ReplyAction="http://tempuri.org/IService1/getArchiverURLResponse")]
        string getArchiverURL();
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getArchiverURL", ReplyAction="http://tempuri.org/IService1/getArchiverURLResponse")]
        System.IAsyncResult BegingetArchiverURL(System.AsyncCallback callback, object asyncState);
        
        string EndgetArchiverURL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ExecuteSqlStack", ReplyAction="http://tempuri.org/IService1/ExecuteSqlStackResponse")]
        bool ExecuteSqlStack(string SecureID, ref System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ExecuteSqlStack", ReplyAction="http://tempuri.org/IService1/ExecuteSqlStackResponse")]
        System.IAsyncResult BeginExecuteSqlStack(string SecureID, ref System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState);
        
        bool EndExecuteSqlStack(ref System.Collections.Generic.Dictionary<int, string> SqlStack, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getDefaultScreen", ReplyAction="http://tempuri.org/IService1/getDefaultScreenResponse")]
        string getDefaultScreen(string SecureID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getDefaultScreen", ReplyAction="http://tempuri.org/IService1/getDefaultScreenResponse")]
        System.IAsyncResult BegingetDefaultScreen(string SecureID, string UserID, System.AsyncCallback callback, object asyncState);
        
        string EndgetDefaultScreen(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RecallUserSearch", ReplyAction="http://tempuri.org/IService1/RecallUserSearchResponse")]
        bool RecallUserSearch(string SecureID, string SearchName, string UID, ref string strSearches);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RecallUserSearch", ReplyAction="http://tempuri.org/IService1/RecallUserSearchResponse")]
        System.IAsyncResult BeginRecallUserSearch(string SecureID, string SearchName, string UID, ref string strSearches, System.AsyncCallback callback, object asyncState);
        
        bool EndRecallUserSearch(ref string strSearches, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveUserSearch", ReplyAction="http://tempuri.org/IService1/SaveUserSearchResponse")]
        bool SaveUserSearch(string SecureID, string SearchName, string UID, string strSearches);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveUserSearch", ReplyAction="http://tempuri.org/IService1/SaveUserSearchResponse")]
        System.IAsyncResult BeginSaveUserSearch(string SecureID, string SearchName, string UID, string strSearches, System.AsyncCallback callback, object asyncState);
        
        bool EndSaveUserSearch(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFilesInZip", ReplyAction="http://tempuri.org/IService1/GetFilesInZipResponse")]
        ECMSearchWPF.SVCSearch.DS_ZipFiles[] GetFilesInZip(string SecureID, string ParentGuid, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetFilesInZip", ReplyAction="http://tempuri.org/IService1/GetFilesInZipResponse")]
        System.IAsyncResult BeginGetFilesInZip(string SecureID, string ParentGuid, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_ZipFiles[] EndGetFilesInZip(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/scheduleFileDownLoad", ReplyAction="http://tempuri.org/IService1/scheduleFileDownLoadResponse")]
        bool scheduleFileDownLoad(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/scheduleFileDownLoad", ReplyAction="http://tempuri.org/IService1/scheduleFileDownLoadResponse")]
        System.IAsyncResult BeginscheduleFileDownLoad(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore, System.AsyncCallback callback, object asyncState);
        
        bool EndscheduleFileDownLoad(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetContentMetaData", ReplyAction="http://tempuri.org/IService1/GetContentMetaDataResponse")]
        ECMSearchWPF.SVCSearch.DS_Metadata[] GetContentMetaData(string SecureID, string SourceGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetContentMetaData", ReplyAction="http://tempuri.org/IService1/GetContentMetaDataResponse")]
        System.IAsyncResult BeginGetContentMetaData(string SecureID, string SourceGuid, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_Metadata[] EndGetContentMetaData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeRestoreFileByGuid", ReplyAction="http://tempuri.org/IService1/removeRestoreFileByGuidResponse")]
        bool removeRestoreFileByGuid(string SecureID, string RowGuid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/removeRestoreFileByGuid", ReplyAction="http://tempuri.org/IService1/removeRestoreFileByGuidResponse")]
        System.IAsyncResult BeginremoveRestoreFileByGuid(string SecureID, string RowGuid, System.AsyncCallback callback, object asyncState);
        
        bool EndremoveRestoreFileByGuid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeRestoreFiles", ReplyAction="http://tempuri.org/IService1/removeRestoreFilesResponse")]
        bool removeRestoreFiles(string SecureID, ref string UserID, ref string MachineID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/removeRestoreFiles", ReplyAction="http://tempuri.org/IService1/removeRestoreFilesResponse")]
        System.IAsyncResult BeginremoveRestoreFiles(string SecureID, ref string UserID, ref string MachineID, System.AsyncCallback callback, object asyncState);
        
        bool EndremoveRestoreFiles(ref string UserID, ref string MachineID, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getRestoreFileCount", ReplyAction="http://tempuri.org/IService1/getRestoreFileCountResponse")]
        int getRestoreFileCount(string SecureID, ref string UserID, ref string MachineID, ref bool Preview);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getRestoreFileCount", ReplyAction="http://tempuri.org/IService1/getRestoreFileCountResponse")]
        System.IAsyncResult BegingetRestoreFileCount(string SecureID, ref string UserID, ref string MachineID, ref bool Preview, System.AsyncCallback callback, object asyncState);
        
        int EndgetRestoreFileCount(ref string UserID, ref string MachineID, ref bool Preview, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saveRestoreFile", ReplyAction="http://tempuri.org/IService1/saveRestoreFileResponse")]
        bool saveRestoreFile(string SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/saveRestoreFile", ReplyAction="http://tempuri.org/IService1/saveRestoreFileResponse")]
        System.IAsyncResult BeginsaveRestoreFile(string SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndsaveRestoreFile(ref string ContentGuid, ref string UserID, ref string MachineID, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQL", ReplyAction="http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQLResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        string GenEmailAttachmentsGeneratedSQL(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQL", ReplyAction="http://tempuri.org/IService1/GenEmailAttachmentsGeneratedSQLResponse")]
        System.IAsyncResult BeginGenEmailAttachmentsGeneratedSQL(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy, System.AsyncCallback callback, object asyncState);
        
        string EndGenEmailAttachmentsGeneratedSQL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenEmailGeneratedSQL", ReplyAction="http://tempuri.org/IService1/GenEmailGeneratedSQLResponse")]
        string GenEmailGeneratedSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GenEmailGeneratedSQL", ReplyAction="http://tempuri.org/IService1/GenEmailGeneratedSQLResponse")]
        System.IAsyncResult BeginGenEmailGeneratedSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, System.AsyncCallback callback, object asyncState);
        
        string EndGenEmailGeneratedSQL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GenContentSearchSQL", ReplyAction="http://tempuri.org/IService1/GenContentSearchSQLResponse")]
        string GenContentSearchSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GenContentSearchSQL", ReplyAction="http://tempuri.org/IService1/GenContentSearchSQLResponse")]
        System.IAsyncResult BeginGenContentSearchSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted, System.AsyncCallback callback, object asyncState);
        
        string EndGenContentSearchSQL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeUserContentPublic", ReplyAction="http://tempuri.org/IService1/ChangeUserContentPublicResponse")]
        void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ChangeUserContentPublic", ReplyAction="http://tempuri.org/IService1/ChangeUserContentPublicResponse")]
        System.IAsyncResult BeginChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndChangeUserContentPublic(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/Refactor", ReplyAction="http://tempuri.org/IService1/RefactorResponse")]
        void Refactor(string SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/Refactor", ReplyAction="http://tempuri.org/IService1/RefactorResponse")]
        System.IAsyncResult BeginRefactor(string SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndRefactor(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSAASState", ReplyAction="http://tempuri.org/IService1/getSAASStateResponse")]
        string getSAASState(string SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSAASState", ReplyAction="http://tempuri.org/IService1/getSAASStateResponse")]
        System.IAsyncResult BegingetSAASState(string SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        string EndgetSAASState(ref string RetMsg, ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SetSAASState", ReplyAction="http://tempuri.org/IService1/SetSAASStateResponse")]
        bool SetSAASState(string SecureID, string UserID, string DirName, string FullPath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SetSAASState", ReplyAction="http://tempuri.org/IService1/SetSAASStateResponse")]
        System.IAsyncResult BeginSetSAASState(string SecureID, string UserID, string DirName, string FullPath, System.AsyncCallback callback, object asyncState);
        
        bool EndSetSAASState(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings01", ReplyAction="http://tempuri.org/IService1/getListOfStrings01Response")]
        ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] getListOfStrings01(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings01", ReplyAction="http://tempuri.org/IService1/getListOfStrings01Response")]
        System.IAsyncResult BegingetListOfStrings01(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] EndgetListOfStrings01(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings02", ReplyAction="http://tempuri.org/IService1/getListOfStrings02Response")]
        ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] getListOfStrings02(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings02", ReplyAction="http://tempuri.org/IService1/getListOfStrings02Response")]
        System.IAsyncResult BegingetListOfStrings02(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] EndgetListOfStrings02(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings03", ReplyAction="http://tempuri.org/IService1/getListOfStrings03Response")]
        ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] getListOfStrings03(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings03", ReplyAction="http://tempuri.org/IService1/getListOfStrings03Response")]
        System.IAsyncResult BegingetListOfStrings03(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] EndgetListOfStrings03(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings04", ReplyAction="http://tempuri.org/IService1/getListOfStrings04Response")]
        ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] getListOfStrings04(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings04", ReplyAction="http://tempuri.org/IService1/getListOfStrings04Response")]
        System.IAsyncResult BegingetListOfStrings04(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] EndgetListOfStrings04(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateLibraryUsersGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibraryUsersGridResponse")]
        ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] PopulateLibraryUsersGrid(string SecureID, string LibraryName, bool ckLibUsersOnly);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateLibraryUsersGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibraryUsersGridResponse")]
        System.IAsyncResult BeginPopulateLibraryUsersGrid(string SecureID, string LibraryName, bool ckLibUsersOnly, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] EndPopulateLibraryUsersGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserAuth", ReplyAction="http://tempuri.org/IService1/getUserAuthResponse")]
        string getUserAuth(string SecureID, string Userid);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getUserAuth", ReplyAction="http://tempuri.org/IService1/getUserAuthResponse")]
        System.IAsyncResult BegingetUserAuth(string SecureID, string Userid, System.AsyncCallback callback, object asyncState);
        
        string EndgetUserAuth(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        bool DeleteUser(string SecureID, string SelectedUserGuid, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteUser", ReplyAction="http://tempuri.org/IService1/DeleteUserResponse")]
        System.IAsyncResult BeginDeleteUser(string SecureID, string SelectedUserGuid, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteUser(ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveUSer", ReplyAction="http://tempuri.org/IService1/SaveUSerResponse")]
        bool SaveUSer(
                    string SecureID, 
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveUSer", ReplyAction="http://tempuri.org/IService1/SaveUSerResponse")]
        System.IAsyncResult BeginSaveUSer(
                    string SecureID, 
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndSaveUSer(
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/saveSearchSchedule", ReplyAction="http://tempuri.org/IService1/saveSearchScheduleResponse")]
        bool saveSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/saveSearchSchedule", ReplyAction="http://tempuri.org/IService1/saveSearchScheduleResponse")]
        System.IAsyncResult BeginsaveSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndsaveSearchSchedule(
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSearchSchedule", ReplyAction="http://tempuri.org/IService1/getSearchScheduleResponse")]
        bool getSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSearchSchedule", ReplyAction="http://tempuri.org/IService1/getSearchScheduleResponse")]
        System.IAsyncResult BegingetSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState);
        
        bool EndgetSearchSchedule(
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/InsertCoOwner", ReplyAction="http://tempuri.org/IService1/InsertCoOwnerResponse")]
        bool InsertCoOwner(string SecureID, string CurrentOwner, string CoOwner);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/InsertCoOwner", ReplyAction="http://tempuri.org/IService1/InsertCoOwnerResponse")]
        System.IAsyncResult BeginInsertCoOwner(string SecureID, string CurrentOwner, string CoOwner, System.AsyncCallback callback, object asyncState);
        
        bool EndInsertCoOwner(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateCoOwnerGrid", ReplyAction="http://tempuri.org/IService1/PopulateCoOwnerGridResponse")]
        ECMSearchWPF.SVCSearch.DS_CoOwner[] PopulateCoOwnerGrid(string SecureID, string UID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateCoOwnerGrid", ReplyAction="http://tempuri.org/IService1/PopulateCoOwnerGridResponse")]
        System.IAsyncResult BeginPopulateCoOwnerGrid(string SecureID, string UID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_CoOwner[] EndPopulateCoOwnerGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateUserGrid", ReplyAction="http://tempuri.org/IService1/PopulateUserGridResponse")]
        ECMSearchWPF.SVCSearch.DS_VUserGrid[] PopulateUserGrid(string SecureID, string UserID, bool DBisAdmin);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateUserGrid", ReplyAction="http://tempuri.org/IService1/PopulateUserGridResponse")]
        System.IAsyncResult BeginPopulateUserGrid(string SecureID, string UserID, bool DBisAdmin, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_VUserGrid[] EndPopulateUserGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getGroupUsers", ReplyAction="http://tempuri.org/IService1/getGroupUsersResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        void getGroupUsers(string SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getGroupUsers", ReplyAction="http://tempuri.org/IService1/getGroupUsersResponse")]
        System.IAsyncResult BegingetGroupUsers(string SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndgetGroupUsers(ref object[] GroupList, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateDgGroupUsers", ReplyAction="http://tempuri.org/IService1/PopulateDgGroupUsersResponse")]
        ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] PopulateDgGroupUsers(string SecureID, string OwnerUserGuidID, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateDgGroupUsers", ReplyAction="http://tempuri.org/IService1/PopulateDgGroupUsersResponse")]
        System.IAsyncResult BeginPopulateDgGroupUsers(string SecureID, string OwnerUserGuidID, string GroupName, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] EndPopulateDgGroupUsers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteGroupUsers", ReplyAction="http://tempuri.org/IService1/DeleteGroupUsersResponse")]
        bool DeleteGroupUsers(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteGroupUsers", ReplyAction="http://tempuri.org/IService1/DeleteGroupUsersResponse")]
        System.IAsyncResult BeginDeleteGroupUsers(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        bool EndDeleteGroupUsers(ref int iDeleted, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getGroupOwnerGuidByGroupName", ReplyAction="http://tempuri.org/IService1/getGroupOwnerGuidByGroupNameResponse")]
        string getGroupOwnerGuidByGroupName(string SecureID, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getGroupOwnerGuidByGroupName", ReplyAction="http://tempuri.org/IService1/getGroupOwnerGuidByGroupNameResponse")]
        System.IAsyncResult BegingetGroupOwnerGuidByGroupName(string SecureID, string GroupName, System.AsyncCallback callback, object asyncState);
        
        string EndgetGroupOwnerGuidByGroupName(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLibraryGroupUser", ReplyAction="http://tempuri.org/IService1/AddLibraryGroupUserResponse")]
        void AddLibraryGroupUser(string SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddLibraryGroupUser", ReplyAction="http://tempuri.org/IService1/AddLibraryGroupUserResponse")]
        System.IAsyncResult BeginAddLibraryGroupUser(string SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState);
        
        void EndAddLibraryGroupUser(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateGroupUserGrid", ReplyAction="http://tempuri.org/IService1/PopulateGroupUserGridResponse")]
        ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] PopulateGroupUserGrid(string SecureID, string GroupName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateGroupUserGrid", ReplyAction="http://tempuri.org/IService1/PopulateGroupUserGridResponse")]
        System.IAsyncResult BeginPopulateGroupUserGrid(string SecureID, string GroupName, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] EndPopulateGroupUserGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateLibItemsGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibItemsGridResponse")]
        ECMSearchWPF.SVCSearch.DS_LibItems[] PopulateLibItemsGrid(string SecureID, string LibraryName, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateLibItemsGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibItemsGridResponse")]
        System.IAsyncResult BeginPopulateLibItemsGrid(string SecureID, string LibraryName, string UserID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_LibItems[] EndPopulateLibItemsGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateDgAssigned", ReplyAction="http://tempuri.org/IService1/PopulateDgAssignedResponse")]
        ECMSearchWPF.SVCSearch.DS_DgAssigned[] PopulateDgAssigned(string SecureID, string LibraryName, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateDgAssigned", ReplyAction="http://tempuri.org/IService1/PopulateDgAssignedResponse")]
        System.IAsyncResult BeginPopulateDgAssigned(string SecureID, string LibraryName, string UserID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_DgAssigned[] EndPopulateDgAssigned(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ResetLibraryUsersCount", ReplyAction="http://tempuri.org/IService1/ResetLibraryUsersCountResponse")]
        void ResetLibraryUsersCount(string SecureID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ResetLibraryUsersCount", ReplyAction="http://tempuri.org/IService1/ResetLibraryUsersCountResponse")]
        System.IAsyncResult BeginResetLibraryUsersCount(string SecureID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndResetLibraryUsersCount(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/DeleteLibraryGroupUser", ReplyAction="http://tempuri.org/IService1/DeleteLibraryGroupUserResponse")]
        void DeleteLibraryGroupUser(string SecureID, string GroupName, string LibraryName, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/DeleteLibraryGroupUser", ReplyAction="http://tempuri.org/IService1/DeleteLibraryGroupUserResponse")]
        System.IAsyncResult BeginDeleteLibraryGroupUser(string SecureID, string GroupName, string LibraryName, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndDeleteLibraryGroupUser(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ChangeUserPassword", ReplyAction="http://tempuri.org/IService1/ChangeUserPasswordResponse")]
        bool ChangeUserPassword(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ChangeUserPassword", ReplyAction="http://tempuri.org/IService1/ChangeUserPasswordResponse")]
        System.IAsyncResult BeginChangeUserPassword(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2, System.AsyncCallback callback, object asyncState);
        
        bool EndChangeUserPassword(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/SaveClickStats", ReplyAction="http://tempuri.org/IService1/SaveClickStatsResponse")]
        void SaveClickStats(string SecureID, int IID, string UserID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/SaveClickStats", ReplyAction="http://tempuri.org/IService1/SaveClickStatsResponse")]
        System.IAsyncResult BeginSaveClickStats(string SecureID, int IID, string UserID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndSaveClickStats(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveLibraryDirectories", ReplyAction="http://tempuri.org/IService1/RemoveLibraryDirectoriesResponse")]
        void RemoveLibraryDirectories(string SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RemoveLibraryDirectories", ReplyAction="http://tempuri.org/IService1/RemoveLibraryDirectoriesResponse")]
        System.IAsyncResult BeginRemoveLibraryDirectories(string SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveLibraryDirectories(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/RemoveLibraryEmails", ReplyAction="http://tempuri.org/IService1/RemoveLibraryEmailsResponse")]
        void RemoveLibraryEmails(string SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/RemoveLibraryEmails", ReplyAction="http://tempuri.org/IService1/RemoveLibraryEmailsResponse")]
        System.IAsyncResult BeginRemoveLibraryEmails(string SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndRemoveLibraryEmails(ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddSysMsg", ReplyAction="http://tempuri.org/IService1/AddSysMsgResponse")]
        void AddSysMsg(string SecureID, string UserID, string tMsg, bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddSysMsg", ReplyAction="http://tempuri.org/IService1/AddSysMsgResponse")]
        System.IAsyncResult BeginAddSysMsg(string SecureID, string UserID, string tMsg, bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndAddSysMsg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLibraryDirectory", ReplyAction="http://tempuri.org/IService1/AddLibraryDirectoryResponse")]
        void AddLibraryDirectory(string SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddLibraryDirectory", ReplyAction="http://tempuri.org/IService1/AddLibraryDirectoryResponse")]
        System.IAsyncResult BeginAddLibraryDirectory(string SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndAddLibraryDirectory(ref int RecordsAdded, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddLibraryEmail", ReplyAction="http://tempuri.org/IService1/AddLibraryEmailResponse")]
        void AddLibraryEmail(string SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/AddLibraryEmail", ReplyAction="http://tempuri.org/IService1/AddLibraryEmailResponse")]
        System.IAsyncResult BeginAddLibraryEmail(string SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndAddLibraryEmail(ref int RecordsAdded, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateLibraryGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibraryGridResponse")]
        ECMSearchWPF.SVCSearch.DS_VLibraryStats[] PopulateLibraryGrid(string SecureID, string UserID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateLibraryGrid", ReplyAction="http://tempuri.org/IService1/PopulateLibraryGridResponse")]
        System.IAsyncResult BeginPopulateLibraryGrid(string SecureID, string UserID, System.AsyncCallback callback, object asyncState);
        
        ECMSearchWPF.SVCSearch.DS_VLibraryStats[] EndPopulateLibraryGrid(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings", ReplyAction="http://tempuri.org/IService1/getListOfStringsResponse")]
        bool getListOfStrings(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings", ReplyAction="http://tempuri.org/IService1/getListOfStringsResponse")]
        System.IAsyncResult BegingetListOfStrings(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndgetListOfStrings(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings1", ReplyAction="http://tempuri.org/IService1/getListOfStrings1Response")]
        bool getListOfStrings1(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings1", ReplyAction="http://tempuri.org/IService1/getListOfStrings1Response")]
        System.IAsyncResult BegingetListOfStrings1(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndgetListOfStrings1(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings2", ReplyAction="http://tempuri.org/IService1/getListOfStrings2Response")]
        bool getListOfStrings2(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings2", ReplyAction="http://tempuri.org/IService1/getListOfStrings2Response")]
        System.IAsyncResult BegingetListOfStrings2(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndgetListOfStrings2(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings3", ReplyAction="http://tempuri.org/IService1/getListOfStrings3Response")]
        bool getListOfStrings3(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings3", ReplyAction="http://tempuri.org/IService1/getListOfStrings3Response")]
        System.IAsyncResult BegingetListOfStrings3(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndgetListOfStrings3(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getListOfStrings4", ReplyAction="http://tempuri.org/IService1/getListOfStrings4Response")]
        bool getListOfStrings4(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getListOfStrings4", ReplyAction="http://tempuri.org/IService1/getListOfStrings4Response")]
        System.IAsyncResult BegingetListOfStrings4(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState);
        
        bool EndgetListOfStrings4(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/iCount", ReplyAction="http://tempuri.org/IService1/iCountResponse")]
        int iCount(string SecureID, string S);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/iCount", ReplyAction="http://tempuri.org/IService1/iCountResponse")]
        System.IAsyncResult BeginiCount(string SecureID, string S, System.AsyncCallback callback, object asyncState);
        
        int EndiCount(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetLogPath", ReplyAction="http://tempuri.org/IService1/GetLogPathResponse")]
        void GetLogPath(ref string tPath);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/GetLogPath", ReplyAction="http://tempuri.org/IService1/GetLogPathResponse")]
        System.IAsyncResult BeginGetLogPath(ref string tPath, System.AsyncCallback callback, object asyncState);
        
        void EndGetLogPath(ref string tPath, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActiveSessionGetVal", ReplyAction="http://tempuri.org/IService1/ActiveSessionGetValResponse")]
        string ActiveSessionGetVal(string SecureID, ref System.Guid SessionGuid, ref string ParmName);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ActiveSessionGetVal", ReplyAction="http://tempuri.org/IService1/ActiveSessionGetValResponse")]
        System.IAsyncResult BeginActiveSessionGetVal(string SecureID, ref System.Guid SessionGuid, ref string ParmName, System.AsyncCallback callback, object asyncState);
        
        string EndActiveSessionGetVal(ref System.Guid SessionGuid, ref string ParmName, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/ActiveSession", ReplyAction="http://tempuri.org/IService1/ActiveSessionResponse")]
        bool ActiveSession(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/ActiveSession", ReplyAction="http://tempuri.org/IService1/ActiveSessionResponse")]
        System.IAsyncResult BeginActiveSession(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue, System.AsyncCallback callback, object asyncState);
        
        bool EndActiveSession(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setSecureLoginParms", ReplyAction="http://tempuri.org/IService1/setSecureLoginParmsResponse")]
        void setSecureLoginParms(string SecureID, string sCompanyID, string sRepoID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSecureLoginParms", ReplyAction="http://tempuri.org/IService1/setSecureLoginParmsResponse")]
        System.IAsyncResult BeginsetSecureLoginParms(string SecureID, string sCompanyID, string sRepoID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndsetSecureLoginParms(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateSecureLoginCB_V2", ReplyAction="http://tempuri.org/IService1/PopulateSecureLoginCB_V2Response")]
        void PopulateSecureLoginCB_V2(string SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateSecureLoginCB_V2", ReplyAction="http://tempuri.org/IService1/PopulateSecureLoginCB_V2Response")]
        System.IAsyncResult BeginPopulateSecureLoginCB_V2(string SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndPopulateSecureLoginCB_V2(ref string AllRepos, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/PopulateSecureLoginCB", ReplyAction="http://tempuri.org/IService1/PopulateSecureLoginCBResponse")]
        void PopulateSecureLoginCB(string SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/PopulateSecureLoginCB", ReplyAction="http://tempuri.org/IService1/PopulateSecureLoginCBResponse")]
        System.IAsyncResult BeginPopulateSecureLoginCB(string SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState);
        
        void EndPopulateSecureLoginCB(ref string[] CB, ref bool RC, ref string RetMsg, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getLoginPW", ReplyAction="http://tempuri.org/IService1/getLoginPWResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getLoginPW(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getLoginPW", ReplyAction="http://tempuri.org/IService1/getLoginPWResponse")]
        System.IAsyncResult BegingetLoginPW(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetLoginPW(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setLoginPW", ReplyAction="http://tempuri.org/IService1/setLoginPWResponse")]
        void setLoginPW(string SecureID, string RepoID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setLoginPW", ReplyAction="http://tempuri.org/IService1/setLoginPWResponse")]
        System.IAsyncResult BeginsetLoginPW(string SecureID, string RepoID, System.AsyncCallback callback, object asyncState);
        
        void EndsetLoginPW(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSessionEncCs", ReplyAction="http://tempuri.org/IService1/getSessionEncCsResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getSessionEncCs(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSessionEncCs", ReplyAction="http://tempuri.org/IService1/getSessionEncCsResponse")]
        System.IAsyncResult BegingetSessionEncCs(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetSessionEncCs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setSessionEncCs", ReplyAction="http://tempuri.org/IService1/setSessionEncCsResponse")]
        void setSessionEncCs(string SecureID, string MySessionID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSessionEncCs", ReplyAction="http://tempuri.org/IService1/setSessionEncCsResponse")]
        System.IAsyncResult BeginsetSessionEncCs(string SecureID, string MySessionID, System.AsyncCallback callback, object asyncState);
        
        void EndsetSessionEncCs(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setSessionRepoID", ReplyAction="http://tempuri.org/IService1/setSessionRepoIDResponse")]
        void setSessionRepoID(string SecureID, string RepoID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSessionRepoID", ReplyAction="http://tempuri.org/IService1/setSessionRepoIDResponse")]
        System.IAsyncResult BeginsetSessionRepoID(string SecureID, string RepoID, System.AsyncCallback callback, object asyncState);
        
        void EndsetSessionRepoID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSessionRepoID", ReplyAction="http://tempuri.org/IService1/getSessionRepoIDResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getSessionRepoID(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSessionRepoID", ReplyAction="http://tempuri.org/IService1/getSessionRepoIDResponse")]
        System.IAsyncResult BegingetSessionRepoID(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetSessionRepoID(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/setSessionCompanyID", ReplyAction="http://tempuri.org/IService1/setSessionCompanyIDResponse")]
        void setSessionCompanyID(string SecureID, string CompanyID, ref bool RC);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/setSessionCompanyID", ReplyAction="http://tempuri.org/IService1/setSessionCompanyIDResponse")]
        System.IAsyncResult BeginsetSessionCompanyID(string SecureID, string CompanyID, ref bool RC, System.AsyncCallback callback, object asyncState);
        
        void EndsetSessionCompanyID(ref bool RC, System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getSessionCompanyID", ReplyAction="http://tempuri.org/IService1/getSessionCompanyIDResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(string[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, System.DateTime>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<string, int>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<int, string>))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(object[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Attachments))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_SearchTerms))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_EMAIL))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CONTENT))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_License))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ZipFiles))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_Metadata))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings01))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings02))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings03))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_ListOfStrings04))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_CoOwner))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VUserGrid))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgGroupUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_dgGrpUsers))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_LibItems))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_DgAssigned))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats[]))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(ECMSearchWPF.SVCSearch.DS_VLibraryStats))]
        object getSessionCompanyID(string SecureID);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService1/getSessionCompanyID", ReplyAction="http://tempuri.org/IService1/getSessionCompanyIDResponse")]
        System.IAsyncResult BegingetSessionCompanyID(string SecureID, System.AsyncCallback callback, object asyncState);
        
        object EndgetSessionCompanyID(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : ECMSearchWPF.SVCSearch.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLoginGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLoginGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getHttpSessionIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getHttpSessionIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExpandInflectionTermsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExpandInflectionTermsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getServerDatabaseNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getServerDatabaseNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateComboBoxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateComboBoxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] CB {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetEmailAttachmentsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetEmailAttachmentsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_Attachments[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_Attachments[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DbWriteToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DbWriteToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string FileName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetSessionVariableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetSessionVariableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateSourceImageCompressedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateSourceImageCompressedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class writeEmailFromDbToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public writeEmailFromDbToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string SourceTypeCode {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public byte[] CompressedDataBuffer {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        public int OriginalSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public int CompressedSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class writeAttachmentFromDbWriteToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public writeAttachmentFromDbWriteToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string FQN {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public byte[] CompressedDataBuffer {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        public int OriginalSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public int CompressedSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class writeImageSourceDataFromDbWriteToFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public writeImageSourceDataFromDbWriteToFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string FQN {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public byte[] CompressedDataBuffer {
            get {
                base.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[1]));
            }
        }
        
        public int OriginalSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
        
        public int CompressedSize {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLibraryItemsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLibraryItemsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateGroupUserLibComboCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateGroupUserLibComboCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] cb {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLibOwnerByNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLibOwnerByNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int currSearchCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string EmailGenSql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string ContentGenSql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_EMAIL[])(this.results[3]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_CONTENT[])(this.results[4]));
            }
        }
        
        public bool bFirstEmailSearchSubmit {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        public bool bFirstContentSearchSubmit {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        public int EmailRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[7]));
            }
        }
        
        public int ContentRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSearchStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSearchStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> DICT {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[])(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveSearchStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveSearchStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getScreenStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getScreenStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> DICT {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[])(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getGridLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getGridLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveGridLayoutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveGridLayoutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string UserID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string ScreenName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string GridName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string ColName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public int ColOrder {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[4]));
            }
        }
        
        public int ColWidth {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[5]));
            }
        }
        
        public bool ColVisible {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
        
        public bool ColReadOnly {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
        
        public int ColSortOrder {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[8]));
            }
        }
        
        public bool ColSortAsc {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[9]));
            }
        }
        
        public string HiveConnectionName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        public bool HiveActive {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[11]));
            }
        }
        
        public string RepoSvrName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[12]));
            }
        }
        
        public System.DateTime RowCreationDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[13]));
            }
        }
        
        public System.DateTime RowLastModDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[14]));
            }
        }
        
        public int RowNbr {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[15]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[16]));
            }
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[17]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveScreenStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveScreenStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string rMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserParmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserParmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> UserParms {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ParseLicDictionaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ParseLicDictionaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> D {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LicenseTypeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LicenseTypeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNbrUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNbrUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class isLeaseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public isLeaseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMaxClientsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMaxClientsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserHostNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserHostNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserHostAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserHostAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserGuidIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserGuidIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ProcessDatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ProcessDatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, System.DateTime> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, System.DateTime>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNbrMachineAllCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNbrMachineAllCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetNbrMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetNbrMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class isLicenseLocatedOnAssignedMachineCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public isLicenseLocatedOnAssignedMachineCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ServerValText {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string InstanceValText {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXrtCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXrtCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSqlServerVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSqlServerVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecordGrowthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecordGrowthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ParseLicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ParseLicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLoggedinUserNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLoggedinUserNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDBSIZEMBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDBSIZEMBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class resetMissingEmailIdsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public resetMissingEmailIdsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UserParmInsertUpdateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UserParmInsertUpdateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class validateLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public validateLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string UserGuidID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLoggedInUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLoggedInUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAttachedMachineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAttachedMachineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getServerInstanceNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getServerInstanceNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getServerMachineNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getServerMachineNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSystemParmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSystemParmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, string> SystemParms {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSynonymsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSynonymsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] lbSynonyms {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getThesaurusIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getThesaurusIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iCountContentCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public iCountContentCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDatasourceParmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDatasourceParmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveRunParmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveRunParmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ParmID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string ParmVal {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iGetRowCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public iGetRowCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ZeroizeGlobalSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ZeroizeGlobalSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class updateIpCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public updateIpCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateSourceGridWithWeightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateSourceGridWithWeightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool bNewRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int SourceRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_CONTENT[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateSourceGridNoWeightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateSourceGridNoWeightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool bNewRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int SourceRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_CONTENT[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateEmailGridWithNoWeightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateEmailGridWithNoWeightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool bNewRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int EmailRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_EMAIL[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateEmailGridWithWeightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateEmailGridWithWeightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool bNewRows {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public int EmailRowCnt {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_EMAIL[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LoadUserSearchHistoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public LoadUserSearchHistoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] SearchHistoryArrayList {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public int NbrReturned {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAttachmentWeightsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAttachmentWeightsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<string, int> SL {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<string, int>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConn1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConn1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string EncryptedMySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConn2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConn2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string EncryptedMySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConn3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConn3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string EncryptedMySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConn4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConn4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string EncryptedMySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConn5CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConn5CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string EncryptedMySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlNewConnSecureCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlNewConnSecureCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string MySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetParmValueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetParmValueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] Parms {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBisGlobalSearcherCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DBisGlobalSearcherCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBisAdminCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DBisAdminCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserParmCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserParmCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string sVariable {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveUnwantedCharactersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveUnwantedCharactersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string tgtString {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetMachineIPCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetMachineIPCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClientLicensesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClientLicensesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ErrorMessage {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_License[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_License[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CleanLogTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CleanLogTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSecEndPointCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSecEndPointCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getContractIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getContractIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddGroupLibraryAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddGroupLibraryAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DecryptPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DecryptPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class EncryptPhraseCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public EncryptPhraseCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DBExecuteEncryptedSqlCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DBExecuteEncryptedSqlCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string MySql {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class validateAttachSecureLoginCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public validateAttachSecureLoginCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string SecureID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string GateWayEndPoint {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string DownloadEndpoint {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public string ENCCS {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetXrtTestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetXrtTestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ckContentFlagsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ckContentFlagsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool SD {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public bool SP {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public bool SAP {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public bool bMaster {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        public bool RSS {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
        
        public bool WEB {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[5]));
            }
        }
        
        public bool bPublic {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[6]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getCustomerLogoTitleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getCustomerLogoTitleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getAffinitydelayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getAffinitydelayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getClcURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getClcURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getArchiverURLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getArchiverURLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteSqlStackCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ExecuteSqlStackCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.Generic.Dictionary<int, string> SqlStack {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.Generic.Dictionary<int, string>)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getDefaultScreenCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getDefaultScreenCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RecallUserSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RecallUserSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string strSearches {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUserSearchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUserSearchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFilesInZipCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFilesInZipCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_ZipFiles[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_ZipFiles[])(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class scheduleFileDownLoadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public scheduleFileDownLoadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetContentMetaDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetContentMetaDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_Metadata[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_Metadata[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class removeRestoreFileByGuidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeRestoreFileByGuidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class removeRestoreFilesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public removeRestoreFilesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string UserID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string MachineID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getRestoreFileCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getRestoreFileCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string UserID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string MachineID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Preview {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveRestoreFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveRestoreFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string ContentGuid {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string UserID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string MachineID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[4]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenEmailAttachmentsGeneratedSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenEmailAttachmentsGeneratedSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenEmailGeneratedSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenEmailGeneratedSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GenContentSearchSQLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GenContentSearchSQLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserContentPublicCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserContentPublicCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RefactorCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RefactorCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSAASStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSAASStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SetSAASStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SetSAASStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings01CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings01CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_ListOfStrings01[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings02CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings02CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_ListOfStrings02[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings03CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings03CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_ListOfStrings03[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings04CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings04CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_ListOfStrings04[])(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateLibraryUsersGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateLibraryUsersGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_VLibraryUsers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getUserAuthCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getUserAuthCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveUSerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveUSerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string UserID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string UserName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string EmailAddress {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string UserPassword {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string Admin {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public string isActive {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        public string UserLoginID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        public bool ClientOnly {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[7]));
            }
        }
        
        public string HiveConnectionName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        public bool HiveActive {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[9]));
            }
        }
        
        public string RepoSvrName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        public System.DateTime RowCreationDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[11]));
            }
        }
        
        public System.DateTime RowLastModDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[12]));
            }
        }
        
        public string ActiveGuid {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        public string RepoName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[14]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[15]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[16]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[17]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class saveSearchScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public saveSearchScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string SearchName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string NotificationSMS {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string SearchDesc {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string OwnerID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string SearchQuery {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public string SendToEmail {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        public string ScheduleUnit {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        public string ScheduleHour {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        public string ScheduleDaysOfWeek {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        public string ScheduleDaysOfMonth {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        public string ScheduleMonthOfQtr {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        public System.DateTime StartToRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[11]));
            }
        }
        
        public System.DateTime EndRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[12]));
            }
        }
        
        public string SearchParameters {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        public System.DateTime LastRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[14]));
            }
        }
        
        public int NumberOfExecutions {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[15]));
            }
        }
        
        public System.DateTime CreateDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[16]));
            }
        }
        
        public System.DateTime LastModDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[17]));
            }
        }
        
        public int ScheduleHourInterval {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[18]));
            }
        }
        
        public string RepoName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[20]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[22]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSearchScheduleCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSearchScheduleCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string SearchName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public string NotificationSMS {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string SearchDesc {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public string OwnerID {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[3]));
            }
        }
        
        public string SearchQuery {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        public string SendToEmail {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        public string ScheduleUnit {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
        
        public string ScheduleHour {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[7]));
            }
        }
        
        public string ScheduleDaysOfWeek {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[8]));
            }
        }
        
        public string ScheduleDaysOfMonth {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[9]));
            }
        }
        
        public string ScheduleMonthOfQtr {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[10]));
            }
        }
        
        public System.DateTime StartToRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[11]));
            }
        }
        
        public System.DateTime EndRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[12]));
            }
        }
        
        public string SearchParameters {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[13]));
            }
        }
        
        public System.DateTime LastRunDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[14]));
            }
        }
        
        public int NumberOfExecutions {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[15]));
            }
        }
        
        public System.DateTime CreateDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[16]));
            }
        }
        
        public System.DateTime LastModDate {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[17]));
            }
        }
        
        public int ScheduleHourInterval {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[18]));
            }
        }
        
        public string RepoName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[19]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[20]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[21]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[22]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class InsertCoOwnerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public InsertCoOwnerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateCoOwnerGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateCoOwnerGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_CoOwner[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_CoOwner[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateUserGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateUserGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_VUserGrid[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_VUserGrid[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getGroupUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getGroupUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object[] GroupList {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateDgGroupUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateDgGroupUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_DgGroupUsers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteGroupUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteGroupUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int iDeleted {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getGroupOwnerGuidByGroupNameCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getGroupOwnerGuidByGroupNameCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLibraryGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLibraryGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateGroupUserGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateGroupUserGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_dgGrpUsers[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateLibItemsGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateLibItemsGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_LibItems[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_LibItems[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateDgAssignedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateDgAssignedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_DgAssigned[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_DgAssigned[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ResetLibraryUsersCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ResetLibraryUsersCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteLibraryGroupUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteLibraryGroupUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ChangeUserPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ChangeUserPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveClickStatsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveClickStatsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveLibraryDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveLibraryDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveLibraryEmailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveLibraryEmailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLibraryDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLibraryDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int RecordsAdded {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddLibraryEmailCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddLibraryEmailCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int RecordsAdded {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateLibraryGridCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateLibraryGridCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public ECMSearchWPF.SVCSearch.DS_VLibraryStats[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((ECMSearchWPF.SVCSearch.DS_VLibraryStats[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStringsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStringsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] ListOfItems {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings1CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings1CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] ListOfItems {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] ListOfItems {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings3CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings3CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] ListOfItems {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getListOfStrings4CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getListOfStrings4CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] ListOfItems {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class iCountCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public iCountCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLogPathCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLogPathCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string tPath {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActiveSessionGetValCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ActiveSessionGetValCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Guid SessionGuid {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Guid)(this.results[0]));
            }
        }
        
        public string ParmName {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ActiveSessionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ActiveSessionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setSecureLoginParmsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setSecureLoginParmsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateSecureLoginCB_V2CompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateSecureLoginCB_V2CompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string AllRepos {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PopulateSecureLoginCBCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PopulateSecureLoginCBCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string[] CB {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[1]));
            }
        }
        
        public string RetMsg {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getLoginPWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getLoginPWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSessionEncCsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSessionEncCsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSessionRepoIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSessionRepoIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class setSessionCompanyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public setSessionCompanyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool RC {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getSessionCompanyIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getSessionCompanyIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public object Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((object)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<ECMSearchWPF.SVCSearch.IService1>, ECMSearchWPF.SVCSearch.IService1 {
        
        private BeginOperationDelegate onBeginsetLoginGuidDelegate;
        
        private EndOperationDelegate onEndsetLoginGuidDelegate;
        
        private System.Threading.SendOrPostCallback onsetLoginGuidCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLoginGuidDelegate;
        
        private EndOperationDelegate onEndgetLoginGuidDelegate;
        
        private System.Threading.SendOrPostCallback ongetLoginGuidCompletedDelegate;
        
        private BeginOperationDelegate onBegingetHttpSessionIDDelegate;
        
        private EndOperationDelegate onEndgetHttpSessionIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetHttpSessionIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSessionIDDelegate;
        
        private EndOperationDelegate onEndsetSessionIDDelegate;
        
        private System.Threading.SendOrPostCallback onsetSessionIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginExpandInflectionTermsDelegate;
        
        private EndOperationDelegate onEndExpandInflectionTermsDelegate;
        
        private System.Threading.SendOrPostCallback onExpandInflectionTermsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServerDatabaseNameDelegate;
        
        private EndOperationDelegate onEndgetServerDatabaseNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetServerDatabaseNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginCleanLogDelegate;
        
        private EndOperationDelegate onEndCleanLogDelegate;
        
        private System.Threading.SendOrPostCallback onCleanLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateComboBoxDelegate;
        
        private EndOperationDelegate onEndPopulateComboBoxDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateComboBoxCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetEmailAttachmentsDelegate;
        
        private EndOperationDelegate onEndGetEmailAttachmentsDelegate;
        
        private System.Threading.SendOrPostCallback onGetEmailAttachmentsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDbWriteToFileDelegate;
        
        private EndOperationDelegate onEndDbWriteToFileDelegate;
        
        private System.Threading.SendOrPostCallback onDbWriteToFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetSessionVariableDelegate;
        
        private EndOperationDelegate onEndSetSessionVariableDelegate;
        
        private System.Threading.SendOrPostCallback onSetSessionVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetSessionVariableDelegate;
        
        private EndOperationDelegate onEndGetSessionVariableDelegate;
        
        private System.Threading.SendOrPostCallback onGetSessionVariableCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateSourceImageCompressedDelegate;
        
        private EndOperationDelegate onEndUpdateSourceImageCompressedDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateSourceImageCompressedCompletedDelegate;
        
        private BeginOperationDelegate onBeginwriteEmailFromDbToFileDelegate;
        
        private EndOperationDelegate onEndwriteEmailFromDbToFileDelegate;
        
        private System.Threading.SendOrPostCallback onwriteEmailFromDbToFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginwriteAttachmentFromDbWriteToFileDelegate;
        
        private EndOperationDelegate onEndwriteAttachmentFromDbWriteToFileDelegate;
        
        private System.Threading.SendOrPostCallback onwriteAttachmentFromDbWriteToFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginwriteImageSourceDataFromDbWriteToFileDelegate;
        
        private EndOperationDelegate onEndwriteImageSourceDataFromDbWriteToFileDelegate;
        
        private System.Threading.SendOrPostCallback onwriteImageSourceDataFromDbWriteToFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLibraryItemsDelegate;
        
        private EndOperationDelegate onEndAddLibraryItemsDelegate;
        
        private System.Threading.SendOrPostCallback onAddLibraryItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateGroupUserLibComboDelegate;
        
        private EndOperationDelegate onEndPopulateGroupUserLibComboDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateGroupUserLibComboCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLibOwnerByNameDelegate;
        
        private EndOperationDelegate onEndGetLibOwnerByNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetLibOwnerByNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSearchDelegate;
        
        private EndOperationDelegate onEndExecuteSearchDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSearchCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSearchStateDelegate;
        
        private EndOperationDelegate onEndgetSearchStateDelegate;
        
        private System.Threading.SendOrPostCallback ongetSearchStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveSearchStateDelegate;
        
        private EndOperationDelegate onEndsaveSearchStateDelegate;
        
        private System.Threading.SendOrPostCallback onsaveSearchStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetScreenStateDelegate;
        
        private EndOperationDelegate onEndgetScreenStateDelegate;
        
        private System.Threading.SendOrPostCallback ongetScreenStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetGridLayoutDelegate;
        
        private EndOperationDelegate onEndgetGridLayoutDelegate;
        
        private System.Threading.SendOrPostCallback ongetGridLayoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveGridLayoutDelegate;
        
        private EndOperationDelegate onEndsaveGridLayoutDelegate;
        
        private System.Threading.SendOrPostCallback onsaveGridLayoutCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveScreenStateDelegate;
        
        private EndOperationDelegate onEndsaveScreenStateDelegate;
        
        private System.Threading.SendOrPostCallback onsaveScreenStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserParmsDelegate;
        
        private EndOperationDelegate onEndgetUserParmsDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserParmsCompletedDelegate;
        
        private BeginOperationDelegate onBeginParseLicDictionaryDelegate;
        
        private EndOperationDelegate onEndParseLicDictionaryDelegate;
        
        private System.Threading.SendOrPostCallback onParseLicDictionaryCompletedDelegate;
        
        private BeginOperationDelegate onBeginLicenseTypeDelegate;
        
        private EndOperationDelegate onEndLicenseTypeDelegate;
        
        private System.Threading.SendOrPostCallback onLicenseTypeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNbrUsersDelegate;
        
        private EndOperationDelegate onEndGetNbrUsersDelegate;
        
        private System.Threading.SendOrPostCallback onGetNbrUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginisLeaseDelegate;
        
        private EndOperationDelegate onEndisLeaseDelegate;
        
        private System.Threading.SendOrPostCallback onisLeaseCompletedDelegate;
        
        private BeginOperationDelegate onBegingetMaxClientsDelegate;
        
        private EndOperationDelegate onEndgetMaxClientsDelegate;
        
        private System.Threading.SendOrPostCallback ongetMaxClientsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserHostNameDelegate;
        
        private EndOperationDelegate onEndGetUserHostNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserHostNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserHostAddressDelegate;
        
        private EndOperationDelegate onEndGetUserHostAddressDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserHostAddressCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserGuidIDDelegate;
        
        private EndOperationDelegate onEndgetUserGuidIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserGuidIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginProcessDatesDelegate;
        
        private EndOperationDelegate onEndProcessDatesDelegate;
        
        private System.Threading.SendOrPostCallback onProcessDatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNbrMachineAllDelegate;
        
        private EndOperationDelegate onEndGetNbrMachineAllDelegate;
        
        private System.Threading.SendOrPostCallback onGetNbrMachineAllCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetNbrMachineDelegate;
        
        private EndOperationDelegate onEndGetNbrMachineDelegate;
        
        private System.Threading.SendOrPostCallback onGetNbrMachineCompletedDelegate;
        
        private BeginOperationDelegate onBeginisLicenseLocatedOnAssignedMachineDelegate;
        
        private EndOperationDelegate onEndisLicenseLocatedOnAssignedMachineDelegate;
        
        private System.Threading.SendOrPostCallback onisLicenseLocatedOnAssignedMachineCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXrtDelegate;
        
        private EndOperationDelegate onEndGetXrtDelegate;
        
        private System.Threading.SendOrPostCallback onGetXrtCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSqlServerVersionDelegate;
        
        private EndOperationDelegate onEndgetSqlServerVersionDelegate;
        
        private System.Threading.SendOrPostCallback ongetSqlServerVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecordGrowthDelegate;
        
        private EndOperationDelegate onEndRecordGrowthDelegate;
        
        private System.Threading.SendOrPostCallback onRecordGrowthCompletedDelegate;
        
        private BeginOperationDelegate onBeginParseLicDelegate;
        
        private EndOperationDelegate onEndParseLicDelegate;
        
        private System.Threading.SendOrPostCallback onParseLicCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLoggedinUserNameDelegate;
        
        private EndOperationDelegate onEndGetLoggedinUserNameDelegate;
        
        private System.Threading.SendOrPostCallback onGetLoggedinUserNameCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDBSIZEMBDelegate;
        
        private EndOperationDelegate onEndgetDBSIZEMBDelegate;
        
        private System.Threading.SendOrPostCallback ongetDBSIZEMBCompletedDelegate;
        
        private BeginOperationDelegate onBeginresetMissingEmailIdsDelegate;
        
        private EndOperationDelegate onEndresetMissingEmailIdsDelegate;
        
        private System.Threading.SendOrPostCallback onresetMissingEmailIdsCompletedDelegate;
        
        private BeginOperationDelegate onBeginUserParmInsertUpdateDelegate;
        
        private EndOperationDelegate onEndUserParmInsertUpdateDelegate;
        
        private System.Threading.SendOrPostCallback onUserParmInsertUpdateCompletedDelegate;
        
        private BeginOperationDelegate onBeginvalidateLoginDelegate;
        
        private EndOperationDelegate onEndvalidateLoginDelegate;
        
        private System.Threading.SendOrPostCallback onvalidateLoginCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLoggedInUserDelegate;
        
        private EndOperationDelegate onEndgetLoggedInUserDelegate;
        
        private System.Threading.SendOrPostCallback ongetLoggedInUserCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAttachedMachineNameDelegate;
        
        private EndOperationDelegate onEndgetAttachedMachineNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetAttachedMachineNameCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServerInstanceNameDelegate;
        
        private EndOperationDelegate onEndgetServerInstanceNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetServerInstanceNameCompletedDelegate;
        
        private BeginOperationDelegate onBegingetServerMachineNameDelegate;
        
        private EndOperationDelegate onEndgetServerMachineNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetServerMachineNameCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSystemParmDelegate;
        
        private EndOperationDelegate onEndgetSystemParmDelegate;
        
        private System.Threading.SendOrPostCallback ongetSystemParmCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSynonymsDelegate;
        
        private EndOperationDelegate onEndgetSynonymsDelegate;
        
        private System.Threading.SendOrPostCallback ongetSynonymsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetThesaurusIDDelegate;
        
        private EndOperationDelegate onEndgetThesaurusIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetThesaurusIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginiCountContentDelegate;
        
        private EndOperationDelegate onEndiCountContentDelegate;
        
        private System.Threading.SendOrPostCallback oniCountContentCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDatasourceParmDelegate;
        
        private EndOperationDelegate onEndgetDatasourceParmDelegate;
        
        private System.Threading.SendOrPostCallback ongetDatasourceParmCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveRunParmDelegate;
        
        private EndOperationDelegate onEndSaveRunParmDelegate;
        
        private System.Threading.SendOrPostCallback onSaveRunParmCompletedDelegate;
        
        private BeginOperationDelegate onBeginiGetRowCountDelegate;
        
        private EndOperationDelegate onEndiGetRowCountDelegate;
        
        private System.Threading.SendOrPostCallback oniGetRowCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginZeroizeGlobalSearchDelegate;
        
        private EndOperationDelegate onEndZeroizeGlobalSearchDelegate;
        
        private System.Threading.SendOrPostCallback onZeroizeGlobalSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginupdateIpDelegate;
        
        private EndOperationDelegate onEndupdateIpDelegate;
        
        private System.Threading.SendOrPostCallback onupdateIpCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateSourceGridWithWeightsDelegate;
        
        private EndOperationDelegate onEndPopulateSourceGridWithWeightsDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateSourceGridWithWeightsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateSourceGridNoWeightsDelegate;
        
        private EndOperationDelegate onEndPopulateSourceGridNoWeightsDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateSourceGridNoWeightsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateEmailGridWithNoWeightsDelegate;
        
        private EndOperationDelegate onEndPopulateEmailGridWithNoWeightsDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateEmailGridWithNoWeightsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateEmailGridWithWeightsDelegate;
        
        private EndOperationDelegate onEndPopulateEmailGridWithWeightsDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateEmailGridWithWeightsCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoadUserSearchHistoryDelegate;
        
        private EndOperationDelegate onEndLoadUserSearchHistoryDelegate;
        
        private System.Threading.SendOrPostCallback onLoadUserSearchHistoryCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAttachmentWeightsDelegate;
        
        private EndOperationDelegate onEndgetAttachmentWeightsDelegate;
        
        private System.Threading.SendOrPostCallback ongetAttachmentWeightsCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConn1Delegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConn1Delegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConn1CompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConn2Delegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConn2Delegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConn2CompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConn3Delegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConn3Delegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConn3CompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConn4Delegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConn4Delegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConn4CompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConn5Delegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConn5Delegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConn5CompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlNewConnSecureDelegate;
        
        private EndOperationDelegate onEndExecuteSqlNewConnSecureDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlNewConnSecureCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetParmValueDelegate;
        
        private EndOperationDelegate onEndGetParmValueDelegate;
        
        private System.Threading.SendOrPostCallback onGetParmValueCompletedDelegate;
        
        private BeginOperationDelegate onBeginDBisGlobalSearcherDelegate;
        
        private EndOperationDelegate onEndDBisGlobalSearcherDelegate;
        
        private System.Threading.SendOrPostCallback onDBisGlobalSearcherCompletedDelegate;
        
        private BeginOperationDelegate onBeginDBisAdminDelegate;
        
        private EndOperationDelegate onEndDBisAdminDelegate;
        
        private System.Threading.SendOrPostCallback onDBisAdminCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserParmDelegate;
        
        private EndOperationDelegate onEndgetUserParmDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserParmCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveUnwantedCharactersDelegate;
        
        private EndOperationDelegate onEndRemoveUnwantedCharactersDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveUnwantedCharactersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetMachineIPDelegate;
        
        private EndOperationDelegate onEndGetMachineIPDelegate;
        
        private System.Threading.SendOrPostCallback onGetMachineIPCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClientLicensesDelegate;
        
        private EndOperationDelegate onEndgetClientLicensesDelegate;
        
        private System.Threading.SendOrPostCallback ongetClientLicensesCompletedDelegate;
        
        private BeginOperationDelegate onBegincleanUpLibraryItemsDelegate;
        
        private EndOperationDelegate onEndcleanUpLibraryItemsDelegate;
        
        private System.Threading.SendOrPostCallback oncleanUpLibraryItemsCompletedDelegate;
        
        private BeginOperationDelegate onBeginCleanLogTableDelegate;
        
        private EndOperationDelegate onEndCleanLogTableDelegate;
        
        private System.Threading.SendOrPostCallback onCleanLogTableCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSecEndPointDelegate;
        
        private EndOperationDelegate onEndgetSecEndPointDelegate;
        
        private System.Threading.SendOrPostCallback ongetSecEndPointCompletedDelegate;
        
        private BeginOperationDelegate onBegingetContractIDDelegate;
        
        private EndOperationDelegate onEndgetContractIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetContractIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupLibraryAccessDelegate;
        
        private EndOperationDelegate onEndAddGroupLibraryAccessDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupLibraryAccessCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddGroupUserDelegate;
        
        private EndOperationDelegate onEndAddGroupUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddGroupUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginDecryptPhraseDelegate;
        
        private EndOperationDelegate onEndDecryptPhraseDelegate;
        
        private System.Threading.SendOrPostCallback onDecryptPhraseCompletedDelegate;
        
        private BeginOperationDelegate onBeginEncryptPhraseDelegate;
        
        private EndOperationDelegate onEndEncryptPhraseDelegate;
        
        private System.Threading.SendOrPostCallback onEncryptPhraseCompletedDelegate;
        
        private BeginOperationDelegate onBeginDBExecuteEncryptedSqlDelegate;
        
        private EndOperationDelegate onEndDBExecuteEncryptedSqlDelegate;
        
        private System.Threading.SendOrPostCallback onDBExecuteEncryptedSqlCompletedDelegate;
        
        private BeginOperationDelegate onBeginvalidateAttachSecureLoginDelegate;
        
        private EndOperationDelegate onEndvalidateAttachSecureLoginDelegate;
        
        private System.Threading.SendOrPostCallback onvalidateAttachSecureLoginCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetXrtTestDelegate;
        
        private EndOperationDelegate onEndGetXrtTestDelegate;
        
        private System.Threading.SendOrPostCallback onGetXrtTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginckContentFlagsDelegate;
        
        private EndOperationDelegate onEndckContentFlagsDelegate;
        
        private System.Threading.SendOrPostCallback onckContentFlagsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetCustomerLogoTitleDelegate;
        
        private EndOperationDelegate onEndgetCustomerLogoTitleDelegate;
        
        private System.Threading.SendOrPostCallback ongetCustomerLogoTitleCompletedDelegate;
        
        private BeginOperationDelegate onBegingetAffinitydelayDelegate;
        
        private EndOperationDelegate onEndgetAffinitydelayDelegate;
        
        private System.Threading.SendOrPostCallback ongetAffinitydelayCompletedDelegate;
        
        private BeginOperationDelegate onBegingetClcURLDelegate;
        
        private EndOperationDelegate onEndgetClcURLDelegate;
        
        private System.Threading.SendOrPostCallback ongetClcURLCompletedDelegate;
        
        private BeginOperationDelegate onBegingetArchiverURLDelegate;
        
        private EndOperationDelegate onEndgetArchiverURLDelegate;
        
        private System.Threading.SendOrPostCallback ongetArchiverURLCompletedDelegate;
        
        private BeginOperationDelegate onBeginExecuteSqlStackDelegate;
        
        private EndOperationDelegate onEndExecuteSqlStackDelegate;
        
        private System.Threading.SendOrPostCallback onExecuteSqlStackCompletedDelegate;
        
        private BeginOperationDelegate onBegingetDefaultScreenDelegate;
        
        private EndOperationDelegate onEndgetDefaultScreenDelegate;
        
        private System.Threading.SendOrPostCallback ongetDefaultScreenCompletedDelegate;
        
        private BeginOperationDelegate onBeginRecallUserSearchDelegate;
        
        private EndOperationDelegate onEndRecallUserSearchDelegate;
        
        private System.Threading.SendOrPostCallback onRecallUserSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUserSearchDelegate;
        
        private EndOperationDelegate onEndSaveUserSearchDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUserSearchCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFilesInZipDelegate;
        
        private EndOperationDelegate onEndGetFilesInZipDelegate;
        
        private System.Threading.SendOrPostCallback onGetFilesInZipCompletedDelegate;
        
        private BeginOperationDelegate onBeginscheduleFileDownLoadDelegate;
        
        private EndOperationDelegate onEndscheduleFileDownLoadDelegate;
        
        private System.Threading.SendOrPostCallback onscheduleFileDownLoadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetContentMetaDataDelegate;
        
        private EndOperationDelegate onEndGetContentMetaDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetContentMetaDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveRestoreFileByGuidDelegate;
        
        private EndOperationDelegate onEndremoveRestoreFileByGuidDelegate;
        
        private System.Threading.SendOrPostCallback onremoveRestoreFileByGuidCompletedDelegate;
        
        private BeginOperationDelegate onBeginremoveRestoreFilesDelegate;
        
        private EndOperationDelegate onEndremoveRestoreFilesDelegate;
        
        private System.Threading.SendOrPostCallback onremoveRestoreFilesCompletedDelegate;
        
        private BeginOperationDelegate onBegingetRestoreFileCountDelegate;
        
        private EndOperationDelegate onEndgetRestoreFileCountDelegate;
        
        private System.Threading.SendOrPostCallback ongetRestoreFileCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveRestoreFileDelegate;
        
        private EndOperationDelegate onEndsaveRestoreFileDelegate;
        
        private System.Threading.SendOrPostCallback onsaveRestoreFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenEmailAttachmentsGeneratedSQLDelegate;
        
        private EndOperationDelegate onEndGenEmailAttachmentsGeneratedSQLDelegate;
        
        private System.Threading.SendOrPostCallback onGenEmailAttachmentsGeneratedSQLCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenEmailGeneratedSQLDelegate;
        
        private EndOperationDelegate onEndGenEmailGeneratedSQLDelegate;
        
        private System.Threading.SendOrPostCallback onGenEmailGeneratedSQLCompletedDelegate;
        
        private BeginOperationDelegate onBeginGenContentSearchSQLDelegate;
        
        private EndOperationDelegate onEndGenContentSearchSQLDelegate;
        
        private System.Threading.SendOrPostCallback onGenContentSearchSQLCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserContentPublicDelegate;
        
        private EndOperationDelegate onEndChangeUserContentPublicDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserContentPublicCompletedDelegate;
        
        private BeginOperationDelegate onBeginRefactorDelegate;
        
        private EndOperationDelegate onEndRefactorDelegate;
        
        private System.Threading.SendOrPostCallback onRefactorCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSAASStateDelegate;
        
        private EndOperationDelegate onEndgetSAASStateDelegate;
        
        private System.Threading.SendOrPostCallback ongetSAASStateCompletedDelegate;
        
        private BeginOperationDelegate onBeginSetSAASStateDelegate;
        
        private EndOperationDelegate onEndSetSAASStateDelegate;
        
        private System.Threading.SendOrPostCallback onSetSAASStateCompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings01Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings01Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings01CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings02Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings02Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings02CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings03Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings03Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings03CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings04Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings04Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings04CompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateLibraryUsersGridDelegate;
        
        private EndOperationDelegate onEndPopulateLibraryUsersGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateLibraryUsersGridCompletedDelegate;
        
        private BeginOperationDelegate onBegingetUserAuthDelegate;
        
        private EndOperationDelegate onEndgetUserAuthDelegate;
        
        private System.Threading.SendOrPostCallback ongetUserAuthCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteUserDelegate;
        
        private EndOperationDelegate onEndDeleteUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveUSerDelegate;
        
        private EndOperationDelegate onEndSaveUSerDelegate;
        
        private System.Threading.SendOrPostCallback onSaveUSerCompletedDelegate;
        
        private BeginOperationDelegate onBeginsaveSearchScheduleDelegate;
        
        private EndOperationDelegate onEndsaveSearchScheduleDelegate;
        
        private System.Threading.SendOrPostCallback onsaveSearchScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSearchScheduleDelegate;
        
        private EndOperationDelegate onEndgetSearchScheduleDelegate;
        
        private System.Threading.SendOrPostCallback ongetSearchScheduleCompletedDelegate;
        
        private BeginOperationDelegate onBeginInsertCoOwnerDelegate;
        
        private EndOperationDelegate onEndInsertCoOwnerDelegate;
        
        private System.Threading.SendOrPostCallback onInsertCoOwnerCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateCoOwnerGridDelegate;
        
        private EndOperationDelegate onEndPopulateCoOwnerGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateCoOwnerGridCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateUserGridDelegate;
        
        private EndOperationDelegate onEndPopulateUserGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateUserGridCompletedDelegate;
        
        private BeginOperationDelegate onBegingetGroupUsersDelegate;
        
        private EndOperationDelegate onEndgetGroupUsersDelegate;
        
        private System.Threading.SendOrPostCallback ongetGroupUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateDgGroupUsersDelegate;
        
        private EndOperationDelegate onEndPopulateDgGroupUsersDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateDgGroupUsersCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteGroupUsersDelegate;
        
        private EndOperationDelegate onEndDeleteGroupUsersDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteGroupUsersCompletedDelegate;
        
        private BeginOperationDelegate onBegingetGroupOwnerGuidByGroupNameDelegate;
        
        private EndOperationDelegate onEndgetGroupOwnerGuidByGroupNameDelegate;
        
        private System.Threading.SendOrPostCallback ongetGroupOwnerGuidByGroupNameCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLibraryGroupUserDelegate;
        
        private EndOperationDelegate onEndAddLibraryGroupUserDelegate;
        
        private System.Threading.SendOrPostCallback onAddLibraryGroupUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateGroupUserGridDelegate;
        
        private EndOperationDelegate onEndPopulateGroupUserGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateGroupUserGridCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateLibItemsGridDelegate;
        
        private EndOperationDelegate onEndPopulateLibItemsGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateLibItemsGridCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateDgAssignedDelegate;
        
        private EndOperationDelegate onEndPopulateDgAssignedDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateDgAssignedCompletedDelegate;
        
        private BeginOperationDelegate onBeginResetLibraryUsersCountDelegate;
        
        private EndOperationDelegate onEndResetLibraryUsersCountDelegate;
        
        private System.Threading.SendOrPostCallback onResetLibraryUsersCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteLibraryGroupUserDelegate;
        
        private EndOperationDelegate onEndDeleteLibraryGroupUserDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteLibraryGroupUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginChangeUserPasswordDelegate;
        
        private EndOperationDelegate onEndChangeUserPasswordDelegate;
        
        private System.Threading.SendOrPostCallback onChangeUserPasswordCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveClickStatsDelegate;
        
        private EndOperationDelegate onEndSaveClickStatsDelegate;
        
        private System.Threading.SendOrPostCallback onSaveClickStatsCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLibraryDirectoriesDelegate;
        
        private EndOperationDelegate onEndRemoveLibraryDirectoriesDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLibraryDirectoriesCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveLibraryEmailsDelegate;
        
        private EndOperationDelegate onEndRemoveLibraryEmailsDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveLibraryEmailsCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddSysMsgDelegate;
        
        private EndOperationDelegate onEndAddSysMsgDelegate;
        
        private System.Threading.SendOrPostCallback onAddSysMsgCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLibraryDirectoryDelegate;
        
        private EndOperationDelegate onEndAddLibraryDirectoryDelegate;
        
        private System.Threading.SendOrPostCallback onAddLibraryDirectoryCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddLibraryEmailDelegate;
        
        private EndOperationDelegate onEndAddLibraryEmailDelegate;
        
        private System.Threading.SendOrPostCallback onAddLibraryEmailCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateLibraryGridDelegate;
        
        private EndOperationDelegate onEndPopulateLibraryGridDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateLibraryGridCompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStringsDelegate;
        
        private EndOperationDelegate onEndgetListOfStringsDelegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStringsCompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings1Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings1Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings1CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings2Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings2Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings2CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings3Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings3Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings3CompletedDelegate;
        
        private BeginOperationDelegate onBegingetListOfStrings4Delegate;
        
        private EndOperationDelegate onEndgetListOfStrings4Delegate;
        
        private System.Threading.SendOrPostCallback ongetListOfStrings4CompletedDelegate;
        
        private BeginOperationDelegate onBeginiCountDelegate;
        
        private EndOperationDelegate onEndiCountDelegate;
        
        private System.Threading.SendOrPostCallback oniCountCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLogPathDelegate;
        
        private EndOperationDelegate onEndGetLogPathDelegate;
        
        private System.Threading.SendOrPostCallback onGetLogPathCompletedDelegate;
        
        private BeginOperationDelegate onBeginActiveSessionGetValDelegate;
        
        private EndOperationDelegate onEndActiveSessionGetValDelegate;
        
        private System.Threading.SendOrPostCallback onActiveSessionGetValCompletedDelegate;
        
        private BeginOperationDelegate onBeginActiveSessionDelegate;
        
        private EndOperationDelegate onEndActiveSessionDelegate;
        
        private System.Threading.SendOrPostCallback onActiveSessionCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSecureLoginParmsDelegate;
        
        private EndOperationDelegate onEndsetSecureLoginParmsDelegate;
        
        private System.Threading.SendOrPostCallback onsetSecureLoginParmsCompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateSecureLoginCB_V2Delegate;
        
        private EndOperationDelegate onEndPopulateSecureLoginCB_V2Delegate;
        
        private System.Threading.SendOrPostCallback onPopulateSecureLoginCB_V2CompletedDelegate;
        
        private BeginOperationDelegate onBeginPopulateSecureLoginCBDelegate;
        
        private EndOperationDelegate onEndPopulateSecureLoginCBDelegate;
        
        private System.Threading.SendOrPostCallback onPopulateSecureLoginCBCompletedDelegate;
        
        private BeginOperationDelegate onBegingetLoginPWDelegate;
        
        private EndOperationDelegate onEndgetLoginPWDelegate;
        
        private System.Threading.SendOrPostCallback ongetLoginPWCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetLoginPWDelegate;
        
        private EndOperationDelegate onEndsetLoginPWDelegate;
        
        private System.Threading.SendOrPostCallback onsetLoginPWCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSessionEncCsDelegate;
        
        private EndOperationDelegate onEndgetSessionEncCsDelegate;
        
        private System.Threading.SendOrPostCallback ongetSessionEncCsCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSessionEncCsDelegate;
        
        private EndOperationDelegate onEndsetSessionEncCsDelegate;
        
        private System.Threading.SendOrPostCallback onsetSessionEncCsCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSessionRepoIDDelegate;
        
        private EndOperationDelegate onEndsetSessionRepoIDDelegate;
        
        private System.Threading.SendOrPostCallback onsetSessionRepoIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSessionRepoIDDelegate;
        
        private EndOperationDelegate onEndgetSessionRepoIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetSessionRepoIDCompletedDelegate;
        
        private BeginOperationDelegate onBeginsetSessionCompanyIDDelegate;
        
        private EndOperationDelegate onEndsetSessionCompanyIDDelegate;
        
        private System.Threading.SendOrPostCallback onsetSessionCompanyIDCompletedDelegate;
        
        private BeginOperationDelegate onBegingetSessionCompanyIDDelegate;
        
        private EndOperationDelegate onEndgetSessionCompanyIDDelegate;
        
        private System.Threading.SendOrPostCallback ongetSessionCompanyIDCompletedDelegate;
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setLoginGuidCompleted;
        
        public event System.EventHandler<getLoginGuidCompletedEventArgs> getLoginGuidCompleted;
        
        public event System.EventHandler<getHttpSessionIDCompletedEventArgs> getHttpSessionIDCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setSessionIDCompleted;
        
        public event System.EventHandler<ExpandInflectionTermsCompletedEventArgs> ExpandInflectionTermsCompleted;
        
        public event System.EventHandler<getServerDatabaseNameCompletedEventArgs> getServerDatabaseNameCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CleanLogCompleted;
        
        public event System.EventHandler<PopulateComboBoxCompletedEventArgs> PopulateComboBoxCompleted;
        
        public event System.EventHandler<GetEmailAttachmentsCompletedEventArgs> GetEmailAttachmentsCompleted;
        
        public event System.EventHandler<DbWriteToFileCompletedEventArgs> DbWriteToFileCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> SetSessionVariableCompleted;
        
        public event System.EventHandler<GetSessionVariableCompletedEventArgs> GetSessionVariableCompleted;
        
        public event System.EventHandler<UpdateSourceImageCompressedCompletedEventArgs> UpdateSourceImageCompressedCompleted;
        
        public event System.EventHandler<writeEmailFromDbToFileCompletedEventArgs> writeEmailFromDbToFileCompleted;
        
        public event System.EventHandler<writeAttachmentFromDbWriteToFileCompletedEventArgs> writeAttachmentFromDbWriteToFileCompleted;
        
        public event System.EventHandler<writeImageSourceDataFromDbWriteToFileCompletedEventArgs> writeImageSourceDataFromDbWriteToFileCompleted;
        
        public event System.EventHandler<AddLibraryItemsCompletedEventArgs> AddLibraryItemsCompleted;
        
        public event System.EventHandler<PopulateGroupUserLibComboCompletedEventArgs> PopulateGroupUserLibComboCompleted;
        
        public event System.EventHandler<GetLibOwnerByNameCompletedEventArgs> GetLibOwnerByNameCompleted;
        
        public event System.EventHandler<ExecuteSearchCompletedEventArgs> ExecuteSearchCompleted;
        
        public event System.EventHandler<getSearchStateCompletedEventArgs> getSearchStateCompleted;
        
        public event System.EventHandler<saveSearchStateCompletedEventArgs> saveSearchStateCompleted;
        
        public event System.EventHandler<getScreenStateCompletedEventArgs> getScreenStateCompleted;
        
        public event System.EventHandler<getGridLayoutCompletedEventArgs> getGridLayoutCompleted;
        
        public event System.EventHandler<saveGridLayoutCompletedEventArgs> saveGridLayoutCompleted;
        
        public event System.EventHandler<saveScreenStateCompletedEventArgs> saveScreenStateCompleted;
        
        public event System.EventHandler<getUserParmsCompletedEventArgs> getUserParmsCompleted;
        
        public event System.EventHandler<ParseLicDictionaryCompletedEventArgs> ParseLicDictionaryCompleted;
        
        public event System.EventHandler<LicenseTypeCompletedEventArgs> LicenseTypeCompleted;
        
        public event System.EventHandler<GetNbrUsersCompletedEventArgs> GetNbrUsersCompleted;
        
        public event System.EventHandler<isLeaseCompletedEventArgs> isLeaseCompleted;
        
        public event System.EventHandler<getMaxClientsCompletedEventArgs> getMaxClientsCompleted;
        
        public event System.EventHandler<GetUserHostNameCompletedEventArgs> GetUserHostNameCompleted;
        
        public event System.EventHandler<GetUserHostAddressCompletedEventArgs> GetUserHostAddressCompleted;
        
        public event System.EventHandler<getUserGuidIDCompletedEventArgs> getUserGuidIDCompleted;
        
        public event System.EventHandler<ProcessDatesCompletedEventArgs> ProcessDatesCompleted;
        
        public event System.EventHandler<GetNbrMachineAllCompletedEventArgs> GetNbrMachineAllCompleted;
        
        public event System.EventHandler<GetNbrMachineCompletedEventArgs> GetNbrMachineCompleted;
        
        public event System.EventHandler<isLicenseLocatedOnAssignedMachineCompletedEventArgs> isLicenseLocatedOnAssignedMachineCompleted;
        
        public event System.EventHandler<GetXrtCompletedEventArgs> GetXrtCompleted;
        
        public event System.EventHandler<getSqlServerVersionCompletedEventArgs> getSqlServerVersionCompleted;
        
        public event System.EventHandler<RecordGrowthCompletedEventArgs> RecordGrowthCompleted;
        
        public event System.EventHandler<ParseLicCompletedEventArgs> ParseLicCompleted;
        
        public event System.EventHandler<GetLoggedinUserNameCompletedEventArgs> GetLoggedinUserNameCompleted;
        
        public event System.EventHandler<getDBSIZEMBCompletedEventArgs> getDBSIZEMBCompleted;
        
        public event System.EventHandler<resetMissingEmailIdsCompletedEventArgs> resetMissingEmailIdsCompleted;
        
        public event System.EventHandler<UserParmInsertUpdateCompletedEventArgs> UserParmInsertUpdateCompleted;
        
        public event System.EventHandler<validateLoginCompletedEventArgs> validateLoginCompleted;
        
        public event System.EventHandler<getLoggedInUserCompletedEventArgs> getLoggedInUserCompleted;
        
        public event System.EventHandler<getAttachedMachineNameCompletedEventArgs> getAttachedMachineNameCompleted;
        
        public event System.EventHandler<getServerInstanceNameCompletedEventArgs> getServerInstanceNameCompleted;
        
        public event System.EventHandler<getServerMachineNameCompletedEventArgs> getServerMachineNameCompleted;
        
        public event System.EventHandler<getSystemParmCompletedEventArgs> getSystemParmCompleted;
        
        public event System.EventHandler<getSynonymsCompletedEventArgs> getSynonymsCompleted;
        
        public event System.EventHandler<getThesaurusIDCompletedEventArgs> getThesaurusIDCompleted;
        
        public event System.EventHandler<iCountContentCompletedEventArgs> iCountContentCompleted;
        
        public event System.EventHandler<getDatasourceParmCompletedEventArgs> getDatasourceParmCompleted;
        
        public event System.EventHandler<SaveRunParmCompletedEventArgs> SaveRunParmCompleted;
        
        public event System.EventHandler<iGetRowCountCompletedEventArgs> iGetRowCountCompleted;
        
        public event System.EventHandler<ZeroizeGlobalSearchCompletedEventArgs> ZeroizeGlobalSearchCompleted;
        
        public event System.EventHandler<updateIpCompletedEventArgs> updateIpCompleted;
        
        public event System.EventHandler<PopulateSourceGridWithWeightsCompletedEventArgs> PopulateSourceGridWithWeightsCompleted;
        
        public event System.EventHandler<PopulateSourceGridNoWeightsCompletedEventArgs> PopulateSourceGridNoWeightsCompleted;
        
        public event System.EventHandler<PopulateEmailGridWithNoWeightsCompletedEventArgs> PopulateEmailGridWithNoWeightsCompleted;
        
        public event System.EventHandler<PopulateEmailGridWithWeightsCompletedEventArgs> PopulateEmailGridWithWeightsCompleted;
        
        public event System.EventHandler<LoadUserSearchHistoryCompletedEventArgs> LoadUserSearchHistoryCompleted;
        
        public event System.EventHandler<getAttachmentWeightsCompletedEventArgs> getAttachmentWeightsCompleted;
        
        public event System.EventHandler<ExecuteSqlNewConn1CompletedEventArgs> ExecuteSqlNewConn1Completed;
        
        public event System.EventHandler<ExecuteSqlNewConn2CompletedEventArgs> ExecuteSqlNewConn2Completed;
        
        public event System.EventHandler<ExecuteSqlNewConn3CompletedEventArgs> ExecuteSqlNewConn3Completed;
        
        public event System.EventHandler<ExecuteSqlNewConn4CompletedEventArgs> ExecuteSqlNewConn4Completed;
        
        public event System.EventHandler<ExecuteSqlNewConn5CompletedEventArgs> ExecuteSqlNewConn5Completed;
        
        public event System.EventHandler<ExecuteSqlNewConnSecureCompletedEventArgs> ExecuteSqlNewConnSecureCompleted;
        
        public event System.EventHandler<GetParmValueCompletedEventArgs> GetParmValueCompleted;
        
        public event System.EventHandler<DBisGlobalSearcherCompletedEventArgs> DBisGlobalSearcherCompleted;
        
        public event System.EventHandler<DBisAdminCompletedEventArgs> DBisAdminCompleted;
        
        public event System.EventHandler<getUserParmCompletedEventArgs> getUserParmCompleted;
        
        public event System.EventHandler<RemoveUnwantedCharactersCompletedEventArgs> RemoveUnwantedCharactersCompleted;
        
        public event System.EventHandler<GetMachineIPCompletedEventArgs> GetMachineIPCompleted;
        
        public event System.EventHandler<getClientLicensesCompletedEventArgs> getClientLicensesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> cleanUpLibraryItemsCompleted;
        
        public event System.EventHandler<CleanLogTableCompletedEventArgs> CleanLogTableCompleted;
        
        public event System.EventHandler<getSecEndPointCompletedEventArgs> getSecEndPointCompleted;
        
        public event System.EventHandler<getContractIDCompletedEventArgs> getContractIDCompleted;
        
        public event System.EventHandler<AddGroupLibraryAccessCompletedEventArgs> AddGroupLibraryAccessCompleted;
        
        public event System.EventHandler<AddGroupUserCompletedEventArgs> AddGroupUserCompleted;
        
        public event System.EventHandler<DecryptPhraseCompletedEventArgs> DecryptPhraseCompleted;
        
        public event System.EventHandler<EncryptPhraseCompletedEventArgs> EncryptPhraseCompleted;
        
        public event System.EventHandler<DBExecuteEncryptedSqlCompletedEventArgs> DBExecuteEncryptedSqlCompleted;
        
        public event System.EventHandler<validateAttachSecureLoginCompletedEventArgs> validateAttachSecureLoginCompleted;
        
        public event System.EventHandler<GetXrtTestCompletedEventArgs> GetXrtTestCompleted;
        
        public event System.EventHandler<ckContentFlagsCompletedEventArgs> ckContentFlagsCompleted;
        
        public event System.EventHandler<getCustomerLogoTitleCompletedEventArgs> getCustomerLogoTitleCompleted;
        
        public event System.EventHandler<getAffinitydelayCompletedEventArgs> getAffinitydelayCompleted;
        
        public event System.EventHandler<getClcURLCompletedEventArgs> getClcURLCompleted;
        
        public event System.EventHandler<getArchiverURLCompletedEventArgs> getArchiverURLCompleted;
        
        public event System.EventHandler<ExecuteSqlStackCompletedEventArgs> ExecuteSqlStackCompleted;
        
        public event System.EventHandler<getDefaultScreenCompletedEventArgs> getDefaultScreenCompleted;
        
        public event System.EventHandler<RecallUserSearchCompletedEventArgs> RecallUserSearchCompleted;
        
        public event System.EventHandler<SaveUserSearchCompletedEventArgs> SaveUserSearchCompleted;
        
        public event System.EventHandler<GetFilesInZipCompletedEventArgs> GetFilesInZipCompleted;
        
        public event System.EventHandler<scheduleFileDownLoadCompletedEventArgs> scheduleFileDownLoadCompleted;
        
        public event System.EventHandler<GetContentMetaDataCompletedEventArgs> GetContentMetaDataCompleted;
        
        public event System.EventHandler<removeRestoreFileByGuidCompletedEventArgs> removeRestoreFileByGuidCompleted;
        
        public event System.EventHandler<removeRestoreFilesCompletedEventArgs> removeRestoreFilesCompleted;
        
        public event System.EventHandler<getRestoreFileCountCompletedEventArgs> getRestoreFileCountCompleted;
        
        public event System.EventHandler<saveRestoreFileCompletedEventArgs> saveRestoreFileCompleted;
        
        public event System.EventHandler<GenEmailAttachmentsGeneratedSQLCompletedEventArgs> GenEmailAttachmentsGeneratedSQLCompleted;
        
        public event System.EventHandler<GenEmailGeneratedSQLCompletedEventArgs> GenEmailGeneratedSQLCompleted;
        
        public event System.EventHandler<GenContentSearchSQLCompletedEventArgs> GenContentSearchSQLCompleted;
        
        public event System.EventHandler<ChangeUserContentPublicCompletedEventArgs> ChangeUserContentPublicCompleted;
        
        public event System.EventHandler<RefactorCompletedEventArgs> RefactorCompleted;
        
        public event System.EventHandler<getSAASStateCompletedEventArgs> getSAASStateCompleted;
        
        public event System.EventHandler<SetSAASStateCompletedEventArgs> SetSAASStateCompleted;
        
        public event System.EventHandler<getListOfStrings01CompletedEventArgs> getListOfStrings01Completed;
        
        public event System.EventHandler<getListOfStrings02CompletedEventArgs> getListOfStrings02Completed;
        
        public event System.EventHandler<getListOfStrings03CompletedEventArgs> getListOfStrings03Completed;
        
        public event System.EventHandler<getListOfStrings04CompletedEventArgs> getListOfStrings04Completed;
        
        public event System.EventHandler<PopulateLibraryUsersGridCompletedEventArgs> PopulateLibraryUsersGridCompleted;
        
        public event System.EventHandler<getUserAuthCompletedEventArgs> getUserAuthCompleted;
        
        public event System.EventHandler<DeleteUserCompletedEventArgs> DeleteUserCompleted;
        
        public event System.EventHandler<SaveUSerCompletedEventArgs> SaveUSerCompleted;
        
        public event System.EventHandler<saveSearchScheduleCompletedEventArgs> saveSearchScheduleCompleted;
        
        public event System.EventHandler<getSearchScheduleCompletedEventArgs> getSearchScheduleCompleted;
        
        public event System.EventHandler<InsertCoOwnerCompletedEventArgs> InsertCoOwnerCompleted;
        
        public event System.EventHandler<PopulateCoOwnerGridCompletedEventArgs> PopulateCoOwnerGridCompleted;
        
        public event System.EventHandler<PopulateUserGridCompletedEventArgs> PopulateUserGridCompleted;
        
        public event System.EventHandler<getGroupUsersCompletedEventArgs> getGroupUsersCompleted;
        
        public event System.EventHandler<PopulateDgGroupUsersCompletedEventArgs> PopulateDgGroupUsersCompleted;
        
        public event System.EventHandler<DeleteGroupUsersCompletedEventArgs> DeleteGroupUsersCompleted;
        
        public event System.EventHandler<getGroupOwnerGuidByGroupNameCompletedEventArgs> getGroupOwnerGuidByGroupNameCompleted;
        
        public event System.EventHandler<AddLibraryGroupUserCompletedEventArgs> AddLibraryGroupUserCompleted;
        
        public event System.EventHandler<PopulateGroupUserGridCompletedEventArgs> PopulateGroupUserGridCompleted;
        
        public event System.EventHandler<PopulateLibItemsGridCompletedEventArgs> PopulateLibItemsGridCompleted;
        
        public event System.EventHandler<PopulateDgAssignedCompletedEventArgs> PopulateDgAssignedCompleted;
        
        public event System.EventHandler<ResetLibraryUsersCountCompletedEventArgs> ResetLibraryUsersCountCompleted;
        
        public event System.EventHandler<DeleteLibraryGroupUserCompletedEventArgs> DeleteLibraryGroupUserCompleted;
        
        public event System.EventHandler<ChangeUserPasswordCompletedEventArgs> ChangeUserPasswordCompleted;
        
        public event System.EventHandler<SaveClickStatsCompletedEventArgs> SaveClickStatsCompleted;
        
        public event System.EventHandler<RemoveLibraryDirectoriesCompletedEventArgs> RemoveLibraryDirectoriesCompleted;
        
        public event System.EventHandler<RemoveLibraryEmailsCompletedEventArgs> RemoveLibraryEmailsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> AddSysMsgCompleted;
        
        public event System.EventHandler<AddLibraryDirectoryCompletedEventArgs> AddLibraryDirectoryCompleted;
        
        public event System.EventHandler<AddLibraryEmailCompletedEventArgs> AddLibraryEmailCompleted;
        
        public event System.EventHandler<PopulateLibraryGridCompletedEventArgs> PopulateLibraryGridCompleted;
        
        public event System.EventHandler<getListOfStringsCompletedEventArgs> getListOfStringsCompleted;
        
        public event System.EventHandler<getListOfStrings1CompletedEventArgs> getListOfStrings1Completed;
        
        public event System.EventHandler<getListOfStrings2CompletedEventArgs> getListOfStrings2Completed;
        
        public event System.EventHandler<getListOfStrings3CompletedEventArgs> getListOfStrings3Completed;
        
        public event System.EventHandler<getListOfStrings4CompletedEventArgs> getListOfStrings4Completed;
        
        public event System.EventHandler<iCountCompletedEventArgs> iCountCompleted;
        
        public event System.EventHandler<GetLogPathCompletedEventArgs> GetLogPathCompleted;
        
        public event System.EventHandler<ActiveSessionGetValCompletedEventArgs> ActiveSessionGetValCompleted;
        
        public event System.EventHandler<ActiveSessionCompletedEventArgs> ActiveSessionCompleted;
        
        public event System.EventHandler<setSecureLoginParmsCompletedEventArgs> setSecureLoginParmsCompleted;
        
        public event System.EventHandler<PopulateSecureLoginCB_V2CompletedEventArgs> PopulateSecureLoginCB_V2Completed;
        
        public event System.EventHandler<PopulateSecureLoginCBCompletedEventArgs> PopulateSecureLoginCBCompleted;
        
        public event System.EventHandler<getLoginPWCompletedEventArgs> getLoginPWCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setLoginPWCompleted;
        
        public event System.EventHandler<getSessionEncCsCompletedEventArgs> getSessionEncCsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setSessionEncCsCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> setSessionRepoIDCompleted;
        
        public event System.EventHandler<getSessionRepoIDCompletedEventArgs> getSessionRepoIDCompleted;
        
        public event System.EventHandler<setSessionCompanyIDCompletedEventArgs> setSessionCompanyIDCompleted;
        
        public event System.EventHandler<getSessionCompanyIDCompletedEventArgs> getSessionCompanyIDCompleted;
        
        public void setLoginGuid(string SecureID, string MyLoginGuid) {
            base.Channel.setLoginGuid(SecureID, MyLoginGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetLoginGuid(string SecureID, string MyLoginGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetLoginGuid(SecureID, MyLoginGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetLoginGuid(System.IAsyncResult result) {
            base.Channel.EndsetLoginGuid(result);
        }
        
        private System.IAsyncResult OnBeginsetLoginGuid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string MyLoginGuid = ((string)(inValues[1]));
            return this.BeginsetLoginGuid(SecureID, MyLoginGuid, callback, asyncState);
        }
        
        private object[] OnEndsetLoginGuid(System.IAsyncResult result) {
            this.EndsetLoginGuid(result);
            return null;
        }
        
        private void OnsetLoginGuidCompleted(object state) {
            if ((this.setLoginGuidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setLoginGuidCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setLoginGuidAsync(string SecureID, string MyLoginGuid) {
            this.setLoginGuidAsync(SecureID, MyLoginGuid, null);
        }
        
        public void setLoginGuidAsync(string SecureID, string MyLoginGuid, object userState) {
            if ((this.onBeginsetLoginGuidDelegate == null)) {
                this.onBeginsetLoginGuidDelegate = new BeginOperationDelegate(this.OnBeginsetLoginGuid);
            }
            if ((this.onEndsetLoginGuidDelegate == null)) {
                this.onEndsetLoginGuidDelegate = new EndOperationDelegate(this.OnEndsetLoginGuid);
            }
            if ((this.onsetLoginGuidCompletedDelegate == null)) {
                this.onsetLoginGuidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetLoginGuidCompleted);
            }
            base.InvokeAsync(this.onBeginsetLoginGuidDelegate, new object[] {
                        SecureID,
                        MyLoginGuid}, this.onEndsetLoginGuidDelegate, this.onsetLoginGuidCompletedDelegate, userState);
        }
        
        public object getLoginGuid(string SecureID) {
            return base.Channel.getLoginGuid(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLoginGuid(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLoginGuid(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetLoginGuid(System.IAsyncResult result) {
            return base.Channel.EndgetLoginGuid(result);
        }
        
        private System.IAsyncResult OnBegingetLoginGuid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetLoginGuid(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetLoginGuid(System.IAsyncResult result) {
            object retVal = this.EndgetLoginGuid(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLoginGuidCompleted(object state) {
            if ((this.getLoginGuidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLoginGuidCompleted(this, new getLoginGuidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLoginGuidAsync(string SecureID) {
            this.getLoginGuidAsync(SecureID, null);
        }
        
        public void getLoginGuidAsync(string SecureID, object userState) {
            if ((this.onBegingetLoginGuidDelegate == null)) {
                this.onBegingetLoginGuidDelegate = new BeginOperationDelegate(this.OnBegingetLoginGuid);
            }
            if ((this.onEndgetLoginGuidDelegate == null)) {
                this.onEndgetLoginGuidDelegate = new EndOperationDelegate(this.OnEndgetLoginGuid);
            }
            if ((this.ongetLoginGuidCompletedDelegate == null)) {
                this.ongetLoginGuidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLoginGuidCompleted);
            }
            base.InvokeAsync(this.onBegingetLoginGuidDelegate, new object[] {
                        SecureID}, this.onEndgetLoginGuidDelegate, this.ongetLoginGuidCompletedDelegate, userState);
        }
        
        public object getHttpSessionID(string SecureID) {
            return base.Channel.getHttpSessionID(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetHttpSessionID(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetHttpSessionID(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetHttpSessionID(System.IAsyncResult result) {
            return base.Channel.EndgetHttpSessionID(result);
        }
        
        private System.IAsyncResult OnBegingetHttpSessionID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetHttpSessionID(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetHttpSessionID(System.IAsyncResult result) {
            object retVal = this.EndgetHttpSessionID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetHttpSessionIDCompleted(object state) {
            if ((this.getHttpSessionIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getHttpSessionIDCompleted(this, new getHttpSessionIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getHttpSessionIDAsync(string SecureID) {
            this.getHttpSessionIDAsync(SecureID, null);
        }
        
        public void getHttpSessionIDAsync(string SecureID, object userState) {
            if ((this.onBegingetHttpSessionIDDelegate == null)) {
                this.onBegingetHttpSessionIDDelegate = new BeginOperationDelegate(this.OnBegingetHttpSessionID);
            }
            if ((this.onEndgetHttpSessionIDDelegate == null)) {
                this.onEndgetHttpSessionIDDelegate = new EndOperationDelegate(this.OnEndgetHttpSessionID);
            }
            if ((this.ongetHttpSessionIDCompletedDelegate == null)) {
                this.ongetHttpSessionIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetHttpSessionIDCompleted);
            }
            base.InvokeAsync(this.onBegingetHttpSessionIDDelegate, new object[] {
                        SecureID}, this.onEndgetHttpSessionIDDelegate, this.ongetHttpSessionIDCompletedDelegate, userState);
        }
        
        public void setSessionID(string SecureID, string MySessionID) {
            base.Channel.setSessionID(SecureID, MySessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetSessionID(string SecureID, string MySessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSessionID(SecureID, MySessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetSessionID(System.IAsyncResult result) {
            base.Channel.EndsetSessionID(result);
        }
        
        private System.IAsyncResult OnBeginsetSessionID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string MySessionID = ((string)(inValues[1]));
            return this.BeginsetSessionID(SecureID, MySessionID, callback, asyncState);
        }
        
        private object[] OnEndsetSessionID(System.IAsyncResult result) {
            this.EndsetSessionID(result);
            return null;
        }
        
        private void OnsetSessionIDCompleted(object state) {
            if ((this.setSessionIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSessionIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSessionIDAsync(string SecureID, string MySessionID) {
            this.setSessionIDAsync(SecureID, MySessionID, null);
        }
        
        public void setSessionIDAsync(string SecureID, string MySessionID, object userState) {
            if ((this.onBeginsetSessionIDDelegate == null)) {
                this.onBeginsetSessionIDDelegate = new BeginOperationDelegate(this.OnBeginsetSessionID);
            }
            if ((this.onEndsetSessionIDDelegate == null)) {
                this.onEndsetSessionIDDelegate = new EndOperationDelegate(this.OnEndsetSessionID);
            }
            if ((this.onsetSessionIDCompletedDelegate == null)) {
                this.onsetSessionIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSessionIDCompleted);
            }
            base.InvokeAsync(this.onBeginsetSessionIDDelegate, new object[] {
                        SecureID,
                        MySessionID}, this.onEndsetSessionIDDelegate, this.onsetSessionIDCompletedDelegate, userState);
        }
        
        public string ExpandInflectionTerms(string SecureID, string S) {
            return base.Channel.ExpandInflectionTerms(SecureID, S);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExpandInflectionTerms(string SecureID, string S, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExpandInflectionTerms(SecureID, S, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndExpandInflectionTerms(System.IAsyncResult result) {
            return base.Channel.EndExpandInflectionTerms(result);
        }
        
        private System.IAsyncResult OnBeginExpandInflectionTerms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string S = ((string)(inValues[1]));
            return this.BeginExpandInflectionTerms(SecureID, S, callback, asyncState);
        }
        
        private object[] OnEndExpandInflectionTerms(System.IAsyncResult result) {
            string retVal = this.EndExpandInflectionTerms(result);
            return new object[] {
                    retVal};
        }
        
        private void OnExpandInflectionTermsCompleted(object state) {
            if ((this.ExpandInflectionTermsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExpandInflectionTermsCompleted(this, new ExpandInflectionTermsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExpandInflectionTermsAsync(string SecureID, string S) {
            this.ExpandInflectionTermsAsync(SecureID, S, null);
        }
        
        public void ExpandInflectionTermsAsync(string SecureID, string S, object userState) {
            if ((this.onBeginExpandInflectionTermsDelegate == null)) {
                this.onBeginExpandInflectionTermsDelegate = new BeginOperationDelegate(this.OnBeginExpandInflectionTerms);
            }
            if ((this.onEndExpandInflectionTermsDelegate == null)) {
                this.onEndExpandInflectionTermsDelegate = new EndOperationDelegate(this.OnEndExpandInflectionTerms);
            }
            if ((this.onExpandInflectionTermsCompletedDelegate == null)) {
                this.onExpandInflectionTermsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExpandInflectionTermsCompleted);
            }
            base.InvokeAsync(this.onBeginExpandInflectionTermsDelegate, new object[] {
                        SecureID,
                        S}, this.onEndExpandInflectionTermsDelegate, this.onExpandInflectionTermsCompletedDelegate, userState);
        }
        
        public string getServerDatabaseName(string SecureID) {
            return base.Channel.getServerDatabaseName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetServerDatabaseName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetServerDatabaseName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetServerDatabaseName(System.IAsyncResult result) {
            return base.Channel.EndgetServerDatabaseName(result);
        }
        
        private System.IAsyncResult OnBegingetServerDatabaseName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetServerDatabaseName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetServerDatabaseName(System.IAsyncResult result) {
            string retVal = this.EndgetServerDatabaseName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetServerDatabaseNameCompleted(object state) {
            if ((this.getServerDatabaseNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServerDatabaseNameCompleted(this, new getServerDatabaseNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServerDatabaseNameAsync(string SecureID) {
            this.getServerDatabaseNameAsync(SecureID, null);
        }
        
        public void getServerDatabaseNameAsync(string SecureID, object userState) {
            if ((this.onBegingetServerDatabaseNameDelegate == null)) {
                this.onBegingetServerDatabaseNameDelegate = new BeginOperationDelegate(this.OnBegingetServerDatabaseName);
            }
            if ((this.onEndgetServerDatabaseNameDelegate == null)) {
                this.onEndgetServerDatabaseNameDelegate = new EndOperationDelegate(this.OnEndgetServerDatabaseName);
            }
            if ((this.ongetServerDatabaseNameCompletedDelegate == null)) {
                this.ongetServerDatabaseNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServerDatabaseNameCompleted);
            }
            base.InvokeAsync(this.onBegingetServerDatabaseNameDelegate, new object[] {
                        SecureID}, this.onEndgetServerDatabaseNameDelegate, this.ongetServerDatabaseNameCompletedDelegate, userState);
        }
        
        public void CleanLog(string SecureID) {
            base.Channel.CleanLog(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCleanLog(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCleanLog(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndCleanLog(System.IAsyncResult result) {
            base.Channel.EndCleanLog(result);
        }
        
        private System.IAsyncResult OnBeginCleanLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginCleanLog(SecureID, callback, asyncState);
        }
        
        private object[] OnEndCleanLog(System.IAsyncResult result) {
            this.EndCleanLog(result);
            return null;
        }
        
        private void OnCleanLogCompleted(object state) {
            if ((this.CleanLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CleanLogCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CleanLogAsync(string SecureID) {
            this.CleanLogAsync(SecureID, null);
        }
        
        public void CleanLogAsync(string SecureID, object userState) {
            if ((this.onBeginCleanLogDelegate == null)) {
                this.onBeginCleanLogDelegate = new BeginOperationDelegate(this.OnBeginCleanLog);
            }
            if ((this.onEndCleanLogDelegate == null)) {
                this.onEndCleanLogDelegate = new EndOperationDelegate(this.OnEndCleanLog);
            }
            if ((this.onCleanLogCompletedDelegate == null)) {
                this.onCleanLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCleanLogCompleted);
            }
            base.InvokeAsync(this.onBeginCleanLogDelegate, new object[] {
                        SecureID}, this.onEndCleanLogDelegate, this.onCleanLogCompletedDelegate, userState);
        }
        
        public void PopulateComboBox(string SecureID, ref string[] CB, string TblColName, string S) {
            base.Channel.PopulateComboBox(SecureID, ref CB, TblColName, S);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateComboBox(string SecureID, ref string[] CB, string TblColName, string S, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateComboBox(SecureID, ref CB, TblColName, S, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPopulateComboBox(ref string[] CB, System.IAsyncResult result) {
            base.Channel.EndPopulateComboBox(ref CB, result);
        }
        
        private System.IAsyncResult OnBeginPopulateComboBox(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string[] CB = ((string[])(inValues[1]));
            string TblColName = ((string)(inValues[2]));
            string S = ((string)(inValues[3]));
            return this.BeginPopulateComboBox(SecureID, ref CB, TblColName, S, callback, asyncState);
        }
        
        private object[] OnEndPopulateComboBox(System.IAsyncResult result) {
            string[] CB = this.GetDefaultValueForInitialization<string[]>();
            this.EndPopulateComboBox(ref CB, result);
            return new object[] {
                    CB};
        }
        
        private void OnPopulateComboBoxCompleted(object state) {
            if ((this.PopulateComboBoxCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateComboBoxCompleted(this, new PopulateComboBoxCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateComboBoxAsync(string SecureID, string[] CB, string TblColName, string S) {
            this.PopulateComboBoxAsync(SecureID, CB, TblColName, S, null);
        }
        
        public void PopulateComboBoxAsync(string SecureID, string[] CB, string TblColName, string S, object userState) {
            if ((this.onBeginPopulateComboBoxDelegate == null)) {
                this.onBeginPopulateComboBoxDelegate = new BeginOperationDelegate(this.OnBeginPopulateComboBox);
            }
            if ((this.onEndPopulateComboBoxDelegate == null)) {
                this.onEndPopulateComboBoxDelegate = new EndOperationDelegate(this.OnEndPopulateComboBox);
            }
            if ((this.onPopulateComboBoxCompletedDelegate == null)) {
                this.onPopulateComboBoxCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateComboBoxCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateComboBoxDelegate, new object[] {
                        SecureID,
                        CB,
                        TblColName,
                        S}, this.onEndPopulateComboBoxDelegate, this.onPopulateComboBoxCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_Attachments[] GetEmailAttachments(string SecureID, string CurrEmailGuid) {
            return base.Channel.GetEmailAttachments(SecureID, CurrEmailGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetEmailAttachments(string SecureID, string CurrEmailGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetEmailAttachments(SecureID, CurrEmailGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_Attachments[] EndGetEmailAttachments(System.IAsyncResult result) {
            return base.Channel.EndGetEmailAttachments(result);
        }
        
        private System.IAsyncResult OnBeginGetEmailAttachments(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CurrEmailGuid = ((string)(inValues[1]));
            return this.BeginGetEmailAttachments(SecureID, CurrEmailGuid, callback, asyncState);
        }
        
        private object[] OnEndGetEmailAttachments(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_Attachments[] retVal = this.EndGetEmailAttachments(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetEmailAttachmentsCompleted(object state) {
            if ((this.GetEmailAttachmentsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetEmailAttachmentsCompleted(this, new GetEmailAttachmentsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetEmailAttachmentsAsync(string SecureID, string CurrEmailGuid) {
            this.GetEmailAttachmentsAsync(SecureID, CurrEmailGuid, null);
        }
        
        public void GetEmailAttachmentsAsync(string SecureID, string CurrEmailGuid, object userState) {
            if ((this.onBeginGetEmailAttachmentsDelegate == null)) {
                this.onBeginGetEmailAttachmentsDelegate = new BeginOperationDelegate(this.OnBeginGetEmailAttachments);
            }
            if ((this.onEndGetEmailAttachmentsDelegate == null)) {
                this.onEndGetEmailAttachmentsDelegate = new EndOperationDelegate(this.OnEndGetEmailAttachments);
            }
            if ((this.onGetEmailAttachmentsCompletedDelegate == null)) {
                this.onGetEmailAttachmentsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetEmailAttachmentsCompleted);
            }
            base.InvokeAsync(this.onBeginGetEmailAttachmentsDelegate, new object[] {
                        SecureID,
                        CurrEmailGuid}, this.onEndGetEmailAttachmentsDelegate, this.onGetEmailAttachmentsCompletedDelegate, userState);
        }
        
        public bool DbWriteToFile(string SecureID, string UID, string SourceGuid, ref string FileName) {
            return base.Channel.DbWriteToFile(SecureID, UID, SourceGuid, ref FileName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDbWriteToFile(string SecureID, string UID, string SourceGuid, ref string FileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDbWriteToFile(SecureID, UID, SourceGuid, ref FileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDbWriteToFile(ref string FileName, System.IAsyncResult result) {
            return base.Channel.EndDbWriteToFile(ref FileName, result);
        }
        
        private System.IAsyncResult OnBeginDbWriteToFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string SourceGuid = ((string)(inValues[2]));
            string FileName = ((string)(inValues[3]));
            return this.BeginDbWriteToFile(SecureID, UID, SourceGuid, ref FileName, callback, asyncState);
        }
        
        private object[] OnEndDbWriteToFile(System.IAsyncResult result) {
            string FileName = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDbWriteToFile(ref FileName, result);
            return new object[] {
                    FileName,
                    retVal};
        }
        
        private void OnDbWriteToFileCompleted(object state) {
            if ((this.DbWriteToFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DbWriteToFileCompleted(this, new DbWriteToFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DbWriteToFileAsync(string SecureID, string UID, string SourceGuid, string FileName) {
            this.DbWriteToFileAsync(SecureID, UID, SourceGuid, FileName, null);
        }
        
        public void DbWriteToFileAsync(string SecureID, string UID, string SourceGuid, string FileName, object userState) {
            if ((this.onBeginDbWriteToFileDelegate == null)) {
                this.onBeginDbWriteToFileDelegate = new BeginOperationDelegate(this.OnBeginDbWriteToFile);
            }
            if ((this.onEndDbWriteToFileDelegate == null)) {
                this.onEndDbWriteToFileDelegate = new EndOperationDelegate(this.OnEndDbWriteToFile);
            }
            if ((this.onDbWriteToFileCompletedDelegate == null)) {
                this.onDbWriteToFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDbWriteToFileCompleted);
            }
            base.InvokeAsync(this.onBeginDbWriteToFileDelegate, new object[] {
                        SecureID,
                        UID,
                        SourceGuid,
                        FileName}, this.onEndDbWriteToFileDelegate, this.onDbWriteToFileCompletedDelegate, userState);
        }
        
        public void SetSessionVariable(string SecureID, string key, string KeyValue) {
            base.Channel.SetSessionVariable(SecureID, key, KeyValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetSessionVariable(string SecureID, string key, string KeyValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetSessionVariable(SecureID, key, KeyValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSetSessionVariable(System.IAsyncResult result) {
            base.Channel.EndSetSessionVariable(result);
        }
        
        private System.IAsyncResult OnBeginSetSessionVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string key = ((string)(inValues[1]));
            string KeyValue = ((string)(inValues[2]));
            return this.BeginSetSessionVariable(SecureID, key, KeyValue, callback, asyncState);
        }
        
        private object[] OnEndSetSessionVariable(System.IAsyncResult result) {
            this.EndSetSessionVariable(result);
            return null;
        }
        
        private void OnSetSessionVariableCompleted(object state) {
            if ((this.SetSessionVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetSessionVariableCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetSessionVariableAsync(string SecureID, string key, string KeyValue) {
            this.SetSessionVariableAsync(SecureID, key, KeyValue, null);
        }
        
        public void SetSessionVariableAsync(string SecureID, string key, string KeyValue, object userState) {
            if ((this.onBeginSetSessionVariableDelegate == null)) {
                this.onBeginSetSessionVariableDelegate = new BeginOperationDelegate(this.OnBeginSetSessionVariable);
            }
            if ((this.onEndSetSessionVariableDelegate == null)) {
                this.onEndSetSessionVariableDelegate = new EndOperationDelegate(this.OnEndSetSessionVariable);
            }
            if ((this.onSetSessionVariableCompletedDelegate == null)) {
                this.onSetSessionVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSessionVariableCompleted);
            }
            base.InvokeAsync(this.onBeginSetSessionVariableDelegate, new object[] {
                        SecureID,
                        key,
                        KeyValue}, this.onEndSetSessionVariableDelegate, this.onSetSessionVariableCompletedDelegate, userState);
        }
        
        public object GetSessionVariable(string SecureID, string key) {
            return base.Channel.GetSessionVariable(SecureID, key);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetSessionVariable(string SecureID, string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetSessionVariable(SecureID, key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndGetSessionVariable(System.IAsyncResult result) {
            return base.Channel.EndGetSessionVariable(result);
        }
        
        private System.IAsyncResult OnBeginGetSessionVariable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string key = ((string)(inValues[1]));
            return this.BeginGetSessionVariable(SecureID, key, callback, asyncState);
        }
        
        private object[] OnEndGetSessionVariable(System.IAsyncResult result) {
            object retVal = this.EndGetSessionVariable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetSessionVariableCompleted(object state) {
            if ((this.GetSessionVariableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetSessionVariableCompleted(this, new GetSessionVariableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetSessionVariableAsync(string SecureID, string key) {
            this.GetSessionVariableAsync(SecureID, key, null);
        }
        
        public void GetSessionVariableAsync(string SecureID, string key, object userState) {
            if ((this.onBeginGetSessionVariableDelegate == null)) {
                this.onBeginGetSessionVariableDelegate = new BeginOperationDelegate(this.OnBeginGetSessionVariable);
            }
            if ((this.onEndGetSessionVariableDelegate == null)) {
                this.onEndGetSessionVariableDelegate = new EndOperationDelegate(this.OnEndGetSessionVariable);
            }
            if ((this.onGetSessionVariableCompletedDelegate == null)) {
                this.onGetSessionVariableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetSessionVariableCompleted);
            }
            base.InvokeAsync(this.onBeginGetSessionVariableDelegate, new object[] {
                        SecureID,
                        key}, this.onEndGetSessionVariableDelegate, this.onGetSessionVariableCompletedDelegate, userState);
        }
        
        public bool UpdateSourceImageCompressed(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer) {
            return base.Channel.UpdateSourceImageCompressed(SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUpdateSourceImageCompressed(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateSourceImageCompressed(SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndUpdateSourceImageCompressed(System.IAsyncResult result) {
            return base.Channel.EndUpdateSourceImageCompressed(result);
        }
        
        private System.IAsyncResult OnBeginUpdateSourceImageCompressed(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UploadFQN = ((string)(inValues[1]));
            string SourceGuid = ((string)(inValues[2]));
            string LastAccessDate = ((string)(inValues[3]));
            string CreateDate = ((string)(inValues[4]));
            string LastWriteTime = ((string)(inValues[5]));
            int VersionNbr = ((int)(inValues[6]));
            byte[] CompressedDataBuffer = ((byte[])(inValues[7]));
            return this.BeginUpdateSourceImageCompressed(SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer, callback, asyncState);
        }
        
        private object[] OnEndUpdateSourceImageCompressed(System.IAsyncResult result) {
            bool retVal = this.EndUpdateSourceImageCompressed(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateSourceImageCompressedCompleted(object state) {
            if ((this.UpdateSourceImageCompressedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateSourceImageCompressedCompleted(this, new UpdateSourceImageCompressedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateSourceImageCompressedAsync(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer) {
            this.UpdateSourceImageCompressedAsync(SecureID, UploadFQN, SourceGuid, LastAccessDate, CreateDate, LastWriteTime, VersionNbr, CompressedDataBuffer, null);
        }
        
        public void UpdateSourceImageCompressedAsync(string SecureID, string UploadFQN, string SourceGuid, string LastAccessDate, string CreateDate, string LastWriteTime, int VersionNbr, byte[] CompressedDataBuffer, object userState) {
            if ((this.onBeginUpdateSourceImageCompressedDelegate == null)) {
                this.onBeginUpdateSourceImageCompressedDelegate = new BeginOperationDelegate(this.OnBeginUpdateSourceImageCompressed);
            }
            if ((this.onEndUpdateSourceImageCompressedDelegate == null)) {
                this.onEndUpdateSourceImageCompressedDelegate = new EndOperationDelegate(this.OnEndUpdateSourceImageCompressed);
            }
            if ((this.onUpdateSourceImageCompressedCompletedDelegate == null)) {
                this.onUpdateSourceImageCompressedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateSourceImageCompressedCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateSourceImageCompressedDelegate, new object[] {
                        SecureID,
                        UploadFQN,
                        SourceGuid,
                        LastAccessDate,
                        CreateDate,
                        LastWriteTime,
                        VersionNbr,
                        CompressedDataBuffer}, this.onEndUpdateSourceImageCompressedDelegate, this.onUpdateSourceImageCompressedCompletedDelegate, userState);
        }
        
        public void writeEmailFromDbToFile(string SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC) {
            base.Channel.writeEmailFromDbToFile(SecureID, EmailGuid, ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginwriteEmailFromDbToFile(string SecureID, string EmailGuid, ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginwriteEmailFromDbToFile(SecureID, EmailGuid, ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndwriteEmailFromDbToFile(ref string SourceTypeCode, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result) {
            base.Channel.EndwriteEmailFromDbToFile(ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginwriteEmailFromDbToFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string EmailGuid = ((string)(inValues[1]));
            string SourceTypeCode = ((string)(inValues[2]));
            byte[] CompressedDataBuffer = ((byte[])(inValues[3]));
            int OriginalSize = ((int)(inValues[4]));
            int CompressedSize = ((int)(inValues[5]));
            bool RC = ((bool)(inValues[6]));
            return this.BeginwriteEmailFromDbToFile(SecureID, EmailGuid, ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        private object[] OnEndwriteEmailFromDbToFile(System.IAsyncResult result) {
            string SourceTypeCode = this.GetDefaultValueForInitialization<string>();
            byte[] CompressedDataBuffer = this.GetDefaultValueForInitialization<byte[]>();
            int OriginalSize = this.GetDefaultValueForInitialization<int>();
            int CompressedSize = this.GetDefaultValueForInitialization<int>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndwriteEmailFromDbToFile(ref SourceTypeCode, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
            return new object[] {
                    SourceTypeCode,
                    CompressedDataBuffer,
                    OriginalSize,
                    CompressedSize,
                    RC};
        }
        
        private void OnwriteEmailFromDbToFileCompleted(object state) {
            if ((this.writeEmailFromDbToFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.writeEmailFromDbToFileCompleted(this, new writeEmailFromDbToFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void writeEmailFromDbToFileAsync(string SecureID, string EmailGuid, string SourceTypeCode, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC) {
            this.writeEmailFromDbToFileAsync(SecureID, EmailGuid, SourceTypeCode, CompressedDataBuffer, OriginalSize, CompressedSize, RC, null);
        }
        
        public void writeEmailFromDbToFileAsync(string SecureID, string EmailGuid, string SourceTypeCode, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC, object userState) {
            if ((this.onBeginwriteEmailFromDbToFileDelegate == null)) {
                this.onBeginwriteEmailFromDbToFileDelegate = new BeginOperationDelegate(this.OnBeginwriteEmailFromDbToFile);
            }
            if ((this.onEndwriteEmailFromDbToFileDelegate == null)) {
                this.onEndwriteEmailFromDbToFileDelegate = new EndOperationDelegate(this.OnEndwriteEmailFromDbToFile);
            }
            if ((this.onwriteEmailFromDbToFileCompletedDelegate == null)) {
                this.onwriteEmailFromDbToFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnwriteEmailFromDbToFileCompleted);
            }
            base.InvokeAsync(this.onBeginwriteEmailFromDbToFileDelegate, new object[] {
                        SecureID,
                        EmailGuid,
                        SourceTypeCode,
                        CompressedDataBuffer,
                        OriginalSize,
                        CompressedSize,
                        RC}, this.onEndwriteEmailFromDbToFileDelegate, this.onwriteEmailFromDbToFileCompletedDelegate, userState);
        }
        
        public void writeAttachmentFromDbWriteToFile(string SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC) {
            base.Channel.writeAttachmentFromDbWriteToFile(SecureID, RowID, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginwriteAttachmentFromDbWriteToFile(string SecureID, string RowID, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginwriteAttachmentFromDbWriteToFile(SecureID, RowID, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndwriteAttachmentFromDbWriteToFile(ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result) {
            base.Channel.EndwriteAttachmentFromDbWriteToFile(ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginwriteAttachmentFromDbWriteToFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string RowID = ((string)(inValues[1]));
            string FQN = ((string)(inValues[2]));
            byte[] CompressedDataBuffer = ((byte[])(inValues[3]));
            int OriginalSize = ((int)(inValues[4]));
            int CompressedSize = ((int)(inValues[5]));
            bool RC = ((bool)(inValues[6]));
            return this.BeginwriteAttachmentFromDbWriteToFile(SecureID, RowID, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        private object[] OnEndwriteAttachmentFromDbWriteToFile(System.IAsyncResult result) {
            string FQN = this.GetDefaultValueForInitialization<string>();
            byte[] CompressedDataBuffer = this.GetDefaultValueForInitialization<byte[]>();
            int OriginalSize = this.GetDefaultValueForInitialization<int>();
            int CompressedSize = this.GetDefaultValueForInitialization<int>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndwriteAttachmentFromDbWriteToFile(ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
            return new object[] {
                    FQN,
                    CompressedDataBuffer,
                    OriginalSize,
                    CompressedSize,
                    RC};
        }
        
        private void OnwriteAttachmentFromDbWriteToFileCompleted(object state) {
            if ((this.writeAttachmentFromDbWriteToFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.writeAttachmentFromDbWriteToFileCompleted(this, new writeAttachmentFromDbWriteToFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void writeAttachmentFromDbWriteToFileAsync(string SecureID, string RowID, string FQN, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC) {
            this.writeAttachmentFromDbWriteToFileAsync(SecureID, RowID, FQN, CompressedDataBuffer, OriginalSize, CompressedSize, RC, null);
        }
        
        public void writeAttachmentFromDbWriteToFileAsync(string SecureID, string RowID, string FQN, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC, object userState) {
            if ((this.onBeginwriteAttachmentFromDbWriteToFileDelegate == null)) {
                this.onBeginwriteAttachmentFromDbWriteToFileDelegate = new BeginOperationDelegate(this.OnBeginwriteAttachmentFromDbWriteToFile);
            }
            if ((this.onEndwriteAttachmentFromDbWriteToFileDelegate == null)) {
                this.onEndwriteAttachmentFromDbWriteToFileDelegate = new EndOperationDelegate(this.OnEndwriteAttachmentFromDbWriteToFile);
            }
            if ((this.onwriteAttachmentFromDbWriteToFileCompletedDelegate == null)) {
                this.onwriteAttachmentFromDbWriteToFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnwriteAttachmentFromDbWriteToFileCompleted);
            }
            base.InvokeAsync(this.onBeginwriteAttachmentFromDbWriteToFileDelegate, new object[] {
                        SecureID,
                        RowID,
                        FQN,
                        CompressedDataBuffer,
                        OriginalSize,
                        CompressedSize,
                        RC}, this.onEndwriteAttachmentFromDbWriteToFileDelegate, this.onwriteAttachmentFromDbWriteToFileCompletedDelegate, userState);
        }
        
        public void writeImageSourceDataFromDbWriteToFile(string SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC) {
            base.Channel.writeImageSourceDataFromDbWriteToFile(SecureID, SourceGuid, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginwriteImageSourceDataFromDbWriteToFile(string SecureID, string SourceGuid, ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginwriteImageSourceDataFromDbWriteToFile(SecureID, SourceGuid, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndwriteImageSourceDataFromDbWriteToFile(ref string FQN, ref byte[] CompressedDataBuffer, ref int OriginalSize, ref int CompressedSize, ref bool RC, System.IAsyncResult result) {
            base.Channel.EndwriteImageSourceDataFromDbWriteToFile(ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginwriteImageSourceDataFromDbWriteToFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SourceGuid = ((string)(inValues[1]));
            string FQN = ((string)(inValues[2]));
            byte[] CompressedDataBuffer = ((byte[])(inValues[3]));
            int OriginalSize = ((int)(inValues[4]));
            int CompressedSize = ((int)(inValues[5]));
            bool RC = ((bool)(inValues[6]));
            return this.BeginwriteImageSourceDataFromDbWriteToFile(SecureID, SourceGuid, ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, callback, asyncState);
        }
        
        private object[] OnEndwriteImageSourceDataFromDbWriteToFile(System.IAsyncResult result) {
            string FQN = this.GetDefaultValueForInitialization<string>();
            byte[] CompressedDataBuffer = this.GetDefaultValueForInitialization<byte[]>();
            int OriginalSize = this.GetDefaultValueForInitialization<int>();
            int CompressedSize = this.GetDefaultValueForInitialization<int>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndwriteImageSourceDataFromDbWriteToFile(ref FQN, ref CompressedDataBuffer, ref OriginalSize, ref CompressedSize, ref RC, result);
            return new object[] {
                    FQN,
                    CompressedDataBuffer,
                    OriginalSize,
                    CompressedSize,
                    RC};
        }
        
        private void OnwriteImageSourceDataFromDbWriteToFileCompleted(object state) {
            if ((this.writeImageSourceDataFromDbWriteToFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.writeImageSourceDataFromDbWriteToFileCompleted(this, new writeImageSourceDataFromDbWriteToFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void writeImageSourceDataFromDbWriteToFileAsync(string SecureID, string SourceGuid, string FQN, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC) {
            this.writeImageSourceDataFromDbWriteToFileAsync(SecureID, SourceGuid, FQN, CompressedDataBuffer, OriginalSize, CompressedSize, RC, null);
        }
        
        public void writeImageSourceDataFromDbWriteToFileAsync(string SecureID, string SourceGuid, string FQN, byte[] CompressedDataBuffer, int OriginalSize, int CompressedSize, bool RC, object userState) {
            if ((this.onBeginwriteImageSourceDataFromDbWriteToFileDelegate == null)) {
                this.onBeginwriteImageSourceDataFromDbWriteToFileDelegate = new BeginOperationDelegate(this.OnBeginwriteImageSourceDataFromDbWriteToFile);
            }
            if ((this.onEndwriteImageSourceDataFromDbWriteToFileDelegate == null)) {
                this.onEndwriteImageSourceDataFromDbWriteToFileDelegate = new EndOperationDelegate(this.OnEndwriteImageSourceDataFromDbWriteToFile);
            }
            if ((this.onwriteImageSourceDataFromDbWriteToFileCompletedDelegate == null)) {
                this.onwriteImageSourceDataFromDbWriteToFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnwriteImageSourceDataFromDbWriteToFileCompleted);
            }
            base.InvokeAsync(this.onBeginwriteImageSourceDataFromDbWriteToFileDelegate, new object[] {
                        SecureID,
                        SourceGuid,
                        FQN,
                        CompressedDataBuffer,
                        OriginalSize,
                        CompressedSize,
                        RC}, this.onEndwriteImageSourceDataFromDbWriteToFileDelegate, this.onwriteImageSourceDataFromDbWriteToFileCompletedDelegate, userState);
        }
        
        public void AddLibraryItems(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg) {
            base.Channel.AddLibraryItems(SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, ref RC, ref rMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddLibraryItems(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, ref bool RC, ref string rMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLibraryItems(SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, ref RC, ref rMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddLibraryItems(ref bool RC, ref string rMsg, System.IAsyncResult result) {
            base.Channel.EndAddLibraryItems(ref RC, ref rMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddLibraryItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SourceGuid = ((string)(inValues[1]));
            string ItemTitle = ((string)(inValues[2]));
            string ItemType = ((string)(inValues[3]));
            string LibraryItemGuid = ((string)(inValues[4]));
            string DataSourceOwnerUserID = ((string)(inValues[5]));
            string LibraryOwnerUserID = ((string)(inValues[6]));
            string LibraryName = ((string)(inValues[7]));
            string AddedByUserGuidId = ((string)(inValues[8]));
            bool RC = ((bool)(inValues[9]));
            string rMsg = ((string)(inValues[10]));
            return this.BeginAddLibraryItems(SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, ref RC, ref rMsg, callback, asyncState);
        }
        
        private object[] OnEndAddLibraryItems(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string rMsg = this.GetDefaultValueForInitialization<string>();
            this.EndAddLibraryItems(ref RC, ref rMsg, result);
            return new object[] {
                    RC,
                    rMsg};
        }
        
        private void OnAddLibraryItemsCompleted(object state) {
            if ((this.AddLibraryItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLibraryItemsCompleted(this, new AddLibraryItemsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLibraryItemsAsync(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, bool RC, string rMsg) {
            this.AddLibraryItemsAsync(SecureID, SourceGuid, ItemTitle, ItemType, LibraryItemGuid, DataSourceOwnerUserID, LibraryOwnerUserID, LibraryName, AddedByUserGuidId, RC, rMsg, null);
        }
        
        public void AddLibraryItemsAsync(string SecureID, string SourceGuid, string ItemTitle, string ItemType, string LibraryItemGuid, string DataSourceOwnerUserID, string LibraryOwnerUserID, string LibraryName, string AddedByUserGuidId, bool RC, string rMsg, object userState) {
            if ((this.onBeginAddLibraryItemsDelegate == null)) {
                this.onBeginAddLibraryItemsDelegate = new BeginOperationDelegate(this.OnBeginAddLibraryItems);
            }
            if ((this.onEndAddLibraryItemsDelegate == null)) {
                this.onEndAddLibraryItemsDelegate = new EndOperationDelegate(this.OnEndAddLibraryItems);
            }
            if ((this.onAddLibraryItemsCompletedDelegate == null)) {
                this.onAddLibraryItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLibraryItemsCompleted);
            }
            base.InvokeAsync(this.onBeginAddLibraryItemsDelegate, new object[] {
                        SecureID,
                        SourceGuid,
                        ItemTitle,
                        ItemType,
                        LibraryItemGuid,
                        DataSourceOwnerUserID,
                        LibraryOwnerUserID,
                        LibraryName,
                        AddedByUserGuidId,
                        RC,
                        rMsg}, this.onEndAddLibraryItemsDelegate, this.onAddLibraryItemsCompletedDelegate, userState);
        }
        
        public void PopulateGroupUserLibCombo(string SecureID, string UID, ref string[] cb) {
            base.Channel.PopulateGroupUserLibCombo(SecureID, UID, ref cb);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateGroupUserLibCombo(string SecureID, string UID, ref string[] cb, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateGroupUserLibCombo(SecureID, UID, ref cb, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPopulateGroupUserLibCombo(ref string[] cb, System.IAsyncResult result) {
            base.Channel.EndPopulateGroupUserLibCombo(ref cb, result);
        }
        
        private System.IAsyncResult OnBeginPopulateGroupUserLibCombo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string[] cb = ((string[])(inValues[2]));
            return this.BeginPopulateGroupUserLibCombo(SecureID, UID, ref cb, callback, asyncState);
        }
        
        private object[] OnEndPopulateGroupUserLibCombo(System.IAsyncResult result) {
            string[] cb = this.GetDefaultValueForInitialization<string[]>();
            this.EndPopulateGroupUserLibCombo(ref cb, result);
            return new object[] {
                    cb};
        }
        
        private void OnPopulateGroupUserLibComboCompleted(object state) {
            if ((this.PopulateGroupUserLibComboCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateGroupUserLibComboCompleted(this, new PopulateGroupUserLibComboCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateGroupUserLibComboAsync(string SecureID, string UID, string[] cb) {
            this.PopulateGroupUserLibComboAsync(SecureID, UID, cb, null);
        }
        
        public void PopulateGroupUserLibComboAsync(string SecureID, string UID, string[] cb, object userState) {
            if ((this.onBeginPopulateGroupUserLibComboDelegate == null)) {
                this.onBeginPopulateGroupUserLibComboDelegate = new BeginOperationDelegate(this.OnBeginPopulateGroupUserLibCombo);
            }
            if ((this.onEndPopulateGroupUserLibComboDelegate == null)) {
                this.onEndPopulateGroupUserLibComboDelegate = new EndOperationDelegate(this.OnEndPopulateGroupUserLibCombo);
            }
            if ((this.onPopulateGroupUserLibComboCompletedDelegate == null)) {
                this.onPopulateGroupUserLibComboCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateGroupUserLibComboCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateGroupUserLibComboDelegate, new object[] {
                        SecureID,
                        UID,
                        cb}, this.onEndPopulateGroupUserLibComboDelegate, this.onPopulateGroupUserLibComboCompletedDelegate, userState);
        }
        
        public string GetLibOwnerByName(string SecureID, string LibraryName) {
            return base.Channel.GetLibOwnerByName(SecureID, LibraryName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLibOwnerByName(string SecureID, string LibraryName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLibOwnerByName(SecureID, LibraryName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLibOwnerByName(System.IAsyncResult result) {
            return base.Channel.EndGetLibOwnerByName(result);
        }
        
        private System.IAsyncResult OnBeginGetLibOwnerByName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string LibraryName = ((string)(inValues[1]));
            return this.BeginGetLibOwnerByName(SecureID, LibraryName, callback, asyncState);
        }
        
        private object[] OnEndGetLibOwnerByName(System.IAsyncResult result) {
            string retVal = this.EndGetLibOwnerByName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLibOwnerByNameCompleted(object state) {
            if ((this.GetLibOwnerByNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLibOwnerByNameCompleted(this, new GetLibOwnerByNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLibOwnerByNameAsync(string SecureID, string LibraryName) {
            this.GetLibOwnerByNameAsync(SecureID, LibraryName, null);
        }
        
        public void GetLibOwnerByNameAsync(string SecureID, string LibraryName, object userState) {
            if ((this.onBeginGetLibOwnerByNameDelegate == null)) {
                this.onBeginGetLibOwnerByNameDelegate = new BeginOperationDelegate(this.OnBeginGetLibOwnerByName);
            }
            if ((this.onEndGetLibOwnerByNameDelegate == null)) {
                this.onEndGetLibOwnerByNameDelegate = new EndOperationDelegate(this.OnEndGetLibOwnerByName);
            }
            if ((this.onGetLibOwnerByNameCompletedDelegate == null)) {
                this.onGetLibOwnerByNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLibOwnerByNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetLibOwnerByNameDelegate, new object[] {
                        SecureID,
                        LibraryName}, this.onEndGetLibOwnerByNameDelegate, this.onGetLibOwnerByNameCompletedDelegate, userState);
        }
        
        public void ExecuteSearch(int iMaxRow, string SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt) {
            base.Channel.ExecuteSearch(iMaxRow, SecureID, ref currSearchCnt, bGenSql, ref EmailGenSql, SearchParms, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSearch(int iMaxRow, string SecureID, ref int currSearchCnt, bool bGenSql, ref string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSearch(iMaxRow, SecureID, ref currSearchCnt, bGenSql, ref EmailGenSql, SearchParms, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndExecuteSearch(ref int currSearchCnt, ref string EmailGenSql, ref string ContentGenSql, ref ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ref ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, ref bool bFirstEmailSearchSubmit, ref bool bFirstContentSearchSubmit, ref int EmailRowCnt, ref int ContentRowCnt, System.IAsyncResult result) {
            base.Channel.EndExecuteSearch(ref currSearchCnt, ref EmailGenSql, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int iMaxRow = ((int)(inValues[0]));
            string SecureID = ((string)(inValues[1]));
            int currSearchCnt = ((int)(inValues[2]));
            bool bGenSql = ((bool)(inValues[3]));
            string EmailGenSql = ((string)(inValues[4]));
            ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms = ((ECMSearchWPF.SVCSearch.DS_SearchTerms[])(inValues[5]));
            string ContentGenSql = ((string)(inValues[6]));
            ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows = ((ECMSearchWPF.SVCSearch.DS_EMAIL[])(inValues[7]));
            ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows = ((ECMSearchWPF.SVCSearch.DS_CONTENT[])(inValues[8]));
            bool bFirstEmailSearchSubmit = ((bool)(inValues[9]));
            bool bFirstContentSearchSubmit = ((bool)(inValues[10]));
            int EmailRowCnt = ((int)(inValues[11]));
            int ContentRowCnt = ((int)(inValues[12]));
            return this.BeginExecuteSearch(iMaxRow, SecureID, ref currSearchCnt, bGenSql, ref EmailGenSql, SearchParms, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt, callback, asyncState);
        }
        
        private object[] OnEndExecuteSearch(System.IAsyncResult result) {
            int currSearchCnt = this.GetDefaultValueForInitialization<int>();
            string EmailGenSql = this.GetDefaultValueForInitialization<string>();
            string ContentGenSql = this.GetDefaultValueForInitialization<string>();
            ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows = this.GetDefaultValueForInitialization<ECMSearchWPF.SVCSearch.DS_EMAIL[]>();
            ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows = this.GetDefaultValueForInitialization<ECMSearchWPF.SVCSearch.DS_CONTENT[]>();
            bool bFirstEmailSearchSubmit = this.GetDefaultValueForInitialization<bool>();
            bool bFirstContentSearchSubmit = this.GetDefaultValueForInitialization<bool>();
            int EmailRowCnt = this.GetDefaultValueForInitialization<int>();
            int ContentRowCnt = this.GetDefaultValueForInitialization<int>();
            this.EndExecuteSearch(ref currSearchCnt, ref EmailGenSql, ref ContentGenSql, ref ListOEmailRows, ref ListOfContentRows, ref bFirstEmailSearchSubmit, ref bFirstContentSearchSubmit, ref EmailRowCnt, ref ContentRowCnt, result);
            return new object[] {
                    currSearchCnt,
                    EmailGenSql,
                    ContentGenSql,
                    ListOEmailRows,
                    ListOfContentRows,
                    bFirstEmailSearchSubmit,
                    bFirstContentSearchSubmit,
                    EmailRowCnt,
                    ContentRowCnt};
        }
        
        private void OnExecuteSearchCompleted(object state) {
            if ((this.ExecuteSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSearchCompleted(this, new ExecuteSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSearchAsync(int iMaxRow, string SecureID, int currSearchCnt, bool bGenSql, string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string ContentGenSql, ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, bool bFirstEmailSearchSubmit, bool bFirstContentSearchSubmit, int EmailRowCnt, int ContentRowCnt) {
            this.ExecuteSearchAsync(iMaxRow, SecureID, currSearchCnt, bGenSql, EmailGenSql, SearchParms, ContentGenSql, ListOEmailRows, ListOfContentRows, bFirstEmailSearchSubmit, bFirstContentSearchSubmit, EmailRowCnt, ContentRowCnt, null);
        }
        
        public void ExecuteSearchAsync(int iMaxRow, string SecureID, int currSearchCnt, bool bGenSql, string EmailGenSql, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string ContentGenSql, ECMSearchWPF.SVCSearch.DS_EMAIL[] ListOEmailRows, ECMSearchWPF.SVCSearch.DS_CONTENT[] ListOfContentRows, bool bFirstEmailSearchSubmit, bool bFirstContentSearchSubmit, int EmailRowCnt, int ContentRowCnt, object userState) {
            if ((this.onBeginExecuteSearchDelegate == null)) {
                this.onBeginExecuteSearchDelegate = new BeginOperationDelegate(this.OnBeginExecuteSearch);
            }
            if ((this.onEndExecuteSearchDelegate == null)) {
                this.onEndExecuteSearchDelegate = new EndOperationDelegate(this.OnEndExecuteSearch);
            }
            if ((this.onExecuteSearchCompletedDelegate == null)) {
                this.onExecuteSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSearchCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSearchDelegate, new object[] {
                        iMaxRow,
                        SecureID,
                        currSearchCnt,
                        bGenSql,
                        EmailGenSql,
                        SearchParms,
                        ContentGenSql,
                        ListOEmailRows,
                        ListOfContentRows,
                        bFirstEmailSearchSubmit,
                        bFirstContentSearchSubmit,
                        EmailRowCnt,
                        ContentRowCnt}, this.onEndExecuteSearchDelegate, this.onExecuteSearchCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] getSearchState(string SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            return base.Channel.getSearchState(SecureID, SearchID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSearchState(string SecureID, int SearchID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSearchState(SecureID, SearchID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] EndgetSearchState(ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndgetSearchState(ref DICT, ref rMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBegingetSearchState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int SearchID = ((int)(inValues[1]));
            string UID = ((string)(inValues[2]));
            string ScreenName = ((string)(inValues[3]));
            System.Collections.Generic.Dictionary<string, string> DICT = ((System.Collections.Generic.Dictionary<string, string>)(inValues[4]));
            string rMsg = ((string)(inValues[5]));
            bool RC = ((bool)(inValues[6]));
            string HiveConnectionName = ((string)(inValues[7]));
            bool HiveActive = ((bool)(inValues[8]));
            string RepoSvrName = ((string)(inValues[9]));
            return this.BegingetSearchState(SecureID, SearchID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        private object[] OnEndgetSearchState(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> DICT = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, string>>();
            string rMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            ECMSearchWPF.SVCSearch.DS_USERSEARCHSTATE[] retVal = this.EndgetSearchState(ref DICT, ref rMsg, ref RC, result);
            return new object[] {
                    DICT,
                    rMsg,
                    RC,
                    retVal};
        }
        
        private void OngetSearchStateCompleted(object state) {
            if ((this.getSearchStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSearchStateCompleted(this, new getSearchStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSearchStateAsync(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            this.getSearchStateAsync(SecureID, SearchID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName, null);
        }
        
        public void getSearchStateAsync(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, object userState) {
            if ((this.onBegingetSearchStateDelegate == null)) {
                this.onBegingetSearchStateDelegate = new BeginOperationDelegate(this.OnBegingetSearchState);
            }
            if ((this.onEndgetSearchStateDelegate == null)) {
                this.onEndgetSearchStateDelegate = new EndOperationDelegate(this.OnEndgetSearchState);
            }
            if ((this.ongetSearchStateCompletedDelegate == null)) {
                this.ongetSearchStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSearchStateCompleted);
            }
            base.InvokeAsync(this.onBegingetSearchStateDelegate, new object[] {
                        SecureID,
                        SearchID,
                        UID,
                        ScreenName,
                        DICT,
                        rMsg,
                        RC,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName}, this.onEndgetSearchStateDelegate, this.ongetSearchStateCompletedDelegate, userState);
        }
        
        public void saveSearchState(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            base.Channel.saveSearchState(SecureID, SearchID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveSearchState(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveSearchState(SecureID, SearchID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsaveSearchState(ref string rMsg, ref bool RC, System.IAsyncResult result) {
            base.Channel.EndsaveSearchState(ref rMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginsaveSearchState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int SearchID = ((int)(inValues[1]));
            string UID = ((string)(inValues[2]));
            string ScreenName = ((string)(inValues[3]));
            System.Collections.Generic.Dictionary<string, string> DICT = ((System.Collections.Generic.Dictionary<string, string>)(inValues[4]));
            string rMsg = ((string)(inValues[5]));
            bool RC = ((bool)(inValues[6]));
            string HiveConnectionName = ((string)(inValues[7]));
            bool HiveActive = ((bool)(inValues[8]));
            string RepoSvrName = ((string)(inValues[9]));
            return this.BeginsaveSearchState(SecureID, SearchID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        private object[] OnEndsaveSearchState(System.IAsyncResult result) {
            string rMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndsaveSearchState(ref rMsg, ref RC, result);
            return new object[] {
                    rMsg,
                    RC};
        }
        
        private void OnsaveSearchStateCompleted(object state) {
            if ((this.saveSearchStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveSearchStateCompleted(this, new saveSearchStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveSearchStateAsync(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            this.saveSearchStateAsync(SecureID, SearchID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName, null);
        }
        
        public void saveSearchStateAsync(string SecureID, int SearchID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, object userState) {
            if ((this.onBeginsaveSearchStateDelegate == null)) {
                this.onBeginsaveSearchStateDelegate = new BeginOperationDelegate(this.OnBeginsaveSearchState);
            }
            if ((this.onEndsaveSearchStateDelegate == null)) {
                this.onEndsaveSearchStateDelegate = new EndOperationDelegate(this.OnEndsaveSearchState);
            }
            if ((this.onsaveSearchStateCompletedDelegate == null)) {
                this.onsaveSearchStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveSearchStateCompleted);
            }
            base.InvokeAsync(this.onBeginsaveSearchStateDelegate, new object[] {
                        SecureID,
                        SearchID,
                        UID,
                        ScreenName,
                        DICT,
                        rMsg,
                        RC,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName}, this.onEndsaveSearchStateDelegate, this.onsaveSearchStateCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] getScreenState(string SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            return base.Channel.getScreenState(SecureID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetScreenState(string SecureID, string UID, string ScreenName, ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetScreenState(SecureID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] EndgetScreenState(ref System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndgetScreenState(ref DICT, ref rMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBegingetScreenState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string ScreenName = ((string)(inValues[2]));
            System.Collections.Generic.Dictionary<string, string> DICT = ((System.Collections.Generic.Dictionary<string, string>)(inValues[3]));
            string rMsg = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string HiveConnectionName = ((string)(inValues[6]));
            bool HiveActive = ((bool)(inValues[7]));
            string RepoSvrName = ((string)(inValues[8]));
            return this.BegingetScreenState(SecureID, UID, ScreenName, ref DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        private object[] OnEndgetScreenState(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> DICT = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, string>>();
            string rMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            ECMSearchWPF.SVCSearch.DS_USERSCREENSTATE[] retVal = this.EndgetScreenState(ref DICT, ref rMsg, ref RC, result);
            return new object[] {
                    DICT,
                    rMsg,
                    RC,
                    retVal};
        }
        
        private void OngetScreenStateCompleted(object state) {
            if ((this.getScreenStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getScreenStateCompleted(this, new getScreenStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getScreenStateAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            this.getScreenStateAsync(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName, null);
        }
        
        public void getScreenStateAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, object userState) {
            if ((this.onBegingetScreenStateDelegate == null)) {
                this.onBegingetScreenStateDelegate = new BeginOperationDelegate(this.OnBegingetScreenState);
            }
            if ((this.onEndgetScreenStateDelegate == null)) {
                this.onEndgetScreenStateDelegate = new EndOperationDelegate(this.OnEndgetScreenState);
            }
            if ((this.ongetScreenStateCompletedDelegate == null)) {
                this.ongetScreenStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetScreenStateCompleted);
            }
            base.InvokeAsync(this.onBegingetScreenStateDelegate, new object[] {
                        SecureID,
                        UID,
                        ScreenName,
                        DICT,
                        rMsg,
                        RC,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName}, this.onEndgetScreenStateDelegate, this.ongetScreenStateCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] getGridLayout(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            return base.Channel.getGridLayout(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetGridLayout(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGridLayout(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] EndgetGridLayout(ref string rMsg, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndgetGridLayout(ref rMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBegingetGridLayout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string ScreenName = ((string)(inValues[2]));
            System.Collections.Generic.Dictionary<string, string> DICT = ((System.Collections.Generic.Dictionary<string, string>)(inValues[3]));
            string rMsg = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string HiveConnectionName = ((string)(inValues[6]));
            bool HiveActive = ((bool)(inValues[7]));
            string RepoSvrName = ((string)(inValues[8]));
            return this.BegingetGridLayout(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        private object[] OnEndgetGridLayout(System.IAsyncResult result) {
            string rMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            ECMSearchWPF.SVCSearch.DS_clsUSERGRIDSTATE[] retVal = this.EndgetGridLayout(ref rMsg, ref RC, result);
            return new object[] {
                    rMsg,
                    RC,
                    retVal};
        }
        
        private void OngetGridLayoutCompleted(object state) {
            if ((this.getGridLayoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGridLayoutCompleted(this, new getGridLayoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGridLayoutAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            this.getGridLayoutAsync(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName, null);
        }
        
        public void getGridLayoutAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, object userState) {
            if ((this.onBegingetGridLayoutDelegate == null)) {
                this.onBegingetGridLayoutDelegate = new BeginOperationDelegate(this.OnBegingetGridLayout);
            }
            if ((this.onEndgetGridLayoutDelegate == null)) {
                this.onEndgetGridLayoutDelegate = new EndOperationDelegate(this.OnEndgetGridLayout);
            }
            if ((this.ongetGridLayoutCompletedDelegate == null)) {
                this.ongetGridLayoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGridLayoutCompleted);
            }
            base.InvokeAsync(this.onBegingetGridLayoutDelegate, new object[] {
                        SecureID,
                        UID,
                        ScreenName,
                        DICT,
                        rMsg,
                        RC,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName}, this.onEndgetGridLayoutDelegate, this.ongetGridLayoutCompletedDelegate, userState);
        }
        
        public void saveGridLayout(
                    string SecureID, 
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg) {
            base.Channel.saveGridLayout(SecureID, ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveGridLayout(
                    string SecureID, 
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveGridLayout(SecureID, ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsaveGridLayout(
                    ref string UserID, 
                    ref string ScreenName, 
                    ref string GridName, 
                    ref string ColName, 
                    ref int ColOrder, 
                    ref int ColWidth, 
                    ref bool ColVisible, 
                    ref bool ColReadOnly, 
                    ref int ColSortOrder, 
                    ref bool ColSortAsc, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref int RowNbr, 
                    ref bool RC, 
                    ref string rMsg, 
                    System.IAsyncResult result) {
            base.Channel.EndsaveGridLayout(ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg, result);
        }
        
        private System.IAsyncResult OnBeginsaveGridLayout(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string ScreenName = ((string)(inValues[2]));
            string GridName = ((string)(inValues[3]));
            string ColName = ((string)(inValues[4]));
            int ColOrder = ((int)(inValues[5]));
            int ColWidth = ((int)(inValues[6]));
            bool ColVisible = ((bool)(inValues[7]));
            bool ColReadOnly = ((bool)(inValues[8]));
            int ColSortOrder = ((int)(inValues[9]));
            bool ColSortAsc = ((bool)(inValues[10]));
            string HiveConnectionName = ((string)(inValues[11]));
            bool HiveActive = ((bool)(inValues[12]));
            string RepoSvrName = ((string)(inValues[13]));
            System.DateTime RowCreationDate = ((System.DateTime)(inValues[14]));
            System.DateTime RowLastModDate = ((System.DateTime)(inValues[15]));
            int RowNbr = ((int)(inValues[16]));
            bool RC = ((bool)(inValues[17]));
            string rMsg = ((string)(inValues[18]));
            return this.BeginsaveGridLayout(SecureID, ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg, callback, asyncState);
        }
        
        private object[] OnEndsaveGridLayout(System.IAsyncResult result) {
            string UserID = this.GetDefaultValueForInitialization<string>();
            string ScreenName = this.GetDefaultValueForInitialization<string>();
            string GridName = this.GetDefaultValueForInitialization<string>();
            string ColName = this.GetDefaultValueForInitialization<string>();
            int ColOrder = this.GetDefaultValueForInitialization<int>();
            int ColWidth = this.GetDefaultValueForInitialization<int>();
            bool ColVisible = this.GetDefaultValueForInitialization<bool>();
            bool ColReadOnly = this.GetDefaultValueForInitialization<bool>();
            int ColSortOrder = this.GetDefaultValueForInitialization<int>();
            bool ColSortAsc = this.GetDefaultValueForInitialization<bool>();
            string HiveConnectionName = this.GetDefaultValueForInitialization<string>();
            bool HiveActive = this.GetDefaultValueForInitialization<bool>();
            string RepoSvrName = this.GetDefaultValueForInitialization<string>();
            System.DateTime RowCreationDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime RowLastModDate = this.GetDefaultValueForInitialization<System.DateTime>();
            int RowNbr = this.GetDefaultValueForInitialization<int>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string rMsg = this.GetDefaultValueForInitialization<string>();
            this.EndsaveGridLayout(ref UserID, ref ScreenName, ref GridName, ref ColName, ref ColOrder, ref ColWidth, ref ColVisible, ref ColReadOnly, ref ColSortOrder, ref ColSortAsc, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref RowNbr, ref RC, ref rMsg, result);
            return new object[] {
                    UserID,
                    ScreenName,
                    GridName,
                    ColName,
                    ColOrder,
                    ColWidth,
                    ColVisible,
                    ColReadOnly,
                    ColSortOrder,
                    ColSortAsc,
                    HiveConnectionName,
                    HiveActive,
                    RepoSvrName,
                    RowCreationDate,
                    RowLastModDate,
                    RowNbr,
                    RC,
                    rMsg};
        }
        
        private void OnsaveGridLayoutCompleted(object state) {
            if ((this.saveGridLayoutCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveGridLayoutCompleted(this, new saveGridLayoutCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveGridLayoutAsync(
                    string SecureID, 
                    string UserID, 
                    string ScreenName, 
                    string GridName, 
                    string ColName, 
                    int ColOrder, 
                    int ColWidth, 
                    bool ColVisible, 
                    bool ColReadOnly, 
                    int ColSortOrder, 
                    bool ColSortAsc, 
                    string HiveConnectionName, 
                    bool HiveActive, 
                    string RepoSvrName, 
                    System.DateTime RowCreationDate, 
                    System.DateTime RowLastModDate, 
                    int RowNbr, 
                    bool RC, 
                    string rMsg) {
            this.saveGridLayoutAsync(SecureID, UserID, ScreenName, GridName, ColName, ColOrder, ColWidth, ColVisible, ColReadOnly, ColSortOrder, ColSortAsc, HiveConnectionName, HiveActive, RepoSvrName, RowCreationDate, RowLastModDate, RowNbr, RC, rMsg, null);
        }
        
        public void saveGridLayoutAsync(
                    string SecureID, 
                    string UserID, 
                    string ScreenName, 
                    string GridName, 
                    string ColName, 
                    int ColOrder, 
                    int ColWidth, 
                    bool ColVisible, 
                    bool ColReadOnly, 
                    int ColSortOrder, 
                    bool ColSortAsc, 
                    string HiveConnectionName, 
                    bool HiveActive, 
                    string RepoSvrName, 
                    System.DateTime RowCreationDate, 
                    System.DateTime RowLastModDate, 
                    int RowNbr, 
                    bool RC, 
                    string rMsg, 
                    object userState) {
            if ((this.onBeginsaveGridLayoutDelegate == null)) {
                this.onBeginsaveGridLayoutDelegate = new BeginOperationDelegate(this.OnBeginsaveGridLayout);
            }
            if ((this.onEndsaveGridLayoutDelegate == null)) {
                this.onEndsaveGridLayoutDelegate = new EndOperationDelegate(this.OnEndsaveGridLayout);
            }
            if ((this.onsaveGridLayoutCompletedDelegate == null)) {
                this.onsaveGridLayoutCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveGridLayoutCompleted);
            }
            base.InvokeAsync(this.onBeginsaveGridLayoutDelegate, new object[] {
                        SecureID,
                        UserID,
                        ScreenName,
                        GridName,
                        ColName,
                        ColOrder,
                        ColWidth,
                        ColVisible,
                        ColReadOnly,
                        ColSortOrder,
                        ColSortAsc,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName,
                        RowCreationDate,
                        RowLastModDate,
                        RowNbr,
                        RC,
                        rMsg}, this.onEndsaveGridLayoutDelegate, this.onsaveGridLayoutCompletedDelegate, userState);
        }
        
        public void saveScreenState(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            base.Channel.saveScreenState(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveScreenState(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, ref string rMsg, ref bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveScreenState(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsaveScreenState(ref string rMsg, ref bool RC, System.IAsyncResult result) {
            base.Channel.EndsaveScreenState(ref rMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginsaveScreenState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string ScreenName = ((string)(inValues[2]));
            System.Collections.Generic.Dictionary<string, string> DICT = ((System.Collections.Generic.Dictionary<string, string>)(inValues[3]));
            string rMsg = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string HiveConnectionName = ((string)(inValues[6]));
            bool HiveActive = ((bool)(inValues[7]));
            string RepoSvrName = ((string)(inValues[8]));
            return this.BeginsaveScreenState(SecureID, UID, ScreenName, DICT, ref rMsg, ref RC, HiveConnectionName, HiveActive, RepoSvrName, callback, asyncState);
        }
        
        private object[] OnEndsaveScreenState(System.IAsyncResult result) {
            string rMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndsaveScreenState(ref rMsg, ref RC, result);
            return new object[] {
                    rMsg,
                    RC};
        }
        
        private void OnsaveScreenStateCompleted(object state) {
            if ((this.saveScreenStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveScreenStateCompleted(this, new saveScreenStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveScreenStateAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName) {
            this.saveScreenStateAsync(SecureID, UID, ScreenName, DICT, rMsg, RC, HiveConnectionName, HiveActive, RepoSvrName, null);
        }
        
        public void saveScreenStateAsync(string SecureID, string UID, string ScreenName, System.Collections.Generic.Dictionary<string, string> DICT, string rMsg, bool RC, string HiveConnectionName, bool HiveActive, string RepoSvrName, object userState) {
            if ((this.onBeginsaveScreenStateDelegate == null)) {
                this.onBeginsaveScreenStateDelegate = new BeginOperationDelegate(this.OnBeginsaveScreenState);
            }
            if ((this.onEndsaveScreenStateDelegate == null)) {
                this.onEndsaveScreenStateDelegate = new EndOperationDelegate(this.OnEndsaveScreenState);
            }
            if ((this.onsaveScreenStateCompletedDelegate == null)) {
                this.onsaveScreenStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveScreenStateCompleted);
            }
            base.InvokeAsync(this.onBeginsaveScreenStateDelegate, new object[] {
                        SecureID,
                        UID,
                        ScreenName,
                        DICT,
                        rMsg,
                        RC,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName}, this.onEndsaveScreenStateDelegate, this.onsaveScreenStateCompletedDelegate, userState);
        }
        
        public void getUserParms(string SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms) {
            base.Channel.getUserParms(SecureID, UserID, ref UserParms);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserParms(string SecureID, string UserID, ref System.Collections.Generic.Dictionary<string, string> UserParms, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserParms(SecureID, UserID, ref UserParms, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetUserParms(ref System.Collections.Generic.Dictionary<string, string> UserParms, System.IAsyncResult result) {
            base.Channel.EndgetUserParms(ref UserParms, result);
        }
        
        private System.IAsyncResult OnBegingetUserParms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> UserParms = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            return this.BegingetUserParms(SecureID, UserID, ref UserParms, callback, asyncState);
        }
        
        private object[] OnEndgetUserParms(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> UserParms = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, string>>();
            this.EndgetUserParms(ref UserParms, result);
            return new object[] {
                    UserParms};
        }
        
        private void OngetUserParmsCompleted(object state) {
            if ((this.getUserParmsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserParmsCompleted(this, new getUserParmsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserParmsAsync(string SecureID, string UserID, System.Collections.Generic.Dictionary<string, string> UserParms) {
            this.getUserParmsAsync(SecureID, UserID, UserParms, null);
        }
        
        public void getUserParmsAsync(string SecureID, string UserID, System.Collections.Generic.Dictionary<string, string> UserParms, object userState) {
            if ((this.onBegingetUserParmsDelegate == null)) {
                this.onBegingetUserParmsDelegate = new BeginOperationDelegate(this.OnBegingetUserParms);
            }
            if ((this.onEndgetUserParmsDelegate == null)) {
                this.onEndgetUserParmsDelegate = new EndOperationDelegate(this.OnEndgetUserParms);
            }
            if ((this.ongetUserParmsCompletedDelegate == null)) {
                this.ongetUserParmsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserParmsCompleted);
            }
            base.InvokeAsync(this.onBegingetUserParmsDelegate, new object[] {
                        SecureID,
                        UserID,
                        UserParms}, this.onEndgetUserParmsDelegate, this.ongetUserParmsCompletedDelegate, userState);
        }
        
        public void ParseLicDictionary(string SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D) {
            base.Channel.ParseLicDictionary(SecureID, S, ref D);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginParseLicDictionary(string SecureID, string S, ref System.Collections.Generic.Dictionary<string, string> D, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginParseLicDictionary(SecureID, S, ref D, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndParseLicDictionary(ref System.Collections.Generic.Dictionary<string, string> D, System.IAsyncResult result) {
            base.Channel.EndParseLicDictionary(ref D, result);
        }
        
        private System.IAsyncResult OnBeginParseLicDictionary(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string S = ((string)(inValues[1]));
            System.Collections.Generic.Dictionary<string, string> D = ((System.Collections.Generic.Dictionary<string, string>)(inValues[2]));
            return this.BeginParseLicDictionary(SecureID, S, ref D, callback, asyncState);
        }
        
        private object[] OnEndParseLicDictionary(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> D = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, string>>();
            this.EndParseLicDictionary(ref D, result);
            return new object[] {
                    D};
        }
        
        private void OnParseLicDictionaryCompleted(object state) {
            if ((this.ParseLicDictionaryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ParseLicDictionaryCompleted(this, new ParseLicDictionaryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ParseLicDictionaryAsync(string SecureID, string S, System.Collections.Generic.Dictionary<string, string> D) {
            this.ParseLicDictionaryAsync(SecureID, S, D, null);
        }
        
        public void ParseLicDictionaryAsync(string SecureID, string S, System.Collections.Generic.Dictionary<string, string> D, object userState) {
            if ((this.onBeginParseLicDictionaryDelegate == null)) {
                this.onBeginParseLicDictionaryDelegate = new BeginOperationDelegate(this.OnBeginParseLicDictionary);
            }
            if ((this.onEndParseLicDictionaryDelegate == null)) {
                this.onEndParseLicDictionaryDelegate = new EndOperationDelegate(this.OnEndParseLicDictionary);
            }
            if ((this.onParseLicDictionaryCompletedDelegate == null)) {
                this.onParseLicDictionaryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnParseLicDictionaryCompleted);
            }
            base.InvokeAsync(this.onBeginParseLicDictionaryDelegate, new object[] {
                        SecureID,
                        S,
                        D}, this.onEndParseLicDictionaryDelegate, this.onParseLicDictionaryCompletedDelegate, userState);
        }
        
        public string LicenseType(string SecureID, ref bool RC, ref string RetMsg) {
            return base.Channel.LicenseType(SecureID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLicenseType(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLicenseType(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndLicenseType(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndLicenseType(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginLicenseType(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            string RetMsg = ((string)(inValues[2]));
            return this.BeginLicenseType(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndLicenseType(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndLicenseType(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OnLicenseTypeCompleted(object state) {
            if ((this.LicenseTypeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LicenseTypeCompleted(this, new LicenseTypeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LicenseTypeAsync(string SecureID, bool RC, string RetMsg) {
            this.LicenseTypeAsync(SecureID, RC, RetMsg, null);
        }
        
        public void LicenseTypeAsync(string SecureID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginLicenseTypeDelegate == null)) {
                this.onBeginLicenseTypeDelegate = new BeginOperationDelegate(this.OnBeginLicenseType);
            }
            if ((this.onEndLicenseTypeDelegate == null)) {
                this.onEndLicenseTypeDelegate = new EndOperationDelegate(this.OnEndLicenseType);
            }
            if ((this.onLicenseTypeCompletedDelegate == null)) {
                this.onLicenseTypeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLicenseTypeCompleted);
            }
            base.InvokeAsync(this.onBeginLicenseTypeDelegate, new object[] {
                        SecureID,
                        RC,
                        RetMsg}, this.onEndLicenseTypeDelegate, this.onLicenseTypeCompletedDelegate, userState);
        }
        
        public int GetNbrUsers(string SecureID) {
            return base.Channel.GetNbrUsers(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNbrUsers(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNbrUsers(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetNbrUsers(System.IAsyncResult result) {
            return base.Channel.EndGetNbrUsers(result);
        }
        
        private System.IAsyncResult OnBeginGetNbrUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetNbrUsers(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetNbrUsers(System.IAsyncResult result) {
            int retVal = this.EndGetNbrUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNbrUsersCompleted(object state) {
            if ((this.GetNbrUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNbrUsersCompleted(this, new GetNbrUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNbrUsersAsync(string SecureID) {
            this.GetNbrUsersAsync(SecureID, null);
        }
        
        public void GetNbrUsersAsync(string SecureID, object userState) {
            if ((this.onBeginGetNbrUsersDelegate == null)) {
                this.onBeginGetNbrUsersDelegate = new BeginOperationDelegate(this.OnBeginGetNbrUsers);
            }
            if ((this.onEndGetNbrUsersDelegate == null)) {
                this.onEndGetNbrUsersDelegate = new EndOperationDelegate(this.OnEndGetNbrUsers);
            }
            if ((this.onGetNbrUsersCompletedDelegate == null)) {
                this.onGetNbrUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNbrUsersCompleted);
            }
            base.InvokeAsync(this.onBeginGetNbrUsersDelegate, new object[] {
                        SecureID}, this.onEndGetNbrUsersDelegate, this.onGetNbrUsersCompletedDelegate, userState);
        }
        
        public bool isLease(string SecureID, ref bool RC, ref string RetMsg) {
            return base.Channel.isLease(SecureID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginisLease(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginisLease(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndisLease(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndisLease(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginisLease(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            string RetMsg = ((string)(inValues[2]));
            return this.BeginisLease(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndisLease(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndisLease(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OnisLeaseCompleted(object state) {
            if ((this.isLeaseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.isLeaseCompleted(this, new isLeaseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void isLeaseAsync(string SecureID, bool RC, string RetMsg) {
            this.isLeaseAsync(SecureID, RC, RetMsg, null);
        }
        
        public void isLeaseAsync(string SecureID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginisLeaseDelegate == null)) {
                this.onBeginisLeaseDelegate = new BeginOperationDelegate(this.OnBeginisLease);
            }
            if ((this.onEndisLeaseDelegate == null)) {
                this.onEndisLeaseDelegate = new EndOperationDelegate(this.OnEndisLease);
            }
            if ((this.onisLeaseCompletedDelegate == null)) {
                this.onisLeaseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnisLeaseCompleted);
            }
            base.InvokeAsync(this.onBeginisLeaseDelegate, new object[] {
                        SecureID,
                        RC,
                        RetMsg}, this.onEndisLeaseDelegate, this.onisLeaseCompletedDelegate, userState);
        }
        
        public int getMaxClients(string SecureID, ref bool RC, ref string RetMsg) {
            return base.Channel.getMaxClients(SecureID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetMaxClients(string SecureID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMaxClients(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndgetMaxClients(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetMaxClients(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetMaxClients(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            string RetMsg = ((string)(inValues[2]));
            return this.BegingetMaxClients(SecureID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndgetMaxClients(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            int retVal = this.EndgetMaxClients(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetMaxClientsCompleted(object state) {
            if ((this.getMaxClientsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMaxClientsCompleted(this, new getMaxClientsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMaxClientsAsync(string SecureID, bool RC, string RetMsg) {
            this.getMaxClientsAsync(SecureID, RC, RetMsg, null);
        }
        
        public void getMaxClientsAsync(string SecureID, bool RC, string RetMsg, object userState) {
            if ((this.onBegingetMaxClientsDelegate == null)) {
                this.onBegingetMaxClientsDelegate = new BeginOperationDelegate(this.OnBegingetMaxClients);
            }
            if ((this.onEndgetMaxClientsDelegate == null)) {
                this.onEndgetMaxClientsDelegate = new EndOperationDelegate(this.OnEndgetMaxClients);
            }
            if ((this.ongetMaxClientsCompletedDelegate == null)) {
                this.ongetMaxClientsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMaxClientsCompleted);
            }
            base.InvokeAsync(this.onBegingetMaxClientsDelegate, new object[] {
                        SecureID,
                        RC,
                        RetMsg}, this.onEndgetMaxClientsDelegate, this.ongetMaxClientsCompletedDelegate, userState);
        }
        
        public string GetUserHostName(string SecureID) {
            return base.Channel.GetUserHostName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserHostName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserHostName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserHostName(System.IAsyncResult result) {
            return base.Channel.EndGetUserHostName(result);
        }
        
        private System.IAsyncResult OnBeginGetUserHostName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetUserHostName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetUserHostName(System.IAsyncResult result) {
            string retVal = this.EndGetUserHostName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserHostNameCompleted(object state) {
            if ((this.GetUserHostNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserHostNameCompleted(this, new GetUserHostNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserHostNameAsync(string SecureID) {
            this.GetUserHostNameAsync(SecureID, null);
        }
        
        public void GetUserHostNameAsync(string SecureID, object userState) {
            if ((this.onBeginGetUserHostNameDelegate == null)) {
                this.onBeginGetUserHostNameDelegate = new BeginOperationDelegate(this.OnBeginGetUserHostName);
            }
            if ((this.onEndGetUserHostNameDelegate == null)) {
                this.onEndGetUserHostNameDelegate = new EndOperationDelegate(this.OnEndGetUserHostName);
            }
            if ((this.onGetUserHostNameCompletedDelegate == null)) {
                this.onGetUserHostNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserHostNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserHostNameDelegate, new object[] {
                        SecureID}, this.onEndGetUserHostNameDelegate, this.onGetUserHostNameCompletedDelegate, userState);
        }
        
        public string GetUserHostAddress(string SecureID) {
            return base.Channel.GetUserHostAddress(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetUserHostAddress(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserHostAddress(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetUserHostAddress(System.IAsyncResult result) {
            return base.Channel.EndGetUserHostAddress(result);
        }
        
        private System.IAsyncResult OnBeginGetUserHostAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetUserHostAddress(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetUserHostAddress(System.IAsyncResult result) {
            string retVal = this.EndGetUserHostAddress(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserHostAddressCompleted(object state) {
            if ((this.GetUserHostAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserHostAddressCompleted(this, new GetUserHostAddressCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserHostAddressAsync(string SecureID) {
            this.GetUserHostAddressAsync(SecureID, null);
        }
        
        public void GetUserHostAddressAsync(string SecureID, object userState) {
            if ((this.onBeginGetUserHostAddressDelegate == null)) {
                this.onBeginGetUserHostAddressDelegate = new BeginOperationDelegate(this.OnBeginGetUserHostAddress);
            }
            if ((this.onEndGetUserHostAddressDelegate == null)) {
                this.onEndGetUserHostAddressDelegate = new EndOperationDelegate(this.OnEndGetUserHostAddress);
            }
            if ((this.onGetUserHostAddressCompletedDelegate == null)) {
                this.onGetUserHostAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserHostAddressCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserHostAddressDelegate, new object[] {
                        SecureID}, this.onEndGetUserHostAddressDelegate, this.onGetUserHostAddressCompletedDelegate, userState);
        }
        
        public string getUserGuidID(string SecureID, string UserLoginId) {
            return base.Channel.getUserGuidID(SecureID, UserLoginId);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserGuidID(string SecureID, string UserLoginId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserGuidID(SecureID, UserLoginId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetUserGuidID(System.IAsyncResult result) {
            return base.Channel.EndgetUserGuidID(result);
        }
        
        private System.IAsyncResult OnBegingetUserGuidID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserLoginId = ((string)(inValues[1]));
            return this.BegingetUserGuidID(SecureID, UserLoginId, callback, asyncState);
        }
        
        private object[] OnEndgetUserGuidID(System.IAsyncResult result) {
            string retVal = this.EndgetUserGuidID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetUserGuidIDCompleted(object state) {
            if ((this.getUserGuidIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserGuidIDCompleted(this, new getUserGuidIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserGuidIDAsync(string SecureID, string UserLoginId) {
            this.getUserGuidIDAsync(SecureID, UserLoginId, null);
        }
        
        public void getUserGuidIDAsync(string SecureID, string UserLoginId, object userState) {
            if ((this.onBegingetUserGuidIDDelegate == null)) {
                this.onBegingetUserGuidIDDelegate = new BeginOperationDelegate(this.OnBegingetUserGuidID);
            }
            if ((this.onEndgetUserGuidIDDelegate == null)) {
                this.onEndgetUserGuidIDDelegate = new EndOperationDelegate(this.OnEndgetUserGuidID);
            }
            if ((this.ongetUserGuidIDCompletedDelegate == null)) {
                this.ongetUserGuidIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserGuidIDCompleted);
            }
            base.InvokeAsync(this.onBegingetUserGuidIDDelegate, new object[] {
                        SecureID,
                        UserLoginId}, this.onEndgetUserGuidIDDelegate, this.ongetUserGuidIDCompletedDelegate, userState);
        }
        
        public System.Collections.Generic.Dictionary<string, System.DateTime> ProcessDates(string SecureID) {
            return base.Channel.ProcessDates(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginProcessDates(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginProcessDates(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.Collections.Generic.Dictionary<string, System.DateTime> EndProcessDates(System.IAsyncResult result) {
            return base.Channel.EndProcessDates(result);
        }
        
        private System.IAsyncResult OnBeginProcessDates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginProcessDates(SecureID, callback, asyncState);
        }
        
        private object[] OnEndProcessDates(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, System.DateTime> retVal = this.EndProcessDates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnProcessDatesCompleted(object state) {
            if ((this.ProcessDatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ProcessDatesCompleted(this, new ProcessDatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ProcessDatesAsync(string SecureID) {
            this.ProcessDatesAsync(SecureID, null);
        }
        
        public void ProcessDatesAsync(string SecureID, object userState) {
            if ((this.onBeginProcessDatesDelegate == null)) {
                this.onBeginProcessDatesDelegate = new BeginOperationDelegate(this.OnBeginProcessDates);
            }
            if ((this.onEndProcessDatesDelegate == null)) {
                this.onEndProcessDatesDelegate = new EndOperationDelegate(this.OnEndProcessDates);
            }
            if ((this.onProcessDatesCompletedDelegate == null)) {
                this.onProcessDatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnProcessDatesCompleted);
            }
            base.InvokeAsync(this.onBeginProcessDatesDelegate, new object[] {
                        SecureID}, this.onEndProcessDatesDelegate, this.onProcessDatesCompletedDelegate, userState);
        }
        
        public int GetNbrMachineAll(string SecureID) {
            return base.Channel.GetNbrMachineAll(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNbrMachineAll(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNbrMachineAll(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetNbrMachineAll(System.IAsyncResult result) {
            return base.Channel.EndGetNbrMachineAll(result);
        }
        
        private System.IAsyncResult OnBeginGetNbrMachineAll(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetNbrMachineAll(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetNbrMachineAll(System.IAsyncResult result) {
            int retVal = this.EndGetNbrMachineAll(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNbrMachineAllCompleted(object state) {
            if ((this.GetNbrMachineAllCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNbrMachineAllCompleted(this, new GetNbrMachineAllCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNbrMachineAllAsync(string SecureID) {
            this.GetNbrMachineAllAsync(SecureID, null);
        }
        
        public void GetNbrMachineAllAsync(string SecureID, object userState) {
            if ((this.onBeginGetNbrMachineAllDelegate == null)) {
                this.onBeginGetNbrMachineAllDelegate = new BeginOperationDelegate(this.OnBeginGetNbrMachineAll);
            }
            if ((this.onEndGetNbrMachineAllDelegate == null)) {
                this.onEndGetNbrMachineAllDelegate = new EndOperationDelegate(this.OnEndGetNbrMachineAll);
            }
            if ((this.onGetNbrMachineAllCompletedDelegate == null)) {
                this.onGetNbrMachineAllCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNbrMachineAllCompleted);
            }
            base.InvokeAsync(this.onBeginGetNbrMachineAllDelegate, new object[] {
                        SecureID}, this.onEndGetNbrMachineAllDelegate, this.onGetNbrMachineAllCompletedDelegate, userState);
        }
        
        public int GetNbrMachine(string SecureID, string MachineName) {
            return base.Channel.GetNbrMachine(SecureID, MachineName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetNbrMachine(string SecureID, string MachineName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetNbrMachine(SecureID, MachineName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndGetNbrMachine(System.IAsyncResult result) {
            return base.Channel.EndGetNbrMachine(result);
        }
        
        private System.IAsyncResult OnBeginGetNbrMachine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string MachineName = ((string)(inValues[1]));
            return this.BeginGetNbrMachine(SecureID, MachineName, callback, asyncState);
        }
        
        private object[] OnEndGetNbrMachine(System.IAsyncResult result) {
            int retVal = this.EndGetNbrMachine(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetNbrMachineCompleted(object state) {
            if ((this.GetNbrMachineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetNbrMachineCompleted(this, new GetNbrMachineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetNbrMachineAsync(string SecureID, string MachineName) {
            this.GetNbrMachineAsync(SecureID, MachineName, null);
        }
        
        public void GetNbrMachineAsync(string SecureID, string MachineName, object userState) {
            if ((this.onBeginGetNbrMachineDelegate == null)) {
                this.onBeginGetNbrMachineDelegate = new BeginOperationDelegate(this.OnBeginGetNbrMachine);
            }
            if ((this.onEndGetNbrMachineDelegate == null)) {
                this.onEndGetNbrMachineDelegate = new EndOperationDelegate(this.OnEndGetNbrMachine);
            }
            if ((this.onGetNbrMachineCompletedDelegate == null)) {
                this.onGetNbrMachineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetNbrMachineCompleted);
            }
            base.InvokeAsync(this.onBeginGetNbrMachineDelegate, new object[] {
                        SecureID,
                        MachineName}, this.onEndGetNbrMachineDelegate, this.onGetNbrMachineCompletedDelegate, userState);
        }
        
        public bool isLicenseLocatedOnAssignedMachine(string SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg) {
            return base.Channel.isLicenseLocatedOnAssignedMachine(SecureID, ref ServerValText, ref InstanceValText, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginisLicenseLocatedOnAssignedMachine(string SecureID, ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginisLicenseLocatedOnAssignedMachine(SecureID, ref ServerValText, ref InstanceValText, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndisLicenseLocatedOnAssignedMachine(ref string ServerValText, ref string InstanceValText, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndisLicenseLocatedOnAssignedMachine(ref ServerValText, ref InstanceValText, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginisLicenseLocatedOnAssignedMachine(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ServerValText = ((string)(inValues[1]));
            string InstanceValText = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BeginisLicenseLocatedOnAssignedMachine(SecureID, ref ServerValText, ref InstanceValText, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndisLicenseLocatedOnAssignedMachine(System.IAsyncResult result) {
            string ServerValText = this.GetDefaultValueForInitialization<string>();
            string InstanceValText = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndisLicenseLocatedOnAssignedMachine(ref ServerValText, ref InstanceValText, ref RC, ref RetMsg, result);
            return new object[] {
                    ServerValText,
                    InstanceValText,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OnisLicenseLocatedOnAssignedMachineCompleted(object state) {
            if ((this.isLicenseLocatedOnAssignedMachineCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.isLicenseLocatedOnAssignedMachineCompleted(this, new isLicenseLocatedOnAssignedMachineCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void isLicenseLocatedOnAssignedMachineAsync(string SecureID, string ServerValText, string InstanceValText, bool RC, string RetMsg) {
            this.isLicenseLocatedOnAssignedMachineAsync(SecureID, ServerValText, InstanceValText, RC, RetMsg, null);
        }
        
        public void isLicenseLocatedOnAssignedMachineAsync(string SecureID, string ServerValText, string InstanceValText, bool RC, string RetMsg, object userState) {
            if ((this.onBeginisLicenseLocatedOnAssignedMachineDelegate == null)) {
                this.onBeginisLicenseLocatedOnAssignedMachineDelegate = new BeginOperationDelegate(this.OnBeginisLicenseLocatedOnAssignedMachine);
            }
            if ((this.onEndisLicenseLocatedOnAssignedMachineDelegate == null)) {
                this.onEndisLicenseLocatedOnAssignedMachineDelegate = new EndOperationDelegate(this.OnEndisLicenseLocatedOnAssignedMachine);
            }
            if ((this.onisLicenseLocatedOnAssignedMachineCompletedDelegate == null)) {
                this.onisLicenseLocatedOnAssignedMachineCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnisLicenseLocatedOnAssignedMachineCompleted);
            }
            base.InvokeAsync(this.onBeginisLicenseLocatedOnAssignedMachineDelegate, new object[] {
                        SecureID,
                        ServerValText,
                        InstanceValText,
                        RC,
                        RetMsg}, this.onEndisLicenseLocatedOnAssignedMachineDelegate, this.onisLicenseLocatedOnAssignedMachineCompletedDelegate, userState);
        }
        
        public string GetXrt(string SecureID, bool RC, string RetMsg) {
            return base.Channel.GetXrt(SecureID, RC, RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXrt(string SecureID, bool RC, string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXrt(SecureID, RC, RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetXrt(System.IAsyncResult result) {
            return base.Channel.EndGetXrt(result);
        }
        
        private System.IAsyncResult OnBeginGetXrt(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            string RetMsg = ((string)(inValues[2]));
            return this.BeginGetXrt(SecureID, RC, RetMsg, callback, asyncState);
        }
        
        private object[] OnEndGetXrt(System.IAsyncResult result) {
            string retVal = this.EndGetXrt(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXrtCompleted(object state) {
            if ((this.GetXrtCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXrtCompleted(this, new GetXrtCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXrtAsync(string SecureID, bool RC, string RetMsg) {
            this.GetXrtAsync(SecureID, RC, RetMsg, null);
        }
        
        public void GetXrtAsync(string SecureID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginGetXrtDelegate == null)) {
                this.onBeginGetXrtDelegate = new BeginOperationDelegate(this.OnBeginGetXrt);
            }
            if ((this.onEndGetXrtDelegate == null)) {
                this.onEndGetXrtDelegate = new EndOperationDelegate(this.OnEndGetXrt);
            }
            if ((this.onGetXrtCompletedDelegate == null)) {
                this.onGetXrtCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXrtCompleted);
            }
            base.InvokeAsync(this.onBeginGetXrtDelegate, new object[] {
                        SecureID,
                        RC,
                        RetMsg}, this.onEndGetXrtDelegate, this.onGetXrtCompletedDelegate, userState);
        }
        
        public string getSqlServerVersion(string SecureID) {
            return base.Channel.getSqlServerVersion(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSqlServerVersion(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSqlServerVersion(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetSqlServerVersion(System.IAsyncResult result) {
            return base.Channel.EndgetSqlServerVersion(result);
        }
        
        private System.IAsyncResult OnBegingetSqlServerVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetSqlServerVersion(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetSqlServerVersion(System.IAsyncResult result) {
            string retVal = this.EndgetSqlServerVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSqlServerVersionCompleted(object state) {
            if ((this.getSqlServerVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSqlServerVersionCompleted(this, new getSqlServerVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSqlServerVersionAsync(string SecureID) {
            this.getSqlServerVersionAsync(SecureID, null);
        }
        
        public void getSqlServerVersionAsync(string SecureID, object userState) {
            if ((this.onBegingetSqlServerVersionDelegate == null)) {
                this.onBegingetSqlServerVersionDelegate = new BeginOperationDelegate(this.OnBegingetSqlServerVersion);
            }
            if ((this.onEndgetSqlServerVersionDelegate == null)) {
                this.onEndgetSqlServerVersionDelegate = new EndOperationDelegate(this.OnEndgetSqlServerVersion);
            }
            if ((this.ongetSqlServerVersionCompletedDelegate == null)) {
                this.ongetSqlServerVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSqlServerVersionCompleted);
            }
            base.InvokeAsync(this.onBegingetSqlServerVersionDelegate, new object[] {
                        SecureID}, this.onEndgetSqlServerVersionDelegate, this.ongetSqlServerVersionCompletedDelegate, userState);
        }
        
        public void RecordGrowth(string SecureID, ref bool RC) {
            base.Channel.RecordGrowth(SecureID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecordGrowth(string SecureID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecordGrowth(SecureID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRecordGrowth(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndRecordGrowth(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginRecordGrowth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            return this.BeginRecordGrowth(SecureID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndRecordGrowth(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndRecordGrowth(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnRecordGrowthCompleted(object state) {
            if ((this.RecordGrowthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecordGrowthCompleted(this, new RecordGrowthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecordGrowthAsync(string SecureID, bool RC) {
            this.RecordGrowthAsync(SecureID, RC, null);
        }
        
        public void RecordGrowthAsync(string SecureID, bool RC, object userState) {
            if ((this.onBeginRecordGrowthDelegate == null)) {
                this.onBeginRecordGrowthDelegate = new BeginOperationDelegate(this.OnBeginRecordGrowth);
            }
            if ((this.onEndRecordGrowthDelegate == null)) {
                this.onEndRecordGrowthDelegate = new EndOperationDelegate(this.OnEndRecordGrowth);
            }
            if ((this.onRecordGrowthCompletedDelegate == null)) {
                this.onRecordGrowthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecordGrowthCompleted);
            }
            base.InvokeAsync(this.onBeginRecordGrowthDelegate, new object[] {
                        SecureID,
                        RC}, this.onEndRecordGrowthDelegate, this.onRecordGrowthCompletedDelegate, userState);
        }
        
        public string ParseLic(string SecureID, string LT, string tgtKey) {
            return base.Channel.ParseLic(SecureID, LT, tgtKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginParseLic(string SecureID, string LT, string tgtKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginParseLic(SecureID, LT, tgtKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndParseLic(System.IAsyncResult result) {
            return base.Channel.EndParseLic(result);
        }
        
        private System.IAsyncResult OnBeginParseLic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string LT = ((string)(inValues[1]));
            string tgtKey = ((string)(inValues[2]));
            return this.BeginParseLic(SecureID, LT, tgtKey, callback, asyncState);
        }
        
        private object[] OnEndParseLic(System.IAsyncResult result) {
            string retVal = this.EndParseLic(result);
            return new object[] {
                    retVal};
        }
        
        private void OnParseLicCompleted(object state) {
            if ((this.ParseLicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ParseLicCompleted(this, new ParseLicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ParseLicAsync(string SecureID, string LT, string tgtKey) {
            this.ParseLicAsync(SecureID, LT, tgtKey, null);
        }
        
        public void ParseLicAsync(string SecureID, string LT, string tgtKey, object userState) {
            if ((this.onBeginParseLicDelegate == null)) {
                this.onBeginParseLicDelegate = new BeginOperationDelegate(this.OnBeginParseLic);
            }
            if ((this.onEndParseLicDelegate == null)) {
                this.onEndParseLicDelegate = new EndOperationDelegate(this.OnEndParseLic);
            }
            if ((this.onParseLicCompletedDelegate == null)) {
                this.onParseLicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnParseLicCompleted);
            }
            base.InvokeAsync(this.onBeginParseLicDelegate, new object[] {
                        SecureID,
                        LT,
                        tgtKey}, this.onEndParseLicDelegate, this.onParseLicCompletedDelegate, userState);
        }
        
        public string GetLoggedinUserName(string SecureID) {
            return base.Channel.GetLoggedinUserName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLoggedinUserName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLoggedinUserName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetLoggedinUserName(System.IAsyncResult result) {
            return base.Channel.EndGetLoggedinUserName(result);
        }
        
        private System.IAsyncResult OnBeginGetLoggedinUserName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetLoggedinUserName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetLoggedinUserName(System.IAsyncResult result) {
            string retVal = this.EndGetLoggedinUserName(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLoggedinUserNameCompleted(object state) {
            if ((this.GetLoggedinUserNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLoggedinUserNameCompleted(this, new GetLoggedinUserNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLoggedinUserNameAsync(string SecureID) {
            this.GetLoggedinUserNameAsync(SecureID, null);
        }
        
        public void GetLoggedinUserNameAsync(string SecureID, object userState) {
            if ((this.onBeginGetLoggedinUserNameDelegate == null)) {
                this.onBeginGetLoggedinUserNameDelegate = new BeginOperationDelegate(this.OnBeginGetLoggedinUserName);
            }
            if ((this.onEndGetLoggedinUserNameDelegate == null)) {
                this.onEndGetLoggedinUserNameDelegate = new EndOperationDelegate(this.OnEndGetLoggedinUserName);
            }
            if ((this.onGetLoggedinUserNameCompletedDelegate == null)) {
                this.onGetLoggedinUserNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLoggedinUserNameCompleted);
            }
            base.InvokeAsync(this.onBeginGetLoggedinUserNameDelegate, new object[] {
                        SecureID}, this.onEndGetLoggedinUserNameDelegate, this.onGetLoggedinUserNameCompletedDelegate, userState);
        }
        
        public double getDBSIZEMB(string SecureID) {
            return base.Channel.getDBSIZEMB(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetDBSIZEMB(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDBSIZEMB(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public double EndgetDBSIZEMB(System.IAsyncResult result) {
            return base.Channel.EndgetDBSIZEMB(result);
        }
        
        private System.IAsyncResult OnBegingetDBSIZEMB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetDBSIZEMB(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetDBSIZEMB(System.IAsyncResult result) {
            double retVal = this.EndgetDBSIZEMB(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDBSIZEMBCompleted(object state) {
            if ((this.getDBSIZEMBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDBSIZEMBCompleted(this, new getDBSIZEMBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDBSIZEMBAsync(string SecureID) {
            this.getDBSIZEMBAsync(SecureID, null);
        }
        
        public void getDBSIZEMBAsync(string SecureID, object userState) {
            if ((this.onBegingetDBSIZEMBDelegate == null)) {
                this.onBegingetDBSIZEMBDelegate = new BeginOperationDelegate(this.OnBegingetDBSIZEMB);
            }
            if ((this.onEndgetDBSIZEMBDelegate == null)) {
                this.onEndgetDBSIZEMBDelegate = new EndOperationDelegate(this.OnEndgetDBSIZEMB);
            }
            if ((this.ongetDBSIZEMBCompletedDelegate == null)) {
                this.ongetDBSIZEMBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDBSIZEMBCompleted);
            }
            base.InvokeAsync(this.onBegingetDBSIZEMBDelegate, new object[] {
                        SecureID}, this.onEndgetDBSIZEMBDelegate, this.ongetDBSIZEMBCompletedDelegate, userState);
        }
        
        public void resetMissingEmailIds(string SecureID, string CurrUserGuidID, ref bool RC) {
            base.Channel.resetMissingEmailIds(SecureID, CurrUserGuidID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginresetMissingEmailIds(string SecureID, string CurrUserGuidID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginresetMissingEmailIds(SecureID, CurrUserGuidID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndresetMissingEmailIds(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndresetMissingEmailIds(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginresetMissingEmailIds(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CurrUserGuidID = ((string)(inValues[1]));
            bool RC = ((bool)(inValues[2]));
            return this.BeginresetMissingEmailIds(SecureID, CurrUserGuidID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndresetMissingEmailIds(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndresetMissingEmailIds(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnresetMissingEmailIdsCompleted(object state) {
            if ((this.resetMissingEmailIdsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.resetMissingEmailIdsCompleted(this, new resetMissingEmailIdsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void resetMissingEmailIdsAsync(string SecureID, string CurrUserGuidID, bool RC) {
            this.resetMissingEmailIdsAsync(SecureID, CurrUserGuidID, RC, null);
        }
        
        public void resetMissingEmailIdsAsync(string SecureID, string CurrUserGuidID, bool RC, object userState) {
            if ((this.onBeginresetMissingEmailIdsDelegate == null)) {
                this.onBeginresetMissingEmailIdsDelegate = new BeginOperationDelegate(this.OnBeginresetMissingEmailIds);
            }
            if ((this.onEndresetMissingEmailIdsDelegate == null)) {
                this.onEndresetMissingEmailIdsDelegate = new EndOperationDelegate(this.OnEndresetMissingEmailIds);
            }
            if ((this.onresetMissingEmailIdsCompletedDelegate == null)) {
                this.onresetMissingEmailIdsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnresetMissingEmailIdsCompleted);
            }
            base.InvokeAsync(this.onBeginresetMissingEmailIdsDelegate, new object[] {
                        SecureID,
                        CurrUserGuidID,
                        RC}, this.onEndresetMissingEmailIdsDelegate, this.onresetMissingEmailIdsCompletedDelegate, userState);
        }
        
        public void UserParmInsertUpdate(string SecureID, string ParmName, string UserID, string ParmVal, ref bool RC) {
            base.Channel.UserParmInsertUpdate(SecureID, ParmName, UserID, ParmVal, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginUserParmInsertUpdate(string SecureID, string ParmName, string UserID, string ParmVal, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUserParmInsertUpdate(SecureID, ParmName, UserID, ParmVal, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndUserParmInsertUpdate(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndUserParmInsertUpdate(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginUserParmInsertUpdate(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ParmName = ((string)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            string ParmVal = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            return this.BeginUserParmInsertUpdate(SecureID, ParmName, UserID, ParmVal, ref RC, callback, asyncState);
        }
        
        private object[] OnEndUserParmInsertUpdate(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndUserParmInsertUpdate(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnUserParmInsertUpdateCompleted(object state) {
            if ((this.UserParmInsertUpdateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UserParmInsertUpdateCompleted(this, new UserParmInsertUpdateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UserParmInsertUpdateAsync(string SecureID, string ParmName, string UserID, string ParmVal, bool RC) {
            this.UserParmInsertUpdateAsync(SecureID, ParmName, UserID, ParmVal, RC, null);
        }
        
        public void UserParmInsertUpdateAsync(string SecureID, string ParmName, string UserID, string ParmVal, bool RC, object userState) {
            if ((this.onBeginUserParmInsertUpdateDelegate == null)) {
                this.onBeginUserParmInsertUpdateDelegate = new BeginOperationDelegate(this.OnBeginUserParmInsertUpdate);
            }
            if ((this.onEndUserParmInsertUpdateDelegate == null)) {
                this.onEndUserParmInsertUpdateDelegate = new EndOperationDelegate(this.OnEndUserParmInsertUpdate);
            }
            if ((this.onUserParmInsertUpdateCompletedDelegate == null)) {
                this.onUserParmInsertUpdateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUserParmInsertUpdateCompleted);
            }
            base.InvokeAsync(this.onBeginUserParmInsertUpdateDelegate, new object[] {
                        SecureID,
                        ParmName,
                        UserID,
                        ParmVal,
                        RC}, this.onEndUserParmInsertUpdateDelegate, this.onUserParmInsertUpdateCompletedDelegate, userState);
        }
        
        public bool validateLogin(string SecureID, string UserLogin, string PW, ref string UserGuidID) {
            return base.Channel.validateLogin(SecureID, UserLogin, PW, ref UserGuidID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginvalidateLogin(string SecureID, string UserLogin, string PW, ref string UserGuidID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginvalidateLogin(SecureID, UserLogin, PW, ref UserGuidID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndvalidateLogin(ref string UserGuidID, System.IAsyncResult result) {
            return base.Channel.EndvalidateLogin(ref UserGuidID, result);
        }
        
        private System.IAsyncResult OnBeginvalidateLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserLogin = ((string)(inValues[1]));
            string PW = ((string)(inValues[2]));
            string UserGuidID = ((string)(inValues[3]));
            return this.BeginvalidateLogin(SecureID, UserLogin, PW, ref UserGuidID, callback, asyncState);
        }
        
        private object[] OnEndvalidateLogin(System.IAsyncResult result) {
            string UserGuidID = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndvalidateLogin(ref UserGuidID, result);
            return new object[] {
                    UserGuidID,
                    retVal};
        }
        
        private void OnvalidateLoginCompleted(object state) {
            if ((this.validateLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.validateLoginCompleted(this, new validateLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void validateLoginAsync(string SecureID, string UserLogin, string PW, string UserGuidID) {
            this.validateLoginAsync(SecureID, UserLogin, PW, UserGuidID, null);
        }
        
        public void validateLoginAsync(string SecureID, string UserLogin, string PW, string UserGuidID, object userState) {
            if ((this.onBeginvalidateLoginDelegate == null)) {
                this.onBeginvalidateLoginDelegate = new BeginOperationDelegate(this.OnBeginvalidateLogin);
            }
            if ((this.onEndvalidateLoginDelegate == null)) {
                this.onEndvalidateLoginDelegate = new EndOperationDelegate(this.OnEndvalidateLogin);
            }
            if ((this.onvalidateLoginCompletedDelegate == null)) {
                this.onvalidateLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnvalidateLoginCompleted);
            }
            base.InvokeAsync(this.onBeginvalidateLoginDelegate, new object[] {
                        SecureID,
                        UserLogin,
                        PW,
                        UserGuidID}, this.onEndvalidateLoginDelegate, this.onvalidateLoginCompletedDelegate, userState);
        }
        
        public string getLoggedInUser(string SecureID) {
            return base.Channel.getLoggedInUser(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLoggedInUser(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLoggedInUser(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetLoggedInUser(System.IAsyncResult result) {
            return base.Channel.EndgetLoggedInUser(result);
        }
        
        private System.IAsyncResult OnBegingetLoggedInUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetLoggedInUser(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetLoggedInUser(System.IAsyncResult result) {
            string retVal = this.EndgetLoggedInUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLoggedInUserCompleted(object state) {
            if ((this.getLoggedInUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLoggedInUserCompleted(this, new getLoggedInUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLoggedInUserAsync(string SecureID) {
            this.getLoggedInUserAsync(SecureID, null);
        }
        
        public void getLoggedInUserAsync(string SecureID, object userState) {
            if ((this.onBegingetLoggedInUserDelegate == null)) {
                this.onBegingetLoggedInUserDelegate = new BeginOperationDelegate(this.OnBegingetLoggedInUser);
            }
            if ((this.onEndgetLoggedInUserDelegate == null)) {
                this.onEndgetLoggedInUserDelegate = new EndOperationDelegate(this.OnEndgetLoggedInUser);
            }
            if ((this.ongetLoggedInUserCompletedDelegate == null)) {
                this.ongetLoggedInUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLoggedInUserCompleted);
            }
            base.InvokeAsync(this.onBegingetLoggedInUserDelegate, new object[] {
                        SecureID}, this.onEndgetLoggedInUserDelegate, this.ongetLoggedInUserCompletedDelegate, userState);
        }
        
        public string getAttachedMachineName(string SecureID) {
            return base.Channel.getAttachedMachineName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAttachedMachineName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAttachedMachineName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetAttachedMachineName(System.IAsyncResult result) {
            return base.Channel.EndgetAttachedMachineName(result);
        }
        
        private System.IAsyncResult OnBegingetAttachedMachineName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetAttachedMachineName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetAttachedMachineName(System.IAsyncResult result) {
            string retVal = this.EndgetAttachedMachineName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAttachedMachineNameCompleted(object state) {
            if ((this.getAttachedMachineNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAttachedMachineNameCompleted(this, new getAttachedMachineNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAttachedMachineNameAsync(string SecureID) {
            this.getAttachedMachineNameAsync(SecureID, null);
        }
        
        public void getAttachedMachineNameAsync(string SecureID, object userState) {
            if ((this.onBegingetAttachedMachineNameDelegate == null)) {
                this.onBegingetAttachedMachineNameDelegate = new BeginOperationDelegate(this.OnBegingetAttachedMachineName);
            }
            if ((this.onEndgetAttachedMachineNameDelegate == null)) {
                this.onEndgetAttachedMachineNameDelegate = new EndOperationDelegate(this.OnEndgetAttachedMachineName);
            }
            if ((this.ongetAttachedMachineNameCompletedDelegate == null)) {
                this.ongetAttachedMachineNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAttachedMachineNameCompleted);
            }
            base.InvokeAsync(this.onBegingetAttachedMachineNameDelegate, new object[] {
                        SecureID}, this.onEndgetAttachedMachineNameDelegate, this.ongetAttachedMachineNameCompletedDelegate, userState);
        }
        
        public string getServerInstanceName(string SecureID) {
            return base.Channel.getServerInstanceName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetServerInstanceName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetServerInstanceName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetServerInstanceName(System.IAsyncResult result) {
            return base.Channel.EndgetServerInstanceName(result);
        }
        
        private System.IAsyncResult OnBegingetServerInstanceName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetServerInstanceName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetServerInstanceName(System.IAsyncResult result) {
            string retVal = this.EndgetServerInstanceName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetServerInstanceNameCompleted(object state) {
            if ((this.getServerInstanceNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServerInstanceNameCompleted(this, new getServerInstanceNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServerInstanceNameAsync(string SecureID) {
            this.getServerInstanceNameAsync(SecureID, null);
        }
        
        public void getServerInstanceNameAsync(string SecureID, object userState) {
            if ((this.onBegingetServerInstanceNameDelegate == null)) {
                this.onBegingetServerInstanceNameDelegate = new BeginOperationDelegate(this.OnBegingetServerInstanceName);
            }
            if ((this.onEndgetServerInstanceNameDelegate == null)) {
                this.onEndgetServerInstanceNameDelegate = new EndOperationDelegate(this.OnEndgetServerInstanceName);
            }
            if ((this.ongetServerInstanceNameCompletedDelegate == null)) {
                this.ongetServerInstanceNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServerInstanceNameCompleted);
            }
            base.InvokeAsync(this.onBegingetServerInstanceNameDelegate, new object[] {
                        SecureID}, this.onEndgetServerInstanceNameDelegate, this.ongetServerInstanceNameCompletedDelegate, userState);
        }
        
        public string getServerMachineName(string SecureID) {
            return base.Channel.getServerMachineName(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetServerMachineName(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetServerMachineName(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetServerMachineName(System.IAsyncResult result) {
            return base.Channel.EndgetServerMachineName(result);
        }
        
        private System.IAsyncResult OnBegingetServerMachineName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetServerMachineName(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetServerMachineName(System.IAsyncResult result) {
            string retVal = this.EndgetServerMachineName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetServerMachineNameCompleted(object state) {
            if ((this.getServerMachineNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getServerMachineNameCompleted(this, new getServerMachineNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getServerMachineNameAsync(string SecureID) {
            this.getServerMachineNameAsync(SecureID, null);
        }
        
        public void getServerMachineNameAsync(string SecureID, object userState) {
            if ((this.onBegingetServerMachineNameDelegate == null)) {
                this.onBegingetServerMachineNameDelegate = new BeginOperationDelegate(this.OnBegingetServerMachineName);
            }
            if ((this.onEndgetServerMachineNameDelegate == null)) {
                this.onEndgetServerMachineNameDelegate = new EndOperationDelegate(this.OnEndgetServerMachineName);
            }
            if ((this.ongetServerMachineNameCompletedDelegate == null)) {
                this.ongetServerMachineNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetServerMachineNameCompleted);
            }
            base.InvokeAsync(this.onBegingetServerMachineNameDelegate, new object[] {
                        SecureID}, this.onEndgetServerMachineNameDelegate, this.ongetServerMachineNameCompletedDelegate, userState);
        }
        
        public void getSystemParm(string SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms) {
            base.Channel.getSystemParm(SecureID, ref SystemParms);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSystemParm(string SecureID, ref System.Collections.Generic.Dictionary<string, string> SystemParms, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSystemParm(SecureID, ref SystemParms, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetSystemParm(ref System.Collections.Generic.Dictionary<string, string> SystemParms, System.IAsyncResult result) {
            base.Channel.EndgetSystemParm(ref SystemParms, result);
        }
        
        private System.IAsyncResult OnBegingetSystemParm(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            System.Collections.Generic.Dictionary<string, string> SystemParms = ((System.Collections.Generic.Dictionary<string, string>)(inValues[1]));
            return this.BegingetSystemParm(SecureID, ref SystemParms, callback, asyncState);
        }
        
        private object[] OnEndgetSystemParm(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, string> SystemParms = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, string>>();
            this.EndgetSystemParm(ref SystemParms, result);
            return new object[] {
                    SystemParms};
        }
        
        private void OngetSystemParmCompleted(object state) {
            if ((this.getSystemParmCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSystemParmCompleted(this, new getSystemParmCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSystemParmAsync(string SecureID, System.Collections.Generic.Dictionary<string, string> SystemParms) {
            this.getSystemParmAsync(SecureID, SystemParms, null);
        }
        
        public void getSystemParmAsync(string SecureID, System.Collections.Generic.Dictionary<string, string> SystemParms, object userState) {
            if ((this.onBegingetSystemParmDelegate == null)) {
                this.onBegingetSystemParmDelegate = new BeginOperationDelegate(this.OnBegingetSystemParm);
            }
            if ((this.onEndgetSystemParmDelegate == null)) {
                this.onEndgetSystemParmDelegate = new EndOperationDelegate(this.OnEndgetSystemParm);
            }
            if ((this.ongetSystemParmCompletedDelegate == null)) {
                this.ongetSystemParmCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSystemParmCompleted);
            }
            base.InvokeAsync(this.onBegingetSystemParmDelegate, new object[] {
                        SecureID,
                        SystemParms}, this.onEndgetSystemParmDelegate, this.ongetSystemParmCompletedDelegate, userState);
        }
        
        public string getSynonyms(string SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms) {
            return base.Channel.getSynonyms(SecureID, ThesaurusID, Token, ref lbSynonyms);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSynonyms(string SecureID, string ThesaurusID, string Token, ref string[] lbSynonyms, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSynonyms(SecureID, ThesaurusID, Token, ref lbSynonyms, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetSynonyms(ref string[] lbSynonyms, System.IAsyncResult result) {
            return base.Channel.EndgetSynonyms(ref lbSynonyms, result);
        }
        
        private System.IAsyncResult OnBegingetSynonyms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ThesaurusID = ((string)(inValues[1]));
            string Token = ((string)(inValues[2]));
            string[] lbSynonyms = ((string[])(inValues[3]));
            return this.BegingetSynonyms(SecureID, ThesaurusID, Token, ref lbSynonyms, callback, asyncState);
        }
        
        private object[] OnEndgetSynonyms(System.IAsyncResult result) {
            string[] lbSynonyms = this.GetDefaultValueForInitialization<string[]>();
            string retVal = this.EndgetSynonyms(ref lbSynonyms, result);
            return new object[] {
                    lbSynonyms,
                    retVal};
        }
        
        private void OngetSynonymsCompleted(object state) {
            if ((this.getSynonymsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSynonymsCompleted(this, new getSynonymsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSynonymsAsync(string SecureID, string ThesaurusID, string Token, string[] lbSynonyms) {
            this.getSynonymsAsync(SecureID, ThesaurusID, Token, lbSynonyms, null);
        }
        
        public void getSynonymsAsync(string SecureID, string ThesaurusID, string Token, string[] lbSynonyms, object userState) {
            if ((this.onBegingetSynonymsDelegate == null)) {
                this.onBegingetSynonymsDelegate = new BeginOperationDelegate(this.OnBegingetSynonyms);
            }
            if ((this.onEndgetSynonymsDelegate == null)) {
                this.onEndgetSynonymsDelegate = new EndOperationDelegate(this.OnEndgetSynonyms);
            }
            if ((this.ongetSynonymsCompletedDelegate == null)) {
                this.ongetSynonymsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSynonymsCompleted);
            }
            base.InvokeAsync(this.onBegingetSynonymsDelegate, new object[] {
                        SecureID,
                        ThesaurusID,
                        Token,
                        lbSynonyms}, this.onEndgetSynonymsDelegate, this.ongetSynonymsCompletedDelegate, userState);
        }
        
        public string getThesaurusID(string SecureID, string ThesaurusName) {
            return base.Channel.getThesaurusID(SecureID, ThesaurusName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetThesaurusID(string SecureID, string ThesaurusName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetThesaurusID(SecureID, ThesaurusName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetThesaurusID(System.IAsyncResult result) {
            return base.Channel.EndgetThesaurusID(result);
        }
        
        private System.IAsyncResult OnBegingetThesaurusID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ThesaurusName = ((string)(inValues[1]));
            return this.BegingetThesaurusID(SecureID, ThesaurusName, callback, asyncState);
        }
        
        private object[] OnEndgetThesaurusID(System.IAsyncResult result) {
            string retVal = this.EndgetThesaurusID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetThesaurusIDCompleted(object state) {
            if ((this.getThesaurusIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getThesaurusIDCompleted(this, new getThesaurusIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getThesaurusIDAsync(string SecureID, string ThesaurusName) {
            this.getThesaurusIDAsync(SecureID, ThesaurusName, null);
        }
        
        public void getThesaurusIDAsync(string SecureID, string ThesaurusName, object userState) {
            if ((this.onBegingetThesaurusIDDelegate == null)) {
                this.onBegingetThesaurusIDDelegate = new BeginOperationDelegate(this.OnBegingetThesaurusID);
            }
            if ((this.onEndgetThesaurusIDDelegate == null)) {
                this.onEndgetThesaurusIDDelegate = new EndOperationDelegate(this.OnEndgetThesaurusID);
            }
            if ((this.ongetThesaurusIDCompletedDelegate == null)) {
                this.ongetThesaurusIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetThesaurusIDCompleted);
            }
            base.InvokeAsync(this.onBegingetThesaurusIDDelegate, new object[] {
                        SecureID,
                        ThesaurusName}, this.onEndgetThesaurusIDDelegate, this.ongetThesaurusIDCompletedDelegate, userState);
        }
        
        public int iCountContent(string SecureID, string S) {
            return base.Channel.iCountContent(SecureID, S);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginiCountContent(string SecureID, string S, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginiCountContent(SecureID, S, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndiCountContent(System.IAsyncResult result) {
            return base.Channel.EndiCountContent(result);
        }
        
        private System.IAsyncResult OnBeginiCountContent(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string S = ((string)(inValues[1]));
            return this.BeginiCountContent(SecureID, S, callback, asyncState);
        }
        
        private object[] OnEndiCountContent(System.IAsyncResult result) {
            int retVal = this.EndiCountContent(result);
            return new object[] {
                    retVal};
        }
        
        private void OniCountContentCompleted(object state) {
            if ((this.iCountContentCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.iCountContentCompleted(this, new iCountContentCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void iCountContentAsync(string SecureID, string S) {
            this.iCountContentAsync(SecureID, S, null);
        }
        
        public void iCountContentAsync(string SecureID, string S, object userState) {
            if ((this.onBeginiCountContentDelegate == null)) {
                this.onBeginiCountContentDelegate = new BeginOperationDelegate(this.OnBeginiCountContent);
            }
            if ((this.onEndiCountContentDelegate == null)) {
                this.onEndiCountContentDelegate = new EndOperationDelegate(this.OnEndiCountContent);
            }
            if ((this.oniCountContentCompletedDelegate == null)) {
                this.oniCountContentCompletedDelegate = new System.Threading.SendOrPostCallback(this.OniCountContentCompleted);
            }
            base.InvokeAsync(this.onBeginiCountContentDelegate, new object[] {
                        SecureID,
                        S}, this.onEndiCountContentDelegate, this.oniCountContentCompletedDelegate, userState);
        }
        
        public string getDatasourceParm(string SecureID, string AttributeName, string SourceGuid) {
            return base.Channel.getDatasourceParm(SecureID, AttributeName, SourceGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetDatasourceParm(string SecureID, string AttributeName, string SourceGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDatasourceParm(SecureID, AttributeName, SourceGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetDatasourceParm(System.IAsyncResult result) {
            return base.Channel.EndgetDatasourceParm(result);
        }
        
        private System.IAsyncResult OnBegingetDatasourceParm(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string AttributeName = ((string)(inValues[1]));
            string SourceGuid = ((string)(inValues[2]));
            return this.BegingetDatasourceParm(SecureID, AttributeName, SourceGuid, callback, asyncState);
        }
        
        private object[] OnEndgetDatasourceParm(System.IAsyncResult result) {
            string retVal = this.EndgetDatasourceParm(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDatasourceParmCompleted(object state) {
            if ((this.getDatasourceParmCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDatasourceParmCompleted(this, new getDatasourceParmCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDatasourceParmAsync(string SecureID, string AttributeName, string SourceGuid) {
            this.getDatasourceParmAsync(SecureID, AttributeName, SourceGuid, null);
        }
        
        public void getDatasourceParmAsync(string SecureID, string AttributeName, string SourceGuid, object userState) {
            if ((this.onBegingetDatasourceParmDelegate == null)) {
                this.onBegingetDatasourceParmDelegate = new BeginOperationDelegate(this.OnBegingetDatasourceParm);
            }
            if ((this.onEndgetDatasourceParmDelegate == null)) {
                this.onEndgetDatasourceParmDelegate = new EndOperationDelegate(this.OnEndgetDatasourceParm);
            }
            if ((this.ongetDatasourceParmCompletedDelegate == null)) {
                this.ongetDatasourceParmCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDatasourceParmCompleted);
            }
            base.InvokeAsync(this.onBegingetDatasourceParmDelegate, new object[] {
                        SecureID,
                        AttributeName,
                        SourceGuid}, this.onEndgetDatasourceParmDelegate, this.ongetDatasourceParmCompletedDelegate, userState);
        }
        
        public bool SaveRunParm(string SecureID, string UserID, ref string ParmID, ref string ParmVal) {
            return base.Channel.SaveRunParm(SecureID, UserID, ref ParmID, ref ParmVal);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveRunParm(string SecureID, string UserID, ref string ParmID, ref string ParmVal, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveRunParm(SecureID, UserID, ref ParmID, ref ParmVal, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveRunParm(ref string ParmID, ref string ParmVal, System.IAsyncResult result) {
            return base.Channel.EndSaveRunParm(ref ParmID, ref ParmVal, result);
        }
        
        private System.IAsyncResult OnBeginSaveRunParm(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string ParmID = ((string)(inValues[2]));
            string ParmVal = ((string)(inValues[3]));
            return this.BeginSaveRunParm(SecureID, UserID, ref ParmID, ref ParmVal, callback, asyncState);
        }
        
        private object[] OnEndSaveRunParm(System.IAsyncResult result) {
            string ParmID = this.GetDefaultValueForInitialization<string>();
            string ParmVal = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndSaveRunParm(ref ParmID, ref ParmVal, result);
            return new object[] {
                    ParmID,
                    ParmVal,
                    retVal};
        }
        
        private void OnSaveRunParmCompleted(object state) {
            if ((this.SaveRunParmCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveRunParmCompleted(this, new SaveRunParmCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveRunParmAsync(string SecureID, string UserID, string ParmID, string ParmVal) {
            this.SaveRunParmAsync(SecureID, UserID, ParmID, ParmVal, null);
        }
        
        public void SaveRunParmAsync(string SecureID, string UserID, string ParmID, string ParmVal, object userState) {
            if ((this.onBeginSaveRunParmDelegate == null)) {
                this.onBeginSaveRunParmDelegate = new BeginOperationDelegate(this.OnBeginSaveRunParm);
            }
            if ((this.onEndSaveRunParmDelegate == null)) {
                this.onEndSaveRunParmDelegate = new EndOperationDelegate(this.OnEndSaveRunParm);
            }
            if ((this.onSaveRunParmCompletedDelegate == null)) {
                this.onSaveRunParmCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveRunParmCompleted);
            }
            base.InvokeAsync(this.onBeginSaveRunParmDelegate, new object[] {
                        SecureID,
                        UserID,
                        ParmID,
                        ParmVal}, this.onEndSaveRunParmDelegate, this.onSaveRunParmCompletedDelegate, userState);
        }
        
        public int iGetRowCount(string SecureID, string TBL, string WhereClause) {
            return base.Channel.iGetRowCount(SecureID, TBL, WhereClause);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginiGetRowCount(string SecureID, string TBL, string WhereClause, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginiGetRowCount(SecureID, TBL, WhereClause, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndiGetRowCount(System.IAsyncResult result) {
            return base.Channel.EndiGetRowCount(result);
        }
        
        private System.IAsyncResult OnBeginiGetRowCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string TBL = ((string)(inValues[1]));
            string WhereClause = ((string)(inValues[2]));
            return this.BeginiGetRowCount(SecureID, TBL, WhereClause, callback, asyncState);
        }
        
        private object[] OnEndiGetRowCount(System.IAsyncResult result) {
            int retVal = this.EndiGetRowCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OniGetRowCountCompleted(object state) {
            if ((this.iGetRowCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.iGetRowCountCompleted(this, new iGetRowCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void iGetRowCountAsync(string SecureID, string TBL, string WhereClause) {
            this.iGetRowCountAsync(SecureID, TBL, WhereClause, null);
        }
        
        public void iGetRowCountAsync(string SecureID, string TBL, string WhereClause, object userState) {
            if ((this.onBeginiGetRowCountDelegate == null)) {
                this.onBeginiGetRowCountDelegate = new BeginOperationDelegate(this.OnBeginiGetRowCount);
            }
            if ((this.onEndiGetRowCountDelegate == null)) {
                this.onEndiGetRowCountDelegate = new EndOperationDelegate(this.OnEndiGetRowCount);
            }
            if ((this.oniGetRowCountCompletedDelegate == null)) {
                this.oniGetRowCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OniGetRowCountCompleted);
            }
            base.InvokeAsync(this.onBeginiGetRowCountDelegate, new object[] {
                        SecureID,
                        TBL,
                        WhereClause}, this.onEndiGetRowCountDelegate, this.oniGetRowCountCompletedDelegate, userState);
        }
        
        public bool ZeroizeGlobalSearch(string SecureID) {
            return base.Channel.ZeroizeGlobalSearch(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginZeroizeGlobalSearch(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginZeroizeGlobalSearch(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndZeroizeGlobalSearch(System.IAsyncResult result) {
            return base.Channel.EndZeroizeGlobalSearch(result);
        }
        
        private System.IAsyncResult OnBeginZeroizeGlobalSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginZeroizeGlobalSearch(SecureID, callback, asyncState);
        }
        
        private object[] OnEndZeroizeGlobalSearch(System.IAsyncResult result) {
            bool retVal = this.EndZeroizeGlobalSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnZeroizeGlobalSearchCompleted(object state) {
            if ((this.ZeroizeGlobalSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ZeroizeGlobalSearchCompleted(this, new ZeroizeGlobalSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ZeroizeGlobalSearchAsync(string SecureID) {
            this.ZeroizeGlobalSearchAsync(SecureID, null);
        }
        
        public void ZeroizeGlobalSearchAsync(string SecureID, object userState) {
            if ((this.onBeginZeroizeGlobalSearchDelegate == null)) {
                this.onBeginZeroizeGlobalSearchDelegate = new BeginOperationDelegate(this.OnBeginZeroizeGlobalSearch);
            }
            if ((this.onEndZeroizeGlobalSearchDelegate == null)) {
                this.onEndZeroizeGlobalSearchDelegate = new EndOperationDelegate(this.OnEndZeroizeGlobalSearch);
            }
            if ((this.onZeroizeGlobalSearchCompletedDelegate == null)) {
                this.onZeroizeGlobalSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnZeroizeGlobalSearchCompleted);
            }
            base.InvokeAsync(this.onBeginZeroizeGlobalSearchDelegate, new object[] {
                        SecureID}, this.onEndZeroizeGlobalSearchDelegate, this.onZeroizeGlobalSearchCompletedDelegate, userState);
        }
        
        public void updateIp(string SecureID, string HostName, string IP, int checkCode, ref bool RC) {
            base.Channel.updateIp(SecureID, HostName, IP, checkCode, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginupdateIp(string SecureID, string HostName, string IP, int checkCode, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginupdateIp(SecureID, HostName, IP, checkCode, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndupdateIp(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndupdateIp(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginupdateIp(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string HostName = ((string)(inValues[1]));
            string IP = ((string)(inValues[2]));
            int checkCode = ((int)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            return this.BeginupdateIp(SecureID, HostName, IP, checkCode, ref RC, callback, asyncState);
        }
        
        private object[] OnEndupdateIp(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndupdateIp(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnupdateIpCompleted(object state) {
            if ((this.updateIpCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.updateIpCompleted(this, new updateIpCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void updateIpAsync(string SecureID, string HostName, string IP, int checkCode, bool RC) {
            this.updateIpAsync(SecureID, HostName, IP, checkCode, RC, null);
        }
        
        public void updateIpAsync(string SecureID, string HostName, string IP, int checkCode, bool RC, object userState) {
            if ((this.onBeginupdateIpDelegate == null)) {
                this.onBeginupdateIpDelegate = new BeginOperationDelegate(this.OnBeginupdateIp);
            }
            if ((this.onEndupdateIpDelegate == null)) {
                this.onEndupdateIpDelegate = new EndOperationDelegate(this.OnEndupdateIp);
            }
            if ((this.onupdateIpCompletedDelegate == null)) {
                this.onupdateIpCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnupdateIpCompleted);
            }
            base.InvokeAsync(this.onBeginupdateIpDelegate, new object[] {
                        SecureID,
                        HostName,
                        IP,
                        checkCode,
                        RC}, this.onEndupdateIpDelegate, this.onupdateIpCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] PopulateSourceGridWithWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt) {
            return base.Channel.PopulateSourceGridWithWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateSourceGridWithWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateSourceGridWithWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] EndPopulateSourceGridWithWeights(ref bool bNewRows, ref int SourceRowCnt, System.IAsyncResult result) {
            return base.Channel.EndPopulateSourceGridWithWeights(ref bNewRows, ref SourceRowCnt, result);
        }
        
        private System.IAsyncResult OnBeginPopulateSourceGridWithWeights(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int StartingRow = ((int)(inValues[1]));
            int EndingRow = ((int)(inValues[2]));
            string CallerName = ((string)(inValues[3]));
            string MySql = ((string)(inValues[4]));
            bool bNewRows = ((bool)(inValues[5]));
            int SourceRowCnt = ((int)(inValues[6]));
            return this.BeginPopulateSourceGridWithWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt, callback, asyncState);
        }
        
        private object[] OnEndPopulateSourceGridWithWeights(System.IAsyncResult result) {
            bool bNewRows = this.GetDefaultValueForInitialization<bool>();
            int SourceRowCnt = this.GetDefaultValueForInitialization<int>();
            ECMSearchWPF.SVCSearch.DS_CONTENT[] retVal = this.EndPopulateSourceGridWithWeights(ref bNewRows, ref SourceRowCnt, result);
            return new object[] {
                    bNewRows,
                    SourceRowCnt,
                    retVal};
        }
        
        private void OnPopulateSourceGridWithWeightsCompleted(object state) {
            if ((this.PopulateSourceGridWithWeightsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateSourceGridWithWeightsCompleted(this, new PopulateSourceGridWithWeightsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateSourceGridWithWeightsAsync(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, bool bNewRows, int SourceRowCnt) {
            this.PopulateSourceGridWithWeightsAsync(SecureID, StartingRow, EndingRow, CallerName, MySql, bNewRows, SourceRowCnt, null);
        }
        
        public void PopulateSourceGridWithWeightsAsync(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, bool bNewRows, int SourceRowCnt, object userState) {
            if ((this.onBeginPopulateSourceGridWithWeightsDelegate == null)) {
                this.onBeginPopulateSourceGridWithWeightsDelegate = new BeginOperationDelegate(this.OnBeginPopulateSourceGridWithWeights);
            }
            if ((this.onEndPopulateSourceGridWithWeightsDelegate == null)) {
                this.onEndPopulateSourceGridWithWeightsDelegate = new EndOperationDelegate(this.OnEndPopulateSourceGridWithWeights);
            }
            if ((this.onPopulateSourceGridWithWeightsCompletedDelegate == null)) {
                this.onPopulateSourceGridWithWeightsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateSourceGridWithWeightsCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateSourceGridWithWeightsDelegate, new object[] {
                        SecureID,
                        StartingRow,
                        EndingRow,
                        CallerName,
                        MySql,
                        bNewRows,
                        SourceRowCnt}, this.onEndPopulateSourceGridWithWeightsDelegate, this.onPopulateSourceGridWithWeightsCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] PopulateSourceGridNoWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt) {
            return base.Channel.PopulateSourceGridNoWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateSourceGridNoWeights(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, ref bool bNewRows, ref int SourceRowCnt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateSourceGridNoWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_CONTENT[] EndPopulateSourceGridNoWeights(ref bool bNewRows, ref int SourceRowCnt, System.IAsyncResult result) {
            return base.Channel.EndPopulateSourceGridNoWeights(ref bNewRows, ref SourceRowCnt, result);
        }
        
        private System.IAsyncResult OnBeginPopulateSourceGridNoWeights(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int StartingRow = ((int)(inValues[1]));
            int EndingRow = ((int)(inValues[2]));
            string CallerName = ((string)(inValues[3]));
            string MySql = ((string)(inValues[4]));
            bool bNewRows = ((bool)(inValues[5]));
            int SourceRowCnt = ((int)(inValues[6]));
            return this.BeginPopulateSourceGridNoWeights(SecureID, StartingRow, EndingRow, CallerName, MySql, ref bNewRows, ref SourceRowCnt, callback, asyncState);
        }
        
        private object[] OnEndPopulateSourceGridNoWeights(System.IAsyncResult result) {
            bool bNewRows = this.GetDefaultValueForInitialization<bool>();
            int SourceRowCnt = this.GetDefaultValueForInitialization<int>();
            ECMSearchWPF.SVCSearch.DS_CONTENT[] retVal = this.EndPopulateSourceGridNoWeights(ref bNewRows, ref SourceRowCnt, result);
            return new object[] {
                    bNewRows,
                    SourceRowCnt,
                    retVal};
        }
        
        private void OnPopulateSourceGridNoWeightsCompleted(object state) {
            if ((this.PopulateSourceGridNoWeightsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateSourceGridNoWeightsCompleted(this, new PopulateSourceGridNoWeightsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateSourceGridNoWeightsAsync(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, bool bNewRows, int SourceRowCnt) {
            this.PopulateSourceGridNoWeightsAsync(SecureID, StartingRow, EndingRow, CallerName, MySql, bNewRows, SourceRowCnt, null);
        }
        
        public void PopulateSourceGridNoWeightsAsync(string SecureID, int StartingRow, int EndingRow, string CallerName, string MySql, bool bNewRows, int SourceRowCnt, object userState) {
            if ((this.onBeginPopulateSourceGridNoWeightsDelegate == null)) {
                this.onBeginPopulateSourceGridNoWeightsDelegate = new BeginOperationDelegate(this.OnBeginPopulateSourceGridNoWeights);
            }
            if ((this.onEndPopulateSourceGridNoWeightsDelegate == null)) {
                this.onEndPopulateSourceGridNoWeightsDelegate = new EndOperationDelegate(this.OnEndPopulateSourceGridNoWeights);
            }
            if ((this.onPopulateSourceGridNoWeightsCompletedDelegate == null)) {
                this.onPopulateSourceGridNoWeightsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateSourceGridNoWeightsCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateSourceGridNoWeightsDelegate, new object[] {
                        SecureID,
                        StartingRow,
                        EndingRow,
                        CallerName,
                        MySql,
                        bNewRows,
                        SourceRowCnt}, this.onEndPopulateSourceGridNoWeightsDelegate, this.onPopulateSourceGridNoWeightsCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] PopulateEmailGridWithNoWeights(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt) {
            return base.Channel.PopulateEmailGridWithNoWeights(SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateEmailGridWithNoWeights(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateEmailGridWithNoWeights(SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] EndPopulateEmailGridWithNoWeights(ref bool bNewRows, ref int EmailRowCnt, System.IAsyncResult result) {
            return base.Channel.EndPopulateEmailGridWithNoWeights(ref bNewRows, ref EmailRowCnt, result);
        }
        
        private System.IAsyncResult OnBeginPopulateEmailGridWithNoWeights(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string CallerName = ((string)(inValues[2]));
            string MySql = ((string)(inValues[3]));
            string nbrWeightMin = ((string)(inValues[4]));
            int StartingRow = ((int)(inValues[5]));
            int EndingRow = ((int)(inValues[6]));
            bool bNewRows = ((bool)(inValues[7]));
            int EmailRowCnt = ((int)(inValues[8]));
            return this.BeginPopulateEmailGridWithNoWeights(SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt, callback, asyncState);
        }
        
        private object[] OnEndPopulateEmailGridWithNoWeights(System.IAsyncResult result) {
            bool bNewRows = this.GetDefaultValueForInitialization<bool>();
            int EmailRowCnt = this.GetDefaultValueForInitialization<int>();
            ECMSearchWPF.SVCSearch.DS_EMAIL[] retVal = this.EndPopulateEmailGridWithNoWeights(ref bNewRows, ref EmailRowCnt, result);
            return new object[] {
                    bNewRows,
                    EmailRowCnt,
                    retVal};
        }
        
        private void OnPopulateEmailGridWithNoWeightsCompleted(object state) {
            if ((this.PopulateEmailGridWithNoWeightsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateEmailGridWithNoWeightsCompleted(this, new PopulateEmailGridWithNoWeightsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateEmailGridWithNoWeightsAsync(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, bool bNewRows, int EmailRowCnt) {
            this.PopulateEmailGridWithNoWeightsAsync(SecureID, UID, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, bNewRows, EmailRowCnt, null);
        }
        
        public void PopulateEmailGridWithNoWeightsAsync(string SecureID, string UID, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, bool bNewRows, int EmailRowCnt, object userState) {
            if ((this.onBeginPopulateEmailGridWithNoWeightsDelegate == null)) {
                this.onBeginPopulateEmailGridWithNoWeightsDelegate = new BeginOperationDelegate(this.OnBeginPopulateEmailGridWithNoWeights);
            }
            if ((this.onEndPopulateEmailGridWithNoWeightsDelegate == null)) {
                this.onEndPopulateEmailGridWithNoWeightsDelegate = new EndOperationDelegate(this.OnEndPopulateEmailGridWithNoWeights);
            }
            if ((this.onPopulateEmailGridWithNoWeightsCompletedDelegate == null)) {
                this.onPopulateEmailGridWithNoWeightsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateEmailGridWithNoWeightsCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateEmailGridWithNoWeightsDelegate, new object[] {
                        SecureID,
                        UID,
                        CallerName,
                        MySql,
                        nbrWeightMin,
                        StartingRow,
                        EndingRow,
                        bNewRows,
                        EmailRowCnt}, this.onEndPopulateEmailGridWithNoWeightsDelegate, this.onPopulateEmailGridWithNoWeightsCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] PopulateEmailGridWithWeights(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt) {
            return base.Channel.PopulateEmailGridWithWeights(SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateEmailGridWithWeights(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, ref bool bNewRows, ref int EmailRowCnt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateEmailGridWithWeights(SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_EMAIL[] EndPopulateEmailGridWithWeights(ref bool bNewRows, ref int EmailRowCnt, System.IAsyncResult result) {
            return base.Channel.EndPopulateEmailGridWithWeights(ref bNewRows, ref EmailRowCnt, result);
        }
        
        private System.IAsyncResult OnBeginPopulateEmailGridWithWeights(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string Userid = ((string)(inValues[1]));
            string CallerName = ((string)(inValues[2]));
            string MySql = ((string)(inValues[3]));
            string nbrWeightMin = ((string)(inValues[4]));
            int StartingRow = ((int)(inValues[5]));
            int EndingRow = ((int)(inValues[6]));
            bool bNewRows = ((bool)(inValues[7]));
            int EmailRowCnt = ((int)(inValues[8]));
            return this.BeginPopulateEmailGridWithWeights(SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, ref bNewRows, ref EmailRowCnt, callback, asyncState);
        }
        
        private object[] OnEndPopulateEmailGridWithWeights(System.IAsyncResult result) {
            bool bNewRows = this.GetDefaultValueForInitialization<bool>();
            int EmailRowCnt = this.GetDefaultValueForInitialization<int>();
            ECMSearchWPF.SVCSearch.DS_EMAIL[] retVal = this.EndPopulateEmailGridWithWeights(ref bNewRows, ref EmailRowCnt, result);
            return new object[] {
                    bNewRows,
                    EmailRowCnt,
                    retVal};
        }
        
        private void OnPopulateEmailGridWithWeightsCompleted(object state) {
            if ((this.PopulateEmailGridWithWeightsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateEmailGridWithWeightsCompleted(this, new PopulateEmailGridWithWeightsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateEmailGridWithWeightsAsync(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, bool bNewRows, int EmailRowCnt) {
            this.PopulateEmailGridWithWeightsAsync(SecureID, Userid, CallerName, MySql, nbrWeightMin, StartingRow, EndingRow, bNewRows, EmailRowCnt, null);
        }
        
        public void PopulateEmailGridWithWeightsAsync(string SecureID, string Userid, string CallerName, string MySql, string nbrWeightMin, int StartingRow, int EndingRow, bool bNewRows, int EmailRowCnt, object userState) {
            if ((this.onBeginPopulateEmailGridWithWeightsDelegate == null)) {
                this.onBeginPopulateEmailGridWithWeightsDelegate = new BeginOperationDelegate(this.OnBeginPopulateEmailGridWithWeights);
            }
            if ((this.onEndPopulateEmailGridWithWeightsDelegate == null)) {
                this.onEndPopulateEmailGridWithWeightsDelegate = new EndOperationDelegate(this.OnEndPopulateEmailGridWithWeights);
            }
            if ((this.onPopulateEmailGridWithWeightsCompletedDelegate == null)) {
                this.onPopulateEmailGridWithWeightsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateEmailGridWithWeightsCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateEmailGridWithWeightsDelegate, new object[] {
                        SecureID,
                        Userid,
                        CallerName,
                        MySql,
                        nbrWeightMin,
                        StartingRow,
                        EndingRow,
                        bNewRows,
                        EmailRowCnt}, this.onEndPopulateEmailGridWithWeightsDelegate, this.onPopulateEmailGridWithWeightsCompletedDelegate, userState);
        }
        
        public void LoadUserSearchHistory(string SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned) {
            base.Channel.LoadUserSearchHistory(SecureID, MaxNbrSearches, Uid, Screen, ref SearchHistoryArrayList, ref NbrReturned);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginLoadUserSearchHistory(string SecureID, int MaxNbrSearches, string Uid, string Screen, ref string[] SearchHistoryArrayList, ref int NbrReturned, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoadUserSearchHistory(SecureID, MaxNbrSearches, Uid, Screen, ref SearchHistoryArrayList, ref NbrReturned, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndLoadUserSearchHistory(ref string[] SearchHistoryArrayList, ref int NbrReturned, System.IAsyncResult result) {
            base.Channel.EndLoadUserSearchHistory(ref SearchHistoryArrayList, ref NbrReturned, result);
        }
        
        private System.IAsyncResult OnBeginLoadUserSearchHistory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int MaxNbrSearches = ((int)(inValues[1]));
            string Uid = ((string)(inValues[2]));
            string Screen = ((string)(inValues[3]));
            string[] SearchHistoryArrayList = ((string[])(inValues[4]));
            int NbrReturned = ((int)(inValues[5]));
            return this.BeginLoadUserSearchHistory(SecureID, MaxNbrSearches, Uid, Screen, ref SearchHistoryArrayList, ref NbrReturned, callback, asyncState);
        }
        
        private object[] OnEndLoadUserSearchHistory(System.IAsyncResult result) {
            string[] SearchHistoryArrayList = this.GetDefaultValueForInitialization<string[]>();
            int NbrReturned = this.GetDefaultValueForInitialization<int>();
            this.EndLoadUserSearchHistory(ref SearchHistoryArrayList, ref NbrReturned, result);
            return new object[] {
                    SearchHistoryArrayList,
                    NbrReturned};
        }
        
        private void OnLoadUserSearchHistoryCompleted(object state) {
            if ((this.LoadUserSearchHistoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.LoadUserSearchHistoryCompleted(this, new LoadUserSearchHistoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void LoadUserSearchHistoryAsync(string SecureID, int MaxNbrSearches, string Uid, string Screen, string[] SearchHistoryArrayList, int NbrReturned) {
            this.LoadUserSearchHistoryAsync(SecureID, MaxNbrSearches, Uid, Screen, SearchHistoryArrayList, NbrReturned, null);
        }
        
        public void LoadUserSearchHistoryAsync(string SecureID, int MaxNbrSearches, string Uid, string Screen, string[] SearchHistoryArrayList, int NbrReturned, object userState) {
            if ((this.onBeginLoadUserSearchHistoryDelegate == null)) {
                this.onBeginLoadUserSearchHistoryDelegate = new BeginOperationDelegate(this.OnBeginLoadUserSearchHistory);
            }
            if ((this.onEndLoadUserSearchHistoryDelegate == null)) {
                this.onEndLoadUserSearchHistoryDelegate = new EndOperationDelegate(this.OnEndLoadUserSearchHistory);
            }
            if ((this.onLoadUserSearchHistoryCompletedDelegate == null)) {
                this.onLoadUserSearchHistoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoadUserSearchHistoryCompleted);
            }
            base.InvokeAsync(this.onBeginLoadUserSearchHistoryDelegate, new object[] {
                        SecureID,
                        MaxNbrSearches,
                        Uid,
                        Screen,
                        SearchHistoryArrayList,
                        NbrReturned}, this.onEndLoadUserSearchHistoryDelegate, this.onLoadUserSearchHistoryCompletedDelegate, userState);
        }
        
        public void getAttachmentWeights(string SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID) {
            base.Channel.getAttachmentWeights(SecureID, ref SL, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAttachmentWeights(string SecureID, ref System.Collections.Generic.Dictionary<string, int> SL, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAttachmentWeights(SecureID, ref SL, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetAttachmentWeights(ref System.Collections.Generic.Dictionary<string, int> SL, System.IAsyncResult result) {
            base.Channel.EndgetAttachmentWeights(ref SL, result);
        }
        
        private System.IAsyncResult OnBegingetAttachmentWeights(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            System.Collections.Generic.Dictionary<string, int> SL = ((System.Collections.Generic.Dictionary<string, int>)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            return this.BegingetAttachmentWeights(SecureID, ref SL, UserID, callback, asyncState);
        }
        
        private object[] OnEndgetAttachmentWeights(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<string, int> SL = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<string, int>>();
            this.EndgetAttachmentWeights(ref SL, result);
            return new object[] {
                    SL};
        }
        
        private void OngetAttachmentWeightsCompleted(object state) {
            if ((this.getAttachmentWeightsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAttachmentWeightsCompleted(this, new getAttachmentWeightsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAttachmentWeightsAsync(string SecureID, System.Collections.Generic.Dictionary<string, int> SL, string UserID) {
            this.getAttachmentWeightsAsync(SecureID, SL, UserID, null);
        }
        
        public void getAttachmentWeightsAsync(string SecureID, System.Collections.Generic.Dictionary<string, int> SL, string UserID, object userState) {
            if ((this.onBegingetAttachmentWeightsDelegate == null)) {
                this.onBegingetAttachmentWeightsDelegate = new BeginOperationDelegate(this.OnBegingetAttachmentWeights);
            }
            if ((this.onEndgetAttachmentWeightsDelegate == null)) {
                this.onEndgetAttachmentWeightsDelegate = new EndOperationDelegate(this.OnEndgetAttachmentWeights);
            }
            if ((this.ongetAttachmentWeightsCompletedDelegate == null)) {
                this.ongetAttachmentWeightsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAttachmentWeightsCompleted);
            }
            base.InvokeAsync(this.onBegingetAttachmentWeightsDelegate, new object[] {
                        SecureID,
                        SL,
                        UserID}, this.onEndgetAttachmentWeightsDelegate, this.ongetAttachmentWeightsCompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConn1(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConn1(SecureID, SID, ref EncryptedMySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConn1(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConn1(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConn1(ref string EncryptedMySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConn1(ref EncryptedMySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConn1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string EncryptedMySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConn1(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConn1(System.IAsyncResult result) {
            string EncryptedMySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConn1(ref EncryptedMySql, result);
            return new object[] {
                    EncryptedMySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConn1Completed(object state) {
            if ((this.ExecuteSqlNewConn1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConn1Completed(this, new ExecuteSqlNewConn1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConn1Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConn1Async(SecureID, SID, EncryptedMySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConn1Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConn1Delegate == null)) {
                this.onBeginExecuteSqlNewConn1Delegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConn1);
            }
            if ((this.onEndExecuteSqlNewConn1Delegate == null)) {
                this.onEndExecuteSqlNewConn1Delegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConn1);
            }
            if ((this.onExecuteSqlNewConn1CompletedDelegate == null)) {
                this.onExecuteSqlNewConn1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConn1Completed);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConn1Delegate, new object[] {
                        SecureID,
                        SID,
                        EncryptedMySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConn1Delegate, this.onExecuteSqlNewConn1CompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConn2(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConn2(SecureID, SID, ref EncryptedMySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConn2(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConn2(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConn2(ref string EncryptedMySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConn2(ref EncryptedMySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConn2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string EncryptedMySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConn2(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConn2(System.IAsyncResult result) {
            string EncryptedMySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConn2(ref EncryptedMySql, result);
            return new object[] {
                    EncryptedMySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConn2Completed(object state) {
            if ((this.ExecuteSqlNewConn2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConn2Completed(this, new ExecuteSqlNewConn2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConn2Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConn2Async(SecureID, SID, EncryptedMySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConn2Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConn2Delegate == null)) {
                this.onBeginExecuteSqlNewConn2Delegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConn2);
            }
            if ((this.onEndExecuteSqlNewConn2Delegate == null)) {
                this.onEndExecuteSqlNewConn2Delegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConn2);
            }
            if ((this.onExecuteSqlNewConn2CompletedDelegate == null)) {
                this.onExecuteSqlNewConn2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConn2Completed);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConn2Delegate, new object[] {
                        SecureID,
                        SID,
                        EncryptedMySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConn2Delegate, this.onExecuteSqlNewConn2CompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConn3(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConn3(SecureID, SID, ref EncryptedMySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConn3(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConn3(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConn3(ref string EncryptedMySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConn3(ref EncryptedMySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConn3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string EncryptedMySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConn3(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConn3(System.IAsyncResult result) {
            string EncryptedMySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConn3(ref EncryptedMySql, result);
            return new object[] {
                    EncryptedMySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConn3Completed(object state) {
            if ((this.ExecuteSqlNewConn3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConn3Completed(this, new ExecuteSqlNewConn3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConn3Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConn3Async(SecureID, SID, EncryptedMySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConn3Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConn3Delegate == null)) {
                this.onBeginExecuteSqlNewConn3Delegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConn3);
            }
            if ((this.onEndExecuteSqlNewConn3Delegate == null)) {
                this.onEndExecuteSqlNewConn3Delegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConn3);
            }
            if ((this.onExecuteSqlNewConn3CompletedDelegate == null)) {
                this.onExecuteSqlNewConn3CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConn3Completed);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConn3Delegate, new object[] {
                        SecureID,
                        SID,
                        EncryptedMySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConn3Delegate, this.onExecuteSqlNewConn3CompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConn4(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConn4(SecureID, SID, ref EncryptedMySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConn4(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConn4(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConn4(ref string EncryptedMySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConn4(ref EncryptedMySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConn4(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string EncryptedMySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConn4(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConn4(System.IAsyncResult result) {
            string EncryptedMySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConn4(ref EncryptedMySql, result);
            return new object[] {
                    EncryptedMySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConn4Completed(object state) {
            if ((this.ExecuteSqlNewConn4Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConn4Completed(this, new ExecuteSqlNewConn4CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConn4Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConn4Async(SecureID, SID, EncryptedMySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConn4Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConn4Delegate == null)) {
                this.onBeginExecuteSqlNewConn4Delegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConn4);
            }
            if ((this.onEndExecuteSqlNewConn4Delegate == null)) {
                this.onEndExecuteSqlNewConn4Delegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConn4);
            }
            if ((this.onExecuteSqlNewConn4CompletedDelegate == null)) {
                this.onExecuteSqlNewConn4CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConn4Completed);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConn4Delegate, new object[] {
                        SecureID,
                        SID,
                        EncryptedMySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConn4Delegate, this.onExecuteSqlNewConn4CompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConn5(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConn5(SecureID, SID, ref EncryptedMySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConn5(string SecureID, string SID, ref string EncryptedMySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConn5(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConn5(ref string EncryptedMySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConn5(ref EncryptedMySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConn5(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string EncryptedMySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConn5(SecureID, SID, ref EncryptedMySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConn5(System.IAsyncResult result) {
            string EncryptedMySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConn5(ref EncryptedMySql, result);
            return new object[] {
                    EncryptedMySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConn5Completed(object state) {
            if ((this.ExecuteSqlNewConn5Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConn5Completed(this, new ExecuteSqlNewConn5CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConn5Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConn5Async(SecureID, SID, EncryptedMySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConn5Async(string SecureID, string SID, string EncryptedMySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConn5Delegate == null)) {
                this.onBeginExecuteSqlNewConn5Delegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConn5);
            }
            if ((this.onEndExecuteSqlNewConn5Delegate == null)) {
                this.onEndExecuteSqlNewConn5Delegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConn5);
            }
            if ((this.onExecuteSqlNewConn5CompletedDelegate == null)) {
                this.onExecuteSqlNewConn5CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConn5Completed);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConn5Delegate, new object[] {
                        SecureID,
                        SID,
                        EncryptedMySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConn5Delegate, this.onExecuteSqlNewConn5CompletedDelegate, userState);
        }
        
        public bool ExecuteSqlNewConnSecure(string SecureID, string SID, ref string MySql, string UserID, string ContractID) {
            return base.Channel.ExecuteSqlNewConnSecure(SecureID, SID, ref MySql, UserID, ContractID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlNewConnSecure(string SecureID, string SID, ref string MySql, string UserID, string ContractID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlNewConnSecure(SecureID, SID, ref MySql, UserID, ContractID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlNewConnSecure(ref string MySql, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlNewConnSecure(ref MySql, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlNewConnSecure(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string MySql = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string ContractID = ((string)(inValues[4]));
            return this.BeginExecuteSqlNewConnSecure(SecureID, SID, ref MySql, UserID, ContractID, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlNewConnSecure(System.IAsyncResult result) {
            string MySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndExecuteSqlNewConnSecure(ref MySql, result);
            return new object[] {
                    MySql,
                    retVal};
        }
        
        private void OnExecuteSqlNewConnSecureCompleted(object state) {
            if ((this.ExecuteSqlNewConnSecureCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlNewConnSecureCompleted(this, new ExecuteSqlNewConnSecureCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlNewConnSecureAsync(string SecureID, string SID, string MySql, string UserID, string ContractID) {
            this.ExecuteSqlNewConnSecureAsync(SecureID, SID, MySql, UserID, ContractID, null);
        }
        
        public void ExecuteSqlNewConnSecureAsync(string SecureID, string SID, string MySql, string UserID, string ContractID, object userState) {
            if ((this.onBeginExecuteSqlNewConnSecureDelegate == null)) {
                this.onBeginExecuteSqlNewConnSecureDelegate = new BeginOperationDelegate(this.OnBeginExecuteSqlNewConnSecure);
            }
            if ((this.onEndExecuteSqlNewConnSecureDelegate == null)) {
                this.onEndExecuteSqlNewConnSecureDelegate = new EndOperationDelegate(this.OnEndExecuteSqlNewConnSecure);
            }
            if ((this.onExecuteSqlNewConnSecureCompletedDelegate == null)) {
                this.onExecuteSqlNewConnSecureCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlNewConnSecureCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSqlNewConnSecureDelegate, new object[] {
                        SecureID,
                        SID,
                        MySql,
                        UserID,
                        ContractID}, this.onEndExecuteSqlNewConnSecureDelegate, this.onExecuteSqlNewConnSecureCompletedDelegate, userState);
        }
        
        public void GetParmValue(string SecureID, string UID, ref string[] Parms) {
            base.Channel.GetParmValue(SecureID, UID, ref Parms);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetParmValue(string SecureID, string UID, ref string[] Parms, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetParmValue(SecureID, UID, ref Parms, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetParmValue(ref string[] Parms, System.IAsyncResult result) {
            base.Channel.EndGetParmValue(ref Parms, result);
        }
        
        private System.IAsyncResult OnBeginGetParmValue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            string[] Parms = ((string[])(inValues[2]));
            return this.BeginGetParmValue(SecureID, UID, ref Parms, callback, asyncState);
        }
        
        private object[] OnEndGetParmValue(System.IAsyncResult result) {
            string[] Parms = this.GetDefaultValueForInitialization<string[]>();
            this.EndGetParmValue(ref Parms, result);
            return new object[] {
                    Parms};
        }
        
        private void OnGetParmValueCompleted(object state) {
            if ((this.GetParmValueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetParmValueCompleted(this, new GetParmValueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetParmValueAsync(string SecureID, string UID, string[] Parms) {
            this.GetParmValueAsync(SecureID, UID, Parms, null);
        }
        
        public void GetParmValueAsync(string SecureID, string UID, string[] Parms, object userState) {
            if ((this.onBeginGetParmValueDelegate == null)) {
                this.onBeginGetParmValueDelegate = new BeginOperationDelegate(this.OnBeginGetParmValue);
            }
            if ((this.onEndGetParmValueDelegate == null)) {
                this.onEndGetParmValueDelegate = new EndOperationDelegate(this.OnEndGetParmValue);
            }
            if ((this.onGetParmValueCompletedDelegate == null)) {
                this.onGetParmValueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetParmValueCompleted);
            }
            base.InvokeAsync(this.onBeginGetParmValueDelegate, new object[] {
                        SecureID,
                        UID,
                        Parms}, this.onEndGetParmValueDelegate, this.onGetParmValueCompletedDelegate, userState);
        }
        
        public bool DBisGlobalSearcher(string SecureID, string Userid) {
            return base.Channel.DBisGlobalSearcher(SecureID, Userid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDBisGlobalSearcher(string SecureID, string Userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDBisGlobalSearcher(SecureID, Userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDBisGlobalSearcher(System.IAsyncResult result) {
            return base.Channel.EndDBisGlobalSearcher(result);
        }
        
        private System.IAsyncResult OnBeginDBisGlobalSearcher(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string Userid = ((string)(inValues[1]));
            return this.BeginDBisGlobalSearcher(SecureID, Userid, callback, asyncState);
        }
        
        private object[] OnEndDBisGlobalSearcher(System.IAsyncResult result) {
            bool retVal = this.EndDBisGlobalSearcher(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDBisGlobalSearcherCompleted(object state) {
            if ((this.DBisGlobalSearcherCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DBisGlobalSearcherCompleted(this, new DBisGlobalSearcherCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DBisGlobalSearcherAsync(string SecureID, string Userid) {
            this.DBisGlobalSearcherAsync(SecureID, Userid, null);
        }
        
        public void DBisGlobalSearcherAsync(string SecureID, string Userid, object userState) {
            if ((this.onBeginDBisGlobalSearcherDelegate == null)) {
                this.onBeginDBisGlobalSearcherDelegate = new BeginOperationDelegate(this.OnBeginDBisGlobalSearcher);
            }
            if ((this.onEndDBisGlobalSearcherDelegate == null)) {
                this.onEndDBisGlobalSearcherDelegate = new EndOperationDelegate(this.OnEndDBisGlobalSearcher);
            }
            if ((this.onDBisGlobalSearcherCompletedDelegate == null)) {
                this.onDBisGlobalSearcherCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDBisGlobalSearcherCompleted);
            }
            base.InvokeAsync(this.onBeginDBisGlobalSearcherDelegate, new object[] {
                        SecureID,
                        Userid}, this.onEndDBisGlobalSearcherDelegate, this.onDBisGlobalSearcherCompletedDelegate, userState);
        }
        
        public bool DBisAdmin(string SecureID, string Userid) {
            return base.Channel.DBisAdmin(SecureID, Userid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDBisAdmin(string SecureID, string Userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDBisAdmin(SecureID, Userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDBisAdmin(System.IAsyncResult result) {
            return base.Channel.EndDBisAdmin(result);
        }
        
        private System.IAsyncResult OnBeginDBisAdmin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string Userid = ((string)(inValues[1]));
            return this.BeginDBisAdmin(SecureID, Userid, callback, asyncState);
        }
        
        private object[] OnEndDBisAdmin(System.IAsyncResult result) {
            bool retVal = this.EndDBisAdmin(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDBisAdminCompleted(object state) {
            if ((this.DBisAdminCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DBisAdminCompleted(this, new DBisAdminCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DBisAdminAsync(string SecureID, string Userid) {
            this.DBisAdminAsync(SecureID, Userid, null);
        }
        
        public void DBisAdminAsync(string SecureID, string Userid, object userState) {
            if ((this.onBeginDBisAdminDelegate == null)) {
                this.onBeginDBisAdminDelegate = new BeginOperationDelegate(this.OnBeginDBisAdmin);
            }
            if ((this.onEndDBisAdminDelegate == null)) {
                this.onEndDBisAdminDelegate = new EndOperationDelegate(this.OnEndDBisAdmin);
            }
            if ((this.onDBisAdminCompletedDelegate == null)) {
                this.onDBisAdminCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDBisAdminCompleted);
            }
            base.InvokeAsync(this.onBeginDBisAdminDelegate, new object[] {
                        SecureID,
                        Userid}, this.onEndDBisAdminDelegate, this.onDBisAdminCompletedDelegate, userState);
        }
        
        public void getUserParm(string SecureID, ref string sVariable, string UserParm) {
            base.Channel.getUserParm(SecureID, ref sVariable, UserParm);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserParm(string SecureID, ref string sVariable, string UserParm, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserParm(SecureID, ref sVariable, UserParm, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetUserParm(ref string sVariable, System.IAsyncResult result) {
            base.Channel.EndgetUserParm(ref sVariable, result);
        }
        
        private System.IAsyncResult OnBegingetUserParm(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string sVariable = ((string)(inValues[1]));
            string UserParm = ((string)(inValues[2]));
            return this.BegingetUserParm(SecureID, ref sVariable, UserParm, callback, asyncState);
        }
        
        private object[] OnEndgetUserParm(System.IAsyncResult result) {
            string sVariable = this.GetDefaultValueForInitialization<string>();
            this.EndgetUserParm(ref sVariable, result);
            return new object[] {
                    sVariable};
        }
        
        private void OngetUserParmCompleted(object state) {
            if ((this.getUserParmCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserParmCompleted(this, new getUserParmCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserParmAsync(string SecureID, string sVariable, string UserParm) {
            this.getUserParmAsync(SecureID, sVariable, UserParm, null);
        }
        
        public void getUserParmAsync(string SecureID, string sVariable, string UserParm, object userState) {
            if ((this.onBegingetUserParmDelegate == null)) {
                this.onBegingetUserParmDelegate = new BeginOperationDelegate(this.OnBegingetUserParm);
            }
            if ((this.onEndgetUserParmDelegate == null)) {
                this.onEndgetUserParmDelegate = new EndOperationDelegate(this.OnEndgetUserParm);
            }
            if ((this.ongetUserParmCompletedDelegate == null)) {
                this.ongetUserParmCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserParmCompleted);
            }
            base.InvokeAsync(this.onBegingetUserParmDelegate, new object[] {
                        SecureID,
                        sVariable,
                        UserParm}, this.onEndgetUserParmDelegate, this.ongetUserParmCompletedDelegate, userState);
        }
        
        public void RemoveUnwantedCharacters(string SecureID, ref string tgtString) {
            base.Channel.RemoveUnwantedCharacters(SecureID, ref tgtString);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveUnwantedCharacters(string SecureID, ref string tgtString, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveUnwantedCharacters(SecureID, ref tgtString, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveUnwantedCharacters(ref string tgtString, System.IAsyncResult result) {
            base.Channel.EndRemoveUnwantedCharacters(ref tgtString, result);
        }
        
        private System.IAsyncResult OnBeginRemoveUnwantedCharacters(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string tgtString = ((string)(inValues[1]));
            return this.BeginRemoveUnwantedCharacters(SecureID, ref tgtString, callback, asyncState);
        }
        
        private object[] OnEndRemoveUnwantedCharacters(System.IAsyncResult result) {
            string tgtString = this.GetDefaultValueForInitialization<string>();
            this.EndRemoveUnwantedCharacters(ref tgtString, result);
            return new object[] {
                    tgtString};
        }
        
        private void OnRemoveUnwantedCharactersCompleted(object state) {
            if ((this.RemoveUnwantedCharactersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveUnwantedCharactersCompleted(this, new RemoveUnwantedCharactersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveUnwantedCharactersAsync(string SecureID, string tgtString) {
            this.RemoveUnwantedCharactersAsync(SecureID, tgtString, null);
        }
        
        public void RemoveUnwantedCharactersAsync(string SecureID, string tgtString, object userState) {
            if ((this.onBeginRemoveUnwantedCharactersDelegate == null)) {
                this.onBeginRemoveUnwantedCharactersDelegate = new BeginOperationDelegate(this.OnBeginRemoveUnwantedCharacters);
            }
            if ((this.onEndRemoveUnwantedCharactersDelegate == null)) {
                this.onEndRemoveUnwantedCharactersDelegate = new EndOperationDelegate(this.OnEndRemoveUnwantedCharacters);
            }
            if ((this.onRemoveUnwantedCharactersCompletedDelegate == null)) {
                this.onRemoveUnwantedCharactersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveUnwantedCharactersCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveUnwantedCharactersDelegate, new object[] {
                        SecureID,
                        tgtString}, this.onEndRemoveUnwantedCharactersDelegate, this.onRemoveUnwantedCharactersCompletedDelegate, userState);
        }
        
        public string GetMachineIP(string SecureID) {
            return base.Channel.GetMachineIP(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetMachineIP(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetMachineIP(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetMachineIP(System.IAsyncResult result) {
            return base.Channel.EndGetMachineIP(result);
        }
        
        private System.IAsyncResult OnBeginGetMachineIP(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BeginGetMachineIP(SecureID, callback, asyncState);
        }
        
        private object[] OnEndGetMachineIP(System.IAsyncResult result) {
            string retVal = this.EndGetMachineIP(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetMachineIPCompleted(object state) {
            if ((this.GetMachineIPCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetMachineIPCompleted(this, new GetMachineIPCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetMachineIPAsync(string SecureID) {
            this.GetMachineIPAsync(SecureID, null);
        }
        
        public void GetMachineIPAsync(string SecureID, object userState) {
            if ((this.onBeginGetMachineIPDelegate == null)) {
                this.onBeginGetMachineIPDelegate = new BeginOperationDelegate(this.OnBeginGetMachineIP);
            }
            if ((this.onEndGetMachineIPDelegate == null)) {
                this.onEndGetMachineIPDelegate = new EndOperationDelegate(this.OnEndGetMachineIP);
            }
            if ((this.onGetMachineIPCompletedDelegate == null)) {
                this.onGetMachineIPCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetMachineIPCompleted);
            }
            base.InvokeAsync(this.onBeginGetMachineIPDelegate, new object[] {
                        SecureID}, this.onEndGetMachineIPDelegate, this.onGetMachineIPCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_License[] getClientLicenses(string SecureID, string CompanyID, ref string ErrorMessage, ref bool RC) {
            return base.Channel.getClientLicenses(SecureID, CompanyID, ref ErrorMessage, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClientLicenses(string SecureID, string CompanyID, ref string ErrorMessage, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClientLicenses(SecureID, CompanyID, ref ErrorMessage, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_License[] EndgetClientLicenses(ref string ErrorMessage, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndgetClientLicenses(ref ErrorMessage, ref RC, result);
        }
        
        private System.IAsyncResult OnBegingetClientLicenses(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CompanyID = ((string)(inValues[1]));
            string ErrorMessage = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            return this.BegingetClientLicenses(SecureID, CompanyID, ref ErrorMessage, ref RC, callback, asyncState);
        }
        
        private object[] OnEndgetClientLicenses(System.IAsyncResult result) {
            string ErrorMessage = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            ECMSearchWPF.SVCSearch.DS_License[] retVal = this.EndgetClientLicenses(ref ErrorMessage, ref RC, result);
            return new object[] {
                    ErrorMessage,
                    RC,
                    retVal};
        }
        
        private void OngetClientLicensesCompleted(object state) {
            if ((this.getClientLicensesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClientLicensesCompleted(this, new getClientLicensesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClientLicensesAsync(string SecureID, string CompanyID, string ErrorMessage, bool RC) {
            this.getClientLicensesAsync(SecureID, CompanyID, ErrorMessage, RC, null);
        }
        
        public void getClientLicensesAsync(string SecureID, string CompanyID, string ErrorMessage, bool RC, object userState) {
            if ((this.onBegingetClientLicensesDelegate == null)) {
                this.onBegingetClientLicensesDelegate = new BeginOperationDelegate(this.OnBegingetClientLicenses);
            }
            if ((this.onEndgetClientLicensesDelegate == null)) {
                this.onEndgetClientLicensesDelegate = new EndOperationDelegate(this.OnEndgetClientLicenses);
            }
            if ((this.ongetClientLicensesCompletedDelegate == null)) {
                this.ongetClientLicensesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClientLicensesCompleted);
            }
            base.InvokeAsync(this.onBegingetClientLicensesDelegate, new object[] {
                        SecureID,
                        CompanyID,
                        ErrorMessage,
                        RC}, this.onEndgetClientLicensesDelegate, this.ongetClientLicensesCompletedDelegate, userState);
        }
        
        public void cleanUpLibraryItems(string SecureID, string UserID) {
            base.Channel.cleanUpLibraryItems(SecureID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegincleanUpLibraryItems(string SecureID, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegincleanUpLibraryItems(SecureID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndcleanUpLibraryItems(System.IAsyncResult result) {
            base.Channel.EndcleanUpLibraryItems(result);
        }
        
        private System.IAsyncResult OnBegincleanUpLibraryItems(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return this.BegincleanUpLibraryItems(SecureID, UserID, callback, asyncState);
        }
        
        private object[] OnEndcleanUpLibraryItems(System.IAsyncResult result) {
            this.EndcleanUpLibraryItems(result);
            return null;
        }
        
        private void OncleanUpLibraryItemsCompleted(object state) {
            if ((this.cleanUpLibraryItemsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.cleanUpLibraryItemsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void cleanUpLibraryItemsAsync(string SecureID, string UserID) {
            this.cleanUpLibraryItemsAsync(SecureID, UserID, null);
        }
        
        public void cleanUpLibraryItemsAsync(string SecureID, string UserID, object userState) {
            if ((this.onBegincleanUpLibraryItemsDelegate == null)) {
                this.onBegincleanUpLibraryItemsDelegate = new BeginOperationDelegate(this.OnBegincleanUpLibraryItems);
            }
            if ((this.onEndcleanUpLibraryItemsDelegate == null)) {
                this.onEndcleanUpLibraryItemsDelegate = new EndOperationDelegate(this.OnEndcleanUpLibraryItems);
            }
            if ((this.oncleanUpLibraryItemsCompletedDelegate == null)) {
                this.oncleanUpLibraryItemsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OncleanUpLibraryItemsCompleted);
            }
            base.InvokeAsync(this.onBegincleanUpLibraryItemsDelegate, new object[] {
                        SecureID,
                        UserID}, this.onEndcleanUpLibraryItemsDelegate, this.oncleanUpLibraryItemsCompletedDelegate, userState);
        }
        
        public bool CleanLogTable(int SecureID, string UserID) {
            return base.Channel.CleanLogTable(SecureID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginCleanLogTable(int SecureID, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCleanLogTable(SecureID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndCleanLogTable(System.IAsyncResult result) {
            return base.Channel.EndCleanLogTable(result);
        }
        
        private System.IAsyncResult OnBeginCleanLogTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int SecureID = ((int)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return this.BeginCleanLogTable(SecureID, UserID, callback, asyncState);
        }
        
        private object[] OnEndCleanLogTable(System.IAsyncResult result) {
            bool retVal = this.EndCleanLogTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCleanLogTableCompleted(object state) {
            if ((this.CleanLogTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CleanLogTableCompleted(this, new CleanLogTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CleanLogTableAsync(int SecureID, string UserID) {
            this.CleanLogTableAsync(SecureID, UserID, null);
        }
        
        public void CleanLogTableAsync(int SecureID, string UserID, object userState) {
            if ((this.onBeginCleanLogTableDelegate == null)) {
                this.onBeginCleanLogTableDelegate = new BeginOperationDelegate(this.OnBeginCleanLogTable);
            }
            if ((this.onEndCleanLogTableDelegate == null)) {
                this.onEndCleanLogTableDelegate = new EndOperationDelegate(this.OnEndCleanLogTable);
            }
            if ((this.onCleanLogTableCompletedDelegate == null)) {
                this.onCleanLogTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCleanLogTableCompleted);
            }
            base.InvokeAsync(this.onBeginCleanLogTableDelegate, new object[] {
                        SecureID,
                        UserID}, this.onEndCleanLogTableDelegate, this.onCleanLogTableCompletedDelegate, userState);
        }
        
        public string getSecEndPoint() {
            return base.Channel.getSecEndPoint();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSecEndPoint(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSecEndPoint(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetSecEndPoint(System.IAsyncResult result) {
            return base.Channel.EndgetSecEndPoint(result);
        }
        
        private System.IAsyncResult OnBegingetSecEndPoint(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetSecEndPoint(callback, asyncState);
        }
        
        private object[] OnEndgetSecEndPoint(System.IAsyncResult result) {
            string retVal = this.EndgetSecEndPoint(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSecEndPointCompleted(object state) {
            if ((this.getSecEndPointCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSecEndPointCompleted(this, new getSecEndPointCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSecEndPointAsync() {
            this.getSecEndPointAsync(null);
        }
        
        public void getSecEndPointAsync(object userState) {
            if ((this.onBegingetSecEndPointDelegate == null)) {
                this.onBegingetSecEndPointDelegate = new BeginOperationDelegate(this.OnBegingetSecEndPoint);
            }
            if ((this.onEndgetSecEndPointDelegate == null)) {
                this.onEndgetSecEndPointDelegate = new EndOperationDelegate(this.OnEndgetSecEndPoint);
            }
            if ((this.ongetSecEndPointCompletedDelegate == null)) {
                this.ongetSecEndPointCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSecEndPointCompleted);
            }
            base.InvokeAsync(this.onBegingetSecEndPointDelegate, null, this.onEndgetSecEndPointDelegate, this.ongetSecEndPointCompletedDelegate, userState);
        }
        
        public string getContractID(string SecureID, string UserID) {
            return base.Channel.getContractID(SecureID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetContractID(string SecureID, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetContractID(SecureID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetContractID(System.IAsyncResult result) {
            return base.Channel.EndgetContractID(result);
        }
        
        private System.IAsyncResult OnBegingetContractID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return this.BegingetContractID(SecureID, UserID, callback, asyncState);
        }
        
        private object[] OnEndgetContractID(System.IAsyncResult result) {
            string retVal = this.EndgetContractID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetContractIDCompleted(object state) {
            if ((this.getContractIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getContractIDCompleted(this, new getContractIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getContractIDAsync(string SecureID, string UserID) {
            this.getContractIDAsync(SecureID, UserID, null);
        }
        
        public void getContractIDAsync(string SecureID, string UserID, object userState) {
            if ((this.onBegingetContractIDDelegate == null)) {
                this.onBegingetContractIDDelegate = new BeginOperationDelegate(this.OnBegingetContractID);
            }
            if ((this.onEndgetContractIDDelegate == null)) {
                this.onEndgetContractIDDelegate = new EndOperationDelegate(this.OnEndgetContractID);
            }
            if ((this.ongetContractIDCompletedDelegate == null)) {
                this.ongetContractIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetContractIDCompleted);
            }
            base.InvokeAsync(this.onBegingetContractIDDelegate, new object[] {
                        SecureID,
                        UserID}, this.onEndgetContractIDDelegate, this.ongetContractIDCompletedDelegate, userState);
        }
        
        public void AddGroupLibraryAccess(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection) {
            base.Channel.AddGroupLibraryAccess(SecureID, UserID, LibraryName, GroupName, GroupOwnerUserID, ref RC, CurrUserID, SessionID, ControlSection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddGroupLibraryAccess(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, ref bool RC, string CurrUserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroupLibraryAccess(SecureID, UserID, LibraryName, GroupName, GroupOwnerUserID, ref RC, CurrUserID, SessionID, ControlSection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddGroupLibraryAccess(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndAddGroupLibraryAccess(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginAddGroupLibraryAccess(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string LibraryName = ((string)(inValues[2]));
            string GroupName = ((string)(inValues[3]));
            string GroupOwnerUserID = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string CurrUserID = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            string ControlSection = ((string)(inValues[8]));
            return this.BeginAddGroupLibraryAccess(SecureID, UserID, LibraryName, GroupName, GroupOwnerUserID, ref RC, CurrUserID, SessionID, ControlSection, callback, asyncState);
        }
        
        private object[] OnEndAddGroupLibraryAccess(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndAddGroupLibraryAccess(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnAddGroupLibraryAccessCompleted(object state) {
            if ((this.AddGroupLibraryAccessCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupLibraryAccessCompleted(this, new AddGroupLibraryAccessCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupLibraryAccessAsync(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, bool RC, string CurrUserID, string SessionID, string ControlSection) {
            this.AddGroupLibraryAccessAsync(SecureID, UserID, LibraryName, GroupName, GroupOwnerUserID, RC, CurrUserID, SessionID, ControlSection, null);
        }
        
        public void AddGroupLibraryAccessAsync(string SecureID, string UserID, string LibraryName, string GroupName, string GroupOwnerUserID, bool RC, string CurrUserID, string SessionID, string ControlSection, object userState) {
            if ((this.onBeginAddGroupLibraryAccessDelegate == null)) {
                this.onBeginAddGroupLibraryAccessDelegate = new BeginOperationDelegate(this.OnBeginAddGroupLibraryAccess);
            }
            if ((this.onEndAddGroupLibraryAccessDelegate == null)) {
                this.onEndAddGroupLibraryAccessDelegate = new EndOperationDelegate(this.OnEndAddGroupLibraryAccess);
            }
            if ((this.onAddGroupLibraryAccessCompletedDelegate == null)) {
                this.onAddGroupLibraryAccessCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupLibraryAccessCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupLibraryAccessDelegate, new object[] {
                        SecureID,
                        UserID,
                        LibraryName,
                        GroupName,
                        GroupOwnerUserID,
                        RC,
                        CurrUserID,
                        SessionID,
                        ControlSection}, this.onEndAddGroupLibraryAccessDelegate, this.onAddGroupLibraryAccessCompletedDelegate, userState);
        }
        
        public bool AddGroupUser(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection) {
            return base.Channel.AddGroupUser(SecureID, SessionID, CurrUserID, UserID, FullAccess, ReadOnlyAccess, DeleteAccess, Searchable, GroupOwnerUserID, GroupName, ControlSection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddGroupUser(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddGroupUser(SecureID, SessionID, CurrUserID, UserID, FullAccess, ReadOnlyAccess, DeleteAccess, Searchable, GroupOwnerUserID, GroupName, ControlSection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndAddGroupUser(System.IAsyncResult result) {
            return base.Channel.EndAddGroupUser(result);
        }
        
        private System.IAsyncResult OnBeginAddGroupUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SessionID = ((string)(inValues[1]));
            string CurrUserID = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            string FullAccess = ((string)(inValues[4]));
            string ReadOnlyAccess = ((string)(inValues[5]));
            string DeleteAccess = ((string)(inValues[6]));
            string Searchable = ((string)(inValues[7]));
            string GroupOwnerUserID = ((string)(inValues[8]));
            string GroupName = ((string)(inValues[9]));
            string ControlSection = ((string)(inValues[10]));
            return this.BeginAddGroupUser(SecureID, SessionID, CurrUserID, UserID, FullAccess, ReadOnlyAccess, DeleteAccess, Searchable, GroupOwnerUserID, GroupName, ControlSection, callback, asyncState);
        }
        
        private object[] OnEndAddGroupUser(System.IAsyncResult result) {
            bool retVal = this.EndAddGroupUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddGroupUserCompleted(object state) {
            if ((this.AddGroupUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddGroupUserCompleted(this, new AddGroupUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddGroupUserAsync(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection) {
            this.AddGroupUserAsync(SecureID, SessionID, CurrUserID, UserID, FullAccess, ReadOnlyAccess, DeleteAccess, Searchable, GroupOwnerUserID, GroupName, ControlSection, null);
        }
        
        public void AddGroupUserAsync(string SecureID, string SessionID, string CurrUserID, string UserID, string FullAccess, string ReadOnlyAccess, string DeleteAccess, string Searchable, string GroupOwnerUserID, string GroupName, string ControlSection, object userState) {
            if ((this.onBeginAddGroupUserDelegate == null)) {
                this.onBeginAddGroupUserDelegate = new BeginOperationDelegate(this.OnBeginAddGroupUser);
            }
            if ((this.onEndAddGroupUserDelegate == null)) {
                this.onEndAddGroupUserDelegate = new EndOperationDelegate(this.OnEndAddGroupUser);
            }
            if ((this.onAddGroupUserCompletedDelegate == null)) {
                this.onAddGroupUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddGroupUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddGroupUserDelegate, new object[] {
                        SecureID,
                        SessionID,
                        CurrUserID,
                        UserID,
                        FullAccess,
                        ReadOnlyAccess,
                        DeleteAccess,
                        Searchable,
                        GroupOwnerUserID,
                        GroupName,
                        ControlSection}, this.onEndAddGroupUserDelegate, this.onAddGroupUserCompletedDelegate, userState);
        }
        
        public string DecryptPhrase(string SecureID, string SID, string Phrase, string shiftKey) {
            return base.Channel.DecryptPhrase(SecureID, SID, Phrase, shiftKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDecryptPhrase(string SecureID, string SID, string Phrase, string shiftKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDecryptPhrase(SecureID, SID, Phrase, shiftKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndDecryptPhrase(System.IAsyncResult result) {
            return base.Channel.EndDecryptPhrase(result);
        }
        
        private System.IAsyncResult OnBeginDecryptPhrase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string Phrase = ((string)(inValues[2]));
            string shiftKey = ((string)(inValues[3]));
            return this.BeginDecryptPhrase(SecureID, SID, Phrase, shiftKey, callback, asyncState);
        }
        
        private object[] OnEndDecryptPhrase(System.IAsyncResult result) {
            string retVal = this.EndDecryptPhrase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDecryptPhraseCompleted(object state) {
            if ((this.DecryptPhraseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DecryptPhraseCompleted(this, new DecryptPhraseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DecryptPhraseAsync(string SecureID, string SID, string Phrase, string shiftKey) {
            this.DecryptPhraseAsync(SecureID, SID, Phrase, shiftKey, null);
        }
        
        public void DecryptPhraseAsync(string SecureID, string SID, string Phrase, string shiftKey, object userState) {
            if ((this.onBeginDecryptPhraseDelegate == null)) {
                this.onBeginDecryptPhraseDelegate = new BeginOperationDelegate(this.OnBeginDecryptPhrase);
            }
            if ((this.onEndDecryptPhraseDelegate == null)) {
                this.onEndDecryptPhraseDelegate = new EndOperationDelegate(this.OnEndDecryptPhrase);
            }
            if ((this.onDecryptPhraseCompletedDelegate == null)) {
                this.onDecryptPhraseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDecryptPhraseCompleted);
            }
            base.InvokeAsync(this.onBeginDecryptPhraseDelegate, new object[] {
                        SecureID,
                        SID,
                        Phrase,
                        shiftKey}, this.onEndDecryptPhraseDelegate, this.onDecryptPhraseCompletedDelegate, userState);
        }
        
        public string EncryptPhrase(string SecureID, string SID, string Phrase, string shiftKey) {
            return base.Channel.EncryptPhrase(SecureID, SID, Phrase, shiftKey);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginEncryptPhrase(string SecureID, string SID, string Phrase, string shiftKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginEncryptPhrase(SecureID, SID, Phrase, shiftKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndEncryptPhrase(System.IAsyncResult result) {
            return base.Channel.EndEncryptPhrase(result);
        }
        
        private System.IAsyncResult OnBeginEncryptPhrase(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string Phrase = ((string)(inValues[2]));
            string shiftKey = ((string)(inValues[3]));
            return this.BeginEncryptPhrase(SecureID, SID, Phrase, shiftKey, callback, asyncState);
        }
        
        private object[] OnEndEncryptPhrase(System.IAsyncResult result) {
            string retVal = this.EndEncryptPhrase(result);
            return new object[] {
                    retVal};
        }
        
        private void OnEncryptPhraseCompleted(object state) {
            if ((this.EncryptPhraseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.EncryptPhraseCompleted(this, new EncryptPhraseCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void EncryptPhraseAsync(string SecureID, string SID, string Phrase, string shiftKey) {
            this.EncryptPhraseAsync(SecureID, SID, Phrase, shiftKey, null);
        }
        
        public void EncryptPhraseAsync(string SecureID, string SID, string Phrase, string shiftKey, object userState) {
            if ((this.onBeginEncryptPhraseDelegate == null)) {
                this.onBeginEncryptPhraseDelegate = new BeginOperationDelegate(this.OnBeginEncryptPhrase);
            }
            if ((this.onEndEncryptPhraseDelegate == null)) {
                this.onEndEncryptPhraseDelegate = new EndOperationDelegate(this.OnEndEncryptPhrase);
            }
            if ((this.onEncryptPhraseCompletedDelegate == null)) {
                this.onEncryptPhraseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnEncryptPhraseCompleted);
            }
            base.InvokeAsync(this.onBeginEncryptPhraseDelegate, new object[] {
                        SecureID,
                        SID,
                        Phrase,
                        shiftKey}, this.onEndEncryptPhraseDelegate, this.onEncryptPhraseCompletedDelegate, userState);
        }
        
        public bool DBExecuteEncryptedSql(string SecureID, ref string MySql, string EKEY) {
            return base.Channel.DBExecuteEncryptedSql(SecureID, ref MySql, EKEY);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDBExecuteEncryptedSql(string SecureID, ref string MySql, string EKEY, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDBExecuteEncryptedSql(SecureID, ref MySql, EKEY, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDBExecuteEncryptedSql(ref string MySql, System.IAsyncResult result) {
            return base.Channel.EndDBExecuteEncryptedSql(ref MySql, result);
        }
        
        private System.IAsyncResult OnBeginDBExecuteEncryptedSql(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string MySql = ((string)(inValues[1]));
            string EKEY = ((string)(inValues[2]));
            return this.BeginDBExecuteEncryptedSql(SecureID, ref MySql, EKEY, callback, asyncState);
        }
        
        private object[] OnEndDBExecuteEncryptedSql(System.IAsyncResult result) {
            string MySql = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDBExecuteEncryptedSql(ref MySql, result);
            return new object[] {
                    MySql,
                    retVal};
        }
        
        private void OnDBExecuteEncryptedSqlCompleted(object state) {
            if ((this.DBExecuteEncryptedSqlCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DBExecuteEncryptedSqlCompleted(this, new DBExecuteEncryptedSqlCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DBExecuteEncryptedSqlAsync(string SecureID, string MySql, string EKEY) {
            this.DBExecuteEncryptedSqlAsync(SecureID, MySql, EKEY, null);
        }
        
        public void DBExecuteEncryptedSqlAsync(string SecureID, string MySql, string EKEY, object userState) {
            if ((this.onBeginDBExecuteEncryptedSqlDelegate == null)) {
                this.onBeginDBExecuteEncryptedSqlDelegate = new BeginOperationDelegate(this.OnBeginDBExecuteEncryptedSql);
            }
            if ((this.onEndDBExecuteEncryptedSqlDelegate == null)) {
                this.onEndDBExecuteEncryptedSqlDelegate = new EndOperationDelegate(this.OnEndDBExecuteEncryptedSql);
            }
            if ((this.onDBExecuteEncryptedSqlCompletedDelegate == null)) {
                this.onDBExecuteEncryptedSqlCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDBExecuteEncryptedSqlCompleted);
            }
            base.InvokeAsync(this.onBeginDBExecuteEncryptedSqlDelegate, new object[] {
                        SecureID,
                        MySql,
                        EKEY}, this.onEndDBExecuteEncryptedSqlDelegate, this.onDBExecuteEncryptedSqlCompletedDelegate, userState);
        }
        
        public bool validateAttachSecureLogin(ref string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS) {
            return base.Channel.validateAttachSecureLogin(ref SecureID, CompanyID, RepoID, UserLogin, PW, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginvalidateAttachSecureLogin(ref string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginvalidateAttachSecureLogin(ref SecureID, CompanyID, RepoID, UserLogin, PW, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndvalidateAttachSecureLogin(ref string SecureID, ref bool RC, ref string RetMsg, ref string GateWayEndPoint, ref string DownloadEndpoint, ref string ENCCS, System.IAsyncResult result) {
            return base.Channel.EndvalidateAttachSecureLogin(ref SecureID, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS, result);
        }
        
        private System.IAsyncResult OnBeginvalidateAttachSecureLogin(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CompanyID = ((string)(inValues[1]));
            string RepoID = ((string)(inValues[2]));
            string UserLogin = ((string)(inValues[3]));
            string PW = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string RetMsg = ((string)(inValues[6]));
            string GateWayEndPoint = ((string)(inValues[7]));
            string DownloadEndpoint = ((string)(inValues[8]));
            string ENCCS = ((string)(inValues[9]));
            return this.BeginvalidateAttachSecureLogin(ref SecureID, CompanyID, RepoID, UserLogin, PW, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS, callback, asyncState);
        }
        
        private object[] OnEndvalidateAttachSecureLogin(System.IAsyncResult result) {
            string SecureID = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            string GateWayEndPoint = this.GetDefaultValueForInitialization<string>();
            string DownloadEndpoint = this.GetDefaultValueForInitialization<string>();
            string ENCCS = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndvalidateAttachSecureLogin(ref SecureID, ref RC, ref RetMsg, ref GateWayEndPoint, ref DownloadEndpoint, ref ENCCS, result);
            return new object[] {
                    SecureID,
                    RC,
                    RetMsg,
                    GateWayEndPoint,
                    DownloadEndpoint,
                    ENCCS,
                    retVal};
        }
        
        private void OnvalidateAttachSecureLoginCompleted(object state) {
            if ((this.validateAttachSecureLoginCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.validateAttachSecureLoginCompleted(this, new validateAttachSecureLoginCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void validateAttachSecureLoginAsync(string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, bool RC, string RetMsg, string GateWayEndPoint, string DownloadEndpoint, string ENCCS) {
            this.validateAttachSecureLoginAsync(SecureID, CompanyID, RepoID, UserLogin, PW, RC, RetMsg, GateWayEndPoint, DownloadEndpoint, ENCCS, null);
        }
        
        public void validateAttachSecureLoginAsync(string SecureID, string CompanyID, string RepoID, string UserLogin, string PW, bool RC, string RetMsg, string GateWayEndPoint, string DownloadEndpoint, string ENCCS, object userState) {
            if ((this.onBeginvalidateAttachSecureLoginDelegate == null)) {
                this.onBeginvalidateAttachSecureLoginDelegate = new BeginOperationDelegate(this.OnBeginvalidateAttachSecureLogin);
            }
            if ((this.onEndvalidateAttachSecureLoginDelegate == null)) {
                this.onEndvalidateAttachSecureLoginDelegate = new EndOperationDelegate(this.OnEndvalidateAttachSecureLogin);
            }
            if ((this.onvalidateAttachSecureLoginCompletedDelegate == null)) {
                this.onvalidateAttachSecureLoginCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnvalidateAttachSecureLoginCompleted);
            }
            base.InvokeAsync(this.onBeginvalidateAttachSecureLoginDelegate, new object[] {
                        SecureID,
                        CompanyID,
                        RepoID,
                        UserLogin,
                        PW,
                        RC,
                        RetMsg,
                        GateWayEndPoint,
                        DownloadEndpoint,
                        ENCCS}, this.onEndvalidateAttachSecureLoginDelegate, this.onvalidateAttachSecureLoginCompletedDelegate, userState);
        }
        
        public string GetXrtTest(System.DateTime dt) {
            return base.Channel.GetXrtTest(dt);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetXrtTest(System.DateTime dt, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetXrtTest(dt, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGetXrtTest(System.IAsyncResult result) {
            return base.Channel.EndGetXrtTest(result);
        }
        
        private System.IAsyncResult OnBeginGetXrtTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            System.DateTime dt = ((System.DateTime)(inValues[0]));
            return this.BeginGetXrtTest(dt, callback, asyncState);
        }
        
        private object[] OnEndGetXrtTest(System.IAsyncResult result) {
            string retVal = this.EndGetXrtTest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetXrtTestCompleted(object state) {
            if ((this.GetXrtTestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetXrtTestCompleted(this, new GetXrtTestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetXrtTestAsync(System.DateTime dt) {
            this.GetXrtTestAsync(dt, null);
        }
        
        public void GetXrtTestAsync(System.DateTime dt, object userState) {
            if ((this.onBeginGetXrtTestDelegate == null)) {
                this.onBeginGetXrtTestDelegate = new BeginOperationDelegate(this.OnBeginGetXrtTest);
            }
            if ((this.onEndGetXrtTestDelegate == null)) {
                this.onEndGetXrtTestDelegate = new EndOperationDelegate(this.OnEndGetXrtTest);
            }
            if ((this.onGetXrtTestCompletedDelegate == null)) {
                this.onGetXrtTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetXrtTestCompleted);
            }
            base.InvokeAsync(this.onBeginGetXrtTestDelegate, new object[] {
                        dt}, this.onEndGetXrtTestDelegate, this.onGetXrtTestCompletedDelegate, userState);
        }
        
        public void ckContentFlags(string SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic) {
            base.Channel.ckContentFlags(SecureID, SourceGuid, ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginckContentFlags(string SecureID, string SourceGuid, ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginckContentFlags(SecureID, SourceGuid, ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndckContentFlags(ref bool SD, ref bool SP, ref bool SAP, ref bool bMaster, ref bool RSS, ref bool WEB, ref bool bPublic, System.IAsyncResult result) {
            base.Channel.EndckContentFlags(ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic, result);
        }
        
        private System.IAsyncResult OnBeginckContentFlags(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SourceGuid = ((string)(inValues[1]));
            bool SD = ((bool)(inValues[2]));
            bool SP = ((bool)(inValues[3]));
            bool SAP = ((bool)(inValues[4]));
            bool bMaster = ((bool)(inValues[5]));
            bool RSS = ((bool)(inValues[6]));
            bool WEB = ((bool)(inValues[7]));
            bool bPublic = ((bool)(inValues[8]));
            return this.BeginckContentFlags(SecureID, SourceGuid, ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic, callback, asyncState);
        }
        
        private object[] OnEndckContentFlags(System.IAsyncResult result) {
            bool SD = this.GetDefaultValueForInitialization<bool>();
            bool SP = this.GetDefaultValueForInitialization<bool>();
            bool SAP = this.GetDefaultValueForInitialization<bool>();
            bool bMaster = this.GetDefaultValueForInitialization<bool>();
            bool RSS = this.GetDefaultValueForInitialization<bool>();
            bool WEB = this.GetDefaultValueForInitialization<bool>();
            bool bPublic = this.GetDefaultValueForInitialization<bool>();
            this.EndckContentFlags(ref SD, ref SP, ref SAP, ref bMaster, ref RSS, ref WEB, ref bPublic, result);
            return new object[] {
                    SD,
                    SP,
                    SAP,
                    bMaster,
                    RSS,
                    WEB,
                    bPublic};
        }
        
        private void OnckContentFlagsCompleted(object state) {
            if ((this.ckContentFlagsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ckContentFlagsCompleted(this, new ckContentFlagsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ckContentFlagsAsync(string SecureID, string SourceGuid, bool SD, bool SP, bool SAP, bool bMaster, bool RSS, bool WEB, bool bPublic) {
            this.ckContentFlagsAsync(SecureID, SourceGuid, SD, SP, SAP, bMaster, RSS, WEB, bPublic, null);
        }
        
        public void ckContentFlagsAsync(string SecureID, string SourceGuid, bool SD, bool SP, bool SAP, bool bMaster, bool RSS, bool WEB, bool bPublic, object userState) {
            if ((this.onBeginckContentFlagsDelegate == null)) {
                this.onBeginckContentFlagsDelegate = new BeginOperationDelegate(this.OnBeginckContentFlags);
            }
            if ((this.onEndckContentFlagsDelegate == null)) {
                this.onEndckContentFlagsDelegate = new EndOperationDelegate(this.OnEndckContentFlags);
            }
            if ((this.onckContentFlagsCompletedDelegate == null)) {
                this.onckContentFlagsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnckContentFlagsCompleted);
            }
            base.InvokeAsync(this.onBeginckContentFlagsDelegate, new object[] {
                        SecureID,
                        SourceGuid,
                        SD,
                        SP,
                        SAP,
                        bMaster,
                        RSS,
                        WEB,
                        bPublic}, this.onEndckContentFlagsDelegate, this.onckContentFlagsCompletedDelegate, userState);
        }
        
        public string getCustomerLogoTitle() {
            return base.Channel.getCustomerLogoTitle();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetCustomerLogoTitle(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetCustomerLogoTitle(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetCustomerLogoTitle(System.IAsyncResult result) {
            return base.Channel.EndgetCustomerLogoTitle(result);
        }
        
        private System.IAsyncResult OnBegingetCustomerLogoTitle(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetCustomerLogoTitle(callback, asyncState);
        }
        
        private object[] OnEndgetCustomerLogoTitle(System.IAsyncResult result) {
            string retVal = this.EndgetCustomerLogoTitle(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetCustomerLogoTitleCompleted(object state) {
            if ((this.getCustomerLogoTitleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getCustomerLogoTitleCompleted(this, new getCustomerLogoTitleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getCustomerLogoTitleAsync() {
            this.getCustomerLogoTitleAsync(null);
        }
        
        public void getCustomerLogoTitleAsync(object userState) {
            if ((this.onBegingetCustomerLogoTitleDelegate == null)) {
                this.onBegingetCustomerLogoTitleDelegate = new BeginOperationDelegate(this.OnBegingetCustomerLogoTitle);
            }
            if ((this.onEndgetCustomerLogoTitleDelegate == null)) {
                this.onEndgetCustomerLogoTitleDelegate = new EndOperationDelegate(this.OnEndgetCustomerLogoTitle);
            }
            if ((this.ongetCustomerLogoTitleCompletedDelegate == null)) {
                this.ongetCustomerLogoTitleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetCustomerLogoTitleCompleted);
            }
            base.InvokeAsync(this.onBegingetCustomerLogoTitleDelegate, null, this.onEndgetCustomerLogoTitleDelegate, this.ongetCustomerLogoTitleCompletedDelegate, userState);
        }
        
        public int getAffinitydelay() {
            return base.Channel.getAffinitydelay();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetAffinitydelay(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetAffinitydelay(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndgetAffinitydelay(System.IAsyncResult result) {
            return base.Channel.EndgetAffinitydelay(result);
        }
        
        private System.IAsyncResult OnBegingetAffinitydelay(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetAffinitydelay(callback, asyncState);
        }
        
        private object[] OnEndgetAffinitydelay(System.IAsyncResult result) {
            int retVal = this.EndgetAffinitydelay(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetAffinitydelayCompleted(object state) {
            if ((this.getAffinitydelayCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getAffinitydelayCompleted(this, new getAffinitydelayCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getAffinitydelayAsync() {
            this.getAffinitydelayAsync(null);
        }
        
        public void getAffinitydelayAsync(object userState) {
            if ((this.onBegingetAffinitydelayDelegate == null)) {
                this.onBegingetAffinitydelayDelegate = new BeginOperationDelegate(this.OnBegingetAffinitydelay);
            }
            if ((this.onEndgetAffinitydelayDelegate == null)) {
                this.onEndgetAffinitydelayDelegate = new EndOperationDelegate(this.OnEndgetAffinitydelay);
            }
            if ((this.ongetAffinitydelayCompletedDelegate == null)) {
                this.ongetAffinitydelayCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetAffinitydelayCompleted);
            }
            base.InvokeAsync(this.onBegingetAffinitydelayDelegate, null, this.onEndgetAffinitydelayDelegate, this.ongetAffinitydelayCompletedDelegate, userState);
        }
        
        public string getClcURL() {
            return base.Channel.getClcURL();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetClcURL(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetClcURL(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetClcURL(System.IAsyncResult result) {
            return base.Channel.EndgetClcURL(result);
        }
        
        private System.IAsyncResult OnBegingetClcURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetClcURL(callback, asyncState);
        }
        
        private object[] OnEndgetClcURL(System.IAsyncResult result) {
            string retVal = this.EndgetClcURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetClcURLCompleted(object state) {
            if ((this.getClcURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getClcURLCompleted(this, new getClcURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getClcURLAsync() {
            this.getClcURLAsync(null);
        }
        
        public void getClcURLAsync(object userState) {
            if ((this.onBegingetClcURLDelegate == null)) {
                this.onBegingetClcURLDelegate = new BeginOperationDelegate(this.OnBegingetClcURL);
            }
            if ((this.onEndgetClcURLDelegate == null)) {
                this.onEndgetClcURLDelegate = new EndOperationDelegate(this.OnEndgetClcURL);
            }
            if ((this.ongetClcURLCompletedDelegate == null)) {
                this.ongetClcURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetClcURLCompleted);
            }
            base.InvokeAsync(this.onBegingetClcURLDelegate, null, this.onEndgetClcURLDelegate, this.ongetClcURLCompletedDelegate, userState);
        }
        
        public string getArchiverURL() {
            return base.Channel.getArchiverURL();
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetArchiverURL(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetArchiverURL(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetArchiverURL(System.IAsyncResult result) {
            return base.Channel.EndgetArchiverURL(result);
        }
        
        private System.IAsyncResult OnBegingetArchiverURL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return this.BegingetArchiverURL(callback, asyncState);
        }
        
        private object[] OnEndgetArchiverURL(System.IAsyncResult result) {
            string retVal = this.EndgetArchiverURL(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetArchiverURLCompleted(object state) {
            if ((this.getArchiverURLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getArchiverURLCompleted(this, new getArchiverURLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getArchiverURLAsync() {
            this.getArchiverURLAsync(null);
        }
        
        public void getArchiverURLAsync(object userState) {
            if ((this.onBegingetArchiverURLDelegate == null)) {
                this.onBegingetArchiverURLDelegate = new BeginOperationDelegate(this.OnBegingetArchiverURL);
            }
            if ((this.onEndgetArchiverURLDelegate == null)) {
                this.onEndgetArchiverURLDelegate = new EndOperationDelegate(this.OnEndgetArchiverURL);
            }
            if ((this.ongetArchiverURLCompletedDelegate == null)) {
                this.ongetArchiverURLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetArchiverURLCompleted);
            }
            base.InvokeAsync(this.onBegingetArchiverURLDelegate, null, this.onEndgetArchiverURLDelegate, this.ongetArchiverURLCompletedDelegate, userState);
        }
        
        public bool ExecuteSqlStack(string SecureID, ref System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection) {
            return base.Channel.ExecuteSqlStack(SecureID, ref SqlStack, UserID, SessionID, ControlSection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginExecuteSqlStack(string SecureID, ref System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginExecuteSqlStack(SecureID, ref SqlStack, UserID, SessionID, ControlSection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndExecuteSqlStack(ref System.Collections.Generic.Dictionary<int, string> SqlStack, System.IAsyncResult result) {
            return base.Channel.EndExecuteSqlStack(ref SqlStack, result);
        }
        
        private System.IAsyncResult OnBeginExecuteSqlStack(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            System.Collections.Generic.Dictionary<int, string> SqlStack = ((System.Collections.Generic.Dictionary<int, string>)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            string SessionID = ((string)(inValues[3]));
            string ControlSection = ((string)(inValues[4]));
            return this.BeginExecuteSqlStack(SecureID, ref SqlStack, UserID, SessionID, ControlSection, callback, asyncState);
        }
        
        private object[] OnEndExecuteSqlStack(System.IAsyncResult result) {
            System.Collections.Generic.Dictionary<int, string> SqlStack = this.GetDefaultValueForInitialization<System.Collections.Generic.Dictionary<int, string>>();
            bool retVal = this.EndExecuteSqlStack(ref SqlStack, result);
            return new object[] {
                    SqlStack,
                    retVal};
        }
        
        private void OnExecuteSqlStackCompleted(object state) {
            if ((this.ExecuteSqlStackCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ExecuteSqlStackCompleted(this, new ExecuteSqlStackCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ExecuteSqlStackAsync(string SecureID, System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection) {
            this.ExecuteSqlStackAsync(SecureID, SqlStack, UserID, SessionID, ControlSection, null);
        }
        
        public void ExecuteSqlStackAsync(string SecureID, System.Collections.Generic.Dictionary<int, string> SqlStack, string UserID, string SessionID, string ControlSection, object userState) {
            if ((this.onBeginExecuteSqlStackDelegate == null)) {
                this.onBeginExecuteSqlStackDelegate = new BeginOperationDelegate(this.OnBeginExecuteSqlStack);
            }
            if ((this.onEndExecuteSqlStackDelegate == null)) {
                this.onEndExecuteSqlStackDelegate = new EndOperationDelegate(this.OnEndExecuteSqlStack);
            }
            if ((this.onExecuteSqlStackCompletedDelegate == null)) {
                this.onExecuteSqlStackCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnExecuteSqlStackCompleted);
            }
            base.InvokeAsync(this.onBeginExecuteSqlStackDelegate, new object[] {
                        SecureID,
                        SqlStack,
                        UserID,
                        SessionID,
                        ControlSection}, this.onEndExecuteSqlStackDelegate, this.onExecuteSqlStackCompletedDelegate, userState);
        }
        
        public string getDefaultScreen(string SecureID, string UserID) {
            return base.Channel.getDefaultScreen(SecureID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetDefaultScreen(string SecureID, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetDefaultScreen(SecureID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetDefaultScreen(System.IAsyncResult result) {
            return base.Channel.EndgetDefaultScreen(result);
        }
        
        private System.IAsyncResult OnBegingetDefaultScreen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return this.BegingetDefaultScreen(SecureID, UserID, callback, asyncState);
        }
        
        private object[] OnEndgetDefaultScreen(System.IAsyncResult result) {
            string retVal = this.EndgetDefaultScreen(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetDefaultScreenCompleted(object state) {
            if ((this.getDefaultScreenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getDefaultScreenCompleted(this, new getDefaultScreenCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getDefaultScreenAsync(string SecureID, string UserID) {
            this.getDefaultScreenAsync(SecureID, UserID, null);
        }
        
        public void getDefaultScreenAsync(string SecureID, string UserID, object userState) {
            if ((this.onBegingetDefaultScreenDelegate == null)) {
                this.onBegingetDefaultScreenDelegate = new BeginOperationDelegate(this.OnBegingetDefaultScreen);
            }
            if ((this.onEndgetDefaultScreenDelegate == null)) {
                this.onEndgetDefaultScreenDelegate = new EndOperationDelegate(this.OnEndgetDefaultScreen);
            }
            if ((this.ongetDefaultScreenCompletedDelegate == null)) {
                this.ongetDefaultScreenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetDefaultScreenCompleted);
            }
            base.InvokeAsync(this.onBegingetDefaultScreenDelegate, new object[] {
                        SecureID,
                        UserID}, this.onEndgetDefaultScreenDelegate, this.ongetDefaultScreenCompletedDelegate, userState);
        }
        
        public bool RecallUserSearch(string SecureID, string SearchName, string UID, ref string strSearches) {
            return base.Channel.RecallUserSearch(SecureID, SearchName, UID, ref strSearches);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRecallUserSearch(string SecureID, string SearchName, string UID, ref string strSearches, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRecallUserSearch(SecureID, SearchName, UID, ref strSearches, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndRecallUserSearch(ref string strSearches, System.IAsyncResult result) {
            return base.Channel.EndRecallUserSearch(ref strSearches, result);
        }
        
        private System.IAsyncResult OnBeginRecallUserSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SearchName = ((string)(inValues[1]));
            string UID = ((string)(inValues[2]));
            string strSearches = ((string)(inValues[3]));
            return this.BeginRecallUserSearch(SecureID, SearchName, UID, ref strSearches, callback, asyncState);
        }
        
        private object[] OnEndRecallUserSearch(System.IAsyncResult result) {
            string strSearches = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndRecallUserSearch(ref strSearches, result);
            return new object[] {
                    strSearches,
                    retVal};
        }
        
        private void OnRecallUserSearchCompleted(object state) {
            if ((this.RecallUserSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RecallUserSearchCompleted(this, new RecallUserSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RecallUserSearchAsync(string SecureID, string SearchName, string UID, string strSearches) {
            this.RecallUserSearchAsync(SecureID, SearchName, UID, strSearches, null);
        }
        
        public void RecallUserSearchAsync(string SecureID, string SearchName, string UID, string strSearches, object userState) {
            if ((this.onBeginRecallUserSearchDelegate == null)) {
                this.onBeginRecallUserSearchDelegate = new BeginOperationDelegate(this.OnBeginRecallUserSearch);
            }
            if ((this.onEndRecallUserSearchDelegate == null)) {
                this.onEndRecallUserSearchDelegate = new EndOperationDelegate(this.OnEndRecallUserSearch);
            }
            if ((this.onRecallUserSearchCompletedDelegate == null)) {
                this.onRecallUserSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRecallUserSearchCompleted);
            }
            base.InvokeAsync(this.onBeginRecallUserSearchDelegate, new object[] {
                        SecureID,
                        SearchName,
                        UID,
                        strSearches}, this.onEndRecallUserSearchDelegate, this.onRecallUserSearchCompletedDelegate, userState);
        }
        
        public bool SaveUserSearch(string SecureID, string SearchName, string UID, string strSearches) {
            return base.Channel.SaveUserSearch(SecureID, SearchName, UID, strSearches);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUserSearch(string SecureID, string SearchName, string UID, string strSearches, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveUserSearch(SecureID, SearchName, UID, strSearches, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveUserSearch(System.IAsyncResult result) {
            return base.Channel.EndSaveUserSearch(result);
        }
        
        private System.IAsyncResult OnBeginSaveUserSearch(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SearchName = ((string)(inValues[1]));
            string UID = ((string)(inValues[2]));
            string strSearches = ((string)(inValues[3]));
            return this.BeginSaveUserSearch(SecureID, SearchName, UID, strSearches, callback, asyncState);
        }
        
        private object[] OnEndSaveUserSearch(System.IAsyncResult result) {
            bool retVal = this.EndSaveUserSearch(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveUserSearchCompleted(object state) {
            if ((this.SaveUserSearchCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUserSearchCompleted(this, new SaveUserSearchCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUserSearchAsync(string SecureID, string SearchName, string UID, string strSearches) {
            this.SaveUserSearchAsync(SecureID, SearchName, UID, strSearches, null);
        }
        
        public void SaveUserSearchAsync(string SecureID, string SearchName, string UID, string strSearches, object userState) {
            if ((this.onBeginSaveUserSearchDelegate == null)) {
                this.onBeginSaveUserSearchDelegate = new BeginOperationDelegate(this.OnBeginSaveUserSearch);
            }
            if ((this.onEndSaveUserSearchDelegate == null)) {
                this.onEndSaveUserSearchDelegate = new EndOperationDelegate(this.OnEndSaveUserSearch);
            }
            if ((this.onSaveUserSearchCompletedDelegate == null)) {
                this.onSaveUserSearchCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUserSearchCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUserSearchDelegate, new object[] {
                        SecureID,
                        SearchName,
                        UID,
                        strSearches}, this.onEndSaveUserSearchDelegate, this.onSaveUserSearchCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_ZipFiles[] GetFilesInZip(string SecureID, string ParentGuid, ref bool RC) {
            return base.Channel.GetFilesInZip(SecureID, ParentGuid, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetFilesInZip(string SecureID, string ParentGuid, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFilesInZip(SecureID, ParentGuid, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_ZipFiles[] EndGetFilesInZip(ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndGetFilesInZip(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginGetFilesInZip(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ParentGuid = ((string)(inValues[1]));
            bool RC = ((bool)(inValues[2]));
            return this.BeginGetFilesInZip(SecureID, ParentGuid, ref RC, callback, asyncState);
        }
        
        private object[] OnEndGetFilesInZip(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            ECMSearchWPF.SVCSearch.DS_ZipFiles[] retVal = this.EndGetFilesInZip(ref RC, result);
            return new object[] {
                    RC,
                    retVal};
        }
        
        private void OnGetFilesInZipCompleted(object state) {
            if ((this.GetFilesInZipCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFilesInZipCompleted(this, new GetFilesInZipCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFilesInZipAsync(string SecureID, string ParentGuid, bool RC) {
            this.GetFilesInZipAsync(SecureID, ParentGuid, RC, null);
        }
        
        public void GetFilesInZipAsync(string SecureID, string ParentGuid, bool RC, object userState) {
            if ((this.onBeginGetFilesInZipDelegate == null)) {
                this.onBeginGetFilesInZipDelegate = new BeginOperationDelegate(this.OnBeginGetFilesInZip);
            }
            if ((this.onEndGetFilesInZipDelegate == null)) {
                this.onEndGetFilesInZipDelegate = new EndOperationDelegate(this.OnEndGetFilesInZip);
            }
            if ((this.onGetFilesInZipCompletedDelegate == null)) {
                this.onGetFilesInZipCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFilesInZipCompleted);
            }
            base.InvokeAsync(this.onBeginGetFilesInZipDelegate, new object[] {
                        SecureID,
                        ParentGuid,
                        RC}, this.onEndGetFilesInZipDelegate, this.onGetFilesInZipCompletedDelegate, userState);
        }
        
        public bool scheduleFileDownLoad(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore) {
            return base.Channel.scheduleFileDownLoad(SecureID, ContentGuid, UserID, ContentType, Preview, Restore);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginscheduleFileDownLoad(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginscheduleFileDownLoad(SecureID, ContentGuid, UserID, ContentType, Preview, Restore, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndscheduleFileDownLoad(System.IAsyncResult result) {
            return base.Channel.EndscheduleFileDownLoad(result);
        }
        
        private System.IAsyncResult OnBeginscheduleFileDownLoad(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string ContentGuid = ((string)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            string ContentType = ((string)(inValues[3]));
            int Preview = ((int)(inValues[4]));
            int Restore = ((int)(inValues[5]));
            return this.BeginscheduleFileDownLoad(SecureID, ContentGuid, UserID, ContentType, Preview, Restore, callback, asyncState);
        }
        
        private object[] OnEndscheduleFileDownLoad(System.IAsyncResult result) {
            bool retVal = this.EndscheduleFileDownLoad(result);
            return new object[] {
                    retVal};
        }
        
        private void OnscheduleFileDownLoadCompleted(object state) {
            if ((this.scheduleFileDownLoadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.scheduleFileDownLoadCompleted(this, new scheduleFileDownLoadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void scheduleFileDownLoadAsync(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore) {
            this.scheduleFileDownLoadAsync(SecureID, ContentGuid, UserID, ContentType, Preview, Restore, null);
        }
        
        public void scheduleFileDownLoadAsync(string SecureID, string ContentGuid, string UserID, string ContentType, int Preview, int Restore, object userState) {
            if ((this.onBeginscheduleFileDownLoadDelegate == null)) {
                this.onBeginscheduleFileDownLoadDelegate = new BeginOperationDelegate(this.OnBeginscheduleFileDownLoad);
            }
            if ((this.onEndscheduleFileDownLoadDelegate == null)) {
                this.onEndscheduleFileDownLoadDelegate = new EndOperationDelegate(this.OnEndscheduleFileDownLoad);
            }
            if ((this.onscheduleFileDownLoadCompletedDelegate == null)) {
                this.onscheduleFileDownLoadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnscheduleFileDownLoadCompleted);
            }
            base.InvokeAsync(this.onBeginscheduleFileDownLoadDelegate, new object[] {
                        SecureID,
                        ContentGuid,
                        UserID,
                        ContentType,
                        Preview,
                        Restore}, this.onEndscheduleFileDownLoadDelegate, this.onscheduleFileDownLoadCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_Metadata[] GetContentMetaData(string SecureID, string SourceGuid) {
            return base.Channel.GetContentMetaData(SecureID, SourceGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetContentMetaData(string SecureID, string SourceGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetContentMetaData(SecureID, SourceGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_Metadata[] EndGetContentMetaData(System.IAsyncResult result) {
            return base.Channel.EndGetContentMetaData(result);
        }
        
        private System.IAsyncResult OnBeginGetContentMetaData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SourceGuid = ((string)(inValues[1]));
            return this.BeginGetContentMetaData(SecureID, SourceGuid, callback, asyncState);
        }
        
        private object[] OnEndGetContentMetaData(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_Metadata[] retVal = this.EndGetContentMetaData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetContentMetaDataCompleted(object state) {
            if ((this.GetContentMetaDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetContentMetaDataCompleted(this, new GetContentMetaDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetContentMetaDataAsync(string SecureID, string SourceGuid) {
            this.GetContentMetaDataAsync(SecureID, SourceGuid, null);
        }
        
        public void GetContentMetaDataAsync(string SecureID, string SourceGuid, object userState) {
            if ((this.onBeginGetContentMetaDataDelegate == null)) {
                this.onBeginGetContentMetaDataDelegate = new BeginOperationDelegate(this.OnBeginGetContentMetaData);
            }
            if ((this.onEndGetContentMetaDataDelegate == null)) {
                this.onEndGetContentMetaDataDelegate = new EndOperationDelegate(this.OnEndGetContentMetaData);
            }
            if ((this.onGetContentMetaDataCompletedDelegate == null)) {
                this.onGetContentMetaDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetContentMetaDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetContentMetaDataDelegate, new object[] {
                        SecureID,
                        SourceGuid}, this.onEndGetContentMetaDataDelegate, this.onGetContentMetaDataCompletedDelegate, userState);
        }
        
        public bool removeRestoreFileByGuid(string SecureID, string RowGuid) {
            return base.Channel.removeRestoreFileByGuid(SecureID, RowGuid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveRestoreFileByGuid(string SecureID, string RowGuid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveRestoreFileByGuid(SecureID, RowGuid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndremoveRestoreFileByGuid(System.IAsyncResult result) {
            return base.Channel.EndremoveRestoreFileByGuid(result);
        }
        
        private System.IAsyncResult OnBeginremoveRestoreFileByGuid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string RowGuid = ((string)(inValues[1]));
            return this.BeginremoveRestoreFileByGuid(SecureID, RowGuid, callback, asyncState);
        }
        
        private object[] OnEndremoveRestoreFileByGuid(System.IAsyncResult result) {
            bool retVal = this.EndremoveRestoreFileByGuid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnremoveRestoreFileByGuidCompleted(object state) {
            if ((this.removeRestoreFileByGuidCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeRestoreFileByGuidCompleted(this, new removeRestoreFileByGuidCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeRestoreFileByGuidAsync(string SecureID, string RowGuid) {
            this.removeRestoreFileByGuidAsync(SecureID, RowGuid, null);
        }
        
        public void removeRestoreFileByGuidAsync(string SecureID, string RowGuid, object userState) {
            if ((this.onBeginremoveRestoreFileByGuidDelegate == null)) {
                this.onBeginremoveRestoreFileByGuidDelegate = new BeginOperationDelegate(this.OnBeginremoveRestoreFileByGuid);
            }
            if ((this.onEndremoveRestoreFileByGuidDelegate == null)) {
                this.onEndremoveRestoreFileByGuidDelegate = new EndOperationDelegate(this.OnEndremoveRestoreFileByGuid);
            }
            if ((this.onremoveRestoreFileByGuidCompletedDelegate == null)) {
                this.onremoveRestoreFileByGuidCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveRestoreFileByGuidCompleted);
            }
            base.InvokeAsync(this.onBeginremoveRestoreFileByGuidDelegate, new object[] {
                        SecureID,
                        RowGuid}, this.onEndremoveRestoreFileByGuidDelegate, this.onremoveRestoreFileByGuidCompletedDelegate, userState);
        }
        
        public bool removeRestoreFiles(string SecureID, ref string UserID, ref string MachineID) {
            return base.Channel.removeRestoreFiles(SecureID, ref UserID, ref MachineID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginremoveRestoreFiles(string SecureID, ref string UserID, ref string MachineID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginremoveRestoreFiles(SecureID, ref UserID, ref MachineID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndremoveRestoreFiles(ref string UserID, ref string MachineID, System.IAsyncResult result) {
            return base.Channel.EndremoveRestoreFiles(ref UserID, ref MachineID, result);
        }
        
        private System.IAsyncResult OnBeginremoveRestoreFiles(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string MachineID = ((string)(inValues[2]));
            return this.BeginremoveRestoreFiles(SecureID, ref UserID, ref MachineID, callback, asyncState);
        }
        
        private object[] OnEndremoveRestoreFiles(System.IAsyncResult result) {
            string UserID = this.GetDefaultValueForInitialization<string>();
            string MachineID = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndremoveRestoreFiles(ref UserID, ref MachineID, result);
            return new object[] {
                    UserID,
                    MachineID,
                    retVal};
        }
        
        private void OnremoveRestoreFilesCompleted(object state) {
            if ((this.removeRestoreFilesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.removeRestoreFilesCompleted(this, new removeRestoreFilesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void removeRestoreFilesAsync(string SecureID, string UserID, string MachineID) {
            this.removeRestoreFilesAsync(SecureID, UserID, MachineID, null);
        }
        
        public void removeRestoreFilesAsync(string SecureID, string UserID, string MachineID, object userState) {
            if ((this.onBeginremoveRestoreFilesDelegate == null)) {
                this.onBeginremoveRestoreFilesDelegate = new BeginOperationDelegate(this.OnBeginremoveRestoreFiles);
            }
            if ((this.onEndremoveRestoreFilesDelegate == null)) {
                this.onEndremoveRestoreFilesDelegate = new EndOperationDelegate(this.OnEndremoveRestoreFiles);
            }
            if ((this.onremoveRestoreFilesCompletedDelegate == null)) {
                this.onremoveRestoreFilesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnremoveRestoreFilesCompleted);
            }
            base.InvokeAsync(this.onBeginremoveRestoreFilesDelegate, new object[] {
                        SecureID,
                        UserID,
                        MachineID}, this.onEndremoveRestoreFilesDelegate, this.onremoveRestoreFilesCompletedDelegate, userState);
        }
        
        public int getRestoreFileCount(string SecureID, ref string UserID, ref string MachineID, ref bool Preview) {
            return base.Channel.getRestoreFileCount(SecureID, ref UserID, ref MachineID, ref Preview);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetRestoreFileCount(string SecureID, ref string UserID, ref string MachineID, ref bool Preview, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetRestoreFileCount(SecureID, ref UserID, ref MachineID, ref Preview, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndgetRestoreFileCount(ref string UserID, ref string MachineID, ref bool Preview, System.IAsyncResult result) {
            return base.Channel.EndgetRestoreFileCount(ref UserID, ref MachineID, ref Preview, result);
        }
        
        private System.IAsyncResult OnBegingetRestoreFileCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string MachineID = ((string)(inValues[2]));
            bool Preview = ((bool)(inValues[3]));
            return this.BegingetRestoreFileCount(SecureID, ref UserID, ref MachineID, ref Preview, callback, asyncState);
        }
        
        private object[] OnEndgetRestoreFileCount(System.IAsyncResult result) {
            string UserID = this.GetDefaultValueForInitialization<string>();
            string MachineID = this.GetDefaultValueForInitialization<string>();
            bool Preview = this.GetDefaultValueForInitialization<bool>();
            int retVal = this.EndgetRestoreFileCount(ref UserID, ref MachineID, ref Preview, result);
            return new object[] {
                    UserID,
                    MachineID,
                    Preview,
                    retVal};
        }
        
        private void OngetRestoreFileCountCompleted(object state) {
            if ((this.getRestoreFileCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getRestoreFileCountCompleted(this, new getRestoreFileCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getRestoreFileCountAsync(string SecureID, string UserID, string MachineID, bool Preview) {
            this.getRestoreFileCountAsync(SecureID, UserID, MachineID, Preview, null);
        }
        
        public void getRestoreFileCountAsync(string SecureID, string UserID, string MachineID, bool Preview, object userState) {
            if ((this.onBegingetRestoreFileCountDelegate == null)) {
                this.onBegingetRestoreFileCountDelegate = new BeginOperationDelegate(this.OnBegingetRestoreFileCount);
            }
            if ((this.onEndgetRestoreFileCountDelegate == null)) {
                this.onEndgetRestoreFileCountDelegate = new EndOperationDelegate(this.OnEndgetRestoreFileCount);
            }
            if ((this.ongetRestoreFileCountCompletedDelegate == null)) {
                this.ongetRestoreFileCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetRestoreFileCountCompleted);
            }
            base.InvokeAsync(this.onBegingetRestoreFileCountDelegate, new object[] {
                        SecureID,
                        UserID,
                        MachineID,
                        Preview}, this.onEndgetRestoreFileCountDelegate, this.ongetRestoreFileCountCompletedDelegate, userState);
        }
        
        public bool saveRestoreFile(string SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg) {
            return base.Channel.saveRestoreFile(SecureID, tgtTable, ref ContentGuid, Preview, Restore, ref UserID, ref MachineID, ref RC, RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveRestoreFile(string SecureID, string tgtTable, ref string ContentGuid, bool Preview, bool Restore, ref string UserID, ref string MachineID, ref bool RC, string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsaveRestoreFile(SecureID, tgtTable, ref ContentGuid, Preview, Restore, ref UserID, ref MachineID, ref RC, RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndsaveRestoreFile(ref string ContentGuid, ref string UserID, ref string MachineID, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndsaveRestoreFile(ref ContentGuid, ref UserID, ref MachineID, ref RC, result);
        }
        
        private System.IAsyncResult OnBeginsaveRestoreFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string tgtTable = ((string)(inValues[1]));
            string ContentGuid = ((string)(inValues[2]));
            bool Preview = ((bool)(inValues[3]));
            bool Restore = ((bool)(inValues[4]));
            string UserID = ((string)(inValues[5]));
            string MachineID = ((string)(inValues[6]));
            bool RC = ((bool)(inValues[7]));
            string RetMsg = ((string)(inValues[8]));
            return this.BeginsaveRestoreFile(SecureID, tgtTable, ref ContentGuid, Preview, Restore, ref UserID, ref MachineID, ref RC, RetMsg, callback, asyncState);
        }
        
        private object[] OnEndsaveRestoreFile(System.IAsyncResult result) {
            string ContentGuid = this.GetDefaultValueForInitialization<string>();
            string UserID = this.GetDefaultValueForInitialization<string>();
            string MachineID = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            bool retVal = this.EndsaveRestoreFile(ref ContentGuid, ref UserID, ref MachineID, ref RC, result);
            return new object[] {
                    ContentGuid,
                    UserID,
                    MachineID,
                    RC,
                    retVal};
        }
        
        private void OnsaveRestoreFileCompleted(object state) {
            if ((this.saveRestoreFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveRestoreFileCompleted(this, new saveRestoreFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveRestoreFileAsync(string SecureID, string tgtTable, string ContentGuid, bool Preview, bool Restore, string UserID, string MachineID, bool RC, string RetMsg) {
            this.saveRestoreFileAsync(SecureID, tgtTable, ContentGuid, Preview, Restore, UserID, MachineID, RC, RetMsg, null);
        }
        
        public void saveRestoreFileAsync(string SecureID, string tgtTable, string ContentGuid, bool Preview, bool Restore, string UserID, string MachineID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginsaveRestoreFileDelegate == null)) {
                this.onBeginsaveRestoreFileDelegate = new BeginOperationDelegate(this.OnBeginsaveRestoreFile);
            }
            if ((this.onEndsaveRestoreFileDelegate == null)) {
                this.onEndsaveRestoreFileDelegate = new EndOperationDelegate(this.OnEndsaveRestoreFile);
            }
            if ((this.onsaveRestoreFileCompletedDelegate == null)) {
                this.onsaveRestoreFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveRestoreFileCompleted);
            }
            base.InvokeAsync(this.onBeginsaveRestoreFileDelegate, new object[] {
                        SecureID,
                        tgtTable,
                        ContentGuid,
                        Preview,
                        Restore,
                        UserID,
                        MachineID,
                        RC,
                        RetMsg}, this.onEndsaveRestoreFileDelegate, this.onsaveRestoreFileCompletedDelegate, userState);
        }
        
        public string GenEmailAttachmentsGeneratedSQL(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy) {
            return base.Channel.GenEmailAttachmentsGeneratedSQL(UserID, SearchParms, SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenEmailAttachmentsGeneratedSQL(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenEmailAttachmentsGeneratedSQL(UserID, SearchParms, SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGenEmailAttachmentsGeneratedSQL(System.IAsyncResult result) {
            return base.Channel.EndGenEmailAttachmentsGeneratedSQL(result);
        }
        
        private System.IAsyncResult OnBeginGenEmailAttachmentsGeneratedSQL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string UserID = ((string)(inValues[0]));
            ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms = ((ECMSearchWPF.SVCSearch.DS_SearchTerms[])(inValues[1]));
            string SecureID = ((string)(inValues[2]));
            string InputSearchString = ((string)(inValues[3]));
            bool useFreetext = ((bool)(inValues[4]));
            bool ckWeighted = ((bool)(inValues[5]));
            bool isEmail = ((bool)(inValues[6]));
            bool LimitToCurrRecs = ((bool)(inValues[7]));
            object[] ThesaurusList = ((object[])(inValues[8]));
            string txtThesaurus = ((string)(inValues[9]));
            string cbThesaurusText = ((string)(inValues[10]));
            string calledBy = ((string)(inValues[11]));
            return this.BeginGenEmailAttachmentsGeneratedSQL(UserID, SearchParms, SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy, callback, asyncState);
        }
        
        private object[] OnEndGenEmailAttachmentsGeneratedSQL(System.IAsyncResult result) {
            string retVal = this.EndGenEmailAttachmentsGeneratedSQL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenEmailAttachmentsGeneratedSQLCompleted(object state) {
            if ((this.GenEmailAttachmentsGeneratedSQLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenEmailAttachmentsGeneratedSQLCompleted(this, new GenEmailAttachmentsGeneratedSQLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenEmailAttachmentsGeneratedSQLAsync(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy) {
            this.GenEmailAttachmentsGeneratedSQLAsync(UserID, SearchParms, SecureID, InputSearchString, useFreetext, ckWeighted, isEmail, LimitToCurrRecs, ThesaurusList, txtThesaurus, cbThesaurusText, calledBy, null);
        }
        
        public void GenEmailAttachmentsGeneratedSQLAsync(string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string InputSearchString, bool useFreetext, bool ckWeighted, bool isEmail, bool LimitToCurrRecs, object[] ThesaurusList, string txtThesaurus, string cbThesaurusText, string calledBy, object userState) {
            if ((this.onBeginGenEmailAttachmentsGeneratedSQLDelegate == null)) {
                this.onBeginGenEmailAttachmentsGeneratedSQLDelegate = new BeginOperationDelegate(this.OnBeginGenEmailAttachmentsGeneratedSQL);
            }
            if ((this.onEndGenEmailAttachmentsGeneratedSQLDelegate == null)) {
                this.onEndGenEmailAttachmentsGeneratedSQLDelegate = new EndOperationDelegate(this.OnEndGenEmailAttachmentsGeneratedSQL);
            }
            if ((this.onGenEmailAttachmentsGeneratedSQLCompletedDelegate == null)) {
                this.onGenEmailAttachmentsGeneratedSQLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenEmailAttachmentsGeneratedSQLCompleted);
            }
            base.InvokeAsync(this.onBeginGenEmailAttachmentsGeneratedSQLDelegate, new object[] {
                        UserID,
                        SearchParms,
                        SecureID,
                        InputSearchString,
                        useFreetext,
                        ckWeighted,
                        isEmail,
                        LimitToCurrRecs,
                        ThesaurusList,
                        txtThesaurus,
                        cbThesaurusText,
                        calledBy}, this.onEndGenEmailAttachmentsGeneratedSQLDelegate, this.onGenEmailAttachmentsGeneratedSQLCompletedDelegate, userState);
        }
        
        public string GenEmailGeneratedSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID) {
            return base.Channel.GenEmailGeneratedSQL(iMaxRecs, UserID, SearchParms, SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenEmailGeneratedSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenEmailGeneratedSQL(iMaxRecs, UserID, SearchParms, SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGenEmailGeneratedSQL(System.IAsyncResult result) {
            return base.Channel.EndGenEmailGeneratedSQL(result);
        }
        
        private System.IAsyncResult OnBeginGenEmailGeneratedSQL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int iMaxRecs = ((int)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms = ((ECMSearchWPF.SVCSearch.DS_SearchTerms[])(inValues[2]));
            string SecureID = ((string)(inValues[3]));
            return this.BeginGenEmailGeneratedSQL(iMaxRecs, UserID, SearchParms, SecureID, callback, asyncState);
        }
        
        private object[] OnEndGenEmailGeneratedSQL(System.IAsyncResult result) {
            string retVal = this.EndGenEmailGeneratedSQL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenEmailGeneratedSQLCompleted(object state) {
            if ((this.GenEmailGeneratedSQLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenEmailGeneratedSQLCompleted(this, new GenEmailGeneratedSQLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenEmailGeneratedSQLAsync(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID) {
            this.GenEmailGeneratedSQLAsync(iMaxRecs, UserID, SearchParms, SecureID, null);
        }
        
        public void GenEmailGeneratedSQLAsync(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, object userState) {
            if ((this.onBeginGenEmailGeneratedSQLDelegate == null)) {
                this.onBeginGenEmailGeneratedSQLDelegate = new BeginOperationDelegate(this.OnBeginGenEmailGeneratedSQL);
            }
            if ((this.onEndGenEmailGeneratedSQLDelegate == null)) {
                this.onEndGenEmailGeneratedSQLDelegate = new EndOperationDelegate(this.OnEndGenEmailGeneratedSQL);
            }
            if ((this.onGenEmailGeneratedSQLCompletedDelegate == null)) {
                this.onGenEmailGeneratedSQLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenEmailGeneratedSQLCompleted);
            }
            base.InvokeAsync(this.onBeginGenEmailGeneratedSQLDelegate, new object[] {
                        iMaxRecs,
                        UserID,
                        SearchParms,
                        SecureID}, this.onEndGenEmailGeneratedSQLDelegate, this.onGenEmailGeneratedSQLCompletedDelegate, userState);
        }
        
        public string GenContentSearchSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted) {
            return base.Channel.GenContentSearchSQL(iMaxRecs, UserID, SearchParms, SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGenContentSearchSQL(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGenContentSearchSQL(iMaxRecs, UserID, SearchParms, SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndGenContentSearchSQL(System.IAsyncResult result) {
            return base.Channel.EndGenContentSearchSQL(result);
        }
        
        private System.IAsyncResult OnBeginGenContentSearchSQL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int iMaxRecs = ((int)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms = ((ECMSearchWPF.SVCSearch.DS_SearchTerms[])(inValues[2]));
            string SecureID = ((string)(inValues[3]));
            string UID = ((string)(inValues[4]));
            string SearchString = ((string)(inValues[5]));
            bool ckLimitToExisting = ((bool)(inValues[6]));
            string txtThesaurus = ((string)(inValues[7]));
            string cbThesaurusText = ((string)(inValues[8]));
            bool ckLimitToLib = ((bool)(inValues[9]));
            string LibraryName = ((string)(inValues[10]));
            bool ckWeighted = ((bool)(inValues[11]));
            return this.BeginGenContentSearchSQL(iMaxRecs, UserID, SearchParms, SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted, callback, asyncState);
        }
        
        private object[] OnEndGenContentSearchSQL(System.IAsyncResult result) {
            string retVal = this.EndGenContentSearchSQL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGenContentSearchSQLCompleted(object state) {
            if ((this.GenContentSearchSQLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GenContentSearchSQLCompleted(this, new GenContentSearchSQLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GenContentSearchSQLAsync(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted) {
            this.GenContentSearchSQLAsync(iMaxRecs, UserID, SearchParms, SecureID, UID, SearchString, ckLimitToExisting, txtThesaurus, cbThesaurusText, ckLimitToLib, LibraryName, ckWeighted, null);
        }
        
        public void GenContentSearchSQLAsync(int iMaxRecs, string UserID, ECMSearchWPF.SVCSearch.DS_SearchTerms[] SearchParms, string SecureID, string UID, string SearchString, bool ckLimitToExisting, string txtThesaurus, string cbThesaurusText, bool ckLimitToLib, string LibraryName, bool ckWeighted, object userState) {
            if ((this.onBeginGenContentSearchSQLDelegate == null)) {
                this.onBeginGenContentSearchSQLDelegate = new BeginOperationDelegate(this.OnBeginGenContentSearchSQL);
            }
            if ((this.onEndGenContentSearchSQLDelegate == null)) {
                this.onEndGenContentSearchSQLDelegate = new EndOperationDelegate(this.OnEndGenContentSearchSQL);
            }
            if ((this.onGenContentSearchSQLCompletedDelegate == null)) {
                this.onGenContentSearchSQLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGenContentSearchSQLCompleted);
            }
            base.InvokeAsync(this.onBeginGenContentSearchSQLDelegate, new object[] {
                        iMaxRecs,
                        UserID,
                        SearchParms,
                        SecureID,
                        UID,
                        SearchString,
                        ckLimitToExisting,
                        txtThesaurus,
                        cbThesaurusText,
                        ckLimitToLib,
                        LibraryName,
                        ckWeighted}, this.onEndGenContentSearchSQLDelegate, this.onGenContentSearchSQLCompletedDelegate, userState);
        }
        
        public void ChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg) {
            base.Channel.ChangeUserContentPublic(ServiceID, CurrSelectedUserGuid, isPublic, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeUserContentPublic(int ServiceID, string CurrSelectedUserGuid, string isPublic, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserContentPublic(ServiceID, CurrSelectedUserGuid, isPublic, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndChangeUserContentPublic(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndChangeUserContentPublic(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginChangeUserContentPublic(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int ServiceID = ((int)(inValues[0]));
            string CurrSelectedUserGuid = ((string)(inValues[1]));
            string isPublic = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BeginChangeUserContentPublic(ServiceID, CurrSelectedUserGuid, isPublic, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndChangeUserContentPublic(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndChangeUserContentPublic(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg};
        }
        
        private void OnChangeUserContentPublicCompleted(object state) {
            if ((this.ChangeUserContentPublicCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserContentPublicCompleted(this, new ChangeUserContentPublicCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserContentPublicAsync(int ServiceID, string CurrSelectedUserGuid, string isPublic, bool RC, string RetMsg) {
            this.ChangeUserContentPublicAsync(ServiceID, CurrSelectedUserGuid, isPublic, RC, RetMsg, null);
        }
        
        public void ChangeUserContentPublicAsync(int ServiceID, string CurrSelectedUserGuid, string isPublic, bool RC, string RetMsg, object userState) {
            if ((this.onBeginChangeUserContentPublicDelegate == null)) {
                this.onBeginChangeUserContentPublicDelegate = new BeginOperationDelegate(this.OnBeginChangeUserContentPublic);
            }
            if ((this.onEndChangeUserContentPublicDelegate == null)) {
                this.onEndChangeUserContentPublicDelegate = new EndOperationDelegate(this.OnEndChangeUserContentPublic);
            }
            if ((this.onChangeUserContentPublicCompletedDelegate == null)) {
                this.onChangeUserContentPublicCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserContentPublicCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserContentPublicDelegate, new object[] {
                        ServiceID,
                        CurrSelectedUserGuid,
                        isPublic,
                        RC,
                        RetMsg}, this.onEndChangeUserContentPublicDelegate, this.onChangeUserContentPublicCompletedDelegate, userState);
        }
        
        public void Refactor(string SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg) {
            base.Channel.Refactor(SecureID, NewOwnerID, OldOwnerID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRefactor(string SecureID, string NewOwnerID, string OldOwnerID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRefactor(SecureID, NewOwnerID, OldOwnerID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRefactor(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndRefactor(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginRefactor(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string NewOwnerID = ((string)(inValues[1]));
            string OldOwnerID = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BeginRefactor(SecureID, NewOwnerID, OldOwnerID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndRefactor(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndRefactor(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg};
        }
        
        private void OnRefactorCompleted(object state) {
            if ((this.RefactorCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RefactorCompleted(this, new RefactorCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RefactorAsync(string SecureID, string NewOwnerID, string OldOwnerID, bool RC, string RetMsg) {
            this.RefactorAsync(SecureID, NewOwnerID, OldOwnerID, RC, RetMsg, null);
        }
        
        public void RefactorAsync(string SecureID, string NewOwnerID, string OldOwnerID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginRefactorDelegate == null)) {
                this.onBeginRefactorDelegate = new BeginOperationDelegate(this.OnBeginRefactor);
            }
            if ((this.onEndRefactorDelegate == null)) {
                this.onEndRefactorDelegate = new EndOperationDelegate(this.OnEndRefactor);
            }
            if ((this.onRefactorCompletedDelegate == null)) {
                this.onRefactorCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRefactorCompleted);
            }
            base.InvokeAsync(this.onBeginRefactorDelegate, new object[] {
                        SecureID,
                        NewOwnerID,
                        OldOwnerID,
                        RC,
                        RetMsg}, this.onEndRefactorDelegate, this.onRefactorCompletedDelegate, userState);
        }
        
        public string getSAASState(string SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC) {
            return base.Channel.getSAASState(SecureID, UserID, DirName, FullPath, ref RetMsg, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSAASState(string SecureID, string UserID, string DirName, string FullPath, ref string RetMsg, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSAASState(SecureID, UserID, DirName, FullPath, ref RetMsg, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetSAASState(ref string RetMsg, ref bool RC, System.IAsyncResult result) {
            return base.Channel.EndgetSAASState(ref RetMsg, ref RC, result);
        }
        
        private System.IAsyncResult OnBegingetSAASState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string DirName = ((string)(inValues[2]));
            string FullPath = ((string)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            return this.BegingetSAASState(SecureID, UserID, DirName, FullPath, ref RetMsg, ref RC, callback, asyncState);
        }
        
        private object[] OnEndgetSAASState(System.IAsyncResult result) {
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string retVal = this.EndgetSAASState(ref RetMsg, ref RC, result);
            return new object[] {
                    RetMsg,
                    RC,
                    retVal};
        }
        
        private void OngetSAASStateCompleted(object state) {
            if ((this.getSAASStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSAASStateCompleted(this, new getSAASStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSAASStateAsync(string SecureID, string UserID, string DirName, string FullPath, string RetMsg, bool RC) {
            this.getSAASStateAsync(SecureID, UserID, DirName, FullPath, RetMsg, RC, null);
        }
        
        public void getSAASStateAsync(string SecureID, string UserID, string DirName, string FullPath, string RetMsg, bool RC, object userState) {
            if ((this.onBegingetSAASStateDelegate == null)) {
                this.onBegingetSAASStateDelegate = new BeginOperationDelegate(this.OnBegingetSAASState);
            }
            if ((this.onEndgetSAASStateDelegate == null)) {
                this.onEndgetSAASStateDelegate = new EndOperationDelegate(this.OnEndgetSAASState);
            }
            if ((this.ongetSAASStateCompletedDelegate == null)) {
                this.ongetSAASStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSAASStateCompleted);
            }
            base.InvokeAsync(this.onBegingetSAASStateDelegate, new object[] {
                        SecureID,
                        UserID,
                        DirName,
                        FullPath,
                        RetMsg,
                        RC}, this.onEndgetSAASStateDelegate, this.ongetSAASStateCompletedDelegate, userState);
        }
        
        public bool SetSAASState(string SecureID, string UserID, string DirName, string FullPath) {
            return base.Channel.SetSAASState(SecureID, UserID, DirName, FullPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSetSAASState(string SecureID, string UserID, string DirName, string FullPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSetSAASState(SecureID, UserID, DirName, FullPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSetSAASState(System.IAsyncResult result) {
            return base.Channel.EndSetSAASState(result);
        }
        
        private System.IAsyncResult OnBeginSetSAASState(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string DirName = ((string)(inValues[2]));
            string FullPath = ((string)(inValues[3]));
            return this.BeginSetSAASState(SecureID, UserID, DirName, FullPath, callback, asyncState);
        }
        
        private object[] OnEndSetSAASState(System.IAsyncResult result) {
            bool retVal = this.EndSetSAASState(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSetSAASStateCompleted(object state) {
            if ((this.SetSAASStateCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SetSAASStateCompleted(this, new SetSAASStateCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SetSAASStateAsync(string SecureID, string UserID, string DirName, string FullPath) {
            this.SetSAASStateAsync(SecureID, UserID, DirName, FullPath, null);
        }
        
        public void SetSAASStateAsync(string SecureID, string UserID, string DirName, string FullPath, object userState) {
            if ((this.onBeginSetSAASStateDelegate == null)) {
                this.onBeginSetSAASStateDelegate = new BeginOperationDelegate(this.OnBeginSetSAASState);
            }
            if ((this.onEndSetSAASStateDelegate == null)) {
                this.onEndSetSAASStateDelegate = new EndOperationDelegate(this.OnEndSetSAASState);
            }
            if ((this.onSetSAASStateCompletedDelegate == null)) {
                this.onSetSAASStateCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSetSAASStateCompleted);
            }
            base.InvokeAsync(this.onBeginSetSAASStateDelegate, new object[] {
                        SecureID,
                        UserID,
                        DirName,
                        FullPath}, this.onEndSetSAASStateDelegate, this.onSetSAASStateCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] getListOfStrings01(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings01(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings01(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings01(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] EndgetListOfStrings01(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings01(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings01(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string MySql = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            string UserId = ((string)(inValues[5]));
            string SessionID = ((string)(inValues[6]));
            return this.BegingetListOfStrings01(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings01(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            ECMSearchWPF.SVCSearch.DS_ListOfStrings01[] retVal = this.EndgetListOfStrings01(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings01Completed(object state) {
            if ((this.getListOfStrings01Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings01Completed(this, new getListOfStrings01CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings01Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings01Async(SecureID, SID, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings01Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings01Delegate == null)) {
                this.onBegingetListOfStrings01Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings01);
            }
            if ((this.onEndgetListOfStrings01Delegate == null)) {
                this.onEndgetListOfStrings01Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings01);
            }
            if ((this.ongetListOfStrings01CompletedDelegate == null)) {
                this.ongetListOfStrings01CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings01Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings01Delegate, new object[] {
                        SecureID,
                        SID,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings01Delegate, this.ongetListOfStrings01CompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] getListOfStrings02(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings02(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings02(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings02(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] EndgetListOfStrings02(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings02(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings02(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string MySql = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            string UserId = ((string)(inValues[5]));
            string SessionID = ((string)(inValues[6]));
            return this.BegingetListOfStrings02(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings02(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            ECMSearchWPF.SVCSearch.DS_ListOfStrings02[] retVal = this.EndgetListOfStrings02(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings02Completed(object state) {
            if ((this.getListOfStrings02Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings02Completed(this, new getListOfStrings02CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings02Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings02Async(SecureID, SID, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings02Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings02Delegate == null)) {
                this.onBegingetListOfStrings02Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings02);
            }
            if ((this.onEndgetListOfStrings02Delegate == null)) {
                this.onEndgetListOfStrings02Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings02);
            }
            if ((this.ongetListOfStrings02CompletedDelegate == null)) {
                this.ongetListOfStrings02CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings02Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings02Delegate, new object[] {
                        SecureID,
                        SID,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings02Delegate, this.ongetListOfStrings02CompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] getListOfStrings03(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings03(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings03(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings03(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] EndgetListOfStrings03(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings03(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings03(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string MySql = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            string UserId = ((string)(inValues[5]));
            string SessionID = ((string)(inValues[6]));
            return this.BegingetListOfStrings03(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings03(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            ECMSearchWPF.SVCSearch.DS_ListOfStrings03[] retVal = this.EndgetListOfStrings03(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings03Completed(object state) {
            if ((this.getListOfStrings03Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings03Completed(this, new getListOfStrings03CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings03Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings03Async(SecureID, SID, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings03Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings03Delegate == null)) {
                this.onBegingetListOfStrings03Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings03);
            }
            if ((this.onEndgetListOfStrings03Delegate == null)) {
                this.onEndgetListOfStrings03Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings03);
            }
            if ((this.ongetListOfStrings03CompletedDelegate == null)) {
                this.ongetListOfStrings03CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings03Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings03Delegate, new object[] {
                        SecureID,
                        SID,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings03Delegate, this.ongetListOfStrings03CompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] getListOfStrings04(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings04(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings04(string SecureID, string SID, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings04(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] EndgetListOfStrings04(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings04(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings04(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string MySql = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            string UserId = ((string)(inValues[5]));
            string SessionID = ((string)(inValues[6]));
            return this.BegingetListOfStrings04(SecureID, SID, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings04(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            ECMSearchWPF.SVCSearch.DS_ListOfStrings04[] retVal = this.EndgetListOfStrings04(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings04Completed(object state) {
            if ((this.getListOfStrings04Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings04Completed(this, new getListOfStrings04CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings04Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings04Async(SecureID, SID, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings04Async(string SecureID, string SID, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings04Delegate == null)) {
                this.onBegingetListOfStrings04Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings04);
            }
            if ((this.onEndgetListOfStrings04Delegate == null)) {
                this.onEndgetListOfStrings04Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings04);
            }
            if ((this.ongetListOfStrings04CompletedDelegate == null)) {
                this.ongetListOfStrings04CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings04Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings04Delegate, new object[] {
                        SecureID,
                        SID,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings04Delegate, this.ongetListOfStrings04CompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] PopulateLibraryUsersGrid(string SecureID, string LibraryName, bool ckLibUsersOnly) {
            return base.Channel.PopulateLibraryUsersGrid(SecureID, LibraryName, ckLibUsersOnly);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateLibraryUsersGrid(string SecureID, string LibraryName, bool ckLibUsersOnly, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateLibraryUsersGrid(SecureID, LibraryName, ckLibUsersOnly, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] EndPopulateLibraryUsersGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateLibraryUsersGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateLibraryUsersGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string LibraryName = ((string)(inValues[1]));
            bool ckLibUsersOnly = ((bool)(inValues[2]));
            return this.BeginPopulateLibraryUsersGrid(SecureID, LibraryName, ckLibUsersOnly, callback, asyncState);
        }
        
        private object[] OnEndPopulateLibraryUsersGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_VLibraryUsers[] retVal = this.EndPopulateLibraryUsersGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateLibraryUsersGridCompleted(object state) {
            if ((this.PopulateLibraryUsersGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateLibraryUsersGridCompleted(this, new PopulateLibraryUsersGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateLibraryUsersGridAsync(string SecureID, string LibraryName, bool ckLibUsersOnly) {
            this.PopulateLibraryUsersGridAsync(SecureID, LibraryName, ckLibUsersOnly, null);
        }
        
        public void PopulateLibraryUsersGridAsync(string SecureID, string LibraryName, bool ckLibUsersOnly, object userState) {
            if ((this.onBeginPopulateLibraryUsersGridDelegate == null)) {
                this.onBeginPopulateLibraryUsersGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateLibraryUsersGrid);
            }
            if ((this.onEndPopulateLibraryUsersGridDelegate == null)) {
                this.onEndPopulateLibraryUsersGridDelegate = new EndOperationDelegate(this.OnEndPopulateLibraryUsersGrid);
            }
            if ((this.onPopulateLibraryUsersGridCompletedDelegate == null)) {
                this.onPopulateLibraryUsersGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateLibraryUsersGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateLibraryUsersGridDelegate, new object[] {
                        SecureID,
                        LibraryName,
                        ckLibUsersOnly}, this.onEndPopulateLibraryUsersGridDelegate, this.onPopulateLibraryUsersGridCompletedDelegate, userState);
        }
        
        public string getUserAuth(string SecureID, string Userid) {
            return base.Channel.getUserAuth(SecureID, Userid);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetUserAuth(string SecureID, string Userid, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetUserAuth(SecureID, Userid, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetUserAuth(System.IAsyncResult result) {
            return base.Channel.EndgetUserAuth(result);
        }
        
        private System.IAsyncResult OnBegingetUserAuth(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string Userid = ((string)(inValues[1]));
            return this.BegingetUserAuth(SecureID, Userid, callback, asyncState);
        }
        
        private object[] OnEndgetUserAuth(System.IAsyncResult result) {
            string retVal = this.EndgetUserAuth(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetUserAuthCompleted(object state) {
            if ((this.getUserAuthCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getUserAuthCompleted(this, new getUserAuthCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getUserAuthAsync(string SecureID, string Userid) {
            this.getUserAuthAsync(SecureID, Userid, null);
        }
        
        public void getUserAuthAsync(string SecureID, string Userid, object userState) {
            if ((this.onBegingetUserAuthDelegate == null)) {
                this.onBegingetUserAuthDelegate = new BeginOperationDelegate(this.OnBegingetUserAuth);
            }
            if ((this.onEndgetUserAuthDelegate == null)) {
                this.onEndgetUserAuthDelegate = new EndOperationDelegate(this.OnEndgetUserAuth);
            }
            if ((this.ongetUserAuthCompletedDelegate == null)) {
                this.ongetUserAuthCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetUserAuthCompleted);
            }
            base.InvokeAsync(this.onBegingetUserAuthDelegate, new object[] {
                        SecureID,
                        Userid}, this.onEndgetUserAuthDelegate, this.ongetUserAuthCompletedDelegate, userState);
        }
        
        public bool DeleteUser(string SecureID, string SelectedUserGuid, ref string RetMsg) {
            return base.Channel.DeleteUser(SecureID, SelectedUserGuid, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteUser(string SecureID, string SelectedUserGuid, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteUser(SecureID, SelectedUserGuid, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteUser(ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteUser(ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SelectedUserGuid = ((string)(inValues[1]));
            string RetMsg = ((string)(inValues[2]));
            return this.BeginDeleteUser(SecureID, SelectedUserGuid, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteUser(System.IAsyncResult result) {
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteUser(ref RetMsg, result);
            return new object[] {
                    RetMsg,
                    retVal};
        }
        
        private void OnDeleteUserCompleted(object state) {
            if ((this.DeleteUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteUserCompleted(this, new DeleteUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteUserAsync(string SecureID, string SelectedUserGuid, string RetMsg) {
            this.DeleteUserAsync(SecureID, SelectedUserGuid, RetMsg, null);
        }
        
        public void DeleteUserAsync(string SecureID, string SelectedUserGuid, string RetMsg, object userState) {
            if ((this.onBeginDeleteUserDelegate == null)) {
                this.onBeginDeleteUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteUser);
            }
            if ((this.onEndDeleteUserDelegate == null)) {
                this.onEndDeleteUserDelegate = new EndOperationDelegate(this.OnEndDeleteUser);
            }
            if ((this.onDeleteUserCompletedDelegate == null)) {
                this.onDeleteUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteUserDelegate, new object[] {
                        SecureID,
                        SelectedUserGuid,
                        RetMsg}, this.onEndDeleteUserDelegate, this.onDeleteUserCompletedDelegate, userState);
        }
        
        public bool SaveUSer(
                    string SecureID, 
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg) {
            return base.Channel.SaveUSer(SecureID, ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveUSer(
                    string SecureID, 
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginSaveUSer(SecureID, ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndSaveUSer(
                    ref string UserID, 
                    ref string UserName, 
                    ref string EmailAddress, 
                    ref string UserPassword, 
                    ref string Admin, 
                    ref string isActive, 
                    ref string UserLoginID, 
                    ref bool ClientOnly, 
                    ref string HiveConnectionName, 
                    ref bool HiveActive, 
                    ref string RepoSvrName, 
                    ref System.DateTime RowCreationDate, 
                    ref System.DateTime RowLastModDate, 
                    ref string ActiveGuid, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result) {
            return base.Channel.EndSaveUSer(ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginSaveUSer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string UserName = ((string)(inValues[2]));
            string EmailAddress = ((string)(inValues[3]));
            string UserPassword = ((string)(inValues[4]));
            string Admin = ((string)(inValues[5]));
            string isActive = ((string)(inValues[6]));
            string UserLoginID = ((string)(inValues[7]));
            bool ClientOnly = ((bool)(inValues[8]));
            string HiveConnectionName = ((string)(inValues[9]));
            bool HiveActive = ((bool)(inValues[10]));
            string RepoSvrName = ((string)(inValues[11]));
            System.DateTime RowCreationDate = ((System.DateTime)(inValues[12]));
            System.DateTime RowLastModDate = ((System.DateTime)(inValues[13]));
            string ActiveGuid = ((string)(inValues[14]));
            string RepoName = ((string)(inValues[15]));
            bool RC = ((bool)(inValues[16]));
            string RetMsg = ((string)(inValues[17]));
            return this.BeginSaveUSer(SecureID, ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndSaveUSer(System.IAsyncResult result) {
            string UserID = this.GetDefaultValueForInitialization<string>();
            string UserName = this.GetDefaultValueForInitialization<string>();
            string EmailAddress = this.GetDefaultValueForInitialization<string>();
            string UserPassword = this.GetDefaultValueForInitialization<string>();
            string Admin = this.GetDefaultValueForInitialization<string>();
            string isActive = this.GetDefaultValueForInitialization<string>();
            string UserLoginID = this.GetDefaultValueForInitialization<string>();
            bool ClientOnly = this.GetDefaultValueForInitialization<bool>();
            string HiveConnectionName = this.GetDefaultValueForInitialization<string>();
            bool HiveActive = this.GetDefaultValueForInitialization<bool>();
            string RepoSvrName = this.GetDefaultValueForInitialization<string>();
            System.DateTime RowCreationDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime RowLastModDate = this.GetDefaultValueForInitialization<System.DateTime>();
            string ActiveGuid = this.GetDefaultValueForInitialization<string>();
            string RepoName = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndSaveUSer(ref UserID, ref UserName, ref EmailAddress, ref UserPassword, ref Admin, ref isActive, ref UserLoginID, ref ClientOnly, ref HiveConnectionName, ref HiveActive, ref RepoSvrName, ref RowCreationDate, ref RowLastModDate, ref ActiveGuid, ref RepoName, ref RC, ref RetMsg, result);
            return new object[] {
                    UserID,
                    UserName,
                    EmailAddress,
                    UserPassword,
                    Admin,
                    isActive,
                    UserLoginID,
                    ClientOnly,
                    HiveConnectionName,
                    HiveActive,
                    RepoSvrName,
                    RowCreationDate,
                    RowLastModDate,
                    ActiveGuid,
                    RepoName,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OnSaveUSerCompleted(object state) {
            if ((this.SaveUSerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveUSerCompleted(this, new SaveUSerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveUSerAsync(
                    string SecureID, 
                    string UserID, 
                    string UserName, 
                    string EmailAddress, 
                    string UserPassword, 
                    string Admin, 
                    string isActive, 
                    string UserLoginID, 
                    bool ClientOnly, 
                    string HiveConnectionName, 
                    bool HiveActive, 
                    string RepoSvrName, 
                    System.DateTime RowCreationDate, 
                    System.DateTime RowLastModDate, 
                    string ActiveGuid, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg) {
            this.SaveUSerAsync(SecureID, UserID, UserName, EmailAddress, UserPassword, Admin, isActive, UserLoginID, ClientOnly, HiveConnectionName, HiveActive, RepoSvrName, RowCreationDate, RowLastModDate, ActiveGuid, RepoName, RC, RetMsg, null);
        }
        
        public void SaveUSerAsync(
                    string SecureID, 
                    string UserID, 
                    string UserName, 
                    string EmailAddress, 
                    string UserPassword, 
                    string Admin, 
                    string isActive, 
                    string UserLoginID, 
                    bool ClientOnly, 
                    string HiveConnectionName, 
                    bool HiveActive, 
                    string RepoSvrName, 
                    System.DateTime RowCreationDate, 
                    System.DateTime RowLastModDate, 
                    string ActiveGuid, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg, 
                    object userState) {
            if ((this.onBeginSaveUSerDelegate == null)) {
                this.onBeginSaveUSerDelegate = new BeginOperationDelegate(this.OnBeginSaveUSer);
            }
            if ((this.onEndSaveUSerDelegate == null)) {
                this.onEndSaveUSerDelegate = new EndOperationDelegate(this.OnEndSaveUSer);
            }
            if ((this.onSaveUSerCompletedDelegate == null)) {
                this.onSaveUSerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveUSerCompleted);
            }
            base.InvokeAsync(this.onBeginSaveUSerDelegate, new object[] {
                        SecureID,
                        UserID,
                        UserName,
                        EmailAddress,
                        UserPassword,
                        Admin,
                        isActive,
                        UserLoginID,
                        ClientOnly,
                        HiveConnectionName,
                        HiveActive,
                        RepoSvrName,
                        RowCreationDate,
                        RowLastModDate,
                        ActiveGuid,
                        RepoName,
                        RC,
                        RetMsg}, this.onEndSaveUSerDelegate, this.onSaveUSerCompletedDelegate, userState);
        }
        
        public bool saveSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg) {
            return base.Channel.saveSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsaveSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BeginsaveSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndsaveSearchSchedule(
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result) {
            return base.Channel.EndsaveSearchSchedule(ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginsaveSearchSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SearchName = ((string)(inValues[1]));
            string NotificationSMS = ((string)(inValues[2]));
            string SearchDesc = ((string)(inValues[3]));
            string OwnerID = ((string)(inValues[4]));
            string SearchQuery = ((string)(inValues[5]));
            string SendToEmail = ((string)(inValues[6]));
            string ScheduleUnit = ((string)(inValues[7]));
            string ScheduleHour = ((string)(inValues[8]));
            string ScheduleDaysOfWeek = ((string)(inValues[9]));
            string ScheduleDaysOfMonth = ((string)(inValues[10]));
            string ScheduleMonthOfQtr = ((string)(inValues[11]));
            System.DateTime StartToRunDate = ((System.DateTime)(inValues[12]));
            System.DateTime EndRunDate = ((System.DateTime)(inValues[13]));
            string SearchParameters = ((string)(inValues[14]));
            System.DateTime LastRunDate = ((System.DateTime)(inValues[15]));
            int NumberOfExecutions = ((int)(inValues[16]));
            System.DateTime CreateDate = ((System.DateTime)(inValues[17]));
            System.DateTime LastModDate = ((System.DateTime)(inValues[18]));
            int ScheduleHourInterval = ((int)(inValues[19]));
            string RepoName = ((string)(inValues[20]));
            bool RC = ((bool)(inValues[21]));
            string RetMsg = ((string)(inValues[22]));
            return this.BeginsaveSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndsaveSearchSchedule(System.IAsyncResult result) {
            string SearchName = this.GetDefaultValueForInitialization<string>();
            string NotificationSMS = this.GetDefaultValueForInitialization<string>();
            string SearchDesc = this.GetDefaultValueForInitialization<string>();
            string OwnerID = this.GetDefaultValueForInitialization<string>();
            string SearchQuery = this.GetDefaultValueForInitialization<string>();
            string SendToEmail = this.GetDefaultValueForInitialization<string>();
            string ScheduleUnit = this.GetDefaultValueForInitialization<string>();
            string ScheduleHour = this.GetDefaultValueForInitialization<string>();
            string ScheduleDaysOfWeek = this.GetDefaultValueForInitialization<string>();
            string ScheduleDaysOfMonth = this.GetDefaultValueForInitialization<string>();
            string ScheduleMonthOfQtr = this.GetDefaultValueForInitialization<string>();
            System.DateTime StartToRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime EndRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            string SearchParameters = this.GetDefaultValueForInitialization<string>();
            System.DateTime LastRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            int NumberOfExecutions = this.GetDefaultValueForInitialization<int>();
            System.DateTime CreateDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime LastModDate = this.GetDefaultValueForInitialization<System.DateTime>();
            int ScheduleHourInterval = this.GetDefaultValueForInitialization<int>();
            string RepoName = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndsaveSearchSchedule(ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, result);
            return new object[] {
                    SearchName,
                    NotificationSMS,
                    SearchDesc,
                    OwnerID,
                    SearchQuery,
                    SendToEmail,
                    ScheduleUnit,
                    ScheduleHour,
                    ScheduleDaysOfWeek,
                    ScheduleDaysOfMonth,
                    ScheduleMonthOfQtr,
                    StartToRunDate,
                    EndRunDate,
                    SearchParameters,
                    LastRunDate,
                    NumberOfExecutions,
                    CreateDate,
                    LastModDate,
                    ScheduleHourInterval,
                    RepoName,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OnsaveSearchScheduleCompleted(object state) {
            if ((this.saveSearchScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.saveSearchScheduleCompleted(this, new saveSearchScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void saveSearchScheduleAsync(
                    string SecureID, 
                    string SearchName, 
                    string NotificationSMS, 
                    string SearchDesc, 
                    string OwnerID, 
                    string SearchQuery, 
                    string SendToEmail, 
                    string ScheduleUnit, 
                    string ScheduleHour, 
                    string ScheduleDaysOfWeek, 
                    string ScheduleDaysOfMonth, 
                    string ScheduleMonthOfQtr, 
                    System.DateTime StartToRunDate, 
                    System.DateTime EndRunDate, 
                    string SearchParameters, 
                    System.DateTime LastRunDate, 
                    int NumberOfExecutions, 
                    System.DateTime CreateDate, 
                    System.DateTime LastModDate, 
                    int ScheduleHourInterval, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg) {
            this.saveSearchScheduleAsync(SecureID, SearchName, NotificationSMS, SearchDesc, OwnerID, SearchQuery, SendToEmail, ScheduleUnit, ScheduleHour, ScheduleDaysOfWeek, ScheduleDaysOfMonth, ScheduleMonthOfQtr, StartToRunDate, EndRunDate, SearchParameters, LastRunDate, NumberOfExecutions, CreateDate, LastModDate, ScheduleHourInterval, RepoName, RC, RetMsg, null);
        }
        
        public void saveSearchScheduleAsync(
                    string SecureID, 
                    string SearchName, 
                    string NotificationSMS, 
                    string SearchDesc, 
                    string OwnerID, 
                    string SearchQuery, 
                    string SendToEmail, 
                    string ScheduleUnit, 
                    string ScheduleHour, 
                    string ScheduleDaysOfWeek, 
                    string ScheduleDaysOfMonth, 
                    string ScheduleMonthOfQtr, 
                    System.DateTime StartToRunDate, 
                    System.DateTime EndRunDate, 
                    string SearchParameters, 
                    System.DateTime LastRunDate, 
                    int NumberOfExecutions, 
                    System.DateTime CreateDate, 
                    System.DateTime LastModDate, 
                    int ScheduleHourInterval, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg, 
                    object userState) {
            if ((this.onBeginsaveSearchScheduleDelegate == null)) {
                this.onBeginsaveSearchScheduleDelegate = new BeginOperationDelegate(this.OnBeginsaveSearchSchedule);
            }
            if ((this.onEndsaveSearchScheduleDelegate == null)) {
                this.onEndsaveSearchScheduleDelegate = new EndOperationDelegate(this.OnEndsaveSearchSchedule);
            }
            if ((this.onsaveSearchScheduleCompletedDelegate == null)) {
                this.onsaveSearchScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsaveSearchScheduleCompleted);
            }
            base.InvokeAsync(this.onBeginsaveSearchScheduleDelegate, new object[] {
                        SecureID,
                        SearchName,
                        NotificationSMS,
                        SearchDesc,
                        OwnerID,
                        SearchQuery,
                        SendToEmail,
                        ScheduleUnit,
                        ScheduleHour,
                        ScheduleDaysOfWeek,
                        ScheduleDaysOfMonth,
                        ScheduleMonthOfQtr,
                        StartToRunDate,
                        EndRunDate,
                        SearchParameters,
                        LastRunDate,
                        NumberOfExecutions,
                        CreateDate,
                        LastModDate,
                        ScheduleHourInterval,
                        RepoName,
                        RC,
                        RetMsg}, this.onEndsaveSearchScheduleDelegate, this.onsaveSearchScheduleCompletedDelegate, userState);
        }
        
        public bool getSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg) {
            return base.Channel.getSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSearchSchedule(
                    string SecureID, 
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.AsyncCallback callback, 
                    object asyncState) {
            return base.Channel.BegingetSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetSearchSchedule(
                    ref string SearchName, 
                    ref string NotificationSMS, 
                    ref string SearchDesc, 
                    ref string OwnerID, 
                    ref string SearchQuery, 
                    ref string SendToEmail, 
                    ref string ScheduleUnit, 
                    ref string ScheduleHour, 
                    ref string ScheduleDaysOfWeek, 
                    ref string ScheduleDaysOfMonth, 
                    ref string ScheduleMonthOfQtr, 
                    ref System.DateTime StartToRunDate, 
                    ref System.DateTime EndRunDate, 
                    ref string SearchParameters, 
                    ref System.DateTime LastRunDate, 
                    ref int NumberOfExecutions, 
                    ref System.DateTime CreateDate, 
                    ref System.DateTime LastModDate, 
                    ref int ScheduleHourInterval, 
                    ref string RepoName, 
                    ref bool RC, 
                    ref string RetMsg, 
                    System.IAsyncResult result) {
            return base.Channel.EndgetSearchSchedule(ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetSearchSchedule(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SearchName = ((string)(inValues[1]));
            string NotificationSMS = ((string)(inValues[2]));
            string SearchDesc = ((string)(inValues[3]));
            string OwnerID = ((string)(inValues[4]));
            string SearchQuery = ((string)(inValues[5]));
            string SendToEmail = ((string)(inValues[6]));
            string ScheduleUnit = ((string)(inValues[7]));
            string ScheduleHour = ((string)(inValues[8]));
            string ScheduleDaysOfWeek = ((string)(inValues[9]));
            string ScheduleDaysOfMonth = ((string)(inValues[10]));
            string ScheduleMonthOfQtr = ((string)(inValues[11]));
            System.DateTime StartToRunDate = ((System.DateTime)(inValues[12]));
            System.DateTime EndRunDate = ((System.DateTime)(inValues[13]));
            string SearchParameters = ((string)(inValues[14]));
            System.DateTime LastRunDate = ((System.DateTime)(inValues[15]));
            int NumberOfExecutions = ((int)(inValues[16]));
            System.DateTime CreateDate = ((System.DateTime)(inValues[17]));
            System.DateTime LastModDate = ((System.DateTime)(inValues[18]));
            int ScheduleHourInterval = ((int)(inValues[19]));
            string RepoName = ((string)(inValues[20]));
            bool RC = ((bool)(inValues[21]));
            string RetMsg = ((string)(inValues[22]));
            return this.BegingetSearchSchedule(SecureID, ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndgetSearchSchedule(System.IAsyncResult result) {
            string SearchName = this.GetDefaultValueForInitialization<string>();
            string NotificationSMS = this.GetDefaultValueForInitialization<string>();
            string SearchDesc = this.GetDefaultValueForInitialization<string>();
            string OwnerID = this.GetDefaultValueForInitialization<string>();
            string SearchQuery = this.GetDefaultValueForInitialization<string>();
            string SendToEmail = this.GetDefaultValueForInitialization<string>();
            string ScheduleUnit = this.GetDefaultValueForInitialization<string>();
            string ScheduleHour = this.GetDefaultValueForInitialization<string>();
            string ScheduleDaysOfWeek = this.GetDefaultValueForInitialization<string>();
            string ScheduleDaysOfMonth = this.GetDefaultValueForInitialization<string>();
            string ScheduleMonthOfQtr = this.GetDefaultValueForInitialization<string>();
            System.DateTime StartToRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime EndRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            string SearchParameters = this.GetDefaultValueForInitialization<string>();
            System.DateTime LastRunDate = this.GetDefaultValueForInitialization<System.DateTime>();
            int NumberOfExecutions = this.GetDefaultValueForInitialization<int>();
            System.DateTime CreateDate = this.GetDefaultValueForInitialization<System.DateTime>();
            System.DateTime LastModDate = this.GetDefaultValueForInitialization<System.DateTime>();
            int ScheduleHourInterval = this.GetDefaultValueForInitialization<int>();
            string RepoName = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetSearchSchedule(ref SearchName, ref NotificationSMS, ref SearchDesc, ref OwnerID, ref SearchQuery, ref SendToEmail, ref ScheduleUnit, ref ScheduleHour, ref ScheduleDaysOfWeek, ref ScheduleDaysOfMonth, ref ScheduleMonthOfQtr, ref StartToRunDate, ref EndRunDate, ref SearchParameters, ref LastRunDate, ref NumberOfExecutions, ref CreateDate, ref LastModDate, ref ScheduleHourInterval, ref RepoName, ref RC, ref RetMsg, result);
            return new object[] {
                    SearchName,
                    NotificationSMS,
                    SearchDesc,
                    OwnerID,
                    SearchQuery,
                    SendToEmail,
                    ScheduleUnit,
                    ScheduleHour,
                    ScheduleDaysOfWeek,
                    ScheduleDaysOfMonth,
                    ScheduleMonthOfQtr,
                    StartToRunDate,
                    EndRunDate,
                    SearchParameters,
                    LastRunDate,
                    NumberOfExecutions,
                    CreateDate,
                    LastModDate,
                    ScheduleHourInterval,
                    RepoName,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetSearchScheduleCompleted(object state) {
            if ((this.getSearchScheduleCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSearchScheduleCompleted(this, new getSearchScheduleCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSearchScheduleAsync(
                    string SecureID, 
                    string SearchName, 
                    string NotificationSMS, 
                    string SearchDesc, 
                    string OwnerID, 
                    string SearchQuery, 
                    string SendToEmail, 
                    string ScheduleUnit, 
                    string ScheduleHour, 
                    string ScheduleDaysOfWeek, 
                    string ScheduleDaysOfMonth, 
                    string ScheduleMonthOfQtr, 
                    System.DateTime StartToRunDate, 
                    System.DateTime EndRunDate, 
                    string SearchParameters, 
                    System.DateTime LastRunDate, 
                    int NumberOfExecutions, 
                    System.DateTime CreateDate, 
                    System.DateTime LastModDate, 
                    int ScheduleHourInterval, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg) {
            this.getSearchScheduleAsync(SecureID, SearchName, NotificationSMS, SearchDesc, OwnerID, SearchQuery, SendToEmail, ScheduleUnit, ScheduleHour, ScheduleDaysOfWeek, ScheduleDaysOfMonth, ScheduleMonthOfQtr, StartToRunDate, EndRunDate, SearchParameters, LastRunDate, NumberOfExecutions, CreateDate, LastModDate, ScheduleHourInterval, RepoName, RC, RetMsg, null);
        }
        
        public void getSearchScheduleAsync(
                    string SecureID, 
                    string SearchName, 
                    string NotificationSMS, 
                    string SearchDesc, 
                    string OwnerID, 
                    string SearchQuery, 
                    string SendToEmail, 
                    string ScheduleUnit, 
                    string ScheduleHour, 
                    string ScheduleDaysOfWeek, 
                    string ScheduleDaysOfMonth, 
                    string ScheduleMonthOfQtr, 
                    System.DateTime StartToRunDate, 
                    System.DateTime EndRunDate, 
                    string SearchParameters, 
                    System.DateTime LastRunDate, 
                    int NumberOfExecutions, 
                    System.DateTime CreateDate, 
                    System.DateTime LastModDate, 
                    int ScheduleHourInterval, 
                    string RepoName, 
                    bool RC, 
                    string RetMsg, 
                    object userState) {
            if ((this.onBegingetSearchScheduleDelegate == null)) {
                this.onBegingetSearchScheduleDelegate = new BeginOperationDelegate(this.OnBegingetSearchSchedule);
            }
            if ((this.onEndgetSearchScheduleDelegate == null)) {
                this.onEndgetSearchScheduleDelegate = new EndOperationDelegate(this.OnEndgetSearchSchedule);
            }
            if ((this.ongetSearchScheduleCompletedDelegate == null)) {
                this.ongetSearchScheduleCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSearchScheduleCompleted);
            }
            base.InvokeAsync(this.onBegingetSearchScheduleDelegate, new object[] {
                        SecureID,
                        SearchName,
                        NotificationSMS,
                        SearchDesc,
                        OwnerID,
                        SearchQuery,
                        SendToEmail,
                        ScheduleUnit,
                        ScheduleHour,
                        ScheduleDaysOfWeek,
                        ScheduleDaysOfMonth,
                        ScheduleMonthOfQtr,
                        StartToRunDate,
                        EndRunDate,
                        SearchParameters,
                        LastRunDate,
                        NumberOfExecutions,
                        CreateDate,
                        LastModDate,
                        ScheduleHourInterval,
                        RepoName,
                        RC,
                        RetMsg}, this.onEndgetSearchScheduleDelegate, this.ongetSearchScheduleCompletedDelegate, userState);
        }
        
        public bool InsertCoOwner(string SecureID, string CurrentOwner, string CoOwner) {
            return base.Channel.InsertCoOwner(SecureID, CurrentOwner, CoOwner);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginInsertCoOwner(string SecureID, string CurrentOwner, string CoOwner, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginInsertCoOwner(SecureID, CurrentOwner, CoOwner, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndInsertCoOwner(System.IAsyncResult result) {
            return base.Channel.EndInsertCoOwner(result);
        }
        
        private System.IAsyncResult OnBeginInsertCoOwner(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CurrentOwner = ((string)(inValues[1]));
            string CoOwner = ((string)(inValues[2]));
            return this.BeginInsertCoOwner(SecureID, CurrentOwner, CoOwner, callback, asyncState);
        }
        
        private object[] OnEndInsertCoOwner(System.IAsyncResult result) {
            bool retVal = this.EndInsertCoOwner(result);
            return new object[] {
                    retVal};
        }
        
        private void OnInsertCoOwnerCompleted(object state) {
            if ((this.InsertCoOwnerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.InsertCoOwnerCompleted(this, new InsertCoOwnerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void InsertCoOwnerAsync(string SecureID, string CurrentOwner, string CoOwner) {
            this.InsertCoOwnerAsync(SecureID, CurrentOwner, CoOwner, null);
        }
        
        public void InsertCoOwnerAsync(string SecureID, string CurrentOwner, string CoOwner, object userState) {
            if ((this.onBeginInsertCoOwnerDelegate == null)) {
                this.onBeginInsertCoOwnerDelegate = new BeginOperationDelegate(this.OnBeginInsertCoOwner);
            }
            if ((this.onEndInsertCoOwnerDelegate == null)) {
                this.onEndInsertCoOwnerDelegate = new EndOperationDelegate(this.OnEndInsertCoOwner);
            }
            if ((this.onInsertCoOwnerCompletedDelegate == null)) {
                this.onInsertCoOwnerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnInsertCoOwnerCompleted);
            }
            base.InvokeAsync(this.onBeginInsertCoOwnerDelegate, new object[] {
                        SecureID,
                        CurrentOwner,
                        CoOwner}, this.onEndInsertCoOwnerDelegate, this.onInsertCoOwnerCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_CoOwner[] PopulateCoOwnerGrid(string SecureID, string UID) {
            return base.Channel.PopulateCoOwnerGrid(SecureID, UID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateCoOwnerGrid(string SecureID, string UID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateCoOwnerGrid(SecureID, UID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_CoOwner[] EndPopulateCoOwnerGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateCoOwnerGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateCoOwnerGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UID = ((string)(inValues[1]));
            return this.BeginPopulateCoOwnerGrid(SecureID, UID, callback, asyncState);
        }
        
        private object[] OnEndPopulateCoOwnerGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_CoOwner[] retVal = this.EndPopulateCoOwnerGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateCoOwnerGridCompleted(object state) {
            if ((this.PopulateCoOwnerGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateCoOwnerGridCompleted(this, new PopulateCoOwnerGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateCoOwnerGridAsync(string SecureID, string UID) {
            this.PopulateCoOwnerGridAsync(SecureID, UID, null);
        }
        
        public void PopulateCoOwnerGridAsync(string SecureID, string UID, object userState) {
            if ((this.onBeginPopulateCoOwnerGridDelegate == null)) {
                this.onBeginPopulateCoOwnerGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateCoOwnerGrid);
            }
            if ((this.onEndPopulateCoOwnerGridDelegate == null)) {
                this.onEndPopulateCoOwnerGridDelegate = new EndOperationDelegate(this.OnEndPopulateCoOwnerGrid);
            }
            if ((this.onPopulateCoOwnerGridCompletedDelegate == null)) {
                this.onPopulateCoOwnerGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateCoOwnerGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateCoOwnerGridDelegate, new object[] {
                        SecureID,
                        UID}, this.onEndPopulateCoOwnerGridDelegate, this.onPopulateCoOwnerGridCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_VUserGrid[] PopulateUserGrid(string SecureID, string UserID, bool DBisAdmin) {
            return base.Channel.PopulateUserGrid(SecureID, UserID, DBisAdmin);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateUserGrid(string SecureID, string UserID, bool DBisAdmin, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateUserGrid(SecureID, UserID, DBisAdmin, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_VUserGrid[] EndPopulateUserGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateUserGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateUserGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            bool DBisAdmin = ((bool)(inValues[2]));
            return this.BeginPopulateUserGrid(SecureID, UserID, DBisAdmin, callback, asyncState);
        }
        
        private object[] OnEndPopulateUserGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_VUserGrid[] retVal = this.EndPopulateUserGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateUserGridCompleted(object state) {
            if ((this.PopulateUserGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateUserGridCompleted(this, new PopulateUserGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateUserGridAsync(string SecureID, string UserID, bool DBisAdmin) {
            this.PopulateUserGridAsync(SecureID, UserID, DBisAdmin, null);
        }
        
        public void PopulateUserGridAsync(string SecureID, string UserID, bool DBisAdmin, object userState) {
            if ((this.onBeginPopulateUserGridDelegate == null)) {
                this.onBeginPopulateUserGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateUserGrid);
            }
            if ((this.onEndPopulateUserGridDelegate == null)) {
                this.onEndPopulateUserGridDelegate = new EndOperationDelegate(this.OnEndPopulateUserGrid);
            }
            if ((this.onPopulateUserGridCompletedDelegate == null)) {
                this.onPopulateUserGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateUserGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateUserGridDelegate, new object[] {
                        SecureID,
                        UserID,
                        DBisAdmin}, this.onEndPopulateUserGridDelegate, this.onPopulateUserGridCompletedDelegate, userState);
        }
        
        public void getGroupUsers(string SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg) {
            base.Channel.getGroupUsers(SecureID, GroupName, ref GroupList, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetGroupUsers(string SecureID, string GroupName, ref object[] GroupList, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGroupUsers(SecureID, GroupName, ref GroupList, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndgetGroupUsers(ref object[] GroupList, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndgetGroupUsers(ref GroupList, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetGroupUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string GroupName = ((string)(inValues[1]));
            object[] GroupList = ((object[])(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BegingetGroupUsers(SecureID, GroupName, ref GroupList, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndgetGroupUsers(System.IAsyncResult result) {
            object[] GroupList = this.GetDefaultValueForInitialization<object[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndgetGroupUsers(ref GroupList, ref RC, ref RetMsg, result);
            return new object[] {
                    GroupList,
                    RC,
                    RetMsg};
        }
        
        private void OngetGroupUsersCompleted(object state) {
            if ((this.getGroupUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGroupUsersCompleted(this, new getGroupUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGroupUsersAsync(string SecureID, string GroupName, object[] GroupList, bool RC, string RetMsg) {
            this.getGroupUsersAsync(SecureID, GroupName, GroupList, RC, RetMsg, null);
        }
        
        public void getGroupUsersAsync(string SecureID, string GroupName, object[] GroupList, bool RC, string RetMsg, object userState) {
            if ((this.onBegingetGroupUsersDelegate == null)) {
                this.onBegingetGroupUsersDelegate = new BeginOperationDelegate(this.OnBegingetGroupUsers);
            }
            if ((this.onEndgetGroupUsersDelegate == null)) {
                this.onEndgetGroupUsersDelegate = new EndOperationDelegate(this.OnEndgetGroupUsers);
            }
            if ((this.ongetGroupUsersCompletedDelegate == null)) {
                this.ongetGroupUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGroupUsersCompleted);
            }
            base.InvokeAsync(this.onBegingetGroupUsersDelegate, new object[] {
                        SecureID,
                        GroupName,
                        GroupList,
                        RC,
                        RetMsg}, this.onEndgetGroupUsersDelegate, this.ongetGroupUsersCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] PopulateDgGroupUsers(string SecureID, string OwnerUserGuidID, string GroupName) {
            return base.Channel.PopulateDgGroupUsers(SecureID, OwnerUserGuidID, GroupName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateDgGroupUsers(string SecureID, string OwnerUserGuidID, string GroupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateDgGroupUsers(SecureID, OwnerUserGuidID, GroupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] EndPopulateDgGroupUsers(System.IAsyncResult result) {
            return base.Channel.EndPopulateDgGroupUsers(result);
        }
        
        private System.IAsyncResult OnBeginPopulateDgGroupUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string OwnerUserGuidID = ((string)(inValues[1]));
            string GroupName = ((string)(inValues[2]));
            return this.BeginPopulateDgGroupUsers(SecureID, OwnerUserGuidID, GroupName, callback, asyncState);
        }
        
        private object[] OnEndPopulateDgGroupUsers(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_DgGroupUsers[] retVal = this.EndPopulateDgGroupUsers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateDgGroupUsersCompleted(object state) {
            if ((this.PopulateDgGroupUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateDgGroupUsersCompleted(this, new PopulateDgGroupUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateDgGroupUsersAsync(string SecureID, string OwnerUserGuidID, string GroupName) {
            this.PopulateDgGroupUsersAsync(SecureID, OwnerUserGuidID, GroupName, null);
        }
        
        public void PopulateDgGroupUsersAsync(string SecureID, string OwnerUserGuidID, string GroupName, object userState) {
            if ((this.onBeginPopulateDgGroupUsersDelegate == null)) {
                this.onBeginPopulateDgGroupUsersDelegate = new BeginOperationDelegate(this.OnBeginPopulateDgGroupUsers);
            }
            if ((this.onEndPopulateDgGroupUsersDelegate == null)) {
                this.onEndPopulateDgGroupUsersDelegate = new EndOperationDelegate(this.OnEndPopulateDgGroupUsers);
            }
            if ((this.onPopulateDgGroupUsersCompletedDelegate == null)) {
                this.onPopulateDgGroupUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateDgGroupUsersCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateDgGroupUsersDelegate, new object[] {
                        SecureID,
                        OwnerUserGuidID,
                        GroupName}, this.onEndPopulateDgGroupUsersDelegate, this.onPopulateDgGroupUsersCompletedDelegate, userState);
        }
        
        public bool DeleteGroupUsers(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg) {
            return base.Channel.DeleteGroupUsers(SecureID, CurrSelectedGroupName, GroupOwnerGuid, UserID, ref iDeleted, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteGroupUsers(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, ref int iDeleted, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteGroupUsers(SecureID, CurrSelectedGroupName, GroupOwnerGuid, UserID, ref iDeleted, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndDeleteGroupUsers(ref int iDeleted, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndDeleteGroupUsers(ref iDeleted, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginDeleteGroupUsers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CurrSelectedGroupName = ((string)(inValues[1]));
            string GroupOwnerGuid = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            int iDeleted = ((int)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            return this.BeginDeleteGroupUsers(SecureID, CurrSelectedGroupName, GroupOwnerGuid, UserID, ref iDeleted, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndDeleteGroupUsers(System.IAsyncResult result) {
            int iDeleted = this.GetDefaultValueForInitialization<int>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndDeleteGroupUsers(ref iDeleted, ref RetMsg, result);
            return new object[] {
                    iDeleted,
                    RetMsg,
                    retVal};
        }
        
        private void OnDeleteGroupUsersCompleted(object state) {
            if ((this.DeleteGroupUsersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteGroupUsersCompleted(this, new DeleteGroupUsersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteGroupUsersAsync(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, int iDeleted, string RetMsg) {
            this.DeleteGroupUsersAsync(SecureID, CurrSelectedGroupName, GroupOwnerGuid, UserID, iDeleted, RetMsg, null);
        }
        
        public void DeleteGroupUsersAsync(string SecureID, string CurrSelectedGroupName, string GroupOwnerGuid, string UserID, int iDeleted, string RetMsg, object userState) {
            if ((this.onBeginDeleteGroupUsersDelegate == null)) {
                this.onBeginDeleteGroupUsersDelegate = new BeginOperationDelegate(this.OnBeginDeleteGroupUsers);
            }
            if ((this.onEndDeleteGroupUsersDelegate == null)) {
                this.onEndDeleteGroupUsersDelegate = new EndOperationDelegate(this.OnEndDeleteGroupUsers);
            }
            if ((this.onDeleteGroupUsersCompletedDelegate == null)) {
                this.onDeleteGroupUsersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteGroupUsersCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteGroupUsersDelegate, new object[] {
                        SecureID,
                        CurrSelectedGroupName,
                        GroupOwnerGuid,
                        UserID,
                        iDeleted,
                        RetMsg}, this.onEndDeleteGroupUsersDelegate, this.onDeleteGroupUsersCompletedDelegate, userState);
        }
        
        public string getGroupOwnerGuidByGroupName(string SecureID, string GroupName) {
            return base.Channel.getGroupOwnerGuidByGroupName(SecureID, GroupName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetGroupOwnerGuidByGroupName(string SecureID, string GroupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetGroupOwnerGuidByGroupName(SecureID, GroupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndgetGroupOwnerGuidByGroupName(System.IAsyncResult result) {
            return base.Channel.EndgetGroupOwnerGuidByGroupName(result);
        }
        
        private System.IAsyncResult OnBegingetGroupOwnerGuidByGroupName(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string GroupName = ((string)(inValues[1]));
            return this.BegingetGroupOwnerGuidByGroupName(SecureID, GroupName, callback, asyncState);
        }
        
        private object[] OnEndgetGroupOwnerGuidByGroupName(System.IAsyncResult result) {
            string retVal = this.EndgetGroupOwnerGuidByGroupName(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetGroupOwnerGuidByGroupNameCompleted(object state) {
            if ((this.getGroupOwnerGuidByGroupNameCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getGroupOwnerGuidByGroupNameCompleted(this, new getGroupOwnerGuidByGroupNameCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getGroupOwnerGuidByGroupNameAsync(string SecureID, string GroupName) {
            this.getGroupOwnerGuidByGroupNameAsync(SecureID, GroupName, null);
        }
        
        public void getGroupOwnerGuidByGroupNameAsync(string SecureID, string GroupName, object userState) {
            if ((this.onBegingetGroupOwnerGuidByGroupNameDelegate == null)) {
                this.onBegingetGroupOwnerGuidByGroupNameDelegate = new BeginOperationDelegate(this.OnBegingetGroupOwnerGuidByGroupName);
            }
            if ((this.onEndgetGroupOwnerGuidByGroupNameDelegate == null)) {
                this.onEndgetGroupOwnerGuidByGroupNameDelegate = new EndOperationDelegate(this.OnEndgetGroupOwnerGuidByGroupName);
            }
            if ((this.ongetGroupOwnerGuidByGroupNameCompletedDelegate == null)) {
                this.ongetGroupOwnerGuidByGroupNameCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetGroupOwnerGuidByGroupNameCompleted);
            }
            base.InvokeAsync(this.onBegingetGroupOwnerGuidByGroupNameDelegate, new object[] {
                        SecureID,
                        GroupName}, this.onEndgetGroupOwnerGuidByGroupNameDelegate, this.ongetGroupOwnerGuidByGroupNameCompletedDelegate, userState);
        }
        
        public void AddLibraryGroupUser(string SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection) {
            base.Channel.AddLibraryGroupUser(SecureID, GroupName, ref RC, CurrUserID, SessionID, ControlSection);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddLibraryGroupUser(string SecureID, string GroupName, ref bool RC, string CurrUserID, string SessionID, string ControlSection, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLibraryGroupUser(SecureID, GroupName, ref RC, CurrUserID, SessionID, ControlSection, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddLibraryGroupUser(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndAddLibraryGroupUser(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginAddLibraryGroupUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string GroupName = ((string)(inValues[1]));
            bool RC = ((bool)(inValues[2]));
            string CurrUserID = ((string)(inValues[3]));
            string SessionID = ((string)(inValues[4]));
            string ControlSection = ((string)(inValues[5]));
            return this.BeginAddLibraryGroupUser(SecureID, GroupName, ref RC, CurrUserID, SessionID, ControlSection, callback, asyncState);
        }
        
        private object[] OnEndAddLibraryGroupUser(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndAddLibraryGroupUser(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnAddLibraryGroupUserCompleted(object state) {
            if ((this.AddLibraryGroupUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLibraryGroupUserCompleted(this, new AddLibraryGroupUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLibraryGroupUserAsync(string SecureID, string GroupName, bool RC, string CurrUserID, string SessionID, string ControlSection) {
            this.AddLibraryGroupUserAsync(SecureID, GroupName, RC, CurrUserID, SessionID, ControlSection, null);
        }
        
        public void AddLibraryGroupUserAsync(string SecureID, string GroupName, bool RC, string CurrUserID, string SessionID, string ControlSection, object userState) {
            if ((this.onBeginAddLibraryGroupUserDelegate == null)) {
                this.onBeginAddLibraryGroupUserDelegate = new BeginOperationDelegate(this.OnBeginAddLibraryGroupUser);
            }
            if ((this.onEndAddLibraryGroupUserDelegate == null)) {
                this.onEndAddLibraryGroupUserDelegate = new EndOperationDelegate(this.OnEndAddLibraryGroupUser);
            }
            if ((this.onAddLibraryGroupUserCompletedDelegate == null)) {
                this.onAddLibraryGroupUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLibraryGroupUserCompleted);
            }
            base.InvokeAsync(this.onBeginAddLibraryGroupUserDelegate, new object[] {
                        SecureID,
                        GroupName,
                        RC,
                        CurrUserID,
                        SessionID,
                        ControlSection}, this.onEndAddLibraryGroupUserDelegate, this.onAddLibraryGroupUserCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] PopulateGroupUserGrid(string SecureID, string GroupName) {
            return base.Channel.PopulateGroupUserGrid(SecureID, GroupName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateGroupUserGrid(string SecureID, string GroupName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateGroupUserGrid(SecureID, GroupName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] EndPopulateGroupUserGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateGroupUserGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateGroupUserGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string GroupName = ((string)(inValues[1]));
            return this.BeginPopulateGroupUserGrid(SecureID, GroupName, callback, asyncState);
        }
        
        private object[] OnEndPopulateGroupUserGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_dgGrpUsers[] retVal = this.EndPopulateGroupUserGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateGroupUserGridCompleted(object state) {
            if ((this.PopulateGroupUserGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateGroupUserGridCompleted(this, new PopulateGroupUserGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateGroupUserGridAsync(string SecureID, string GroupName) {
            this.PopulateGroupUserGridAsync(SecureID, GroupName, null);
        }
        
        public void PopulateGroupUserGridAsync(string SecureID, string GroupName, object userState) {
            if ((this.onBeginPopulateGroupUserGridDelegate == null)) {
                this.onBeginPopulateGroupUserGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateGroupUserGrid);
            }
            if ((this.onEndPopulateGroupUserGridDelegate == null)) {
                this.onEndPopulateGroupUserGridDelegate = new EndOperationDelegate(this.OnEndPopulateGroupUserGrid);
            }
            if ((this.onPopulateGroupUserGridCompletedDelegate == null)) {
                this.onPopulateGroupUserGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateGroupUserGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateGroupUserGridDelegate, new object[] {
                        SecureID,
                        GroupName}, this.onEndPopulateGroupUserGridDelegate, this.onPopulateGroupUserGridCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_LibItems[] PopulateLibItemsGrid(string SecureID, string LibraryName, string UserID) {
            return base.Channel.PopulateLibItemsGrid(SecureID, LibraryName, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateLibItemsGrid(string SecureID, string LibraryName, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateLibItemsGrid(SecureID, LibraryName, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_LibItems[] EndPopulateLibItemsGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateLibItemsGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateLibItemsGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string LibraryName = ((string)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            return this.BeginPopulateLibItemsGrid(SecureID, LibraryName, UserID, callback, asyncState);
        }
        
        private object[] OnEndPopulateLibItemsGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_LibItems[] retVal = this.EndPopulateLibItemsGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateLibItemsGridCompleted(object state) {
            if ((this.PopulateLibItemsGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateLibItemsGridCompleted(this, new PopulateLibItemsGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateLibItemsGridAsync(string SecureID, string LibraryName, string UserID) {
            this.PopulateLibItemsGridAsync(SecureID, LibraryName, UserID, null);
        }
        
        public void PopulateLibItemsGridAsync(string SecureID, string LibraryName, string UserID, object userState) {
            if ((this.onBeginPopulateLibItemsGridDelegate == null)) {
                this.onBeginPopulateLibItemsGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateLibItemsGrid);
            }
            if ((this.onEndPopulateLibItemsGridDelegate == null)) {
                this.onEndPopulateLibItemsGridDelegate = new EndOperationDelegate(this.OnEndPopulateLibItemsGrid);
            }
            if ((this.onPopulateLibItemsGridCompletedDelegate == null)) {
                this.onPopulateLibItemsGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateLibItemsGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateLibItemsGridDelegate, new object[] {
                        SecureID,
                        LibraryName,
                        UserID}, this.onEndPopulateLibItemsGridDelegate, this.onPopulateLibItemsGridCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_DgAssigned[] PopulateDgAssigned(string SecureID, string LibraryName, string UserID) {
            return base.Channel.PopulateDgAssigned(SecureID, LibraryName, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateDgAssigned(string SecureID, string LibraryName, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateDgAssigned(SecureID, LibraryName, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_DgAssigned[] EndPopulateDgAssigned(System.IAsyncResult result) {
            return base.Channel.EndPopulateDgAssigned(result);
        }
        
        private System.IAsyncResult OnBeginPopulateDgAssigned(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string LibraryName = ((string)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            return this.BeginPopulateDgAssigned(SecureID, LibraryName, UserID, callback, asyncState);
        }
        
        private object[] OnEndPopulateDgAssigned(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_DgAssigned[] retVal = this.EndPopulateDgAssigned(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateDgAssignedCompleted(object state) {
            if ((this.PopulateDgAssignedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateDgAssignedCompleted(this, new PopulateDgAssignedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateDgAssignedAsync(string SecureID, string LibraryName, string UserID) {
            this.PopulateDgAssignedAsync(SecureID, LibraryName, UserID, null);
        }
        
        public void PopulateDgAssignedAsync(string SecureID, string LibraryName, string UserID, object userState) {
            if ((this.onBeginPopulateDgAssignedDelegate == null)) {
                this.onBeginPopulateDgAssignedDelegate = new BeginOperationDelegate(this.OnBeginPopulateDgAssigned);
            }
            if ((this.onEndPopulateDgAssignedDelegate == null)) {
                this.onEndPopulateDgAssignedDelegate = new EndOperationDelegate(this.OnEndPopulateDgAssigned);
            }
            if ((this.onPopulateDgAssignedCompletedDelegate == null)) {
                this.onPopulateDgAssignedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateDgAssignedCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateDgAssignedDelegate, new object[] {
                        SecureID,
                        LibraryName,
                        UserID}, this.onEndPopulateDgAssignedDelegate, this.onPopulateDgAssignedCompletedDelegate, userState);
        }
        
        public void ResetLibraryUsersCount(string SecureID, ref bool RC) {
            base.Channel.ResetLibraryUsersCount(SecureID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginResetLibraryUsersCount(string SecureID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginResetLibraryUsersCount(SecureID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndResetLibraryUsersCount(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndResetLibraryUsersCount(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginResetLibraryUsersCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            bool RC = ((bool)(inValues[1]));
            return this.BeginResetLibraryUsersCount(SecureID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndResetLibraryUsersCount(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndResetLibraryUsersCount(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnResetLibraryUsersCountCompleted(object state) {
            if ((this.ResetLibraryUsersCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ResetLibraryUsersCountCompleted(this, new ResetLibraryUsersCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ResetLibraryUsersCountAsync(string SecureID, bool RC) {
            this.ResetLibraryUsersCountAsync(SecureID, RC, null);
        }
        
        public void ResetLibraryUsersCountAsync(string SecureID, bool RC, object userState) {
            if ((this.onBeginResetLibraryUsersCountDelegate == null)) {
                this.onBeginResetLibraryUsersCountDelegate = new BeginOperationDelegate(this.OnBeginResetLibraryUsersCount);
            }
            if ((this.onEndResetLibraryUsersCountDelegate == null)) {
                this.onEndResetLibraryUsersCountDelegate = new EndOperationDelegate(this.OnEndResetLibraryUsersCount);
            }
            if ((this.onResetLibraryUsersCountCompletedDelegate == null)) {
                this.onResetLibraryUsersCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnResetLibraryUsersCountCompleted);
            }
            base.InvokeAsync(this.onBeginResetLibraryUsersCountDelegate, new object[] {
                        SecureID,
                        RC}, this.onEndResetLibraryUsersCountDelegate, this.onResetLibraryUsersCountCompletedDelegate, userState);
        }
        
        public void DeleteLibraryGroupUser(string SecureID, string GroupName, string LibraryName, ref bool RC) {
            base.Channel.DeleteLibraryGroupUser(SecureID, GroupName, LibraryName, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginDeleteLibraryGroupUser(string SecureID, string GroupName, string LibraryName, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteLibraryGroupUser(SecureID, GroupName, LibraryName, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndDeleteLibraryGroupUser(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndDeleteLibraryGroupUser(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginDeleteLibraryGroupUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string GroupName = ((string)(inValues[1]));
            string LibraryName = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            return this.BeginDeleteLibraryGroupUser(SecureID, GroupName, LibraryName, ref RC, callback, asyncState);
        }
        
        private object[] OnEndDeleteLibraryGroupUser(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndDeleteLibraryGroupUser(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnDeleteLibraryGroupUserCompleted(object state) {
            if ((this.DeleteLibraryGroupUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteLibraryGroupUserCompleted(this, new DeleteLibraryGroupUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteLibraryGroupUserAsync(string SecureID, string GroupName, string LibraryName, bool RC) {
            this.DeleteLibraryGroupUserAsync(SecureID, GroupName, LibraryName, RC, null);
        }
        
        public void DeleteLibraryGroupUserAsync(string SecureID, string GroupName, string LibraryName, bool RC, object userState) {
            if ((this.onBeginDeleteLibraryGroupUserDelegate == null)) {
                this.onBeginDeleteLibraryGroupUserDelegate = new BeginOperationDelegate(this.OnBeginDeleteLibraryGroupUser);
            }
            if ((this.onEndDeleteLibraryGroupUserDelegate == null)) {
                this.onEndDeleteLibraryGroupUserDelegate = new EndOperationDelegate(this.OnEndDeleteLibraryGroupUser);
            }
            if ((this.onDeleteLibraryGroupUserCompletedDelegate == null)) {
                this.onDeleteLibraryGroupUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteLibraryGroupUserCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteLibraryGroupUserDelegate, new object[] {
                        SecureID,
                        GroupName,
                        LibraryName,
                        RC}, this.onEndDeleteLibraryGroupUserDelegate, this.onDeleteLibraryGroupUserCompletedDelegate, userState);
        }
        
        public bool ChangeUserPassword(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2) {
            return base.Channel.ChangeUserPassword(SecureID, UserLogin, OldPW, NewPw1, NewPw2);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginChangeUserPassword(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginChangeUserPassword(SecureID, UserLogin, OldPW, NewPw1, NewPw2, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndChangeUserPassword(System.IAsyncResult result) {
            return base.Channel.EndChangeUserPassword(result);
        }
        
        private System.IAsyncResult OnBeginChangeUserPassword(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserLogin = ((string)(inValues[1]));
            string OldPW = ((string)(inValues[2]));
            string NewPw1 = ((string)(inValues[3]));
            string NewPw2 = ((string)(inValues[4]));
            return this.BeginChangeUserPassword(SecureID, UserLogin, OldPW, NewPw1, NewPw2, callback, asyncState);
        }
        
        private object[] OnEndChangeUserPassword(System.IAsyncResult result) {
            bool retVal = this.EndChangeUserPassword(result);
            return new object[] {
                    retVal};
        }
        
        private void OnChangeUserPasswordCompleted(object state) {
            if ((this.ChangeUserPasswordCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ChangeUserPasswordCompleted(this, new ChangeUserPasswordCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ChangeUserPasswordAsync(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2) {
            this.ChangeUserPasswordAsync(SecureID, UserLogin, OldPW, NewPw1, NewPw2, null);
        }
        
        public void ChangeUserPasswordAsync(string SecureID, string UserLogin, string OldPW, string NewPw1, string NewPw2, object userState) {
            if ((this.onBeginChangeUserPasswordDelegate == null)) {
                this.onBeginChangeUserPasswordDelegate = new BeginOperationDelegate(this.OnBeginChangeUserPassword);
            }
            if ((this.onEndChangeUserPasswordDelegate == null)) {
                this.onEndChangeUserPasswordDelegate = new EndOperationDelegate(this.OnEndChangeUserPassword);
            }
            if ((this.onChangeUserPasswordCompletedDelegate == null)) {
                this.onChangeUserPasswordCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnChangeUserPasswordCompleted);
            }
            base.InvokeAsync(this.onBeginChangeUserPasswordDelegate, new object[] {
                        SecureID,
                        UserLogin,
                        OldPW,
                        NewPw1,
                        NewPw2}, this.onEndChangeUserPasswordDelegate, this.onChangeUserPasswordCompletedDelegate, userState);
        }
        
        public void SaveClickStats(string SecureID, int IID, string UserID, ref bool RC) {
            base.Channel.SaveClickStats(SecureID, IID, UserID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginSaveClickStats(string SecureID, int IID, string UserID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveClickStats(SecureID, IID, UserID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndSaveClickStats(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndSaveClickStats(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginSaveClickStats(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            int IID = ((int)(inValues[1]));
            string UserID = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            return this.BeginSaveClickStats(SecureID, IID, UserID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndSaveClickStats(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndSaveClickStats(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnSaveClickStatsCompleted(object state) {
            if ((this.SaveClickStatsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveClickStatsCompleted(this, new SaveClickStatsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveClickStatsAsync(string SecureID, int IID, string UserID, bool RC) {
            this.SaveClickStatsAsync(SecureID, IID, UserID, RC, null);
        }
        
        public void SaveClickStatsAsync(string SecureID, int IID, string UserID, bool RC, object userState) {
            if ((this.onBeginSaveClickStatsDelegate == null)) {
                this.onBeginSaveClickStatsDelegate = new BeginOperationDelegate(this.OnBeginSaveClickStats);
            }
            if ((this.onEndSaveClickStatsDelegate == null)) {
                this.onEndSaveClickStatsDelegate = new EndOperationDelegate(this.OnEndSaveClickStats);
            }
            if ((this.onSaveClickStatsCompletedDelegate == null)) {
                this.onSaveClickStatsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveClickStatsCompleted);
            }
            base.InvokeAsync(this.onBeginSaveClickStatsDelegate, new object[] {
                        SecureID,
                        IID,
                        UserID,
                        RC}, this.onEndSaveClickStatsDelegate, this.onSaveClickStatsCompletedDelegate, userState);
        }
        
        public void RemoveLibraryDirectories(string SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg) {
            base.Channel.RemoveLibraryDirectories(SecureID, UserID, DirectoryName, LibraryName, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveLibraryDirectories(string SecureID, string UserID, string DirectoryName, string LibraryName, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLibraryDirectories(SecureID, UserID, DirectoryName, LibraryName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveLibraryDirectories(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndRemoveLibraryDirectories(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginRemoveLibraryDirectories(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string DirectoryName = ((string)(inValues[2]));
            string LibraryName = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            return this.BeginRemoveLibraryDirectories(SecureID, UserID, DirectoryName, LibraryName, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndRemoveLibraryDirectories(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndRemoveLibraryDirectories(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg};
        }
        
        private void OnRemoveLibraryDirectoriesCompleted(object state) {
            if ((this.RemoveLibraryDirectoriesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLibraryDirectoriesCompleted(this, new RemoveLibraryDirectoriesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLibraryDirectoriesAsync(string SecureID, string UserID, string DirectoryName, string LibraryName, bool RC, string RetMsg) {
            this.RemoveLibraryDirectoriesAsync(SecureID, UserID, DirectoryName, LibraryName, RC, RetMsg, null);
        }
        
        public void RemoveLibraryDirectoriesAsync(string SecureID, string UserID, string DirectoryName, string LibraryName, bool RC, string RetMsg, object userState) {
            if ((this.onBeginRemoveLibraryDirectoriesDelegate == null)) {
                this.onBeginRemoveLibraryDirectoriesDelegate = new BeginOperationDelegate(this.OnBeginRemoveLibraryDirectories);
            }
            if ((this.onEndRemoveLibraryDirectoriesDelegate == null)) {
                this.onEndRemoveLibraryDirectoriesDelegate = new EndOperationDelegate(this.OnEndRemoveLibraryDirectories);
            }
            if ((this.onRemoveLibraryDirectoriesCompletedDelegate == null)) {
                this.onRemoveLibraryDirectoriesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLibraryDirectoriesCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLibraryDirectoriesDelegate, new object[] {
                        SecureID,
                        UserID,
                        DirectoryName,
                        LibraryName,
                        RC,
                        RetMsg}, this.onEndRemoveLibraryDirectoriesDelegate, this.onRemoveLibraryDirectoriesCompletedDelegate, userState);
        }
        
        public void RemoveLibraryEmails(string SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg) {
            base.Channel.RemoveLibraryEmails(SecureID, FolderName, LibraryName, UserID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginRemoveLibraryEmails(string SecureID, string FolderName, string LibraryName, string UserID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveLibraryEmails(SecureID, FolderName, LibraryName, UserID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndRemoveLibraryEmails(ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndRemoveLibraryEmails(ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginRemoveLibraryEmails(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string FolderName = ((string)(inValues[1]));
            string LibraryName = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            return this.BeginRemoveLibraryEmails(SecureID, FolderName, LibraryName, UserID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndRemoveLibraryEmails(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndRemoveLibraryEmails(ref RC, ref RetMsg, result);
            return new object[] {
                    RC,
                    RetMsg};
        }
        
        private void OnRemoveLibraryEmailsCompleted(object state) {
            if ((this.RemoveLibraryEmailsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveLibraryEmailsCompleted(this, new RemoveLibraryEmailsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveLibraryEmailsAsync(string SecureID, string FolderName, string LibraryName, string UserID, bool RC, string RetMsg) {
            this.RemoveLibraryEmailsAsync(SecureID, FolderName, LibraryName, UserID, RC, RetMsg, null);
        }
        
        public void RemoveLibraryEmailsAsync(string SecureID, string FolderName, string LibraryName, string UserID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginRemoveLibraryEmailsDelegate == null)) {
                this.onBeginRemoveLibraryEmailsDelegate = new BeginOperationDelegate(this.OnBeginRemoveLibraryEmails);
            }
            if ((this.onEndRemoveLibraryEmailsDelegate == null)) {
                this.onEndRemoveLibraryEmailsDelegate = new EndOperationDelegate(this.OnEndRemoveLibraryEmails);
            }
            if ((this.onRemoveLibraryEmailsCompletedDelegate == null)) {
                this.onRemoveLibraryEmailsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveLibraryEmailsCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveLibraryEmailsDelegate, new object[] {
                        SecureID,
                        FolderName,
                        LibraryName,
                        UserID,
                        RC,
                        RetMsg}, this.onEndRemoveLibraryEmailsDelegate, this.onRemoveLibraryEmailsCompletedDelegate, userState);
        }
        
        public void AddSysMsg(string SecureID, string UserID, string tMsg, bool RC) {
            base.Channel.AddSysMsg(SecureID, UserID, tMsg, RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddSysMsg(string SecureID, string UserID, string tMsg, bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddSysMsg(SecureID, UserID, tMsg, RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddSysMsg(System.IAsyncResult result) {
            base.Channel.EndAddSysMsg(result);
        }
        
        private System.IAsyncResult OnBeginAddSysMsg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            string tMsg = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            return this.BeginAddSysMsg(SecureID, UserID, tMsg, RC, callback, asyncState);
        }
        
        private object[] OnEndAddSysMsg(System.IAsyncResult result) {
            this.EndAddSysMsg(result);
            return null;
        }
        
        private void OnAddSysMsgCompleted(object state) {
            if ((this.AddSysMsgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddSysMsgCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddSysMsgAsync(string SecureID, string UserID, string tMsg, bool RC) {
            this.AddSysMsgAsync(SecureID, UserID, tMsg, RC, null);
        }
        
        public void AddSysMsgAsync(string SecureID, string UserID, string tMsg, bool RC, object userState) {
            if ((this.onBeginAddSysMsgDelegate == null)) {
                this.onBeginAddSysMsgDelegate = new BeginOperationDelegate(this.OnBeginAddSysMsg);
            }
            if ((this.onEndAddSysMsgDelegate == null)) {
                this.onEndAddSysMsgDelegate = new EndOperationDelegate(this.OnEndAddSysMsg);
            }
            if ((this.onAddSysMsgCompletedDelegate == null)) {
                this.onAddSysMsgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddSysMsgCompleted);
            }
            base.InvokeAsync(this.onBeginAddSysMsgDelegate, new object[] {
                        SecureID,
                        UserID,
                        tMsg,
                        RC}, this.onEndAddSysMsgDelegate, this.onAddSysMsgCompletedDelegate, userState);
        }
        
        public void AddLibraryDirectory(string SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg) {
            base.Channel.AddLibraryDirectory(SecureID, FolderName, LibraryName, UserID, ref RecordsAdded, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddLibraryDirectory(string SecureID, string FolderName, string LibraryName, string UserID, ref int RecordsAdded, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLibraryDirectory(SecureID, FolderName, LibraryName, UserID, ref RecordsAdded, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddLibraryDirectory(ref int RecordsAdded, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndAddLibraryDirectory(ref RecordsAdded, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginAddLibraryDirectory(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string FolderName = ((string)(inValues[1]));
            string LibraryName = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            int RecordsAdded = ((int)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string RetMsg = ((string)(inValues[6]));
            return this.BeginAddLibraryDirectory(SecureID, FolderName, LibraryName, UserID, ref RecordsAdded, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndAddLibraryDirectory(System.IAsyncResult result) {
            int RecordsAdded = this.GetDefaultValueForInitialization<int>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndAddLibraryDirectory(ref RecordsAdded, ref RC, ref RetMsg, result);
            return new object[] {
                    RecordsAdded,
                    RC,
                    RetMsg};
        }
        
        private void OnAddLibraryDirectoryCompleted(object state) {
            if ((this.AddLibraryDirectoryCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLibraryDirectoryCompleted(this, new AddLibraryDirectoryCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLibraryDirectoryAsync(string SecureID, string FolderName, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg) {
            this.AddLibraryDirectoryAsync(SecureID, FolderName, LibraryName, UserID, RecordsAdded, RC, RetMsg, null);
        }
        
        public void AddLibraryDirectoryAsync(string SecureID, string FolderName, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg, object userState) {
            if ((this.onBeginAddLibraryDirectoryDelegate == null)) {
                this.onBeginAddLibraryDirectoryDelegate = new BeginOperationDelegate(this.OnBeginAddLibraryDirectory);
            }
            if ((this.onEndAddLibraryDirectoryDelegate == null)) {
                this.onEndAddLibraryDirectoryDelegate = new EndOperationDelegate(this.OnEndAddLibraryDirectory);
            }
            if ((this.onAddLibraryDirectoryCompletedDelegate == null)) {
                this.onAddLibraryDirectoryCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLibraryDirectoryCompleted);
            }
            base.InvokeAsync(this.onBeginAddLibraryDirectoryDelegate, new object[] {
                        SecureID,
                        FolderName,
                        LibraryName,
                        UserID,
                        RecordsAdded,
                        RC,
                        RetMsg}, this.onEndAddLibraryDirectoryDelegate, this.onAddLibraryDirectoryCompletedDelegate, userState);
        }
        
        public void AddLibraryEmail(string SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg) {
            base.Channel.AddLibraryEmail(SecureID, EmailFolder, LibraryName, UserID, ref RecordsAdded, RC, RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginAddLibraryEmail(string SecureID, string EmailFolder, string LibraryName, string UserID, ref int RecordsAdded, bool RC, string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddLibraryEmail(SecureID, EmailFolder, LibraryName, UserID, ref RecordsAdded, RC, RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndAddLibraryEmail(ref int RecordsAdded, System.IAsyncResult result) {
            base.Channel.EndAddLibraryEmail(ref RecordsAdded, result);
        }
        
        private System.IAsyncResult OnBeginAddLibraryEmail(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string EmailFolder = ((string)(inValues[1]));
            string LibraryName = ((string)(inValues[2]));
            string UserID = ((string)(inValues[3]));
            int RecordsAdded = ((int)(inValues[4]));
            bool RC = ((bool)(inValues[5]));
            string RetMsg = ((string)(inValues[6]));
            return this.BeginAddLibraryEmail(SecureID, EmailFolder, LibraryName, UserID, ref RecordsAdded, RC, RetMsg, callback, asyncState);
        }
        
        private object[] OnEndAddLibraryEmail(System.IAsyncResult result) {
            int RecordsAdded = this.GetDefaultValueForInitialization<int>();
            this.EndAddLibraryEmail(ref RecordsAdded, result);
            return new object[] {
                    RecordsAdded};
        }
        
        private void OnAddLibraryEmailCompleted(object state) {
            if ((this.AddLibraryEmailCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddLibraryEmailCompleted(this, new AddLibraryEmailCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddLibraryEmailAsync(string SecureID, string EmailFolder, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg) {
            this.AddLibraryEmailAsync(SecureID, EmailFolder, LibraryName, UserID, RecordsAdded, RC, RetMsg, null);
        }
        
        public void AddLibraryEmailAsync(string SecureID, string EmailFolder, string LibraryName, string UserID, int RecordsAdded, bool RC, string RetMsg, object userState) {
            if ((this.onBeginAddLibraryEmailDelegate == null)) {
                this.onBeginAddLibraryEmailDelegate = new BeginOperationDelegate(this.OnBeginAddLibraryEmail);
            }
            if ((this.onEndAddLibraryEmailDelegate == null)) {
                this.onEndAddLibraryEmailDelegate = new EndOperationDelegate(this.OnEndAddLibraryEmail);
            }
            if ((this.onAddLibraryEmailCompletedDelegate == null)) {
                this.onAddLibraryEmailCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddLibraryEmailCompleted);
            }
            base.InvokeAsync(this.onBeginAddLibraryEmailDelegate, new object[] {
                        SecureID,
                        EmailFolder,
                        LibraryName,
                        UserID,
                        RecordsAdded,
                        RC,
                        RetMsg}, this.onEndAddLibraryEmailDelegate, this.onAddLibraryEmailCompletedDelegate, userState);
        }
        
        public ECMSearchWPF.SVCSearch.DS_VLibraryStats[] PopulateLibraryGrid(string SecureID, string UserID) {
            return base.Channel.PopulateLibraryGrid(SecureID, UserID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateLibraryGrid(string SecureID, string UserID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateLibraryGrid(SecureID, UserID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public ECMSearchWPF.SVCSearch.DS_VLibraryStats[] EndPopulateLibraryGrid(System.IAsyncResult result) {
            return base.Channel.EndPopulateLibraryGrid(result);
        }
        
        private System.IAsyncResult OnBeginPopulateLibraryGrid(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string UserID = ((string)(inValues[1]));
            return this.BeginPopulateLibraryGrid(SecureID, UserID, callback, asyncState);
        }
        
        private object[] OnEndPopulateLibraryGrid(System.IAsyncResult result) {
            ECMSearchWPF.SVCSearch.DS_VLibraryStats[] retVal = this.EndPopulateLibraryGrid(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPopulateLibraryGridCompleted(object state) {
            if ((this.PopulateLibraryGridCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateLibraryGridCompleted(this, new PopulateLibraryGridCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateLibraryGridAsync(string SecureID, string UserID) {
            this.PopulateLibraryGridAsync(SecureID, UserID, null);
        }
        
        public void PopulateLibraryGridAsync(string SecureID, string UserID, object userState) {
            if ((this.onBeginPopulateLibraryGridDelegate == null)) {
                this.onBeginPopulateLibraryGridDelegate = new BeginOperationDelegate(this.OnBeginPopulateLibraryGrid);
            }
            if ((this.onEndPopulateLibraryGridDelegate == null)) {
                this.onEndPopulateLibraryGridDelegate = new EndOperationDelegate(this.OnEndPopulateLibraryGrid);
            }
            if ((this.onPopulateLibraryGridCompletedDelegate == null)) {
                this.onPopulateLibraryGridCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateLibraryGridCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateLibraryGridDelegate, new object[] {
                        SecureID,
                        UserID}, this.onEndPopulateLibraryGridDelegate, this.onPopulateLibraryGridCompletedDelegate, userState);
        }
        
        public bool getListOfStrings(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetListOfStrings(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings(ref ListOfItems, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string[] ListOfItems = ((string[])(inValues[2]));
            string MySql = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            string UserId = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            return this.BegingetListOfStrings(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings(System.IAsyncResult result) {
            string[] ListOfItems = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetListOfStrings(ref ListOfItems, ref RC, ref RetMsg, result);
            return new object[] {
                    ListOfItems,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStringsCompleted(object state) {
            if ((this.getListOfStringsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStringsCompleted(this, new getListOfStringsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStringsAsync(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStringsAsync(SecureID, SID, ListOfItems, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStringsAsync(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStringsDelegate == null)) {
                this.onBegingetListOfStringsDelegate = new BeginOperationDelegate(this.OnBegingetListOfStrings);
            }
            if ((this.onEndgetListOfStringsDelegate == null)) {
                this.onEndgetListOfStringsDelegate = new EndOperationDelegate(this.OnEndgetListOfStrings);
            }
            if ((this.ongetListOfStringsCompletedDelegate == null)) {
                this.ongetListOfStringsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStringsCompleted);
            }
            base.InvokeAsync(this.onBegingetListOfStringsDelegate, new object[] {
                        SecureID,
                        SID,
                        ListOfItems,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStringsDelegate, this.ongetListOfStringsCompletedDelegate, userState);
        }
        
        public bool getListOfStrings1(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings1(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings1(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings1(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetListOfStrings1(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings1(ref ListOfItems, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings1(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string[] ListOfItems = ((string[])(inValues[2]));
            string MySql = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            string UserId = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            return this.BegingetListOfStrings1(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings1(System.IAsyncResult result) {
            string[] ListOfItems = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetListOfStrings1(ref ListOfItems, ref RC, ref RetMsg, result);
            return new object[] {
                    ListOfItems,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings1Completed(object state) {
            if ((this.getListOfStrings1Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings1Completed(this, new getListOfStrings1CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings1Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings1Async(SecureID, SID, ListOfItems, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings1Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings1Delegate == null)) {
                this.onBegingetListOfStrings1Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings1);
            }
            if ((this.onEndgetListOfStrings1Delegate == null)) {
                this.onEndgetListOfStrings1Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings1);
            }
            if ((this.ongetListOfStrings1CompletedDelegate == null)) {
                this.ongetListOfStrings1CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings1Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings1Delegate, new object[] {
                        SecureID,
                        SID,
                        ListOfItems,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings1Delegate, this.ongetListOfStrings1CompletedDelegate, userState);
        }
        
        public bool getListOfStrings2(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings2(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings2(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings2(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetListOfStrings2(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings2(ref ListOfItems, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string[] ListOfItems = ((string[])(inValues[2]));
            string MySql = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            string UserId = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            return this.BegingetListOfStrings2(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings2(System.IAsyncResult result) {
            string[] ListOfItems = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetListOfStrings2(ref ListOfItems, ref RC, ref RetMsg, result);
            return new object[] {
                    ListOfItems,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings2Completed(object state) {
            if ((this.getListOfStrings2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings2Completed(this, new getListOfStrings2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings2Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings2Async(SecureID, SID, ListOfItems, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings2Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings2Delegate == null)) {
                this.onBegingetListOfStrings2Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings2);
            }
            if ((this.onEndgetListOfStrings2Delegate == null)) {
                this.onEndgetListOfStrings2Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings2);
            }
            if ((this.ongetListOfStrings2CompletedDelegate == null)) {
                this.ongetListOfStrings2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings2Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings2Delegate, new object[] {
                        SecureID,
                        SID,
                        ListOfItems,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings2Delegate, this.ongetListOfStrings2CompletedDelegate, userState);
        }
        
        public bool getListOfStrings3(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings3(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings3(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings3(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetListOfStrings3(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings3(ref ListOfItems, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings3(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string[] ListOfItems = ((string[])(inValues[2]));
            string MySql = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            string UserId = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            return this.BegingetListOfStrings3(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings3(System.IAsyncResult result) {
            string[] ListOfItems = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetListOfStrings3(ref ListOfItems, ref RC, ref RetMsg, result);
            return new object[] {
                    ListOfItems,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings3Completed(object state) {
            if ((this.getListOfStrings3Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings3Completed(this, new getListOfStrings3CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings3Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings3Async(SecureID, SID, ListOfItems, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings3Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings3Delegate == null)) {
                this.onBegingetListOfStrings3Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings3);
            }
            if ((this.onEndgetListOfStrings3Delegate == null)) {
                this.onEndgetListOfStrings3Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings3);
            }
            if ((this.ongetListOfStrings3CompletedDelegate == null)) {
                this.ongetListOfStrings3CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings3Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings3Delegate, new object[] {
                        SecureID,
                        SID,
                        ListOfItems,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings3Delegate, this.ongetListOfStrings3CompletedDelegate, userState);
        }
        
        public bool getListOfStrings4(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID) {
            return base.Channel.getListOfStrings4(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetListOfStrings4(string SecureID, string SID, ref string[] ListOfItems, string MySql, ref bool RC, ref string RetMsg, string UserId, string SessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetListOfStrings4(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndgetListOfStrings4(ref string[] ListOfItems, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            return base.Channel.EndgetListOfStrings4(ref ListOfItems, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBegingetListOfStrings4(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string SID = ((string)(inValues[1]));
            string[] ListOfItems = ((string[])(inValues[2]));
            string MySql = ((string)(inValues[3]));
            bool RC = ((bool)(inValues[4]));
            string RetMsg = ((string)(inValues[5]));
            string UserId = ((string)(inValues[6]));
            string SessionID = ((string)(inValues[7]));
            return this.BegingetListOfStrings4(SecureID, SID, ref ListOfItems, MySql, ref RC, ref RetMsg, UserId, SessionID, callback, asyncState);
        }
        
        private object[] OnEndgetListOfStrings4(System.IAsyncResult result) {
            string[] ListOfItems = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            bool retVal = this.EndgetListOfStrings4(ref ListOfItems, ref RC, ref RetMsg, result);
            return new object[] {
                    ListOfItems,
                    RC,
                    RetMsg,
                    retVal};
        }
        
        private void OngetListOfStrings4Completed(object state) {
            if ((this.getListOfStrings4Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getListOfStrings4Completed(this, new getListOfStrings4CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getListOfStrings4Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID) {
            this.getListOfStrings4Async(SecureID, SID, ListOfItems, MySql, RC, RetMsg, UserId, SessionID, null);
        }
        
        public void getListOfStrings4Async(string SecureID, string SID, string[] ListOfItems, string MySql, bool RC, string RetMsg, string UserId, string SessionID, object userState) {
            if ((this.onBegingetListOfStrings4Delegate == null)) {
                this.onBegingetListOfStrings4Delegate = new BeginOperationDelegate(this.OnBegingetListOfStrings4);
            }
            if ((this.onEndgetListOfStrings4Delegate == null)) {
                this.onEndgetListOfStrings4Delegate = new EndOperationDelegate(this.OnEndgetListOfStrings4);
            }
            if ((this.ongetListOfStrings4CompletedDelegate == null)) {
                this.ongetListOfStrings4CompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetListOfStrings4Completed);
            }
            base.InvokeAsync(this.onBegingetListOfStrings4Delegate, new object[] {
                        SecureID,
                        SID,
                        ListOfItems,
                        MySql,
                        RC,
                        RetMsg,
                        UserId,
                        SessionID}, this.onEndgetListOfStrings4Delegate, this.ongetListOfStrings4CompletedDelegate, userState);
        }
        
        public int iCount(string SecureID, string S) {
            return base.Channel.iCount(SecureID, S);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginiCount(string SecureID, string S, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginiCount(SecureID, S, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public int EndiCount(System.IAsyncResult result) {
            return base.Channel.EndiCount(result);
        }
        
        private System.IAsyncResult OnBeginiCount(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string S = ((string)(inValues[1]));
            return this.BeginiCount(SecureID, S, callback, asyncState);
        }
        
        private object[] OnEndiCount(System.IAsyncResult result) {
            int retVal = this.EndiCount(result);
            return new object[] {
                    retVal};
        }
        
        private void OniCountCompleted(object state) {
            if ((this.iCountCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.iCountCompleted(this, new iCountCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void iCountAsync(string SecureID, string S) {
            this.iCountAsync(SecureID, S, null);
        }
        
        public void iCountAsync(string SecureID, string S, object userState) {
            if ((this.onBeginiCountDelegate == null)) {
                this.onBeginiCountDelegate = new BeginOperationDelegate(this.OnBeginiCount);
            }
            if ((this.onEndiCountDelegate == null)) {
                this.onEndiCountDelegate = new EndOperationDelegate(this.OnEndiCount);
            }
            if ((this.oniCountCompletedDelegate == null)) {
                this.oniCountCompletedDelegate = new System.Threading.SendOrPostCallback(this.OniCountCompleted);
            }
            base.InvokeAsync(this.onBeginiCountDelegate, new object[] {
                        SecureID,
                        S}, this.onEndiCountDelegate, this.oniCountCompletedDelegate, userState);
        }
        
        public void GetLogPath(ref string tPath) {
            base.Channel.GetLogPath(ref tPath);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginGetLogPath(ref string tPath, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLogPath(ref tPath, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndGetLogPath(ref string tPath, System.IAsyncResult result) {
            base.Channel.EndGetLogPath(ref tPath, result);
        }
        
        private System.IAsyncResult OnBeginGetLogPath(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tPath = ((string)(inValues[0]));
            return this.BeginGetLogPath(ref tPath, callback, asyncState);
        }
        
        private object[] OnEndGetLogPath(System.IAsyncResult result) {
            string tPath = this.GetDefaultValueForInitialization<string>();
            this.EndGetLogPath(ref tPath, result);
            return new object[] {
                    tPath};
        }
        
        private void OnGetLogPathCompleted(object state) {
            if ((this.GetLogPathCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLogPathCompleted(this, new GetLogPathCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLogPathAsync(string tPath) {
            this.GetLogPathAsync(tPath, null);
        }
        
        public void GetLogPathAsync(string tPath, object userState) {
            if ((this.onBeginGetLogPathDelegate == null)) {
                this.onBeginGetLogPathDelegate = new BeginOperationDelegate(this.OnBeginGetLogPath);
            }
            if ((this.onEndGetLogPathDelegate == null)) {
                this.onEndGetLogPathDelegate = new EndOperationDelegate(this.OnEndGetLogPath);
            }
            if ((this.onGetLogPathCompletedDelegate == null)) {
                this.onGetLogPathCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLogPathCompleted);
            }
            base.InvokeAsync(this.onBeginGetLogPathDelegate, new object[] {
                        tPath}, this.onEndGetLogPathDelegate, this.onGetLogPathCompletedDelegate, userState);
        }
        
        public string ActiveSessionGetVal(string SecureID, ref System.Guid SessionGuid, ref string ParmName) {
            return base.Channel.ActiveSessionGetVal(SecureID, ref SessionGuid, ref ParmName);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginActiveSessionGetVal(string SecureID, ref System.Guid SessionGuid, ref string ParmName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActiveSessionGetVal(SecureID, ref SessionGuid, ref ParmName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public string EndActiveSessionGetVal(ref System.Guid SessionGuid, ref string ParmName, System.IAsyncResult result) {
            return base.Channel.EndActiveSessionGetVal(ref SessionGuid, ref ParmName, result);
        }
        
        private System.IAsyncResult OnBeginActiveSessionGetVal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            System.Guid SessionGuid = ((System.Guid)(inValues[1]));
            string ParmName = ((string)(inValues[2]));
            return this.BeginActiveSessionGetVal(SecureID, ref SessionGuid, ref ParmName, callback, asyncState);
        }
        
        private object[] OnEndActiveSessionGetVal(System.IAsyncResult result) {
            System.Guid SessionGuid = this.GetDefaultValueForInitialization<System.Guid>();
            string ParmName = this.GetDefaultValueForInitialization<string>();
            string retVal = this.EndActiveSessionGetVal(ref SessionGuid, ref ParmName, result);
            return new object[] {
                    SessionGuid,
                    ParmName,
                    retVal};
        }
        
        private void OnActiveSessionGetValCompleted(object state) {
            if ((this.ActiveSessionGetValCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActiveSessionGetValCompleted(this, new ActiveSessionGetValCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActiveSessionGetValAsync(string SecureID, System.Guid SessionGuid, string ParmName) {
            this.ActiveSessionGetValAsync(SecureID, SessionGuid, ParmName, null);
        }
        
        public void ActiveSessionGetValAsync(string SecureID, System.Guid SessionGuid, string ParmName, object userState) {
            if ((this.onBeginActiveSessionGetValDelegate == null)) {
                this.onBeginActiveSessionGetValDelegate = new BeginOperationDelegate(this.OnBeginActiveSessionGetVal);
            }
            if ((this.onEndActiveSessionGetValDelegate == null)) {
                this.onEndActiveSessionGetValDelegate = new EndOperationDelegate(this.OnEndActiveSessionGetVal);
            }
            if ((this.onActiveSessionGetValCompletedDelegate == null)) {
                this.onActiveSessionGetValCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActiveSessionGetValCompleted);
            }
            base.InvokeAsync(this.onBeginActiveSessionGetValDelegate, new object[] {
                        SecureID,
                        SessionGuid,
                        ParmName}, this.onEndActiveSessionGetValDelegate, this.onActiveSessionGetValCompletedDelegate, userState);
        }
        
        public bool ActiveSession(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue) {
            return base.Channel.ActiveSession(SecureID, SessionGuid, ParmName, ParmValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginActiveSession(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginActiveSession(SecureID, SessionGuid, ParmName, ParmValue, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public bool EndActiveSession(System.IAsyncResult result) {
            return base.Channel.EndActiveSession(result);
        }
        
        private System.IAsyncResult OnBeginActiveSession(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            System.Guid SessionGuid = ((System.Guid)(inValues[1]));
            string ParmName = ((string)(inValues[2]));
            string ParmValue = ((string)(inValues[3]));
            return this.BeginActiveSession(SecureID, SessionGuid, ParmName, ParmValue, callback, asyncState);
        }
        
        private object[] OnEndActiveSession(System.IAsyncResult result) {
            bool retVal = this.EndActiveSession(result);
            return new object[] {
                    retVal};
        }
        
        private void OnActiveSessionCompleted(object state) {
            if ((this.ActiveSessionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ActiveSessionCompleted(this, new ActiveSessionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ActiveSessionAsync(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue) {
            this.ActiveSessionAsync(SecureID, SessionGuid, ParmName, ParmValue, null);
        }
        
        public void ActiveSessionAsync(string SecureID, System.Guid SessionGuid, string ParmName, string ParmValue, object userState) {
            if ((this.onBeginActiveSessionDelegate == null)) {
                this.onBeginActiveSessionDelegate = new BeginOperationDelegate(this.OnBeginActiveSession);
            }
            if ((this.onEndActiveSessionDelegate == null)) {
                this.onEndActiveSessionDelegate = new EndOperationDelegate(this.OnEndActiveSession);
            }
            if ((this.onActiveSessionCompletedDelegate == null)) {
                this.onActiveSessionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnActiveSessionCompleted);
            }
            base.InvokeAsync(this.onBeginActiveSessionDelegate, new object[] {
                        SecureID,
                        SessionGuid,
                        ParmName,
                        ParmValue}, this.onEndActiveSessionDelegate, this.onActiveSessionCompletedDelegate, userState);
        }
        
        public void setSecureLoginParms(string SecureID, string sCompanyID, string sRepoID, ref bool RC) {
            base.Channel.setSecureLoginParms(SecureID, sCompanyID, sRepoID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetSecureLoginParms(string SecureID, string sCompanyID, string sRepoID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSecureLoginParms(SecureID, sCompanyID, sRepoID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetSecureLoginParms(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndsetSecureLoginParms(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginsetSecureLoginParms(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string sCompanyID = ((string)(inValues[1]));
            string sRepoID = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            return this.BeginsetSecureLoginParms(SecureID, sCompanyID, sRepoID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndsetSecureLoginParms(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndsetSecureLoginParms(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnsetSecureLoginParmsCompleted(object state) {
            if ((this.setSecureLoginParmsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSecureLoginParmsCompleted(this, new setSecureLoginParmsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSecureLoginParmsAsync(string SecureID, string sCompanyID, string sRepoID, bool RC) {
            this.setSecureLoginParmsAsync(SecureID, sCompanyID, sRepoID, RC, null);
        }
        
        public void setSecureLoginParmsAsync(string SecureID, string sCompanyID, string sRepoID, bool RC, object userState) {
            if ((this.onBeginsetSecureLoginParmsDelegate == null)) {
                this.onBeginsetSecureLoginParmsDelegate = new BeginOperationDelegate(this.OnBeginsetSecureLoginParms);
            }
            if ((this.onEndsetSecureLoginParmsDelegate == null)) {
                this.onEndsetSecureLoginParmsDelegate = new EndOperationDelegate(this.OnEndsetSecureLoginParms);
            }
            if ((this.onsetSecureLoginParmsCompletedDelegate == null)) {
                this.onsetSecureLoginParmsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSecureLoginParmsCompleted);
            }
            base.InvokeAsync(this.onBeginsetSecureLoginParmsDelegate, new object[] {
                        SecureID,
                        sCompanyID,
                        sRepoID,
                        RC}, this.onEndsetSecureLoginParmsDelegate, this.onsetSecureLoginParmsCompletedDelegate, userState);
        }
        
        public void PopulateSecureLoginCB_V2(string SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg) {
            base.Channel.PopulateSecureLoginCB_V2(SecureID, ref AllRepos, CompanyID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateSecureLoginCB_V2(string SecureID, ref string AllRepos, string CompanyID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateSecureLoginCB_V2(SecureID, ref AllRepos, CompanyID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPopulateSecureLoginCB_V2(ref string AllRepos, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndPopulateSecureLoginCB_V2(ref AllRepos, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginPopulateSecureLoginCB_V2(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string AllRepos = ((string)(inValues[1]));
            string CompanyID = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BeginPopulateSecureLoginCB_V2(SecureID, ref AllRepos, CompanyID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndPopulateSecureLoginCB_V2(System.IAsyncResult result) {
            string AllRepos = this.GetDefaultValueForInitialization<string>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndPopulateSecureLoginCB_V2(ref AllRepos, ref RC, ref RetMsg, result);
            return new object[] {
                    AllRepos,
                    RC,
                    RetMsg};
        }
        
        private void OnPopulateSecureLoginCB_V2Completed(object state) {
            if ((this.PopulateSecureLoginCB_V2Completed != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateSecureLoginCB_V2Completed(this, new PopulateSecureLoginCB_V2CompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateSecureLoginCB_V2Async(string SecureID, string AllRepos, string CompanyID, bool RC, string RetMsg) {
            this.PopulateSecureLoginCB_V2Async(SecureID, AllRepos, CompanyID, RC, RetMsg, null);
        }
        
        public void PopulateSecureLoginCB_V2Async(string SecureID, string AllRepos, string CompanyID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginPopulateSecureLoginCB_V2Delegate == null)) {
                this.onBeginPopulateSecureLoginCB_V2Delegate = new BeginOperationDelegate(this.OnBeginPopulateSecureLoginCB_V2);
            }
            if ((this.onEndPopulateSecureLoginCB_V2Delegate == null)) {
                this.onEndPopulateSecureLoginCB_V2Delegate = new EndOperationDelegate(this.OnEndPopulateSecureLoginCB_V2);
            }
            if ((this.onPopulateSecureLoginCB_V2CompletedDelegate == null)) {
                this.onPopulateSecureLoginCB_V2CompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateSecureLoginCB_V2Completed);
            }
            base.InvokeAsync(this.onBeginPopulateSecureLoginCB_V2Delegate, new object[] {
                        SecureID,
                        AllRepos,
                        CompanyID,
                        RC,
                        RetMsg}, this.onEndPopulateSecureLoginCB_V2Delegate, this.onPopulateSecureLoginCB_V2CompletedDelegate, userState);
        }
        
        public void PopulateSecureLoginCB(string SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg) {
            base.Channel.PopulateSecureLoginCB(SecureID, ref CB, CompanyID, ref RC, ref RetMsg);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginPopulateSecureLoginCB(string SecureID, ref string[] CB, string CompanyID, ref bool RC, ref string RetMsg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPopulateSecureLoginCB(SecureID, ref CB, CompanyID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndPopulateSecureLoginCB(ref string[] CB, ref bool RC, ref string RetMsg, System.IAsyncResult result) {
            base.Channel.EndPopulateSecureLoginCB(ref CB, ref RC, ref RetMsg, result);
        }
        
        private System.IAsyncResult OnBeginPopulateSecureLoginCB(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string[] CB = ((string[])(inValues[1]));
            string CompanyID = ((string)(inValues[2]));
            bool RC = ((bool)(inValues[3]));
            string RetMsg = ((string)(inValues[4]));
            return this.BeginPopulateSecureLoginCB(SecureID, ref CB, CompanyID, ref RC, ref RetMsg, callback, asyncState);
        }
        
        private object[] OnEndPopulateSecureLoginCB(System.IAsyncResult result) {
            string[] CB = this.GetDefaultValueForInitialization<string[]>();
            bool RC = this.GetDefaultValueForInitialization<bool>();
            string RetMsg = this.GetDefaultValueForInitialization<string>();
            this.EndPopulateSecureLoginCB(ref CB, ref RC, ref RetMsg, result);
            return new object[] {
                    CB,
                    RC,
                    RetMsg};
        }
        
        private void OnPopulateSecureLoginCBCompleted(object state) {
            if ((this.PopulateSecureLoginCBCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PopulateSecureLoginCBCompleted(this, new PopulateSecureLoginCBCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PopulateSecureLoginCBAsync(string SecureID, string[] CB, string CompanyID, bool RC, string RetMsg) {
            this.PopulateSecureLoginCBAsync(SecureID, CB, CompanyID, RC, RetMsg, null);
        }
        
        public void PopulateSecureLoginCBAsync(string SecureID, string[] CB, string CompanyID, bool RC, string RetMsg, object userState) {
            if ((this.onBeginPopulateSecureLoginCBDelegate == null)) {
                this.onBeginPopulateSecureLoginCBDelegate = new BeginOperationDelegate(this.OnBeginPopulateSecureLoginCB);
            }
            if ((this.onEndPopulateSecureLoginCBDelegate == null)) {
                this.onEndPopulateSecureLoginCBDelegate = new EndOperationDelegate(this.OnEndPopulateSecureLoginCB);
            }
            if ((this.onPopulateSecureLoginCBCompletedDelegate == null)) {
                this.onPopulateSecureLoginCBCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPopulateSecureLoginCBCompleted);
            }
            base.InvokeAsync(this.onBeginPopulateSecureLoginCBDelegate, new object[] {
                        SecureID,
                        CB,
                        CompanyID,
                        RC,
                        RetMsg}, this.onEndPopulateSecureLoginCBDelegate, this.onPopulateSecureLoginCBCompletedDelegate, userState);
        }
        
        public object getLoginPW(string SecureID) {
            return base.Channel.getLoginPW(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetLoginPW(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetLoginPW(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetLoginPW(System.IAsyncResult result) {
            return base.Channel.EndgetLoginPW(result);
        }
        
        private System.IAsyncResult OnBegingetLoginPW(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetLoginPW(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetLoginPW(System.IAsyncResult result) {
            object retVal = this.EndgetLoginPW(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetLoginPWCompleted(object state) {
            if ((this.getLoginPWCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getLoginPWCompleted(this, new getLoginPWCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getLoginPWAsync(string SecureID) {
            this.getLoginPWAsync(SecureID, null);
        }
        
        public void getLoginPWAsync(string SecureID, object userState) {
            if ((this.onBegingetLoginPWDelegate == null)) {
                this.onBegingetLoginPWDelegate = new BeginOperationDelegate(this.OnBegingetLoginPW);
            }
            if ((this.onEndgetLoginPWDelegate == null)) {
                this.onEndgetLoginPWDelegate = new EndOperationDelegate(this.OnEndgetLoginPW);
            }
            if ((this.ongetLoginPWCompletedDelegate == null)) {
                this.ongetLoginPWCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetLoginPWCompleted);
            }
            base.InvokeAsync(this.onBegingetLoginPWDelegate, new object[] {
                        SecureID}, this.onEndgetLoginPWDelegate, this.ongetLoginPWCompletedDelegate, userState);
        }
        
        public void setLoginPW(string SecureID, string RepoID) {
            base.Channel.setLoginPW(SecureID, RepoID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetLoginPW(string SecureID, string RepoID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetLoginPW(SecureID, RepoID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetLoginPW(System.IAsyncResult result) {
            base.Channel.EndsetLoginPW(result);
        }
        
        private System.IAsyncResult OnBeginsetLoginPW(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string RepoID = ((string)(inValues[1]));
            return this.BeginsetLoginPW(SecureID, RepoID, callback, asyncState);
        }
        
        private object[] OnEndsetLoginPW(System.IAsyncResult result) {
            this.EndsetLoginPW(result);
            return null;
        }
        
        private void OnsetLoginPWCompleted(object state) {
            if ((this.setLoginPWCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setLoginPWCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setLoginPWAsync(string SecureID, string RepoID) {
            this.setLoginPWAsync(SecureID, RepoID, null);
        }
        
        public void setLoginPWAsync(string SecureID, string RepoID, object userState) {
            if ((this.onBeginsetLoginPWDelegate == null)) {
                this.onBeginsetLoginPWDelegate = new BeginOperationDelegate(this.OnBeginsetLoginPW);
            }
            if ((this.onEndsetLoginPWDelegate == null)) {
                this.onEndsetLoginPWDelegate = new EndOperationDelegate(this.OnEndsetLoginPW);
            }
            if ((this.onsetLoginPWCompletedDelegate == null)) {
                this.onsetLoginPWCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetLoginPWCompleted);
            }
            base.InvokeAsync(this.onBeginsetLoginPWDelegate, new object[] {
                        SecureID,
                        RepoID}, this.onEndsetLoginPWDelegate, this.onsetLoginPWCompletedDelegate, userState);
        }
        
        public object getSessionEncCs(string SecureID) {
            return base.Channel.getSessionEncCs(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSessionEncCs(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSessionEncCs(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetSessionEncCs(System.IAsyncResult result) {
            return base.Channel.EndgetSessionEncCs(result);
        }
        
        private System.IAsyncResult OnBegingetSessionEncCs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetSessionEncCs(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetSessionEncCs(System.IAsyncResult result) {
            object retVal = this.EndgetSessionEncCs(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSessionEncCsCompleted(object state) {
            if ((this.getSessionEncCsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSessionEncCsCompleted(this, new getSessionEncCsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSessionEncCsAsync(string SecureID) {
            this.getSessionEncCsAsync(SecureID, null);
        }
        
        public void getSessionEncCsAsync(string SecureID, object userState) {
            if ((this.onBegingetSessionEncCsDelegate == null)) {
                this.onBegingetSessionEncCsDelegate = new BeginOperationDelegate(this.OnBegingetSessionEncCs);
            }
            if ((this.onEndgetSessionEncCsDelegate == null)) {
                this.onEndgetSessionEncCsDelegate = new EndOperationDelegate(this.OnEndgetSessionEncCs);
            }
            if ((this.ongetSessionEncCsCompletedDelegate == null)) {
                this.ongetSessionEncCsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSessionEncCsCompleted);
            }
            base.InvokeAsync(this.onBegingetSessionEncCsDelegate, new object[] {
                        SecureID}, this.onEndgetSessionEncCsDelegate, this.ongetSessionEncCsCompletedDelegate, userState);
        }
        
        public void setSessionEncCs(string SecureID, string MySessionID) {
            base.Channel.setSessionEncCs(SecureID, MySessionID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetSessionEncCs(string SecureID, string MySessionID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSessionEncCs(SecureID, MySessionID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetSessionEncCs(System.IAsyncResult result) {
            base.Channel.EndsetSessionEncCs(result);
        }
        
        private System.IAsyncResult OnBeginsetSessionEncCs(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string MySessionID = ((string)(inValues[1]));
            return this.BeginsetSessionEncCs(SecureID, MySessionID, callback, asyncState);
        }
        
        private object[] OnEndsetSessionEncCs(System.IAsyncResult result) {
            this.EndsetSessionEncCs(result);
            return null;
        }
        
        private void OnsetSessionEncCsCompleted(object state) {
            if ((this.setSessionEncCsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSessionEncCsCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSessionEncCsAsync(string SecureID, string MySessionID) {
            this.setSessionEncCsAsync(SecureID, MySessionID, null);
        }
        
        public void setSessionEncCsAsync(string SecureID, string MySessionID, object userState) {
            if ((this.onBeginsetSessionEncCsDelegate == null)) {
                this.onBeginsetSessionEncCsDelegate = new BeginOperationDelegate(this.OnBeginsetSessionEncCs);
            }
            if ((this.onEndsetSessionEncCsDelegate == null)) {
                this.onEndsetSessionEncCsDelegate = new EndOperationDelegate(this.OnEndsetSessionEncCs);
            }
            if ((this.onsetSessionEncCsCompletedDelegate == null)) {
                this.onsetSessionEncCsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSessionEncCsCompleted);
            }
            base.InvokeAsync(this.onBeginsetSessionEncCsDelegate, new object[] {
                        SecureID,
                        MySessionID}, this.onEndsetSessionEncCsDelegate, this.onsetSessionEncCsCompletedDelegate, userState);
        }
        
        public void setSessionRepoID(string SecureID, string RepoID) {
            base.Channel.setSessionRepoID(SecureID, RepoID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetSessionRepoID(string SecureID, string RepoID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSessionRepoID(SecureID, RepoID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetSessionRepoID(System.IAsyncResult result) {
            base.Channel.EndsetSessionRepoID(result);
        }
        
        private System.IAsyncResult OnBeginsetSessionRepoID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string RepoID = ((string)(inValues[1]));
            return this.BeginsetSessionRepoID(SecureID, RepoID, callback, asyncState);
        }
        
        private object[] OnEndsetSessionRepoID(System.IAsyncResult result) {
            this.EndsetSessionRepoID(result);
            return null;
        }
        
        private void OnsetSessionRepoIDCompleted(object state) {
            if ((this.setSessionRepoIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSessionRepoIDCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSessionRepoIDAsync(string SecureID, string RepoID) {
            this.setSessionRepoIDAsync(SecureID, RepoID, null);
        }
        
        public void setSessionRepoIDAsync(string SecureID, string RepoID, object userState) {
            if ((this.onBeginsetSessionRepoIDDelegate == null)) {
                this.onBeginsetSessionRepoIDDelegate = new BeginOperationDelegate(this.OnBeginsetSessionRepoID);
            }
            if ((this.onEndsetSessionRepoIDDelegate == null)) {
                this.onEndsetSessionRepoIDDelegate = new EndOperationDelegate(this.OnEndsetSessionRepoID);
            }
            if ((this.onsetSessionRepoIDCompletedDelegate == null)) {
                this.onsetSessionRepoIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSessionRepoIDCompleted);
            }
            base.InvokeAsync(this.onBeginsetSessionRepoIDDelegate, new object[] {
                        SecureID,
                        RepoID}, this.onEndsetSessionRepoIDDelegate, this.onsetSessionRepoIDCompletedDelegate, userState);
        }
        
        public object getSessionRepoID(string SecureID) {
            return base.Channel.getSessionRepoID(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSessionRepoID(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSessionRepoID(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetSessionRepoID(System.IAsyncResult result) {
            return base.Channel.EndgetSessionRepoID(result);
        }
        
        private System.IAsyncResult OnBegingetSessionRepoID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetSessionRepoID(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetSessionRepoID(System.IAsyncResult result) {
            object retVal = this.EndgetSessionRepoID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSessionRepoIDCompleted(object state) {
            if ((this.getSessionRepoIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSessionRepoIDCompleted(this, new getSessionRepoIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSessionRepoIDAsync(string SecureID) {
            this.getSessionRepoIDAsync(SecureID, null);
        }
        
        public void getSessionRepoIDAsync(string SecureID, object userState) {
            if ((this.onBegingetSessionRepoIDDelegate == null)) {
                this.onBegingetSessionRepoIDDelegate = new BeginOperationDelegate(this.OnBegingetSessionRepoID);
            }
            if ((this.onEndgetSessionRepoIDDelegate == null)) {
                this.onEndgetSessionRepoIDDelegate = new EndOperationDelegate(this.OnEndgetSessionRepoID);
            }
            if ((this.ongetSessionRepoIDCompletedDelegate == null)) {
                this.ongetSessionRepoIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSessionRepoIDCompleted);
            }
            base.InvokeAsync(this.onBegingetSessionRepoIDDelegate, new object[] {
                        SecureID}, this.onEndgetSessionRepoIDDelegate, this.ongetSessionRepoIDCompletedDelegate, userState);
        }
        
        public void setSessionCompanyID(string SecureID, string CompanyID, ref bool RC) {
            base.Channel.setSessionCompanyID(SecureID, CompanyID, ref RC);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BeginsetSessionCompanyID(string SecureID, string CompanyID, ref bool RC, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginsetSessionCompanyID(SecureID, CompanyID, ref RC, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public void EndsetSessionCompanyID(ref bool RC, System.IAsyncResult result) {
            base.Channel.EndsetSessionCompanyID(ref RC, result);
        }
        
        private System.IAsyncResult OnBeginsetSessionCompanyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            string CompanyID = ((string)(inValues[1]));
            bool RC = ((bool)(inValues[2]));
            return this.BeginsetSessionCompanyID(SecureID, CompanyID, ref RC, callback, asyncState);
        }
        
        private object[] OnEndsetSessionCompanyID(System.IAsyncResult result) {
            bool RC = this.GetDefaultValueForInitialization<bool>();
            this.EndsetSessionCompanyID(ref RC, result);
            return new object[] {
                    RC};
        }
        
        private void OnsetSessionCompanyIDCompleted(object state) {
            if ((this.setSessionCompanyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.setSessionCompanyIDCompleted(this, new setSessionCompanyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void setSessionCompanyIDAsync(string SecureID, string CompanyID, bool RC) {
            this.setSessionCompanyIDAsync(SecureID, CompanyID, RC, null);
        }
        
        public void setSessionCompanyIDAsync(string SecureID, string CompanyID, bool RC, object userState) {
            if ((this.onBeginsetSessionCompanyIDDelegate == null)) {
                this.onBeginsetSessionCompanyIDDelegate = new BeginOperationDelegate(this.OnBeginsetSessionCompanyID);
            }
            if ((this.onEndsetSessionCompanyIDDelegate == null)) {
                this.onEndsetSessionCompanyIDDelegate = new EndOperationDelegate(this.OnEndsetSessionCompanyID);
            }
            if ((this.onsetSessionCompanyIDCompletedDelegate == null)) {
                this.onsetSessionCompanyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnsetSessionCompanyIDCompleted);
            }
            base.InvokeAsync(this.onBeginsetSessionCompanyIDDelegate, new object[] {
                        SecureID,
                        CompanyID,
                        RC}, this.onEndsetSessionCompanyIDDelegate, this.onsetSessionCompanyIDCompletedDelegate, userState);
        }
        
        public object getSessionCompanyID(string SecureID) {
            return base.Channel.getSessionCompanyID(SecureID);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public System.IAsyncResult BegingetSessionCompanyID(string SecureID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetSessionCompanyID(SecureID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        public object EndgetSessionCompanyID(System.IAsyncResult result) {
            return base.Channel.EndgetSessionCompanyID(result);
        }
        
        private System.IAsyncResult OnBegingetSessionCompanyID(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string SecureID = ((string)(inValues[0]));
            return this.BegingetSessionCompanyID(SecureID, callback, asyncState);
        }
        
        private object[] OnEndgetSessionCompanyID(System.IAsyncResult result) {
            object retVal = this.EndgetSessionCompanyID(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetSessionCompanyIDCompleted(object state) {
            if ((this.getSessionCompanyIDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getSessionCompanyIDCompleted(this, new getSessionCompanyIDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getSessionCompanyIDAsync(string SecureID) {
            this.getSessionCompanyIDAsync(SecureID, null);
        }
        
        public void getSessionCompanyIDAsync(string SecureID, object userState) {
            if ((this.onBegingetSessionCompanyIDDelegate == null)) {
                this.onBegingetSessionCompanyIDDelegate = new BeginOperationDelegate(this.OnBegingetSessionCompanyID);
            }
            if ((this.onEndgetSessionCompanyIDDelegate == null)) {
                this.onEndgetSessionCompanyIDDelegate = new EndOperationDelegate(this.OnEndgetSessionCompanyID);
            }
            if ((this.ongetSessionCompanyIDCompletedDelegate == null)) {
                this.ongetSessionCompanyIDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetSessionCompanyIDCompleted);
            }
            base.InvokeAsync(this.onBegingetSessionCompanyIDDelegate, new object[] {
                        SecureID}, this.onEndgetSessionCompanyIDDelegate, this.ongetSessionCompanyIDCompletedDelegate, userState);
        }
    }
}
