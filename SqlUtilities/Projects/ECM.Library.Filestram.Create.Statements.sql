USE [master]
GO

/****** Object:  Database [ECM.FS.HP]    Script Date: 05/18/2011 16:22:26 ******/
CREATE DATABASE [ECM.FS.HP] ON  PRIMARY 
( NAME = N'ECM.FS', 
	FILENAME = N'G:\SqlServerDataBases\ECM.FS.mdf' , SIZE = 92087296KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10%)
	FILEGROUP FileStreamGroup1 CONTAINS FILESTREAM( NAME = Arch3, FILENAME = N'G:\SqlServerFiles\filestream1')
 LOG ON  
( NAME = N'ECM.FS_log', FILENAME = N'G:\SqlServerDataBases\ECM.FS_log.LDF' , SIZE = 388544KB , MAXSIZE = UNLIMITED, FILEGROWTH = 10%)
GO

ALTER DATABASE [ECM.FS.HP] SET COMPATIBILITY_LEVEL = 90
GO

IF (1 = FULLTEXTSERVICEPROPERTY('IsFullTextInstalled'))
begin
EXEC [ECM.FS.HP].[dbo].[sp_fulltext_database] @action = 'enable'
end
GO

ALTER DATABASE [ECM.FS.HP] SET ANSI_NULL_DEFAULT OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET ANSI_NULLS OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET ANSI_PADDING OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET ANSI_WARNINGS OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET ARITHABORT OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET AUTO_CLOSE OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET AUTO_CREATE_STATISTICS ON 
GO

ALTER DATABASE [ECM.FS.HP] SET AUTO_SHRINK OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET AUTO_UPDATE_STATISTICS ON 
GO

ALTER DATABASE [ECM.FS.HP] SET CURSOR_CLOSE_ON_COMMIT OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET CURSOR_DEFAULT  GLOBAL 
GO

ALTER DATABASE [ECM.FS.HP] SET CONCAT_NULL_YIELDS_NULL OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET NUMERIC_ROUNDABORT OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET QUOTED_IDENTIFIER OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET RECURSIVE_TRIGGERS OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET  DISABLE_BROKER 
GO

ALTER DATABASE [ECM.FS.HP] SET AUTO_UPDATE_STATISTICS_ASYNC OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET DATE_CORRELATION_OPTIMIZATION OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET TRUSTWORTHY OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET ALLOW_SNAPSHOT_ISOLATION OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET PARAMETERIZATION SIMPLE 
GO

ALTER DATABASE [ECM.FS.HP] SET READ_COMMITTED_SNAPSHOT OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET HONOR_BROKER_PRIORITY OFF 
GO

ALTER DATABASE [ECM.FS.HP] SET  READ_WRITE 
GO

ALTER DATABASE [ECM.FS.HP] SET RECOVERY SIMPLE 
GO

ALTER DATABASE [ECM.FS.HP] SET  MULTI_USER 
GO

ALTER DATABASE [ECM.FS.HP] SET PAGE_VERIFY CHECKSUM  
GO

ALTER DATABASE [ECM.FS.HP] SET DB_CHAINING OFF 
GO



ALTER DATABASE [ECM.Library.FS]
ADD FILEGROUP ECM_fg_filestream CONTAINS FILESTREAM
GO
ALTER DATABASE [ECM.Library.FS]
ADD FILE
(
    NAME= 'fs_filestream',
    FILENAME = 'G:\SqlSvrFS'
)
TO FILEGROUP ECM_fg_filestream
GO



USE [ECM.Library.FS]
GO
/****** Object:  Login [##MS_PolicyEventProcessingLogin##]    Script Date: 05/18/2011 16:17:17 ******/
/* For security reasons the login is created disabled and with a random password. */
CREATE LOGIN [##MS_PolicyEventProcessingLogin##] WITH PASSWORD=N'?q8|¡⁄÷!,ÅXÔ‚?ÊQ
RS?€†ŸS˙’r…', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=ON
GO
ALTER LOGIN [##MS_PolicyEventProcessingLogin##] DISABLE
GO
/****** Object:  Login [##MS_PolicyTsqlExecutionLogin##]    Script Date: 05/18/2011 16:17:17 ******/
/* For security reasons the login is created disabled and with a random password. */
CREATE LOGIN [##MS_PolicyTsqlExecutionLogin##] WITH PASSWORD=N'–+&|3lƒª™ÿb–w‰l¨?\´?¨?ª??˚Â?"', DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english], CHECK_EXPIRATION=OFF, CHECK_POLICY=ON
GO
ALTER LOGIN [##MS_PolicyTsqlExecutionLogin##] DISABLE
GO
/****** Object:  Login [DELLT100A\Administrator]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [DELLT100A\Administrator] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
/****** Object:  Login [DELLT100A\wmiller]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [DELLT100A\wmiller] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
/****** Object:  Login [NT AUTHORITY\NETWORK SERVICE]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [NT AUTHORITY\NETWORK SERVICE] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
/****** Object:  Login [NT AUTHORITY\SYSTEM]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [NT AUTHORITY\SYSTEM] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
/****** Object:  Login [NT SERVICE\MSSQLSERVER]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [NT SERVICE\MSSQLSERVER] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
/****** Object:  Login [NT SERVICE\SQLSERVERAGENT]    Script Date: 05/18/2011 16:17:17 ******/
CREATE LOGIN [NT SERVICE\SQLSERVERAGENT] FROM WINDOWS WITH DEFAULT_DATABASE=[master], DEFAULT_LANGUAGE=[us_english]
GO
USE [ECM.FS.HP]
GO
/****** Object:  User [ECMLibrary]    Script Date: 05/18/2011 16:17:12 ******/
CREATE USER [ECMLibrary] FOR LOGIN [BUILTIN\Administrators]
GO
/****** Object:  FullTextCatalog [ftCatalog]    Script Date: 05/18/2011 16:17:17 ******/
CREATE FULLTEXT CATALOG [ftCatalog]WITH ACCENT_SENSITIVITY = OFF
AUTHORIZATION [dbo]
GO
/****** Object:  FullTextCatalog [ftEmailCatalog]    Script Date: 05/18/2011 16:17:17 ******/
CREATE FULLTEXT CATALOG [ftEmailCatalog]WITH ACCENT_SENSITIVITY = OFF
AUTHORIZATION [dbo]
GO
/****** Object:  Table [dbo].[Users]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Users](
	[UserID] [nvarchar](50) NOT NULL,
	[UserName] [nvarchar](50) NOT NULL,
	[EmailAddress] [nvarchar](254) NULL,
	[UserPassword] [nvarchar](254) NULL,
	[Admin] [nchar](1) NULL,
	[isActive] [nchar](1) NULL,
	[UserLoginID] [nvarchar](50) NULL,
	[ClientOnly] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK41] PRIMARY KEY CLUSTERED 
(
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_LoginID] ON [dbo].[Users] 
(
	[UserLoginID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Library]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Library](
	[UserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[isPublic] [nchar](1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK52] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [CI01_Library] ON [dbo].[Library] 
(
	[UserID] ASC,
	[LibraryName] ASC,
	[isPublic] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UI_LibraryName] ON [dbo].[Library] 
(
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Library Name must be unique not just to the user, but across the organization. This allows public access for adding items to the library yet maintining owneraship by the creating user.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'Library'
GO
/****** Object:  Table [dbo].[SubLibrary]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SubLibrary](
	[UserID] [nvarchar](50) NOT NULL,
	[SubUserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[SubLibraryName] [nvarchar](80) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK90] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[LibraryName] ASC,
	[SubUserID] ASC,
	[SubLibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'The Library Name must be unique not just to the user, but across the organization. This allows public access for adding items to the library yet maintining owneraship by the creating user.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'SubLibrary'
GO
/****** Object:  StoredProcedure [dbo].[SubLibrarySelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubLibrarySelProc]
(
    @UserID             nvarchar(50),
    @SubUserID          nvarchar(50),
    @LibraryName        nvarchar(80),
    @SubLibraryName     nvarchar(80))
AS
BEGIN
    SELECT UserID,
           SubUserID,
           LibraryName,
           SubLibraryName
      FROM SubLibrary
     WHERE UserID         = @UserID
       AND SubUserID      = @SubUserID
       AND LibraryName    = @LibraryName
       AND SubLibraryName = @SubLibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SubLibraryInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubLibraryInsProc]
(
    @UserID             nvarchar(50),
    @SubUserID          nvarchar(50),
    @LibraryName        nvarchar(80),
    @SubLibraryName     nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SubLibrary(UserID,
                           SubUserID,
                           LibraryName,
                           SubLibraryName)
    VALUES(@UserID,
           @SubUserID,
           @LibraryName,
           @SubLibraryName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SubLibraryInsProc: Cannot insert because primary key value not found in SubLibrary '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SubLibraryDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubLibraryDelProc]
(
    @UserID             nvarchar(50),
    @SubUserID          nvarchar(50),
    @LibraryName        nvarchar(80),
    @SubLibraryName     nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SubLibrary
     WHERE UserID         = @UserID
       AND SubUserID      = @SubUserID
       AND LibraryName    = @LibraryName
       AND SubLibraryName = @SubLibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SubLibraryDelProc: Cannot delete because foreign keys still exist in SubLibrary '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SubLibrary_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SubLibrary_INS]
   ON [dbo].[SubLibrary]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SubLibrary
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SubLibrary t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.LibraryName = i.LibraryName
     and t.SubUserID = i.SubUserID
     and t.SubLibraryName = i.SubLibraryName
GO
/****** Object:  Table [dbo].[Directory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Directory](
	[UserID] [nvarchar](50) NOT NULL,
	[IncludeSubDirs] [char](1) NULL,
	[FQN] [varchar](254) NOT NULL,
	[DB_ID] [nvarchar](50) NOT NULL,
	[VersionFiles] [char](1) NULL,
	[ckMetaData] [nchar](1) NULL,
	[ckPublic] [nchar](1) NULL,
	[ckDisableDir] [nchar](1) NULL,
	[QuickRefEntry] [char](10) NULL,
	[isSysDefault] [bit] NULL,
	[OcrDirectory] [nchar](1) NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[isServerDirectory] [bit] NULL,
	[isMappedDrive] [bit] NULL,
	[isNetworkDrive] [bit] NULL,
	[RequiresAuthentication] [bit] NULL,
	[AdminDisabled] [bit] NULL,
	[ArchiveSkipBit] [bit] NULL,
	[ListenForChanges] [bit] NULL,
	[ListenDirectory] [bit] NULL,
	[ListenSubDirectory] [bit] NULL,
	[DirGuid] [uniqueidentifier] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[OcrPdf] [nchar](1) NULL,
 CONSTRAINT [PKII2] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SubDir]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SubDir](
	[UserID] [nvarchar](50) NOT NULL,
	[SUBFQN] [nvarchar](254) NOT NULL,
	[FQN] [varchar](254) NOT NULL,
	[ckPublic] [nchar](1) NULL,
	[ckDisableDir] [nchar](1) NULL,
	[OcrDirectory] [nchar](1) NULL,
	[VersionFiles] [nchar](1) NULL,
	[isSysDefault] [bit] NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKI14] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[FQN] ASC,
	[SUBFQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[SubDirUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubDirUpdProc]
(
    @UserID           nvarchar(50),
    @SUBFQN           nvarchar(254),
    @FQN              varchar(254),
    @ckPublic         nchar(1)                 = NULL,
    @ckDisableDir     nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE SubDir
       SET ckPublic          = @ckPublic,
           ckDisableDir      = @ckDisableDir
     WHERE UserID = @UserID
       AND SUBFQN = @SUBFQN
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SubDirUpdProc: Cannot update  in SubDir '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SubDirSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubDirSelProc]
(
    @UserID           nvarchar(50),
    @SUBFQN           nvarchar(254),
    @FQN              varchar(254))
AS
BEGIN
    SELECT UserID,
           SUBFQN,
           FQN,
           ckPublic,
           ckDisableDir
      FROM SubDir
     WHERE UserID = @UserID
       AND SUBFQN = @SUBFQN
       AND FQN    = @FQN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SubDirInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubDirInsProc]
(
    @UserID           nvarchar(50),
    @SUBFQN           nvarchar(254),
    @FQN              varchar(254),
    @ckPublic         nchar(1)                 = NULL,
    @ckDisableDir     nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SubDir(UserID,
                       SUBFQN,
                       FQN,
                       ckPublic,
                       ckDisableDir)
    VALUES(@UserID,
           @SUBFQN,
           @FQN,
           @ckPublic,
           @ckDisableDir)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SubDirInsProc: Cannot insert because primary key value not found in SubDir '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Table [dbo].[DataSourceCheckOut]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataSourceCheckOut](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[CheckedOutByUserID] [nvarchar](50) NOT NULL,
	[isReadOnly] [bit] NULL,
	[isForUpdate] [bit] NULL,
	[checkOutDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK82] PRIMARY KEY NONCLUSTERED 
(
	[CheckedOutByUserID] ASC,
	[SourceGuid] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[DataSourceCheckOutInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceCheckOutInsProc]
(
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50),
    @CheckedOutByUserID        nvarchar(50),
    @isReadOnly                bit                     = NULL,
    @isForUpdate               bit                     = NULL,
    @checkOutDate              datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSourceCheckOut(SourceGuid,
                                   DataSourceOwnerUserID,
                                   CheckedOutByUserID,
                                   isReadOnly,
                                   isForUpdate,
                                   checkOutDate)
    VALUES(@SourceGuid,
           @DataSourceOwnerUserID,
           @CheckedOutByUserID,
           @isReadOnly,
           @isForUpdate,
           @checkOutDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceCheckOutInsProc: Cannot insert because primary key value not found in DataSourceCheckOut '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceCheckOutDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceCheckOutDelProc]
(
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50),
    @CheckedOutByUserID        nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DataSourceCheckOut
     WHERE SourceGuid            = @SourceGuid
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID
       AND CheckedOutByUserID    = @CheckedOutByUserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DataSourceCheckOutDelProc: Cannot delete because foreign keys still exist in DataSourceCheckOut '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [DataSourceCheckOut_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[DataSourceCheckOut_INS]
   ON [dbo].[DataSourceCheckOut]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE DataSourceCheckOut
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM DataSourceCheckOut t
   JOIN inserted i
   ON 
     t.CheckedOutByUserID = i.CheckedOutByUserID
     and t.SourceGuid = i.SourceGuid
     and t.DataSourceOwnerUserID = i.DataSourceOwnerUserID
GO
/****** Object:  Table [dbo].[ProdCaptureItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProdCaptureItems](
	[CaptureItemsCode] [nvarchar](50) NOT NULL,
	[SendAlert] [bit] NULL,
	[ContainerType] [nvarchar](25) NOT NULL,
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK21] PRIMARY KEY NONCLUSTERED 
(
	[CaptureItemsCode] ASC,
	[ContainerType] ASC,
	[CorpFuncName] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ProdCaptureItemsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ProdCaptureItemsUpdProc 
 */

CREATE PROCEDURE [dbo].[ProdCaptureItemsUpdProc]
(
    @CaptureItemsCode     nvarchar(50),
    @SendAlert            bit                     = NULL,
    @ContainerType        nvarchar(25),
    @CorpFuncName         nvarchar(80),
    @CorpName             nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE ProdCaptureItems
       SET SendAlert             = @SendAlert
     WHERE CaptureItemsCode = @CaptureItemsCode
       AND ContainerType    = @ContainerType
       AND CorpFuncName     = @CorpFuncName
       AND CorpName         = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ProdCaptureItemsUpdProc: Cannot update  in ProdCaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ProdCaptureItemsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ProdCaptureItemsSelProc 
 */

CREATE PROCEDURE [dbo].[ProdCaptureItemsSelProc]
(
    @CaptureItemsCode     nvarchar(50),
    @ContainerType        nvarchar(25),
    @CorpFuncName         nvarchar(80),
    @CorpName             nvarchar(50))
AS
BEGIN
    SELECT CaptureItemsCode,
           SendAlert,
           ContainerType,
           CorpFuncName,
           CorpName
      FROM ProdCaptureItems
     WHERE CaptureItemsCode = @CaptureItemsCode
       AND ContainerType    = @ContainerType
       AND CorpFuncName     = @CorpFuncName
       AND CorpName         = @CorpName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ProdCaptureItemsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ProdCaptureItemsInsProc 
 */

CREATE PROCEDURE [dbo].[ProdCaptureItemsInsProc]
(
    @CaptureItemsCode     nvarchar(50),
    @SendAlert            bit                     = NULL,
    @ContainerType        nvarchar(25),
    @CorpFuncName         nvarchar(80),
    @CorpName             nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ProdCaptureItems(CaptureItemsCode,
                                 SendAlert,
                                 ContainerType,
                                 CorpFuncName,
                                 CorpName)
    VALUES(@CaptureItemsCode,
           @SendAlert,
           @ContainerType,
           @CorpFuncName,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ProdCaptureItemsInsProc: Cannot insert because primary key value not found in ProdCaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ProdCaptureItemsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ProdCaptureItemsDelProc 
 */

CREATE PROCEDURE [dbo].[ProdCaptureItemsDelProc]
(
    @CaptureItemsCode     nvarchar(50),
    @ContainerType        nvarchar(25),
    @CorpFuncName         nvarchar(80),
    @CorpName             nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ProdCaptureItems
     WHERE CaptureItemsCode = @CaptureItemsCode
       AND ContainerType    = @ContainerType
       AND CorpFuncName     = @CorpFuncName
       AND CorpName         = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ProdCaptureItemsDelProc: Cannot delete because foreign keys still exist in ProdCaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ProdCaptureItems_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ProdCaptureItems_INS]
   ON [dbo].[ProdCaptureItems]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ProdCaptureItems
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ProdCaptureItems t
   JOIN inserted i
   ON 
     t.CaptureItemsCode = i.CaptureItemsCode
     and t.ContainerType = i.ContainerType
     and t.CorpFuncName = i.CorpFuncName
     and t.CorpName = i.CorpName
GO
/****** Object:  Table [dbo].[LoadProfile]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadProfile](
	[ProfileName] [nvarchar](50) NOT NULL,
	[ProfileDesc] [nvarchar](254) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK101] PRIMARY KEY CLUSTERED 
(
	[ProfileName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileDelProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileDelProc]
(
    @ProfileName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LoadProfile
     WHERE ProfileName = @ProfileName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LoadProfileDelProc: Cannot delete because foreign keys still exist in LoadProfile '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LoadProfile_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LoadProfile_INS]
   ON [dbo].[LoadProfile]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LoadProfile
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LoadProfile t
   JOIN inserted i
   ON 
     t.ProfileName = i.ProfileName
GO
/****** Object:  Table [dbo].[SourceAttribute]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SourceAttribute](
	[AttributeValue] [nvarchar](254) NULL,
	[AttributeName] [nvarchar](50) NOT NULL,
	[SourceGuid] [nvarchar](50) NOT NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[SourceTypeCode] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK35] PRIMARY KEY NONCLUSTERED 
(
	[AttributeName] ASC,
	[SourceGuid] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataSource]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DataSource](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NULL,
	[SourceName] [nvarchar](254) NULL,
	[SourceImage] VARBINARY(MAX) FILESTREAM NULL,
	[SourceTypeCode] [nvarchar](50) NOT NULL,
	[FQN] [varchar](712) NULL,
	[VersionNbr] [int] NOT NULL,
	[LastAccessDate] [datetime] NULL,
	[FileLength] [int] NULL,
	[LastWriteTime] [datetime] NULL,
	[UserID] [nvarchar](50) NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[isPublic] [nchar](1) NULL,
	[FileDirectory] [nvarchar](300) NULL,
	[OriginalFileType] [nvarchar](50) NULL,
	[RetentionExpirationDate] [datetime] NULL,
	[IsPublicPreviousState] [nchar](1) NULL,
	[isAvailable] [nchar](1) NULL,
	[isContainedWithinZipFile] [nchar](1) NULL,
	[IsZipFile] [nchar](1) NULL,
	[DataVerified] [bit] NULL,
	[ZipFileGuid] [nvarchar](50) NULL,
	[ZipFileFQN] [varchar](712) NULL,
	[Description] [nvarchar](max) NULL,
	[KeyWords] [nvarchar](2000) NULL,
	[Notes] [nvarchar](2000) NULL,
	[isPerm] [nchar](1) NULL,
	[isMaster] [nchar](1) NULL,
	[CreationDate] [datetime] NULL,
	[OcrPerformed] [nchar](1) NULL,
	[isGraphic] [nchar](1) NULL,
	[GraphicContainsText] [nchar](1) NULL,
	[OcrText] [nvarchar](max) NULL,
	[ImageHiddenText] [nvarchar](max) NULL,
	[isWebPage] [nchar](1) NULL,
	[ParentGuid] [nvarchar](50) NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[MachineID] [nvarchar](250) NULL,
	[CRC] [nvarchar](25) NULL,
	[SharePoint] [bit] NULL,
	[SharePointDoc] [bit] NULL,
	[SharePointList] [bit] NULL,
	[SharePointListItem] [bit] NULL,
	[StructuredData] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[ContainedWithin] [nvarchar](50) NULL,
	[RecLen] [int] NULL,
	[RecHash] [varchar](50) NULL,
	[OriginalSize] [int] NULL,
	[CompressedSize] [int] NULL,
	[txStartTime] [datetime] NULL,
	[txEndTime] [datetime] NULL,
	[txTotalTime] [float] NULL,
	[TransmitTime] [float] NULL,
 CONSTRAINT [PK33_04012008185318001] PRIMARY KEY NONCLUSTERED 
(
	[SourceGuid] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [CI_dataSource01] ON [dbo].[DataSource] 
(
	[SourceName] ASC
)
INCLUDE ( [CreateDate],
[LastAccessDate],
[FileLength],
[CRC]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_DIR] ON [dbo].[DataSource] 
(
	[DataSourceOwnerUserID] ASC,
	[FileDirectory] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_FQN_USERID] ON [dbo].[DataSource] 
(
	[FQN] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_GuidLastMod] ON [dbo].[DataSource] 
(
	[SourceGuid] ASC,
	[RowLastModDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_Retentionperiod] ON [dbo].[DataSource] 
(
	[RetentionExpirationDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_SourceGuid_LastModdate] ON [dbo].[DataSource] 
(
	[SourceGuid] ASC
)
INCLUDE ( [LastAccessDate]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_DataSource] ON [dbo].[DataSource] 
(
	[SourceGuid] ASC,
	[SourceName] ASC
)
INCLUDE ( [CreateDate],
[SourceTypeCode],
[FQN],
[VersionNbr],
[LastAccessDate],
[FileLength],
[LastWriteTime],
[DataSourceOwnerUserID],
[isPublic],
[FileDirectory]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI03_SrcFilLenCrc] ON [dbo].[DataSource] 
(
	[SourceName] ASC,
	[FileLength] ASC,
	[CRC] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UKI_Documents] ON [dbo].[DataSource] 
(
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[DataSource](
[Description] LANGUAGE [English], 
[KeyWords] LANGUAGE [English], 
[Notes] LANGUAGE [English], 
[OcrText] LANGUAGE [English], 
[SourceImage] TYPE COLUMN [SourceTypeCode] LANGUAGE [English], 
[SourceName] LANGUAGE [English])
KEY INDEX [UKI_Documents]ON ([ftCatalog], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[Retention]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Retention](
	[RetentionCode] [nvarchar](50) NOT NULL,
	[RetentionDesc] [nvarchar](max) NULL,
	[RetentionYears] [int] NOT NULL,
	[RetentionAction] [nvarchar](50) NOT NULL,
	[ManagerID] [nvarchar](50) NULL,
	[ManagerName] [nvarchar](200) NULL,
	[DaysWarning] [int] NULL,
	[ResponseRequired] [char](1) NULL,
	[ManagerAcknowledged] [char](1) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK16] PRIMARY KEY CLUSTERED 
(
	[RetentionCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[InformationProduct]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[InformationProduct](
	[CreateDate] [datetime] NULL,
	[Code] [char](10) NOT NULL,
	[RetentionCode] [nvarchar](50) NOT NULL,
	[VolitilityCode] [nvarchar](50) NOT NULL,
	[ContainerType] [nvarchar](25) NOT NULL,
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[InfoTypeCode] [nvarchar](50) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK5] PRIMARY KEY NONCLUSTERED 
(
	[ContainerType] ASC,
	[CorpFuncName] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [Ref47] ON [dbo].[InformationProduct] 
(
	[Code] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CorpContainer]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CorpContainer](
	[ContainerType] [nvarchar](25) NOT NULL,
	[QtyDocCode] [nvarchar](10) NOT NULL,
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK2] PRIMARY KEY NONCLUSTERED 
(
	[ContainerType] ASC,
	[CorpFuncName] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [Ref32] ON [dbo].[CorpContainer] 
(
	[ContainerType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QtyDocs]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QtyDocs](
	[QtyDocCode] [nvarchar](10) NOT NULL,
	[Description] [nvarchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK9] PRIMARY KEY NONCLUSTERED 
(
	[QtyDocCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CorpContainerInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpContainerInsProc 
 */

CREATE PROCEDURE [dbo].[CorpContainerInsProc]
(
    @ContainerType     nvarchar(25),
    @QtyDocCode        nvarchar(10),
    @CorpFuncName      nvarchar(80),
    @CorpName          nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO CorpContainer(ContainerType,
                              QtyDocCode,
                              CorpFuncName,
                              CorpName)
    VALUES(@ContainerType,
           @QtyDocCode,
           @CorpFuncName,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CorpContainerInsProc: Cannot insert because primary key value not found in CorpContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CorpContainerDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpContainerDelProc 
 */

CREATE PROCEDURE [dbo].[CorpContainerDelProc]
(
    @ContainerType     nvarchar(25),
    @CorpFuncName      nvarchar(80),
    @CorpName          nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM CorpContainer
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CorpContainerDelProc: Cannot delete because foreign keys still exist in CorpContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [CorpContainer_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[CorpContainer_INS]
   ON [dbo].[CorpContainer]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE CorpContainer
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM CorpContainer t
   JOIN inserted i
   ON 
     t.ContainerType = i.ContainerType
     and t.CorpFuncName = i.CorpFuncName
     and t.CorpName = i.CorpName
GO
/****** Object:  Table [dbo].[CoOwner]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CoOwner](
	[RowId] [int] IDENTITY(1,1) NOT NULL,
	[CurrentOwnerUserID] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NULL,
	[PreviousOwnerUserID] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK76_1] PRIMARY KEY NONCLUSTERED 
(
	[RowId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_CoOwner] ON [dbo].[CoOwner] 
(
	[CurrentOwnerUserID] ASC,
	[PreviousOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CoOwnerUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[CoOwnerUpdProc]
(
    @RowId                   int,
    @CurrentOwnerUserID      nvarchar(50),
    @CreateDate              datetime                = NULL,
    @PreviousOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE CoOwner
       SET CurrentOwnerUserID       = @CurrentOwnerUserID,
           CreateDate               = @CreateDate,
           PreviousOwnerUserID      = @PreviousOwnerUserID
     WHERE RowId = @RowId

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CoOwnerUpdProc: Cannot update  in CoOwner '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CoOwnerSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[CoOwnerSelProc]
(
    @RowId                   int)
AS
BEGIN
    SELECT RowId,
           CurrentOwnerUserID,
           CreateDate,
           PreviousOwnerUserID
      FROM CoOwner
     WHERE RowId = @RowId

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CoOwnerInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[CoOwnerInsProc]
(
    @CurrentOwnerUserID      nvarchar(50),
    @CreateDate              datetime                = NULL,
    @PreviousOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO CoOwner(CurrentOwnerUserID,
                        CreateDate,
                        PreviousOwnerUserID)
    VALUES(@CurrentOwnerUserID,
           @CreateDate,
           @PreviousOwnerUserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CoOwnerInsProc: Cannot insert because primary key value not found in CoOwner '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CoOwnerDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[CoOwnerDelProc]
(
    @RowId                   int)
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM CoOwner
     WHERE RowId = @RowId

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CoOwnerDelProc: Cannot delete because foreign keys still exist in CoOwner '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [CoOwner_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[CoOwner_INS]
   ON [dbo].[CoOwner]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE CoOwner
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM CoOwner t
   JOIN inserted i
   ON 
     t.RowId = i.RowId
GO
/****** Object:  Table [dbo].[InformationType]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[InformationType](
	[CreateDate] [datetime] NULL,
	[InfoTypeCode] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](4000) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK6] PRIMARY KEY NONCLUSTERED 
(
	[InfoTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[InformationTypeUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[InformationTypeUpdProc]
(
    @CreateDate       datetime                  = NULL,
    @InfoTypeCode     nvarchar(50),
    @Description      nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE InformationType
       SET CreateDate        = @CreateDate,
           Description       = @Description
     WHERE InfoTypeCode = @InfoTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'InformationTypeUpdProc: Cannot update  in InformationType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[InformationTypeSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationTypeSelProc 
 */

CREATE PROCEDURE [dbo].[InformationTypeSelProc]
(
    @InfoTypeCode     nvarchar(50))
AS
BEGIN
    SELECT CreateDate,
           InfoTypeCode,
           Description
      FROM InformationType
     WHERE InfoTypeCode = @InfoTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[InformationTypeInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationTypeInsProc 
 */

CREATE PROCEDURE [dbo].[InformationTypeInsProc]
(
    @CreateDate       datetime                  = NULL,
    @InfoTypeCode     nvarchar(50),
    @Description      nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO InformationType(CreateDate,
                                InfoTypeCode,
                                Description)
    VALUES(@CreateDate,
           @InfoTypeCode,
           @Description)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'InformationTypeInsProc: Cannot insert because primary key value not found in InformationType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[InformationTypeDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationTypeDelProc 
 */

CREATE PROCEDURE [dbo].[InformationTypeDelProc]
(
    @InfoTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM InformationType
     WHERE InfoTypeCode = @InfoTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'InformationTypeDelProc: Cannot delete because foreign keys still exist in InformationType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [InformationType_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[InformationType_INS]
   ON [dbo].[InformationType]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE InformationType
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM InformationType t
   JOIN inserted i
   ON 
     t.InfoTypeCode = i.InfoTypeCode
GO
/****** Object:  View [dbo].[gv_Users]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Users]
AS
/*
** Select all rows from the Users table
** and the lookup expressions defined for associated tables
*/
SELECT [Users].* FROM [Users]
GO
/****** Object:  Table [dbo].[Email]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Email](
	[EmailGuid] [nvarchar](50) NOT NULL,
	[SUBJECT] [nvarchar](2000) NULL,
	[SentTO] [nvarchar](max) NULL,
	[Body] [text] NULL,
	[Bcc] [nvarchar](max) NULL,
	[BillingInformation] [nvarchar](200) NULL,
	[CC] [nvarchar](max) NULL,
	[Companies] [nvarchar](2000) NULL,
	[CreationTime] [datetime] NULL,
	[ReadReceiptRequested] [nvarchar](50) NULL,
	[ReceivedByName] [nvarchar](80) NOT NULL,
	[ReceivedTime] [datetime] NOT NULL,
	[AllRecipients] [nvarchar](max) NULL,
	[UserID] [nvarchar](80) NOT NULL,
	[SenderEmailAddress] [nvarchar](80) NOT NULL,
	[SenderName] [nvarchar](100) NOT NULL,
	[Sensitivity] [nvarchar](50) NULL,
	[SentOn] [datetime] NOT NULL,
	[MsgSize] [int] NULL,
	[DeferredDeliveryTime] [datetime] NULL,
	[EntryID] [varchar](150) NULL,
	[ExpiryTime] [datetime] NULL,
	[LastModificationTime] [datetime] NULL,
	[EmailImage] VARBINARY(MAX) FILESTREAM NULL,
	[Accounts] [nvarchar](2000) NULL,
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[ShortSubj] [nvarchar](250) NULL,
	[SourceTypeCode] [nvarchar](50) NULL,
	[OriginalFolder] [nvarchar](254) NULL,
	[StoreID] [varchar](750) NULL,
	[isPublic] [nchar](1) NULL,
	[RetentionExpirationDate] [datetime] NULL,
	[IsPublicPreviousState] [nchar](1) NULL,
	[isAvailable] [nchar](1) NULL,
	[CurrMailFolderID] [nvarchar](300) NULL,
	[isPerm] [nchar](1) NULL,
	[isMaster] [nchar](1) NULL,
	[CreationDate] [datetime] NULL,
	[NbrAttachments] [int] NULL,
	[CRC] [varchar](50) NULL,
	[Description] [nvarchar](max) NULL,
	[KeyWords] [nvarchar](2000) NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[EmailIdentifier] [nvarchar](450) NULL,
	[ConvertEmlToMSG] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[UIDL] [int] NULL,
	[RecLen] [float] NULL,
	[RecHash] [varchar](50) NULL,
	[OriginalSize] [int] NULL,
	[CompressedSize] [int] NULL,
	[txStartTime] [datetime] NULL,
	[txEndTime] [datetime] NULL,
	[txTotalTime] [float] NULL,
	[TransmitTime] [float] NULL,
 CONSTRAINT [PK27] PRIMARY KEY CLUSTERED 
(
	[EmailGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [_dta_index_Email_11_1253579504__K1] ON [dbo].[Email] 
(
	[EmailGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_Email_11_1253579504__K15_K16] ON [dbo].[Email] 
(
	[SenderEmailAddress] ASC,
	[SenderName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_Email_11_1253579504__K29_9] ON [dbo].[Email] 
(
	[OriginalFolder] ASC
)
INCLUDE ( [CreationTime]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [FULL_UI_EMAIL] ON [dbo].[Email] 
(
	[EmailIdentifier] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_EMAIL_01] ON [dbo].[Email] 
(
	[ReceivedTime] ASC,
	[SentOn] ASC,
	[ShortSubj] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_Email_RecHash] ON [dbo].[Email] 
(
	[RecHash] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_EmailIdentifier] ON [dbo].[Email] 
(
	[EmailIdentifier] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_EmailSearch] ON [dbo].[Email] 
(
	[SenderEmailAddress] ASC,
	[SentOn] ASC,
	[ShortSubj] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_EntryID_01] ON [dbo].[Email] 
(
	[UserID] ASC,
	[EntryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_OriginalFolder] ON [dbo].[Email] 
(
	[OriginalFolder] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_ReceivedByName] ON [dbo].[Email] 
(
	[ReceivedByName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_Retentionperiod] ON [dbo].[Email] 
(
	[RetentionExpirationDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_RetentionperiodEmail] ON [dbo].[Email] 
(
	[RetentionExpirationDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_SenderEmailAddress] ON [dbo].[Email] 
(
	[SenderEmailAddress] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_SenderName] ON [dbo].[Email] 
(
	[SenderName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_Storeid] ON [dbo].[Email] 
(
	[EntryID] ASC,
	[StoreID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_EmailAttach] ON [dbo].[Email] 
(
	[EmailGuid] ASC,
	[NbrAttachments] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_EmailAttach] ON [dbo].[Email] 
(
	[EmailGuid] ASC,
	[NbrAttachments] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_EMAIL] ON [dbo].[Email] 
(
	[RowID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[Email](
[Body] LANGUAGE [English], 
[Description] LANGUAGE [English], 
[KeyWords] LANGUAGE [English], 
[SUBJECT] LANGUAGE [English])
KEY INDEX [PK27]ON ([ftEmailCatalog], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[EmailAttachment]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[EmailAttachment](
	[Attachment] VARBINARY(MAX) FILESTREAM NULL,
	[AttachmentName] [nvarchar](254) NULL,
	[EmailGuid] [nvarchar](50) NOT NULL,
	[AttachmentCode] [nvarchar](50) NULL,
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[AttachmentType] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[isZipFileEntry] [bit] NULL,
	[OcrText] [nvarchar](max) NULL,
	[isPublic] [char](1) NULL,
	[AttachmentLength] [int] NULL,
	[OriginalFileTypeCode] [nvarchar](20) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[RecLen] [float] NULL,
	[RecHash] [varchar](50) NULL,
	[OriginalSize] [int] NULL,
	[CompressedSize] [int] NULL,
	[txStartTime] [datetime] NULL,
	[txEndTime] [datetime] NULL,
	[txTotalTime] [float] NULL,
	[TransmitTime] [float] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [_dta_index_EmailAttachment_11_1429580131__K3] ON [dbo].[EmailAttachment] 
(
	[EmailGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [_dta_index_EmailAttachment_11_1429580131__K5_3_7] ON [dbo].[EmailAttachment] 
(
	[RowID] ASC
)
INCLUDE ( [EmailGuid],
[UserID]) WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [EmailAttachment_AttachmentName] ON [dbo].[EmailAttachment] 
(
	[AttachmentName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [EmailAttachment_OrigFileExt] ON [dbo].[EmailAttachment] 
(
	[OriginalFileTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_EMAILATTACHMENT] ON [dbo].[EmailAttachment] 
(
	[RowID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = ON, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE FULLTEXT INDEX ON [dbo].[EmailAttachment](
[Attachment] TYPE COLUMN [AttachmentCode] LANGUAGE [English], 
[AttachmentName] LANGUAGE [English], 
[OcrText] LANGUAGE [English])
KEY INDEX [UK_EMAILATTACHMENT]ON ([ftEmailCatalog], FILEGROUP [PRIMARY])
WITH (CHANGE_TRACKING = AUTO, STOPLIST = SYSTEM)
GO
/****** Object:  Table [dbo].[AttachmentType]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AttachmentType](
	[AttachmentCode] [nvarchar](50) NOT NULL,
	[Description] [nvarchar](254) NULL,
	[isZipFormat] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK29] PRIMARY KEY CLUSTERED 
(
	[AttachmentCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[AttachmentTypeUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttachmentTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[AttachmentTypeUpdProc]
(
    @AttachmentCode     nvarchar(50),
    @Description        nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE AttachmentType
       SET Description         = @Description
     WHERE AttachmentCode = @AttachmentCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'AttachmentTypeUpdProc: Cannot update  in AttachmentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AttachmentTypeSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttachmentTypeSelProc 
 */

CREATE PROCEDURE [dbo].[AttachmentTypeSelProc]
(
    @AttachmentCode     nvarchar(50))
AS
BEGIN
    SELECT AttachmentCode,
           Description
      FROM AttachmentType
     WHERE AttachmentCode = @AttachmentCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AttachmentTypeInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttachmentTypeInsProc 
 */

CREATE PROCEDURE [dbo].[AttachmentTypeInsProc]
(
    @AttachmentCode     nvarchar(50),
    @Description        nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AttachmentType(AttachmentCode,
                               Description)
    VALUES(@AttachmentCode,
           @Description)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AttachmentTypeInsProc: Cannot insert because primary key value not found in AttachmentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AttachmentTypeDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttachmentTypeDelProc 
 */

CREATE PROCEDURE [dbo].[AttachmentTypeDelProc]
(
    @AttachmentCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM AttachmentType
     WHERE AttachmentCode = @AttachmentCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AttachmentTypeDelProc: Cannot delete because foreign keys still exist in AttachmentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [AttachmentType_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[AttachmentType_INS]
   ON [dbo].[AttachmentType]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE AttachmentType
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM AttachmentType t
   JOIN inserted i
   ON 
     t.AttachmentCode = i.AttachmentCode
GO
/****** Object:  View [dbo].[gv_LoadProfile]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LoadProfile]
AS
/*
** Select all rows from the LoadProfile table
** and the lookup expressions defined for associated tables
*/
SELECT [LoadProfile].* FROM [LoadProfile]
GO
/****** Object:  Table [dbo].[EmailAttachmentSearchList]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EmailAttachmentSearchList](
	[UserID] [nvarchar](50) NOT NULL,
	[EmailGuid] [nvarchar](50) NOT NULL,
	[Weight] [int] NULL,
	[RowID] [int] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE CLUSTERED INDEX [PK_EmailAttachmentSearchList] ON [dbo].[EmailAttachmentSearchList] 
(
	[EmailGuid] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_01_AttchSearch] ON [dbo].[EmailAttachmentSearchList] 
(
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_EmailAttachmentSearchList]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EmailAttachmentSearchList]
AS
/*
** Select all rows from the EmailAttachmentSearchList table
** and the lookup expressions defined for associated tables
*/
SELECT [EmailAttachmentSearchList].* FROM [EmailAttachmentSearchList]
GO
/****** Object:  StoredProcedure [dbo].[InsertAttachment]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[InsertAttachment]		
		@EmailGuid nvarchar(50),
		@Attachment image,		
		@AttachmentName varchar(254),
		@AttachmentCode varchar(50),
		@UserID varchar(50)
AS
set nocount on
	INSERT INTO [EmailAttachment] (
		[Attachment],
		[AttachmentName],
		[EmailGuid],
		[AttachmentCode],
	    [UserID]
)
	VALUES (
		@Attachment,
		@AttachmentName,
		@EmailGuid,
		@AttachmentCode,
	    @UserID	    
)
RETURN

/****** Object:  StoredProcedure [dbo].[EditAlbum]    Script Date: 03/18/2007 17:30:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  View [dbo].[gv_EmailAttachment]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EmailAttachment]
AS
/*
** Select all rows from the EmailAttachment table
** and the lookup expressions defined for associated tables
*/
SELECT [EmailAttachment].* FROM [EmailAttachment]
GO
/****** Object:  StoredProcedure [dbo].[EmailAttachmentInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailAttachmentInsProc 
 */

CREATE PROCEDURE [dbo].[EmailAttachmentInsProc]
(
    @Attachment         image                    = NULL,
    @AttachmentName     nvarchar(254)            = NULL,
    @EmailGuid          nvarchar(50)             = NULL,
    @AttachmentCode     nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailAttachment(Attachment,
                                AttachmentName,
                                EmailGuid,
                                AttachmentCode)
    VALUES(@Attachment,
           @AttachmentName,
           @EmailGuid,
           @AttachmentCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailAttachmentInsProc: Cannot insert because primary key value not found in EmailAttachment '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [AttachmentTypeUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: AttachmentTypeUpdTrig 
 */

CREATE TRIGGER [dbo].[AttachmentTypeUpdTrig] ON [dbo].[AttachmentType]
FOR UPDATE AS
BEGIN
    DECLARE
        @AttachmentCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(AttachmentCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM EmailAttachment ch, deleted
          WHERE ch.AttachmentCode = deleted.AttachmentCode) != 0)
        BEGIN
            RAISERROR 30001 'AttachmentTypeUpdTrigCannot update because foreign keys still exist in EmailAttachment'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [AttachmentTypeDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: AttachmentTypeDelTrig 
 */

CREATE TRIGGER [dbo].[AttachmentTypeDelTrig] ON [dbo].[AttachmentType]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM EmailAttachment ch, deleted
         WHERE ch.AttachmentCode = deleted.AttachmentCode) != 0)
    BEGIN
        RAISERROR 30002 'AttachmentTypeDelTrigCannot delete because foreign keys still exist in EmailAttachment'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [Retention_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Retention_INS]
   ON [dbo].[Retention]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Retention
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Retention t
   JOIN inserted i
   ON 
     t.RetentionCode = i.RetentionCode
GO
/****** Object:  Table [dbo].[CorpFunction]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CorpFunction](
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[CorpFuncDesc] [nvarchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK1] PRIMARY KEY NONCLUSTERED 
(
	[CorpFuncName] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FunctionProdJargon]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[FunctionProdJargon](
	[KeyFlag] [binary](50) NULL,
	[RepeatDataCode] [nvarchar](50) NOT NULL,
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[JargonCode] [nvarchar](50) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK13] PRIMARY KEY NONCLUSTERED 
(
	[CorpFuncName] ASC,
	[JargonCode] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[RepeatData]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RepeatData](
	[RepeatDataCode] [nvarchar](50) NOT NULL,
	[RepeatDataDesc] [nvarchar](4000) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK14] PRIMARY KEY CLUSTERED 
(
	[RepeatDataCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[RepeatDataUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RepeatDataUpdProc 
 */

CREATE PROCEDURE [dbo].[RepeatDataUpdProc]
(
    @RepeatDataCode     nvarchar(50),
    @RepeatDataDesc     nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE RepeatData
       SET RepeatDataDesc      = @RepeatDataDesc
     WHERE RepeatDataCode = @RepeatDataCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'RepeatDataUpdProc: Cannot update  in RepeatData '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RepeatDataSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RepeatDataSelProc 
 */

CREATE PROCEDURE [dbo].[RepeatDataSelProc]
(
    @RepeatDataCode     nvarchar(50))
AS
BEGIN
    SELECT RepeatDataCode,
           RepeatDataDesc
      FROM RepeatData
     WHERE RepeatDataCode = @RepeatDataCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RepeatDataInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RepeatDataInsProc 
 */

CREATE PROCEDURE [dbo].[RepeatDataInsProc]
(
    @RepeatDataCode     nvarchar(50),
    @RepeatDataDesc     nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO RepeatData(RepeatDataCode,
                           RepeatDataDesc)
    VALUES(@RepeatDataCode,
           @RepeatDataDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RepeatDataInsProc: Cannot insert because primary key value not found in RepeatData '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Table [dbo].[LibEmail]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LibEmail](
	[EmailFolderEntryID] [nvarchar](200) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[FolderName] [nvarchar](250) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK99] PRIMARY KEY CLUSTERED 
(
	[EmailFolderEntryID] ASC,
	[UserID] ASC,
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_LibEmail] ON [dbo].[LibEmail] 
(
	[EmailFolderEntryID] ASC,
	[FolderName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[LibEmailSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibEmailSelProc]
(
    @EmailFolderEntryID     nvarchar(200),
    @UserID                 nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    SELECT EmailFolderEntryID,
           UserID,
           LibraryName,
           FolderName
      FROM LibEmail
     WHERE EmailFolderEntryID = @EmailFolderEntryID
       AND UserID             = @UserID
       AND LibraryName        = @LibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibEmailInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibEmailInsProc]
(
    @EmailFolderEntryID     nvarchar(200),
    @UserID                 nvarchar(50),
    @LibraryName            nvarchar(80),
    @FolderName             nvarchar(250)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LibEmail(EmailFolderEntryID,
                         UserID,
                         LibraryName,
                         FolderName)
    VALUES(@EmailFolderEntryID,
           @UserID,
           @LibraryName,
           @FolderName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LibEmailInsProc: Cannot insert because primary key value not found in LibEmail '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[LibEmailDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibEmailDelProc]
(
    @EmailFolderEntryID     nvarchar(200),
    @UserID                 nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LibEmail
     WHERE EmailFolderEntryID = @EmailFolderEntryID
       AND UserID             = @UserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LibEmailDelProc: Cannot delete because foreign keys still exist in LibEmail '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LibEmail_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LibEmail_INS]
   ON [dbo].[LibEmail]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LibEmail
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LibEmail t
   JOIN inserted i
   ON 
     t.EmailFolderEntryID = i.EmailFolderEntryID
     and t.UserID = i.UserID
     and t.LibraryName = i.LibraryName
GO
/****** Object:  Table [dbo].[LibDirectory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LibDirectory](
	[DirectoryName] [nvarchar](254) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[IncludeSubDirs] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK98] PRIMARY KEY CLUSTERED 
(
	[DirectoryName] ASC,
	[UserID] ASC,
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[LibDirectorySelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LibDirectorySelProc 
 */

CREATE PROCEDURE [dbo].[LibDirectorySelProc]
(
    @DirectoryName     nvarchar(18),
    @UserID            nvarchar(50),
    @LibraryName       nvarchar(80))
AS
BEGIN
    SELECT DirectoryName,
           UserID,
           LibraryName
      FROM LibDirectory
     WHERE DirectoryName = @DirectoryName
       AND UserID        = @UserID
       AND LibraryName   = @LibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibDirectoryInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LibDirectoryInsProc 
 */

CREATE PROCEDURE [dbo].[LibDirectoryInsProc]
(
    @DirectoryName     nvarchar(18),
    @UserID            nvarchar(50),
    @LibraryName       nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LibDirectory(DirectoryName,
                             UserID,
                             LibraryName)
    VALUES(@DirectoryName,
           @UserID,
           @LibraryName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LibDirectoryInsProc: Cannot insert because primary key value not found in LibDirectory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[LibDirectoryDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LibDirectoryDelProc 
 */

CREATE PROCEDURE [dbo].[LibDirectoryDelProc]
(
    @DirectoryName     nvarchar(18),
    @UserID            nvarchar(50),
    @LibraryName       nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LibDirectory
     WHERE DirectoryName = @DirectoryName
       AND UserID        = @UserID
       AND LibraryName   = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LibDirectoryDelProc: Cannot delete because foreign keys still exist in LibDirectory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LibDirectory_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LibDirectory_INS]
   ON [dbo].[LibDirectory]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LibDirectory
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LibDirectory t
   JOIN inserted i
   ON 
     t.DirectoryName = i.DirectoryName
     and t.UserID = i.UserID
     and t.LibraryName = i.LibraryName
GO
/****** Object:  Table [dbo].[CaptureItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CaptureItems](
	[CaptureItemsCode] [nvarchar](50) NOT NULL,
	[CaptureItemsDesc] [nvarchar](18) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK20] PRIMARY KEY CLUSTERED 
(
	[CaptureItemsCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_CaptureItems]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_CaptureItems]
AS
/*
** Select all rows from the CaptureItems table
** and the lookup expressions defined for associated tables
*/
SELECT [CaptureItems].* FROM [CaptureItems]
GO
/****** Object:  Trigger [CaptureItemsUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CaptureItemsUpdTrig 
 */

CREATE TRIGGER [dbo].[CaptureItemsUpdTrig] ON [dbo].[CaptureItems]
FOR UPDATE AS
BEGIN
    DECLARE
        @CaptureItemsCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(CaptureItemsCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM ProdCaptureItems ch, deleted
          WHERE ch.CaptureItemsCode = deleted.CaptureItemsCode) != 0)
        BEGIN
            RAISERROR 30001 'CaptureItemsUpdTrigCannot update because foreign keys still exist in ProdCaptureItems'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[CaptureItemsUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CaptureItemsUpdProc 
 */

CREATE PROCEDURE [dbo].[CaptureItemsUpdProc]
(
    @CaptureItemsCode     nvarchar(50),
    @CaptureItemsDesc     nvarchar(18)            = NULL,
    @CreateDate           datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE CaptureItems
       SET CaptureItemsDesc      = @CaptureItemsDesc,
           CreateDate            = @CreateDate
     WHERE CaptureItemsCode = @CaptureItemsCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CaptureItemsUpdProc: Cannot update  in CaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CaptureItemsSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CaptureItemsSelProc 
 */

CREATE PROCEDURE [dbo].[CaptureItemsSelProc]
(
    @CaptureItemsCode     nvarchar(50))
AS
BEGIN
    SELECT CaptureItemsCode,
           CaptureItemsDesc,
           CreateDate
      FROM CaptureItems
     WHERE CaptureItemsCode = @CaptureItemsCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CaptureItemsInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CaptureItemsInsProc 
 */

CREATE PROCEDURE [dbo].[CaptureItemsInsProc]
(
    @CaptureItemsCode     nvarchar(50),
    @CaptureItemsDesc     nvarchar(18)            = NULL,
    @CreateDate           datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO CaptureItems(CaptureItemsCode,
                             CaptureItemsDesc,
                             CreateDate)
    VALUES(@CaptureItemsCode,
           @CaptureItemsDesc,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CaptureItemsInsProc: Cannot insert because primary key value not found in CaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [CaptureItemsDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CaptureItemsDelTrig 
 */

CREATE TRIGGER [dbo].[CaptureItemsDelTrig] ON [dbo].[CaptureItems]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM ProdCaptureItems ch, deleted
         WHERE ch.CaptureItemsCode = deleted.CaptureItemsCode) != 0)
    BEGIN
        RAISERROR 30002 'CaptureItemsDelTrigCannot delete because foreign keys still exist in ProdCaptureItems'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[CaptureItemsDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CaptureItemsDelProc 
 */

CREATE PROCEDURE [dbo].[CaptureItemsDelProc]
(
    @CaptureItemsCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM CaptureItems
     WHERE CaptureItemsCode = @CaptureItemsCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CaptureItemsDelProc: Cannot delete because foreign keys still exist in CaptureItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [CaptureItems_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[CaptureItems_INS]
   ON [dbo].[CaptureItems]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE CaptureItems
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM CaptureItems t
   JOIN inserted i
   ON 
     t.CaptureItemsCode = i.CaptureItemsCode
GO
/****** Object:  Table [dbo].[Corporation]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Corporation](
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK26] PRIMARY KEY CLUSTERED 
(
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CorporationSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorporationSelProc 
 */

CREATE PROCEDURE [dbo].[CorporationSelProc]
(
    @CorpName     nvarchar(50))
AS
BEGIN
    SELECT CorpName
      FROM Corporation
     WHERE CorpName = @CorpName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CorporationInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorporationInsProc 
 */

CREATE PROCEDURE [dbo].[CorporationInsProc]
(
    @CorpName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Corporation(CorpName)
    VALUES(@CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CorporationInsProc: Cannot insert because primary key value not found in Corporation '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CorporationDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorporationDelProc 
 */

CREATE PROCEDURE [dbo].[CorporationDelProc]
(
    @CorpName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Corporation
     WHERE CorpName = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CorporationDelProc: Cannot delete because foreign keys still exist in Corporation '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Corporation_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Corporation_INS]
   ON [dbo].[Corporation]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Corporation
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Corporation t
   JOIN inserted i
   ON 
     t.CorpName = i.CorpName
GO
/****** Object:  Table [dbo].[SourceContainer]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SourceContainer](
	[ContainerType] [nvarchar](25) NOT NULL,
	[ContainerDesc] [nvarchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK3] PRIMARY KEY NONCLUSTERED 
(
	[ContainerType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContainerStorage]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContainerStorage](
	[StoreCode] [nvarchar](50) NOT NULL,
	[ContainerType] [nvarchar](25) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK18] PRIMARY KEY NONCLUSTERED 
(
	[StoreCode] ASC,
	[ContainerType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_ContainerStorage]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ContainerStorage]
AS
/*
** Select all rows from the ContainerStorage table
** and the lookup expressions defined for associated tables
*/
SELECT [ContainerStorage].* FROM [ContainerStorage]
GO
/****** Object:  StoredProcedure [dbo].[InsertDataSource]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS OFF
GO
SET QUOTED_IDENTIFIER OFF
GO
/*
'Dim file_DirName$ = FileAttributes(0)
          'Dim file_SourceName$ = FileAttributes(1)
          'Dim file_FullName$ = FileAttributes(2)
          'Dim file_Length$ = FileAttributes(3)
          'Dim file_SourceTypeCode$ = FileAttributes(4)
          'Dim file_LastAccessDate$ = FileAttributes(5)
          'Dim file_CreateDate$ = FileAttributes(6)
          'Dim file_LastWriteTime$ = FileAttributes(7)
*/
create PROCEDURE [dbo].[InsertDataSource]		
		@SourceGuid nvarchar(50),
		@FQN nvarchar(50),
		@SourceName varchar(254),
		@SourceImage image,				
		@SourceTypeCode varchar(50),
		@LastAccessDate datetime, 
		@CreateDate datetime, 
		@LastWriteTime datetime,
		@DataSourceOwnerUserID varchar(50),
        @VersionNbr int
AS
set nocount on
	INSERT INTO [DataSource] (
		SourceGuid,
		FQN,
		SourceName,
		SourceImage,				
		SourceTypeCode,
		LastAccessDate,
		CreateDate,
		LastWriteTime, 
		DataSourceOwnerUserID,
	    VersionNbr
)
	VALUES (
		@SourceGuid,
		@FQN,
		@SourceName,
		@SourceImage,				
		@SourceTypeCode,
		@LastAccessDate, 
		@CreateDate , 
		@LastWriteTime,
		@DataSourceOwnerUserID,
		@VersionNbr
)
RETURN

/****** Object:  StoredProcedure [dbo].[EditAlbum]    Script Date: 03/18/2007 17:30:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  Trigger [DataSource_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[DataSource_INS]
   ON [dbo].[DataSource]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE DataSource
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM DataSource t
   JOIN inserted i
   ON 
     t.SourceGuid = i.SourceGuid
     and t.DataSourceOwnerUserID = i.DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[DataSource_04012008185318007]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceUpdProc 
 */

CREATE PROCEDURE [dbo].[DataSource_04012008185318007]
(
    @SourceGuid         nvarchar(50),
    @CreateDate         datetime                 = NULL,
    @SourceName         nvarchar(254)            = NULL,
    @SourceImage        image                    = NULL,
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSource
       SET CreateDate          = @CreateDate,
           SourceName          = @SourceName,
           SourceImage         = @SourceImage,
           SourceTypeCode      = @SourceTypeCode
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceUpdProc: Cannot update  in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSource_04012008185318006]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceSelProc 
 */

CREATE PROCEDURE [dbo].[DataSource_04012008185318006]
(
    @SourceGuid         nvarchar(50))
AS
BEGIN
    SELECT SourceGuid,
           CreateDate,
           SourceName,
           SourceImage,
           SourceTypeCode
      FROM DataSource
     WHERE SourceGuid = @SourceGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSource_04012008185318005]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceInsProc 
 */

CREATE PROCEDURE [dbo].[DataSource_04012008185318005]
(
    @SourceGuid         nvarchar(50),
    @CreateDate         datetime                 = NULL,
    @SourceName         nvarchar(254)            = NULL,
    @SourceImage        image                    = NULL,
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSource(SourceGuid,
                           CreateDate,
                           SourceName,
                           SourceImage,
                           SourceTypeCode)
    VALUES(@SourceGuid,
           @CreateDate,
           @SourceName,
           @SourceImage,
           @SourceTypeCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceInsProc: Cannot insert because primary key value not found in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataSource_04012008185318004]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceDelProc 
 */

CREATE PROCEDURE [dbo].[DataSource_04012008185318004]
(
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DataSource
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DataSourceDelProc: Cannot delete because foreign keys still exist in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  View [dbo].[CountOfContent]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[CountOfContent]
as
select COUNT(*) + 1000000 as Rows from DataSource
GO
/****** Object:  Table [dbo].[BusinessJargonCode]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessJargonCode](
	[JargonCode] [nvarchar](50) NOT NULL,
	[JargonDesc] [nvarchar](18) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK11] PRIMARY KEY CLUSTERED 
(
	[JargonCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[JargonWords]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[JargonWords](
	[tgtWord] [nvarchar](50) NOT NULL,
	[jDesc] [nvarchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[JargonCode] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK12] PRIMARY KEY CLUSTERED 
(
	[JargonCode] ASC,
	[tgtWord] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[BusinessFunctionJargon]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[BusinessFunctionJargon](
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[WordID] [int] IDENTITY(1,1) NOT NULL,
	[JargonWords_tgtWord] [nvarchar](50) NOT NULL,
	[JargonCode] [nvarchar](50) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK23] PRIMARY KEY NONCLUSTERED 
(
	[CorpFuncName] ASC,
	[WordID] ASC,
	[JargonWords_tgtWord] ASC,
	[JargonCode] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[BusinessFunctionJargonDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessFunctionJargonDelProc 
 */

CREATE PROCEDURE [dbo].[BusinessFunctionJargonDelProc]
(
    @CorpFuncName            nvarchar(80),
    @WordID                  int,
    @JargonWords_tgtWord     nvarchar(50),
    @JargonCode              nvarchar(50),
    @CorpName                nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM BusinessFunctionJargon
     WHERE CorpFuncName        = @CorpFuncName
       AND WordID              = @WordID
       AND JargonWords_tgtWord = @JargonWords_tgtWord
       AND JargonCode          = @JargonCode
       AND CorpName            = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'BusinessFunctionJargonDelProc: Cannot delete because foreign keys still exist in BusinessFunctionJargon '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [BusinessFunctionJargon_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[BusinessFunctionJargon_INS]
   ON [dbo].[BusinessFunctionJargon]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE BusinessFunctionJargon
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM BusinessFunctionJargon t
   JOIN inserted i
   ON 
     t.CorpFuncName = i.CorpFuncName
     and t.WordID = i.WordID
     and t.JargonWords_tgtWord = i.JargonWords_tgtWord
     and t.JargonCode = i.JargonCode
     and t.CorpName = i.CorpName
GO
/****** Object:  View [dbo].[gv_BusinessFunctionJargon]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_BusinessFunctionJargon]
AS
/*
** Select all rows from the BusinessFunctionJargon table
** and the lookup expressions defined for associated tables
*/
SELECT [BusinessFunctionJargon].* FROM [BusinessFunctionJargon]
GO
/****** Object:  StoredProcedure [dbo].[DirectoryUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DirectoryUpdProc]
(
    @UserID             nvarchar(50),
    @IncludeSubDirs     char(1)                 = NULL,
    @FQN                varchar(254),
    @DB_ID              nvarchar(50),
    @VersionFiles       char(1)                 = NULL,
    @ckMetaData         nchar(1)                = NULL,
    @ckPublic           nchar(1)                = NULL,
    @ckDisableDir       nchar(1)                = NULL,
    @QuickRefEntry      char(10)                = NULL,
    @isSysDefault       bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Directory
       SET IncludeSubDirs      = @IncludeSubDirs,
           DB_ID               = @DB_ID,
           VersionFiles        = @VersionFiles,
           ckMetaData          = @ckMetaData,
           ckPublic            = @ckPublic,
           ckDisableDir        = @ckDisableDir,
           QuickRefEntry       = @QuickRefEntry,
           isSysDefault        = @isSysDefault
     WHERE UserID = @UserID
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DirectoryUpdProc: Cannot update  in Directory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DirectorySelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DirectorySelProc]
(
    @UserID             nvarchar(50),
    @FQN                varchar(254))
AS
BEGIN
    SELECT UserID,
           IncludeSubDirs,
           FQN,
           DB_ID,
           VersionFiles,
           ckMetaData,
           ckPublic,
           ckDisableDir,
           QuickRefEntry,
           isSysDefault
      FROM Directory
     WHERE UserID = @UserID
       AND FQN    = @FQN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DirectoryInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DirectoryInsProc]
(
    @UserID             nvarchar(50),
    @IncludeSubDirs     char(1)                 = NULL,
    @FQN                varchar(254),
    @DB_ID              nvarchar(50),
    @VersionFiles       char(1)                 = NULL,
    @ckMetaData         nchar(1)                = NULL,
    @ckPublic           nchar(1)                = NULL,
    @ckDisableDir       nchar(1)                = NULL,
    @QuickRefEntry      char(10)                = NULL,
    @isSysDefault       bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Directory(UserID,
                          IncludeSubDirs,
                          FQN,
                          DB_ID,
                          VersionFiles,
                          ckMetaData,
                          ckPublic,
                          ckDisableDir,
                          QuickRefEntry,
                          isSysDefault)
    VALUES(@UserID,
           @IncludeSubDirs,
           @FQN,
           @DB_ID,
           @VersionFiles,
           @ckMetaData,
           @ckPublic,
           @ckDisableDir,
           @QuickRefEntry,
           @isSysDefault)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DirectoryInsProc: Cannot insert because primary key value not found in Directory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DirectoryDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DirectoryDelProc]
(
    @UserID             nvarchar(50),
    @FQN                varchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Directory
     WHERE UserID = @UserID
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DirectoryDelProc: Cannot delete because foreign keys still exist in Directory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Directory_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Directory_INS]
   ON [dbo].[Directory]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Directory
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Directory t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.FQN = i.FQN
GO
/****** Object:  Trigger [trigCaptureItems_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigCaptureItems_Update]
   ON [dbo].[CaptureItems]
         AFTER Update 
   AS
         BEGIN 
         UPDATE CaptureItems 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      CaptureItems.CaptureItemsCode = inserted.CaptureItemsCode
 End
GO
/****** Object:  Trigger [trigBusinessFunctionJargon_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigBusinessFunctionJargon_Update]
   ON [dbo].[BusinessFunctionJargon]
         AFTER Update 
   AS
         BEGIN 
         UPDATE BusinessFunctionJargon 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      BusinessFunctionJargon.CorpFuncName = inserted.CorpFuncName
     and BusinessFunctionJargon.WordID = inserted.WordID
     and BusinessFunctionJargon.JargonWords_tgtWord = inserted.JargonWords_tgtWord
     and BusinessFunctionJargon.JargonCode = inserted.JargonCode
     and BusinessFunctionJargon.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [trigCorpContainer_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigCorpContainer_Update]
   ON [dbo].[CorpContainer]
         AFTER Update 
   AS
         BEGIN 
         UPDATE CorpContainer 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      CorpContainer.ContainerType = inserted.ContainerType
     and CorpContainer.CorpFuncName = inserted.CorpFuncName
     and CorpContainer.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [trigCoOwner_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigCoOwner_Update]
   ON [dbo].[CoOwner]
         AFTER Update 
   AS
         BEGIN 
         UPDATE CoOwner 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      CoOwner.RowId = inserted.RowId
 End
GO
/****** Object:  Trigger [trigContainerStorage_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigContainerStorage_Update]
   ON [dbo].[ContainerStorage]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ContainerStorage 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ContainerStorage.StoreCode = inserted.StoreCode
     and ContainerStorage.ContainerType = inserted.ContainerType
 End
GO
/****** Object:  View [dbo].[gv_Corporation]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Corporation]
AS
/*
** Select all rows from the Corporation table
** and the lookup expressions defined for associated tables
*/
SELECT [Corporation].* FROM [Corporation]
GO
/****** Object:  View [dbo].[gv_CorpContainer]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_CorpContainer]
AS
/*
** Select all rows from the CorpContainer table
** and the lookup expressions defined for associated tables
*/
SELECT [CorpContainer].* FROM [CorpContainer]
GO
/****** Object:  View [dbo].[gv_CoOwner]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_CoOwner]
AS
/*
** Select all rows from the CoOwner table
** and the lookup expressions defined for associated tables
*/
SELECT [CoOwner].* FROM [CoOwner]
GO
/****** Object:  Table [dbo].[ConvertedDocs]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ConvertedDocs](
	[FQN] [nvarchar](254) NOT NULL,
	[FileName] [nvarchar](254) NULL,
	[XMLName] [nvarchar](254) NULL,
	[XMLDIr] [nvarchar](254) NULL,
	[FileDir] [nvarchar](254) NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK25] PRIMARY KEY CLUSTERED 
(
	[FQN] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Trigger [trigConvertedDocs_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigConvertedDocs_Update]
   ON [dbo].[ConvertedDocs]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ConvertedDocs 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ConvertedDocs.FQN = inserted.FQN
     and ConvertedDocs.CorpName = inserted.CorpName
 End
GO
/****** Object:  View [dbo].[gv_ConvertedDocs]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ConvertedDocs]
AS
/*
** Select all rows from the ConvertedDocs table
** and the lookup expressions defined for associated tables
*/
SELECT [ConvertedDocs].* FROM [ConvertedDocs]
GO
/****** Object:  Trigger [ConvertedDocsUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ConvertedDocsUpdTrig 
 */

CREATE TRIGGER [dbo].[ConvertedDocsUpdTrig] ON [dbo].[ConvertedDocs]
FOR UPDATE AS
BEGIN
    DECLARE
        @FQN nvarchar(254),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM Corporation pr, inserted
          WHERE pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'ConvertedDocsUpdTrigCannot update because primary key value not found in Corporation'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[ConvertedDocsUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ConvertedDocsUpdProc 
 */

CREATE PROCEDURE [dbo].[ConvertedDocsUpdProc]
(
    @FQN          nvarchar(254),
    @FileName     nvarchar(254)            = NULL,
    @XMLName      nvarchar(254)            = NULL,
    @XMLDIr       nvarchar(254)            = NULL,
    @FileDir      nvarchar(254)            = NULL,
    @CorpName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE ConvertedDocs
       SET FileName      = @FileName,
           XMLName       = @XMLName,
           XMLDIr        = @XMLDIr,
           FileDir       = @FileDir
     WHERE FQN      = @FQN
       AND CorpName = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ConvertedDocsUpdProc: Cannot update  in ConvertedDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ConvertedDocsSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ConvertedDocsSelProc 
 */

CREATE PROCEDURE [dbo].[ConvertedDocsSelProc]
(
    @FQN          nvarchar(254),
    @CorpName     nvarchar(50))
AS
BEGIN
    SELECT FQN,
           FileName,
           XMLName,
           XMLDIr,
           FileDir,
           CorpName
      FROM ConvertedDocs
     WHERE FQN      = @FQN
       AND CorpName = @CorpName

    RETURN(0)
END
GO
/****** Object:  Trigger [ConvertedDocsInsTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ConvertedDocsInsTrig 
 */

CREATE TRIGGER [dbo].[ConvertedDocsInsTrig] ON [dbo].[ConvertedDocs]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM Corporation pr, inserted
         WHERE pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'ConvertedDocsInsTrigCannot insert because primary key value not found in Corporation'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[ConvertedDocsInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ConvertedDocsInsProc 
 */

CREATE PROCEDURE [dbo].[ConvertedDocsInsProc]
(
    @FQN          nvarchar(254),
    @FileName     nvarchar(254)            = NULL,
    @XMLName      nvarchar(254)            = NULL,
    @XMLDIr       nvarchar(254)            = NULL,
    @FileDir      nvarchar(254)            = NULL,
    @CorpName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ConvertedDocs(FQN,
                              FileName,
                              XMLName,
                              XMLDIr,
                              FileDir,
                              CorpName)
    VALUES(@FQN,
           @FileName,
           @XMLName,
           @XMLDIr,
           @FileDir,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ConvertedDocsInsProc: Cannot insert because primary key value not found in ConvertedDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ConvertedDocsDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ConvertedDocsDelProc 
 */

CREATE PROCEDURE [dbo].[ConvertedDocsDelProc]
(
    @FQN          nvarchar(254),
    @CorpName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ConvertedDocs
     WHERE FQN      = @FQN
       AND CorpName = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ConvertedDocsDelProc: Cannot delete because foreign keys still exist in ConvertedDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ConvertedDocs_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ConvertedDocs_INS]
   ON [dbo].[ConvertedDocs]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ConvertedDocs
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ConvertedDocs t
   JOIN inserted i
   ON 
     t.FQN = i.FQN
     and t.CorpName = i.CorpName
GO
/****** Object:  StoredProcedure [dbo].[ContainerStorageSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ContainerStorageSelProc 
 */

CREATE PROCEDURE [dbo].[ContainerStorageSelProc]
(
    @StoreCode         nvarchar(50),
    @ContainerType     nvarchar(25))
AS
BEGIN
    SELECT StoreCode,
           ContainerType
      FROM ContainerStorage
     WHERE StoreCode     = @StoreCode
       AND ContainerType = @ContainerType

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ContainerStorageInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ContainerStorageInsProc 
 */

CREATE PROCEDURE [dbo].[ContainerStorageInsProc]
(
    @StoreCode         nvarchar(50),
    @ContainerType     nvarchar(25))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ContainerStorage(StoreCode,
                                 ContainerType)
    VALUES(@StoreCode,
           @ContainerType)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ContainerStorageInsProc: Cannot insert because primary key value not found in ContainerStorage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ContainerStorageDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ContainerStorageDelProc 
 */

CREATE PROCEDURE [dbo].[ContainerStorageDelProc]
(
    @StoreCode         nvarchar(50),
    @ContainerType     nvarchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ContainerStorage
     WHERE StoreCode     = @StoreCode
       AND ContainerType = @ContainerType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ContainerStorageDelProc: Cannot delete because foreign keys still exist in ContainerStorage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ContainerStorage_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ContainerStorage_INS]
   ON [dbo].[ContainerStorage]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ContainerStorage
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ContainerStorage t
   JOIN inserted i
   ON 
     t.StoreCode = i.StoreCode
     and t.ContainerType = i.ContainerType
GO
/****** Object:  StoredProcedure [dbo].[RepeatDataDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RepeatDataDelProc 
 */

CREATE PROCEDURE [dbo].[RepeatDataDelProc]
(
    @RepeatDataCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM RepeatData
     WHERE RepeatDataCode = @RepeatDataCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'RepeatDataDelProc: Cannot delete because foreign keys still exist in RepeatData '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [RepeatData_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[RepeatData_INS]
   ON [dbo].[RepeatData]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE RepeatData
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM RepeatData t
   JOIN inserted i
   ON 
     t.RepeatDataCode = i.RepeatDataCode
GO
/****** Object:  Table [dbo].[Recipients]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Recipients](
	[Recipient] [nvarchar](254) NOT NULL,
	[EmailGuid] [nvarchar](50) NOT NULL,
	[TypeRecp] [nchar](10) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK32A] PRIMARY KEY CLUSTERED 
(
	[Recipient] ASC,
	[EmailGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[RecipientsUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RecipientsUpdProc]
(
    @Recipient     nvarchar(254),
    @EmailGuid     nvarchar(50),
    @TypeRecp      nchar(10)                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Recipients
       SET TypeRecp       = @TypeRecp
     WHERE Recipient = @Recipient
       AND EmailGuid = @EmailGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'RecipientsUpdProc: Cannot update  in Recipients '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RecipientsSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RecipientsSelProc]
(
    @Recipient     nvarchar(254),
    @EmailGuid     nvarchar(50))
AS
BEGIN
    SELECT Recipient,
           EmailGuid,
           TypeRecp
      FROM Recipients
     WHERE Recipient = @Recipient
       AND EmailGuid = @EmailGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RecipientsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RecipientsInsProc 
 */

CREATE PROCEDURE [dbo].[RecipientsInsProc]
(
    @Recipient     nvarchar(254)            = NULL,
    @EmailGuid     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Recipients(Recipient,
                           EmailGuid)
    VALUES(@Recipient,
           @EmailGuid)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RecipientsInsProc: Cannot insert because primary key value not found in Recipients '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[RecipientsDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RecipientsDelProc]
(
    @Recipient     nvarchar(254),
    @EmailGuid     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Recipients
     WHERE Recipient = @Recipient
       AND EmailGuid = @EmailGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'RecipientsDelProc: Cannot delete because foreign keys still exist in Recipients '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Recipients_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Recipients_INS]
   ON [dbo].[Recipients]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Recipients
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Recipients t
   JOIN inserted i
   ON 
     t.Recipient = i.Recipient
     and t.EmailGuid = i.EmailGuid
GO
/****** Object:  Trigger [ProdCaptureItemsUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ProdCaptureItemsUpdTrig 
 */

CREATE TRIGGER [dbo].[ProdCaptureItemsUpdTrig] ON [dbo].[ProdCaptureItems]
FOR UPDATE AS
BEGIN
    DECLARE
        @CaptureItemsCode nvarchar(50),
        @ContainerType nvarchar(25),
        @CorpFuncName nvarchar(80),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName) OR
        UPDATE(ContainerType))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM InformationProduct pr, inserted
          WHERE pr.CorpFuncName = inserted.CorpFuncName AND
             pr.CorpName = inserted.CorpName AND
             pr.ContainerType = inserted.ContainerType) != @Rows)
        BEGIN
            RAISERROR 30001 'ProdCaptureItemsUpdTrigCannot update because primary key value not found in InformationProduct'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(CaptureItemsCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CaptureItems pr, inserted
          WHERE pr.CaptureItemsCode = inserted.CaptureItemsCode) != @Rows)
        BEGIN
            RAISERROR 30001 'ProdCaptureItemsUpdTrigCannot update because primary key value not found in CaptureItems'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [ProdCaptureItemsInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ProdCaptureItemsInsTrig 
 */

CREATE TRIGGER [dbo].[ProdCaptureItemsInsTrig] ON [dbo].[ProdCaptureItems]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM InformationProduct pr, inserted
         WHERE pr.CorpFuncName = inserted.CorpFuncName AND
           pr.CorpName = inserted.CorpName AND
           pr.ContainerType = inserted.ContainerType) != @Rows)
    BEGIN
        RAISERROR 30000 'ProdCaptureItemsInsTrigCannot insert because primary key value not found in InformationProduct'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CaptureItems pr, inserted
         WHERE pr.CaptureItemsCode = inserted.CaptureItemsCode) != @Rows)
    BEGIN
        RAISERROR 30000 'ProdCaptureItemsInsTrigCannot insert because primary key value not found in CaptureItems'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [InformationTypeUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: InformationTypeUpdTrig 
 */

CREATE TRIGGER [dbo].[InformationTypeUpdTrig] ON [dbo].[InformationType]
FOR UPDATE AS
BEGIN
    DECLARE
        @InfoTypeCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(InfoTypeCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM InformationProduct ch, deleted
          WHERE ch.InfoTypeCode = deleted.InfoTypeCode) != 0)
        BEGIN
            RAISERROR 30001 'InformationTypeUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [InformationTypeDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: InformationTypeDelTrig 
 */

CREATE TRIGGER [dbo].[InformationTypeDelTrig] ON [dbo].[InformationType]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM InformationProduct ch, deleted
         WHERE ch.InfoTypeCode = deleted.InfoTypeCode) != 0)
    BEGIN
        RAISERROR 30002 'InformationTypeDelTrigCannot delete because foreign keys still exist in InformationProduct'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[InformationProductUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationProductUpdProc 
 */

CREATE PROCEDURE [dbo].[InformationProductUpdProc]
(
    @CreateDate         datetime                = NULL,
    @Code               char(10),
    @RetentionCode      nvarchar(50),
    @VolitilityCode     nvarchar(50),
    @ContainerType      nvarchar(25),
    @CorpFuncName       nvarchar(80),
    @InfoTypeCode       nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE InformationProduct
       SET CreateDate          = @CreateDate,
           Code                = @Code,
           RetentionCode       = @RetentionCode,
           VolitilityCode      = @VolitilityCode,
           InfoTypeCode        = @InfoTypeCode
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'InformationProductUpdProc: Cannot update  in InformationProduct '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[InformationProductSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationProductSelProc 
 */

CREATE PROCEDURE [dbo].[InformationProductSelProc]
(
    @ContainerType      nvarchar(25),
    @CorpFuncName       nvarchar(80),
    @CorpName           nvarchar(50))
AS
BEGIN
    SELECT CreateDate,
           Code,
           RetentionCode,
           VolitilityCode,
           ContainerType,
           CorpFuncName,
           InfoTypeCode,
           CorpName
      FROM InformationProduct
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[InformationProductInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationProductInsProc 
 */

CREATE PROCEDURE [dbo].[InformationProductInsProc]
(
    @CreateDate         datetime                = NULL,
    @Code               char(10),
    @RetentionCode      nvarchar(50),
    @VolitilityCode     nvarchar(50),
    @ContainerType      nvarchar(25),
    @CorpFuncName       nvarchar(80),
    @InfoTypeCode       nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO InformationProduct(CreateDate,
                                   Code,
                                   RetentionCode,
                                   VolitilityCode,
                                   ContainerType,
                                   CorpFuncName,
                                   InfoTypeCode,
                                   CorpName)
    VALUES(@CreateDate,
           @Code,
           @RetentionCode,
           @VolitilityCode,
           @ContainerType,
           @CorpFuncName,
           @InfoTypeCode,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'InformationProductInsProc: Cannot insert because primary key value not found in InformationProduct '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [InformationProductDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: InformationProductDelTrig 
 */

CREATE TRIGGER [dbo].[InformationProductDelTrig] ON [dbo].[InformationProduct]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM ProdCaptureItems ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName AND
           ch.ContainerType = deleted.ContainerType) != 0)
    BEGIN
        RAISERROR 30002 'InformationProductDelTrigCannot delete because foreign keys still exist in ProdCaptureItems'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[InformationProductDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: InformationProductDelProc 
 */

CREATE PROCEDURE [dbo].[InformationProductDelProc]
(
    @ContainerType      nvarchar(25),
    @CorpFuncName       nvarchar(80),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM InformationProduct
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'InformationProductDelProc: Cannot delete because foreign keys still exist in InformationProduct '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [InformationProduct_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[InformationProduct_INS]
   ON [dbo].[InformationProduct]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE InformationProduct
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM InformationProduct t
   JOIN inserted i
   ON 
     t.ContainerType = i.ContainerType
     and t.CorpFuncName = i.CorpFuncName
     and t.CorpName = i.CorpName
GO
/****** Object:  Trigger [CorpContainerDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpContainerDelTrig 
 */

CREATE TRIGGER [dbo].[CorpContainerDelTrig] ON [dbo].[CorpContainer]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM InformationProduct ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.ContainerType = deleted.ContainerType AND
           ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorpContainerDelTrigCannot delete because foreign keys still exist in InformationProduct'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[sp_BatchSourceUpdate]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[sp_BatchSourceUpdate]
(
    @SourceGuid                   nvarchar(50),
    @SourceImage                  image                     = NULL,
    @FQN                          varchar(712)              = NULL,
    @LastAccessDate               datetime                  = NULL,
    @FileLength                   int                       = NULL,
    @LastWriteTime                datetime                  = NULL,
    @RetentionExpirationDate      datetime                  = NULL,
    @Description                  nvarchar(max)             = NULL,
    @RetentionCode                nvarchar(50)              = NULL,
    @MachineID                    nvarchar(250)             = NULL
    )
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSource
       SET SourceImage                   = @SourceImage,
           FQN                           = @FQN,
           LastAccessDate                = @LastAccessDate,
           FileLength                    = @FileLength,
           LastWriteTime                 = @LastWriteTime,
           RetentionExpirationDate       = @RetentionExpirationDate,
           Description                   = @Description,
           RetentionCode                 = @RetentionCode,
           MachineID                     = @MachineID           
     WHERE SourceGuid            = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceUpdProc: Cannot update in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[sp_BatchSourceInsert]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
creaTE PROCEDURE [dbo].[sp_BatchSourceInsert]
(
    @SourceGuid                   nvarchar(50),
    @CreateDate                   datetime                  = NULL,
    @SourceName                   nvarchar(254)             = NULL,
    @SourceImage                  image                     = NULL,
    @SourceTypeCode               nvarchar(50) ,
    @FQN                          varchar(712)              = NULL,    
    @VersionNbr                   int,
    @LastAccessDate               datetime                  = NULL,
    @FileLength                   int                       = NULL,
    @LastWriteTime                datetime                  = NULL,
    @DataSourceOwnerUserID        nvarchar(50),    
    @isPublic                     nchar(1)                  = NULL,
    @FileDirectory                nvarchar(300)             = NULL,
    @OriginalFileType             nvarchar(50)              = NULL,    
    @RetentionExpirationDate      datetime                  = NULL,
    @IsPublicPreviousState        nchar(1)                  = NULL,
    @isAvailable                  nchar(1)                  = NULL,    
    @Description                  nvarchar(max)             = NULL,    
    @CreationDate                 datetime                  = NULL,
    @RetentionCode                nvarchar(50)              = NULL,
    @MachineID                    nvarchar(250)             = NULL,    
    @CRC                          nvarchar(25)              = NULL,
    @StructuredData               bit                       = NULL
    )
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSource(
		   SourceGuid,
           CreateDate,
           SourceName,
    
           SourceImage,
           SourceTypeCode,
           FQN,
    
           VersionNbr,
           LastAccessDate,
           FileLength,
           LastWriteTime,
           DataSourceOwnerUserID,
           
           isPublic,
           FileDirectory,
           OriginalFileType,
    
           RetentionExpirationDate,
           IsPublicPreviousState,
           isAvailable,
    
           Description,
           CreationDate,
           RetentionCode,
           
           MachineID,
           CRC,
           StructuredData
           )
    VALUES(@SourceGuid,
           @CreateDate,
           @SourceName,
           @SourceImage,
           @SourceTypeCode,
           @FQN,
           @VersionNbr,
           @LastAccessDate,
           @FileLength,
           @LastWriteTime,
           @DataSourceOwnerUserID,
           @isPublic,
           @FileDirectory,
           @OriginalFileType,
           @RetentionExpirationDate,
           @IsPublicPreviousState,
           @isAvailable,
           @Description,
           @CreationDate,
           @RetentionCode,
           @MachineID,
           @CRC,
           @StructuredData)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceInsProc: failed insert.'
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  UserDefinedFunction [dbo].[sp_GetSourceContent]    Script Date: 05/18/2011 16:17:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[sp_GetSourceContent](@SourceGuid nvarchar)
RETURNS varbinary(MAX)
AS
BEGIN
DECLARE @Source varbinary(max)
SELECT @Source = SourceImage
FROM DataSource
WHERE SourceGuid = @SourceGuid
RETURN @Source
END
GO
/****** Object:  StoredProcedure [dbo].[spCalcEmailAttachmentSpace]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
-- Stored Procedure

create procedure [dbo].[spCalcEmailAttachmentSpace]
as
update EmailAttachment 
set RecLen = 
 len (EmailGuid)   
      + DATALENGTH ( Attachment )
      + len ( ISNULL ( AttachmentName, 0 ) )
      + len ( ISNULL ( EmailGuid, 0 ) )
      + len ( ISNULL ( AttachmentCode, 0 ) )
      + len ( ISNULL ( RowID, 0 ) )
      + len ( ISNULL ( AttachmentType, 0 ) )
      + len ( ISNULL ( UserID, 0 ) )
      + len ( ISNULL ( isZipFileEntry, 0 ) )
      + len ( ISNULL ( OcrText, 0 ) )
      + len ( ISNULL ( isPublic, 0 ) )
      + len ( ISNULL ( AttachmentLength, 0 ) )
      + len ( ISNULL ( OriginalFileTypeCode, 0 ) )
      + len ( ISNULL ( HiveConnectionName, 0 ) )
      + len ( ISNULL ( HiveActive, 0 ) )
      + len ( ISNULL ( RepoSvrName, 0 ) )
      + len ( ISNULL ( RowCreationDate, 0 ) )
      + len ( ISNULL ( RowLastModDate, 0 ) )
Where RecLen is null
GO
/****** Object:  UserDefinedFunction [dbo].[sp_GetContent]    Script Date: 05/18/2011 16:17:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[sp_GetContent](@SourceGuid nvarchar)
RETURNS varbinary(MAX)
AS
BEGIN
DECLARE @Source varbinary(max)
SELECT @Source = SourceImage
FROM DataSource
WHERE SourceGuid = @SourceGuid
RETURN @Source
END
GO
/****** Object:  Trigger [trigAttachmentType_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigAttachmentType_Update]
   ON [dbo].[AttachmentType]
         AFTER Update 
   AS
         BEGIN 
         UPDATE AttachmentType 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      AttachmentType.AttachmentCode = inserted.AttachmentCode
 End
GO
/****** Object:  View [dbo].[Test01]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[Test01]
as 
Select SourceName, LastAccessDate, 'SRC' as SourceType
from DataSource
GO
/****** Object:  View [dbo].[Test02]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[Test02]
as 
Select Subject, ReceivedTime, 'EM' as SourceType
from Email
GO
/****** Object:  View [dbo].[Test03]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[Test03]
as 
select SourceName as Str1, LastAccessDate as Dte1, SourceType
from Test01
Union 
select Subject as Str1, ReceivedTime as Dte1, SourceType
from Test02
GO
/****** Object:  View [dbo].[gv_Directory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Directory]
AS
/*
** Select all rows from the Directory table
** and the lookup expressions defined for associated tables
*/
SELECT [Directory].* FROM [Directory]
GO
/****** Object:  Table [dbo].[EmailArchParms]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[EmailArchParms](
	[UserID] [nvarchar](50) NOT NULL,
	[ArchiveEmails] [char](1) NULL,
	[RemoveAfterArchive] [char](1) NULL,
	[SetAsDefaultFolder] [char](1) NULL,
	[ArchiveAfterXDays] [char](1) NULL,
	[RemoveAfterXDays] [char](1) NULL,
	[RemoveXDays] [int] NULL,
	[ArchiveXDays] [int] NULL,
	[FolderName] [nvarchar](254) NOT NULL,
	[DB_ID] [nvarchar](50) NOT NULL,
	[ArchiveOnlyIfRead] [nchar](1) NULL,
	[isSysDefault] [bit] NULL,
	[ContainerName] [nvarchar](80) NULL,
	[MachineName] [nvarchar](80) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[nRowID] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_EmailArchParms] ON [dbo].[EmailArchParms] 
(
	[UserID] ASC,
	[FolderName] ASC,
	[ContainerName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[EmailArchParmsUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailArchParmsUpdProc]
(
    @UserID                 nvarchar(50),
    @ArchiveEmails          char(1)                  = NULL,
    @RemoveAfterArchive     char(1)                  = NULL,
    @SetAsDefaultFolder     char(1)                  = NULL,
    @ArchiveAfterXDays      char(1)                  = NULL,
    @RemoveAfterXDays       char(1)                  = NULL,
    @RemoveXDays            int                      = NULL,
    @ArchiveXDays           int                      = NULL,
    @FolderName             nvarchar(254),
    @DB_ID                  nvarchar(50),
    @ArchiveOnlyIfRead      nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE EmailArchParms
       SET ArchiveEmails           = @ArchiveEmails,
           RemoveAfterArchive      = @RemoveAfterArchive,
           SetAsDefaultFolder      = @SetAsDefaultFolder,
           ArchiveAfterXDays       = @ArchiveAfterXDays,
           RemoveAfterXDays        = @RemoveAfterXDays,
           RemoveXDays             = @RemoveXDays,
           ArchiveXDays            = @ArchiveXDays,
           DB_ID                   = @DB_ID,
           ArchiveOnlyIfRead       = @ArchiveOnlyIfRead
     WHERE UserID     = @UserID
       AND FolderName = @FolderName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EmailArchParmsUpdProc: Cannot update  in EmailArchParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailArchParmsSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailArchParmsSelProc]
(
    @UserID                 nvarchar(50),
    @FolderName             nvarchar(254))
AS
BEGIN
    SELECT UserID,
           ArchiveEmails,
           RemoveAfterArchive,
           SetAsDefaultFolder,
           ArchiveAfterXDays,
           RemoveAfterXDays,
           RemoveXDays,
           ArchiveXDays,
           FolderName,
           DB_ID,
           ArchiveOnlyIfRead
      FROM EmailArchParms
     WHERE UserID     = @UserID
       AND FolderName = @FolderName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailArchParmsInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailArchParmsInsProc]
(
    @UserID                 nvarchar(50),
    @ArchiveEmails          char(1)                  = NULL,
    @RemoveAfterArchive     char(1)                  = NULL,
    @SetAsDefaultFolder     char(1)                  = NULL,
    @ArchiveAfterXDays      char(1)                  = NULL,
    @RemoveAfterXDays       char(1)                  = NULL,
    @RemoveXDays            int                      = NULL,
    @ArchiveXDays           int                      = NULL,
    @FolderName             nvarchar(254),
    @DB_ID                  nvarchar(50),
    @ArchiveOnlyIfRead      nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailArchParms(UserID,
                               ArchiveEmails,
                               RemoveAfterArchive,
                               SetAsDefaultFolder,
                               ArchiveAfterXDays,
                               RemoveAfterXDays,
                               RemoveXDays,
                               ArchiveXDays,
                               FolderName,
                               DB_ID,
                               ArchiveOnlyIfRead)
    VALUES(@UserID,
           @ArchiveEmails,
           @RemoveAfterArchive,
           @SetAsDefaultFolder,
           @ArchiveAfterXDays,
           @RemoveAfterXDays,
           @RemoveXDays,
           @ArchiveXDays,
           @FolderName,
           @DB_ID,
           @ArchiveOnlyIfRead)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailArchParmsInsProc: Cannot insert because primary key value not found in EmailArchParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EmailArchParmsDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailArchParmsDelProc]
(
    @UserID                 nvarchar(50),
    @FolderName             nvarchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EmailArchParms
     WHERE UserID     = @UserID
       AND FolderName = @FolderName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EmailArchParmsDelProc: Cannot delete because foreign keys still exist in EmailArchParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[spUpdateEmailMsg]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/*CurrentUser, ReceivedByName As String, ReceivedTime As DateTime, SenderEmailAddress As String, SenderName As String, SentOn As DateTime*/
create PROCEDURE [dbo].[spUpdateEmailMsg]		
		@EmailGuid nvarchar(50),
		@EmailImage image
AS
set nocount on
	Update [Email]	set [EmailImage] = @EmailImage where [EmailGuid] = @EmailGuid

RETURN

/****** Object:  StoredProcedure [dbo].[EditAlbum]    Script Date: 03/18/2007 17:30:39 ******/
SET ANSI_NULLS ON
GO
/****** Object:  StoredProcedure [dbo].[EmailUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailUpdProc]
(
    @EmailGuid                   nvarchar(50),
    @SUBJECT                     nvarchar(2000)            = NULL,
    @SentTO                      nvarchar(2000)            = NULL,
    @Body                        text                      = NULL,
    @Bcc                         nvarchar(max)             = NULL,
    @BillingInformation          nvarchar(200)             = NULL,
    @CC                          nvarchar(max)             = NULL,
    @Companies                   nvarchar(2000)            = NULL,
    @CreationTime                datetime                  = NULL,
    @ReadReceiptRequested        nvarchar(50)              = NULL,
    @ReceivedByName              nvarchar(80),
    @ReceivedTime                datetime,
    @AllRecipients               nvarchar(max)             = NULL,
    @UserID                      nvarchar(80),
    @SenderEmailAddress          nvarchar(80),
    @SenderName                  nvarchar(100),
    @Sensitivity                 nvarchar(50)              = NULL,
    @SentOn                      datetime,
    @MsgSize                     int                       = NULL,
    @DeferredDeliveryTime        datetime                  = NULL,
    @EntryID                     varchar(150)              = NULL,
    @ExpiryTime                  datetime                  = NULL,
    @LastModificationTime        datetime                  = NULL,
    @EmailImage                  image                     = NULL,
    @Accounts                    nvarchar(2000)            = NULL,
    @RowID                       int,
    @ShortSubj                   nvarchar(250)             = NULL,
    @SourceTypeCode              nvarchar(50)              = NULL,
    @OriginalFolder              nvarchar(254)             = NULL,
    @StoreID                     varchar(750)              = NULL,
    @isPublic                    nchar(1)                  = NULL,
    @RetentionExpirationDate     datetime                  = NULL,
    @IsPublicPreviousState       nchar(1)                  = NULL,
    @isAvailable                 nchar(1)                  = NULL,
    @CurrMailFolderID            nvarchar(300)             = NULL,
    @isPerm                      nchar(1)                  = NULL,
    @isMaster                    nchar(1)                  = NULL,
    @CreationDate                datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Email
       SET SUBJECT                      = @SUBJECT,
           SentTO                       = @SentTO,
           Body                         = @Body,
           Bcc                          = @Bcc,
           BillingInformation           = @BillingInformation,
           CC                           = @CC,
           Companies                    = @Companies,
           CreationTime                 = @CreationTime,
           ReadReceiptRequested         = @ReadReceiptRequested,
           ReceivedByName               = @ReceivedByName,
           ReceivedTime                 = @ReceivedTime,
           AllRecipients                = @AllRecipients,
           UserID                       = @UserID,
           SenderEmailAddress           = @SenderEmailAddress,
           SenderName                   = @SenderName,
           Sensitivity                  = @Sensitivity,
           SentOn                       = @SentOn,
           MsgSize                      = @MsgSize,
           DeferredDeliveryTime         = @DeferredDeliveryTime,
           EntryID                      = @EntryID,
           ExpiryTime                   = @ExpiryTime,
           LastModificationTime         = @LastModificationTime,
           EmailImage                   = @EmailImage,
           Accounts                     = @Accounts,
           ShortSubj                    = @ShortSubj,
           SourceTypeCode               = @SourceTypeCode,
           OriginalFolder               = @OriginalFolder,
           StoreID                      = @StoreID,
           isPublic                     = @isPublic,
           RetentionExpirationDate      = @RetentionExpirationDate,
           IsPublicPreviousState        = @IsPublicPreviousState,
           isAvailable                  = @isAvailable,
           CurrMailFolderID             = @CurrMailFolderID,
           isPerm                       = @isPerm,
           isMaster                     = @isMaster,
           CreationDate                 = @CreationDate
     WHERE EmailGuid = @EmailGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EmailUpdProc: Cannot update  in Email '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  View [dbo].[gv_EmailArchParms]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EmailArchParms]
AS
/*
** Select all rows from the EmailArchParms table
** and the lookup expressions defined for associated tables
*/
SELECT [EmailArchParms].* FROM [EmailArchParms]
GO
/****** Object:  View [dbo].[gv_Email]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Email]
AS
/*
** Select all rows from the Email table
** and the lookup expressions defined for associated tables
*/
SELECT [Email].* FROM [Email]
GO
/****** Object:  View [dbo].[gv_QtyDocs]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_QtyDocs]
AS
/*
** Select all rows from the QtyDocs table
** and the lookup expressions defined for associated tables
*/
SELECT [QtyDocs].* FROM [QtyDocs]
GO
/****** Object:  View [dbo].[gv_ProdCaptureItems]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ProdCaptureItems]
AS
/*
** Select all rows from the ProdCaptureItems table
** and the lookup expressions defined for associated tables
*/
SELECT [ProdCaptureItems].* FROM [ProdCaptureItems]
GO
/****** Object:  Table [dbo].[FUncSkipWords]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FUncSkipWords](
	[CorpFuncName] [nvarchar](80) NOT NULL,
	[tgtWord] [nvarchar](18) NOT NULL,
	[CorpName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK24] PRIMARY KEY NONCLUSTERED 
(
	[CorpFuncName] ASC,
	[tgtWord] ASC,
	[CorpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[FUncSkipWordsDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FUncSkipWordsDelProc 
 */

CREATE PROCEDURE [dbo].[FUncSkipWordsDelProc]
(
    @CorpFuncName     nvarchar(80),
    @tgtWord          nvarchar(18),
    @CorpName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM FUncSkipWords
     WHERE CorpFuncName = @CorpFuncName
       AND tgtWord      = @tgtWord
       AND CorpName     = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'FUncSkipWordsDelProc: Cannot delete because foreign keys still exist in FUncSkipWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [FUncSkipWords_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[FUncSkipWords_INS]
   ON [dbo].[FUncSkipWords]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE FUncSkipWords
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM FUncSkipWords t
   JOIN inserted i
   ON 
     t.CorpFuncName = i.CorpFuncName
     and t.tgtWord = i.tgtWord
     and t.CorpName = i.CorpName
GO
/****** Object:  View [dbo].[gv_DataSourceCheckOut]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DataSourceCheckOut]
AS
/*
** Select all rows from the DataSourceCheckOut table
** and the lookup expressions defined for associated tables
*/
SELECT [DataSourceCheckOut].* FROM [DataSourceCheckOut]
GO
/****** Object:  View [dbo].[gv_DataSource]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DataSource]
AS
/*
** Select all rows from the DataSource table
** and the lookup expressions defined for associated tables
*/
SELECT [DataSource].* FROM [DataSource]
GO
/****** Object:  View [dbo].[gv_Retention]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Retention]
AS
/*
** Select all rows from the Retention table
** and the lookup expressions defined for associated tables
*/
SELECT [Retention].* FROM [Retention]
GO
/****** Object:  View [dbo].[gv_RepeatData]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RepeatData]
AS
/*
** Select all rows from the RepeatData table
** and the lookup expressions defined for associated tables
*/
SELECT [RepeatData].* FROM [RepeatData]
GO
/****** Object:  View [dbo].[gv_Recipients]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Recipients]
AS
/*
** Select all rows from the Recipients table
** and the lookup expressions defined for associated tables
*/
SELECT [Recipients].* FROM [Recipients]
GO
/****** Object:  Table [dbo].[UserGroup]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserGroup](
	[GroupOwnerUserID] [nvarchar](50) NOT NULL,
	[GroupName] [nvarchar](80) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK43] PRIMARY KEY CLUSTERED 
(
	[GroupOwnerUserID] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UI_UserGroup] ON [dbo].[UserGroup] 
(
	[GroupName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GroupLibraryAccess]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GroupLibraryAccess](
	[UserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[GroupOwnerUserID] [nvarchar](50) NOT NULL,
	[GroupName] [nvarchar](80) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK70] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[LibraryName] ASC,
	[GroupOwnerUserID] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GroupLibAccess] ON [dbo].[GroupLibraryAccess] 
(
	[UserID] ASC,
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[GroupLibraryAccessSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupLibraryAccessSelProc]
(
    @UserID               nvarchar(50),
    @LibraryName          nvarchar(80),
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    SELECT UserID,
           LibraryName,
           GroupOwnerUserID,
           GroupName
      FROM GroupLibraryAccess
     WHERE UserID           = @UserID
       AND LibraryName      = @LibraryName
       AND GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[GroupLibraryAccessInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupLibraryAccessInsProc]
(
    @UserID               nvarchar(50),
    @LibraryName          nvarchar(80),
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO GroupLibraryAccess(UserID,
                                   LibraryName,
                                   GroupOwnerUserID,
                                   GroupName)
    VALUES(@UserID,
           @LibraryName,
           @GroupOwnerUserID,
           @GroupName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'GroupLibraryAccessInsProc: Cannot insert because primary key value not found in GroupLibraryAccess '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[GroupLibraryAccessDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupLibraryAccessDelProc]
(
    @UserID               nvarchar(50),
    @LibraryName          nvarchar(80),
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM GroupLibraryAccess
     WHERE UserID           = @UserID
       AND LibraryName      = @LibraryName
       AND GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'GroupLibraryAccessDelProc: Cannot delete because foreign keys still exist in GroupLibraryAccess '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [GroupLibraryAccess_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[GroupLibraryAccess_INS]
   ON [dbo].[GroupLibraryAccess]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE GroupLibraryAccess
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM GroupLibraryAccess t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.LibraryName = i.LibraryName
     and t.GroupOwnerUserID = i.GroupOwnerUserID
     and t.GroupName = i.GroupName
GO
/****** Object:  View [dbo].[gv_LibEmail]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LibEmail]
AS
/*
** Select all rows from the LibEmail table
** and the lookup expressions defined for associated tables
*/
SELECT [LibEmail].* FROM [LibEmail]
GO
/****** Object:  Table [dbo].[ZippedFiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ZippedFiles](
	[ContentGUID] [nvarchar](50) NOT NULL,
	[SourceTypeCode] [nvarchar](50) NULL,
	[SourceImage] [image] NULL,
	[SourceGuid] [nvarchar](50) NOT NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK88] PRIMARY KEY CLUSTERED 
(
	[ContentGUID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_ZippedFiles]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ZippedFiles]
AS
/*
** Select all rows from the ZippedFiles table
** and the lookup expressions defined for associated tables
*/
SELECT [ZippedFiles].* FROM [ZippedFiles]
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_SelectByDataSourceOwnerUserIDAndSourceGuid]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_SelectByDataSourceOwnerUserIDAndSourceGuid]
(
	@DataSourceOwnerUserID nvarchar(50),
	@SourceGuid nvarchar(50)
)
AS
/*
** Select rows from the ZippedFiles table by DataSourceOwnerUserID and SourceGuid
*/
SELECT 
	gv_ZippedFiles.*
FROM
	gv_ZippedFiles WHERE [DataSourceOwnerUserID] = @DataSourceOwnerUserID AND [SourceGuid] = @SourceGuid ORDER BY [ContentGUID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_SelectByContentGUID]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_SelectByContentGUID]
(
	@ContentGUID nvarchar(50)
)
AS
/*
** Select a row from the ZippedFiles table by primary key
*/

SELECT 
	gv_ZippedFiles.*
FROM
	gv_ZippedFiles WHERE [ContentGUID] = @ContentGUID
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_SelectAll]
AS
/*
** Select all rows from the ZippedFiles table
*/

SELECT 
	gv_ZippedFiles.*
FROM
	gv_ZippedFiles
ORDER BY
	[ContentGUID]
GO
/****** Object:  View [dbo].[gv_FUncSkipWords]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_FUncSkipWords]
AS
/*
** Select all rows from the FUncSkipWords table
** and the lookup expressions defined for associated tables
*/
SELECT [FUncSkipWords].* FROM [FUncSkipWords]
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_Update]
(
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@tgtWordOriginal nvarchar(18), 
	@tgtWord nvarchar(18),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50)
)
AS
/*
** Update a row in the FUncSkipWords table using the primary key
*/
UPDATE [FUncSkipWords] SET [CorpFuncName] = @CorpFuncName, [tgtWord] = @tgtWord, [CorpName] = @CorpName WHERE [CorpFuncName] = @CorpFuncNameOriginal AND [tgtWord] = @tgtWordOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords
WHERE
	[CorpFuncName] = @CorpFuncNameOriginal
	AND [tgtWord] = @tgtWordOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_SelectBytgtWord]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_SelectBytgtWord]
(
	@tgtWord nvarchar(18)
)
AS
/*
** Select rows from the FUncSkipWords table by tgtWord
*/
SELECT 
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords WHERE [tgtWord] = @tgtWord ORDER BY [CorpFuncName], [tgtWord], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_SelectByCorpFuncNameAndtgtWordAndCorpName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_SelectByCorpFuncNameAndtgtWordAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@tgtWord nvarchar(18),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the FUncSkipWords table by primary key
*/

SELECT 
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords WHERE [CorpFuncName] = @CorpFuncName AND [tgtWord] = @tgtWord AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_SelectByCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_SelectByCorpFuncNameAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the FUncSkipWords table by CorpFuncName and CorpName
*/
SELECT 
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName ORDER BY [CorpFuncName], [tgtWord], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_SelectAll]
AS
/*
** Select all rows from the FUncSkipWords table
*/

SELECT 
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords
ORDER BY
	[CorpFuncName],
	[tgtWord],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_Insert]
(
	@CorpFuncName nvarchar(80),
	@tgtWord nvarchar(18),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the FUncSkipWords table
*/

INSERT INTO [FUncSkipWords]
( [CorpFuncName], [tgtWord], [CorpName]
)
VALUES
( @CorpFuncName, @tgtWord, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_FUncSkipWords.*
FROM
	gv_FUncSkipWords
WHERE
	[CorpFuncName] = @CorpFuncName
	AND [tgtWord] = @tgtWord
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_FUncSkipWords_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FUncSkipWords_Delete]
(
	@CorpFuncName nvarchar(80),
	@tgtWord nvarchar(18),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the FUncSkipWords table
*/
DELETE FROM [FUncSkipWords] WHERE [CorpFuncName] = @CorpFuncName AND [tgtWord] = @tgtWord AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the FUncSkipWords table', 16, 1)
END
GO
/****** Object:  Table [dbo].[GroupUsers]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GroupUsers](
	[UserID] [nvarchar](50) NOT NULL,
	[FullAccess] [bit] NULL,
	[ReadOnlyAccess] [bit] NULL,
	[DeleteAccess] [bit] NULL,
	[Searchable] [bit] NULL,
	[GroupOwnerUserID] [nvarchar](50) NOT NULL,
	[GroupName] [nvarchar](80) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK44] PRIMARY KEY NONCLUSTERED 
(
	[GroupName] ASC,
	[UserID] ASC,
	[GroupOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_GroupUsers] ON [dbo].[GroupUsers] 
(
	[GroupOwnerUserID] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GroupUser] ON [dbo].[GroupUsers] 
(
	[UserID] ASC,
	[GroupName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_Delete]
(
	@UserID nvarchar(50),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Delete a row from the GroupUsers table
*/
DELETE FROM [GroupUsers] WHERE [UserID] = @UserID AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the GroupUsers table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_Delete]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Delete a row from the GroupLibraryAccess table
*/
DELETE FROM [GroupLibraryAccess] WHERE [UserID] = @UserID AND [LibraryName] = @LibraryName AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the GroupLibraryAccess table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_Library]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Library]
AS
/*
** Select all rows from the Library table
** and the lookup expressions defined for associated tables
*/
SELECT [Library].* FROM [Library]
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_SelectByUserIDAndLibraryName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_SelectByUserIDAndLibraryName]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Select a row from the Library table by primary key
*/

SELECT 
	gv_Library.*
FROM
	gv_Library WHERE [UserID] = @UserID AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_SelectByUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the Library table by UserID
*/
SELECT 
	gv_Library.*
FROM
	gv_Library WHERE [UserID] = @UserID ORDER BY [UserID], [LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_SelectAll]
AS
/*
** Select all rows from the Library table
*/

SELECT 
	gv_Library.*
FROM
	gv_Library
ORDER BY
	[UserID],
	[LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_Update]
(
	@EmailFolderEntryIDOriginal nvarchar(200), 
	@EmailFolderEntryID nvarchar(200),
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@FolderName nvarchar(250)
)
AS
/*
** Update a row in the LibEmail table using the primary key
*/
UPDATE [LibEmail] SET [EmailFolderEntryID] = @EmailFolderEntryID, [UserID] = @UserID, [LibraryName] = @LibraryName, [FolderName] = @FolderName WHERE [EmailFolderEntryID] = @EmailFolderEntryIDOriginal AND [UserID] = @UserIDOriginal AND [LibraryName] = @LibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_LibEmail.*
FROM
	gv_LibEmail
WHERE
	[EmailFolderEntryID] = @EmailFolderEntryIDOriginal
	AND [UserID] = @UserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_SelectByLibraryNameAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_SelectByLibraryNameAndUserID]
(
	@LibraryName nvarchar(80),
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the LibEmail table by LibraryName and UserID
*/
SELECT 
	gv_LibEmail.*
FROM
	gv_LibEmail WHERE [LibraryName] = @LibraryName AND [UserID] = @UserID ORDER BY [EmailFolderEntryID], [UserID], [LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_SelectByEmailFolderEntryIDAndUserIDAndLibraryName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_SelectByEmailFolderEntryIDAndUserIDAndLibraryName]
(
	@EmailFolderEntryID nvarchar(200),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Select a row from the LibEmail table by primary key
*/

SELECT 
	gv_LibEmail.*
FROM
	gv_LibEmail WHERE [EmailFolderEntryID] = @EmailFolderEntryID AND [UserID] = @UserID AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_SelectAll]
AS
/*
** Select all rows from the LibEmail table
*/

SELECT 
	gv_LibEmail.*
FROM
	gv_LibEmail
ORDER BY
	[EmailFolderEntryID],
	[UserID],
	[LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_Insert]
(
	@EmailFolderEntryID nvarchar(200),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80),
	@FolderName nvarchar(250)
)
AS
/*
** Add a row to the LibEmail table
*/

INSERT INTO [LibEmail]
( [EmailFolderEntryID], [UserID], [LibraryName], [FolderName]
)
VALUES
( @EmailFolderEntryID, @UserID, @LibraryName, @FolderName
)

/*
** Select the new row
*/
SELECT
	gv_LibEmail.*
FROM
	gv_LibEmail
WHERE
	[EmailFolderEntryID] = @EmailFolderEntryID
	AND [UserID] = @UserID
	AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibEmail_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibEmail_Delete]
(
	@EmailFolderEntryID nvarchar(200),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Delete a row from the LibEmail table
*/
DELETE FROM [LibEmail] WHERE [EmailFolderEntryID] = @EmailFolderEntryID AND [UserID] = @UserID AND [LibraryName] = @LibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LibEmail table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_Delete]
(
	@DirectoryName nvarchar(254),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Delete a row from the LibDirectory table
*/
DELETE FROM [LibDirectory] WHERE [DirectoryName] = @DirectoryName AND [UserID] = @UserID AND [LibraryName] = @LibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LibDirectory table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationType_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationType_Delete]
(
	@InfoTypeCode nvarchar(50)
)
AS
/*
** Delete a row from the InformationType table
*/
DELETE FROM [InformationType] WHERE [InfoTypeCode] = @InfoTypeCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the InformationType table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_InformationProduct]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_InformationProduct]
AS
/*
** Select all rows from the InformationProduct table
** and the lookup expressions defined for associated tables
*/
SELECT [InformationProduct].* FROM [InformationProduct]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectByCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectByCode]
(
	@Code char(10)
)
AS
/*
** Select rows from the InformationProduct table by Code
*/
SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct WHERE [Code] = @Code ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectAll]
AS
/*
** Select all rows from the InformationProduct table
*/

SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct
ORDER BY
	[ContainerType],
	[CorpFuncName],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_Insert]
(
	@CreateDate datetime,
	@Code char(10),
	@RetentionCode nvarchar(50),
	@VolitilityCode nvarchar(50),
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@InfoTypeCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the InformationProduct table
*/

INSERT INTO [InformationProduct]
( [CreateDate], [Code], [RetentionCode], [VolitilityCode], [ContainerType], [CorpFuncName], [InfoTypeCode], [CorpName]
)
VALUES
( @CreateDate, @Code, @RetentionCode, @VolitilityCode, @ContainerType, @CorpFuncName, @InfoTypeCode, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_InformationProduct.*
FROM
	gv_InformationProduct
WHERE
	[ContainerType] = @ContainerType
	AND [CorpFuncName] = @CorpFuncName
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_Delete]
(
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the InformationProduct table
*/
DELETE FROM [InformationProduct] WHERE [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the InformationProduct table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_Update]
(
	@SourceGuidOriginal nvarchar(50), 
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserIDOriginal nvarchar(50), 
	@DataSourceOwnerUserID nvarchar(50),
	@CheckedOutByUserIDOriginal nvarchar(50), 
	@CheckedOutByUserID nvarchar(50),
	@isReadOnly bit,
	@isForUpdate bit,
	@checkOutDate datetime
)
AS
/*
** Update a row in the DataSourceCheckOut table using the primary key
*/
UPDATE [DataSourceCheckOut] SET [SourceGuid] = @SourceGuid, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [CheckedOutByUserID] = @CheckedOutByUserID, [isReadOnly] = @isReadOnly, [isForUpdate] = @isForUpdate, [checkOutDate] = @checkOutDate WHERE [SourceGuid] = @SourceGuidOriginal AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal AND [CheckedOutByUserID] = @CheckedOutByUserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut
WHERE
	[SourceGuid] = @SourceGuidOriginal
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal
	AND [CheckedOutByUserID] = @CheckedOutByUserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_SelectBySourceGuidAndDataSourceOwnerUserIDAndCheckedOutByUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_SelectBySourceGuidAndDataSourceOwnerUserIDAndCheckedOutByUserID]
(
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@CheckedOutByUserID nvarchar(50)
)
AS
/*
** Select a row from the DataSourceCheckOut table by primary key
*/

SELECT 
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut WHERE [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID AND [CheckedOutByUserID] = @CheckedOutByUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_SelectByDataSourceOwnerUserIDAndSourceGuid]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_SelectByDataSourceOwnerUserIDAndSourceGuid]
(
	@DataSourceOwnerUserID nvarchar(50),
	@SourceGuid nvarchar(50)
)
AS
/*
** Select rows from the DataSourceCheckOut table by DataSourceOwnerUserID and SourceGuid
*/
SELECT 
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut WHERE [DataSourceOwnerUserID] = @DataSourceOwnerUserID AND [SourceGuid] = @SourceGuid ORDER BY [SourceGuid], [DataSourceOwnerUserID], [CheckedOutByUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_SelectByCheckedOutByUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_SelectByCheckedOutByUserID]
(
	@CheckedOutByUserID nvarchar(50)
)
AS
/*
** Select rows from the DataSourceCheckOut table by CheckedOutByUserID
*/
SELECT 
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut WHERE [CheckedOutByUserID] = @CheckedOutByUserID ORDER BY [SourceGuid], [DataSourceOwnerUserID], [CheckedOutByUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_SelectAll]
AS
/*
** Select all rows from the DataSourceCheckOut table
*/

SELECT 
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut
ORDER BY
	[SourceGuid],
	[DataSourceOwnerUserID],
	[CheckedOutByUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_Insert]
(
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@CheckedOutByUserID nvarchar(50),
	@isReadOnly bit,
	@isForUpdate bit,
	@checkOutDate datetime
)
AS
/*
** Add a row to the DataSourceCheckOut table
*/

INSERT INTO [DataSourceCheckOut]
( [SourceGuid], [DataSourceOwnerUserID], [CheckedOutByUserID], [isReadOnly], [isForUpdate], [checkOutDate]
)
VALUES
( @SourceGuid, @DataSourceOwnerUserID, @CheckedOutByUserID, @isReadOnly, @isForUpdate, @checkOutDate
)

/*
** Select the new row
*/
SELECT
	gv_DataSourceCheckOut.*
FROM
	gv_DataSourceCheckOut
WHERE
	[SourceGuid] = @SourceGuid
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
	AND [CheckedOutByUserID] = @CheckedOutByUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceCheckOut_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceCheckOut_Delete]
(
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@CheckedOutByUserID nvarchar(50)
)
AS
/*
** Delete a row from the DataSourceCheckOut table
*/
DELETE FROM [DataSourceCheckOut] WHERE [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID AND [CheckedOutByUserID] = @CheckedOutByUserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DataSourceCheckOut table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSource_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSource_Update]
(
	@SourceGuidOriginal nvarchar(50), 
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserIDOriginal nvarchar(50), 
	@DataSourceOwnerUserID nvarchar(50),
	@CreateDate datetime,
	@SourceName nvarchar(254),
	@SourceImage image,
	@SourceTypeCode nvarchar(50),
	@FQN nvarchar(254),
	@VersionNbr int,
	@LastAccessDate datetime,
	@FileLength int,
	@LastWriteTime datetime,
	@UserID nvarchar(50),
	@isPublic nchar(1),
	@FileDirectory nvarchar(300),
	@OriginalFileType nvarchar(50),
	@RetentionExpirationDate datetime,
	@IsPublicPreviousState nchar(1),
	@isAvailable nchar(1),
	@isContainedWithinZipFile nchar(1),
	@IsZipFile nchar(1),
	@DataVerified bit,
	@ZipFileGuid nvarchar(50),
	@ZipFileFQN nvarchar(254),
	@Description nvarchar(max),
	@KeyWords nvarchar(2000),
	@Notes nvarchar(2000),
	@isPerm nchar(1),
	@isMaster nchar(1),
	@CreationDate datetime,
	@OcrPerformed nchar(1),
	@isGraphic nchar(1),
	@GraphicContainsText nchar(1),
	@OcrText nvarchar(max),
	@ImageHiddenText nvarchar(max),
	@isWebPage nchar(1),
	@ParentGuid nvarchar(50)
)
AS
/*
** Update a row in the DataSource table using the primary key
*/
UPDATE [DataSource] SET [SourceGuid] = @SourceGuid, [CreateDate] = @CreateDate, [SourceName] = @SourceName, [SourceImage] = @SourceImage, [SourceTypeCode] = @SourceTypeCode, [FQN] = @FQN, [VersionNbr] = @VersionNbr, [LastAccessDate] = @LastAccessDate, [FileLength] = @FileLength, [LastWriteTime] = @LastWriteTime, [UserID] = @UserID, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [isPublic] = @isPublic, [FileDirectory] = @FileDirectory, [OriginalFileType] = @OriginalFileType, [RetentionExpirationDate] = @RetentionExpirationDate, [IsPublicPreviousState] = @IsPublicPreviousState, [isAvailable] = @isAvailable, [isContainedWithinZipFile] = @isContainedWithinZipFile, [IsZipFile] = @IsZipFile, [DataVerified] = @DataVerified, [ZipFileGuid] = @ZipFileGuid, [ZipFileFQN] = @ZipFileFQN, [Description] = @Description, [KeyWords] = @KeyWords, [Notes] = @Notes, [isPerm] = @isPerm, [isMaster] = @isMaster, [CreationDate] = @CreationDate, [OcrPerformed] = @OcrPerformed, [isGraphic] = @isGraphic, [GraphicContainsText] = @GraphicContainsText, [OcrText] = @OcrText, [ImageHiddenText] = @ImageHiddenText, [isWebPage] = @isWebPage, [ParentGuid] = @ParentGuid WHERE [SourceGuid] = @SourceGuidOriginal AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_DataSource.*
FROM
	gv_DataSource
WHERE
	[SourceGuid] = @SourceGuidOriginal
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSource_SelectBySourceGuidAndDataSourceOwnerUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSource_SelectBySourceGuidAndDataSourceOwnerUserID]
(
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Select a row from the DataSource table by primary key
*/

SELECT 
	gv_DataSource.*
FROM
	gv_DataSource WHERE [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSource_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSource_SelectAll]
AS
/*
** Select all rows from the DataSource table
*/

SELECT 
	gv_DataSource.*
FROM
	gv_DataSource
ORDER BY
	[SourceGuid],
	[DataSourceOwnerUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSource_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSource_Insert]
(
	@SourceGuid nvarchar(50),
	@CreateDate datetime,
	@SourceName nvarchar(254),
	@SourceImage image,
	@SourceTypeCode nvarchar(50),
	@FQN nvarchar(254),
	@VersionNbr int,
	@LastAccessDate datetime,
	@FileLength int,
	@LastWriteTime datetime,
	@UserID nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@isPublic nchar(1),
	@FileDirectory nvarchar(300),
	@OriginalFileType nvarchar(50),
	@RetentionExpirationDate datetime,
	@IsPublicPreviousState nchar(1),
	@isAvailable nchar(1),
	@isContainedWithinZipFile nchar(1),
	@IsZipFile nchar(1),
	@DataVerified bit,
	@ZipFileGuid nvarchar(50),
	@ZipFileFQN nvarchar(254),
	@Description nvarchar(max),
	@KeyWords nvarchar(2000),
	@Notes nvarchar(2000),
	@isPerm nchar(1),
	@isMaster nchar(1),
	@CreationDate datetime,
	@OcrPerformed nchar(1),
	@isGraphic nchar(1),
	@GraphicContainsText nchar(1),
	@OcrText nvarchar(max),
	@ImageHiddenText nvarchar(max),
	@isWebPage nchar(1),
	@ParentGuid nvarchar(50)
)
AS
/*
** Add a row to the DataSource table
*/

INSERT INTO [DataSource]
( [SourceGuid], [CreateDate], [SourceName], [SourceImage], [SourceTypeCode], [FQN], [VersionNbr], [LastAccessDate], [FileLength], [LastWriteTime], [UserID], [DataSourceOwnerUserID], [isPublic], [FileDirectory], [OriginalFileType], [RetentionExpirationDate], [IsPublicPreviousState], [isAvailable], [isContainedWithinZipFile], [IsZipFile], [DataVerified], [ZipFileGuid], [ZipFileFQN], [Description], [KeyWords], [Notes], [isPerm], [isMaster], [CreationDate], [OcrPerformed], [isGraphic], [GraphicContainsText], [OcrText], [ImageHiddenText], [isWebPage], [ParentGuid]
)
VALUES
( @SourceGuid, @CreateDate, @SourceName, @SourceImage, @SourceTypeCode, @FQN, @VersionNbr, @LastAccessDate, @FileLength, @LastWriteTime, @UserID, @DataSourceOwnerUserID, @isPublic, @FileDirectory, @OriginalFileType, @RetentionExpirationDate, @IsPublicPreviousState, @isAvailable, @isContainedWithinZipFile, @IsZipFile, @DataVerified, @ZipFileGuid, @ZipFileFQN, @Description, @KeyWords, @Notes, @isPerm, @isMaster, @CreationDate, @OcrPerformed, @isGraphic, @GraphicContainsText, @OcrText, @ImageHiddenText, @isWebPage, @ParentGuid
)

/*
** Select the new row
*/
SELECT
	gv_DataSource.*
FROM
	gv_DataSource
WHERE
	[SourceGuid] = @SourceGuid
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSource_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSource_Delete]
(
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Delete a row from the DataSource table
*/
DELETE FROM [DataSource] WHERE [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DataSource table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachmentSearchList_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachmentSearchList_SelectAll]
AS
/*
** Select all rows from the EmailAttachmentSearchList table
*/

SELECT 
	gv_EmailAttachmentSearchList.*
FROM
	gv_EmailAttachmentSearchList
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachmentSearchList_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachmentSearchList_Insert]
(
	@UserID nvarchar(50),
	@EmailGuid nvarchar(50)
)
AS
/*
** Add a row to the EmailAttachmentSearchList table
*/

INSERT INTO [EmailAttachmentSearchList]
( [UserID], [EmailGuid]
)
VALUES
( @UserID, @EmailGuid
)

/*
** Select the new row
*/
SELECT
	gv_EmailAttachmentSearchList.*
FROM
	gv_EmailAttachmentSearchList
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_Update]
(
	@RowIDOriginal int,
	@Attachment image,
	@AttachmentName nvarchar(254),
	@EmailGuid nvarchar(50),
	@AttachmentCode nvarchar(50),
	@AttachmentType nvarchar(50),
	@UserID nvarchar(50),
	@isZipFileEntry bit,
	@OcrText nvarchar(max),
	@isPublic char(1)
)
AS
/*
** Update a row in the EmailAttachment table using the primary key
*/
UPDATE [EmailAttachment] SET [Attachment] = @Attachment, [AttachmentName] = @AttachmentName, [EmailGuid] = @EmailGuid, [AttachmentCode] = @AttachmentCode, [AttachmentType] = @AttachmentType, [UserID] = @UserID, [isZipFileEntry] = @isZipFileEntry, [OcrText] = @OcrText, [isPublic] = @isPublic WHERE [RowID] = @RowIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment
WHERE
	[RowID] = @RowIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_SelectByUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the EmailAttachment table by UserID
*/
SELECT 
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment WHERE [UserID] = @UserID ORDER BY [RowID]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_SelectByRowID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_SelectByRowID]
(
	@RowID int
)
AS
/*
** Select a row from the EmailAttachment table by primary key
*/

SELECT 
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment WHERE [RowID] = @RowID
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_SelectByEmailGuid]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_SelectByEmailGuid]
(
	@EmailGuid nvarchar(50)
)
AS
/*
** Select rows from the EmailAttachment table by EmailGuid
*/
SELECT 
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment WHERE [EmailGuid] = @EmailGuid ORDER BY [RowID]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_SelectAll]
AS
/*
** Select all rows from the EmailAttachment table
*/

SELECT 
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment
ORDER BY
	[RowID]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_Insert]
(
	@Attachment image,
	@AttachmentName nvarchar(254),
	@EmailGuid nvarchar(50),
	@AttachmentCode nvarchar(50),
	@AttachmentType nvarchar(50),
	@UserID nvarchar(50),
	@isZipFileEntry bit,
	@OcrText nvarchar(max),
	@isPublic char(1)
)
AS
/*
** Add a row to the EmailAttachment table
*/

INSERT INTO [EmailAttachment]
( [Attachment], [AttachmentName], [EmailGuid], [AttachmentCode], [AttachmentType], [UserID], [isZipFileEntry], [OcrText], [isPublic]
)
VALUES
( @Attachment, @AttachmentName, @EmailGuid, @AttachmentCode, @AttachmentType, @UserID, @isZipFileEntry, @OcrText, @isPublic
)

/*
** Select the new row
*/
SELECT
	gv_EmailAttachment.*
FROM
	gv_EmailAttachment
WHERE
	[RowID] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachment_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachment_Delete]
(
	@RowID int
)
AS
/*
** Delete a row from the EmailAttachment table
*/
DELETE FROM [EmailAttachment] WHERE [RowID] = @RowID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the EmailAttachment table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@FolderNameOriginal nvarchar(254), 
	@FolderName nvarchar(254),
	@ArchiveEmails char(1),
	@RemoveAfterArchive char(1),
	@SetAsDefaultFolder char(1),
	@ArchiveAfterXDays char(1),
	@RemoveAfterXDays char(1),
	@RemoveXDays int,
	@ArchiveXDays int,
	@DB_ID nvarchar(50),
	@ArchiveOnlyIfRead nchar(1),
	@isSysDefault bit
)
AS
/*
** Update a row in the EmailArchParms table using the primary key
*/
UPDATE [EmailArchParms] SET [UserID] = @UserID, [ArchiveEmails] = @ArchiveEmails, [RemoveAfterArchive] = @RemoveAfterArchive, [SetAsDefaultFolder] = @SetAsDefaultFolder, [ArchiveAfterXDays] = @ArchiveAfterXDays, [RemoveAfterXDays] = @RemoveAfterXDays, [RemoveXDays] = @RemoveXDays, [ArchiveXDays] = @ArchiveXDays, [FolderName] = @FolderName, [DB_ID] = @DB_ID, [ArchiveOnlyIfRead] = @ArchiveOnlyIfRead, [isSysDefault] = @isSysDefault WHERE [UserID] = @UserIDOriginal AND [FolderName] = @FolderNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms
WHERE
	[UserID] = @UserIDOriginal
	AND [FolderName] = @FolderNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_SelectByUserIDAndFolderName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_SelectByUserIDAndFolderName]
(
	@UserID nvarchar(50),
	@FolderName nvarchar(254)
)
AS
/*
** Select a row from the EmailArchParms table by primary key
*/

SELECT 
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms WHERE [UserID] = @UserID AND [FolderName] = @FolderName
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_SelectByUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the EmailArchParms table by UserID
*/
SELECT 
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms WHERE [UserID] = @UserID ORDER BY [UserID], [FolderName]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_SelectByDB_ID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_SelectByDB_ID]
(
	@DB_ID nvarchar(50)
)
AS
/*
** Select rows from the EmailArchParms table by DB_ID
*/
SELECT 
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms WHERE [DB_ID] = @DB_ID ORDER BY [UserID], [FolderName]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_SelectAll]
AS
/*
** Select all rows from the EmailArchParms table
*/

SELECT 
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms
ORDER BY
	[UserID],
	[FolderName]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_Insert]
(
	@UserID nvarchar(50),
	@ArchiveEmails char(1),
	@RemoveAfterArchive char(1),
	@SetAsDefaultFolder char(1),
	@ArchiveAfterXDays char(1),
	@RemoveAfterXDays char(1),
	@RemoveXDays int,
	@ArchiveXDays int,
	@FolderName nvarchar(254),
	@DB_ID nvarchar(50),
	@ArchiveOnlyIfRead nchar(1),
	@isSysDefault bit
)
AS
/*
** Add a row to the EmailArchParms table
*/

INSERT INTO [EmailArchParms]
( [UserID], [ArchiveEmails], [RemoveAfterArchive], [SetAsDefaultFolder], [ArchiveAfterXDays], [RemoveAfterXDays], [RemoveXDays], [ArchiveXDays], [FolderName], [DB_ID], [ArchiveOnlyIfRead], [isSysDefault]
)
VALUES
( @UserID, @ArchiveEmails, @RemoveAfterArchive, @SetAsDefaultFolder, @ArchiveAfterXDays, @RemoveAfterXDays, @RemoveXDays, @ArchiveXDays, @FolderName, @DB_ID, @ArchiveOnlyIfRead, @isSysDefault
)

/*
** Select the new row
*/
SELECT
	gv_EmailArchParms.*
FROM
	gv_EmailArchParms
WHERE
	[UserID] = @UserID
	AND [FolderName] = @FolderName
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailArchParms_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailArchParms_Delete]
(
	@UserID nvarchar(50),
	@FolderName nvarchar(254)
)
AS
/*
** Delete a row from the EmailArchParms table
*/
DELETE FROM [EmailArchParms] WHERE [UserID] = @UserID AND [FolderName] = @FolderName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the EmailArchParms table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_Email_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Email_Update]
(
	@EmailGuidOriginal nvarchar(50), 
	@EmailGuid nvarchar(50),
	@SUBJECT nvarchar(2000),
	@SentTO nvarchar(2000),
	@Body text,
	@Bcc nvarchar(max),
	@BillingInformation nvarchar(200),
	@CC nvarchar(max),
	@Companies nvarchar(2000),
	@CreationTime datetime,
	@ReadReceiptRequested nvarchar(50),
	@ReceivedByName nvarchar(80),
	@ReceivedTime datetime,
	@AllRecipients nvarchar(max),
	@UserID nvarchar(80),
	@SenderEmailAddress nvarchar(80),
	@SenderName nvarchar(100),
	@Sensitivity nvarchar(50),
	@SentOn datetime,
	@MsgSize int,
	@DeferredDeliveryTime datetime,
	@EntryID varchar(150),
	@ExpiryTime datetime,
	@LastModificationTime datetime,
	@EmailImage image,
	@Accounts nvarchar(2000),
	@RowID int,
	@ShortSubj nvarchar(250),
	@SourceTypeCode nvarchar(50),
	@OriginalFolder nvarchar(254),
	@StoreID varchar(750),
	@isPublic nchar(1),
	@RetentionExpirationDate datetime,
	@IsPublicPreviousState nchar(1),
	@isAvailable nchar(1),
	@CurrMailFolderID nvarchar(300),
	@isPerm nchar(1),
	@isMaster nchar(1),
	@CreationDate datetime,
	@NbrAttachments int,
	@CRC varchar(50),
	@Description nvarchar(max),
	@KeyWords nvarchar(2000)
)
AS
/*
** Update a row in the Email table using the primary key
*/
UPDATE [Email] SET [EmailGuid] = @EmailGuid, [SUBJECT] = @SUBJECT, [SentTO] = @SentTO, [Body] = @Body, [Bcc] = @Bcc, [BillingInformation] = @BillingInformation, [CC] = @CC, [Companies] = @Companies, [CreationTime] = @CreationTime, [ReadReceiptRequested] = @ReadReceiptRequested, [ReceivedByName] = @ReceivedByName, [ReceivedTime] = @ReceivedTime, [AllRecipients] = @AllRecipients, [UserID] = @UserID, [SenderEmailAddress] = @SenderEmailAddress, [SenderName] = @SenderName, [Sensitivity] = @Sensitivity, [SentOn] = @SentOn, [MsgSize] = @MsgSize, [DeferredDeliveryTime] = @DeferredDeliveryTime, [EntryID] = @EntryID, [ExpiryTime] = @ExpiryTime, [LastModificationTime] = @LastModificationTime, [EmailImage] = @EmailImage, [Accounts] = @Accounts, [ShortSubj] = @ShortSubj, [SourceTypeCode] = @SourceTypeCode, [OriginalFolder] = @OriginalFolder, [StoreID] = @StoreID, [isPublic] = @isPublic, [RetentionExpirationDate] = @RetentionExpirationDate, [IsPublicPreviousState] = @IsPublicPreviousState, [isAvailable] = @isAvailable, [CurrMailFolderID] = @CurrMailFolderID, [isPerm] = @isPerm, [isMaster] = @isMaster, [CreationDate] = @CreationDate, [NbrAttachments] = @NbrAttachments, [CRC] = @CRC, [Description] = @Description, [KeyWords] = @KeyWords WHERE [EmailGuid] = @EmailGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_Email.*
FROM
	gv_Email
WHERE
	[EmailGuid] = @EmailGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Email_SelectByEmailGuid]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Email_SelectByEmailGuid]
(
	@EmailGuid nvarchar(50)
)
AS
/*
** Select a row from the Email table by primary key
*/

SELECT 
	gv_Email.*
FROM
	gv_Email WHERE [EmailGuid] = @EmailGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_Email_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Email_SelectAll]
AS
/*
** Select all rows from the Email table
*/

SELECT 
	gv_Email.*
FROM
	gv_Email
ORDER BY
	[EmailGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_Email_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Email_Insert]
(
	@EmailGuid nvarchar(50),
	@SUBJECT nvarchar(2000),
	@SentTO nvarchar(2000),
	@Body text,
	@Bcc nvarchar(max),
	@BillingInformation nvarchar(200),
	@CC nvarchar(max),
	@Companies nvarchar(2000),
	@CreationTime datetime,
	@ReadReceiptRequested nvarchar(50),
	@ReceivedByName nvarchar(80),
	@ReceivedTime datetime,
	@AllRecipients nvarchar(max),
	@UserID nvarchar(80),
	@SenderEmailAddress nvarchar(80),
	@SenderName nvarchar(100),
	@Sensitivity nvarchar(50),
	@SentOn datetime,
	@MsgSize int,
	@DeferredDeliveryTime datetime,
	@EntryID varchar(150),
	@ExpiryTime datetime,
	@LastModificationTime datetime,
	@EmailImage image,
	@Accounts nvarchar(2000),
	@ShortSubj nvarchar(250),
	@SourceTypeCode nvarchar(50),
	@OriginalFolder nvarchar(254),
	@StoreID varchar(750),
	@isPublic nchar(1),
	@RetentionExpirationDate datetime,
	@IsPublicPreviousState nchar(1),
	@isAvailable nchar(1),
	@CurrMailFolderID nvarchar(300),
	@isPerm nchar(1),
	@isMaster nchar(1),
	@CreationDate datetime,
	@NbrAttachments int,
	@CRC varchar(50),
	@Description nvarchar(max),
	@KeyWords nvarchar(2000)
)
AS
/*
** Add a row to the Email table
*/

INSERT INTO [Email]
( [EmailGuid], [SUBJECT], [SentTO], [Body], [Bcc], [BillingInformation], [CC], [Companies], [CreationTime], [ReadReceiptRequested], [ReceivedByName], [ReceivedTime], [AllRecipients], [UserID], [SenderEmailAddress], [SenderName], [Sensitivity], [SentOn], [MsgSize], [DeferredDeliveryTime], [EntryID], [ExpiryTime], [LastModificationTime], [EmailImage], [Accounts], [ShortSubj], [SourceTypeCode], [OriginalFolder], [StoreID], [isPublic], [RetentionExpirationDate], [IsPublicPreviousState], [isAvailable], [CurrMailFolderID], [isPerm], [isMaster], [CreationDate], [NbrAttachments], [CRC], [Description], [KeyWords]
)
VALUES
( @EmailGuid, @SUBJECT, @SentTO, @Body, @Bcc, @BillingInformation, @CC, @Companies, @CreationTime, @ReadReceiptRequested, @ReceivedByName, @ReceivedTime, @AllRecipients, @UserID, @SenderEmailAddress, @SenderName, @Sensitivity, @SentOn, @MsgSize, @DeferredDeliveryTime, @EntryID, @ExpiryTime, @LastModificationTime, @EmailImage, @Accounts, @ShortSubj, @SourceTypeCode, @OriginalFolder, @StoreID, @isPublic, @RetentionExpirationDate, @IsPublicPreviousState, @isAvailable, @CurrMailFolderID, @isPerm, @isMaster, @CreationDate, @NbrAttachments, @CRC, @Description, @KeyWords
)

/*
** Select the new row
*/
SELECT
	gv_Email.*
FROM
	gv_Email
WHERE
	[EmailGuid] = @EmailGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_Email_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Email_Delete]
(
	@EmailGuid nvarchar(50)
)
AS
/*
** Delete a row from the Email table
*/
DELETE FROM [Email] WHERE [EmailGuid] = @EmailGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Email table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@FQNOriginal varchar(254), 
	@FQN varchar(254),
	@IncludeSubDirs char(1),
	@DB_ID nvarchar(50),
	@VersionFiles char(1),
	@ckMetaData nchar(1),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@QuickRefEntry char(10),
	@isSysDefault bit,
	@OcrDirectory nchar(1)
)
AS
/*
** Update a row in the Directory table using the primary key
*/
UPDATE [Directory] SET [UserID] = @UserID, [IncludeSubDirs] = @IncludeSubDirs, [FQN] = @FQN, [DB_ID] = @DB_ID, [VersionFiles] = @VersionFiles, [ckMetaData] = @ckMetaData, [ckPublic] = @ckPublic, [ckDisableDir] = @ckDisableDir, [QuickRefEntry] = @QuickRefEntry, [isSysDefault] = @isSysDefault, [OcrDirectory] = @OcrDirectory WHERE [UserID] = @UserIDOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_Directory.*
FROM
	gv_Directory
WHERE
	[UserID] = @UserIDOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_SelectByUserIDAndFQN]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_SelectByUserIDAndFQN]
(
	@UserID nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Select a row from the Directory table by primary key
*/

SELECT 
	gv_Directory.*
FROM
	gv_Directory WHERE [UserID] = @UserID AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_SelectByUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the Directory table by UserID
*/
SELECT 
	gv_Directory.*
FROM
	gv_Directory WHERE [UserID] = @UserID ORDER BY [UserID], [FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_SelectByDB_ID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_SelectByDB_ID]
(
	@DB_ID nvarchar(50)
)
AS
/*
** Select rows from the Directory table by DB_ID
*/
SELECT 
	gv_Directory.*
FROM
	gv_Directory WHERE [DB_ID] = @DB_ID ORDER BY [UserID], [FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_SelectAll]
AS
/*
** Select all rows from the Directory table
*/

SELECT 
	gv_Directory.*
FROM
	gv_Directory
ORDER BY
	[UserID],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_Insert]
(
	@UserID nvarchar(50),
	@IncludeSubDirs char(1),
	@FQN varchar(254),
	@DB_ID nvarchar(50),
	@VersionFiles char(1),
	@ckMetaData nchar(1),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@QuickRefEntry char(10),
	@isSysDefault bit,
	@OcrDirectory nchar(1)
)
AS
/*
** Add a row to the Directory table
*/

INSERT INTO [Directory]
( [UserID], [IncludeSubDirs], [FQN], [DB_ID], [VersionFiles], [ckMetaData], [ckPublic], [ckDisableDir], [QuickRefEntry], [isSysDefault], [OcrDirectory]
)
VALUES
( @UserID, @IncludeSubDirs, @FQN, @DB_ID, @VersionFiles, @ckMetaData, @ckPublic, @ckDisableDir, @QuickRefEntry, @isSysDefault, @OcrDirectory
)

/*
** Select the new row
*/
SELECT
	gv_Directory.*
FROM
	gv_Directory
WHERE
	[UserID] = @UserID
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_Directory_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Directory_Delete]
(
	@UserID nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Delete a row from the Directory table
*/
DELETE FROM [Directory] WHERE [UserID] = @UserID AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Directory table', 16, 1)
END
GO
/****** Object:  Table [dbo].[SourceType]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SourceType](
	[SourceTypeCode] [nvarchar](50) NOT NULL,
	[StoreExternal] [bit] NULL,
	[SourceTypeDesc] [nvarchar](254) NULL,
	[Indexable] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK34] PRIMARY KEY CLUSTERED 
(
	[SourceTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoadProfileItem]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoadProfileItem](
	[ProfileName] [nvarchar](50) NOT NULL,
	[SourceTypeCode] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK102] PRIMARY KEY NONCLUSTERED 
(
	[ProfileName] ASC,
	[SourceTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_LoadProfileItem]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LoadProfileItem]
AS
/*
** Select all rows from the LoadProfileItem table
** and the lookup expressions defined for associated tables
*/
SELECT [LoadProfileItem].* FROM [LoadProfileItem]
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_SelectBySourceTypeCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_SelectBySourceTypeCode]
(
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Select rows from the LoadProfileItem table by SourceTypeCode
*/
SELECT 
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem WHERE [SourceTypeCode] = @SourceTypeCode ORDER BY [ProfileName], [SourceTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_SelectByProfileNameAndSourceTypeCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_SelectByProfileNameAndSourceTypeCode]
(
	@ProfileName nvarchar(50),
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Select a row from the LoadProfileItem table by primary key
*/

SELECT 
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem WHERE [ProfileName] = @ProfileName AND [SourceTypeCode] = @SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_SelectByProfileName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_SelectByProfileName]
(
	@ProfileName nvarchar(50)
)
AS
/*
** Select rows from the LoadProfileItem table by ProfileName
*/
SELECT 
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem WHERE [ProfileName] = @ProfileName ORDER BY [ProfileName], [SourceTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_SelectAll]
AS
/*
** Select all rows from the LoadProfileItem table
*/

SELECT 
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem
ORDER BY
	[ProfileName],
	[SourceTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfile_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfile_Update]
(
	@ProfileNameOriginal nvarchar(50), 
	@ProfileName nvarchar(50),
	@ProfileDesc nvarchar(254)
)
AS
/*
** Update a row in the LoadProfile table using the primary key
*/
UPDATE [LoadProfile] SET [ProfileName] = @ProfileName, [ProfileDesc] = @ProfileDesc WHERE [ProfileName] = @ProfileNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_LoadProfile.*
FROM
	gv_LoadProfile
WHERE
	[ProfileName] = @ProfileNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfile_SelectByProfileName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfile_SelectByProfileName]
(
	@ProfileName nvarchar(50)
)
AS
/*
** Select a row from the LoadProfile table by primary key
*/

SELECT 
	gv_LoadProfile.*
FROM
	gv_LoadProfile WHERE [ProfileName] = @ProfileName
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfile_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfile_SelectAll]
AS
/*
** Select all rows from the LoadProfile table
*/

SELECT 
	gv_LoadProfile.*
FROM
	gv_LoadProfile
ORDER BY
	[ProfileName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfile_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfile_Insert]
(
	@ProfileName nvarchar(50),
	@ProfileDesc nvarchar(254)
)
AS
/*
** Add a row to the LoadProfile table
*/

INSERT INTO [LoadProfile]
( [ProfileName], [ProfileDesc]
)
VALUES
( @ProfileName, @ProfileDesc
)

/*
** Select the new row
*/
SELECT
	gv_LoadProfile.*
FROM
	gv_LoadProfile
WHERE
	[ProfileName] = @ProfileName
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfile_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfile_Delete]
(
	@ProfileName nvarchar(50)
)
AS
/*
** Delete a row from the LoadProfile table
*/
DELETE FROM [LoadProfile] WHERE [ProfileName] = @ProfileName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LoadProfile table', 16, 1)
END
GO
/****** Object:  Table [dbo].[LibraryUsers]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LibraryUsers](
	[ReadOnly] [bit] NULL,
	[CreateAccess] [bit] NULL,
	[UpdateAccess] [bit] NULL,
	[DeleteAccess] [bit] NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[LibraryOwnerUserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[NotAddedAsGroupMember] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[SingleUser] [bit] NULL,
	[GroupUser] [bit] NULL,
	[GroupCnt] [int] NULL,
 CONSTRAINT [PK87] PRIMARY KEY NONCLUSTERED 
(
	[LibraryOwnerUserID] ASC,
	[LibraryName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_LibUsers] ON [dbo].[LibraryUsers] 
(
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_LibUers] ON [dbo].[LibraryUsers] 
(
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_LibraryUsers]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LibraryUsers]
AS
/*
** Select all rows from the LibraryUsers table
** and the lookup expressions defined for associated tables
*/
SELECT [LibraryUsers].* FROM [LibraryUsers]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_SelectByUserIDAndLibraryOwnerUserIDAndLibraryName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_SelectByUserIDAndLibraryOwnerUserIDAndLibraryName]
(
	@UserID nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Select a row from the LibraryUsers table by primary key
*/

SELECT 
	gv_LibraryUsers.*
FROM
	gv_LibraryUsers WHERE [UserID] = @UserID AND [LibraryOwnerUserID] = @LibraryOwnerUserID AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_SelectByUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the LibraryUsers table by UserID
*/
SELECT 
	gv_LibraryUsers.*
FROM
	gv_LibraryUsers WHERE [UserID] = @UserID ORDER BY [UserID], [LibraryOwnerUserID], [LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_SelectAll]
AS
/*
** Select all rows from the LibraryUsers table
*/

SELECT 
	gv_LibraryUsers.*
FROM
	gv_LibraryUsers
ORDER BY
	[UserID],
	[LibraryOwnerUserID],
	[LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_QtyDocs_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QtyDocs_Update]
(
	@QtyDocCodeOriginal nvarchar(10), 
	@QtyDocCode nvarchar(10),
	@Description nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Update a row in the QtyDocs table using the primary key
*/
UPDATE [QtyDocs] SET [QtyDocCode] = @QtyDocCode, [Description] = @Description, [CreateDate] = @CreateDate WHERE [QtyDocCode] = @QtyDocCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_QtyDocs.*
FROM
	gv_QtyDocs
WHERE
	[QtyDocCode] = @QtyDocCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_QtyDocs_SelectByQtyDocCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QtyDocs_SelectByQtyDocCode]
(
	@QtyDocCode nvarchar(10)
)
AS
/*
** Select a row from the QtyDocs table by primary key
*/

SELECT 
	gv_QtyDocs.*
FROM
	gv_QtyDocs WHERE [QtyDocCode] = @QtyDocCode
GO
/****** Object:  StoredProcedure [dbo].[gp_QtyDocs_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QtyDocs_SelectAll]
AS
/*
** Select all rows from the QtyDocs table
*/

SELECT 
	gv_QtyDocs.*
FROM
	gv_QtyDocs
ORDER BY
	[QtyDocCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_QtyDocs_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QtyDocs_Insert]
(
	@QtyDocCode nvarchar(10),
	@Description nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Add a row to the QtyDocs table
*/

INSERT INTO [QtyDocs]
( [QtyDocCode], [Description], [CreateDate]
)
VALUES
( @QtyDocCode, @Description, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_QtyDocs.*
FROM
	gv_QtyDocs
WHERE
	[QtyDocCode] = @QtyDocCode
GO
/****** Object:  StoredProcedure [dbo].[gp_QtyDocs_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QtyDocs_Delete]
(
	@QtyDocCode nvarchar(10)
)
AS
/*
** Delete a row from the QtyDocs table
*/
DELETE FROM [QtyDocs] WHERE [QtyDocCode] = @QtyDocCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the QtyDocs table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_Update]
(
	@CaptureItemsCodeOriginal nvarchar(50), 
	@CaptureItemsCode nvarchar(50),
	@ContainerTypeOriginal nvarchar(25), 
	@ContainerType nvarchar(25),
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@SendAlert bit
)
AS
/*
** Update a row in the ProdCaptureItems table using the primary key
*/
UPDATE [ProdCaptureItems] SET [CaptureItemsCode] = @CaptureItemsCode, [SendAlert] = @SendAlert, [ContainerType] = @ContainerType, [CorpFuncName] = @CorpFuncName, [CorpName] = @CorpName WHERE [CaptureItemsCode] = @CaptureItemsCodeOriginal AND [ContainerType] = @ContainerTypeOriginal AND [CorpFuncName] = @CorpFuncNameOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems
WHERE
	[CaptureItemsCode] = @CaptureItemsCodeOriginal
	AND [ContainerType] = @ContainerTypeOriginal
	AND [CorpFuncName] = @CorpFuncNameOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_SelectByContainerTypeAndCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_SelectByContainerTypeAndCorpFuncNameAndCorpName]
(
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the ProdCaptureItems table by ContainerType, CorpFuncName and CorpName
*/
SELECT 
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems WHERE [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName ORDER BY [CaptureItemsCode], [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_SelectByCaptureItemsCodeAndContainerTypeAndCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_SelectByCaptureItemsCodeAndContainerTypeAndCorpFuncNameAndCorpName]
(
	@CaptureItemsCode nvarchar(50),
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the ProdCaptureItems table by primary key
*/

SELECT 
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems WHERE [CaptureItemsCode] = @CaptureItemsCode AND [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_SelectByCaptureItemsCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_SelectByCaptureItemsCode]
(
	@CaptureItemsCode nvarchar(50)
)
AS
/*
** Select rows from the ProdCaptureItems table by CaptureItemsCode
*/
SELECT 
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems WHERE [CaptureItemsCode] = @CaptureItemsCode ORDER BY [CaptureItemsCode], [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_SelectAll]
AS
/*
** Select all rows from the ProdCaptureItems table
*/

SELECT 
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems
ORDER BY
	[CaptureItemsCode],
	[ContainerType],
	[CorpFuncName],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_Insert]
(
	@CaptureItemsCode nvarchar(50),
	@SendAlert bit,
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the ProdCaptureItems table
*/

INSERT INTO [ProdCaptureItems]
( [CaptureItemsCode], [SendAlert], [ContainerType], [CorpFuncName], [CorpName]
)
VALUES
( @CaptureItemsCode, @SendAlert, @ContainerType, @CorpFuncName, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_ProdCaptureItems.*
FROM
	gv_ProdCaptureItems
WHERE
	[CaptureItemsCode] = @CaptureItemsCode
	AND [ContainerType] = @ContainerType
	AND [CorpFuncName] = @CorpFuncName
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_ProdCaptureItems_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProdCaptureItems_Delete]
(
	@CaptureItemsCode nvarchar(50),
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the ProdCaptureItems table
*/
DELETE FROM [ProdCaptureItems] WHERE [CaptureItemsCode] = @CaptureItemsCode AND [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ProdCaptureItems table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_RepeatData_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RepeatData_Update]
(
	@RepeatDataCodeOriginal nvarchar(50), 
	@RepeatDataCode nvarchar(50),
	@RepeatDataDesc nvarchar(4000)
)
AS
/*
** Update a row in the RepeatData table using the primary key
*/
UPDATE [RepeatData] SET [RepeatDataCode] = @RepeatDataCode, [RepeatDataDesc] = @RepeatDataDesc WHERE [RepeatDataCode] = @RepeatDataCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_RepeatData.*
FROM
	gv_RepeatData
WHERE
	[RepeatDataCode] = @RepeatDataCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_RepeatData_SelectByRepeatDataCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RepeatData_SelectByRepeatDataCode]
(
	@RepeatDataCode nvarchar(50)
)
AS
/*
** Select a row from the RepeatData table by primary key
*/

SELECT 
	gv_RepeatData.*
FROM
	gv_RepeatData WHERE [RepeatDataCode] = @RepeatDataCode
GO
/****** Object:  StoredProcedure [dbo].[gp_RepeatData_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RepeatData_SelectAll]
AS
/*
** Select all rows from the RepeatData table
*/

SELECT 
	gv_RepeatData.*
FROM
	gv_RepeatData
ORDER BY
	[RepeatDataCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_RepeatData_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RepeatData_Insert]
(
	@RepeatDataCode nvarchar(50),
	@RepeatDataDesc nvarchar(4000)
)
AS
/*
** Add a row to the RepeatData table
*/

INSERT INTO [RepeatData]
( [RepeatDataCode], [RepeatDataDesc]
)
VALUES
( @RepeatDataCode, @RepeatDataDesc
)

/*
** Select the new row
*/
SELECT
	gv_RepeatData.*
FROM
	gv_RepeatData
WHERE
	[RepeatDataCode] = @RepeatDataCode
GO
/****** Object:  StoredProcedure [dbo].[gp_RepeatData_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RepeatData_Delete]
(
	@RepeatDataCode nvarchar(50)
)
AS
/*
** Delete a row from the RepeatData table
*/
DELETE FROM [RepeatData] WHERE [RepeatDataCode] = @RepeatDataCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the RepeatData table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_Update]
(
	@RecipientOriginal nvarchar(254), 
	@Recipient nvarchar(254),
	@EmailGuidOriginal nvarchar(50), 
	@EmailGuid nvarchar(50),
	@TypeRecp nchar(10)
)
AS
/*
** Update a row in the Recipients table using the primary key
*/
UPDATE [Recipients] SET [Recipient] = @Recipient, [EmailGuid] = @EmailGuid, [TypeRecp] = @TypeRecp WHERE [Recipient] = @RecipientOriginal AND [EmailGuid] = @EmailGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_Recipients.*
FROM
	gv_Recipients
WHERE
	[Recipient] = @RecipientOriginal
	AND [EmailGuid] = @EmailGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_SelectByRecipientAndEmailGuid]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_SelectByRecipientAndEmailGuid]
(
	@Recipient nvarchar(254),
	@EmailGuid nvarchar(50)
)
AS
/*
** Select a row from the Recipients table by primary key
*/

SELECT 
	gv_Recipients.*
FROM
	gv_Recipients WHERE [Recipient] = @Recipient AND [EmailGuid] = @EmailGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_SelectByEmailGuid]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_SelectByEmailGuid]
(
	@EmailGuid nvarchar(50)
)
AS
/*
** Select rows from the Recipients table by EmailGuid
*/
SELECT 
	gv_Recipients.*
FROM
	gv_Recipients WHERE [EmailGuid] = @EmailGuid ORDER BY [Recipient], [EmailGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_SelectAll]
AS
/*
** Select all rows from the Recipients table
*/

SELECT 
	gv_Recipients.*
FROM
	gv_Recipients
ORDER BY
	[Recipient],
	[EmailGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_Insert]
(
	@Recipient nvarchar(254),
	@EmailGuid nvarchar(50),
	@TypeRecp nchar(10)
)
AS
/*
** Add a row to the Recipients table
*/

INSERT INTO [Recipients]
( [Recipient], [EmailGuid], [TypeRecp]
)
VALUES
( @Recipient, @EmailGuid, @TypeRecp
)

/*
** Select the new row
*/
SELECT
	gv_Recipients.*
FROM
	gv_Recipients
WHERE
	[Recipient] = @Recipient
	AND [EmailGuid] = @EmailGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_Recipients_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Recipients_Delete]
(
	@Recipient nvarchar(254),
	@EmailGuid nvarchar(50)
)
AS
/*
** Delete a row from the Recipients table
*/
DELETE FROM [Recipients] WHERE [Recipient] = @Recipient AND [EmailGuid] = @EmailGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Recipients table', 16, 1)
END
GO
/****** Object:  Table [dbo].[QuickRef]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QuickRef](
	[UserID] [nvarchar](50) NOT NULL,
	[QuickRefName] [nvarchar](50) NULL,
	[QuickRefIdNbr] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK91] PRIMARY KEY CLUSTERED 
(
	[QuickRefIdNbr] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_QuickRef] ON [dbo].[QuickRef] 
(
	[UserID] ASC,
	[QuickRefName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QuickRefItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[QuickRefItems](
	[QuickRefIdNbr] [int] NULL,
	[FQN] [nvarchar](300) NULL,
	[QuickRefItemGuid] [nvarchar](50) NOT NULL,
	[SourceGuid] [nvarchar](50) NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NULL,
	[Author] [nvarchar](300) NULL,
	[Description] [nvarchar](max) NULL,
	[Keywords] [nvarchar](2000) NULL,
	[FileName] [nvarchar](80) NULL,
	[DirName] [nvarchar](254) NULL,
	[MarkedForDeletion] [bit] NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[MetadataTag] [nvarchar](50) NULL,
	[MetadataValue] [nvarchar](50) NULL,
	[Library] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK93] PRIMARY KEY CLUSTERED 
(
	[QuickRefItemGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_QuickRef] ON [dbo].[QuickRefItems] 
(
	[FQN] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_QuickRef] ON [dbo].[QuickRefItems] 
(
	[DirName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_QuickRef01] ON [dbo].[QuickRefItems] 
(
	[QuickRefIdNbr] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_QuickRefItems]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_QuickRefItems]
AS
/*
** Select all rows from the QuickRefItems table
** and the lookup expressions defined for associated tables
*/
SELECT [QuickRefItems].* FROM [QuickRefItems]
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_SelectByQuickRefItemGuid]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_SelectByQuickRefItemGuid]
(
	@QuickRefItemGuid nvarchar(50)
)
AS
/*
** Select a row from the QuickRefItems table by primary key
*/

SELECT 
	gv_QuickRefItems.*
FROM
	gv_QuickRefItems WHERE [QuickRefItemGuid] = @QuickRefItemGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_SelectByQuickRefIdNbr]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_SelectByQuickRefIdNbr]
(
	@QuickRefIdNbr int
)
AS
/*
** Select rows from the QuickRefItems table by QuickRefIdNbr
*/
SELECT 
	gv_QuickRefItems.*
FROM
	gv_QuickRefItems WHERE [QuickRefIdNbr] = @QuickRefIdNbr ORDER BY [QuickRefItemGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_SelectAll]
AS
/*
** Select all rows from the QuickRefItems table
*/

SELECT 
	gv_QuickRefItems.*
FROM
	gv_QuickRefItems
ORDER BY
	[QuickRefItemGuid]
GO
/****** Object:  View [dbo].[gv_QuickRef]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_QuickRef]
AS
/*
** Select all rows from the QuickRef table
** and the lookup expressions defined for associated tables
*/
SELECT [QuickRef].* FROM [QuickRef]
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_SelectByUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the QuickRef table by UserID
*/
SELECT 
	gv_QuickRef.*
FROM
	gv_QuickRef WHERE [UserID] = @UserID ORDER BY [QuickRefIdNbr]
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_SelectByQuickRefIdNbr]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_SelectByQuickRefIdNbr]
(
	@QuickRefIdNbr int
)
AS
/*
** Select a row from the QuickRef table by primary key
*/

SELECT 
	gv_QuickRef.*
FROM
	gv_QuickRef WHERE [QuickRefIdNbr] = @QuickRefIdNbr
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_SelectAll]
AS
/*
** Select all rows from the QuickRef table
*/

SELECT 
	gv_QuickRef.*
FROM
	gv_QuickRef
ORDER BY
	[QuickRefIdNbr]
GO
/****** Object:  StoredProcedure [dbo].[gp_Retention_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Retention_Update]
(
	@RetentionCodeOriginal nvarchar(50), 
	@RetentionCode nvarchar(50),
	@RetentionDesc nvarchar(18),
	@RetentionYears int,
	@RetentionAction nvarchar(50)
)
AS
/*
** Update a row in the Retention table using the primary key
*/
UPDATE [Retention] SET [RetentionCode] = @RetentionCode, [RetentionDesc] = @RetentionDesc, [RetentionYears] = @RetentionYears, [RetentionAction] = @RetentionAction WHERE [RetentionCode] = @RetentionCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_Retention.*
FROM
	gv_Retention
WHERE
	[RetentionCode] = @RetentionCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Retention_SelectByRetentionCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Retention_SelectByRetentionCode]
(
	@RetentionCode nvarchar(50)
)
AS
/*
** Select a row from the Retention table by primary key
*/

SELECT 
	gv_Retention.*
FROM
	gv_Retention WHERE [RetentionCode] = @RetentionCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Retention_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Retention_SelectAll]
AS
/*
** Select all rows from the Retention table
*/

SELECT 
	gv_Retention.*
FROM
	gv_Retention
ORDER BY
	[RetentionCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_Retention_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Retention_Insert]
(
	@RetentionCode nvarchar(50),
	@RetentionDesc nvarchar(18),
	@RetentionYears int,
	@RetentionAction nvarchar(50)
)
AS
/*
** Add a row to the Retention table
*/

INSERT INTO [Retention]
( [RetentionCode], [RetentionDesc], [RetentionYears], [RetentionAction]
)
VALUES
( @RetentionCode, @RetentionDesc, @RetentionYears, @RetentionAction
)

/*
** Select the new row
*/
SELECT
	gv_Retention.*
FROM
	gv_Retention
WHERE
	[RetentionCode] = @RetentionCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Retention_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Retention_Delete]
(
	@RetentionCode nvarchar(50)
)
AS
/*
** Delete a row from the Retention table
*/
DELETE FROM [Retention] WHERE [RetentionCode] = @RetentionCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Retention table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceInsProc 
 */

CREATE PROCEDURE [dbo].[DataSourceInsProc]
(
    @SourceGuid         nvarchar(50),
    @CreateDate         datetime                 = NULL,
    @SourceName         nvarchar(254)            = NULL,
    @SourceImage        image                    = NULL,
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSource(SourceGuid,
                           CreateDate,
                           SourceName,
                           SourceImage,
                           SourceTypeCode)
    VALUES(@SourceGuid,
           @CreateDate,
           @SourceName,
           @SourceImage,
           @SourceTypeCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceInsProc: Cannot insert because primary key value not found in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceDelProc 
 */

CREATE PROCEDURE [dbo].[DataSourceDelProc]
(
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DataSource
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DataSourceDelProc: Cannot delete because foreign keys still exist in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceCheckOutUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceCheckOutUpdProc]
(
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50),
    @CheckedOutByUserID        nvarchar(50),
    @isReadOnly                bit                     = NULL,
    @isForUpdate               bit                     = NULL,
    @checkOutDate              datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSourceCheckOut
       SET isReadOnly                 = @isReadOnly,
           isForUpdate                = @isForUpdate,
           checkOutDate               = @checkOutDate
     WHERE SourceGuid            = @SourceGuid
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID
       AND CheckedOutByUserID    = @CheckedOutByUserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceCheckOutUpdProc: Cannot update  in DataSourceCheckOut '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceCheckOutSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceCheckOutSelProc]
(
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50),
    @CheckedOutByUserID        nvarchar(50))
AS
BEGIN
    SELECT SourceGuid,
           DataSourceOwnerUserID,
           CheckedOutByUserID,
           isReadOnly,
           isForUpdate,
           checkOutDate
      FROM DataSourceCheckOut
     WHERE SourceGuid            = @SourceGuid
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID
       AND CheckedOutByUserID    = @CheckedOutByUserID

    RETURN(0)
END
GO
/****** Object:  Trigger [trigCorpFunction_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigCorpFunction_Update]
   ON [dbo].[CorpFunction]
         AFTER Update 
   AS
         BEGIN 
         UPDATE CorpFunction 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      CorpFunction.CorpFuncName = inserted.CorpFuncName
     and CorpFunction.CorpName = inserted.CorpName
 End
GO
/****** Object:  View [dbo].[gv_CorpFunction]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_CorpFunction]
AS
/*
** Select all rows from the CorpFunction table
** and the lookup expressions defined for associated tables
*/
SELECT [CorpFunction].* FROM [CorpFunction]
GO
/****** Object:  Trigger [CorporationUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorporationUpdTrig 
 */

CREATE TRIGGER [dbo].[CorporationUpdTrig] ON [dbo].[Corporation]
FOR UPDATE AS
BEGIN
    DECLARE
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpFunction ch, deleted
          WHERE ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorporationUpdTrigCannot update because foreign keys still exist in CorpFunction'
            ROLLBACK TRAN
        END
    END
-- Parent Update: RESTRICT

    IF (UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM ConvertedDocs ch, deleted
          WHERE ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorporationUpdTrigCannot update because foreign keys still exist in ConvertedDocs'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [CorporationDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorporationDelTrig 
 */

CREATE TRIGGER [dbo].[CorporationDelTrig] ON [dbo].[Corporation]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpFunction ch, deleted
         WHERE ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorporationDelTrigCannot delete because foreign keys still exist in CorpFunction'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM ConvertedDocs ch, deleted
         WHERE ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorporationDelTrigCannot delete because foreign keys still exist in ConvertedDocs'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[CorpFunctionUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpFunctionUpdProc 
 */

CREATE PROCEDURE [dbo].[CorpFunctionUpdProc]
(
    @CorpFuncName     nvarchar(80),
    @CorpFuncDesc     nvarchar(4000)            = NULL,
    @CreateDate       datetime                  = NULL,
    @CorpName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE CorpFunction
       SET CorpFuncDesc      = @CorpFuncDesc,
           CreateDate        = @CreateDate
     WHERE CorpFuncName = @CorpFuncName
       AND CorpName     = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CorpFunctionUpdProc: Cannot update  in CorpFunction '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CorpFunctionSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpFunctionSelProc 
 */

CREATE PROCEDURE [dbo].[CorpFunctionSelProc]
(
    @CorpFuncName     nvarchar(80),
    @CorpName         nvarchar(50))
AS
BEGIN
    SELECT CorpFuncName,
           CorpFuncDesc,
           CreateDate,
           CorpName
      FROM CorpFunction
     WHERE CorpFuncName = @CorpFuncName
       AND CorpName     = @CorpName

    RETURN(0)
END
GO
/****** Object:  Trigger [CorpFunctionInsTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpFunctionInsTrig 
 */

CREATE TRIGGER [dbo].[CorpFunctionInsTrig] ON [dbo].[CorpFunction]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM Corporation pr, inserted
         WHERE pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'CorpFunctionInsTrigCannot insert because primary key value not found in Corporation'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[CorpFunctionInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpFunctionInsProc 
 */

CREATE PROCEDURE [dbo].[CorpFunctionInsProc]
(
    @CorpFuncName     nvarchar(80),
    @CorpFuncDesc     nvarchar(4000)            = NULL,
    @CreateDate       datetime                  = NULL,
    @CorpName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO CorpFunction(CorpFuncName,
                             CorpFuncDesc,
                             CreateDate,
                             CorpName)
    VALUES(@CorpFuncName,
           @CorpFuncDesc,
           @CreateDate,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CorpFunctionInsProc: Cannot insert because primary key value not found in CorpFunction '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CorpFunctionDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpFunctionDelProc 
 */

CREATE PROCEDURE [dbo].[CorpFunctionDelProc]
(
    @CorpFuncName     nvarchar(80),
    @CorpName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM CorpFunction
     WHERE CorpFuncName = @CorpFuncName
       AND CorpName     = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CorpFunctionDelProc: Cannot delete because foreign keys still exist in CorpFunction '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [CorpFunction_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[CorpFunction_INS]
   ON [dbo].[CorpFunction]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE CorpFunction
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM CorpFunction t
   JOIN inserted i
   ON 
     t.CorpFuncName = i.CorpFuncName
     and t.CorpName = i.CorpName
GO
/****** Object:  StoredProcedure [dbo].[CorpContainerUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpContainerUpdProc 
 */

CREATE PROCEDURE [dbo].[CorpContainerUpdProc]
(
    @ContainerType     nvarchar(25),
    @QtyDocCode        nvarchar(10),
    @CorpFuncName      nvarchar(80),
    @CorpName          nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE CorpContainer
       SET QtyDocCode         = @QtyDocCode
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CorpContainerUpdProc: Cannot update  in CorpContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CorpContainerSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: CorpContainerSelProc 
 */

CREATE PROCEDURE [dbo].[CorpContainerSelProc]
(
    @ContainerType     nvarchar(25),
    @CorpFuncName      nvarchar(80),
    @CorpName          nvarchar(50))
AS
BEGIN
    SELECT ContainerType,
           QtyDocCode,
           CorpFuncName,
           CorpName
      FROM CorpContainer
     WHERE ContainerType = @ContainerType
       AND CorpFuncName  = @CorpFuncName
       AND CorpName      = @CorpName

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[Databases]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Databases](
	[DB_ID] [nvarchar](50) NOT NULL,
	[DB_CONN_STR] [nvarchar](254) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK6Databases] PRIMARY KEY CLUSTERED 
(
	[DB_ID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_Databases]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Databases]
AS
/*
** Select all rows from the Databases table
** and the lookup expressions defined for associated tables
*/
SELECT [Databases].* FROM [Databases]
GO
/****** Object:  StoredProcedure [dbo].[gp_Databases_SelectByDB_ID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Databases_SelectByDB_ID]
(
	@DB_ID nvarchar(50)
)
AS
/*
** Select a row from the Databases table by primary key
*/

SELECT 
	gv_Databases.*
FROM
	gv_Databases WHERE [DB_ID] = @DB_ID
GO
/****** Object:  StoredProcedure [dbo].[gp_Databases_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Databases_SelectAll]
AS
/*
** Select all rows from the Databases table
*/

SELECT 
	gv_Databases.*
FROM
	gv_Databases
ORDER BY
	[DB_ID]
GO
/****** Object:  StoredProcedure [dbo].[gp_Corporation_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Corporation_Update]
(
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50)
)
AS
/*
** Update a row in the Corporation table using the primary key
*/
UPDATE [Corporation] SET [CorpName] = @CorpName WHERE [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_Corporation.*
FROM
	gv_Corporation
WHERE
	[CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Corporation_SelectByCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Corporation_SelectByCorpName]
(
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the Corporation table by primary key
*/

SELECT 
	gv_Corporation.*
FROM
	gv_Corporation WHERE [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_Corporation_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Corporation_SelectAll]
AS
/*
** Select all rows from the Corporation table
*/

SELECT 
	gv_Corporation.*
FROM
	gv_Corporation
ORDER BY
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_Corporation_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Corporation_Insert]
(
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the Corporation table
*/

INSERT INTO [Corporation]
( [CorpName]
)
VALUES
( @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_Corporation.*
FROM
	gv_Corporation
WHERE
	[CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_Corporation_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Corporation_Delete]
(
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the Corporation table
*/
DELETE FROM [Corporation] WHERE [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Corporation table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_Update]
(
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@CorpFuncDesc nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Update a row in the CorpFunction table using the primary key
*/
UPDATE [CorpFunction] SET [CorpFuncName] = @CorpFuncName, [CorpFuncDesc] = @CorpFuncDesc, [CreateDate] = @CreateDate, [CorpName] = @CorpName WHERE [CorpFuncName] = @CorpFuncNameOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_CorpFunction.*
FROM
	gv_CorpFunction
WHERE
	[CorpFuncName] = @CorpFuncNameOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_SelectByCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_SelectByCorpName]
(
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the CorpFunction table by CorpName
*/
SELECT 
	gv_CorpFunction.*
FROM
	gv_CorpFunction WHERE [CorpName] = @CorpName ORDER BY [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_SelectByCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_SelectByCorpFuncNameAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the CorpFunction table by primary key
*/

SELECT 
	gv_CorpFunction.*
FROM
	gv_CorpFunction WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_SelectAll]
AS
/*
** Select all rows from the CorpFunction table
*/

SELECT 
	gv_CorpFunction.*
FROM
	gv_CorpFunction
ORDER BY
	[CorpFuncName],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_Insert]
(
	@CorpFuncName nvarchar(80),
	@CorpFuncDesc nvarchar(4000),
	@CreateDate datetime,
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the CorpFunction table
*/

INSERT INTO [CorpFunction]
( [CorpFuncName], [CorpFuncDesc], [CreateDate], [CorpName]
)
VALUES
( @CorpFuncName, @CorpFuncDesc, @CreateDate, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_CorpFunction.*
FROM
	gv_CorpFunction
WHERE
	[CorpFuncName] = @CorpFuncName
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpFunction_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpFunction_Delete]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the CorpFunction table
*/
DELETE FROM [CorpFunction] WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the CorpFunction table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_Update]
(
	@ContainerTypeOriginal nvarchar(25), 
	@ContainerType nvarchar(25),
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@QtyDocCode nvarchar(10)
)
AS
/*
** Update a row in the CorpContainer table using the primary key
*/
UPDATE [CorpContainer] SET [ContainerType] = @ContainerType, [QtyDocCode] = @QtyDocCode, [CorpFuncName] = @CorpFuncName, [CorpName] = @CorpName WHERE [ContainerType] = @ContainerTypeOriginal AND [CorpFuncName] = @CorpFuncNameOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_CorpContainer.*
FROM
	gv_CorpContainer
WHERE
	[ContainerType] = @ContainerTypeOriginal
	AND [CorpFuncName] = @CorpFuncNameOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_SelectByQtyDocCode]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_SelectByQtyDocCode]
(
	@QtyDocCode nvarchar(10)
)
AS
/*
** Select rows from the CorpContainer table by QtyDocCode
*/
SELECT 
	gv_CorpContainer.*
FROM
	gv_CorpContainer WHERE [QtyDocCode] = @QtyDocCode ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_SelectByCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_SelectByCorpFuncNameAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the CorpContainer table by CorpFuncName and CorpName
*/
SELECT 
	gv_CorpContainer.*
FROM
	gv_CorpContainer WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_SelectByContainerTypeAndCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_SelectByContainerTypeAndCorpFuncNameAndCorpName]
(
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the CorpContainer table by primary key
*/

SELECT 
	gv_CorpContainer.*
FROM
	gv_CorpContainer WHERE [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_SelectByContainerType]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_SelectByContainerType]
(
	@ContainerType nvarchar(25)
)
AS
/*
** Select rows from the CorpContainer table by ContainerType
*/
SELECT 
	gv_CorpContainer.*
FROM
	gv_CorpContainer WHERE [ContainerType] = @ContainerType ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_SelectAll]
AS
/*
** Select all rows from the CorpContainer table
*/

SELECT 
	gv_CorpContainer.*
FROM
	gv_CorpContainer
ORDER BY
	[ContainerType],
	[CorpFuncName],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_Insert]
(
	@ContainerType nvarchar(25),
	@QtyDocCode nvarchar(10),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the CorpContainer table
*/

INSERT INTO [CorpContainer]
( [ContainerType], [QtyDocCode], [CorpFuncName], [CorpName]
)
VALUES
( @ContainerType, @QtyDocCode, @CorpFuncName, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_CorpContainer.*
FROM
	gv_CorpContainer
WHERE
	[ContainerType] = @ContainerType
	AND [CorpFuncName] = @CorpFuncName
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_CorpContainer_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CorpContainer_Delete]
(
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the CorpContainer table
*/
DELETE FROM [CorpContainer] WHERE [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the CorpContainer table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_Update]
(
	@RowIdOriginal int,
	@CurrentOwnerUserID nvarchar(50),
	@CreateDate datetime,
	@PreviousOwnerUserID nvarchar(50)
)
AS
/*
** Update a row in the CoOwner table using the primary key
*/
UPDATE [CoOwner] SET [CurrentOwnerUserID] = @CurrentOwnerUserID, [CreateDate] = @CreateDate, [PreviousOwnerUserID] = @PreviousOwnerUserID WHERE [RowId] = @RowIdOriginal


/*
** Select the updated row
*/
SELECT
	gv_CoOwner.*
FROM
	gv_CoOwner
WHERE
	[RowId] = @RowIdOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_SelectByRowId]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_SelectByRowId]
(
	@RowId int
)
AS
/*
** Select a row from the CoOwner table by primary key
*/

SELECT 
	gv_CoOwner.*
FROM
	gv_CoOwner WHERE [RowId] = @RowId
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_SelectByPreviousOwnerUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_SelectByPreviousOwnerUserID]
(
	@PreviousOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the CoOwner table by PreviousOwnerUserID
*/
SELECT 
	gv_CoOwner.*
FROM
	gv_CoOwner WHERE [PreviousOwnerUserID] = @PreviousOwnerUserID ORDER BY [RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_SelectByCurrentOwnerUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_SelectByCurrentOwnerUserID]
(
	@CurrentOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the CoOwner table by CurrentOwnerUserID
*/
SELECT 
	gv_CoOwner.*
FROM
	gv_CoOwner WHERE [CurrentOwnerUserID] = @CurrentOwnerUserID ORDER BY [RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_SelectAll]
AS
/*
** Select all rows from the CoOwner table
*/

SELECT 
	gv_CoOwner.*
FROM
	gv_CoOwner
ORDER BY
	[RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_Insert]
(
	@CurrentOwnerUserID nvarchar(50),
	@CreateDate datetime,
	@PreviousOwnerUserID nvarchar(50)
)
AS
/*
** Add a row to the CoOwner table
*/

INSERT INTO [CoOwner]
( [CurrentOwnerUserID], [CreateDate], [PreviousOwnerUserID]
)
VALUES
( @CurrentOwnerUserID, @CreateDate, @PreviousOwnerUserID
)

/*
** Select the new row
*/
SELECT
	gv_CoOwner.*
FROM
	gv_CoOwner
WHERE
	[RowId] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_CoOwner_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CoOwner_Delete]
(
	@RowId int
)
AS
/*
** Delete a row from the CoOwner table
*/
DELETE FROM [CoOwner] WHERE [RowId] = @RowId

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the CoOwner table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_Update]
(
	@FQNOriginal nvarchar(254), 
	@FQN nvarchar(254),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@FileName nvarchar(254),
	@XMLName nvarchar(254),
	@XMLDIr nvarchar(254),
	@FileDir nvarchar(254)
)
AS
/*
** Update a row in the ConvertedDocs table using the primary key
*/
UPDATE [ConvertedDocs] SET [FQN] = @FQN, [FileName] = @FileName, [XMLName] = @XMLName, [XMLDIr] = @XMLDIr, [FileDir] = @FileDir, [CorpName] = @CorpName WHERE [FQN] = @FQNOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_ConvertedDocs.*
FROM
	gv_ConvertedDocs
WHERE
	[FQN] = @FQNOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_SelectByFQNAndCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_SelectByFQNAndCorpName]
(
	@FQN nvarchar(254),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the ConvertedDocs table by primary key
*/

SELECT 
	gv_ConvertedDocs.*
FROM
	gv_ConvertedDocs WHERE [FQN] = @FQN AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_SelectByCorpName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_SelectByCorpName]
(
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the ConvertedDocs table by CorpName
*/
SELECT 
	gv_ConvertedDocs.*
FROM
	gv_ConvertedDocs WHERE [CorpName] = @CorpName ORDER BY [FQN], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_SelectAll]
AS
/*
** Select all rows from the ConvertedDocs table
*/

SELECT 
	gv_ConvertedDocs.*
FROM
	gv_ConvertedDocs
ORDER BY
	[FQN],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_Insert]
(
	@FQN nvarchar(254),
	@FileName nvarchar(254),
	@XMLName nvarchar(254),
	@XMLDIr nvarchar(254),
	@FileDir nvarchar(254),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the ConvertedDocs table
*/

INSERT INTO [ConvertedDocs]
( [FQN], [FileName], [XMLName], [XMLDIr], [FileDir], [CorpName]
)
VALUES
( @FQN, @FileName, @XMLName, @XMLDIr, @FileDir, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_ConvertedDocs.*
FROM
	gv_ConvertedDocs
WHERE
	[FQN] = @FQN
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_ConvertedDocs_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ConvertedDocs_Delete]
(
	@FQN nvarchar(254),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the ConvertedDocs table
*/
DELETE FROM [ConvertedDocs] WHERE [FQN] = @FQN AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ConvertedDocs table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_Update]
(
	@StoreCodeOriginal nvarchar(50), 
	@StoreCode nvarchar(50),
	@ContainerTypeOriginal nvarchar(25), 
	@ContainerType nvarchar(25)
)
AS
/*
** Update a row in the ContainerStorage table using the primary key
*/
UPDATE [ContainerStorage] SET [StoreCode] = @StoreCode, [ContainerType] = @ContainerType WHERE [StoreCode] = @StoreCodeOriginal AND [ContainerType] = @ContainerTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage
WHERE
	[StoreCode] = @StoreCodeOriginal
	AND [ContainerType] = @ContainerTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_SelectByStoreCodeAndContainerType]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_SelectByStoreCodeAndContainerType]
(
	@StoreCode nvarchar(50),
	@ContainerType nvarchar(25)
)
AS
/*
** Select a row from the ContainerStorage table by primary key
*/

SELECT 
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage WHERE [StoreCode] = @StoreCode AND [ContainerType] = @ContainerType
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_SelectByStoreCode]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_SelectByStoreCode]
(
	@StoreCode nvarchar(50)
)
AS
/*
** Select rows from the ContainerStorage table by StoreCode
*/
SELECT 
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage WHERE [StoreCode] = @StoreCode ORDER BY [StoreCode], [ContainerType]
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_SelectByContainerType]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_SelectByContainerType]
(
	@ContainerType nvarchar(25)
)
AS
/*
** Select rows from the ContainerStorage table by ContainerType
*/
SELECT 
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage WHERE [ContainerType] = @ContainerType ORDER BY [StoreCode], [ContainerType]
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_SelectAll]
AS
/*
** Select all rows from the ContainerStorage table
*/

SELECT 
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage
ORDER BY
	[StoreCode],
	[ContainerType]
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_Insert]
(
	@StoreCode nvarchar(50),
	@ContainerType nvarchar(25)
)
AS
/*
** Add a row to the ContainerStorage table
*/

INSERT INTO [ContainerStorage]
( [StoreCode], [ContainerType]
)
VALUES
( @StoreCode, @ContainerType
)

/*
** Select the new row
*/
SELECT
	gv_ContainerStorage.*
FROM
	gv_ContainerStorage
WHERE
	[StoreCode] = @StoreCode
	AND [ContainerType] = @ContainerType
GO
/****** Object:  StoredProcedure [dbo].[gp_ContainerStorage_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContainerStorage_Delete]
(
	@StoreCode nvarchar(50),
	@ContainerType nvarchar(25)
)
AS
/*
** Delete a row from the ContainerStorage table
*/
DELETE FROM [ContainerStorage] WHERE [StoreCode] = @StoreCode AND [ContainerType] = @ContainerType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ContainerStorage table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_CaptureItems_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CaptureItems_Update]
(
	@CaptureItemsCodeOriginal nvarchar(50), 
	@CaptureItemsCode nvarchar(50),
	@CaptureItemsDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Update a row in the CaptureItems table using the primary key
*/
UPDATE [CaptureItems] SET [CaptureItemsCode] = @CaptureItemsCode, [CaptureItemsDesc] = @CaptureItemsDesc, [CreateDate] = @CreateDate WHERE [CaptureItemsCode] = @CaptureItemsCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_CaptureItems.*
FROM
	gv_CaptureItems
WHERE
	[CaptureItemsCode] = @CaptureItemsCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_CaptureItems_SelectByCaptureItemsCode]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CaptureItems_SelectByCaptureItemsCode]
(
	@CaptureItemsCode nvarchar(50)
)
AS
/*
** Select a row from the CaptureItems table by primary key
*/

SELECT 
	gv_CaptureItems.*
FROM
	gv_CaptureItems WHERE [CaptureItemsCode] = @CaptureItemsCode
GO
/****** Object:  StoredProcedure [dbo].[gp_CaptureItems_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CaptureItems_SelectAll]
AS
/*
** Select all rows from the CaptureItems table
*/

SELECT 
	gv_CaptureItems.*
FROM
	gv_CaptureItems
ORDER BY
	[CaptureItemsCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_CaptureItems_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CaptureItems_Insert]
(
	@CaptureItemsCode nvarchar(50),
	@CaptureItemsDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Add a row to the CaptureItems table
*/

INSERT INTO [CaptureItems]
( [CaptureItemsCode], [CaptureItemsDesc], [CreateDate]
)
VALUES
( @CaptureItemsCode, @CaptureItemsDesc, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_CaptureItems.*
FROM
	gv_CaptureItems
WHERE
	[CaptureItemsCode] = @CaptureItemsCode
GO
/****** Object:  StoredProcedure [dbo].[gp_CaptureItems_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_CaptureItems_Delete]
(
	@CaptureItemsCode nvarchar(50)
)
AS
/*
** Delete a row from the CaptureItems table
*/
DELETE FROM [CaptureItems] WHERE [CaptureItemsCode] = @CaptureItemsCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the CaptureItems table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_BusinessJargonCode]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_BusinessJargonCode]
AS
/*
** Select all rows from the BusinessJargonCode table
** and the lookup expressions defined for associated tables
*/
SELECT [BusinessJargonCode].* FROM [BusinessJargonCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessJargonCode_SelectByJargonCode]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessJargonCode_SelectByJargonCode]
(
	@JargonCode nvarchar(50)
)
AS
/*
** Select a row from the BusinessJargonCode table by primary key
*/

SELECT 
	gv_BusinessJargonCode.*
FROM
	gv_BusinessJargonCode WHERE [JargonCode] = @JargonCode
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessJargonCode_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessJargonCode_SelectAll]
AS
/*
** Select all rows from the BusinessJargonCode table
*/

SELECT 
	gv_BusinessJargonCode.*
FROM
	gv_BusinessJargonCode
ORDER BY
	[JargonCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_Update]
(
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@WordIDOriginal int,
	@JargonWords_tgtWordOriginal nvarchar(50), 
	@JargonWords_tgtWord nvarchar(50),
	@JargonCodeOriginal nvarchar(50), 
	@JargonCode nvarchar(50),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50)
)
AS
/*
** Update a row in the BusinessFunctionJargon table using the primary key
*/
UPDATE [BusinessFunctionJargon] SET [CorpFuncName] = @CorpFuncName, [JargonWords_tgtWord] = @JargonWords_tgtWord, [JargonCode] = @JargonCode, [CorpName] = @CorpName WHERE [CorpFuncName] = @CorpFuncNameOriginal AND [WordID] = @WordIDOriginal AND [JargonWords_tgtWord] = @JargonWords_tgtWordOriginal AND [JargonCode] = @JargonCodeOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon
WHERE
	[CorpFuncName] = @CorpFuncNameOriginal
	AND [WordID] = @WordIDOriginal
	AND [JargonWords_tgtWord] = @JargonWords_tgtWordOriginal
	AND [JargonCode] = @JargonCodeOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_SelectByJargonCodeAndJargonWords_tgtWord]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_SelectByJargonCodeAndJargonWords_tgtWord]
(
	@JargonCode nvarchar(50),
	@JargonWords_tgtWord nvarchar(50)
)
AS
/*
** Select rows from the BusinessFunctionJargon table by JargonCode and JargonWords_tgtWord
*/
SELECT 
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon WHERE [JargonCode] = @JargonCode AND [JargonWords_tgtWord] = @JargonWords_tgtWord ORDER BY [CorpFuncName], [WordID], [JargonWords_tgtWord], [JargonCode], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_SelectByCorpFuncNameAndWordIDAndJargonWords_tgtWordAndJargonCodeAndCorpName]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_SelectByCorpFuncNameAndWordIDAndJargonWords_tgtWordAndJargonCodeAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@WordID int,
	@JargonWords_tgtWord nvarchar(50),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the BusinessFunctionJargon table by primary key
*/

SELECT 
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon WHERE [CorpFuncName] = @CorpFuncName AND [WordID] = @WordID AND [JargonWords_tgtWord] = @JargonWords_tgtWord AND [JargonCode] = @JargonCode AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_SelectByCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_SelectByCorpFuncNameAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the BusinessFunctionJargon table by CorpFuncName and CorpName
*/
SELECT 
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName ORDER BY [CorpFuncName], [WordID], [JargonWords_tgtWord], [JargonCode], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_SelectAll]
AS
/*
** Select all rows from the BusinessFunctionJargon table
*/

SELECT 
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon
ORDER BY
	[CorpFuncName],
	[WordID],
	[JargonWords_tgtWord],
	[JargonCode],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_Insert]
(
	@CorpFuncName nvarchar(80),
	@JargonWords_tgtWord nvarchar(50),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the BusinessFunctionJargon table
*/

INSERT INTO [BusinessFunctionJargon]
( [CorpFuncName], [JargonWords_tgtWord], [JargonCode], [CorpName]
)
VALUES
( @CorpFuncName, @JargonWords_tgtWord, @JargonCode, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_BusinessFunctionJargon.*
FROM
	gv_BusinessFunctionJargon
WHERE
	[CorpFuncName] = @CorpFuncName
	AND [WordID] = (SELECT SCOPE_IDENTITY())
	AND [JargonWords_tgtWord] = @JargonWords_tgtWord
	AND [JargonCode] = @JargonCode
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessFunctionJargon_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessFunctionJargon_Delete]
(
	@CorpFuncName nvarchar(80),
	@WordID int,
	@JargonWords_tgtWord nvarchar(50),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the BusinessFunctionJargon table
*/
DELETE FROM [BusinessFunctionJargon] WHERE [CorpFuncName] = @CorpFuncName AND [WordID] = @WordID AND [JargonWords_tgtWord] = @JargonWords_tgtWord AND [JargonCode] = @JargonCode AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the BusinessFunctionJargon table', 16, 1)
END
GO
/****** Object:  Trigger [EmailAttachmentInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: EmailAttachmentInsTrig 
 */

CREATE TRIGGER [dbo].[EmailAttachmentInsTrig] ON [dbo].[EmailAttachment]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    SELECT @NullRows = COUNT(*)
        FROM inserted
        WHERE  inserted.EmailGuid IS NULL

    SELECT @ValidRows = COUNT(*)
        FROM Email pr, inserted
        WHERE pr.EmailGuid = inserted.EmailGuid

    IF (@NullRows + @ValidRows <> @Rows)
    BEGIN
        RAISERROR 30000 'EmailAttachmentInsTrigCannot insert because primary key value not found in Email'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    SELECT @NullRows = COUNT(*)
        FROM inserted
        WHERE  inserted.AttachmentCode IS NULL

    SELECT @ValidRows = COUNT(*)
        FROM AttachmentType pr, inserted
        WHERE pr.AttachmentCode = inserted.AttachmentCode

    IF (@NullRows + @ValidRows <> @Rows)
    BEGIN
        RAISERROR 30000 'EmailAttachmentInsTrigCannot insert because primary key value not found in AttachmentType'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [Email_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Email_INS]
   ON [dbo].[Email]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Email
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Email t
   JOIN inserted i
   ON 
     t.EmailGuid = i.EmailGuid
GO
/****** Object:  View [dbo].[CoutOfEmails]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create View [dbo].[CoutOfEmails]
as
select COUNT(*) + 2500000 as Rows from email
GO
/****** Object:  StoredProcedure [dbo].[gp_AttachmentType_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttachmentType_Delete]
(
	@AttachmentCode nvarchar(50)
)
AS
/*
** Delete a row from the AttachmentType table
*/
DELETE FROM [AttachmentType] WHERE [AttachmentCode] = @AttachmentCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the AttachmentType table', 16, 1)
END
GO
/****** Object:  Trigger [trigCorporation_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigCorporation_Update]
   ON [dbo].[Corporation]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Corporation 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Corporation.CorpName = inserted.CorpName
 End
GO
/****** Object:  StoredProcedure [dbo].[SubDirDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SubDirDelProc]
(
    @UserID           nvarchar(50),
    @SUBFQN           nvarchar(254),
    @FQN              varchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SubDir
     WHERE UserID = @UserID
       AND SUBFQN = @SUBFQN
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SubDirDelProc: Cannot delete because foreign keys still exist in SubDir '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SubDir_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SubDir_INS]
   ON [dbo].[SubDir]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SubDir
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SubDir t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.FQN = i.FQN
     and t.SUBFQN = i.SUBFQN
GO
/****** Object:  Table [dbo].[Storage]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Storage](
	[StoreCode] [nvarchar](50) NOT NULL,
	[StoreDesc] [nvarchar](18) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK17] PRIMARY KEY CLUSTERED 
(
	[StoreCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Trigger [StorageUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: StorageUpdTrig 
 */

CREATE TRIGGER [dbo].[StorageUpdTrig] ON [dbo].[Storage]
FOR UPDATE AS
BEGIN
    DECLARE
        @StoreCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(StoreCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM ContainerStorage ch, deleted
          WHERE ch.StoreCode = deleted.StoreCode) != 0)
        BEGIN
            RAISERROR 30001 'StorageUpdTrigCannot update because foreign keys still exist in ContainerStorage'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[StorageUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: StorageUpdProc 
 */

CREATE PROCEDURE [dbo].[StorageUpdProc]
(
    @StoreCode      nvarchar(50),
    @StoreDesc      nvarchar(18)            = NULL,
    @CreateDate     datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Storage
       SET StoreDesc       = @StoreDesc,
           CreateDate      = @CreateDate
     WHERE StoreCode = @StoreCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'StorageUpdProc: Cannot update  in Storage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[StorageSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: StorageSelProc 
 */

CREATE PROCEDURE [dbo].[StorageSelProc]
(
    @StoreCode      nvarchar(50))
AS
BEGIN
    SELECT StoreCode,
           StoreDesc,
           CreateDate
      FROM Storage
     WHERE StoreCode = @StoreCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[StorageInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: StorageInsProc 
 */

CREATE PROCEDURE [dbo].[StorageInsProc]
(
    @StoreCode      nvarchar(50),
    @StoreDesc      nvarchar(18)            = NULL,
    @CreateDate     datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Storage(StoreCode,
                        StoreDesc,
                        CreateDate)
    VALUES(@StoreCode,
           @StoreDesc,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'StorageInsProc: Cannot insert because primary key value not found in Storage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [StorageDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: StorageDelTrig 
 */

CREATE TRIGGER [dbo].[StorageDelTrig] ON [dbo].[Storage]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM ContainerStorage ch, deleted
         WHERE ch.StoreCode = deleted.StoreCode) != 0)
    BEGIN
        RAISERROR 30002 'StorageDelTrigCannot delete because foreign keys still exist in ContainerStorage'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[StorageDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: StorageDelProc 
 */

CREATE PROCEDURE [dbo].[StorageDelProc]
(
    @StoreCode      nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Storage
     WHERE StoreCode = @StoreCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'StorageDelProc: Cannot delete because foreign keys still exist in Storage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Storage_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Storage_INS]
   ON [dbo].[Storage]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Storage
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Storage t
   JOIN inserted i
   ON 
     t.StoreCode = i.StoreCode
GO
/****** Object:  Trigger [SourceContainerUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SourceContainerUpdTrig 
 */

CREATE TRIGGER [dbo].[SourceContainerUpdTrig] ON [dbo].[SourceContainer]
FOR UPDATE AS
BEGIN
    DECLARE
        @ContainerType nvarchar(25),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(ContainerType))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpContainer ch, deleted
          WHERE ch.ContainerType = deleted.ContainerType) != 0)
        BEGIN
            RAISERROR 30001 'SourceContainerUpdTrigCannot update because foreign keys still exist in CorpContainer'
            ROLLBACK TRAN
        END
    END
-- Parent Update: RESTRICT

    IF (UPDATE(ContainerType))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM ContainerStorage ch, deleted
          WHERE ch.ContainerType = deleted.ContainerType) != 0)
        BEGIN
            RAISERROR 30001 'SourceContainerUpdTrigCannot update because foreign keys still exist in ContainerStorage'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SourceContainerUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceContainerUpdProc 
 */

CREATE PROCEDURE [dbo].[SourceContainerUpdProc]
(
    @ContainerType     nvarchar(25),
    @ContainerDesc     nvarchar(4000)            = NULL,
    @CreateDate        datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE SourceContainer
       SET ContainerDesc      = @ContainerDesc,
           CreateDate         = @CreateDate
     WHERE ContainerType = @ContainerType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SourceContainerUpdProc: Cannot update  in SourceContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceContainerSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceContainerSelProc 
 */

CREATE PROCEDURE [dbo].[SourceContainerSelProc]
(
    @ContainerType     nvarchar(25))
AS
BEGIN
    SELECT ContainerType,
           ContainerDesc,
           CreateDate
      FROM SourceContainer
     WHERE ContainerType = @ContainerType

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceContainerInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceContainerInsProc 
 */

CREATE PROCEDURE [dbo].[SourceContainerInsProc]
(
    @ContainerType     nvarchar(25),
    @ContainerDesc     nvarchar(4000)            = NULL,
    @CreateDate        datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceContainer(ContainerType,
                                ContainerDesc,
                                CreateDate)
    VALUES(@ContainerType,
           @ContainerDesc,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceContainerInsProc: Cannot insert because primary key value not found in SourceContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [SourceContainerDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SourceContainerDelTrig 
 */

CREATE TRIGGER [dbo].[SourceContainerDelTrig] ON [dbo].[SourceContainer]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpContainer ch, deleted
         WHERE ch.ContainerType = deleted.ContainerType) != 0)
    BEGIN
        RAISERROR 30002 'SourceContainerDelTrigCannot delete because foreign keys still exist in CorpContainer'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM ContainerStorage ch, deleted
         WHERE ch.ContainerType = deleted.ContainerType) != 0)
    BEGIN
        RAISERROR 30002 'SourceContainerDelTrigCannot delete because foreign keys still exist in ContainerStorage'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SourceContainerDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceContainerDelProc 
 */

CREATE PROCEDURE [dbo].[SourceContainerDelProc]
(
    @ContainerType     nvarchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SourceContainer
     WHERE ContainerType = @ContainerType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SourceContainerDelProc: Cannot delete because foreign keys still exist in SourceContainer '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SourceContainer_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SourceContainer_INS]
   ON [dbo].[SourceContainer]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SourceContainer
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SourceContainer t
   JOIN inserted i
   ON 
     t.ContainerType = i.ContainerType
GO
/****** Object:  View [dbo].[gv_SourceContainer]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SourceContainer]
AS
/*
** Select all rows from the SourceContainer table
** and the lookup expressions defined for associated tables
*/
SELECT [SourceContainer].* FROM [SourceContainer]
GO
/****** Object:  Trigger [CorpContainerUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpContainerUpdTrig 
 */

CREATE TRIGGER [dbo].[CorpContainerUpdTrig] ON [dbo].[CorpContainer]
FOR UPDATE AS
BEGIN
    DECLARE
        @ContainerType nvarchar(25),
        @CorpFuncName nvarchar(80),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(ContainerType) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM InformationProduct ch, deleted
          WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.ContainerType = deleted.ContainerType AND
           ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorpContainerUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(ContainerType))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM SourceContainer pr, inserted
          WHERE pr.ContainerType = inserted.ContainerType) != @Rows)
        BEGIN
            RAISERROR 30001 'CorpContainerUpdTrigCannot update because primary key value not found in SourceContainer'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(QtyDocCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM QtyDocs pr, inserted
          WHERE pr.QtyDocCode = inserted.QtyDocCode) != @Rows)
        BEGIN
            RAISERROR 30001 'CorpContainerUpdTrigCannot update because primary key value not found in QtyDocs'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpFunction pr, inserted
          WHERE pr.CorpFuncName = inserted.CorpFuncName AND
             pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'CorpContainerUpdTrigCannot update because primary key value not found in CorpFunction'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [CorpContainerInsTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpContainerInsTrig 
 */

CREATE TRIGGER [dbo].[CorpContainerInsTrig] ON [dbo].[CorpContainer]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM SourceContainer pr, inserted
         WHERE pr.ContainerType = inserted.ContainerType) != @Rows)
    BEGIN
        RAISERROR 30000 'CorpContainerInsTrigCannot insert because primary key value not found in SourceContainer'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM QtyDocs pr, inserted
         WHERE pr.QtyDocCode = inserted.QtyDocCode) != @Rows)
    BEGIN
        RAISERROR 30000 'CorpContainerInsTrigCannot insert because primary key value not found in QtyDocs'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpFunction pr, inserted
         WHERE pr.CorpFuncName = inserted.CorpFuncName AND
           pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'CorpContainerInsTrigCannot insert because primary key value not found in CorpFunction'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [ContainerStorageUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ContainerStorageUpdTrig 
 */

CREATE TRIGGER [dbo].[ContainerStorageUpdTrig] ON [dbo].[ContainerStorage]
FOR UPDATE AS
BEGIN
    DECLARE
        @StoreCode nvarchar(50),
        @ContainerType nvarchar(25),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(StoreCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM Storage pr, inserted
          WHERE pr.StoreCode = inserted.StoreCode) != @Rows)
        BEGIN
            RAISERROR 30001 'ContainerStorageUpdTrigCannot update because primary key value not found in Storage'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(ContainerType))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM SourceContainer pr, inserted
          WHERE pr.ContainerType = inserted.ContainerType) != @Rows)
        BEGIN
            RAISERROR 30001 'ContainerStorageUpdTrigCannot update because primary key value not found in SourceContainer'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [ContainerStorageInsTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ContainerStorageInsTrig 
 */

CREATE TRIGGER [dbo].[ContainerStorageInsTrig] ON [dbo].[ContainerStorage]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM Storage pr, inserted
         WHERE pr.StoreCode = inserted.StoreCode) != @Rows)
    BEGIN
        RAISERROR 30000 'ContainerStorageInsTrigCannot insert because primary key value not found in Storage'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM SourceContainer pr, inserted
         WHERE pr.ContainerType = inserted.ContainerType) != @Rows)
    BEGIN
        RAISERROR 30000 'ContainerStorageInsTrigCannot insert because primary key value not found in SourceContainer'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[RetentionSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RetentionSelProc 
 */

CREATE PROCEDURE [dbo].[RetentionSelProc]
(
    @RetentionCode     nvarchar(50))
AS
BEGIN
    SELECT RetentionCode,
           RetentionDesc
      FROM Retention
     WHERE RetentionCode = @RetentionCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RetentionInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RetentionInsProc 
 */

CREATE PROCEDURE [dbo].[RetentionInsProc]
(
    @RetentionCode     nvarchar(50),
    @RetentionDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Retention(RetentionCode,
                          RetentionDesc)
    VALUES(@RetentionCode,
           @RetentionDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RetentionInsProc: Cannot insert because primary key value not found in Retention '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [RetentionDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: RetentionDelTrig 
 */

CREATE TRIGGER [dbo].[RetentionDelTrig] ON [dbo].[Retention]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM DataSource ch, deleted
         WHERE ch.RetentionCode = deleted.RetentionCode) != 0)
    BEGIN
        RAISERROR 30002 'RetentionDelTrigCannot delete because foreign keys still exist in DataSource'
        ROLLBACK TRAN
    END
    
    IF ((SELECT COUNT(*)
         FROM email ch, deleted
         WHERE ch.RetentionCode = deleted.RetentionCode) != 0)
    BEGIN
        RAISERROR 30002 'RetentionDelTrigCannot delete because foreign keys still exist in EMAIL'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[RetentionDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RetentionDelProc 
 */

CREATE PROCEDURE [dbo].[RetentionDelProc]
(
    @RetentionCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Retention
     WHERE RetentionCode = @RetentionCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'RetentionDelProc: Cannot delete because foreign keys still exist in Retention '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_Insert]
(
	@UserID nvarchar(50),
	@QuickRefName nvarchar(50)
)
AS
/*
** Add a row to the QuickRef table
*/

INSERT INTO [QuickRef]
( [UserID], [QuickRefName]
)
VALUES
( @UserID, @QuickRefName
)

/*
** Select the new row
*/
SELECT
	gv_QuickRef.*
FROM
	gv_QuickRef
WHERE
	[QuickRefIdNbr] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_Delete]
(
	@QuickRefIdNbr int
)
AS
/*
** Delete a row from the QuickRef table
*/
DELETE FROM [QuickRef] WHERE [QuickRefIdNbr] = @QuickRefIdNbr

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the QuickRef table', 16, 1)
END
GO
/****** Object:  Trigger [RetentionUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: RetentionUpdTrig 
 */

CREATE TRIGGER [dbo].[RetentionUpdTrig] ON [dbo].[Retention]
FOR UPDATE AS
BEGIN
    DECLARE
        @RetentionCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(RetentionCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM DataSource ch, deleted
          WHERE ch.RetentionCode = deleted.RetentionCode) != 0)
        BEGIN
            RAISERROR 30001 'RetentionUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
        IF ((SELECT COUNT(*)
          FROM Email ch, deleted
          WHERE ch.RetentionCode = deleted.RetentionCode) != 0)
        BEGIN
            RAISERROR 30001 'RetentionUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[RetentionUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RetentionUpdProc 
 */

CREATE PROCEDURE [dbo].[RetentionUpdProc]
(
    @RetentionCode     nvarchar(50),
    @RetentionDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Retention
       SET RetentionDesc      = @RetentionDesc
     WHERE RetentionCode = @RetentionCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'RetentionUpdProc: Cannot update  in Retention '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [QtyDocsUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: QtyDocsUpdTrig 
 */

CREATE TRIGGER [dbo].[QtyDocsUpdTrig] ON [dbo].[QtyDocs]
FOR UPDATE AS
BEGIN
    DECLARE
        @QtyDocCode nvarchar(10),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(QtyDocCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpContainer ch, deleted
          WHERE ch.QtyDocCode = deleted.QtyDocCode) != 0)
        BEGIN
            RAISERROR 30001 'QtyDocsUpdTrigCannot update because foreign keys still exist in CorpContainer'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[QtyDocsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: QtyDocsUpdProc 
 */

CREATE PROCEDURE [dbo].[QtyDocsUpdProc]
(
    @QtyDocCode      nvarchar(10),
    @Description     nvarchar(4000)            = NULL,
    @CreateDate      datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE QtyDocs
       SET Description      = @Description,
           CreateDate       = @CreateDate
     WHERE QtyDocCode = @QtyDocCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'QtyDocsUpdProc: Cannot update  in QtyDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QtyDocsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: QtyDocsSelProc 
 */

CREATE PROCEDURE [dbo].[QtyDocsSelProc]
(
    @QtyDocCode      nvarchar(10))
AS
BEGIN
    SELECT QtyDocCode,
           Description,
           CreateDate
      FROM QtyDocs
     WHERE QtyDocCode = @QtyDocCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QtyDocsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: QtyDocsInsProc 
 */

CREATE PROCEDURE [dbo].[QtyDocsInsProc]
(
    @QtyDocCode      nvarchar(10),
    @Description     nvarchar(4000)            = NULL,
    @CreateDate      datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO QtyDocs(QtyDocCode,
                        Description,
                        CreateDate)
    VALUES(@QtyDocCode,
           @Description,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'QtyDocsInsProc: Cannot insert because primary key value not found in QtyDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [QtyDocsDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: QtyDocsDelTrig 
 */

CREATE TRIGGER [dbo].[QtyDocsDelTrig] ON [dbo].[QtyDocs]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpContainer ch, deleted
         WHERE ch.QtyDocCode = deleted.QtyDocCode) != 0)
    BEGIN
        RAISERROR 30002 'QtyDocsDelTrigCannot delete because foreign keys still exist in CorpContainer'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[QtyDocsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: QtyDocsDelProc 
 */

CREATE PROCEDURE [dbo].[QtyDocsDelProc]
(
    @QtyDocCode      nvarchar(10))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM QtyDocs
     WHERE QtyDocCode = @QtyDocCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'QtyDocsDelProc: Cannot delete because foreign keys still exist in QtyDocs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [QtyDocs_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[QtyDocs_INS]
   ON [dbo].[QtyDocs]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE QtyDocs
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM QtyDocs t
   JOIN inserted i
   ON 
     t.QtyDocCode = i.QtyDocCode
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileUpdProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileUpdProc]
(
    @ProfileName     nvarchar(50),
    @ProfileDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE LoadProfile
       SET ProfileDesc      = @ProfileDesc
     WHERE ProfileName = @ProfileName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'LoadProfileUpdProc: Cannot update  in LoadProfile '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileSelProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileSelProc]
(
    @ProfileName     nvarchar(50))
AS
BEGIN
    SELECT ProfileName,
           ProfileDesc
      FROM LoadProfile
     WHERE ProfileName = @ProfileName

    RETURN(0)
END
GO
/****** Object:  Trigger [LoadProfileUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: LoadProfileUpdTrig 
 */

CREATE TRIGGER [dbo].[LoadProfileUpdTrig] ON [dbo].[LoadProfile]
FOR UPDATE AS
BEGIN
    DECLARE
        @ProfileName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: CASCADE

    IF (UPDATE(ProfileName))
    BEGIN
        SELECT @ProfileName = ProfileName
        FROM inserted

        UPDATE LoadProfileItem
          SET ProfileName = @ProfileName
        FROM LoadProfileItem ch, deleted
        WHERE
            ch.ProfileName = deleted.ProfileName
    END

END
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileItemSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileItemSelProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileItemSelProc]
(
    @ProfileName        nvarchar(50),
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    SELECT ProfileName,
           SourceTypeCode
      FROM LoadProfileItem
     WHERE ProfileName    = @ProfileName
       AND SourceTypeCode = @SourceTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileItemInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileItemInsProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileItemInsProc]
(
    @ProfileName        nvarchar(50),
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LoadProfileItem(ProfileName,
                                SourceTypeCode)
    VALUES(@ProfileName,
           @SourceTypeCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LoadProfileItemInsProc: Cannot insert because primary key value not found in LoadProfileItem '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileItemDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileItemDelProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileItemDelProc]
(
    @ProfileName        nvarchar(50),
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LoadProfileItem
     WHERE ProfileName    = @ProfileName
       AND SourceTypeCode = @SourceTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LoadProfileItemDelProc: Cannot delete because foreign keys still exist in LoadProfileItem '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LoadProfileItem_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LoadProfileItem_INS]
   ON [dbo].[LoadProfileItem]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LoadProfileItem
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LoadProfileItem t
   JOIN inserted i
   ON 
     t.ProfileName = i.ProfileName
     and t.SourceTypeCode = i.SourceTypeCode
GO
/****** Object:  Trigger [LoadProfileDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: LoadProfileDelTrig 
 */

CREATE TRIGGER [dbo].[LoadProfileDelTrig] ON [dbo].[LoadProfile]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE LoadProfileItem
        FROM LoadProfileItem ch, deleted
        WHERE ch.ProfileName = deleted.ProfileName

END
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_Update]
(
	@ProfileNameOriginal nvarchar(50), 
	@ProfileName nvarchar(50),
	@SourceTypeCodeOriginal nvarchar(50), 
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Update a row in the LoadProfileItem table using the primary key
*/
UPDATE [LoadProfileItem] SET [ProfileName] = @ProfileName, [SourceTypeCode] = @SourceTypeCode WHERE [ProfileName] = @ProfileNameOriginal AND [SourceTypeCode] = @SourceTypeCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem
WHERE
	[ProfileName] = @ProfileNameOriginal
	AND [SourceTypeCode] = @SourceTypeCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_Insert]
(
	@ProfileName nvarchar(50),
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Add a row to the LoadProfileItem table
*/

INSERT INTO [LoadProfileItem]
( [ProfileName], [SourceTypeCode]
)
VALUES
( @ProfileName, @SourceTypeCode
)

/*
** Select the new row
*/
SELECT
	gv_LoadProfileItem.*
FROM
	gv_LoadProfileItem
WHERE
	[ProfileName] = @ProfileName
	AND [SourceTypeCode] = @SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_LoadProfileItem_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LoadProfileItem_Delete]
(
	@ProfileName nvarchar(50),
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Delete a row from the LoadProfileItem table
*/
DELETE FROM [LoadProfileItem] WHERE [ProfileName] = @ProfileName AND [SourceTypeCode] = @SourceTypeCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LoadProfileItem table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[LoadProfileInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: LoadProfileInsProc 
 */

CREATE PROCEDURE [dbo].[LoadProfileInsProc]
(
    @ProfileName     nvarchar(50),
    @ProfileDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LoadProfile(ProfileName,
                            ProfileDesc)
    VALUES(@ProfileName,
           @ProfileDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LoadProfileInsProc: Cannot insert because primary key value not found in LoadProfile '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[JargonWordsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: JargonWordsUpdProc 
 */

CREATE PROCEDURE [dbo].[JargonWordsUpdProc]
(
    @tgtWord        nvarchar(50),
    @jDesc          nvarchar(4000)            = NULL,
    @CreateDate     datetime                  = NULL,
    @JargonCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE JargonWords
       SET jDesc           = @jDesc,
           CreateDate      = @CreateDate
     WHERE tgtWord    = @tgtWord
       AND JargonCode = @JargonCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'JargonWordsUpdProc: Cannot update  in JargonWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[JargonWordsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: JargonWordsSelProc 
 */

CREATE PROCEDURE [dbo].[JargonWordsSelProc]
(
    @tgtWord        nvarchar(50),
    @JargonCode     nvarchar(50))
AS
BEGIN
    SELECT tgtWord,
           jDesc,
           CreateDate,
           JargonCode
      FROM JargonWords
     WHERE tgtWord    = @tgtWord
       AND JargonCode = @JargonCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[JargonWordsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: JargonWordsInsProc 
 */

CREATE PROCEDURE [dbo].[JargonWordsInsProc]
(
    @tgtWord        nvarchar(50),
    @jDesc          nvarchar(4000)            = NULL,
    @CreateDate     datetime                  = NULL,
    @JargonCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO JargonWords(tgtWord,
                            jDesc,
                            CreateDate,
                            JargonCode)
    VALUES(@tgtWord,
           @jDesc,
           @CreateDate,
           @JargonCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'JargonWordsInsProc: Cannot insert because primary key value not found in JargonWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [JargonWordsDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: JargonWordsDelTrig 
 */

CREATE TRIGGER [dbo].[JargonWordsDelTrig] ON [dbo].[JargonWords]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM BusinessFunctionJargon ch, deleted
         WHERE ch.JargonWords_tgtWord = deleted.tgtWord AND
           ch.JargonCode = deleted.JargonCode) != 0)
    BEGIN
        RAISERROR 30002 'JargonWordsDelTrigCannot delete because foreign keys still exist in BusinessFunctionJargon'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[JargonWordsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: JargonWordsDelProc 
 */

CREATE PROCEDURE [dbo].[JargonWordsDelProc]
(
    @tgtWord        nvarchar(50),
    @JargonCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM JargonWords
     WHERE tgtWord    = @tgtWord
       AND JargonCode = @JargonCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'JargonWordsDelProc: Cannot delete because foreign keys still exist in JargonWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [JargonWords_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[JargonWords_INS]
   ON [dbo].[JargonWords]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE JargonWords
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM JargonWords t
   JOIN inserted i
   ON 
     t.JargonCode = i.JargonCode
     and t.tgtWord = i.tgtWord
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_Delete]
(
	@tgtWord nvarchar(50),
	@JargonCode nvarchar(50)
)
AS
/*
** Delete a row from the JargonWords table
*/
DELETE FROM [JargonWords] WHERE [tgtWord] = @tgtWord AND [JargonCode] = @JargonCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the JargonWords table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_Delete]
(
	@UserID nvarchar(50),
	@SubUserID nvarchar(50),
	@LibraryName nvarchar(80),
	@SubLibraryName nvarchar(80)
)
AS
/*
** Delete a row from the SubLibrary table
*/
DELETE FROM [SubLibrary] WHERE [UserID] = @UserID AND [SubUserID] = @SubUserID AND [LibraryName] = @LibraryName AND [SubLibraryName] = @SubLibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SubLibrary table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_Delete]
(
	@UserID nvarchar(50),
	@SUBFQN nvarchar(254),
	@FQN varchar(254)
)
AS
/*
** Delete a row from the SubDir table
*/
DELETE FROM [SubDir] WHERE [UserID] = @UserID AND [SUBFQN] = @SUBFQN AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SubDir table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_Storage]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Storage]
AS
/*
** Select all rows from the Storage table
** and the lookup expressions defined for associated tables
*/
SELECT [Storage].* FROM [Storage]
GO
/****** Object:  StoredProcedure [dbo].[gp_Storage_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Storage_Insert]
(
	@StoreCode nvarchar(50),
	@StoreDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Add a row to the Storage table
*/

INSERT INTO [Storage]
( [StoreCode], [StoreDesc], [CreateDate]
)
VALUES
( @StoreCode, @StoreDesc, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_Storage.*
FROM
	gv_Storage
WHERE
	[StoreCode] = @StoreCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Storage_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Storage_Delete]
(
	@StoreCode nvarchar(50)
)
AS
/*
** Delete a row from the Storage table
*/
DELETE FROM [Storage] WHERE [StoreCode] = @StoreCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Storage table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_SourceType]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SourceType]
AS
/*
** Select all rows from the SourceType table
** and the lookup expressions defined for associated tables
*/
SELECT [SourceType].* FROM [SourceType]
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceType_SelectBySourceTypeCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceType_SelectBySourceTypeCode]
(
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Select a row from the SourceType table by primary key
*/

SELECT 
	gv_SourceType.*
FROM
	gv_SourceType WHERE [SourceTypeCode] = @SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceType_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceType_SelectAll]
AS
/*
** Select all rows from the SourceType table
*/

SELECT 
	gv_SourceType.*
FROM
	gv_SourceType
ORDER BY
	[SourceTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceContainer_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceContainer_Update]
(
	@ContainerTypeOriginal nvarchar(25), 
	@ContainerType nvarchar(25),
	@ContainerDesc nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Update a row in the SourceContainer table using the primary key
*/
UPDATE [SourceContainer] SET [ContainerType] = @ContainerType, [ContainerDesc] = @ContainerDesc, [CreateDate] = @CreateDate WHERE [ContainerType] = @ContainerTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_SourceContainer.*
FROM
	gv_SourceContainer
WHERE
	[ContainerType] = @ContainerTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceContainer_SelectByContainerType]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceContainer_SelectByContainerType]
(
	@ContainerType nvarchar(25)
)
AS
/*
** Select a row from the SourceContainer table by primary key
*/

SELECT 
	gv_SourceContainer.*
FROM
	gv_SourceContainer WHERE [ContainerType] = @ContainerType
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceContainer_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceContainer_SelectAll]
AS
/*
** Select all rows from the SourceContainer table
*/

SELECT 
	gv_SourceContainer.*
FROM
	gv_SourceContainer
ORDER BY
	[ContainerType]
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceContainer_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceContainer_Insert]
(
	@ContainerType nvarchar(25),
	@ContainerDesc nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Add a row to the SourceContainer table
*/

INSERT INTO [SourceContainer]
( [ContainerType], [ContainerDesc], [CreateDate]
)
VALUES
( @ContainerType, @ContainerDesc, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_SourceContainer.*
FROM
	gv_SourceContainer
WHERE
	[ContainerType] = @ContainerType
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceContainer_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceContainer_Delete]
(
	@ContainerType nvarchar(25)
)
AS
/*
** Delete a row from the SourceContainer table
*/
DELETE FROM [SourceContainer] WHERE [ContainerType] = @ContainerType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SourceContainer table', 16, 1)
END
GO
/****** Object:  Table [dbo].[SkipWords]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SkipWords](
	[tgtWord] [nvarchar](18) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK22] PRIMARY KEY NONCLUSTERED 
(
	[tgtWord] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_SkipWords]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SkipWords]
AS
/*
** Select all rows from the SkipWords table
** and the lookup expressions defined for associated tables
*/
SELECT [SkipWords].* FROM [SkipWords]
GO
/****** Object:  StoredProcedure [dbo].[gp_SkipWords_SelectBytgtWord]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SkipWords_SelectBytgtWord]
(
	@tgtWord nvarchar(18)
)
AS
/*
** Select a row from the SkipWords table by primary key
*/

SELECT 
	gv_SkipWords.*
FROM
	gv_SkipWords WHERE [tgtWord] = @tgtWord
GO
/****** Object:  StoredProcedure [dbo].[gp_SkipWords_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SkipWords_SelectAll]
AS
/*
** Select all rows from the SkipWords table
*/

SELECT 
	gv_SkipWords.*
FROM
	gv_SkipWords
ORDER BY
	[tgtWord]
GO
/****** Object:  View [dbo].[gv_FunctionProdJargon]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_FunctionProdJargon]
AS
/*
** Select all rows from the FunctionProdJargon table
** and the lookup expressions defined for associated tables
*/
SELECT [FunctionProdJargon].* FROM [FunctionProdJargon]
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_SelectByRepeatDataCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_SelectByRepeatDataCode]
(
	@RepeatDataCode nvarchar(50)
)
AS
/*
** Select rows from the FunctionProdJargon table by RepeatDataCode
*/
SELECT 
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon WHERE [RepeatDataCode] = @RepeatDataCode ORDER BY [CorpFuncName], [JargonCode], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_SelectByJargonCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_SelectByJargonCode]
(
	@JargonCode nvarchar(50)
)
AS
/*
** Select rows from the FunctionProdJargon table by JargonCode
*/
SELECT 
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon WHERE [JargonCode] = @JargonCode ORDER BY [CorpFuncName], [JargonCode], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_SelectByCorpFuncNameAndJargonCodeAndCorpName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_SelectByCorpFuncNameAndJargonCodeAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the FunctionProdJargon table by primary key
*/

SELECT 
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon WHERE [CorpFuncName] = @CorpFuncName AND [JargonCode] = @JargonCode AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_SelectByCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_SelectByCorpFuncNameAndCorpName]
(
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select rows from the FunctionProdJargon table by CorpFuncName and CorpName
*/
SELECT 
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon WHERE [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName ORDER BY [CorpFuncName], [JargonCode], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_SelectAll]
AS
/*
** Select all rows from the FunctionProdJargon table
*/

SELECT 
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon
ORDER BY
	[CorpFuncName],
	[JargonCode],
	[CorpName]
GO
/****** Object:  StoredProcedure [dbo].[GroupUsersUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupUsersUpdProc]
(
    @UserID               nvarchar(50),
    @FullAccess           bit                     = NULL,
    @ReadOnlyAccess       bit                     = NULL,
    @DeleteAccess         bit                     = NULL,
    @Searchable           bit                     = NULL,
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    UPDATE GroupUsers
       SET FullAccess            = @FullAccess,
           ReadOnlyAccess        = @ReadOnlyAccess,
           DeleteAccess          = @DeleteAccess,
           Searchable            = @Searchable
     WHERE UserID           = @UserID
       AND GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'GroupUsersUpdProc: Cannot update  in GroupUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[GroupUsersSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupUsersSelProc]
(
    @UserID               nvarchar(50),
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    SELECT UserID,
           FullAccess,
           ReadOnlyAccess,
           DeleteAccess,
           Searchable,
           GroupOwnerUserID,
           GroupName
      FROM GroupUsers
     WHERE UserID           = @UserID
       AND GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[GroupUsersInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupUsersInsProc]
(
    @UserID               nvarchar(50),
    @FullAccess           bit                     = NULL,
    @ReadOnlyAccess       bit                     = NULL,
    @DeleteAccess         bit                     = NULL,
    @Searchable           bit                     = NULL,
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO GroupUsers(UserID,
                           FullAccess,
                           ReadOnlyAccess,
                           DeleteAccess,
                           Searchable,
                           GroupOwnerUserID,
                           GroupName)
    VALUES(@UserID,
           @FullAccess,
           @ReadOnlyAccess,
           @DeleteAccess,
           @Searchable,
           @GroupOwnerUserID,
           @GroupName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'GroupUsersInsProc: Cannot insert because primary key value not found in GroupUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[GroupUsersDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GroupUsersDelProc]
(
    @UserID               nvarchar(50),
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM GroupUsers
     WHERE UserID           = @UserID
       AND GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'GroupUsersDelProc: Cannot delete because foreign keys still exist in GroupUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [GroupUsers_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[GroupUsers_INS]
   ON [dbo].[GroupUsers]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE GroupUsers
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM GroupUsers t
   JOIN inserted i
   ON 
     t.GroupName = i.GroupName
     and t.UserID = i.UserID
     and t.GroupOwnerUserID = i.GroupOwnerUserID
GO
/****** Object:  Table [dbo].[Volitility]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Volitility](
	[VolitilityCode] [nvarchar](50) NOT NULL,
	[VolitilityDesc] [nvarchar](18) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK19] PRIMARY KEY CLUSTERED 
(
	[VolitilityCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  View [dbo].[gv_Volitility]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Volitility]
AS
/*
** Select all rows from the Volitility table
** and the lookup expressions defined for associated tables
*/
SELECT [Volitility].* FROM [Volitility]
GO
/****** Object:  StoredProcedure [dbo].[gp_Volitility_SelectByVolitilityCode]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Volitility_SelectByVolitilityCode]
(
	@VolitilityCode nvarchar(50)
)
AS
/*
** Select a row from the Volitility table by primary key
*/

SELECT 
	gv_Volitility.*
FROM
	gv_Volitility WHERE [VolitilityCode] = @VolitilityCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Volitility_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Volitility_SelectAll]
AS
/*
** Select all rows from the Volitility table
*/

SELECT 
	gv_Volitility.*
FROM
	gv_Volitility
ORDER BY
	[VolitilityCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_Users_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Users_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@UserName nvarchar(50),
	@EmailAddress nvarchar(254),
	@UserPassword nvarchar(254),
	@Admin nchar(1),
	@isActive nchar(1),
	@UserLoginID nvarchar(50)
)
AS
/*
** Update a row in the Users table using the primary key
*/
UPDATE [Users] SET [UserID] = @UserID, [UserName] = @UserName, [EmailAddress] = @EmailAddress, [UserPassword] = @UserPassword, [Admin] = @Admin, [isActive] = @isActive, [UserLoginID] = @UserLoginID WHERE [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_Users.*
FROM
	gv_Users
WHERE
	[UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Users_SelectByUserID]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Users_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select a row from the Users table by primary key
*/

SELECT 
	gv_Users.*
FROM
	gv_Users WHERE [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_Users_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Users_SelectAll]
AS
/*
** Select all rows from the Users table
*/

SELECT 
	gv_Users.*
FROM
	gv_Users
ORDER BY
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_Users_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Users_Insert]
(
	@UserID nvarchar(50),
	@UserName nvarchar(50),
	@EmailAddress nvarchar(254),
	@UserPassword nvarchar(254),
	@Admin nchar(1),
	@isActive nchar(1),
	@UserLoginID nvarchar(50)
)
AS
/*
** Add a row to the Users table
*/

INSERT INTO [Users]
( [UserID], [UserName], [EmailAddress], [UserPassword], [Admin], [isActive], [UserLoginID]
)
VALUES
( @UserID, @UserName, @EmailAddress, @UserPassword, @Admin, @isActive, @UserLoginID
)

/*
** Select the new row
*/
SELECT
	gv_Users.*
FROM
	gv_Users
WHERE
	[UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_Users_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Users_Delete]
(
	@UserID nvarchar(50)
)
AS
/*
** Delete a row from the Users table
*/
DELETE FROM [Users] WHERE [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Users table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_GroupUsers]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_GroupUsers]
AS
/*
** Select all rows from the GroupUsers table
** and the lookup expressions defined for associated tables
*/
SELECT [GroupUsers].* FROM [GroupUsers]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@GroupOwnerUserIDOriginal nvarchar(50), 
	@GroupOwnerUserID nvarchar(50),
	@GroupNameOriginal nvarchar(80), 
	@GroupName nvarchar(80),
	@FullAccess bit,
	@ReadOnlyAccess bit,
	@DeleteAccess bit,
	@Searchable bit
)
AS
/*
** Update a row in the GroupUsers table using the primary key
*/
UPDATE [GroupUsers] SET [UserID] = @UserID, [FullAccess] = @FullAccess, [ReadOnlyAccess] = @ReadOnlyAccess, [DeleteAccess] = @DeleteAccess, [Searchable] = @Searchable, [GroupOwnerUserID] = @GroupOwnerUserID, [GroupName] = @GroupName WHERE [UserID] = @UserIDOriginal AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal AND [GroupName] = @GroupNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_GroupUsers.*
FROM
	gv_GroupUsers
WHERE
	[UserID] = @UserIDOriginal
	AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal
	AND [GroupName] = @GroupNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_SelectByUserIDAndGroupOwnerUserIDAndGroupName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_SelectByUserIDAndGroupOwnerUserIDAndGroupName]
(
	@UserID nvarchar(50),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Select a row from the GroupUsers table by primary key
*/

SELECT 
	gv_GroupUsers.*
FROM
	gv_GroupUsers WHERE [UserID] = @UserID AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_SelectByUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_SelectByUserID]
(
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the GroupUsers table by UserID
*/
SELECT 
	gv_GroupUsers.*
FROM
	gv_GroupUsers WHERE [UserID] = @UserID ORDER BY [UserID], [GroupOwnerUserID], [GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_SelectAll]
AS
/*
** Select all rows from the GroupUsers table
*/

SELECT 
	gv_GroupUsers.*
FROM
	gv_GroupUsers
ORDER BY
	[UserID],
	[GroupOwnerUserID],
	[GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupUsers_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupUsers_Insert]
(
	@UserID nvarchar(50),
	@FullAccess bit,
	@ReadOnlyAccess bit,
	@DeleteAccess bit,
	@Searchable bit,
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Add a row to the GroupUsers table
*/

INSERT INTO [GroupUsers]
( [UserID], [FullAccess], [ReadOnlyAccess], [DeleteAccess], [Searchable], [GroupOwnerUserID], [GroupName]
)
VALUES
( @UserID, @FullAccess, @ReadOnlyAccess, @DeleteAccess, @Searchable, @GroupOwnerUserID, @GroupName
)

/*
** Select the new row
*/
SELECT
	gv_GroupUsers.*
FROM
	gv_GroupUsers
WHERE
	[UserID] = @UserID
	AND [GroupOwnerUserID] = @GroupOwnerUserID
	AND [GroupName] = @GroupName
GO
/****** Object:  View [dbo].[gv_GroupLibraryAccess]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_GroupLibraryAccess]
AS
/*
** Select all rows from the GroupLibraryAccess table
** and the lookup expressions defined for associated tables
*/
SELECT [GroupLibraryAccess].* FROM [GroupLibraryAccess]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@GroupOwnerUserIDOriginal nvarchar(50), 
	@GroupOwnerUserID nvarchar(50),
	@GroupNameOriginal nvarchar(80), 
	@GroupName nvarchar(80)
)
AS
/*
** Update a row in the GroupLibraryAccess table using the primary key
*/
UPDATE [GroupLibraryAccess] SET [UserID] = @UserID, [LibraryName] = @LibraryName, [GroupOwnerUserID] = @GroupOwnerUserID, [GroupName] = @GroupName WHERE [UserID] = @UserIDOriginal AND [LibraryName] = @LibraryNameOriginal AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal AND [GroupName] = @GroupNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess
WHERE
	[UserID] = @UserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
	AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal
	AND [GroupName] = @GroupNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_SelectByUserIDAndLibraryNameAndGroupOwnerUserIDAndGroupName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_SelectByUserIDAndLibraryNameAndGroupOwnerUserIDAndGroupName]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Select a row from the GroupLibraryAccess table by primary key
*/

SELECT 
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess WHERE [UserID] = @UserID AND [LibraryName] = @LibraryName AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_SelectByLibraryNameAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_SelectByLibraryNameAndUserID]
(
	@LibraryName nvarchar(80),
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the GroupLibraryAccess table by LibraryName and UserID
*/
SELECT 
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess WHERE [LibraryName] = @LibraryName AND [UserID] = @UserID ORDER BY [UserID], [LibraryName], [GroupOwnerUserID], [GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_SelectByGroupNameAndGroupOwnerUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_SelectByGroupNameAndGroupOwnerUserID]
(
	@GroupName nvarchar(80),
	@GroupOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the GroupLibraryAccess table by GroupName and GroupOwnerUserID
*/
SELECT 
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess WHERE [GroupName] = @GroupName AND [GroupOwnerUserID] = @GroupOwnerUserID ORDER BY [UserID], [LibraryName], [GroupOwnerUserID], [GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_SelectAll]
AS
/*
** Select all rows from the GroupLibraryAccess table
*/

SELECT 
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess
ORDER BY
	[UserID],
	[LibraryName],
	[GroupOwnerUserID],
	[GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_GroupLibraryAccess_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GroupLibraryAccess_Insert]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Add a row to the GroupLibraryAccess table
*/

INSERT INTO [GroupLibraryAccess]
( [UserID], [LibraryName], [GroupOwnerUserID], [GroupName]
)
VALUES
( @UserID, @LibraryName, @GroupOwnerUserID, @GroupName
)

/*
** Select the new row
*/
SELECT
	gv_GroupLibraryAccess.*
FROM
	gv_GroupLibraryAccess
WHERE
	[UserID] = @UserID
	AND [LibraryName] = @LibraryName
	AND [GroupOwnerUserID] = @GroupOwnerUserID
	AND [GroupName] = @GroupName
GO
/****** Object:  Table [dbo].[UD_Qty]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[UD_Qty](
	[Code] [char](10) NOT NULL,
	[Description] [char](10) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK4] PRIMARY KEY NONCLUSTERED 
(
	[Code] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  View [dbo].[gv_UD_Qty]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UD_Qty]
AS
/*
** Select all rows from the UD_Qty table
** and the lookup expressions defined for associated tables
*/
SELECT [UD_Qty].* FROM [UD_Qty]
GO
/****** Object:  StoredProcedure [dbo].[gp_UD_Qty_SelectByCode]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UD_Qty_SelectByCode]
(
	@Code char(10)
)
AS
/*
** Select a row from the UD_Qty table by primary key
*/

SELECT 
	gv_UD_Qty.*
FROM
	gv_UD_Qty WHERE [Code] = @Code
GO
/****** Object:  StoredProcedure [dbo].[gp_UD_Qty_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UD_Qty_SelectAll]
AS
/*
** Select all rows from the UD_Qty table
*/

SELECT 
	gv_UD_Qty.*
FROM
	gv_UD_Qty
ORDER BY
	[Code]
GO
/****** Object:  View [dbo].[gv_UserGroup]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UserGroup]
AS
/*
** Select all rows from the UserGroup table
** and the lookup expressions defined for associated tables
*/
SELECT [UserGroup].* FROM [UserGroup]
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_SelectByGroupOwnerUserIDAndGroupName]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_SelectByGroupOwnerUserIDAndGroupName]
(
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Select a row from the UserGroup table by primary key
*/

SELECT 
	gv_UserGroup.*
FROM
	gv_UserGroup WHERE [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_SelectByGroupOwnerUserID]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_SelectByGroupOwnerUserID]
(
	@GroupOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the UserGroup table by GroupOwnerUserID
*/
SELECT 
	gv_UserGroup.*
FROM
	gv_UserGroup WHERE [GroupOwnerUserID] = @GroupOwnerUserID ORDER BY [GroupOwnerUserID], [GroupName]
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_SelectAll]
AS
/*
** Select all rows from the UserGroup table
*/

SELECT 
	gv_UserGroup.*
FROM
	gv_UserGroup
ORDER BY
	[GroupOwnerUserID],
	[GroupName]
GO
/****** Object:  StoredProcedure [dbo].[LibraryUsersUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryUsersUpdProc]
(
    @ReadOnly               bit                     = NULL,
    @CreateAccess           bit                     = NULL,
    @UpdateAccess           bit                     = NULL,
    @DeleteAccess           bit                     = NULL,
    @UserID                 nvarchar(50),
    @LibraryOwnerUserID     nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    UPDATE LibraryUsers
       SET ReadOnly                = @ReadOnly,
           CreateAccess            = @CreateAccess,
           UpdateAccess            = @UpdateAccess,
           DeleteAccess            = @DeleteAccess
     WHERE UserID             = @UserID
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'LibraryUsersUpdProc: Cannot update  in LibraryUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryUsersSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryUsersSelProc]
(
    @UserID                 nvarchar(50),
    @LibraryOwnerUserID     nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    SELECT ReadOnly,
           CreateAccess,
           UpdateAccess,
           DeleteAccess,
           UserID,
           LibraryOwnerUserID,
           LibraryName
      FROM LibraryUsers
     WHERE UserID             = @UserID
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryUsersInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryUsersInsProc]
(
    @ReadOnly               bit                     = NULL,
    @CreateAccess           bit                     = NULL,
    @UpdateAccess           bit                     = NULL,
    @DeleteAccess           bit                     = NULL,
    @UserID                 nvarchar(50),
    @LibraryOwnerUserID     nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LibraryUsers(ReadOnly,
                             CreateAccess,
                             UpdateAccess,
                             DeleteAccess,
                             UserID,
                             LibraryOwnerUserID,
                             LibraryName)
    VALUES(@ReadOnly,
           @CreateAccess,
           @UpdateAccess,
           @DeleteAccess,
           @UserID,
           @LibraryOwnerUserID,
           @LibraryName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LibraryUsersInsProc: Cannot insert because primary key value not found in LibraryUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[LibraryUsersDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryUsersDelProc]
(
    @UserID                 nvarchar(50),
    @LibraryOwnerUserID     nvarchar(50),
    @LibraryName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LibraryUsers
     WHERE UserID             = @UserID
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LibraryUsersDelProc: Cannot delete because foreign keys still exist in LibraryUsers '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LibraryUsers_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LibraryUsers_INS]
   ON [dbo].[LibraryUsers]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LibraryUsers
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LibraryUsers t
   JOIN inserted i
   ON 
     t.LibraryOwnerUserID = i.LibraryOwnerUserID
     and t.LibraryName = i.LibraryName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@LibraryOwnerUserIDOriginal nvarchar(50), 
	@LibraryOwnerUserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@ReadOnly bit,
	@CreateAccess bit,
	@UpdateAccess bit,
	@DeleteAccess bit
)
AS
/*
** Update a row in the LibraryUsers table using the primary key
*/
UPDATE [LibraryUsers] SET [ReadOnly] = @ReadOnly, [CreateAccess] = @CreateAccess, [UpdateAccess] = @UpdateAccess, [DeleteAccess] = @DeleteAccess, [UserID] = @UserID, [LibraryOwnerUserID] = @LibraryOwnerUserID, [LibraryName] = @LibraryName WHERE [UserID] = @UserIDOriginal AND [LibraryOwnerUserID] = @LibraryOwnerUserIDOriginal AND [LibraryName] = @LibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_LibraryUsers.*
FROM
	gv_LibraryUsers
WHERE
	[UserID] = @UserIDOriginal
	AND [LibraryOwnerUserID] = @LibraryOwnerUserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_Insert]
(
	@ReadOnly bit,
	@CreateAccess bit,
	@UpdateAccess bit,
	@DeleteAccess bit,
	@UserID nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Add a row to the LibraryUsers table
*/

INSERT INTO [LibraryUsers]
( [ReadOnly], [CreateAccess], [UpdateAccess], [DeleteAccess], [UserID], [LibraryOwnerUserID], [LibraryName]
)
VALUES
( @ReadOnly, @CreateAccess, @UpdateAccess, @DeleteAccess, @UserID, @LibraryOwnerUserID, @LibraryName
)

/*
** Select the new row
*/
SELECT
	gv_LibraryUsers.*
FROM
	gv_LibraryUsers
WHERE
	[UserID] = @UserID
	AND [LibraryOwnerUserID] = @LibraryOwnerUserID
	AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryUsers_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryUsers_Delete]
(
	@UserID nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Delete a row from the LibraryUsers table
*/
DELETE FROM [LibraryUsers] WHERE [UserID] = @UserID AND [LibraryOwnerUserID] = @LibraryOwnerUserID AND [LibraryName] = @LibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LibraryUsers table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailSelProc]
(
    @EmailGuid                   nvarchar(50))
AS
BEGIN
    SELECT EmailGuid,
           SUBJECT,
           SentTO,
           Body,
           Bcc,
           BillingInformation,
           CC,
           Companies,
           CreationTime,
           ReadReceiptRequested,
           ReceivedByName,
           ReceivedTime,
           AllRecipients,
           UserID,
           SenderEmailAddress,
           SenderName,
           Sensitivity,
           SentOn,
           MsgSize,
           DeferredDeliveryTime,
           EntryID,
           ExpiryTime,
           LastModificationTime,
           EmailImage,
           Accounts,
           RowID,
           ShortSubj,
           SourceTypeCode,
           OriginalFolder,
           StoreID,
           isPublic,
           RetentionExpirationDate,
           IsPublicPreviousState,
           isAvailable,
           CurrMailFolderID,
           isPerm,
           isMaster,
           CreationDate
      FROM Email
     WHERE EmailGuid = @EmailGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryUpdProc]
(
    @UserID          nvarchar(50),
    @LibraryName     nvarchar(80),
    @isPublic        nchar(1))
AS
BEGIN
    BEGIN TRAN

    UPDATE Library
       SET isPublic         = @isPublic
     WHERE UserID      = @UserID
       AND LibraryName = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'LibraryUpdProc: Cannot update  in Library '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibrarySelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibrarySelProc]
(
    @UserID          nvarchar(50),
    @LibraryName     nvarchar(80))
AS
BEGIN
    SELECT UserID,
           LibraryName,
           isPublic
      FROM Library
     WHERE UserID      = @UserID
       AND LibraryName = @LibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryInsProc]
(
    @UserID          nvarchar(50),
    @LibraryName     nvarchar(80),
    @isPublic        nchar(1))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Library(UserID,
                        LibraryName,
                        isPublic)
    VALUES(@UserID,
           @LibraryName,
           @isPublic)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LibraryInsProc: Cannot insert because primary key value not found in Library '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [LibraryDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[LibraryDelTrig] ON [dbo].[Library]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE LibEmail
        FROM LibEmail ch, deleted
        WHERE ch.LibraryName = deleted.LibraryName AND
           ch.UserID = deleted.UserID
-- Parent Delete: CASCADE

    DELETE LibDirectory
        FROM LibDirectory ch, deleted
        WHERE ch.LibraryName = deleted.LibraryName AND
           ch.UserID = deleted.UserID

END
GO
/****** Object:  StoredProcedure [dbo].[LibraryDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryDelProc]
(
    @UserID          nvarchar(50),
    @LibraryName     nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Library
     WHERE UserID      = @UserID
       AND LibraryName = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LibraryDelProc: Cannot delete because foreign keys still exist in Library '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Library_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Library_INS]
   ON [dbo].[Library]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Library
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Library t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.LibraryName = i.LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@isPublic nchar(1)
)
AS
/*
** Update a row in the Library table using the primary key
*/
UPDATE [Library] SET [UserID] = @UserID, [LibraryName] = @LibraryName, [isPublic] = @isPublic WHERE [UserID] = @UserIDOriginal AND [LibraryName] = @LibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_Library.*
FROM
	gv_Library
WHERE
	[UserID] = @UserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_Insert]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80),
	@isPublic nchar(1)
)
AS
/*
** Add a row to the Library table
*/

INSERT INTO [Library]
( [UserID], [LibraryName], [isPublic]
)
VALUES
( @UserID, @LibraryName, @isPublic
)

/*
** Select the new row
*/
SELECT
	gv_Library.*
FROM
	gv_Library
WHERE
	[UserID] = @UserID
	AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_Library_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Library_Delete]
(
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Delete a row from the Library table
*/
DELETE FROM [Library] WHERE [UserID] = @UserID AND [LibraryName] = @LibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Library table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[LibEmailUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibEmailUpdProc]
(
    @EmailFolderEntryID     nvarchar(200),
    @UserID                 nvarchar(50),
    @LibraryName            nvarchar(80),
    @FolderName             nvarchar(250)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE LibEmail
       SET FolderName              = @FolderName
     WHERE EmailFolderEntryID = @EmailFolderEntryID
       AND UserID             = @UserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'LibEmailUpdProc: Cannot update  in LibEmail '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailInsProc]
(
    @EmailGuid                   nvarchar(50),
    @SUBJECT                     nvarchar(2000)            = NULL,
    @SentTO                      nvarchar(2000)            = NULL,
    @Body                        text                      = NULL,
    @Bcc                         nvarchar(max)             = NULL,
    @BillingInformation          nvarchar(200)             = NULL,
    @CC                          nvarchar(max)             = NULL,
    @Companies                   nvarchar(2000)            = NULL,
    @CreationTime                datetime                  = NULL,
    @ReadReceiptRequested        nvarchar(50)              = NULL,
    @ReceivedByName              nvarchar(80),
    @ReceivedTime                datetime,
    @AllRecipients               nvarchar(max)             = NULL,
    @UserID                      nvarchar(80),
    @SenderEmailAddress          nvarchar(80),
    @SenderName                  nvarchar(100),
    @Sensitivity                 nvarchar(50)              = NULL,
    @SentOn                      datetime,
    @MsgSize                     int                       = NULL,
    @DeferredDeliveryTime        datetime                  = NULL,
    @EntryID                     varchar(150)              = NULL,
    @ExpiryTime                  datetime                  = NULL,
    @LastModificationTime        datetime                  = NULL,
    @EmailImage                  image                     = NULL,
    @Accounts                    nvarchar(2000)            = NULL,
    @ShortSubj                   nvarchar(250)             = NULL,
    @SourceTypeCode              nvarchar(50)              = NULL,
    @OriginalFolder              nvarchar(254)             = NULL,
    @StoreID                     varchar(750)              = NULL,
    @isPublic                    nchar(1)                  = NULL,
    @RetentionExpirationDate     datetime                  = NULL,
    @IsPublicPreviousState       nchar(1)                  = NULL,
    @isAvailable                 nchar(1)                  = NULL,
    @CurrMailFolderID            nvarchar(300)             = NULL,
    @isPerm                      nchar(1)                  = NULL,
    @isMaster                    nchar(1)                  = NULL,
    @CreationDate                datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Email(EmailGuid,
                      SUBJECT,
                      SentTO,
                      Body,
                      Bcc,
                      BillingInformation,
                      CC,
                      Companies,
                      CreationTime,
                      ReadReceiptRequested,
                      ReceivedByName,
                      ReceivedTime,
                      AllRecipients,
                      UserID,
                      SenderEmailAddress,
                      SenderName,
                      Sensitivity,
                      SentOn,
                      MsgSize,
                      DeferredDeliveryTime,
                      EntryID,
                      ExpiryTime,
                      LastModificationTime,
                      EmailImage,
                      Accounts,
                      ShortSubj,
                      SourceTypeCode,
                      OriginalFolder,
                      StoreID,
                      isPublic,
                      RetentionExpirationDate,
                      IsPublicPreviousState,
                      isAvailable,
                      CurrMailFolderID,
                      isPerm,
                      isMaster,
                      CreationDate)
    VALUES(@EmailGuid,
           @SUBJECT,
           @SentTO,
           @Body,
           @Bcc,
           @BillingInformation,
           @CC,
           @Companies,
           @CreationTime,
           @ReadReceiptRequested,
           @ReceivedByName,
           @ReceivedTime,
           @AllRecipients,
           @UserID,
           @SenderEmailAddress,
           @SenderName,
           @Sensitivity,
           @SentOn,
           @MsgSize,
           @DeferredDeliveryTime,
           @EntryID,
           @ExpiryTime,
           @LastModificationTime,
           @EmailImage,
           @Accounts,
           @ShortSubj,
           @SourceTypeCode,
           @OriginalFolder,
           @StoreID,
           @isPublic,
           @RetentionExpirationDate,
           @IsPublicPreviousState,
           @isAvailable,
           @CurrMailFolderID,
           @isPerm,
           @isMaster,
           @CreationDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailInsProc: Cannot insert because primary key value not found in Email '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [trigDatabases_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDatabases_Update]
   ON [dbo].[Databases]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Databases 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Databases.DB_ID = inserted.DB_ID
 End
GO
/****** Object:  StoredProcedure [dbo].[gp_Databases_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Databases_Update]
(
	@DB_IDOriginal nvarchar(50), 
	@DB_ID nvarchar(50),
	@DB_CONN_STR nvarchar(254)
)
AS
/*
** Update a row in the Databases table using the primary key
*/
UPDATE [Databases] SET [DB_ID] = @DB_ID, [DB_CONN_STR] = @DB_CONN_STR WHERE [DB_ID] = @DB_IDOriginal


/*
** Select the updated row
*/
SELECT
	gv_Databases.*
FROM
	gv_Databases
WHERE
	[DB_ID] = @DB_IDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Databases_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Databases_Insert]
(
	@DB_ID nvarchar(50),
	@DB_CONN_STR nvarchar(254)
)
AS
/*
** Add a row to the Databases table
*/

INSERT INTO [Databases]
( [DB_ID], [DB_CONN_STR]
)
VALUES
( @DB_ID, @DB_CONN_STR
)

/*
** Select the new row
*/
SELECT
	gv_Databases.*
FROM
	gv_Databases
WHERE
	[DB_ID] = @DB_ID
GO
/****** Object:  StoredProcedure [dbo].[gp_Databases_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Databases_Delete]
(
	@DB_ID nvarchar(50)
)
AS
/*
** Delete a row from the Databases table
*/
DELETE FROM [Databases] WHERE [DB_ID] = @DB_ID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Databases table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[DatabasesUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DatabasesUpdProc]
(
    @DB_ID           nvarchar(50),
    @DB_CONN_STR     nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Databases
       SET DB_CONN_STR      = @DB_CONN_STR
     WHERE DB_ID = @DB_ID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DatabasesUpdProc: Cannot update  in Databases '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DatabasesSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DatabasesSelProc]
(
    @DB_ID           nvarchar(50))
AS
BEGIN
    SELECT DB_ID,
           DB_CONN_STR
      FROM Databases
     WHERE DB_ID = @DB_ID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DatabasesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DatabasesInsProc]
(
    @DB_ID           nvarchar(50),
    @DB_CONN_STR     nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Databases(DB_ID,
                          DB_CONN_STR)
    VALUES(@DB_ID,
           @DB_CONN_STR)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DatabasesInsProc: Cannot insert because primary key value not found in Databases '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [DatabasesDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE TRIGGER [dbo].[DatabasesDelTrig] ON [dbo].[Databases]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM Directory ch, deleted
         WHERE ch.DB_ID = deleted.DB_ID) != 0)
    BEGIN
        RAISERROR 30002 'DatabasesDelTrigCannot delete because foreign keys still exist in Directory'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM EmailArchParms ch, deleted
         WHERE ch.DB_ID = deleted.DB_ID) != 0)
    BEGIN
        RAISERROR 30002 'DatabasesDelTrigCannot delete because foreign keys still exist in EmailArchParms'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[DatabasesDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DatabasesDelProc]
(
    @DB_ID           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Databases
     WHERE DB_ID = @DB_ID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DatabasesDelProc: Cannot delete because foreign keys still exist in Databases '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Databases_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Databases_INS]
   ON [dbo].[Databases]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Databases
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Databases t
   JOIN inserted i
   ON 
     t.DB_ID = i.DB_ID
GO
/****** Object:  Trigger [SkipWordsUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SkipWordsUpdTrig 
 */

CREATE TRIGGER [dbo].[SkipWordsUpdTrig] ON [dbo].[SkipWords]
FOR UPDATE AS
BEGIN
    DECLARE
        @tgtWord nvarchar(18),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(tgtWord))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM FUncSkipWords ch, deleted
          WHERE ch.tgtWord = deleted.tgtWord) != 0)
        BEGIN
            RAISERROR 30001 'SkipWordsUpdTrigCannot update because foreign keys still exist in FUncSkipWords'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SkipWordsSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SkipWordsSelProc 
 */

CREATE PROCEDURE [dbo].[SkipWordsSelProc]
(
    @tgtWord     nvarchar(18))
AS
BEGIN
    SELECT tgtWord
      FROM SkipWords
     WHERE tgtWord = @tgtWord

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SkipWordsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SkipWordsInsProc 
 */

CREATE PROCEDURE [dbo].[SkipWordsInsProc]
(
    @tgtWord     nvarchar(18))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SkipWords(tgtWord)
    VALUES(@tgtWord)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SkipWordsInsProc: Cannot insert because primary key value not found in SkipWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [SkipWordsDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SkipWordsDelTrig 
 */

CREATE TRIGGER [dbo].[SkipWordsDelTrig] ON [dbo].[SkipWords]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM FUncSkipWords ch, deleted
         WHERE ch.tgtWord = deleted.tgtWord) != 0)
    BEGIN
        RAISERROR 30002 'SkipWordsDelTrigCannot delete because foreign keys still exist in FUncSkipWords'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SkipWordsDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SkipWordsDelProc 
 */

CREATE PROCEDURE [dbo].[SkipWordsDelProc]
(
    @tgtWord     nvarchar(18))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SkipWords
     WHERE tgtWord = @tgtWord

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SkipWordsDelProc: Cannot delete because foreign keys still exist in SkipWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SkipWords_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SkipWords_INS]
   ON [dbo].[SkipWords]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SkipWords
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SkipWords t
   JOIN inserted i
   ON 
     t.tgtWord = i.tgtWord
GO
/****** Object:  StoredProcedure [dbo].[gp_SkipWords_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SkipWords_Update]
(
	@tgtWordOriginal nvarchar(18), 
	@tgtWord nvarchar(18)
)
AS
/*
** Update a row in the SkipWords table using the primary key
*/
UPDATE [SkipWords] SET [tgtWord] = @tgtWord WHERE [tgtWord] = @tgtWordOriginal


/*
** Select the updated row
*/
SELECT
	gv_SkipWords.*
FROM
	gv_SkipWords
WHERE
	[tgtWord] = @tgtWordOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SkipWords_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SkipWords_Insert]
(
	@tgtWord nvarchar(18)
)
AS
/*
** Add a row to the SkipWords table
*/

INSERT INTO [SkipWords]
( [tgtWord]
)
VALUES
( @tgtWord
)

/*
** Select the new row
*/
SELECT
	gv_SkipWords.*
FROM
	gv_SkipWords
WHERE
	[tgtWord] = @tgtWord
GO
/****** Object:  StoredProcedure [dbo].[gp_SkipWords_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SkipWords_Delete]
(
	@tgtWord nvarchar(18)
)
AS
/*
** Delete a row from the SkipWords table
*/
DELETE FROM [SkipWords] WHERE [tgtWord] = @tgtWord

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SkipWords table', 16, 1)
END
GO
/****** Object:  Trigger [trigDataSourceCheckOut_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDataSourceCheckOut_Update]
   ON [dbo].[DataSourceCheckOut]
         AFTER Update 
   AS
         BEGIN 
         UPDATE DataSourceCheckOut 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      DataSourceCheckOut.CheckedOutByUserID = inserted.CheckedOutByUserID
     and DataSourceCheckOut.SourceGuid = inserted.SourceGuid
     and DataSourceCheckOut.DataSourceOwnerUserID = inserted.DataSourceOwnerUserID
 End
GO
/****** Object:  Trigger [trigDataSource_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDataSource_Update]
   ON [dbo].[DataSource]
         AFTER Update 
   AS
         BEGIN 
         UPDATE DataSource 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      DataSource.SourceGuid = inserted.SourceGuid
     and DataSource.DataSourceOwnerUserID = inserted.DataSourceOwnerUserID
 End
GO
/****** Object:  Trigger [trigDirectory_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDirectory_Update]
   ON [dbo].[Directory]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Directory 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Directory.UserID = inserted.UserID
     and Directory.FQN = inserted.FQN
 End
GO
/****** Object:  Trigger [trigGroupUsers_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigGroupUsers_Update]
   ON [dbo].[GroupUsers]
         AFTER Update 
   AS
         BEGIN 
         UPDATE GroupUsers 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      GroupUsers.GroupName = inserted.GroupName
     and GroupUsers.UserID = inserted.UserID
     and GroupUsers.GroupOwnerUserID = inserted.GroupOwnerUserID
 End
GO
/****** Object:  Trigger [trigGroupLibraryAccess_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigGroupLibraryAccess_Update]
   ON [dbo].[GroupLibraryAccess]
         AFTER Update 
   AS
         BEGIN 
         UPDATE GroupLibraryAccess 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      GroupLibraryAccess.UserID = inserted.UserID
     and GroupLibraryAccess.LibraryName = inserted.LibraryName
     and GroupLibraryAccess.GroupOwnerUserID = inserted.GroupOwnerUserID
     and GroupLibraryAccess.GroupName = inserted.GroupName
 End
GO
/****** Object:  Trigger [trigFUncSkipWords_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigFUncSkipWords_Update]
   ON [dbo].[FUncSkipWords]
         AFTER Update 
   AS
         BEGIN 
         UPDATE FUncSkipWords 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      FUncSkipWords.CorpFuncName = inserted.CorpFuncName
     and FUncSkipWords.tgtWord = inserted.tgtWord
     and FUncSkipWords.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [trigLibrary_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLibrary_Update]
   ON [dbo].[Library]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Library 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Library.UserID = inserted.UserID
     and Library.LibraryName = inserted.LibraryName
 End
GO
/****** Object:  Trigger [trigLibEmail_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLibEmail_Update]
   ON [dbo].[LibEmail]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LibEmail 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LibEmail.EmailFolderEntryID = inserted.EmailFolderEntryID
     and LibEmail.UserID = inserted.UserID
     and LibEmail.LibraryName = inserted.LibraryName
 End
GO
/****** Object:  Trigger [trigLibDirectory_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLibDirectory_Update]
   ON [dbo].[LibDirectory]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LibDirectory 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LibDirectory.DirectoryName = inserted.DirectoryName
     and LibDirectory.UserID = inserted.UserID
     and LibDirectory.LibraryName = inserted.LibraryName
 End
GO
/****** Object:  Trigger [trigJargonWords_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigJargonWords_Update]
   ON [dbo].[JargonWords]
         AFTER Update 
   AS
         BEGIN 
         UPDATE JargonWords 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      JargonWords.JargonCode = inserted.JargonCode
     and JargonWords.tgtWord = inserted.tgtWord
 End
GO
/****** Object:  Trigger [trigInformationType_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigInformationType_Update]
   ON [dbo].[InformationType]
         AFTER Update 
   AS
         BEGIN 
         UPDATE InformationType 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      InformationType.InfoTypeCode = inserted.InfoTypeCode
 End
GO
/****** Object:  Trigger [trigInformationProduct_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigInformationProduct_Update]
   ON [dbo].[InformationProduct]
         AFTER Update 
   AS
         BEGIN 
         UPDATE InformationProduct 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      InformationProduct.ContainerType = inserted.ContainerType
     and InformationProduct.CorpFuncName = inserted.CorpFuncName
     and InformationProduct.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [trigLoadProfileItem_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLoadProfileItem_Update]
   ON [dbo].[LoadProfileItem]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LoadProfileItem 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LoadProfileItem.ProfileName = inserted.ProfileName
     and LoadProfileItem.SourceTypeCode = inserted.SourceTypeCode
 End
GO
/****** Object:  Trigger [trigLoadProfile_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLoadProfile_Update]
   ON [dbo].[LoadProfile]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LoadProfile 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LoadProfile.ProfileName = inserted.ProfileName
 End
GO
/****** Object:  Trigger [trigLibraryUsers_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLibraryUsers_Update]
   ON [dbo].[LibraryUsers]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LibraryUsers 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LibraryUsers.LibraryOwnerUserID = inserted.LibraryOwnerUserID
     and LibraryUsers.LibraryName = inserted.LibraryName
     and LibraryUsers.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigQtyDocs_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigQtyDocs_Update]
   ON [dbo].[QtyDocs]
         AFTER Update 
   AS
         BEGIN 
         UPDATE QtyDocs 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      QtyDocs.QtyDocCode = inserted.QtyDocCode
 End
GO
/****** Object:  Trigger [trigProdCaptureItems_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigProdCaptureItems_Update]
   ON [dbo].[ProdCaptureItems]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ProdCaptureItems 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ProdCaptureItems.CaptureItemsCode = inserted.CaptureItemsCode
     and ProdCaptureItems.ContainerType = inserted.ContainerType
     and ProdCaptureItems.CorpFuncName = inserted.CorpFuncName
     and ProdCaptureItems.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [trigRetention_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigRetention_Update]
   ON [dbo].[Retention]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Retention 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Retention.RetentionCode = inserted.RetentionCode
 End
GO
/****** Object:  Trigger [trigRepeatData_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigRepeatData_Update]
   ON [dbo].[RepeatData]
         AFTER Update 
   AS
         BEGIN 
         UPDATE RepeatData 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      RepeatData.RepeatDataCode = inserted.RepeatDataCode
 End
GO
/****** Object:  Trigger [trigRecipients_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigRecipients_Update]
   ON [dbo].[Recipients]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Recipients 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Recipients.Recipient = inserted.Recipient
     and Recipients.EmailGuid = inserted.EmailGuid
 End
GO
/****** Object:  Trigger [trigEmail_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigEmail_Update]
   ON [dbo].[Email]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Email 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Email.EmailGuid = inserted.EmailGuid
 End
GO
/****** Object:  Trigger [trigSkipWords_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSkipWords_Update]
   ON [dbo].[SkipWords]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SkipWords 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SkipWords.tgtWord = inserted.tgtWord
 End
GO
/****** Object:  Trigger [VolitilityUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: VolitilityUpdTrig 
 */

CREATE TRIGGER [dbo].[VolitilityUpdTrig] ON [dbo].[Volitility]
FOR UPDATE AS
BEGIN
    DECLARE
        @VolitilityCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(VolitilityCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM InformationProduct ch, deleted
          WHERE ch.VolitilityCode = deleted.VolitilityCode) != 0)
        BEGIN
            RAISERROR 30001 'VolitilityUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[VolitilityUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: VolitilityUpdProc 
 */

CREATE PROCEDURE [dbo].[VolitilityUpdProc]
(
    @VolitilityCode     nvarchar(50),
    @VolitilityDesc     nvarchar(18)            = NULL,
    @CreateDate         datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Volitility
       SET VolitilityDesc      = @VolitilityDesc,
           CreateDate          = @CreateDate
     WHERE VolitilityCode = @VolitilityCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'VolitilityUpdProc: Cannot update  in Volitility '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[VolitilitySelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: VolitilitySelProc 
 */

CREATE PROCEDURE [dbo].[VolitilitySelProc]
(
    @VolitilityCode     nvarchar(50))
AS
BEGIN
    SELECT VolitilityCode,
           VolitilityDesc,
           CreateDate
      FROM Volitility
     WHERE VolitilityCode = @VolitilityCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[VolitilityInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: VolitilityInsProc 
 */

CREATE PROCEDURE [dbo].[VolitilityInsProc]
(
    @VolitilityCode     nvarchar(50),
    @VolitilityDesc     nvarchar(18)            = NULL,
    @CreateDate         datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Volitility(VolitilityCode,
                           VolitilityDesc,
                           CreateDate)
    VALUES(@VolitilityCode,
           @VolitilityDesc,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'VolitilityInsProc: Cannot insert because primary key value not found in Volitility '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [VolitilityDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: VolitilityDelTrig 
 */

CREATE TRIGGER [dbo].[VolitilityDelTrig] ON [dbo].[Volitility]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM InformationProduct ch, deleted
         WHERE ch.VolitilityCode = deleted.VolitilityCode) != 0)
    BEGIN
        RAISERROR 30002 'VolitilityDelTrigCannot delete because foreign keys still exist in InformationProduct'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[VolitilityDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: VolitilityDelProc 
 */

CREATE PROCEDURE [dbo].[VolitilityDelProc]
(
    @VolitilityCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Volitility
     WHERE VolitilityCode = @VolitilityCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'VolitilityDelProc: Cannot delete because foreign keys still exist in Volitility '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Volitility_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Volitility_INS]
   ON [dbo].[Volitility]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Volitility
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Volitility t
   JOIN inserted i
   ON 
     t.VolitilityCode = i.VolitilityCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Volitility_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Volitility_Update]
(
	@VolitilityCodeOriginal nvarchar(50), 
	@VolitilityCode nvarchar(50),
	@VolitilityDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Update a row in the Volitility table using the primary key
*/
UPDATE [Volitility] SET [VolitilityCode] = @VolitilityCode, [VolitilityDesc] = @VolitilityDesc, [CreateDate] = @CreateDate WHERE [VolitilityCode] = @VolitilityCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_Volitility.*
FROM
	gv_Volitility
WHERE
	[VolitilityCode] = @VolitilityCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Volitility_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Volitility_Insert]
(
	@VolitilityCode nvarchar(50),
	@VolitilityDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Add a row to the Volitility table
*/

INSERT INTO [Volitility]
( [VolitilityCode], [VolitilityDesc], [CreateDate]
)
VALUES
( @VolitilityCode, @VolitilityDesc, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_Volitility.*
FROM
	gv_Volitility
WHERE
	[VolitilityCode] = @VolitilityCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Volitility_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Volitility_Delete]
(
	@VolitilityCode nvarchar(50)
)
AS
/*
** Delete a row from the Volitility table
*/
DELETE FROM [Volitility] WHERE [VolitilityCode] = @VolitilityCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Volitility table', 16, 1)
END
GO
/****** Object:  View [dbo].[View_SenderEmailAddress]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE VIEW [dbo].[View_SenderEmailAddress]
AS
SELECT     TOP (100) PERCENT SenderEmailAddress
FROM         dbo.Email
ORDER BY SenderEmailAddress
GO
/****** Object:  View [dbo].[vEmailWithWeights]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vEmailWithWeights] as 
SELECT   KEY_TBL.RANK, DS.SentOn
	,DS.ShortSubj
	,DS.SenderEmailAddress
	,DS.SenderName
	,DS.SentTO
	,DS.Body
	,DS.CC
	,DS.Bcc
	,DS.CreationTime
	,DS.AllRecipients
	,DS.ReceivedByName
	,DS.ReceivedTime
	,DS.MsgSize
	,DS.SUBJECT
	,DS.OriginalFolder
	,DS.EmailGuid, DS.RetentionExpirationDate, DS.isPublic, DS.UserID, DS.SourceTypeCode, DS.NbrAttachments , ' ' as RID, RepoSvrName
	,ROW_NUMBER() OVER (ORDER BY Rank DESC) AS ROWID
FROM EMAIL AS DS
	INNER JOIN CONTAINSTABLE(EMAIL, *,
	'ISABOUT (dale, liz)' ) as KEY_TBL
	ON DS.EmailGuid = KEY_TBL.[KEY]
GO
/****** Object:  View [dbo].[vEmailSearch04]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--** View 04
create view [dbo].[vEmailSearch04] as            
SELECT     Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc,
                      Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid,
                      Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment,
                      CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName 
FROM         Email INNER JOIN
                      EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN
                      EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID
GO
/****** Object:  View [dbo].[vEmailSearch03]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--** View 03
create view [dbo].[vEmailSearch03] as
SELECT     Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc,
                      Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid,
                      Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment,
                      CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName, 9999999 as RowID 
FROM         Email INNER JOIN
                      EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN
                      EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID
GO
/****** Object:  View [dbo].[vEmailSearch02]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vEmailSearch02] as
                Select     EmailAttachmentSearchList.Weight AS RANK, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, 
                      SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc, Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, 
                      Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid, Email.RetentionExpirationDate, Email.isPublic, ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, 
                      Email.SourceTypeCode, 'Y' AS FoundInAttachment, CONVERT(varchar, EmailAttachment.RowID) AS RID
FROM         Email INNER JOIN
                      EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN
                      EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID
GO
/****** Object:  StoredProcedure [dbo].[UD_QtySelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UD_QtySelProc 
 */

CREATE PROCEDURE [dbo].[UD_QtySelProc]
(
    @Code            char(10))
AS
BEGIN
    SELECT Code,
           Description
      FROM UD_Qty
     WHERE Code = @Code

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UD_QtyInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UD_QtyInsProc 
 */

CREATE PROCEDURE [dbo].[UD_QtyInsProc]
(
    @Code            char(10),
    @Description     char(10)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO UD_Qty(Code,
                       Description)
    VALUES(@Code,
           @Description)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'UD_QtyInsProc: Cannot insert because primary key value not found in UD_Qty '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [UD_QtyDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: UD_QtyDelTrig 
 */

CREATE TRIGGER [dbo].[UD_QtyDelTrig] ON [dbo].[UD_Qty]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM InformationProduct ch, deleted
         WHERE ch.Code = deleted.Code) != 0)
    BEGIN
        RAISERROR 30002 'UD_QtyDelTrigCannot delete because foreign keys still exist in InformationProduct'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[UD_QtyDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UD_QtyDelProc 
 */

CREATE PROCEDURE [dbo].[UD_QtyDelProc]
(
    @Code            char(10))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM UD_Qty
     WHERE Code = @Code

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'UD_QtyDelProc: Cannot delete because foreign keys still exist in UD_Qty '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [UD_Qty_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[UD_Qty_INS]
   ON [dbo].[UD_Qty]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE UD_Qty
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM UD_Qty t
   JOIN inserted i
   ON 
     t.Code = i.Code
GO
/****** Object:  StoredProcedure [dbo].[gp_UD_Qty_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UD_Qty_Update]
(
	@CodeOriginal char(10), 
	@Code char(10),
	@Description char(10)
)
AS
/*
** Update a row in the UD_Qty table using the primary key
*/
UPDATE [UD_Qty] SET [Code] = @Code, [Description] = @Description WHERE [Code] = @CodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_UD_Qty.*
FROM
	gv_UD_Qty
WHERE
	[Code] = @CodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_UD_Qty_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UD_Qty_Insert]
(
	@Code char(10),
	@Description char(10)
)
AS
/*
** Add a row to the UD_Qty table
*/

INSERT INTO [UD_Qty]
( [Code], [Description]
)
VALUES
( @Code, @Description
)

/*
** Select the new row
*/
SELECT
	gv_UD_Qty.*
FROM
	gv_UD_Qty
WHERE
	[Code] = @Code
GO
/****** Object:  StoredProcedure [dbo].[gp_UD_Qty_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UD_Qty_Delete]
(
	@Code char(10)
)
AS
/*
** Delete a row from the UD_Qty table
*/
DELETE FROM [UD_Qty] WHERE [Code] = @Code

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the UD_Qty table', 16, 1)
END
GO
/****** Object:  Trigger [EmailDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[EmailDelTrig] ON [dbo].[Email]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE EmailAttachment
        FROM EmailAttachment ch, deleted
        WHERE ch.EmailGuid = deleted.EmailGuid
-- Parent Delete: CASCADE

    DELETE Recipients
        FROM Recipients ch, deleted
        WHERE ch.EmailGuid = deleted.EmailGuid
-- Parent Delete: CASCADE

    DELETE EmailAttachmentSearchList
        FROM EmailAttachmentSearchList ch, deleted
        WHERE ch.EmailGuid = deleted.EmailGuid

END
GO
/****** Object:  StoredProcedure [dbo].[EmailDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailDelProc 
 */

CREATE PROCEDURE [dbo].[EmailDelProc]
(
    @EmailGuid                nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Email
     WHERE EmailGuid = @EmailGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EmailDelProc: Cannot delete because foreign keys still exist in Email '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [EmailAttachmentUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: EmailAttachmentUpdTrig 
 */

CREATE TRIGGER [dbo].[EmailAttachmentUpdTrig] ON [dbo].[EmailAttachment]
FOR UPDATE AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(EmailGuid))
    BEGIN
        SELECT @NullRows = COUNT(*)
          FROM inserted
          WHERE  inserted.EmailGuid IS NULL

        SELECT @ValidRows = COUNT(*)
          FROM Email pr, inserted
          WHERE pr.EmailGuid = inserted.EmailGuid

        IF (@NullRows + @ValidRows <> @Rows)
        BEGIN
            RAISERROR 30001 'EmailAttachmentUpdTrigCannot update because primary key value not found in Email'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(AttachmentCode))
    BEGIN
        SELECT @NullRows = COUNT(*)
          FROM inserted
          WHERE  inserted.AttachmentCode IS NULL

        SELECT @ValidRows = COUNT(*)
          FROM AttachmentType pr, inserted
          WHERE pr.AttachmentCode = inserted.AttachmentCode

        IF (@NullRows + @ValidRows <> @Rows)
        BEGIN
            RAISERROR 30001 'EmailAttachmentUpdTrigCannot update because primary key value not found in AttachmentType'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[EmailAttachmentSearchListInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailAttachmentSearchListInsProc]
(
    @UserID        nvarchar(50),
    @EmailGuid     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailAttachmentSearchList(UserID,
                                          EmailGuid)
    VALUES(@UserID,
           @EmailGuid)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailAttachmentSearchListInsProc: Cannot insert because primary key value not found in EmailAttachmentSearchList '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [trigVolitility_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigVolitility_Update]
   ON [dbo].[Volitility]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Volitility 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Volitility.VolitilityCode = inserted.VolitilityCode
 End
GO
/****** Object:  Trigger [trigUsers_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigUsers_Update]
   ON [dbo].[Users]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Users 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Users.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigUD_Qty_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigUD_Qty_Update]
   ON [dbo].[UD_Qty]
         AFTER Update 
   AS
         BEGIN 
         UPDATE UD_Qty 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      UD_Qty.Code = inserted.Code
 End
GO
/****** Object:  Trigger [trigSubLibrary_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSubLibrary_Update]
   ON [dbo].[SubLibrary]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SubLibrary 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SubLibrary.UserID = inserted.UserID
     and SubLibrary.LibraryName = inserted.LibraryName
     and SubLibrary.SubUserID = inserted.SubUserID
     and SubLibrary.SubLibraryName = inserted.SubLibraryName
 End
GO
/****** Object:  Trigger [trigSubDir_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSubDir_Update]
   ON [dbo].[SubDir]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SubDir 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SubDir.UserID = inserted.UserID
     and SubDir.FQN = inserted.FQN
     and SubDir.SUBFQN = inserted.SUBFQN
 End
GO
/****** Object:  Trigger [trigStorage_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigStorage_Update]
   ON [dbo].[Storage]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Storage 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Storage.StoreCode = inserted.StoreCode
 End
GO
/****** Object:  Trigger [trigSourceContainer_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSourceContainer_Update]
   ON [dbo].[SourceContainer]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SourceContainer 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SourceContainer.ContainerType = inserted.ContainerType
 End
GO
/****** Object:  Trigger [trigBusinessJargonCode_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigBusinessJargonCode_Update]
   ON [dbo].[BusinessJargonCode]
         AFTER Update 
   AS
         BEGIN 
         UPDATE BusinessJargonCode 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      BusinessJargonCode.JargonCode = inserted.JargonCode
 End
GO
/****** Object:  Trigger [JargonWordsUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: JargonWordsUpdTrig 
 */

CREATE TRIGGER [dbo].[JargonWordsUpdTrig] ON [dbo].[JargonWords]
FOR UPDATE AS
BEGIN
    DECLARE
        @JargonCode nvarchar(50),
        @tgtWord nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(tgtWord) OR
        UPDATE(JargonCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM BusinessFunctionJargon ch, deleted
          WHERE ch.JargonWords_tgtWord = deleted.tgtWord AND
           ch.JargonCode = deleted.JargonCode) != 0)
        BEGIN
            RAISERROR 30001 'JargonWordsUpdTrigCannot update because foreign keys still exist in BusinessFunctionJargon'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(JargonCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM BusinessJargonCode pr, inserted
          WHERE pr.JargonCode = inserted.JargonCode) != @Rows)
        BEGIN
            RAISERROR 30001 'JargonWordsUpdTrigCannot update because primary key value not found in BusinessJargonCode'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [JargonWordsInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: JargonWordsInsTrig 
 */

CREATE TRIGGER [dbo].[JargonWordsInsTrig] ON [dbo].[JargonWords]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM BusinessJargonCode pr, inserted
         WHERE pr.JargonCode = inserted.JargonCode) != @Rows)
    BEGIN
        RAISERROR 30000 'JargonWordsInsTrigCannot insert because primary key value not found in BusinessJargonCode'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessJargonCode_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessJargonCode_Update]
(
	@JargonCodeOriginal nvarchar(50), 
	@JargonCode nvarchar(50),
	@JargonDesc nvarchar(18)
)
AS
/*
** Update a row in the BusinessJargonCode table using the primary key
*/
UPDATE [BusinessJargonCode] SET [JargonCode] = @JargonCode, [JargonDesc] = @JargonDesc WHERE [JargonCode] = @JargonCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_BusinessJargonCode.*
FROM
	gv_BusinessJargonCode
WHERE
	[JargonCode] = @JargonCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessJargonCode_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessJargonCode_Insert]
(
	@JargonCode nvarchar(50),
	@JargonDesc nvarchar(18)
)
AS
/*
** Add a row to the BusinessJargonCode table
*/

INSERT INTO [BusinessJargonCode]
( [JargonCode], [JargonDesc]
)
VALUES
( @JargonCode, @JargonDesc
)

/*
** Select the new row
*/
SELECT
	gv_BusinessJargonCode.*
FROM
	gv_BusinessJargonCode
WHERE
	[JargonCode] = @JargonCode
GO
/****** Object:  StoredProcedure [dbo].[gp_BusinessJargonCode_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_BusinessJargonCode_Delete]
(
	@JargonCode nvarchar(50)
)
AS
/*
** Delete a row from the BusinessJargonCode table
*/
DELETE FROM [BusinessJargonCode] WHERE [JargonCode] = @JargonCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the BusinessJargonCode table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[BusinessJargonCodeUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessJargonCodeUpdProc 
 */

CREATE PROCEDURE [dbo].[BusinessJargonCodeUpdProc]
(
    @JargonCode     nvarchar(50),
    @JargonDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE BusinessJargonCode
       SET JargonDesc      = @JargonDesc
     WHERE JargonCode = @JargonCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'BusinessJargonCodeUpdProc: Cannot update  in BusinessJargonCode '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[BusinessJargonCodeSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessJargonCodeSelProc 
 */

CREATE PROCEDURE [dbo].[BusinessJargonCodeSelProc]
(
    @JargonCode     nvarchar(50))
AS
BEGIN
    SELECT JargonCode,
           JargonDesc
      FROM BusinessJargonCode
     WHERE JargonCode = @JargonCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[BusinessJargonCodeInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessJargonCodeInsProc 
 */

CREATE PROCEDURE [dbo].[BusinessJargonCodeInsProc]
(
    @JargonCode     nvarchar(50),
    @JargonDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO BusinessJargonCode(JargonCode,
                                   JargonDesc)
    VALUES(@JargonCode,
           @JargonDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'BusinessJargonCodeInsProc: Cannot insert because primary key value not found in BusinessJargonCode '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[BusinessJargonCodeDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessJargonCodeDelProc 
 */

CREATE PROCEDURE [dbo].[BusinessJargonCodeDelProc]
(
    @JargonCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM BusinessJargonCode
     WHERE JargonCode = @JargonCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'BusinessJargonCodeDelProc: Cannot delete because foreign keys still exist in BusinessJargonCode '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [BusinessJargonCode_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[BusinessJargonCode_INS]
   ON [dbo].[BusinessJargonCode]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE BusinessJargonCode
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM BusinessJargonCode t
   JOIN inserted i
   ON 
     t.JargonCode = i.JargonCode
GO
/****** Object:  Trigger [BusinessFunctionJargonUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: BusinessFunctionJargonUpdTrig 
 */

CREATE TRIGGER [dbo].[BusinessFunctionJargonUpdTrig] ON [dbo].[BusinessFunctionJargon]
FOR UPDATE AS
BEGIN
    DECLARE
        @CorpFuncName nvarchar(80),
        @JargonWords_tgtWord nvarchar(50),
        @JargonCode nvarchar(50),
        @WordID int,
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpFunction pr, inserted
          WHERE pr.CorpFuncName = inserted.CorpFuncName AND
             pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'BusinessFunctionJargonUpdTrigCannot update because primary key value not found in CorpFunction'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(JargonWords_tgtWord) OR
        UPDATE(JargonCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM JargonWords pr, inserted
          WHERE pr.tgtWord = inserted.JargonWords_tgtWord AND
             pr.JargonCode = inserted.JargonCode) != @Rows)
        BEGIN
            RAISERROR 30001 'BusinessFunctionJargonUpdTrigCannot update because primary key value not found in JargonWords'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[BusinessFunctionJargonSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessFunctionJargonSelProc 
 */

CREATE PROCEDURE [dbo].[BusinessFunctionJargonSelProc]
(
    @CorpFuncName            nvarchar(80),
    @WordID                  int,
    @JargonWords_tgtWord     nvarchar(50),
    @JargonCode              nvarchar(50),
    @CorpName                nvarchar(50))
AS
BEGIN
    SELECT CorpFuncName,
           WordID,
           JargonWords_tgtWord,
           JargonCode,
           CorpName
      FROM BusinessFunctionJargon
     WHERE CorpFuncName        = @CorpFuncName
       AND WordID              = @WordID
       AND JargonWords_tgtWord = @JargonWords_tgtWord
       AND JargonCode          = @JargonCode
       AND CorpName            = @CorpName

    RETURN(0)
END
GO
/****** Object:  Trigger [BusinessFunctionJargonInsTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: BusinessFunctionJargonInsTrig 
 */

CREATE TRIGGER [dbo].[BusinessFunctionJargonInsTrig] ON [dbo].[BusinessFunctionJargon]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpFunction pr, inserted
         WHERE pr.CorpFuncName = inserted.CorpFuncName AND
           pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'BusinessFunctionJargonInsTrigCannot insert because primary key value not found in CorpFunction'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM JargonWords pr, inserted
         WHERE pr.tgtWord = inserted.JargonWords_tgtWord AND
           pr.JargonCode = inserted.JargonCode) != @Rows)
    BEGIN
        RAISERROR 30000 'BusinessFunctionJargonInsTrigCannot insert because primary key value not found in JargonWords'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[BusinessFunctionJargonInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: BusinessFunctionJargonInsProc 
 */

CREATE PROCEDURE [dbo].[BusinessFunctionJargonInsProc]
(
    @CorpFuncName            nvarchar(80),
    @JargonWords_tgtWord     nvarchar(50),
    @JargonCode              nvarchar(50),
    @CorpName                nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO BusinessFunctionJargon(CorpFuncName,
                                       JargonWords_tgtWord,
                                       JargonCode,
                                       CorpName)
    VALUES(@CorpFuncName,
           @JargonWords_tgtWord,
           @JargonCode,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'BusinessFunctionJargonInsProc: Cannot insert because primary key value not found in BusinessFunctionJargon '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [UsersDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: UsersDelTrig 
 */

CREATE TRIGGER [dbo].[UsersDelTrig] ON [dbo].[Users]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM GroupUsers ch, deleted
         WHERE ch.UserID = deleted.UserID) != 0)
    BEGIN
        RAISERROR 30002 'UsersDelTrigCannot delete because foreign keys still exist in GroupUsers'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[UsersDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersDelProc 
 */

CREATE PROCEDURE [dbo].[UsersDelProc]
(
    @UserID           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Users
     WHERE UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'UsersDelProc: Cannot delete because foreign keys still exist in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UsersDelPr_01282009011743002]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersDelProc 
 */

CREATE PROCEDURE [dbo].[UsersDelPr_01282009011743002]
(
    @UserID           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Users
     WHERE UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'UsersDelProc: Cannot delete because foreign keys still exist in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  View [dbo].[vEmailSearch01]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--** View 01
create view [dbo].[vEmailSearch01] as                
SELECT     EmailAttachmentSearchList.Weight AS RANK, Email.SentOn, Email.ShortSubj, Email.SenderEmailAddress, Email.SenderName, Email.SentTO, SUBSTRING(Email.Body, 1, 100) AS Body, Email.CC, Email.Bcc,
                      Email.CreationTime, Email.AllRecipients, Email.ReceivedByName, Email.ReceivedTime, Email.MsgSize, Email.SUBJECT, Email.OriginalFolder, Email.EmailGuid,
                      Email.RetentionExpirationDate, Email.isPublic,  ' ' as ConvertEmailToMsg, Email.UserID, Email.NbrAttachments, Email.SourceTypeCode, 'Y' AS FoundInAttachment,
                      CONVERT(varchar, EmailAttachment.RowID) AS RID, EmailAttachment.RepoSvrName, 9999999 as RowID 
FROM         Email INNER JOIN
                      EmailAttachmentSearchList ON Email.EmailGuid = EmailAttachmentSearchList.EmailGuid INNER JOIN
                      EmailAttachment ON EmailAttachmentSearchList.EmailGuid = EmailAttachment.EmailGuid AND EmailAttachmentSearchList.RowID = EmailAttachment.RowID
GO
/****** Object:  View [dbo].[vEmailNoWeight]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vEmailNoWeight] as
SELECT  [SentOn]
	,[ShortSubj]
	,[SenderEmailAddress]
	,[SenderName]
	,[SentTO]
	,[Body]
	,[CC]
	,[Bcc]
	,[CreationTime]
	,[AllRecipients]
	,[ReceivedByName]
	,[ReceivedTime]
	,[MsgSize]
	,[SUBJECT]
	,[OriginalFolder]
	,[EmailGuid], RetentionExpirationDate, isPublic, UserID, SourceTypeCode, NbrAttachments, ' ' as RID, RepoSvrName
	,ROW_NUMBER() OVER (ORDER BY SentOn ASC) AS ROWID
FROM EMAIL
GO
/****** Object:  View [dbo].[vDocSearch]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE VIEW [dbo].[vDocSearch]  AS
SELECT
[SourceName] ,
[CreateDate]  ,
[VersionNbr] 	 ,
[LastAccessDate]  ,
[FileLength]  ,
[LastWriteTime]  ,
[SourceTypeCode] 		 ,
[isPublic]  ,
[FQN]  ,
[SourceGuid]  ,
[DataSourceOwnerUserID]
FROM [DataSource]
GO
/****** Object:  View [dbo].[vDataSourceTypeTot]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vDataSourceTypeTot] as
select distinct SourceTypeCode, count(*) as Totals 
from datasource 
group by SourceTypeCode
GO
/****** Object:  View [dbo].[vContentWeighted]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vContentWeighted] as
SELECT 	 KEY_TBL.RANK, DS.SourceName
	,DS.CreateDate
	,DS.VersionNbr
	,DS.LastAccessDate
	,DS.FileLength
	,DS.LastWriteTime
	,DS.OriginalFileType
	,DS.isPublic
	,DS.FQN
	,DS.SourceGuid
	,DS.DataSourceOwnerUserID, DS.FileDirectory, DS.RetentionExpirationDate, DS.isMaster, DS.StructuredData, DS.RepoSvrName
	,ROW_NUMBER() OVER (ORDER BY Rank DESC) AS ROWID
FROM DataSource as DS
	INNER JOIN CONTAINSTABLE(dataSource, *,
	'ISABOUT (dale, liz)' ) as KEY_TBL
	ON DS.SourceGuid = KEY_TBL.[KEY]
GO
/****** Object:  View [dbo].[vContentNoWeight]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vContentNoWeight] as
SELECT 	top 10 [SourceName]
	,[CreateDate]
	,[VersionNbr]
	,[LastAccessDate]
	,[FileLength]
	,[LastWriteTime]
	,[SourceTypeCode]
	,[isPublic]
	,[FQN]
	,[SourceGuid]
	,[DataSourceOwnerUserID], FileDirectory, StructuredData, RepoSvrName
	,ROW_NUMBER() OVER (ORDER BY SourceName ASC) AS ROWID
FROM DataSource
GO
/****** Object:  StoredProcedure [dbo].[UsersSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersSelProc 
 */

CREATE PROCEDURE [dbo].[UsersSelProc]
(
    @UserID           nvarchar(50))
AS
BEGIN
    SELECT UserID,
           UserPassword
      FROM Users
     WHERE UserID = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UsersSelPr_01282009011743004]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersSelProc 
 */

CREATE PROCEDURE [dbo].[UsersSelPr_01282009011743004]
(
    @UserID           nvarchar(50))
AS
BEGIN
    SELECT UserID,
           UserPassword
      FROM Users
     WHERE UserID = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UsersInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersInsProc 
 */

CREATE PROCEDURE [dbo].[UsersInsProc]
(
    @UserID           nvarchar(50),
    @UserPassword     nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Users(UserID,
                      UserPassword)
    VALUES(@UserID,
           @UserPassword)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'UsersInsProc: Cannot insert because primary key value not found in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[UsersInsPr_01282009011743003]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersInsProc 
 */

CREATE PROCEDURE [dbo].[UsersInsPr_01282009011743003]
(
    @UserID           nvarchar(50),
    @UserPassword     nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Users(UserID,
                      UserPassword)
    VALUES(@UserID,
           @UserPassword)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'UsersInsProc: Cannot insert because primary key value not found in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceUpdProc 
 */

CREATE PROCEDURE [dbo].[DataSourceUpdProc]
(
    @SourceGuid         nvarchar(50),
    @CreateDate         datetime                 = NULL,
    @SourceName         nvarchar(254)            = NULL,
    @SourceImage        image                    = NULL,
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSource
       SET CreateDate          = @CreateDate,
           SourceName          = @SourceName,
           SourceImage         = @SourceImage,
           SourceTypeCode      = @SourceTypeCode
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceUpdProc: Cannot update  in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: DataSourceSelProc 
 */

CREATE PROCEDURE [dbo].[DataSourceSelProc]
(
    @SourceGuid         nvarchar(50))
AS
BEGIN
    SELECT SourceGuid,
           CreateDate,
           SourceName,
           SourceImage,
           SourceTypeCode
      FROM DataSource
     WHERE SourceGuid = @SourceGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[sdaDataSourceUpdtProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[sdaDataSourceUpdtProc]
(
    @SourceGuid                   nvarchar(50),
    @SourceImage                  image                     = NULL,
    @FQN                          varchar(712)              = NULL,
    @LastAccessDate               datetime                  = NULL,
    @FileLength                   int                       = NULL,
    @LastWriteTime                datetime                  = NULL,
    @RetentionExpirationDate      datetime                  = NULL,
    @Description                  nvarchar(max)             = NULL,
    @RetentionCode                nvarchar(50)              = NULL,
    @MachineID                    nvarchar(250)             = NULL
    )
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSource
       SET SourceImage                   = @SourceImage,
           FQN                           = @FQN,
           LastAccessDate                = @LastAccessDate,
           FileLength                    = @FileLength,
           LastWriteTime                 = @LastWriteTime,
           RetentionExpirationDate       = @RetentionExpirationDate,
           Description                   = @Description,
           RetentionCode                 = @RetentionCode,
           MachineID                     = @MachineID           
     WHERE SourceGuid            = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceUpdProc: Cannot update in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[sdaDataSourceUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[sdaDataSourceUpdProc]
(
    @SourceGuid                   nvarchar(50),
    @SourceImage                  image                     = NULL,
    @FQN                          varchar(712)              = NULL,
    @LastAccessDate               datetime                  = NULL,
    @FileLength                   int                       = NULL,
    @LastWriteTime                datetime                  = NULL,
    @RetentionExpirationDate      datetime                  = NULL,
    @Description                  nvarchar(max)             = NULL,
    @RetentionCode                nvarchar(50)              = NULL,
    @MachineID                    nvarchar(250)             = NULL
    )
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSource
       SET SourceImage                   = @SourceImage,
           FQN                           = @FQN,
           LastAccessDate                = @LastAccessDate,
           FileLength                    = @FileLength,
           LastWriteTime                 = @LastWriteTime,
           RetentionExpirationDate       = @RetentionExpirationDate,
           Description                   = @Description,
           RetentionCode                 = @RetentionCode,
           MachineID                     = @MachineID           
     WHERE SourceGuid            = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceUpdProc: Cannot update in DataSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[sdaDataSourceInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sdaDataSourceInsProc]
(
    @SourceGuid                   nvarchar(50),
    @CreateDate                   datetime                  = NULL,
    @SourceName                   nvarchar(254)             = NULL,
    
    @SourceImage                  image                     = NULL,
    @SourceTypeCode               nvarchar(50) ,
    @FQN                          varchar(712)              = NULL,
    
    @VersionNbr                   int,
    @LastAccessDate               datetime                  = NULL,
    @FileLength                   int                       = NULL,
    @LastWriteTime                datetime                  = NULL,
    @DataSourceOwnerUserID        nvarchar(50),
    
    @isPublic                     nchar(1)                  = NULL,
    @FileDirectory                nvarchar(300)             = NULL,
    @OriginalFileType             nvarchar(50)              = NULL,
    
    @RetentionExpirationDate      datetime                  = NULL,
    @IsPublicPreviousState        nchar(1)                  = NULL,
    @isAvailable                  nchar(1)                  = NULL,
    
    @Description                  nvarchar(max)             = NULL,
    
    @CreationDate                 datetime                  = NULL,
    @RetentionCode                nvarchar(50)              = NULL,
    @MachineID                    nvarchar(250)             = NULL,
    
    @CRC                          nvarchar(25)              = NULL,
    @StructuredData               bit                       = NULL
    )
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSource(
		   SourceGuid,
           CreateDate,
           SourceName,
    
           SourceImage,
           SourceTypeCode,
           FQN,
    
           VersionNbr,
           LastAccessDate,
           FileLength,
           LastWriteTime,
           DataSourceOwnerUserID,
           
           isPublic,
           FileDirectory,
           OriginalFileType,
    
           RetentionExpirationDate,
           IsPublicPreviousState,
           isAvailable,
    
           Description,
           CreationDate,
           RetentionCode,
           
           MachineID,
           CRC,
           StructuredData
           )
    VALUES(@SourceGuid,
           @CreateDate,
           @SourceName,
           @SourceImage,
           @SourceTypeCode,
           @FQN,
           @VersionNbr,
           @LastAccessDate,
           @FileLength,
           @LastWriteTime,
           @DataSourceOwnerUserID,
           @isPublic,
           @FileDirectory,
           @OriginalFileType,
           @RetentionExpirationDate,
           @IsPublicPreviousState,
           @isAvailable,
           @Description,
           @CreationDate,
           @RetentionCode,
           @MachineID,
           @CRC,
           @StructuredData)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceInsProc: failed insert.'
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ZippedFilesUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ZippedFilesUpdProc]
(
    @ContentGUID               nvarchar(50),
    @SourceTypeCode            nvarchar(50)            = NULL,
    @SourceImage               image                   = NULL,
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE ZippedFiles
       SET SourceTypeCode             = @SourceTypeCode,
           SourceImage                = @SourceImage,
           SourceGuid                 = @SourceGuid,
           DataSourceOwnerUserID      = @DataSourceOwnerUserID
     WHERE ContentGUID = @ContentGUID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ZippedFilesUpdProc: Cannot update  in ZippedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ZippedFilesSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ZippedFilesSelProc]
(
    @ContentGUID               nvarchar(50))
AS
BEGIN
    SELECT ContentGUID,
           SourceTypeCode,
           SourceImage,
           SourceGuid,
           DataSourceOwnerUserID
      FROM ZippedFiles
     WHERE ContentGUID = @ContentGUID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ZippedFilesInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ZippedFilesInsProc]
(
    @ContentGUID               nvarchar(50),
    @SourceTypeCode            nvarchar(50)            = NULL,
    @SourceImage               image                   = NULL,
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ZippedFiles(ContentGUID,
                            SourceTypeCode,
                            SourceImage,
                            SourceGuid,
                            DataSourceOwnerUserID)
    VALUES(@ContentGUID,
           @SourceTypeCode,
           @SourceImage,
           @SourceGuid,
           @DataSourceOwnerUserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ZippedFilesInsProc: Cannot insert because primary key value not found in ZippedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ZippedFilesDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ZippedFilesDelProc]
(
    @ContentGUID               nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ZippedFiles
     WHERE ContentGUID = @ContentGUID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ZippedFilesDelProc: Cannot delete because foreign keys still exist in ZippedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_Update]
(
	@ContentGUIDOriginal nvarchar(50), 
	@ContentGUID nvarchar(50),
	@SourceTypeCode nvarchar(50),
	@SourceImage image,
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Update a row in the ZippedFiles table using the primary key
*/
UPDATE [ZippedFiles] SET [ContentGUID] = @ContentGUID, [SourceTypeCode] = @SourceTypeCode, [SourceImage] = @SourceImage, [SourceGuid] = @SourceGuid, [DataSourceOwnerUserID] = @DataSourceOwnerUserID WHERE [ContentGUID] = @ContentGUIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ZippedFiles.*
FROM
	gv_ZippedFiles
WHERE
	[ContentGUID] = @ContentGUIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_Insert]
(
	@ContentGUID nvarchar(50),
	@SourceTypeCode nvarchar(50),
	@SourceImage image,
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Add a row to the ZippedFiles table
*/

INSERT INTO [ZippedFiles]
( [ContentGUID], [SourceTypeCode], [SourceImage], [SourceGuid], [DataSourceOwnerUserID]
)
VALUES
( @ContentGUID, @SourceTypeCode, @SourceImage, @SourceGuid, @DataSourceOwnerUserID
)

/*
** Select the new row
*/
SELECT
	gv_ZippedFiles.*
FROM
	gv_ZippedFiles
WHERE
	[ContentGUID] = @ContentGUID
GO
/****** Object:  StoredProcedure [dbo].[gp_ZippedFiles_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ZippedFiles_Delete]
(
	@ContentGUID nvarchar(50)
)
AS
/*
** Delete a row from the ZippedFiles table
*/
DELETE FROM [ZippedFiles] WHERE [ContentGUID] = @ContentGUID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ZippedFiles table', 16, 1)
END
GO
/****** Object:  View [dbo].[vSourceWithWeights]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vSourceWithWeights] as 
SELECT 	 KEY_TBL.RANK, DS.SourceName
	,DS.CreateDate
	,DS.VersionNbr
	,DS.LastAccessDate
	,DS.FileLength
	,DS.LastWriteTime
	,DS.OriginalFileType
	,DS.isPublic
	,DS.FQN
	,DS.SourceGuid
	,DS.DataSourceOwnerUserID, DS.FileDirectory, DS.RetentionExpirationDate, DS.isMaster, DS.StructuredData, DS.RepoSvrName
	,ROW_NUMBER() OVER (ORDER BY Rank DESC) AS ROWID
FROM DataSource as DS
	INNER JOIN CONTAINSTABLE(dataSource, *,
	'ISABOUT (dale, liz)' ) as KEY_TBL
	ON DS.SourceGuid = KEY_TBL.[KEY]
GO
/****** Object:  StoredProcedure [dbo].[UserGroupSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[UserGroupSelProc]
(
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    SELECT GroupOwnerUserID,
           GroupName
      FROM UserGroup
     WHERE GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UserGroupInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[UserGroupInsProc]
(
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO UserGroup(GroupOwnerUserID,
                          GroupName)
    VALUES(@GroupOwnerUserID,
           @GroupName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'UserGroupInsProc: Cannot insert because primary key value not found in UserGroup '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[UserGroupDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[UserGroupDelProc]
(
    @GroupOwnerUserID     nvarchar(50),
    @GroupName            nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM UserGroup
     WHERE GroupOwnerUserID = @GroupOwnerUserID
       AND GroupName        = @GroupName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'UserGroupDelProc: Cannot delete because foreign keys still exist in UserGroup '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [UserGroup_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[UserGroup_INS]
   ON [dbo].[UserGroup]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE UserGroup
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM UserGroup t
   JOIN inserted i
   ON 
     t.GroupOwnerUserID = i.GroupOwnerUserID
     and t.GroupName = i.GroupName
GO
/****** Object:  Trigger [trigUserGroup_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigUserGroup_Update]
   ON [dbo].[UserGroup]
         AFTER Update 
   AS
         BEGIN 
         UPDATE UserGroup 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      UserGroup.GroupOwnerUserID = inserted.GroupOwnerUserID
     and UserGroup.GroupName = inserted.GroupName
 End
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_Update]
(
	@GroupOwnerUserIDOriginal nvarchar(50), 
	@GroupOwnerUserID nvarchar(50),
	@GroupNameOriginal nvarchar(80), 
	@GroupName nvarchar(80)
)
AS
/*
** Update a row in the UserGroup table using the primary key
*/
UPDATE [UserGroup] SET [GroupOwnerUserID] = @GroupOwnerUserID, [GroupName] = @GroupName WHERE [GroupOwnerUserID] = @GroupOwnerUserIDOriginal AND [GroupName] = @GroupNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_UserGroup.*
FROM
	gv_UserGroup
WHERE
	[GroupOwnerUserID] = @GroupOwnerUserIDOriginal
	AND [GroupName] = @GroupNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_Insert]
(
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Add a row to the UserGroup table
*/

INSERT INTO [UserGroup]
( [GroupOwnerUserID], [GroupName]
)
VALUES
( @GroupOwnerUserID, @GroupName
)

/*
** Select the new row
*/
SELECT
	gv_UserGroup.*
FROM
	gv_UserGroup
WHERE
	[GroupOwnerUserID] = @GroupOwnerUserID
	AND [GroupName] = @GroupName
GO
/****** Object:  StoredProcedure [dbo].[gp_UserGroup_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserGroup_Delete]
(
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80)
)
AS
/*
** Delete a row from the UserGroup table
*/
DELETE FROM [UserGroup] WHERE [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the UserGroup table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[UpdateDataSourceImage]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[UpdateDataSourceImage]		
		@SourceGuid nvarchar(50),		 
		@SourceImage image,						 
		@LastAccessDate datetime, 		 
		@LastWriteTime datetime,		
        @VersionNbr int
AS

set nocount on
	update [DataSource] 		
		set SourceImage = @SourceImage,						 
		LastAccessDate = @LastAccessDate,		
		LastWriteTime = @LastWriteTime, 
	    VersionNbr = @VersionNbr
where SourceGuid = @SourceGuid

RETURN
GO
/****** Object:  Trigger [UD_QtyUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: UD_QtyUpdTrig 
 */

CREATE TRIGGER [dbo].[UD_QtyUpdTrig] ON [dbo].[UD_Qty]
FOR UPDATE AS
BEGIN
    DECLARE
        @Code char(10),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(Code))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM InformationProduct ch, deleted
          WHERE ch.Code = deleted.Code) != 0)
        BEGIN
            RAISERROR 30001 'UD_QtyUpdTrigCannot update because foreign keys still exist in InformationProduct'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[UD_QtyUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UD_QtyUpdProc 
 */

CREATE PROCEDURE [dbo].[UD_QtyUpdProc]
(
    @Code            char(10),
    @Description     char(10)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE UD_Qty
       SET Description      = @Description
     WHERE Code = @Code

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'UD_QtyUpdProc: Cannot update  in UD_Qty '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [trigSourceType_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSourceType_Update]
   ON [dbo].[SourceType]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SourceType 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SourceType.SourceTypeCode = inserted.SourceTypeCode
 End
GO
/****** Object:  Trigger [SourceTypeUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SourceTypeUpdTrig 
 */

CREATE TRIGGER [dbo].[SourceTypeUpdTrig] ON [dbo].[SourceType]
FOR UPDATE AS
BEGIN
    DECLARE
        @SourceTypeCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(SourceTypeCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM DataSource ch, deleted
          WHERE ch.SourceTypeCode = deleted.SourceTypeCode) != 0)
        BEGIN
            RAISERROR 30001 'SourceTypeUpdTrigCannot update because foreign keys still exist in DataSource'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SourceTypeUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[SourceTypeUpdProc]
(
    @SourceTypeCode     nvarchar(50),
    @SourceTypeDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE SourceType
       SET SourceTypeDesc      = @SourceTypeDesc
     WHERE SourceTypeCode = @SourceTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SourceTypeUpdProc: Cannot update  in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceTypeSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeSelProc 
 */

CREATE PROCEDURE [dbo].[SourceTypeSelProc]
(
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    SELECT SourceTypeCode,
           SourceTypeDesc
      FROM SourceType
     WHERE SourceTypeCode = @SourceTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceTypeInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeInsProc 
 */

CREATE PROCEDURE [dbo].[SourceTypeInsProc]
(
    @SourceTypeCode     nvarchar(50),
    @SourceTypeDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceType(SourceTypeCode,
                           SourceTypeDesc)
    VALUES(@SourceTypeCode,
           @SourceTypeDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceTypeInsProc: Cannot insert because primary key value not found in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [SourceTypeDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: SourceTypeDelTrig 
 */

CREATE TRIGGER [dbo].[SourceTypeDelTrig] ON [dbo].[SourceType]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM DataSource ch, deleted
         WHERE ch.SourceTypeCode = deleted.SourceTypeCode) != 0)
    BEGIN
        RAISERROR 30002 'SourceTypeDelTrigCannot delete because foreign keys still exist in DataSource'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[SourceTypeDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeDelProc 
 */

CREATE PROCEDURE [dbo].[SourceTypeDelProc]
(
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SourceType
     WHERE SourceTypeCode = @SourceTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SourceTypeDelProc: Cannot delete because foreign keys still exist in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SourceType_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SourceType_INS]
   ON [dbo].[SourceType]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SourceType
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SourceType t
   JOIN inserted i
   ON 
     t.SourceTypeCode = i.SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[SourceType_04012008185317005]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[SourceType_04012008185317005]
(
    @SourceTypeCode     nvarchar(50),
    @SourceTypeDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE SourceType
       SET SourceTypeDesc      = @SourceTypeDesc
     WHERE SourceTypeCode = @SourceTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SourceTypeUpdProc: Cannot update  in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceType_04012008185317004]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeSelProc 
 */

CREATE PROCEDURE [dbo].[SourceType_04012008185317004]
(
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    SELECT SourceTypeCode,
           SourceTypeDesc
      FROM SourceType
     WHERE SourceTypeCode = @SourceTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceType_04012008185317003]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeInsProc 
 */

CREATE PROCEDURE [dbo].[SourceType_04012008185317003]
(
    @SourceTypeCode     nvarchar(50),
    @SourceTypeDesc     nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceType(SourceTypeCode,
                           SourceTypeDesc)
    VALUES(@SourceTypeCode,
           @SourceTypeDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceTypeInsProc: Cannot insert because primary key value not found in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SourceType_04012008185317002]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceTypeDelProc 
 */

CREATE PROCEDURE [dbo].[SourceType_04012008185317002]
(
    @SourceTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SourceType
     WHERE SourceTypeCode = @SourceTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SourceTypeDelProc: Cannot delete because foreign keys still exist in SourceType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceType_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceType_Update]
(
	@SourceTypeCodeOriginal nvarchar(50), 
	@SourceTypeCode nvarchar(50),
	@StoreExternal bit,
	@SourceTypeDesc nvarchar(254),
	@Indexable bit
)
AS
/*
** Update a row in the SourceType table using the primary key
*/
UPDATE [SourceType] SET [SourceTypeCode] = @SourceTypeCode, [StoreExternal] = @StoreExternal, [SourceTypeDesc] = @SourceTypeDesc, [Indexable] = @Indexable WHERE [SourceTypeCode] = @SourceTypeCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_SourceType.*
FROM
	gv_SourceType
WHERE
	[SourceTypeCode] = @SourceTypeCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceType_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceType_Insert]
(
	@SourceTypeCode nvarchar(50),
	@StoreExternal bit,
	@SourceTypeDesc nvarchar(254),
	@Indexable bit
)
AS
/*
** Add a row to the SourceType table
*/

INSERT INTO [SourceType]
( [SourceTypeCode], [StoreExternal], [SourceTypeDesc], [Indexable]
)
VALUES
( @SourceTypeCode, @StoreExternal, @SourceTypeDesc, @Indexable
)

/*
** Select the new row
*/
SELECT
	gv_SourceType.*
FROM
	gv_SourceType
WHERE
	[SourceTypeCode] = @SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceType_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceType_Delete]
(
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Delete a row from the SourceType table
*/
DELETE FROM [SourceType] WHERE [SourceTypeCode] = @SourceTypeCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SourceType table', 16, 1)
END
GO
/****** Object:  Trigger [DataSourceInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: DataSourceInsTrig 
 */

CREATE TRIGGER [dbo].[DataSourceInsTrig] ON [dbo].[DataSource]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM SourceType pr, inserted
         WHERE pr.SourceTypeCode = inserted.SourceTypeCode) != @Rows)
    BEGIN
        RAISERROR 30000 'DataSourceInsTrigCannot insert because primary key value not found in SourceType'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  View [dbo].[gv_LibDirectory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LibDirectory]
AS
/*
** Select all rows from the LibDirectory table
** and the lookup expressions defined for associated tables
*/
SELECT [LibDirectory].* FROM [LibDirectory]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_Update]
(
	@DirectoryNameOriginal nvarchar(254), 
	@DirectoryName nvarchar(254),
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80)
)
AS
/*
** Update a row in the LibDirectory table using the primary key
*/
UPDATE [LibDirectory] SET [DirectoryName] = @DirectoryName, [UserID] = @UserID, [LibraryName] = @LibraryName WHERE [DirectoryName] = @DirectoryNameOriginal AND [UserID] = @UserIDOriginal AND [LibraryName] = @LibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_LibDirectory.*
FROM
	gv_LibDirectory
WHERE
	[DirectoryName] = @DirectoryNameOriginal
	AND [UserID] = @UserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_SelectByLibraryNameAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_SelectByLibraryNameAndUserID]
(
	@LibraryName nvarchar(80),
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the LibDirectory table by LibraryName and UserID
*/
SELECT 
	gv_LibDirectory.*
FROM
	gv_LibDirectory WHERE [LibraryName] = @LibraryName AND [UserID] = @UserID ORDER BY [DirectoryName], [UserID], [LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_SelectByDirectoryNameAndUserIDAndLibraryName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_SelectByDirectoryNameAndUserIDAndLibraryName]
(
	@DirectoryName nvarchar(254),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Select a row from the LibDirectory table by primary key
*/

SELECT 
	gv_LibDirectory.*
FROM
	gv_LibDirectory WHERE [DirectoryName] = @DirectoryName AND [UserID] = @UserID AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_SelectAll]
AS
/*
** Select all rows from the LibDirectory table
*/

SELECT 
	gv_LibDirectory.*
FROM
	gv_LibDirectory
ORDER BY
	[DirectoryName],
	[UserID],
	[LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibDirectory_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibDirectory_Insert]
(
	@DirectoryName nvarchar(254),
	@UserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Add a row to the LibDirectory table
*/

INSERT INTO [LibDirectory]
( [DirectoryName], [UserID], [LibraryName]
)
VALUES
( @DirectoryName, @UserID, @LibraryName
)

/*
** Select the new row
*/
SELECT
	gv_LibDirectory.*
FROM
	gv_LibDirectory
WHERE
	[DirectoryName] = @DirectoryName
	AND [UserID] = @UserID
	AND [LibraryName] = @LibraryName
GO
/****** Object:  View [dbo].[gv_JargonWords]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_JargonWords]
AS
/*
** Select all rows from the JargonWords table
** and the lookup expressions defined for associated tables
*/
SELECT [JargonWords].* FROM [JargonWords]
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_Update]
(
	@tgtWordOriginal nvarchar(50), 
	@tgtWord nvarchar(50),
	@JargonCodeOriginal nvarchar(50), 
	@JargonCode nvarchar(50),
	@jDesc nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Update a row in the JargonWords table using the primary key
*/
UPDATE [JargonWords] SET [tgtWord] = @tgtWord, [jDesc] = @jDesc, [CreateDate] = @CreateDate, [JargonCode] = @JargonCode WHERE [tgtWord] = @tgtWordOriginal AND [JargonCode] = @JargonCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_JargonWords.*
FROM
	gv_JargonWords
WHERE
	[tgtWord] = @tgtWordOriginal
	AND [JargonCode] = @JargonCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_SelectBytgtWordAndJargonCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_SelectBytgtWordAndJargonCode]
(
	@tgtWord nvarchar(50),
	@JargonCode nvarchar(50)
)
AS
/*
** Select a row from the JargonWords table by primary key
*/

SELECT 
	gv_JargonWords.*
FROM
	gv_JargonWords WHERE [tgtWord] = @tgtWord AND [JargonCode] = @JargonCode
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_SelectByJargonCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_SelectByJargonCode]
(
	@JargonCode nvarchar(50)
)
AS
/*
** Select rows from the JargonWords table by JargonCode
*/
SELECT 
	gv_JargonWords.*
FROM
	gv_JargonWords WHERE [JargonCode] = @JargonCode ORDER BY [tgtWord], [JargonCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_SelectAll]
AS
/*
** Select all rows from the JargonWords table
*/

SELECT 
	gv_JargonWords.*
FROM
	gv_JargonWords
ORDER BY
	[tgtWord],
	[JargonCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_JargonWords_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_JargonWords_Insert]
(
	@tgtWord nvarchar(50),
	@jDesc nvarchar(4000),
	@CreateDate datetime,
	@JargonCode nvarchar(50)
)
AS
/*
** Add a row to the JargonWords table
*/

INSERT INTO [JargonWords]
( [tgtWord], [jDesc], [CreateDate], [JargonCode]
)
VALUES
( @tgtWord, @jDesc, @CreateDate, @JargonCode
)

/*
** Select the new row
*/
SELECT
	gv_JargonWords.*
FROM
	gv_JargonWords
WHERE
	[tgtWord] = @tgtWord
	AND [JargonCode] = @JargonCode
GO
/****** Object:  View [dbo].[gv_InformationType]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_InformationType]
AS
/*
** Select all rows from the InformationType table
** and the lookup expressions defined for associated tables
*/
SELECT [InformationType].* FROM [InformationType]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationType_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationType_Update]
(
	@InfoTypeCodeOriginal nvarchar(50), 
	@InfoTypeCode nvarchar(50),
	@CreateDate datetime,
	@Description nvarchar(4000)
)
AS
/*
** Update a row in the InformationType table using the primary key
*/
UPDATE [InformationType] SET [CreateDate] = @CreateDate, [InfoTypeCode] = @InfoTypeCode, [Description] = @Description WHERE [InfoTypeCode] = @InfoTypeCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_InformationType.*
FROM
	gv_InformationType
WHERE
	[InfoTypeCode] = @InfoTypeCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationType_SelectByInfoTypeCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationType_SelectByInfoTypeCode]
(
	@InfoTypeCode nvarchar(50)
)
AS
/*
** Select a row from the InformationType table by primary key
*/

SELECT 
	gv_InformationType.*
FROM
	gv_InformationType WHERE [InfoTypeCode] = @InfoTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationType_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationType_SelectAll]
AS
/*
** Select all rows from the InformationType table
*/

SELECT 
	gv_InformationType.*
FROM
	gv_InformationType
ORDER BY
	[InfoTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationType_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationType_Insert]
(
	@CreateDate datetime,
	@InfoTypeCode nvarchar(50),
	@Description nvarchar(4000)
)
AS
/*
** Add a row to the InformationType table
*/

INSERT INTO [InformationType]
( [CreateDate], [InfoTypeCode], [Description]
)
VALUES
( @CreateDate, @InfoTypeCode, @Description
)

/*
** Select the new row
*/
SELECT
	gv_InformationType.*
FROM
	gv_InformationType
WHERE
	[InfoTypeCode] = @InfoTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_Update]
(
	@ContainerTypeOriginal nvarchar(25), 
	@ContainerType nvarchar(25),
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@CreateDate datetime,
	@Code char(10),
	@RetentionCode nvarchar(50),
	@VolitilityCode nvarchar(50),
	@InfoTypeCode nvarchar(50)
)
AS
/*
** Update a row in the InformationProduct table using the primary key
*/
UPDATE [InformationProduct] SET [CreateDate] = @CreateDate, [Code] = @Code, [RetentionCode] = @RetentionCode, [VolitilityCode] = @VolitilityCode, [ContainerType] = @ContainerType, [CorpFuncName] = @CorpFuncName, [InfoTypeCode] = @InfoTypeCode, [CorpName] = @CorpName WHERE [ContainerType] = @ContainerTypeOriginal AND [CorpFuncName] = @CorpFuncNameOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_InformationProduct.*
FROM
	gv_InformationProduct
WHERE
	[ContainerType] = @ContainerTypeOriginal
	AND [CorpFuncName] = @CorpFuncNameOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectByVolitilityCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectByVolitilityCode]
(
	@VolitilityCode nvarchar(50)
)
AS
/*
** Select rows from the InformationProduct table by VolitilityCode
*/
SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct WHERE [VolitilityCode] = @VolitilityCode ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectByRetentionCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectByRetentionCode]
(
	@RetentionCode nvarchar(50)
)
AS
/*
** Select rows from the InformationProduct table by RetentionCode
*/
SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct WHERE [RetentionCode] = @RetentionCode ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectByInfoTypeCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectByInfoTypeCode]
(
	@InfoTypeCode nvarchar(50)
)
AS
/*
** Select rows from the InformationProduct table by InfoTypeCode
*/
SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct WHERE [InfoTypeCode] = @InfoTypeCode ORDER BY [ContainerType], [CorpFuncName], [CorpName]
GO
/****** Object:  StoredProcedure [dbo].[gp_InformationProduct_SelectByContainerTypeAndCorpFuncNameAndCorpName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_InformationProduct_SelectByContainerTypeAndCorpFuncNameAndCorpName]
(
	@ContainerType nvarchar(25),
	@CorpFuncName nvarchar(80),
	@CorpName nvarchar(50)
)
AS
/*
** Select a row from the InformationProduct table by primary key
*/

SELECT 
	gv_InformationProduct.*
FROM
	gv_InformationProduct WHERE [ContainerType] = @ContainerType AND [CorpFuncName] = @CorpFuncName AND [CorpName] = @CorpName
GO
/****** Object:  View [dbo].[gv_AttachmentType]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_AttachmentType]
AS
/*
** Select all rows from the AttachmentType table
** and the lookup expressions defined for associated tables
*/
SELECT [AttachmentType].* FROM [AttachmentType]
GO
/****** Object:  StoredProcedure [dbo].[gp_AttachmentType_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttachmentType_Update]
(
	@AttachmentCodeOriginal nvarchar(50), 
	@AttachmentCode nvarchar(50),
	@Description nvarchar(254),
	@isZipFormat bit
)
AS
/*
** Update a row in the AttachmentType table using the primary key
*/
UPDATE [AttachmentType] SET [AttachmentCode] = @AttachmentCode, [Description] = @Description, [isZipFormat] = @isZipFormat WHERE [AttachmentCode] = @AttachmentCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_AttachmentType.*
FROM
	gv_AttachmentType
WHERE
	[AttachmentCode] = @AttachmentCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_AttachmentType_SelectByAttachmentCode]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttachmentType_SelectByAttachmentCode]
(
	@AttachmentCode nvarchar(50)
)
AS
/*
** Select a row from the AttachmentType table by primary key
*/

SELECT 
	gv_AttachmentType.*
FROM
	gv_AttachmentType WHERE [AttachmentCode] = @AttachmentCode
GO
/****** Object:  StoredProcedure [dbo].[gp_AttachmentType_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttachmentType_SelectAll]
AS
/*
** Select all rows from the AttachmentType table
*/

SELECT 
	gv_AttachmentType.*
FROM
	gv_AttachmentType
ORDER BY
	[AttachmentCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_AttachmentType_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttachmentType_Insert]
(
	@AttachmentCode nvarchar(50),
	@Description nvarchar(254),
	@isZipFormat bit
)
AS
/*
** Add a row to the AttachmentType table
*/

INSERT INTO [AttachmentType]
( [AttachmentCode], [Description], [isZipFormat]
)
VALUES
( @AttachmentCode, @Description, @isZipFormat
)

/*
** Select the new row
*/
SELECT
	gv_AttachmentType.*
FROM
	gv_AttachmentType
WHERE
	[AttachmentCode] = @AttachmentCode
GO
/****** Object:  View [dbo].[gv_SubLibrary]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SubLibrary]
AS
/*
** Select all rows from the SubLibrary table
** and the lookup expressions defined for associated tables
*/
SELECT [SubLibrary].* FROM [SubLibrary]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@SubUserIDOriginal nvarchar(50), 
	@SubUserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@SubLibraryNameOriginal nvarchar(80), 
	@SubLibraryName nvarchar(80)
)
AS
/*
** Update a row in the SubLibrary table using the primary key
*/
UPDATE [SubLibrary] SET [UserID] = @UserID, [SubUserID] = @SubUserID, [LibraryName] = @LibraryName, [SubLibraryName] = @SubLibraryName WHERE [UserID] = @UserIDOriginal AND [SubUserID] = @SubUserIDOriginal AND [LibraryName] = @LibraryNameOriginal AND [SubLibraryName] = @SubLibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_SubLibrary.*
FROM
	gv_SubLibrary
WHERE
	[UserID] = @UserIDOriginal
	AND [SubUserID] = @SubUserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
	AND [SubLibraryName] = @SubLibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_SelectByUserIDAndSubUserIDAndLibraryNameAndSubLibraryName]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_SelectByUserIDAndSubUserIDAndLibraryNameAndSubLibraryName]
(
	@UserID nvarchar(50),
	@SubUserID nvarchar(50),
	@LibraryName nvarchar(80),
	@SubLibraryName nvarchar(80)
)
AS
/*
** Select a row from the SubLibrary table by primary key
*/

SELECT 
	gv_SubLibrary.*
FROM
	gv_SubLibrary WHERE [UserID] = @UserID AND [SubUserID] = @SubUserID AND [LibraryName] = @LibraryName AND [SubLibraryName] = @SubLibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_SelectBySubLibraryName]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_SelectBySubLibraryName]
(
	@SubLibraryName nvarchar(80)
)
AS
/*
** Select rows from the SubLibrary table by SubLibraryName
*/
SELECT 
	gv_SubLibrary.*
FROM
	gv_SubLibrary WHERE [SubLibraryName] = @SubLibraryName ORDER BY [UserID], [SubUserID], [LibraryName], [SubLibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_SelectByLibraryNameAndUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_SelectByLibraryNameAndUserID]
(
	@LibraryName nvarchar(80),
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the SubLibrary table by LibraryName and UserID
*/
SELECT 
	gv_SubLibrary.*
FROM
	gv_SubLibrary WHERE [LibraryName] = @LibraryName AND [UserID] = @UserID ORDER BY [UserID], [SubUserID], [LibraryName], [SubLibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_SelectAll]
AS
/*
** Select all rows from the SubLibrary table
*/

SELECT 
	gv_SubLibrary.*
FROM
	gv_SubLibrary
ORDER BY
	[UserID],
	[SubUserID],
	[LibraryName],
	[SubLibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubLibrary_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubLibrary_Insert]
(
	@UserID nvarchar(50),
	@SubUserID nvarchar(50),
	@LibraryName nvarchar(80),
	@SubLibraryName nvarchar(80)
)
AS
/*
** Add a row to the SubLibrary table
*/

INSERT INTO [SubLibrary]
( [UserID], [SubUserID], [LibraryName], [SubLibraryName]
)
VALUES
( @UserID, @SubUserID, @LibraryName, @SubLibraryName
)

/*
** Select the new row
*/
SELECT
	gv_SubLibrary.*
FROM
	gv_SubLibrary
WHERE
	[UserID] = @UserID
	AND [SubUserID] = @SubUserID
	AND [LibraryName] = @LibraryName
	AND [SubLibraryName] = @SubLibraryName
GO
/****** Object:  View [dbo].[gv_SubDir]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SubDir]
AS
/*
** Select all rows from the SubDir table
** and the lookup expressions defined for associated tables
*/
SELECT [SubDir].* FROM [SubDir]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@SUBFQNOriginal nvarchar(254), 
	@SUBFQN nvarchar(254),
	@FQNOriginal varchar(254), 
	@FQN varchar(254),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@OcrDirectory nchar(1),
	@VersionFiles nchar(1),
	@isSysDefault bit
)
AS
/*
** Update a row in the SubDir table using the primary key
*/
UPDATE [SubDir] SET [UserID] = @UserID, [SUBFQN] = @SUBFQN, [FQN] = @FQN, [ckPublic] = @ckPublic, [ckDisableDir] = @ckDisableDir, [OcrDirectory] = @OcrDirectory, [VersionFiles] = @VersionFiles, [isSysDefault] = @isSysDefault WHERE [UserID] = @UserIDOriginal AND [SUBFQN] = @SUBFQNOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_SubDir.*
FROM
	gv_SubDir
WHERE
	[UserID] = @UserIDOriginal
	AND [SUBFQN] = @SUBFQNOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_SelectByUserIDAndSUBFQNAndFQN]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_SelectByUserIDAndSUBFQNAndFQN]
(
	@UserID nvarchar(50),
	@SUBFQN nvarchar(254),
	@FQN varchar(254)
)
AS
/*
** Select a row from the SubDir table by primary key
*/

SELECT 
	gv_SubDir.*
FROM
	gv_SubDir WHERE [UserID] = @UserID AND [SUBFQN] = @SUBFQN AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_SelectByFQNAndUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_SelectByFQNAndUserID]
(
	@FQN varchar(254),
	@UserID nvarchar(50)
)
AS
/*
** Select rows from the SubDir table by FQN and UserID
*/
SELECT 
	gv_SubDir.*
FROM
	gv_SubDir WHERE [FQN] = @FQN AND [UserID] = @UserID ORDER BY [UserID], [SUBFQN], [FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_SelectAll]
AS
/*
** Select all rows from the SubDir table
*/

SELECT 
	gv_SubDir.*
FROM
	gv_SubDir
ORDER BY
	[UserID],
	[SUBFQN],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_SubDir_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SubDir_Insert]
(
	@UserID nvarchar(50),
	@SUBFQN nvarchar(254),
	@FQN varchar(254),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@OcrDirectory nchar(1),
	@VersionFiles nchar(1),
	@isSysDefault bit
)
AS
/*
** Add a row to the SubDir table
*/

INSERT INTO [SubDir]
( [UserID], [SUBFQN], [FQN], [ckPublic], [ckDisableDir], [OcrDirectory], [VersionFiles], [isSysDefault]
)
VALUES
( @UserID, @SUBFQN, @FQN, @ckPublic, @ckDisableDir, @OcrDirectory, @VersionFiles, @isSysDefault
)

/*
** Select the new row
*/
SELECT
	gv_SubDir.*
FROM
	gv_SubDir
WHERE
	[UserID] = @UserID
	AND [SUBFQN] = @SUBFQN
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_Storage_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Storage_Update]
(
	@StoreCodeOriginal nvarchar(50), 
	@StoreCode nvarchar(50),
	@StoreDesc nvarchar(18),
	@CreateDate datetime
)
AS
/*
** Update a row in the Storage table using the primary key
*/
UPDATE [Storage] SET [StoreCode] = @StoreCode, [StoreDesc] = @StoreDesc, [CreateDate] = @CreateDate WHERE [StoreCode] = @StoreCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_Storage.*
FROM
	gv_Storage
WHERE
	[StoreCode] = @StoreCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Storage_SelectByStoreCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Storage_SelectByStoreCode]
(
	@StoreCode nvarchar(50)
)
AS
/*
** Select a row from the Storage table by primary key
*/

SELECT 
	gv_Storage.*
FROM
	gv_Storage WHERE [StoreCode] = @StoreCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Storage_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Storage_SelectAll]
AS
/*
** Select all rows from the Storage table
*/

SELECT 
	gv_Storage.*
FROM
	gv_Storage
ORDER BY
	[StoreCode]
GO
/****** Object:  Trigger [Users_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Users_INS]
   ON [dbo].[Users]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Users
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Users t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
GO
/****** Object:  View [dbo].[vMigrateUsers]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vMigrateUsers] as
Select UserName as ECM_UserName, 
		UserLoginID as ECM_UserID, 
		UserPassword as ECM_UserPW, 
		EmailAddress as ECM_UserEmail,
		'xx' as ECM_GroupName, 
		'LL' as ECM_Library, 
		'U' as ECM_Authority,
		ClientOnly as ECM_ClientOnly
		from Users
GO
/****** Object:  StoredProcedure [dbo].[UsersUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersUpdProc 
 */

CREATE PROCEDURE [dbo].[UsersUpdProc]
(
    @UserID           nvarchar(50),
    @UserPassword     nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Users
       SET UserPassword      = @UserPassword
     WHERE UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'UsersUpdProc: Cannot update  in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[UsersUpdPr_01282009011743005]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: UsersUpdProc 
 */

CREATE PROCEDURE [dbo].[UsersUpdPr_01282009011743005]
(
    @UserID           nvarchar(50),
    @UserPassword     nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Users
       SET UserPassword      = @UserPassword
     WHERE UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'UsersUpdProc: Cannot update  in Users '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [trigFunctionProdJargon_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigFunctionProdJargon_Update]
   ON [dbo].[FunctionProdJargon]
         AFTER Update 
   AS
         BEGIN 
         UPDATE FunctionProdJargon 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      FunctionProdJargon.CorpFuncName = inserted.CorpFuncName
     and FunctionProdJargon.JargonCode = inserted.JargonCode
     and FunctionProdJargon.CorpName = inserted.CorpName
 End
GO
/****** Object:  Trigger [RepeatDataUpdTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: RepeatDataUpdTrig 
 */

CREATE TRIGGER [dbo].[RepeatDataUpdTrig] ON [dbo].[RepeatData]
FOR UPDATE AS
BEGIN
    DECLARE
        @RepeatDataCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: CASCADE

    IF (UPDATE(RepeatDataCode))
    BEGIN
        SELECT @RepeatDataCode = RepeatDataCode
        FROM inserted

        UPDATE FunctionProdJargon
          SET RepeatDataCode = @RepeatDataCode
        FROM FunctionProdJargon ch, deleted
        WHERE
            ch.RepeatDataCode = deleted.RepeatDataCode
    END

END
GO
/****** Object:  Trigger [RepeatDataDelTrig]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: RepeatDataDelTrig 
 */

CREATE TRIGGER [dbo].[RepeatDataDelTrig] ON [dbo].[RepeatData]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM FunctionProdJargon ch, deleted
         WHERE ch.RepeatDataCode = deleted.RepeatDataCode) != 0)
    BEGIN
        RAISERROR 30002 'RepeatDataDelTrigCannot delete because foreign keys still exist in FunctionProdJargon'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_Update]
(
	@CorpFuncNameOriginal nvarchar(80), 
	@CorpFuncName nvarchar(80),
	@JargonCodeOriginal nvarchar(50), 
	@JargonCode nvarchar(50),
	@CorpNameOriginal nvarchar(50), 
	@CorpName nvarchar(50),
	@KeyFlag binary(50),
	@RepeatDataCode nvarchar(50)
)
AS
/*
** Update a row in the FunctionProdJargon table using the primary key
*/
UPDATE [FunctionProdJargon] SET [KeyFlag] = @KeyFlag, [RepeatDataCode] = @RepeatDataCode, [CorpFuncName] = @CorpFuncName, [JargonCode] = @JargonCode, [CorpName] = @CorpName WHERE [CorpFuncName] = @CorpFuncNameOriginal AND [JargonCode] = @JargonCodeOriginal AND [CorpName] = @CorpNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon
WHERE
	[CorpFuncName] = @CorpFuncNameOriginal
	AND [JargonCode] = @JargonCodeOriginal
	AND [CorpName] = @CorpNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_Insert]
(
	@KeyFlag binary(50),
	@RepeatDataCode nvarchar(50),
	@CorpFuncName nvarchar(80),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Add a row to the FunctionProdJargon table
*/

INSERT INTO [FunctionProdJargon]
( [KeyFlag], [RepeatDataCode], [CorpFuncName], [JargonCode], [CorpName]
)
VALUES
( @KeyFlag, @RepeatDataCode, @CorpFuncName, @JargonCode, @CorpName
)

/*
** Select the new row
*/
SELECT
	gv_FunctionProdJargon.*
FROM
	gv_FunctionProdJargon
WHERE
	[CorpFuncName] = @CorpFuncName
	AND [JargonCode] = @JargonCode
	AND [CorpName] = @CorpName
GO
/****** Object:  StoredProcedure [dbo].[gp_FunctionProdJargon_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FunctionProdJargon_Delete]
(
	@CorpFuncName nvarchar(80),
	@JargonCode nvarchar(50),
	@CorpName nvarchar(50)
)
AS
/*
** Delete a row from the FunctionProdJargon table
*/
DELETE FROM [FunctionProdJargon] WHERE [CorpFuncName] = @CorpFuncName AND [JargonCode] = @JargonCode AND [CorpName] = @CorpName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the FunctionProdJargon table', 16, 1)
END
GO
/****** Object:  Trigger [FunctionProdJargonUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: FunctionProdJargonUpdTrig 
 */

CREATE TRIGGER [dbo].[FunctionProdJargonUpdTrig] ON [dbo].[FunctionProdJargon]
FOR UPDATE AS
BEGIN
    DECLARE
        @CorpFuncName nvarchar(80),
        @JargonCode nvarchar(50),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(RepeatDataCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM RepeatData pr, inserted
          WHERE pr.RepeatDataCode = inserted.RepeatDataCode) != @Rows)
        BEGIN
            RAISERROR 30001 'FunctionProdJargonUpdTrigCannot update because primary key value not found in RepeatData'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpFunction pr, inserted
          WHERE pr.CorpFuncName = inserted.CorpFuncName AND
             pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'FunctionProdJargonUpdTrigCannot update because primary key value not found in CorpFunction'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(JargonCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM BusinessJargonCode pr, inserted
          WHERE pr.JargonCode = inserted.JargonCode) != @Rows)
        BEGIN
            RAISERROR 30001 'FunctionProdJargonUpdTrigCannot update because primary key value not found in BusinessJargonCode'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[FunctionProdJargonUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FunctionProdJargonUpdProc 
 */

CREATE PROCEDURE [dbo].[FunctionProdJargonUpdProc]
(
    @KeyFlag            binary(50)              = NULL,
    @RepeatDataCode     nvarchar(50),
    @CorpFuncName       nvarchar(80),
    @JargonCode         nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE FunctionProdJargon
       SET KeyFlag             = @KeyFlag,
           RepeatDataCode      = @RepeatDataCode
     WHERE CorpFuncName = @CorpFuncName
       AND JargonCode   = @JargonCode
       AND CorpName     = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'FunctionProdJargonUpdProc: Cannot update  in FunctionProdJargon '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[FunctionProdJargonSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FunctionProdJargonSelProc 
 */

CREATE PROCEDURE [dbo].[FunctionProdJargonSelProc]
(
    @CorpFuncName       nvarchar(80),
    @JargonCode         nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    SELECT KeyFlag,
           RepeatDataCode,
           CorpFuncName,
           JargonCode,
           CorpName
      FROM FunctionProdJargon
     WHERE CorpFuncName = @CorpFuncName
       AND JargonCode   = @JargonCode
       AND CorpName     = @CorpName

    RETURN(0)
END
GO
/****** Object:  Trigger [FunctionProdJargonInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: FunctionProdJargonInsTrig 
 */

CREATE TRIGGER [dbo].[FunctionProdJargonInsTrig] ON [dbo].[FunctionProdJargon]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM RepeatData pr, inserted
         WHERE pr.RepeatDataCode = inserted.RepeatDataCode) != @Rows)
    BEGIN
        RAISERROR 30000 'FunctionProdJargonInsTrigCannot insert because primary key value not found in RepeatData'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpFunction pr, inserted
         WHERE pr.CorpFuncName = inserted.CorpFuncName AND
           pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'FunctionProdJargonInsTrigCannot insert because primary key value not found in CorpFunction'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM BusinessJargonCode pr, inserted
         WHERE pr.JargonCode = inserted.JargonCode) != @Rows)
    BEGIN
        RAISERROR 30000 'FunctionProdJargonInsTrigCannot insert because primary key value not found in BusinessJargonCode'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[FunctionProdJargonInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FunctionProdJargonInsProc 
 */

CREATE PROCEDURE [dbo].[FunctionProdJargonInsProc]
(
    @KeyFlag            binary(50)              = NULL,
    @RepeatDataCode     nvarchar(50),
    @CorpFuncName       nvarchar(80),
    @JargonCode         nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO FunctionProdJargon(KeyFlag,
                                   RepeatDataCode,
                                   CorpFuncName,
                                   JargonCode,
                                   CorpName)
    VALUES(@KeyFlag,
           @RepeatDataCode,
           @CorpFuncName,
           @JargonCode,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'FunctionProdJargonInsProc: Cannot insert because primary key value not found in FunctionProdJargon '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[FunctionProdJargonDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FunctionProdJargonDelProc 
 */

CREATE PROCEDURE [dbo].[FunctionProdJargonDelProc]
(
    @CorpFuncName       nvarchar(80),
    @JargonCode         nvarchar(50),
    @CorpName           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM FunctionProdJargon
     WHERE CorpFuncName = @CorpFuncName
       AND JargonCode   = @JargonCode
       AND CorpName     = @CorpName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'FunctionProdJargonDelProc: Cannot delete because foreign keys still exist in FunctionProdJargon '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [FunctionProdJargon_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[FunctionProdJargon_INS]
   ON [dbo].[FunctionProdJargon]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE FunctionProdJargon
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM FunctionProdJargon t
   JOIN inserted i
   ON 
     t.CorpFuncName = i.CorpFuncName
     and t.JargonCode = i.JargonCode
     and t.CorpName = i.CorpName
GO
/****** Object:  Trigger [CorpFunctionUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpFunctionUpdTrig 
 */

CREATE TRIGGER [dbo].[CorpFunctionUpdTrig] ON [dbo].[CorpFunction]
FOR UPDATE AS
BEGIN
    DECLARE
        @CorpFuncName nvarchar(80),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpContainer ch, deleted
          WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorpFunctionUpdTrigCannot update because foreign keys still exist in CorpContainer'
            ROLLBACK TRAN
        END
    END
-- Parent Update: CASCADE

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        SELECT @CorpFuncName = CorpFuncName, @CorpName = CorpName
        FROM inserted

        UPDATE FunctionProdJargon
          SET CorpFuncName = @CorpFuncName, CorpName = @CorpName
        FROM FunctionProdJargon ch, deleted
        WHERE
            ch.CorpFuncName = deleted.CorpFuncName AND
            ch.CorpName = deleted.CorpName
    END
-- Parent Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM BusinessFunctionJargon ch, deleted
          WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorpFunctionUpdTrigCannot update because foreign keys still exist in BusinessFunctionJargon'
            ROLLBACK TRAN
        END
    END
-- Parent Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM FUncSkipWords ch, deleted
          WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
        BEGIN
            RAISERROR 30001 'CorpFunctionUpdTrigCannot update because foreign keys still exist in FUncSkipWords'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM Corporation pr, inserted
          WHERE pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'CorpFunctionUpdTrigCannot update because primary key value not found in Corporation'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [CorpFunctionDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: CorpFunctionDelTrig 
 */

CREATE TRIGGER [dbo].[CorpFunctionDelTrig] ON [dbo].[CorpFunction]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpContainer ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorpFunctionDelTrigCannot delete because foreign keys still exist in CorpContainer'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM FunctionProdJargon ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorpFunctionDelTrigCannot delete because foreign keys still exist in FunctionProdJargon'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM BusinessFunctionJargon ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorpFunctionDelTrigCannot delete because foreign keys still exist in BusinessFunctionJargon'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM FUncSkipWords ch, deleted
         WHERE ch.CorpFuncName = deleted.CorpFuncName AND
           ch.CorpName = deleted.CorpName) != 0)
    BEGIN
        RAISERROR 30002 'CorpFunctionDelTrigCannot delete because foreign keys still exist in FUncSkipWords'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [BusinessJargonCodeUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: BusinessJargonCodeUpdTrig 
 */

CREATE TRIGGER [dbo].[BusinessJargonCodeUpdTrig] ON [dbo].[BusinessJargonCode]
FOR UPDATE AS
BEGIN
    DECLARE
        @JargonCode nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(JargonCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM JargonWords ch, deleted
          WHERE ch.JargonCode = deleted.JargonCode) != 0)
        BEGIN
            RAISERROR 30001 'BusinessJargonCodeUpdTrigCannot update because foreign keys still exist in JargonWords'
            ROLLBACK TRAN
        END
    END
-- Parent Update: CASCADE

    IF (UPDATE(JargonCode))
    BEGIN
        SELECT @JargonCode = JargonCode
        FROM inserted

        UPDATE FunctionProdJargon
          SET JargonCode = @JargonCode
        FROM FunctionProdJargon ch, deleted
        WHERE
            ch.JargonCode = deleted.JargonCode
    END

END
GO
/****** Object:  Trigger [BusinessJargonCodeDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: BusinessJargonCodeDelTrig 
 */

CREATE TRIGGER [dbo].[BusinessJargonCodeDelTrig] ON [dbo].[BusinessJargonCode]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM JargonWords ch, deleted
         WHERE ch.JargonCode = deleted.JargonCode) != 0)
    BEGIN
        RAISERROR 30002 'BusinessJargonCodeDelTrigCannot delete because foreign keys still exist in JargonWords'
        ROLLBACK TRAN
    END
-- Parent Delete: RESTRICT

    IF ((SELECT COUNT(*)
         FROM FunctionProdJargon ch, deleted
         WHERE ch.JargonCode = deleted.JargonCode) != 0)
    BEGIN
        RAISERROR 30002 'BusinessJargonCodeDelTrigCannot delete because foreign keys still exist in FunctionProdJargon'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  Trigger [FUncSkipWordsUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: FUncSkipWordsUpdTrig 
 */

CREATE TRIGGER [dbo].[FUncSkipWordsUpdTrig] ON [dbo].[FUncSkipWords]
FOR UPDATE AS
BEGIN
    DECLARE
        @CorpFuncName nvarchar(80),
        @tgtWord nvarchar(18),
        @CorpName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Update: RESTRICT

    IF (UPDATE(CorpFuncName) OR
        UPDATE(CorpName))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM CorpFunction pr, inserted
          WHERE pr.CorpFuncName = inserted.CorpFuncName AND
             pr.CorpName = inserted.CorpName) != @Rows)
        BEGIN
            RAISERROR 30001 'FUncSkipWordsUpdTrigCannot update because primary key value not found in CorpFunction'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(tgtWord))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM SkipWords pr, inserted
          WHERE pr.tgtWord = inserted.tgtWord) != @Rows)
        BEGIN
            RAISERROR 30001 'FUncSkipWordsUpdTrigCannot update because primary key value not found in SkipWords'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[FUncSkipWordsSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FUncSkipWordsSelProc 
 */

CREATE PROCEDURE [dbo].[FUncSkipWordsSelProc]
(
    @CorpFuncName     nvarchar(80),
    @tgtWord          nvarchar(18),
    @CorpName         nvarchar(50))
AS
BEGIN
    SELECT CorpFuncName,
           tgtWord,
           CorpName
      FROM FUncSkipWords
     WHERE CorpFuncName = @CorpFuncName
       AND tgtWord      = @tgtWord
       AND CorpName     = @CorpName

    RETURN(0)
END
GO
/****** Object:  Trigger [FUncSkipWordsInsTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: FUncSkipWordsInsTrig 
 */

CREATE TRIGGER [dbo].[FUncSkipWordsInsTrig] ON [dbo].[FUncSkipWords]
FOR INSERT AS
BEGIN
    DECLARE
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM CorpFunction pr, inserted
         WHERE pr.CorpFuncName = inserted.CorpFuncName AND
           pr.CorpName = inserted.CorpName) != @Rows)
    BEGIN
        RAISERROR 30000 'FUncSkipWordsInsTrigCannot insert because primary key value not found in CorpFunction'
        ROLLBACK TRAN
    END
-- Child Insert: RESTRICT

    IF ((SELECT COUNT(*)
         FROM SkipWords pr, inserted
         WHERE pr.tgtWord = inserted.tgtWord) != @Rows)
    BEGIN
        RAISERROR 30000 'FUncSkipWordsInsTrigCannot insert because primary key value not found in SkipWords'
        ROLLBACK TRAN
    END

END
GO
/****** Object:  StoredProcedure [dbo].[FUncSkipWordsInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: FUncSkipWordsInsProc 
 */

CREATE PROCEDURE [dbo].[FUncSkipWordsInsProc]
(
    @CorpFuncName     nvarchar(80),
    @tgtWord          nvarchar(18),
    @CorpName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO FUncSkipWords(CorpFuncName,
                              tgtWord,
                              CorpName)
    VALUES(@CorpFuncName,
           @tgtWord,
           @CorpName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'FUncSkipWordsInsProc: Cannot insert because primary key value not found in FUncSkipWords '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [trigQuickRefItems_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigQuickRefItems_Update]
   ON [dbo].[QuickRefItems]
         AFTER Update 
   AS
         BEGIN 
         UPDATE QuickRefItems 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      QuickRefItems.QuickRefItemGuid = inserted.QuickRefItemGuid
 End
GO
/****** Object:  StoredProcedure [dbo].[QuickRefItemsUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefItemsUpdProc]
(
    @QuickRefIdNbr             int                       = NULL,
    @FQN                       nvarchar(300)             = NULL,
    @QuickRefItemGuid          nvarchar(50),
    @SourceGuid                nvarchar(50)              = NULL,
    @DataSourceOwnerUserID     nvarchar(50)              = NULL,
    @Author                    nvarchar(300)             = NULL,
    @Description               nvarchar(max)             = NULL,
    @Keywords                  nvarchar(2000)            = NULL,
    @FileName                  nvarchar(80)              = NULL,
    @DirName                   nvarchar(254)             = NULL,
    @MarkedForDeletion         bit                       = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE QuickRefItems
       SET QuickRefIdNbr              = @QuickRefIdNbr,
           FQN                        = @FQN,
           SourceGuid                 = @SourceGuid,
           DataSourceOwnerUserID      = @DataSourceOwnerUserID,
           Author                     = @Author,
           Description                = @Description,
           Keywords                   = @Keywords,
           FileName                   = @FileName,
           DirName                    = @DirName,
           MarkedForDeletion          = @MarkedForDeletion
     WHERE QuickRefItemGuid = @QuickRefItemGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'QuickRefItemsUpdProc: Cannot update  in QuickRefItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefItemsSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefItemsSelProc]
(
    @QuickRefItemGuid          nvarchar(50))
AS
BEGIN
    SELECT QuickRefIdNbr,
           FQN,
           QuickRefItemGuid,
           SourceGuid,
           DataSourceOwnerUserID,
           Author,
           Description,
           Keywords,
           FileName,
           DirName,
           MarkedForDeletion
      FROM QuickRefItems
     WHERE QuickRefItemGuid = @QuickRefItemGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefItemsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefItemsInsProc]
(
    @QuickRefIdNbr             int                       = NULL,
    @FQN                       nvarchar(300)             = NULL,
    @QuickRefItemGuid          nvarchar(50),
    @SourceGuid                nvarchar(50)              = NULL,
    @DataSourceOwnerUserID     nvarchar(50)              = NULL,
    @Author                    nvarchar(300)             = NULL,
    @Description               nvarchar(max)             = NULL,
    @Keywords                  nvarchar(2000)            = NULL,
    @FileName                  nvarchar(80)              = NULL,
    @DirName                   nvarchar(254)             = NULL,
    @MarkedForDeletion         bit                       = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO QuickRefItems(QuickRefIdNbr,
                              FQN,
                              QuickRefItemGuid,
                              SourceGuid,
                              DataSourceOwnerUserID,
                              Author,
                              Description,
                              Keywords,
                              FileName,
                              DirName,
                              MarkedForDeletion)
    VALUES(@QuickRefIdNbr,
           @FQN,
           @QuickRefItemGuid,
           @SourceGuid,
           @DataSourceOwnerUserID,
           @Author,
           @Description,
           @Keywords,
           @FileName,
           @DirName,
           @MarkedForDeletion)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'QuickRefItemsInsProc: Cannot insert because primary key value not found in QuickRefItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefItemsDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefItemsDelProc]
(
    @QuickRefItemGuid          nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM QuickRefItems
     WHERE QuickRefItemGuid = @QuickRefItemGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'QuickRefItemsDelProc: Cannot delete because foreign keys still exist in QuickRefItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [QuickRefItems_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[QuickRefItems_INS]
   ON [dbo].[QuickRefItems]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE QuickRefItems
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM QuickRefItems t
   JOIN inserted i
   ON 
     t.QuickRefItemGuid = i.QuickRefItemGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_Update]
(
	@QuickRefItemGuidOriginal nvarchar(50), 
	@QuickRefItemGuid nvarchar(50),
	@QuickRefIdNbr int,
	@FQN nvarchar(300),
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@Author nvarchar(300),
	@Description nvarchar(max),
	@Keywords nvarchar(2000),
	@FileName nvarchar(80),
	@DirName nvarchar(254),
	@MarkedForDeletion bit
)
AS
/*
** Update a row in the QuickRefItems table using the primary key
*/
UPDATE [QuickRefItems] SET [QuickRefIdNbr] = @QuickRefIdNbr, [FQN] = @FQN, [QuickRefItemGuid] = @QuickRefItemGuid, [SourceGuid] = @SourceGuid, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [Author] = @Author, [Description] = @Description, [Keywords] = @Keywords, [FileName] = @FileName, [DirName] = @DirName, [MarkedForDeletion] = @MarkedForDeletion WHERE [QuickRefItemGuid] = @QuickRefItemGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_QuickRefItems.*
FROM
	gv_QuickRefItems
WHERE
	[QuickRefItemGuid] = @QuickRefItemGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_Insert]
(
	@QuickRefIdNbr int,
	@FQN nvarchar(300),
	@QuickRefItemGuid nvarchar(50),
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@Author nvarchar(300),
	@Description nvarchar(max),
	@Keywords nvarchar(2000),
	@FileName nvarchar(80),
	@DirName nvarchar(254),
	@MarkedForDeletion bit
)
AS
/*
** Add a row to the QuickRefItems table
*/

INSERT INTO [QuickRefItems]
( [QuickRefIdNbr], [FQN], [QuickRefItemGuid], [SourceGuid], [DataSourceOwnerUserID], [Author], [Description], [Keywords], [FileName], [DirName], [MarkedForDeletion]
)
VALUES
( @QuickRefIdNbr, @FQN, @QuickRefItemGuid, @SourceGuid, @DataSourceOwnerUserID, @Author, @Description, @Keywords, @FileName, @DirName, @MarkedForDeletion
)

/*
** Select the new row
*/
SELECT
	gv_QuickRefItems.*
FROM
	gv_QuickRefItems
WHERE
	[QuickRefItemGuid] = @QuickRefItemGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRefItems_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRefItems_Delete]
(
	@QuickRefItemGuid nvarchar(50)
)
AS
/*
** Delete a row from the QuickRefItems table
*/
DELETE FROM [QuickRefItems] WHERE [QuickRefItemGuid] = @QuickRefItemGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the QuickRefItems table', 16, 1)
END
GO
/****** Object:  Trigger [trigQuickRef_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigQuickRef_Update]
   ON [dbo].[QuickRef]
         AFTER Update 
   AS
         BEGIN 
         UPDATE QuickRef 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      QuickRef.QuickRefIdNbr = inserted.QuickRefIdNbr
 End
GO
/****** Object:  StoredProcedure [dbo].[QuickRefUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefUpdProc]
(
    @UserID            nvarchar(50),
    @QuickRefName      nvarchar(50)            = NULL,
    @QuickRefIdNbr     int)
AS
BEGIN
    BEGIN TRAN

    UPDATE QuickRef
       SET UserID             = @UserID,
           QuickRefName       = @QuickRefName
     WHERE QuickRefIdNbr = @QuickRefIdNbr

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'QuickRefUpdProc: Cannot update  in QuickRef '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefSelProc]
(
    @QuickRefIdNbr     int)
AS
BEGIN
    SELECT UserID,
           QuickRefName,
           QuickRefIdNbr
      FROM QuickRef
     WHERE QuickRefIdNbr = @QuickRefIdNbr

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefInsProc]
(
    @UserID            nvarchar(50),
    @QuickRefName      nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO QuickRef(UserID,
                         QuickRefName 
                         )
    VALUES(@UserID,
           @QuickRefName 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'QuickRefInsProc: Cannot insert because primary key value not found in QuickRef '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[QuickRefDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickRefDelProc]
(
    @QuickRefIdNbr     int)
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM QuickRef
     WHERE QuickRefIdNbr = @QuickRefIdNbr

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'QuickRefDelProc: Cannot delete because foreign keys still exist in QuickRef '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [QuickRef_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[QuickRef_INS]
   ON [dbo].[QuickRef]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE QuickRef
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM QuickRef t
   JOIN inserted i
   ON 
     t.QuickRefIdNbr = i.QuickRefIdNbr
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickRef_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickRef_Update]
(
	@QuickRefIdNbrOriginal int,
	@UserID nvarchar(50),
	@QuickRefName nvarchar(50)
)
AS
/*
** Update a row in the QuickRef table using the primary key
*/
UPDATE [QuickRef] SET [UserID] = @UserID, [QuickRefName] = @QuickRefName WHERE [QuickRefIdNbr] = @QuickRefIdNbrOriginal


/*
** Select the updated row
*/
SELECT
	gv_QuickRef.*
FROM
	gv_QuickRef
WHERE
	[QuickRefIdNbr] = @QuickRefIdNbrOriginal
GO
/****** Object:  Table [dbo].[OutlookFrom]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[OutlookFrom](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](25) NOT NULL,
	[Verified] [int] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [OutlookFrom_PK] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SourceInjector]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SourceInjector](
	[ClassName] [varchar](80) NOT NULL,
	[FuncName] [varchar](80) NULL,
	[LineID] [int] NOT NULL,
	[LastExecDate] [datetime] NULL,
	[Executed] [bit] NULL,
	[NbrExecutions] [int] NULL,
 CONSTRAINT [PK192] PRIMARY KEY CLUSTERED 
(
	[LineID] ASC,
	[ClassName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserGridState]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserGridState](
	[UserID] [nvarchar](50) NOT NULL,
	[ScreenName] [nvarchar](50) NOT NULL,
	[GridName] [nvarchar](50) NOT NULL,
	[ColName] [nvarchar](50) NULL,
	[ColOrder] [int] NULL,
	[ColWidth] [int] NULL,
	[ColVisible] [bit] NULL,
	[ColReadOnly] [bit] NULL,
	[ColSortOrder] [int] NULL,
	[ColSortAsc] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[RowNbr] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PI_UserGridState] ON [dbo].[UserGridState] 
(
	[ScreenName] ASC,
	[GridName] ASC,
	[ColName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserCurrParm]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserCurrParm](
	[UserID] [nvarchar](50) NOT NULL,
	[ParmName] [nvarchar](50) NOT NULL,
	[ParmVal] [nvarchar](2000) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_UserCurrParm] ON [dbo].[UserCurrParm] 
(
	[UserID] ASC,
	[ParmName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UrlRejection]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UrlRejection](
	[RejectionPattern] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_UrlRejection] ON [dbo].[UrlRejection] 
(
	[RejectionPattern] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UrlList]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UrlList](
	[URL] [nvarchar](425) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_UrlList] ON [dbo].[UrlList] 
(
	[URL] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[upgrade_status]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[upgrade_status](
	[name] [varchar](30) NOT NULL,
	[status] [varchar](10) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[HelpText]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HelpText](
	[ScreenName] [nvarchar](100) NOT NULL,
	[HelpText] [nvarchar](max) NULL,
	[WidgetName] [nvarchar](100) NOT NULL,
	[WidgetText] [nvarchar](254) NULL,
	[DisplayHelpText] [bit] NULL,
	[LastUpdate] [datetime] NULL,
	[CreateDate] [datetime] NULL,
	[UpdatedBy] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_HelpText] ON [dbo].[HelpText] 
(
	[ScreenName] ASC,
	[WidgetName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HelpInfo]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HelpInfo](
	[HelpName] [nvarchar](50) NOT NULL,
	[HelpEmailAddr] [nvarchar](50) NOT NULL,
	[HelpPhone] [nvarchar](50) NOT NULL,
	[AreaOfFocus] [nvarchar](50) NULL,
	[HoursAvail] [nvarchar](50) NULL,
	[EmailNotification] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_Helpinfo] ON [dbo].[HelpInfo] 
(
	[HelpName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HashFile]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[HashFile](
	[Hash] [decimal](18, 0) NULL,
	[HashedString] [varchar](max) NULL,
	[HashID] [varchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UK_HashFile] ON [dbo].[HashFile] 
(
	[HashID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_HashFile] ON [dbo].[HashFile] 
(
	[Hash] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[WebSource]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[WebSource](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[CreateDate] [datetime] NULL,
	[SourceName] [nvarchar](254) NULL,
	[SourceImage] [image] NULL,
	[SourceTypeCode] [nvarchar](50) NOT NULL,
	[FileLength] [int] NULL,
	[LastWriteTime] [datetime] NULL,
	[RetentionExpirationDate] [datetime] NULL,
	[Description] [nvarchar](max) NULL,
	[KeyWords] [nvarchar](2000) NULL,
	[Notes] [nvarchar](2000) NULL,
	[CreationDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK_WebSource] PRIMARY KEY NONCLUSTERED 
(
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IncludedFiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IncludedFiles](
	[UserID] [nvarchar](50) NOT NULL,
	[ExtCode] [nvarchar](50) NOT NULL,
	[FQN] [nvarchar](254) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKI3] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[ExtCode] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ImageTypeCodes]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ImageTypeCodes](
	[ImageTypeCode] [nvarchar](50) NULL,
	[ImageTypeCodeDesc] [nvarchar](250) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_ImageTypeCode] ON [dbo].[ImageTypeCodes] 
(
	[ImageTypeCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HiveServers]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HiveServers](
	[SeverAlias] [nvarchar](100) NOT NULL,
	[ServerInstance] [nvarchar](100) NULL,
	[isHiveserver] [bit] NULL,
	[isLInked] [bit] NULL,
	[LinkedDate] [datetime] NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [UK_HiveServers] ON [dbo].[HiveServers] 
(
	[SeverAlias] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[HelpTextUser]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[HelpTextUser](
	[UserID] [nvarchar](50) NOT NULL,
	[ScreenName] [nvarchar](100) NOT NULL,
	[HelpText] [nvarchar](max) NULL,
	[WidgetName] [nvarchar](100) NOT NULL,
	[WidgetText] [nvarchar](254) NULL,
	[DisplayHelpText] [bit] NULL,
	[CompanyID] [nvarchar](50) NULL,
	[LastUpdate] [datetime] NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RuntimeErrors]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RuntimeErrors](
	[ErrorMsg] [nvarchar](max) NULL,
	[StackTrace] [nvarchar](max) NULL,
	[EntryDate] [datetime] NULL,
	[IdNbr] [nvarchar](50) NULL,
	[EntrySeq] [int] IDENTITY(1,1) NOT NULL,
	[ConnectiveGuid] [nvarchar](50) NULL,
	[UserID] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_RuntimeErrrors] ON [dbo].[RuntimeErrors] 
(
	[ConnectiveGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SavedItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SavedItems](
	[Userid] [nvarchar](50) NOT NULL,
	[SaveName] [nvarchar](50) NOT NULL,
	[SaveTypeCode] [nvarchar](50) NOT NULL,
	[ValName] [nvarchar](50) NOT NULL,
	[ValValue] [nvarchar](254) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_SavedItems] ON [dbo].[SavedItems] 
(
	[Userid] ASC,
	[SaveName] ASC,
	[SaveTypeCode] ASC,
	[ValName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SearchHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SearchHistory](
	[SearchSql] [nvarchar](max) NULL,
	[SearchDate] [datetime] NULL,
	[UserID] [nvarchar](50) NULL,
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[ReturnedRows] [int] NULL,
	[StartTime] [datetime] NULL,
	[EndTime] [datetime] NULL,
	[CalledFrom] [nvarchar](50) NULL,
	[TypeSearch] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_SearchHist] ON [dbo].[SearchHistory] 
(
	[RowID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DB_Updates]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DB_Updates](
	[SqlStmt] [nvarchar](max) NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[FixID] [int] NOT NULL,
	[FixDescription] [nvarchar](4000) NULL,
	[DBName] [nvarchar](50) NULL,
	[CompanyID] [nvarchar](50) NULL,
	[MachineName] [nvarchar](50) NULL,
	[AppliedDate] [datetime] NULL,
	[Applied] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DB_UpdateHist]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DB_UpdateHist](
	[CreateDate] [datetime] NOT NULL,
	[FixID] [int] NOT NULL,
	[DBName] [nvarchar](50) NULL,
	[CompanyID] [nvarchar](50) NULL,
	[MachineName] [nvarchar](50) NULL,
	[Status] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UI_UpdateHistory] ON [dbo].[DB_UpdateHist] 
(
	[FixID] ASC,
	[CompanyID] ASC,
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_UpdateHist] ON [dbo].[DB_UpdateHist] 
(
	[FixID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserSearchState]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserSearchState](
	[SearchID] [int] NOT NULL,
	[ScreenName] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[ParmName] [nvarchar](50) NOT NULL,
	[ParmVal] [nvarchar](2000) NULL,
	[ParmDataType] [nvarchar](2000) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[RowNbr] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PI_UserSearchState] ON [dbo].[UserSearchState] 
(
	[SearchID] ASC,
	[ScreenName] ASC,
	[UserID] ASC,
	[ParmName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataTypeCodes]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataTypeCodes](
	[FileType] [nvarchar](255) NULL,
	[VerNbr] [nvarchar](255) NULL,
	[Publisher] [nvarchar](255) NULL,
	[Definition] [nvarchar](255) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_DataTypeCodes] ON [dbo].[DataTypeCodes] 
(
	[FileType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Machine]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Machine](
	[MachineName] [nvarchar](80) NOT NULL,
	[FQN] [nvarchar](254) NULL,
	[ContentType] [nvarchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
	[SourceGuid] [nvarchar](50) NULL,
	[UserID] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK01_Machine] ON [dbo].[Machine] 
(
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_Machine] ON [dbo].[Machine] 
(
	[MachineName] ASC,
	[FQN] ASC,
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[UserScreenState]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserScreenState](
	[ScreenName] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[ParmName] [nvarchar](50) NOT NULL,
	[ParmVal] [nvarchar](2000) NULL,
	[ParmDataType] [nvarchar](15) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[RowNbr] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PI_UserScreenState] ON [dbo].[UserScreenState] 
(
	[ScreenName] ASC,
	[UserID] ASC,
	[ParmName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MyTempTable]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MyTempTable](
	[docid] [int] NOT NULL,
	[key] [nvarchar](100) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
PRIMARY KEY CLUSTERED 
(
	[docid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[MachineRegistered]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[MachineRegistered](
	[MachineName] [nvarchar](80) NOT NULL,
	[CreateDate] [datetime] NULL,
	[LastUpdate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_MR01] ON [dbo].[MachineRegistered] 
(
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExchangeHostSmtp]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExchangeHostSmtp](
	[HostNameIp] [nvarchar](100) NOT NULL,
	[UserLoginID] [nvarchar](80) NOT NULL,
	[LoginPw] [nvarchar](50) NOT NULL,
	[DisplayName] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_ExchangeHostSmtp] ON [dbo].[ExchangeHostSmtp] 
(
	[HostNameIp] ASC,
	[UserLoginID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExchangeHostPop]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ExchangeHostPop](
	[HostNameIp] [nvarchar](100) NOT NULL,
	[UserLoginID] [nvarchar](80) NOT NULL,
	[LoginPw] [nvarchar](50) NOT NULL,
	[SSL] [bit] NULL,
	[PortNbr] [int] NULL,
	[DeleteAfterDownload] [bit] NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[IMap] [bit] NULL,
	[Userid] [nvarchar](50) NULL,
	[FolderName] [nvarchar](80) NULL,
	[isPublic] [bit] NULL,
	[LibraryName] [nvarchar](80) NULL,
	[DaysToHold] [int] NULL,
	[strReject] [nvarchar](250) NULL,
	[ConvertEmlToMSG] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_ExchangeHostPop] ON [dbo].[ExchangeHostPop] 
(
	[HostNameIp] ASC,
	[UserLoginID] ASC,
	[Userid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'If set to "Y", then all emails after download will be deleted from the exchange server.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'ExchangeHostPop', @level2type=N'COLUMN',@level2name=N'DeleteAfterDownload'
GO
/****** Object:  Table [dbo].[ExcgKey]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ExcgKey](
	[MailKey] [varchar](500) NOT NULL,
	[InsertDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [PI_ExcgKey] ON [dbo].[ExcgKey] 
(
	[MailKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ErrorLogs]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ErrorLogs](
	[RowNbr] [int] IDENTITY(1,1) NOT NULL,
	[LogName] [nvarchar](50) NOT NULL,
	[LoggedMessage] [nvarchar](4000) NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[EntryUserID] [nvarchar](50) NOT NULL,
	[Severity] [nvarchar](10) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ArchiveStats]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ArchiveStats](
	[ArchiveStartDate] [datetime] NULL,
	[Status] [nvarchar](50) NOT NULL,
	[Successful] [nchar](1) NULL,
	[ArchiveType] [nvarchar](50) NOT NULL,
	[TotalEmailsInRepository] [int] NULL,
	[TotalContentInRepository] [int] NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[ArchiveEndDate] [datetime] NULL,
	[StatGuid] [nvarchar](50) NOT NULL,
	[EntrySeq] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE CLUSTERED INDEX [PI01_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[Status] ASC,
	[ArchiveType] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[Status] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI03_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[ArchiveStartDate] ASC,
	[ArchiveType] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI04_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[ArchiveType] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PI05_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[EntrySeq] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_ArchiveStats] ON [dbo].[ArchiveStats] 
(
	[StatGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[AtributeSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AtributeSelProc 
 */

CREATE PROCEDURE [dbo].[AtributeSelProc]
(
    @AttributeName         nvarchar(50))
AS
BEGIN
    SELECT AttributeName,
           AttributeDataType,
           AttributeDesc
      FROM Atribute
     WHERE AttributeName = @AttributeName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AtributeInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AtributeInsProc 
 */

CREATE PROCEDURE [dbo].[AtributeInsProc]
(
    @AttributeName         nvarchar(50),
    @AttributeDataType     nvarchar(50)              = NULL,
    @AttributeDesc         nvarchar(2000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Atribute(AttributeName,
                         AttributeDataType,
                         AttributeDesc)
    VALUES(@AttributeName,
           @AttributeDataType,
           @AttributeDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AtributeInsProc: Cannot insert because primary key value not found in Atribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AtributeDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AtributeDelProc 
 */

CREATE PROCEDURE [dbo].[AtributeDelProc]
(
    @AttributeName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Atribute
     WHERE AttributeName = @AttributeName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AtributeDelProc: Cannot delete because foreign keys still exist in Atribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[EmailFolder]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[EmailFolder](
	[UserID] [nvarchar](50) NOT NULL,
	[FolderName] [varchar](450) NULL,
	[ParentFolderName] [varchar](200) NULL,
	[FolderID] [varchar](100) NOT NULL,
	[ParentFolderID] [varchar](100) NOT NULL,
	[SelectedForArchive] [char](1) NULL,
	[StoreID] [varchar](600) NOT NULL,
	[isSysDefault] [bit] NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[ContainerName] [varchar](80) NULL,
	[MachineName] [nvarchar](80) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[nRowID] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_EmailFolder] ON [dbo].[EmailFolder] 
(
	[UserID] ASC,
	[FolderID] ASC,
	[FolderName] ASC,
	[ContainerName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AssignableUserParameters]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AssignableUserParameters](
	[ParmName] [nchar](50) NOT NULL,
	[isPerm] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_AssignableUserParameters] ON [dbo].[AssignableUserParameters] 
(
	[ParmName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'This is a list of ASSIGNABLE user parameters - it takes admin authority to assign these.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'AssignableUserParameters', @level2type=N'COLUMN',@level2name=N'ParmName'
GO
/****** Object:  Table [dbo].[txTimes]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[txTimes](
	[StmtID] [int] NOT NULL,
	[txTime] [decimal](12, 4) NOT NULL,
	[CreateDate] [datetime] NOT NULL
) ON [PRIMARY]
GO
CREATE CLUSTERED INDEX [PI_TxTimes] ON [dbo].[txTimes] 
(
	[StmtID] ASC,
	[txTime] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[SeverityUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: SeverityUpdProc 
 */

CREATE PROCEDURE [dbo].[SeverityUpdProc]
(
    @SeverityCode     nvarchar(50),
    @CodeDesc         nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Severity
       SET CodeDesc          = @CodeDesc
     WHERE SeverityCode = @SeverityCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SeverityUpdProc: Cannot update  in Severity '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SeveritySelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: SeveritySelProc 
 */

CREATE PROCEDURE [dbo].[SeveritySelProc]
(
    @SeverityCode     nvarchar(50))
AS
BEGIN
    SELECT SeverityCode,
           CodeDesc
      FROM Severity
     WHERE SeverityCode = @SeverityCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SeverityInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: SeverityInsProc 
 */

CREATE PROCEDURE [dbo].[SeverityInsProc]
(
    @SeverityCode     nvarchar(50),
    @CodeDesc         nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Severity(SeverityCode,
                         CodeDesc)
    VALUES(@SeverityCode,
           @CodeDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SeverityInsProc: Cannot insert because primary key value not found in Severity '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SeverityDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: SeverityDelProc 
 */

CREATE PROCEDURE [dbo].[SeverityDelProc]
(
    @SeverityCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Severity
     WHERE SeverityCode = @SeverityCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SeverityDelProc: Cannot delete because foreign keys still exist in Severity '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[SessionVar]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SessionVar](
	[SessionGuid] [varchar](50) NOT NULL,
	[SessionVar] [varchar](50) NOT NULL,
	[SessionVarVal] [nvarchar](254) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_SessionVar] ON [dbo].[SessionVar] 
(
	[SessionGuid] ASC,
	[SessionVar] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ServiceActivity]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ServiceActivity](
	[StmtID] [int] NOT NULL,
	[Msg] [varchar](max) NOT NULL,
	[EntryTime] [datetime] NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE CLUSTERED INDEX [PI01_ServiceActivity] ON [dbo].[ServiceActivity] 
(
	[StmtID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SearhParmsHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SearhParmsHistory](
	[UserID] [nvarchar](50) NOT NULL,
	[SearchDate] [datetime] NOT NULL,
	[Screen] [nvarchar](50) NOT NULL,
	[QryParms] [nvarchar](max) NOT NULL,
	[EntryID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_SearhParms] ON [dbo].[SearhParmsHistory] 
(
	[UserID] ASC,
	[Screen] ASC,
	[EntryID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SearchSchedule]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SearchSchedule](
	[SearchName] [nvarchar](50) NOT NULL,
	[OwnerID] [nvarchar](50) NOT NULL,
	[SearchQuery] [nvarchar](max) NOT NULL,
	[SendToEmail] [nvarchar](2000) NULL,
	[ScheduleUnit] [nchar](10) NOT NULL,
	[ScheduleHour] [nchar](10) NULL,
	[ScheduleDaysOfWeek] [nchar](50) NULL,
	[ScheduleDaysOfMonth] [nchar](70) NULL,
	[ScheduleMonthOfQtr] [nchar](10) NULL,
	[StartToRunDate] [datetime] NULL,
	[EndRunDate] [datetime] NULL,
	[SearchParameters] [nvarchar](4000) NULL,
	[LastRunDate] [datetime] NULL,
	[NumberOfExecutions] [int] NOT NULL,
	[CreateDate] [datetime] NOT NULL,
	[LastModDate] [datetime] NOT NULL,
	[ScheduleHourInterval] [int] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_SearchSchedule] ON [dbo].[SearchSchedule] 
(
	[SearchName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DatabaseFiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DatabaseFiles](
	[file_id] [int] NOT NULL,
	[file_guid] [uniqueidentifier] NULL,
	[type] [tinyint] NOT NULL,
	[type_desc] [nvarchar](60) NULL,
	[data_space_id] [int] NOT NULL,
	[name] [sysname] NOT NULL,
	[physical_name] [nvarchar](260) NOT NULL,
	[state] [tinyint] NULL,
	[state_desc] [nvarchar](60) NULL,
	[size] [int] NOT NULL,
	[max_size] [int] NOT NULL,
	[growth] [int] NOT NULL,
	[is_media_read_only] [bit] NOT NULL,
	[is_read_only] [bit] NOT NULL,
	[is_sparse] [bit] NOT NULL,
	[is_percent_growth] [bit] NOT NULL,
	[is_name_reserved] [bit] NOT NULL,
	[create_lsn] [numeric](25, 0) NULL,
	[drop_lsn] [numeric](25, 0) NULL,
	[read_only_lsn] [numeric](25, 0) NULL,
	[read_write_lsn] [numeric](25, 0) NULL,
	[differential_base_lsn] [numeric](25, 0) NULL,
	[differential_base_guid] [uniqueidentifier] NULL,
	[differential_base_time] [datetime] NULL,
	[redo_start_lsn] [numeric](25, 0) NULL,
	[redo_start_fork_guid] [uniqueidentifier] NULL,
	[redo_target_lsn] [numeric](25, 0) NULL,
	[redo_target_fork_guid] [uniqueidentifier] NULL,
	[backup_lsn] [numeric](25, 0) NULL,
	[CreationDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[EmailImageTypeUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[EmailImageTypeUpdProc]
(
    @ImageTypeCode     nvarchar(50),
    @Description       nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE EmailImageType
       SET Description        = @Description
     WHERE ImageTypeCode = @ImageTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EmailImageTypeUpdProc: Cannot update  in EmailImageType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageTypeSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageTypeSelProc 
 */

CREATE PROCEDURE [dbo].[EmailImageTypeSelProc]
(
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    SELECT ImageTypeCode,
           Description
      FROM EmailImageType
     WHERE ImageTypeCode = @ImageTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageTypeInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageTypeInsProc 
 */

CREATE PROCEDURE [dbo].[EmailImageTypeInsProc]
(
    @ImageTypeCode     nvarchar(50),
    @Description       nvarchar(254)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailImageType(ImageTypeCode,
                               Description)
    VALUES(@ImageTypeCode,
           @Description)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailImageTypeInsProc: Cannot insert because primary key value not found in EmailImageType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageTypeDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageTypeDelProc 
 */

CREATE PROCEDURE [dbo].[EmailImageTypeDelProc]
(
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EmailImageType
     WHERE ImageTypeCode = @ImageTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EmailImageTypeDelProc: Cannot delete because foreign keys still exist in EmailImageType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [EmailUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: EmailUpdTrig 
 */

CREATE TRIGGER [dbo].[EmailUpdTrig] ON [dbo].[Email]
FOR UPDATE AS
BEGIN
    DECLARE
        @EmailGuid nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(EmailGuid))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM EmailAttachment ch, deleted
          WHERE ch.EmailGuid = deleted.EmailGuid) != 0)
        BEGIN
            RAISERROR 30001 'EmailUpdTrigCannot update because foreign keys still exist in EmailAttachment'
            ROLLBACK TRAN
        END
    END
-- Parent Update: RESTRICT

    IF (UPDATE(EmailGuid))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM EmailImage ch, deleted
          WHERE ch.EmailGuid = deleted.EmailGuid) != 0)
        BEGIN
            RAISERROR 30001 'EmailUpdTrigCannot update because foreign keys still exist in EmailImage'
            ROLLBACK TRAN
        END
    END
-- Parent Update: RESTRICT

    IF (UPDATE(EmailGuid))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM Recipients ch, deleted
          WHERE ch.EmailGuid = deleted.EmailGuid) != 0)
        BEGIN
            RAISERROR 30001 'EmailUpdTrigCannot update because foreign keys still exist in Recipients'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageUpdProc 
 */

CREATE PROCEDURE [dbo].[EmailImageUpdProc]
(
    @emailImage        image                   = NULL,
    @EmailGuid         nvarchar(50),
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE EmailImage
       SET emailImage         = @emailImage
     WHERE EmailGuid     = @EmailGuid
       AND ImageTypeCode = @ImageTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EmailImageUpdProc: Cannot update  in EmailImage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageSelProc 
 */

CREATE PROCEDURE [dbo].[EmailImageSelProc]
(
    @EmailGuid         nvarchar(50),
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    SELECT emailImage,
           EmailGuid,
           ImageTypeCode
      FROM EmailImage
     WHERE EmailGuid     = @EmailGuid
       AND ImageTypeCode = @ImageTypeCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageInsProc 
 */

CREATE PROCEDURE [dbo].[EmailImageInsProc]
(
    @emailImage        image                   = NULL,
    @EmailGuid         nvarchar(50),
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailImage(emailImage,
                           EmailGuid,
                           ImageTypeCode)
    VALUES(@emailImage,
           @EmailGuid,
           @ImageTypeCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailImageInsProc: Cannot insert because primary key value not found in EmailImage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EmailImageDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: EmailImageDelProc 
 */

CREATE PROCEDURE [dbo].[EmailImageDelProc]
(
    @EmailGuid         nvarchar(50),
    @ImageTypeCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EmailImage
     WHERE EmailGuid     = @EmailGuid
       AND ImageTypeCode = @ImageTypeCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EmailImageDelProc: Cannot delete because foreign keys still exist in EmailImage '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[DataOwners]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataOwners](
	[PrimaryOwner] [bit] NULL,
	[OwnerTypeCode] [nvarchar](50) NULL,
	[FullAccess] [bit] NULL,
	[ReadOnly] [bit] NULL,
	[DeleteAccess] [bit] NULL,
	[Searchable] [bit] NULL,
	[SourceGuid] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[GroupOwnerUserID] [nvarchar](50) NOT NULL,
	[GroupName] [nvarchar](80) NOT NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK42] PRIMARY KEY NONCLUSTERED 
(
	[SourceGuid] ASC,
	[UserID] ASC,
	[GroupOwnerUserID] ASC,
	[GroupName] ASC,
	[DataSourceOwnerUserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LibraryItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LibraryItems](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[ItemTitle] [nvarchar](254) NULL,
	[ItemType] [nvarchar](50) NULL,
	[LibraryItemGuid] [nvarchar](50) NOT NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NULL,
	[LibraryOwnerUserID] [nvarchar](50) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL,
	[AddedByUserGuidId] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK89] PRIMARY KEY NONCLUSTERED 
(
	[LibraryOwnerUserID] ASC,
	[LibraryName] ASC,
	[LibraryItemGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_LibItems] ON [dbo].[LibraryItems] 
(
	[ItemTitle] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_LibraryItems] ON [dbo].[LibraryItems] 
(
	[LibraryName] ASC,
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UI02_LibraryItems] ON [dbo].[LibraryItems] 
(
	[LibraryName] ASC,
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_LibItems] ON [dbo].[LibraryItems] 
(
	[LibraryItemGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
EXEC sys.sp_addextendedproperty @name=N'MS_Description', @value=N'LibraryItems is intentionally NOT linked to an owner through the user guid so that others can place content and emails into the library. The owner is determined by a lookup on the unique library name.

SourceGuid, in this case, can be either a content or email giud as both can live within a library.' , @level0type=N'SCHEMA',@level0name=N'dbo', @level1type=N'TABLE',@level1name=N'LibraryItems'
GO
/****** Object:  Table [dbo].[EmailToDelete]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EmailToDelete](
	[EmailGuid] [nvarchar](50) NOT NULL,
	[StoreID] [nvarchar](500) NOT NULL,
	[UserID] [nvarchar](100) NOT NULL,
	[MessageID] [nchar](100) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EmailRunningTotal]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[EmailRunningTotal](
	[Ord] [int] IDENTITY(1,1) NOT NULL,
	[YR] [int] NULL,
	[Period] [varchar](50) NULL,
	[PeriodVal] [float] NULL,
	[Total] [float] NULL,
	[RunningTotal] [float] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_RunningTotal] ON [dbo].[EmailRunningTotal] 
(
	[Ord] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_RunningTotal] ON [dbo].[EmailRunningTotal] 
(
	[YR] ASC,
	[PeriodVal] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[VersionInfo]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[VersionInfo](
	[Product] [nvarchar](50) NOT NULL,
	[ProductVersion] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_versionInfo] ON [dbo].[VersionInfo] 
(
	[Product] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[gp_UserCurrParm_SelectBy]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_UserCurrParm_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_UserReassignHist_SelectBy]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_UserReassignHist_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_upgrade_status_SelectBy]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_upgrade_status_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_SearhParmsHistory_SelectBy]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_SearhParmsHistory_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_sysdiagrams_SelectBydiagram_id]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_sysdiagrams_SelectBydiagram_id]
(
	@diagram_id int
)
AS
/*
** Select a row from the sysdiagrams table by primary key
*/

SELECT 
	gv_sysdiagrams.*
FROM
	gv_sysdiagrams WHERE [diagram_id] = @diagram_id
GO
/****** Object:  StoredProcedure [dbo].[gp_sysdiagrams_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_sysdiagrams_SelectAll]
AS
/*
** Select all rows from the sysdiagrams table
*/

SELECT 
	gv_sysdiagrams.*
FROM
	gv_sysdiagrams
ORDER BY
	[diagram_id]
GO
/****** Object:  StoredProcedure [dbo].[IssueUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: IssueUpdProc 
 */

CREATE PROCEDURE [dbo].[IssueUpdProc]
(
    @CategoryName         nvarchar(50),
    @IssueDescription     nvarchar(max)            = NULL,
    @EntryDate            datetime                 = NULL,
    @SeverityCode         nvarchar(50)             = NULL,
    @StatusCode           nvarchar(50)             = NULL,
    @EMail                nvarchar(100),
    @IssueTitle           nvarchar(400),
    @LastUpdate           datetime                 = NULL,
    @CreateDate           datetime                 = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Issue
       SET CategoryName          = @CategoryName,
           IssueDescription      = @IssueDescription,
           EntryDate             = @EntryDate,
           SeverityCode          = @SeverityCode,
           StatusCode            = @StatusCode,
           EMail                 = @EMail,
           LastUpdate            = @LastUpdate,
           CreateDate            = @CreateDate
     WHERE IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'IssueUpdProc: Cannot update  in Issue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[IssueSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: IssueSelProc 
 */

CREATE PROCEDURE [dbo].[IssueSelProc]
(
    @IssueTitle           nvarchar(400))
AS
BEGIN
    SELECT CategoryName,
           IssueDescription,
           EntryDate,
           SeverityCode,
           StatusCode,
           EMail,
           IssueTitle,
           LastUpdate,
           CreateDate
      FROM Issue
     WHERE IssueTitle = @IssueTitle

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[IssueInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: IssueInsProc 
 */

CREATE PROCEDURE [dbo].[IssueInsProc]
(
    @CategoryName         nvarchar(50),
    @IssueDescription     nvarchar(max)            = NULL,
    @EntryDate            datetime                 = NULL,
    @SeverityCode         nvarchar(50)             = NULL,
    @StatusCode           nvarchar(50)             = NULL,
    @EMail                nvarchar(100),
    @IssueTitle           nvarchar(400),
    @LastUpdate           datetime                 = NULL,
    @CreateDate           datetime                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Issue(CategoryName,
                      IssueDescription,
                      EntryDate,
                      SeverityCode,
                      StatusCode,
                      EMail,
                      IssueTitle,
                      LastUpdate,
                      CreateDate)
    VALUES(@CategoryName,
           @IssueDescription,
           @EntryDate,
           @SeverityCode,
           @StatusCode,
           @EMail,
           @IssueTitle,
           @LastUpdate,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'IssueInsProc: Cannot insert because primary key value not found in Issue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[IssueDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: IssueDelProc 
 */

CREATE PROCEDURE [dbo].[IssueDelProc]
(
    @IssueTitle           nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Issue
     WHERE IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'IssueDelProc: Cannot delete because foreign keys still exist in Issue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  UserDefinedFunction [dbo].[IsGuid]    Script Date: 05/18/2011 16:17:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
create function [dbo].[IsGuid] ( @testString varchar(38))
returns int
as
begin
    declare @ret int
    select  @ret = 0,
            @testString = replace(replace(@testString, '{', ''), '}', '')
    if len(isnull(@testString, '')) = 36 and
       @testString NOT LIKE '%[^0-9A-Fa-f-]%' and
       -- check for proper positions of hyphens (-)  
       charindex('-', @testString) = 9 and 
       charindex('-', @testString, 10) = 14 and 
       charindex('-', @testString, 15) = 19 and 
       charindex('-', @testString, 20) = 24 and 
       charindex('-', @testString, 25) = 0
          set @ret = 1
    
    return @ret
end
GO
/****** Object:  Table [dbo].[IP]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[IP](
	[HostName] [nvarchar](150) NOT NULL,
	[AccessingIP] [nvarchar](50) NOT NULL,
	[AccessCnt] [int] NULL,
	[BlockIP] [bit] NULL,
	[SearchCnt] [int] NULL,
	[FirstAccessDate] [datetime] NULL,
	[LastAccessDate] [datetime] NULL,
	[RowNbr] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_IP] ON [dbo].[IP] 
(
	[HostName] ASC,
	[AccessingIP] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[QuickDirectory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[QuickDirectory](
	[UserID] [nvarchar](50) NOT NULL,
	[IncludeSubDirs] [char](1) NULL,
	[FQN] [varchar](254) NOT NULL,
	[DB_ID] [nvarchar](50) NOT NULL,
	[VersionFiles] [char](1) NULL,
	[ckMetaData] [nchar](1) NULL,
	[ckPublic] [nchar](1) NULL,
	[ckDisableDir] [nchar](1) NULL,
	[QuickRefEntry] [bit] NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKII2QD] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[Logs]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Logs](
	[UID] [nvarchar](50) NULL,
	[ErrorMsg] [nvarchar](max) NULL,
	[EntryDate] [datetime] NULL,
	[RowNbr] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoginUser]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoginUser](
	[LoginID] [nvarchar](50) NOT NULL,
	[LoginDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_LoginUser] ON [dbo].[LoginUser] 
(
	[LoginID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoginMachine]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoginMachine](
	[MachineName] [nvarchar](80) NOT NULL,
	[LoginDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_LognMachine] ON [dbo].[LoginMachine] 
(
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[LoginClient]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[LoginClient](
	[MachineName] [nvarchar](80) NOT NULL,
	[LoginDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_LoginClient] ON [dbo].[LoginClient] 
(
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RiskLevel]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[RiskLevel](
	[RiskCode] [char](10) NULL,
	[Description] [nvarchar](4000) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[RetentionTemp]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RetentionTemp](
	[UserID] [nvarchar](50) NOT NULL,
	[ContentGuid] [nvarchar](50) NOT NULL,
	[TypeContent] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_RetentionTemp] ON [dbo].[RetentionTemp] 
(
	[ContentGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_RetentionTemp] ON [dbo].[RetentionTemp] 
(
	[UserID] ASC,
	[TypeContent] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StructuredDataProcessed]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StructuredDataProcessed](
	[EcmGuid] [nvarchar](50) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_SDP] ON [dbo].[StructuredDataProcessed] 
(
	[EcmGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[StructuredData]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[StructuredData](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[ColumnName] [nvarchar](120) NOT NULL,
	[ColVal] [nvarchar](50) NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_StructuredData] ON [dbo].[StructuredData] 
(
	[SourceGuid] ASC,
	[ColumnName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_StructuredData] ON [dbo].[StructuredData] 
(
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RunParms]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RunParms](
	[Parm] [nvarchar](250) NOT NULL,
	[ParmValue] [nvarchar](50) NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[ParmDesc] [nvarchar](500) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKI8] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[Parm] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FilesToDelete]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FilesToDelete](
	[UserID] [nvarchar](50) NULL,
	[MachineName] [nvarchar](100) NULL,
	[FQN] [nvarchar](254) NULL,
	[PendingDelete] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_FileToDelete] ON [dbo].[FilesToDelete] 
(
	[UserID] ASC,
	[MachineName] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FileKeyMachineDir]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FileKeyMachineDir](
	[Machine] [nvarchar](80) NOT NULL,
	[Dir] [nvarchar](254) NOT NULL,
	[FileKey] [nvarchar](300) NOT NULL,
	[HashKey] [nvarchar](100) NOT NULL,
	[FileKeyMachineDirGuid] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_FileKeyMachineDir] ON [dbo].[FileKeyMachineDir] 
(
	[Machine] ASC,
	[FileKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_FileKeyMachineDir] ON [dbo].[FileKeyMachineDir] 
(
	[Machine] ASC,
	[FileKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI03_FileKeyMachineDir] ON [dbo].[FileKeyMachineDir] 
(
	[FileKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI04_FileKeyMachineDir] ON [dbo].[FileKeyMachineDir] 
(
	[HashKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FileKeyMachine]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FileKeyMachine](
	[Machine] [nvarchar](80) NOT NULL,
	[FileKey] [nvarchar](300) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[FileKey]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FileKey](
	[FileKey] [nvarchar](300) NOT NULL,
	[SourceGuid] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_FileKey] ON [dbo].[FileKey] 
(
	[FileKey] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ExcludedFiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ExcludedFiles](
	[UserID] [nvarchar](50) NOT NULL,
	[ExtCode] [nvarchar](50) NOT NULL,
	[FQN] [varchar](254) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKII4] PRIMARY KEY NONCLUSTERED 
(
	[UserID] ASC,
	[ExtCode] ASC,
	[FQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ExcludeFrom]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ExcludeFrom](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK_ExcludeFrom] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [Pi01_ExcludeFrom] ON [dbo].[ExcludeFrom] 
(
	[FromEmailAddr] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContactFrom]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ContactFrom](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](25) NOT NULL,
	[Verified] [int] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [ContactFrom_PK] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[ConnectionStringsSaved]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ConnectionStringsSaved](
	[ConnstrName] [nvarchar](100) NOT NULL,
	[ConnStr] [nvarchar](2000) NOT NULL,
	[TypeDB] [nvarchar](15) NULL,
	[CustomColSelectionSQL] [nvarchar](max) NULL,
	[CustomTableDataSQL] [nvarchar](max) NULL,
	[SelectedColumns] [nvarchar](max) NULL,
	[Schedule] [nvarchar](2000) NULL,
	[TableName] [nvarchar](2000) NULL,
	[LastArchiveDate] [datetime] NULL,
	[Library] [nvarchar](50) NULL,
	[LibraryOwnerGuid] [nvarchar](50) NULL,
	[RetentionCode] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[CombinedSql] [nvarchar](max) NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK_ConnStrSaved] ON [dbo].[ConnectionStringsSaved] 
(
	[ConnstrName] ASC,
	[TableName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ConnectionStringsRegistered]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ConnectionStringsRegistered](
	[ConnName] [nvarchar](100) NOT NULL,
	[ConnStr] [nvarchar](254) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_ConnectionStringsRegistered] ON [dbo].[ConnectionStringsRegistered] 
(
	[ConnName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ConnectionStrings]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ConnectionStrings](
	[DBMS] [nvarchar](100) NOT NULL,
	[ConnStr] [nvarchar](254) NOT NULL
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CompanyUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CompanyUpdProc 
 */

CREATE PROCEDURE [dbo].[CompanyUpdProc]
(
    @CompanyID       nvarchar(50),
    @CompanyName     nvarchar(18))
AS
BEGIN
    BEGIN TRAN

    UPDATE Company
       SET CompanyName      = @CompanyName
     WHERE CompanyID = @CompanyID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CompanyUpdProc: Cannot update  in Company '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CompanySelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CompanySelProc 
 */

CREATE PROCEDURE [dbo].[CompanySelProc]
(
    @CompanyID       nvarchar(50))
AS
BEGIN
    SELECT CompanyID,
           CompanyName
      FROM Company
     WHERE CompanyID = @CompanyID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CompanyInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CompanyInsProc 
 */

CREATE PROCEDURE [dbo].[CompanyInsProc]
(
    @CompanyID       nvarchar(50),
    @CompanyName     nvarchar(18))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Company(CompanyID,
                        CompanyName)
    VALUES(@CompanyID,
           @CompanyName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CompanyInsProc: Cannot insert because primary key value not found in Company '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CompanyDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CompanyDelProc 
 */

CREATE PROCEDURE [dbo].[CompanyDelProc]
(
    @CompanyID       nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Company
     WHERE CompanyID = @CompanyID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CompanyDelProc: Cannot delete because foreign keys still exist in Company '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[CLCState]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[CLCState](
	[CLCInstalled] [bit] NULL,
	[CLCActive] [bit] NULL,
	[MachineID] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](80) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PI_CLCState] ON [dbo].[CLCState] 
(
	[MachineID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ArchiveFrom]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[ArchiveFrom](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](25) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK39] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[AppliedDbUpdatesUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: AppliedDbUpdatesUpdProc 
 */

CREATE PROCEDURE [dbo].[AppliedDbUpdatesUpdProc]
(
    @CompanyID     nvarchar(50),
    @FixID         nvarchar(50),
    @Status        nvarchar(50)              = NULL,
    @ReturnMsg     nvarchar(2000)            = NULL,
    @ApplyDate     datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE AppliedDbUpdates
       SET Status         = @Status,
           ReturnMsg      = @ReturnMsg,
           ApplyDate      = @ApplyDate
     WHERE CompanyID = @CompanyID
       AND FixID     = @FixID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'AppliedDbUpdatesUpdProc: Cannot update  in AppliedDbUpdates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AppliedDbUpdatesSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: AppliedDbUpdatesSelProc 
 */

CREATE PROCEDURE [dbo].[AppliedDbUpdatesSelProc]
(
    @CompanyID     nvarchar(50),
    @FixID         nvarchar(50))
AS
BEGIN
    SELECT CompanyID,
           FixID,
           Status,
           ReturnMsg,
           ApplyDate
      FROM AppliedDbUpdates
     WHERE CompanyID = @CompanyID
       AND FixID     = @FixID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AppliedDbUpdatesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: AppliedDbUpdatesInsProc 
 */

CREATE PROCEDURE [dbo].[AppliedDbUpdatesInsProc]
(
    @CompanyID     nvarchar(50),
    @FixID         nvarchar(50),
    @Status        nvarchar(50)              = NULL,
    @ReturnMsg     nvarchar(2000)            = NULL,
    @ApplyDate     datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AppliedDbUpdates(CompanyID,
                                 FixID,
                                 Status,
                                 ReturnMsg,
                                 ApplyDate)
    VALUES(@CompanyID,
           @FixID,
           @Status,
           @ReturnMsg,
           @ApplyDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AppliedDbUpdatesInsProc: Cannot insert because primary key value not found in AppliedDbUpdates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AppliedDbUpdatesDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: AppliedDbUpdatesDelProc 
 */

CREATE PROCEDURE [dbo].[AppliedDbUpdatesDelProc]
(
    @CompanyID     nvarchar(50),
    @FixID         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM AppliedDbUpdates
     WHERE CompanyID = @CompanyID
       AND FixID     = @FixID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AppliedDbUpdatesDelProc: Cannot delete because foreign keys still exist in AppliedDbUpdates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[DataSourceRestoreHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataSourceRestoreHistory](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[RestoredToMachine] [nvarchar](50) NULL,
	[RestoreUserName] [nvarchar](50) NULL,
	[RestoreUserID] [nvarchar](50) NULL,
	[RestoreUserDomain] [nvarchar](254) NULL,
	[RestoreDate] [datetime] NULL,
	[DataSourceOwnerUserID] [nvarchar](50) NOT NULL,
	[SeqNo] [int] IDENTITY(1,1) NOT NULL,
	[TypeContentCode] [nvarchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[DocumentName] [nvarchar](254) NULL,
	[FQN] [nvarchar](500) NULL,
	[VerifiedData] [nchar](1) NULL,
	[OrigCrc] [nvarchar](50) NULL,
	[RestoreCrc] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK83] PRIMARY KEY CLUSTERED 
(
	[SeqNo] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_RestoreHist] ON [dbo].[DataSourceRestoreHistory] 
(
	[DataSourceOwnerUserID] ASC,
	[TypeContentCode] ASC,
	[VerifiedData] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DataSourceOwner]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DataSourceOwner](
	[SourceGuid] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_DataSourceOwner] ON [dbo].[DataSourceOwner] 
(
	[SourceGuid] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ActiveSearchGuids]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActiveSearchGuids](
	[UserID] [nvarchar](50) NOT NULL,
	[DocGuid] [nvarchar](50) NOT NULL,
	[SeqNO] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_ActiveSearchGuids] ON [dbo].[ActiveSearchGuids] 
(
	[UserID] ASC,
	[DocGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PI01_ActiveSearchGuids] ON [dbo].[ActiveSearchGuids] 
(
	[UserID] ASC,
	[SeqNO] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ActiveLicenseInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ActiveLicenseInsProc]
(
    @License         nvarchar(2000),
    @InstallDate     datetime)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ActiveLicense(License,
                              InstallDate 
                              )
    VALUES(@License,
           @InstallDate 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ActiveLicenseInsProc: Cannot insert because primary key value not found in ActiveLicense '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Table [dbo].[ActiveDirUser]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ActiveDirUser](
	[AdUserLoginID] [nvarchar](50) NOT NULL,
	[AdUserName] [nvarchar](80) NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_AdUsers] ON [dbo].[ActiveDirUser] 
(
	[AdUserLoginID] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[EcmUser]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[EcmUser](
	[EMail] [nvarchar](50) NOT NULL,
	[PhoneNumber] [nvarchar](20) NULL,
	[YourName] [nvarchar](100) NULL,
	[YourCompany] [nvarchar](50) NULL,
	[PassWord] [nvarchar](50) NULL,
	[Authority] [nchar](1) NULL,
	[CreateDate] [datetime] NULL,
	[CompanyID] [nvarchar](50) NULL,
	[LastUpdate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK8] PRIMARY KEY CLUSTERED 
(
	[EMail] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[EcmResponseUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmResponseUpdProc 
 */

CREATE PROCEDURE [dbo].[EcmResponseUpdProc]
(
    @IssueTitle      nvarchar(250),
    @Response        nvarchar(max)            = NULL,
    @CreateDate      nvarchar(50)             = NULL,
    @LastModDate     datetime                 = NULL,
    @ResponseID      int)
AS
BEGIN
    BEGIN TRAN

    UPDATE EcmResponse
       SET Response         = @Response,
           CreateDate       = @CreateDate,
           LastModDate      = @LastModDate
     WHERE IssueTitle = @IssueTitle
       AND ResponseID = @ResponseID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EcmResponseUpdProc: Cannot update  in EcmResponse '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmResponseSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmResponseSelProc 
 */

CREATE PROCEDURE [dbo].[EcmResponseSelProc]
(
    @IssueTitle      nvarchar(250),
    @ResponseID      int)
AS
BEGIN
    SELECT IssueTitle,
           Response,
           CreateDate,
           LastModDate,
           ResponseID
      FROM EcmResponse
     WHERE IssueTitle = @IssueTitle
       AND ResponseID = @ResponseID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmResponseInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmResponseInsProc 
 */

CREATE PROCEDURE [dbo].[EcmResponseInsProc]
(
    @IssueTitle      nvarchar(250),
    @Response        nvarchar(max)            = NULL,
    @CreateDate      nvarchar(50)             = NULL,
    @LastModDate     datetime                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EcmResponse(IssueTitle,
                            Response,
                            CreateDate,
                            LastModDate 
                            )
    VALUES(@IssueTitle,
           @Response,
           @CreateDate,
           @LastModDate 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EcmResponseInsProc: Cannot insert because primary key value not found in EcmResponse '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EcmResponseDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmResponseDelProc 
 */

CREATE PROCEDURE [dbo].[EcmResponseDelProc]
(
    @IssueTitle      nvarchar(250),
    @ResponseID      int)
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EcmResponse
     WHERE IssueTitle = @IssueTitle
       AND ResponseID = @ResponseID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EcmResponseDelProc: Cannot delete because foreign keys still exist in EcmResponse '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_PgmTrace_SelectBy]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_PgmTrace_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_RestorationHistory_SelectBy]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_RestorationHistory_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_RuntimeErrors_SelectBy]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_RuntimeErrors_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_RiskLevel_SelectBy]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_RiskLevel_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpTextUser_SelectBy]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_HelpTextUser_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailAttachmentSearchList_SelectBy]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_EmailAttachmentSearchList_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailToDelete_SelectBy]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[gp_EmailToDelete_SelectBy] AS PRINT 'ALTER PROC will update this'
GO
/****** Object:  Table [dbo].[FileType]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[FileType](
	[FileExt] [nvarchar](50) NULL,
	[Description] [nvarchar](255) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CS_SharePoint]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CS_SharePoint](
	[SP_ConnectionString] [varchar](300) NOT NULL,
	[ECM_ConnectionString] [varchar](300) NOT NULL,
	[ConnectionName] [nvarchar](50) NOT NULL,
	[isPublic] [bit] NULL,
	[LibraryName] [nvarchar](80) NULL,
	[LoginID] [nvarchar](80) NULL,
	[LoginPW] [nvarchar](80) NULL,
	[ID_NBR] [varchar](50) NULL,
	[ID_NBR_ECM] [varchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UK01_CS_Sharepoint] ON [dbo].[CS_SharePoint] 
(
	[SP_ConnectionString] ASC,
	[ECM_ConnectionString] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK02_CS_Sharepoint] ON [dbo].[CS_SharePoint] 
(
	[ConnectionName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[CS]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[CS](
	[ConnectionString] [varchar](300) NOT NULL,
	[ConnectionType] [nchar](25) NOT NULL,
	[ConnectionName] [nvarchar](50) NOT NULL,
	[SharePointURL] [nvarchar](500) NULL,
	[LoginID] [nvarchar](80) NULL,
	[LoginPW] [nvarchar](80) NULL,
	[ID_NBR] [varchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UK01_CS] ON [dbo].[CS] 
(
	[ConnectionName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK02_CS] ON [dbo].[CS] 
(
	[ConnectionString] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[GraphicsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: GraphicsUpdProc 
 */

CREATE PROCEDURE [dbo].[GraphicsUpdProc]
(
    @GraphicID      int,
    @Graphic        image                    = NULL,
    @ResponseID     int,
    @EMail          nvarchar(100),
    @IssueTitle     nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    UPDATE Graphics
       SET Graphic         = @Graphic,
           ResponseID      = @ResponseID,
           EMail           = @EMail
     WHERE GraphicID  = @GraphicID
       AND IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'GraphicsUpdProc: Cannot update  in Graphics '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[GraphicsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: GraphicsSelProc 
 */

CREATE PROCEDURE [dbo].[GraphicsSelProc]
(
    @GraphicID      int,
    @IssueTitle     nvarchar(400))
AS
BEGIN
    SELECT GraphicID,
           Graphic,
           ResponseID,
           EMail,
           IssueTitle
      FROM Graphics
     WHERE GraphicID  = @GraphicID
       AND IssueTitle = @IssueTitle

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[GraphicsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: GraphicsInsProc 
 */

CREATE PROCEDURE [dbo].[GraphicsInsProc]
(
    @Graphic        image                    = NULL,
    @ResponseID     int,
    @EMail          nvarchar(100),
    @IssueTitle     nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Graphics(Graphic,
                         ResponseID,
                         EMail,
                         IssueTitle)
    VALUES(@Graphic,
           @ResponseID,
           @EMail,
           @IssueTitle)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'GraphicsInsProc: Cannot insert because primary key value not found in Graphics '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[GraphicsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: GraphicsDelProc 
 */

CREATE PROCEDURE [dbo].[GraphicsDelProc]
(
    @GraphicID      int,
    @IssueTitle     nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Graphics
     WHERE GraphicID  = @GraphicID
       AND IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'GraphicsDelProc: Cannot delete because foreign keys still exist in Graphics '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmIssueUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmIssueUpdProc 
 */

CREATE PROCEDURE [dbo].[EcmIssueUpdProc]
(
    @IssueTitle           nvarchar(250),
    @IssueDescription     nvarchar(max)            = NULL,
    @CreationDate         nvarchar(50)             = NULL,
    @StatusCode           nvarchar(50),
    @SeverityCode         nvarchar(50),
    @CategoryName         nvarchar(50),
    @EMail                nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE EcmIssue
       SET IssueDescription      = @IssueDescription,
           CreationDate          = @CreationDate,
           StatusCode            = @StatusCode,
           SeverityCode          = @SeverityCode,
           CategoryName          = @CategoryName,
           EMail                 = @EMail
     WHERE IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EcmIssueUpdProc: Cannot update  in EcmIssue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmIssueSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmIssueSelProc 
 */

CREATE PROCEDURE [dbo].[EcmIssueSelProc]
(
    @IssueTitle           nvarchar(250))
AS
BEGIN
    SELECT IssueTitle,
           IssueDescription,
           CreationDate,
           StatusCode,
           SeverityCode,
           CategoryName,
           EMail
      FROM EcmIssue
     WHERE IssueTitle = @IssueTitle

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmIssueInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmIssueInsProc 
 */

CREATE PROCEDURE [dbo].[EcmIssueInsProc]
(
    @IssueTitle           nvarchar(250),
    @IssueDescription     nvarchar(max)            = NULL,
    @CreationDate         nvarchar(50)             = NULL,
    @StatusCode           nvarchar(50),
    @SeverityCode         nvarchar(50),
    @CategoryName         nvarchar(50),
    @EMail                nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EcmIssue(IssueTitle,
                         IssueDescription,
                         CreationDate,
                         StatusCode,
                         SeverityCode,
                         CategoryName,
                         EMail)
    VALUES(@IssueTitle,
           @IssueDescription,
           @CreationDate,
           @StatusCode,
           @SeverityCode,
           @CategoryName,
           @EMail)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EcmIssueInsProc: Cannot insert because primary key value not found in EcmIssue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EcmIssueDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmIssueDelProc 
 */

CREATE PROCEDURE [dbo].[EcmIssueDelProc]
(
    @IssueTitle           nvarchar(250))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EcmIssue
     WHERE IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EcmIssueDelProc: Cannot delete because foreign keys still exist in EcmIssue '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ECM_spaceused]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[ECM_spaceused] --- 2003/05/19 14:00
@objname nvarchar(776) = null,		-- The object we want size on.
@updateusage varchar(5) = false		-- Param. for specifying that
					-- usage info. should be updated.
as

declare @id	int			-- The object id that takes up space
		,@type	character(2) -- The object type.
		,@pages	bigint			-- Working variable for size calc.
		,@dbname sysname
		,@dbsize bigint
		,@logsize bigint
		,@reservedpages  bigint
		,@usedpages  bigint
		,@rowCount bigint

/*
**  Check to see if user wants usages updated.
*/

if @updateusage is not null
	begin
		select @updateusage=lower(@updateusage)

		if @updateusage not in ('true','false')
			begin
				raiserror(15143,-1,-1,@updateusage)
				return(1)
			end
	end
/*
**  Check to see that the objname is local.
*/
if @objname IS NOT NULL
begin

	select @dbname = parsename(@objname, 3)

	if @dbname is not null and @dbname <> db_name()
		begin
			raiserror(15250,-1,-1)
			return (1)
		end

	if @dbname is null
		select @dbname = db_name()

	/*
	**  Try to find the object.
	*/
	SELECT @id = object_id, @type = type FROM sys.objects WHERE object_id = object_id(@objname)

	-- Translate @id to internal-table for queue
	IF @type = 'SQ'
		SELECT @id = object_id FROM sys.internal_tables WHERE parent_id = @id and internal_type = 201 --ITT_ServiceQueue

	/*
	**  Does the object exist?
	*/
	if @id is null
		begin
			raiserror(15009,-1,-1,@objname,@dbname)
			return (1)
		end

	-- Is it a table, view or queue?
	IF @type NOT IN ('U ','S ','V ','SQ','IT')
	begin
		raiserror(15234,-1,-1)
		return (1)
	end
end

/*
**  Update usages if user specified to do so.
*/

if @updateusage = 'true'
	begin
		if @objname is null
			dbcc updateusage(0) with no_infomsgs
		else
			dbcc updateusage(0,@objname) with no_infomsgs
		print ' '
	end

set nocount on

/*
**  If @id is null, then we want summary data.
*/
if @id is null
begin
	select @dbsize = sum(convert(bigint,case when status & 64 = 0 then size else 0 end))
		, @logsize = sum(convert(bigint,case when status & 64 <> 0 then size else 0 end))
		from dbo.sysfiles

	select @reservedpages = sum(a.total_pages),
		@usedpages = sum(a.used_pages),
		@pages = sum(
				CASE
					-- XML-Index and FT-Index internal tables are not considered `data`, but is part of `index_size`
					When it.internal_type IN (202,204,211,212,213,214,215,216) Then 0
					When a.type <> 1 Then a.used_pages
					When p.index_id < 2 Then a.data_pages
					Else 0
				END
			)
	from sys.partitions p join sys.allocation_units a on p.partition_id = a.container_id
		left join sys.internal_tables it on p.object_id = it.object_id

	/* unallocated space could not be negative */
	--select 
	--	database_name = db_name(),
	--	database_size = ltrim(str((convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize)) 
	--		* 8192 / 1048576,15,2) + ' MB'),
	--	'unallocated space' = ltrim(str((case when @dbsize >= @reservedpages then
	--		(convert (dec (15,2),@dbsize) - convert (dec (15,2),@reservedpages)) 
	--		* 8192 / 1048576 else 0 end),15,2) + ' MB')

	/*
	**  Now calculate the summary data.
	**  reserved: sum(reserved) where indid in (0, 1, 255)
	** data: sum(data_pages) + sum(text_used)
	** index: sum(used) where indid in (0, 1, 255) - data
	** unused: sum(reserved) - sum(used) where indid in (0, 1, 255)
	*/
	--select
	--	reserved = ltrim(str(@reservedpages * 8192 / 1024.,15,0) + ' KB'),
	--	data = ltrim(str(@pages * 8192 / 1024.,15,0) + ' KB'),
	--	index_size = ltrim(str((@usedpages - @pages) * 8192 / 1024.,15,0) + ' KB'),
	--	unused = ltrim(str((@reservedpages - @usedpages) * 8192 / 1024.,15,0) + ' KB')
end

/*
**  We want a particular object.
*/
else
begin
	/*
	** Now calculate the summary data. 
	*  Note that LOB Data and Row-overflow Data are counted as Data Pages.
	*/
	SELECT 
		@reservedpages = SUM (reserved_page_count),
		@usedpages = SUM (used_page_count),
		@pages = SUM (
			CASE
				WHEN (index_id < 2) THEN (in_row_data_page_count + lob_used_page_count + row_overflow_used_page_count)
				ELSE lob_used_page_count + row_overflow_used_page_count
			END
			),
		@rowCount = SUM (
			CASE
				WHEN (index_id < 2) THEN row_count
				ELSE 0
			END
			)
	FROM sys.dm_db_partition_stats
	WHERE object_id = @id;

	/*
	** Check if table has XML Indexes or Fulltext Indexes which use internal tables tied to this table
	*/
	IF (SELECT count(*) FROM sys.internal_tables WHERE parent_id = @id AND internal_type IN (202,204,211,212,213,214,215,216)) > 0 
	BEGIN
		/*
		**  Now calculate the summary data. Row counts in these internal tables don't 
		**  contribute towards row count of original table.
		*/
		SELECT 
			@reservedpages = @reservedpages + sum(reserved_page_count),
			@usedpages = @usedpages + sum(used_page_count)
		FROM sys.dm_db_partition_stats p, sys.internal_tables it
		WHERE it.parent_id = @id AND it.internal_type IN (202,204,211,212,213,214,215,216) AND p.object_id = it.object_id;
	END

	SELECT 
		name = OBJECT_NAME (@id),
		rows = convert (char(11), @rowCount),
		reserved = LTRIM (STR (@reservedpages * 8, 15, 0) + ' KB'),
		data = LTRIM (STR (@pages * 8, 15, 0) + ' KB'),
		index_size = LTRIM (STR ((CASE WHEN @usedpages > @pages THEN (@usedpages - @pages) ELSE 0 END) * 8, 15, 0) + ' KB'),
		unused = LTRIM (STR ((CASE WHEN @reservedpages > @usedpages THEN (@reservedpages - @usedpages) ELSE 0 END) * 8, 15, 0) + ' KB')

	
end

select 
	database_name = db_name(),
	database_size = ltrim(str((convert (dec (15,2),@dbsize) + convert (dec (15,2),@logsize)) 
			* 8192 / 1048576,15,2) + ' MB'),
	index_size = LTRIM (STR ((CASE WHEN @usedpages > @pages THEN (@usedpages - @pages) ELSE 0 END) * 8, 15, 0) + ' KB')


return (0) -- sp_spaceused
GO
/****** Object:  StoredProcedure [dbo].[funcEcmUpdateDB]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create Procedure [dbo].[funcEcmUpdateDB]
	@pSql nVarChar(max)
AS
Exec sp_executesql @pSql
GO
/****** Object:  Table [dbo].[TempUserLibItems]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[TempUserLibItems](
	[UserID] [nvarchar](50) NOT NULL,
	[SourceGuid] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_TempUserLibItems] ON [dbo].[TempUserLibItems] 
(
	[UserID] ASC,
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[StatusUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: StatusUpdProc 
 */

CREATE PROCEDURE [dbo].[StatusUpdProc]
(
    @StatusCode     nvarchar(50),
    @CodeDesc       nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Status
       SET CodeDesc        = @CodeDesc
     WHERE StatusCode = @StatusCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'StatusUpdProc: Cannot update  in Status '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[StatusSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: StatusSelProc 
 */

CREATE PROCEDURE [dbo].[StatusSelProc]
(
    @StatusCode     nvarchar(50))
AS
BEGIN
    SELECT StatusCode,
           CodeDesc
      FROM Status
     WHERE StatusCode = @StatusCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[StatusInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: StatusInsProc 
 */

CREATE PROCEDURE [dbo].[StatusInsProc]
(
    @StatusCode     nvarchar(50),
    @CodeDesc       nvarchar(18)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Status(StatusCode,
                       CodeDesc)
    VALUES(@StatusCode,
           @CodeDesc)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'StatusInsProc: Cannot insert because primary key value not found in Status '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[StatusDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: StatusDelProc 
 */

CREATE PROCEDURE [dbo].[StatusDelProc]
(
    @StatusCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Status
     WHERE StatusCode = @StatusCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'StatusDelProc: Cannot delete because foreign keys still exist in Status '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[StagedSQL]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[StagedSQL](
	[ExecutionID] [varchar](50) NOT NULL,
	[SqlStmt] [nvarchar](max) NOT NULL,
	[EntryTime] [datetime] NULL,
	[StmtID] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[SqlDataTypes]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[SqlDataTypes](
	[_nvarchar] [nchar](10) NULL,
	[_bigint] [bigint] NULL,
	[_binary] [binary](50) NULL,
	[_bit] [bit] NULL,
	[_char] [char](10) NULL,
	[_datetime] [datetime] NULL,
	[_datetimeoffset] [datetimeoffset](7) NULL,
	[_decimal] [decimal](18, 2) NULL,
	[_float] [float] NULL,
	[_geography] [geography] NULL,
	[_geometry] [geometry] NULL,
	[_hierarchyid] [hierarchyid] NULL,
	[_image] [image] NULL,
	[_int] [int] NULL,
	[_money] [money] NULL,
	[_nchar] [nchar](10) NULL,
	[_ntext] [ntext] NULL,
	[_numeric] [numeric](18, 2) NULL,
	[_nvarchar_max] [nvarchar](max) NULL,
	[_real] [real] NULL,
	[_smalldatetime] [smalldatetime] NULL,
	[_smallint] [smallint] NULL,
	[_smallmoney] [smallmoney] NULL,
	[_sql_variant] [sql_variant] NULL,
	[_text] [text] NULL,
	[_time7] [time](7) NULL,
	[_timestamp] [timestamp] NULL,
	[_tinyint] [tinyint] NULL,
	[_uniqueidentifier] [uniqueidentifier] NULL,
	[_varbinary] [varbinary](50) NULL,
	[_varchar] [varchar](50) NULL,
	[_varcharMAX] [varchar](max) NULL,
	[_xml] [xml] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY] TEXTIMAGE_ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  UserDefinedFunction [dbo].[spTBL_RowCOUNT]    Script Date: 05/18/2011 16:17:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[spTBL_RowCOUNT] (
 
         @sTableName sysname  -- Table to retrieve Row Count
         )
 
     RETURNS INT -- Row count of the table, NULL if not found.
 
 /*
 * Returns the row count for a table by examining sysindexes.
 * This function must be run in the same database as the table.
 *
 * Common Usage:   
 SELECT dbo.udf_Tbl_RowCOUNT ('')
 
 * Test   
  PRINT 'Test 1 Bad table ' + CASE WHEN SELECT 
        dbo.udf_Tbl_RowCOUNT ('foobar') is NULL
         THEN 'Worked' ELSE 'Error' END
         
 * © Copyright 2004 W. Dale Miller dm@DmaChicago.com, all rights reserved.
 ***************************************************************/
 
 AS BEGIN
     
     DECLARE @nRowCount INT -- the rows
     DECLARE @nObjectID int -- Object ID
 
     SET @nObjectID = OBJECT_ID(@sTableName)
 
     -- Object might not be found
     IF @nObjectID is null RETURN NULL
 
     SELECT TOP 1 @nRowCount = rows 
         FROM sysindexes 
         WHERE id = @nObjectID AND indid < 2
 
     RETURN @nRowCount
 END
GO
/****** Object:  StoredProcedure [dbo].[spGetAllTableSizes]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
create PROCEDURE [dbo].[spGetAllTableSizes]
AS
/*
    Obtains spaced used data for ALL user tables in the database
*/
DECLARE @TableName VARCHAR(100)    --For storing values in the cursor

--Cursor to get the name of all user tables from the sysobjects listing
DECLARE tableCursor CURSOR
FOR 
select [name]
from dbo.sysobjects 
where  OBJECTPROPERTY(id, N'IsUserTable') = 1
FOR READ ONLY

--A procedure level temp table to store the results
CREATE TABLE #TempTable
(
    tableName varchar(100),
    numberofRows varchar(100),
    reservedSize varchar(50),
    dataSize varchar(50),
    indexSize varchar(50),
    unusedSize varchar(50)
)

--Open the cursor
OPEN tableCursor

--Get the first table name from the cursor
FETCH NEXT FROM tableCursor INTO @TableName

--Loop until the cursor was not able to fetch
WHILE (@@Fetch_Status >= 0)
BEGIN
    --Dump the results of the sp_spaceused query to the temp table
    INSERT  #TempTable
        EXEC sp_spaceused @TableName

    --Get the next table name
    FETCH NEXT FROM tableCursor INTO @TableName
END

--Get rid of the cursor
CLOSE tableCursor
DEALLOCATE tableCursor

--Select all records so we can use the reults
SELECT * 
FROM #TempTable

--Final cleanup!
DROP TABLE #TempTable
GO
/****** Object:  StoredProcedure [dbo].[spGetAllDBStats2]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[spGetAllDBStats2]
AS
BEGIN
   ----------------------------------------------------------------
   -- Purpose:
   --    This SP Returns Data and Log File Sizes For all Databases,
   --    Along With Percent Capacity Used.
   --    Uses a Bunch of Dynamic SQL and DBCC Calls.
   -- 
   --  LIMITATIONS: For Databases With Multiple FILEGROUPS,
   --               it will only list information on one (the last)
   --               FILEGROUP!
   --
   -- Database:  (All)
   --
   -- History:
   --  
   --   Who       When      What
   --   ---       --------  ----------------------------------
   --   WDM       6.8.04    Created SP  
   ----------------------------------------------------------------

   DECLARE @buf     VARCHAR(512)
   DECLARE @db_name VARCHAR(80)

   SET NOCOUNT ON

   -- Create Two Temporary Tables
   CREATE TABLE #T
   (
      _DBName           VARCHAR(80) NOT NULL,

      _LogSizeMB        FLOAT           NULL,
      _LogSpaceUsedPct  FLOAT           NULL,          
      _LogFileName      VARCHAR(255)    NULL,
      _LogTotalExtents  INT             NULL,
      _LogUsedExtents   INT             NULL,

      _DataSizeMB       FLOAT           NULL,
      _DataFileName     VARCHAR(255)    NULL,
      _DataTotalExtents INT             NULL,
      _DataUsedExtents  INT             NULL,
      _DataSpaceUsedPct FLOAT           NULL, 

      _Status           INT             NULL
   )

   CREATE TABLE #T2
   (_Fileid INT, _FileGroup INT, _TotalExtents INT, _UsedExtents INT, _Name VARCHAR(255), _FileName VARCHAR(255))

   -- PHASE I -- Run DBCC SQLPERF(Logspace)
   INSERT INTO #T(_DBName, _LogSizeMB, _LogSpaceUsedPct, _Status)
      EXEC('DBCC SQLPERF(LOGSPACE)')

   -- PHASE II -- 
   -- Create cursor for cycling through databases
   DECLARE MyCursor CURSOR FOR
      SELECT _DBName FROM #T

   -- Execute the cursor
   OPEN MyCursor
   FETCH NEXT FROM MyCursor INTO @db_name 

   -- Do Until All Databases Exhausted...
   WHILE (@@fetch_status <> -1)
   BEGIN
      -- Query To Get Log File and Size Info
      SELECT @buf = "UPDATE #T"
                  + " SET _LogFileName = X.[filename], _LogTotalExtents = X.[size]"            
                  + " FROM #T,"
                  + " (SELECT '" + @db_name + "' AS 'DBName'," 
                  + " fileid, [filename], [size] FROM "
                  + @db_name + ".dbo.sysfiles WHERE (status & 0x40 <> 0)) X"
                  + " WHERE X.DBName = #T._DBName"
      --PRINT @buf
      EXEC(@buf)

      -- "DBCC showfilestats" Query To Get Data File and Size Info
      DELETE FROM #T2
      SELECT @buf = 'INSERT INTO #T2'
                  + '(_Fileid, _FileGroup, _TotalExtents, _UsedExtents, _Name, _FileName)'
                  + " EXEC ('USE " + @db_name + "; DBCC showfilestats')"
      -- PRINT @buf
      EXEC(@buf)

      -- Update the Data Info., and Calculate the Remaining Entities
      UPDATE #T 
      SET _DataFileName     = #T2._FileName, 
          _DataTotalExtents = #T2._TotalExtents, 
          _DataUsedExtents  = #T2._UsedExtents,
          _LogUsedExtents   = CONVERT(INT, (_LogSpaceUsedPct * _LogTotalExtents / 100.0)),
          _DataSpaceUsedPct = 100.0 * CONVERT(FLOAT, #T2._UsedExtents) / CONVERT(FLOAT, #T2._TotalExtents),
          _DataSizeMB       = CONVERT(FLOAT, #T2._TotalExtents) / 16.0
      FROM #T, #T2
      WHERE _DBName = @db_name
             
      -- Go to Next Cursor Row
      FETCH NEXT FROM MyCursor INTO @db_name 
   END

   -- Close Cursor
   CLOSE      MyCursor
   DEALLOCATE MyCursor

   -- Return Results to User
   SELECT 
      _DBName                                                             ,

      _LogFileName                                                        , 
      _LogSizeMB                                                          ,
      _LogTotalExtents                                                    ,
      _LogUsedExtents                                                     ,
      CONVERT(DECIMAL(6, 2), _LogSpaceUsedPct)  AS '_PercentLogSpaceUsed' ,            

      _DataFileName                                                       ,
      _DataSizeMB                                                         ,
      _DataTotalExtents                                                   ,
      _DataUsedExtents                                                    ,
      CONVERT(DECIMAL(6, 2), _DataSpaceUsedPct) AS '_PercentDataSpaceUsed'  
       
   FROM #T 
   ORDER BY _DBName

   -- Clean Up
   DROP TABLE #T
   DROP TABLE #T2
END
GO
/****** Object:  StoredProcedure [dbo].[spEXECsp_RECOMPILE]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec spEXECsp_RECOMPILE
CREATE PROCEDURE [dbo].[spEXECsp_RECOMPILE] AS 
/*
----------------------------------------------------------------------------
-- Object Name: dbo.spEXECsp_RECOMPILE 
-- Project: SQL Server 2005/2008Database Maintenance
-- Purpose: Execute sp_recompile for all tables in a database
-- Detailed Description: Execute sp_recompile for all tables in a database
-- Database: Admin
-- Dependent Objects: None
-- Called By: TBD
-- Upstream Systems: None
-- Downstream Systems: None
-- W. Dale Miller
*/ 

SET NOCOUNT ON 

-- 1a - Declaration statements for all variables
DECLARE @TableName varchar(128)
DECLARE @OwnerName varchar(128)
DECLARE @CMD1 varchar(8000)
DECLARE @TableListLoop int
DECLARE @TableListTable table
(UIDTableList int IDENTITY (1,1),
OwnerName varchar(128),
TableName varchar(128))

-- 2a - Outer loop for populating the database names
INSERT INTO @TableListTable(OwnerName, TableName)
SELECT u.[Name], o.[Name]
FROM dbo.sysobjects o
	INNER JOIN dbo.sysusers u
	ON o.uid = u.uid
	WHERE o.Type = 'U'
	ORDER BY o.[Name]

-- 2b - Determine the highest UIDDatabaseList to loop through the records
SELECT @TableListLoop = MAX(UIDTableList) FROM @TableListTable

-- 2c - While condition for looping through the database records
WHILE @TableListLoop > 0
BEGIN

	-- 2d - Set the @DatabaseName parameter
	SELECT @TableName = TableName,
	@OwnerName = OwnerName
	FROM @TableListTable
	WHERE UIDTableList = @TableListLoop

	-- 3f - String together the final backup command
	SELECT @CMD1 = 'EXEC sp_recompile ' + '[' + @OwnerName + '.' + @TableName + ']' + char(13)

	-- 3g - Execute the final string to complete the backups
	-- SELECT @CMD1
	EXEC (@CMD1)

	-- 2h - Descend through the database list
	SELECT @TableListLoop = @TableListLoop - 1

END

SET NOCOUNT OFF
GO
/****** Object:  UserDefinedFunction [dbo].[spEcmDateConvert]    Script Date: 05/18/2011 16:17:12 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE FUNCTION [dbo].[spEcmDateConvert]
(
	@Date datetime,
	@fORMAT VARCHAR(80)
)
RETURNS NVARCHAR(80)
AS
BEGIN
	DECLARE @nDateFmt INT
	DECLARE @vcReturnDte VARCHAR(80)
	DECLARE @TwelveHourClock INT
	DECLARE @Before INT
	DECLARE @pos INT
	DECLARE @Escape INT 
-- (c) Dale Miller 2010
SELECT @vcReturnDte='error! unrecognised format '+@format
SELECT @nDateFmt=CASE @format
	WHEN 'mmm dd yyyy hh:mm AM/PM' THEN 100
	WHEN 'mm/dd/yy' THEN 1
	WHEN 'mm/dd/yyyy' THEN 101
	WHEN 'yy.mm.dd' THEN 2
	WHEN 'dd/mm/yy' THEN 3
	WHEN 'dd.mm.yy' THEN 4
	WHEN 'dd-mm-yy' THEN 5
	WHEN 'dd Mmm yy' THEN 6
	WHEN 'Mmm dd, yy' THEN 7
	WHEN 'hh:mm:ss' THEN 8
	WHEN 'yyyy.mm.dd' THEN 102
	WHEN 'dd/mm/yyyy' THEN 103
	WHEN 'dd.mm.yyyy' THEN 104
	WHEN 'dd-mm-yyyy' THEN 105
	WHEN 'dd Mmm yyyy' THEN 106
	WHEN 'Mmm dd, yyyy' THEN 107
	WHEN 'Mmm dd yyyy hh:mm:ss:ms AM/PM' THEN 9
	WHEN 'Mmm dd yyyy hh:mi:ss:mmm AM/PM' THEN 9
	WHEN 'Mmm dd yy hh:mm:ss:ms AM/PM' THEN 109
	WHEN 'mm-dd-yy' THEN 10
	WHEN 'mm-dd-yyyy' THEN 110
	WHEN 'yy/mm/dd' THEN 11
	WHEN 'yyyy/mm/dd' THEN 111
	WHEN 'yymmdd' THEN 12
	WHEN 'yyyymmdd' THEN 112
	WHEN 'dd Mmm yyyy hh:mm:ss:Ms' THEN 113
	WHEN 'hh:mm:ss:Ms' THEN 14
	WHEN 'yyyy-mm-dd hh:mm:ss' THEN 120
	WHEN 'yyyy-mm-dd hh:mm:ss.Ms' THEN 121
	WHEN 'yyyy-mm-ddThh:mm:ss.Ms' THEN 126
	WHEN 'dd Mmm yyyy hh:mm:ss:ms AM/PM' THEN 130
	WHEN 'dd/mm/yy hh:mm:ss:ms AM/PM' THEN 131
	WHEN 'RFC822' THEN 2
	WHEN 'dd Mmm yyyy hh:mm' THEN 4
ELSE 1 END

SELECT @vcReturnDte='error! unrecognised format ' +@format+CONVERT(VARCHAR(10),@nDateFmt)
IF @nDateFmt>=0
	SELECT @vcReturnDte=CONVERT(VARCHAR(80),@Date,@nDateFmt)
	--check for favurite and custom formats that can be done quickly
ELSE IF @nDateFmt=-2--then it is RFC822 format
	SELECT @vcReturnDte=LEFT(DATENAME(dw, @Date),3) + ', ' + STUFF(CONVERT(NVARCHAR,@Date,113),21,4,' GMT')
ELSE IF @nDateFmt=-4--then it is european day format with minutes
	SELECT @vcReturnDte=CONVERT(CHAR(17),@Date,113)
ELSE
BEGIN
	SELECT @Before=LEN(@format)
	SELECT @Format=REPLACE(REPLACE(REPLACE( @Format,'AM/PM','#'),'AM','#'),'PM','#')
	SELECT @TwelveHourClock=CASE WHEN @Before >LEN(@format) THEN 109 ELSE 113 END, @vcReturnDte=''
	WHILE (1=1)--forever
	BEGIN
		SELECT @pos=PATINDEX('%[yqmidwhs:#]%',@format+' ')
		IF @pos=0--no more date format strings
		BEGIN
		SELECT @vcReturnDte=@vcReturnDte+@format
		BREAK
	END
	IF @pos>1--some stuff to pass through first
	BEGIN
		SELECT @escape=CHARINDEX ('\',@Format+'\') --is it a literal character that is escaped?
		IF @escape<@pos BEGIN
		SET @vcReturnDte=@vcReturnDte+SUBSTRING(@Format,1,@escape-1) +SUBSTRING(@format,@escape+1,1)
		SET @format=RTRIM(SUBSTRING(@Format,@Escape+2,80))
		CONTINUE
	END
	SET @vcReturnDte=@vcReturnDte+SUBSTRING(@Format,1,@pos-1)
	SET @format=RTRIM(SUBSTRING(@Format,@pos,80))
	END
	
	SELECT @pos=PATINDEX('%[^yqmidwhs:#]%',@format+' ')--get the end
	SELECT @vcReturnDte=@vcReturnDte+--'('+substring(@Format,1,@pos-1)+')'+

	CASE SUBSTRING(@Format,1,@pos-1)
		--Mmmths as 1--12
		WHEN 'M' THEN CONVERT(VARCHAR(2),DATEPART(MONTH,@Date))
		--Mmmths as 01--12
		WHEN 'Mm' THEN CONVERT(CHAR(2),@Date,101)
		--Mmmths as Jan--Dec
		WHEN 'Mmm' THEN CONVERT(CHAR(3),DATENAME(MONTH,@Date))
		--Mmmths as January--December
		WHEN 'Mmmm' THEN DATENAME(MONTH,@Date)
		--Mmmths as the first letter of the Mmmth
		WHEN 'Mmmmm' THEN CONVERT(CHAR(1),DATENAME(MONTH,@Date))
		--Days as 1--31
		WHEN 'D' THEN CONVERT(VARCHAR(2),DATEPART(DAY,@Date))
		--Days as 01--31
		WHEN 'Dd' THEN CONVERT(CHAR(2),@date,103)
		--Days as Sun--Sat
		WHEN 'Ddd' THEN CONVERT(CHAR(3),DATENAME(weekday,@Date))
		--Days as Sunday--Saturday
		WHEN 'Dddd' THEN DATENAME(weekday,@Date)
		--Years as 00--99
		WHEN 'Yy' THEN CONVERT(CHAR(2),@Date,12)
		--Years as 1900--9999
		WHEN 'Yyyy' THEN DATENAME(YEAR,@Date)
		WHEN 'hh:mm:ss' THEN SUBSTRING(CONVERT(CHAR(30),@date,@TwelveHourClock),13,8)
		WHEN 'hh:mm:ss:ms' THEN SUBSTRING(CONVERT(CHAR(30),@date,@TwelveHourClock),13,12)
		WHEN 'h:mm:ss' THEN SUBSTRING(CONVERT(CHAR(30),@date,@TwelveHourClock),13,8)
		--tthe SQL Server BOL syntax, for compatibility
		WHEN 'hh:mi:ss:mmm' THEN SUBSTRING(CONVERT(CHAR(30),@date,@TwelveHourClock),13,12)
		WHEN 'h:mm:ss:ms' THEN SUBSTRING(CONVERT(CHAR(30),@date,@TwelveHourClock),13,12)
		WHEN 'H:m:s' THEN SUBSTRING(REPLACE(':'+SUBSTRING(CONVERT(CHAR(30), @Date,@TwelveHourClock),13,8),':0',':'),2,30)
		WHEN 'H:m:s:ms' THEN SUBSTRING(REPLACE(':'+SUBSTRING(CONVERT(CHAR(30), @Date,@TwelveHourClock),13,12),':0',':'),2,30)
		--Hours as 00--23
		WHEN 'hh' THEN REPLACE(SUBSTRING(CONVERT(CHAR(30), @Date,@TwelveHourClock),13,2),' ','0')
		--Hours as 0--23
		WHEN 'h' THEN LTRIM(SUBSTRING(CONVERT(CHAR(30), @Date,@TwelveHourClock),13,2))
		--Minutes as 00--59
		WHEN 'Mi' THEN DATENAME(minute,@date)
		WHEN 'mm' THEN DATENAME(minute,@date)
		WHEN 'm' THEN CONVERT(VARCHAR(2),DATEPART(minute,@date))
		--Seconds as 0--59
		WHEN 'ss' THEN DATENAME(second,@date)
		--Seconds as 0--59
		WHEN 'S' THEN CONVERT(VARCHAR(2),DATEPART(second,@date))
		--AM/PM
		WHEN 'ms' THEN DATENAME(millisecond,@date)
		WHEN 'mmm' THEN DATENAME(millisecond,@date)
		WHEN 'dy' THEN DATENAME(dy,@date)
		WHEN 'qq' THEN DATENAME(qq,@date)
		WHEN 'ww' THEN DATENAME(ww,@date)
		WHEN '#' THEN REVERSE(SUBSTRING(REVERSE(CONVERT(CHAR(26), @date,109)),1,2))
	ELSE
		SUBSTRING(@Format,1,@pos-1)
	END
	SET @format=RTRIM(SUBSTRING(@Format,@pos,80))
	END
END
RETURN @vcReturnDte
END
GO
/****** Object:  Table [dbo].[Trace]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Trace](
	[EntryDate] [datetime] NOT NULL,
	[LogEntry] [nvarchar](max) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[TestTbl]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[TestTbl](
	[TestCol] [varchar](50) NULL,
	[iCol] [int] IDENTITY(1,1) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  StoredProcedure [dbo].[sp_CalcTableSpace]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_CalcTableSpace] as 
--SQL Server 2005
--Here is another version of this same process.  
--The overall process is the same, but it uses 
--the new tables in SQL Server 2005.  It also 
--uses the Try Catch processing which was discussed 
--in this previous tip, SQL Server 2005 - Try Catch 
--Exception Handling. Both of the examples will 
--produce the same ouput.
BEGIN try 
DECLARE @table_name VARCHAR(500) ; 
DECLARE @schema_name VARCHAR(500) ; 
DECLARE @tab1 TABLE(
        tablename VARCHAR (500) collate database_default
,       schemaname VARCHAR(500) collate database_default
); 
DECLARE  @temp_table TABLE (    
        tablename sysname
,       row_count INT
,       reserved VARCHAR(50) collate database_default
,       data VARCHAR(50) collate database_default
,       index_size VARCHAR(50) collate database_default
,       unused VARCHAR(50) collate database_default 
); 

INSERT INTO @tab1 
SELECT t1.name
,       t2.name 
FROM sys.tables t1 
INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

DECLARE c1 CURSOR FOR 
SELECT t2.name + '.' + t1.name  
FROM sys.tables t1 
INNER JOIN sys.schemas t2 ON ( t1.schema_id = t2.schema_id );   

OPEN c1; 
FETCH NEXT FROM c1 INTO @table_name;
WHILE @@FETCH_STATUS = 0 
BEGIN  
        SET @table_name = REPLACE(@table_name, '[',''); 
        SET @table_name = REPLACE(@table_name, ']',''); 

        -- make sure the object exists before calling sp_spacedused
        IF EXISTS(SELECT OBJECT_ID FROM sys.objects WHERE OBJECT_ID = OBJECT_ID(@table_name))
        BEGIN
                INSERT INTO @temp_table EXEC sp_spaceused @table_name, false ;
        END
        
        FETCH NEXT FROM c1 INTO @table_name; 
END; 
CLOSE c1; 
DEALLOCATE c1; 
SELECT t1.*
,       t2.schemaname 
FROM @temp_table t1 
INNER JOIN @tab1 t2 ON (t1.tablename = t2.tablename )
ORDER BY  schemaname,tablename;
END try 
BEGIN catch 
SELECT -100 AS l1
,       ERROR_NUMBER() AS tablename
,       ERROR_SEVERITY() AS row_count
,       ERROR_STATE() AS reserved
,       ERROR_MESSAGE() AS data
,       1 AS index_size, 1 AS unused, 1 AS schemaname 
END catch
GO
/****** Object:  StoredProcedure [dbo].[sp_EcmUpdateDB]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE  Procedure [dbo].[sp_EcmUpdateDB]
	@pSql nVarChar(max)
AS
Exec sp_executesql @pSql
GO
/****** Object:  Table [dbo].[GlobalSeachResults]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GlobalSeachResults](
	[ContentTitle] [nvarchar](254) NULL,
	[ContentAuthor] [nvarchar](254) NULL,
	[ContentType] [nvarchar](50) NULL,
	[CreateDate] [nvarchar](50) NULL,
	[ContentExt] [nvarchar](50) NULL,
	[ContentGuid] [nvarchar](50) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[FileName] [nvarchar](254) NULL,
	[FileSize] [int] NULL,
	[NbrOfAttachments] [int] NULL,
	[FromEmailAddress] [nvarchar](254) NULL,
	[AllRecipiants] [nvarchar](max) NULL,
	[Weight] [int] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_GlobalSearch] ON [dbo].[GlobalSeachResults] 
(
	[ContentGuid] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GlobalMachine]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GlobalMachine](
	[HashCode] [varchar](40) NOT NULL,
	[GuidID] [uniqueidentifier] NOT NULL,
	[ShortName] [nvarchar](250) NULL,
	[LongName] [nvarchar](2000) NULL,
	[LocatorID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_GFILE] ON [dbo].[GlobalMachine] 
(
	[GuidID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GFILE] ON [dbo].[GlobalMachine] 
(
	[HashCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK02_GFILE] ON [dbo].[GlobalMachine] 
(
	[LocatorID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK03_GFILE] ON [dbo].[GlobalMachine] 
(
	[ShortName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GlobalLocation]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GlobalLocation](
	[HashCode] [varchar](40) NOT NULL,
	[GuidID] [uniqueidentifier] NOT NULL,
	[ShortName] [nvarchar](250) NULL,
	[LongName] [nvarchar](2000) NULL,
	[LocatorID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_GFILE] ON [dbo].[GlobalLocation] 
(
	[GuidID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GFILE] ON [dbo].[GlobalLocation] 
(
	[HashCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK03_GFILE] ON [dbo].[GlobalLocation] 
(
	[ShortName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GlobalFile]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GlobalFile](
	[HashCode] [varchar](40) NOT NULL,
	[GuidID] [uniqueidentifier] NOT NULL,
	[ShortName] [nvarchar](250) NULL,
	[LongName] [nvarchar](2000) NULL,
	[LocatorID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_GFILE] ON [dbo].[GlobalFile] 
(
	[GuidID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GFILE] ON [dbo].[GlobalFile] 
(
	[HashCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK02_GFILE] ON [dbo].[GlobalFile] 
(
	[LocatorID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK03_GFILE] ON [dbo].[GlobalFile] 
(
	[ShortName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GlobalEmail]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GlobalEmail](
	[HashCode] [varchar](40) NOT NULL,
	[GuidID] [uniqueidentifier] NOT NULL,
	[ShortName] [nvarchar](250) NULL,
	[LongName] [nvarchar](2000) NULL,
	[LocatorID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[GlobalDirectory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[GlobalDirectory](
	[HashCode] [varchar](40) NOT NULL,
	[GuidID] [uniqueidentifier] NOT NULL,
	[ShortName] [nvarchar](250) NULL,
	[LongName] [nvarchar](2000) NULL,
	[LocatorID] [int] IDENTITY(1,1) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_GFILE] ON [dbo].[GlobalDirectory] 
(
	[GuidID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_GFILE] ON [dbo].[GlobalDirectory] 
(
	[HashCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK02_GFILE] ON [dbo].[GlobalDirectory] 
(
	[LocatorID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PK03_GFILE] ON [dbo].[GlobalDirectory] 
(
	[ShortName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[GlobalAsso]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[GlobalAsso](
	[LocationID] [uniqueidentifier] NOT NULL,
	[MachineID] [uniqueidentifier] NOT NULL,
	[DirID] [uniqueidentifier] NOT NULL,
	[FileID] [uniqueidentifier] NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[GetAllTableSizes]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GetAllTableSizes]
AS
/*
    Obtains spaced used data for ALL user tables in the database
*/
DECLARE @TableName VARCHAR(100)    --For storing values in the cursor

--Cursor to get the name of all user tables from the sysobjects listing
DECLARE tableCursor CURSOR
FOR 
select [name]
from dbo.sysobjects 
where  OBJECTPROPERTY(id, N'IsUserTable') = 1
FOR READ ONLY

--A procedure level temp table to store the results
CREATE TABLE #TempTable
(
    tableName varchar(100),
    numberofRows varchar(100),
    reservedSize varchar(50),
    dataSize varchar(50),
    indexSize varchar(50),
    unusedSize varchar(50)
)

--Open the cursor
OPEN tableCursor

--Get the first table name from the cursor
FETCH NEXT FROM tableCursor INTO @TableName

--Loop until the cursor was not able to fetch
WHILE (@@Fetch_Status >= 0)
BEGIN
    --Dump the results of the sp_spaceused query to the temp table
    INSERT  #TempTable
        EXEC sp_spaceused @TableName

    --Get the next table name
    FETCH NEXT FROM tableCursor INTO @TableName
END

--Get rid of the cursor
CLOSE tableCursor
DEALLOCATE tableCursor

--Select all records so we can use the reults
SELECT * 
FROM #TempTable

--Final cleanup!
DROP TABLE #TempTable
GO
/****** Object:  Table [dbo].[PgmTrace]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[PgmTrace](
	[StmtID] [nvarchar](50) NULL,
	[PgmName] [nvarchar](254) NULL,
	[Stmt] [nvarchar](max) NOT NULL,
	[RowID] [int] IDENTITY(1,1) NOT NULL,
	[CreateDate] [datetime] NULL,
	[ConnectiveGuid] [nvarchar](50) NULL,
	[UserID] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_PgmTrace] ON [dbo].[PgmTrace] 
(
	[ConnectiveGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ProcessFileAs]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ProcessFileAs](
	[ExtCode] [nvarchar](50) NOT NULL,
	[ProcessExtCode] [nvarchar](50) NOT NULL,
	[Applied] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK__ProcessFileAs__5887175A] PRIMARY KEY CLUSTERED 
(
	[ExtCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_00_ProcessFileAs] ON [dbo].[ProcessFileAs] 
(
	[ExtCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DeleteFrom]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DeleteFrom](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](25) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK40] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DirArchLib]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DirArchLib](
	[DirOwnerUserID] [nvarchar](50) NOT NULL,
	[LibOwnerUserID] [nvarchar](50) NOT NULL,
	[FQN] [nvarchar](254) NOT NULL,
	[LibraryName] [nvarchar](80) NOT NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_DirArchLib] ON [dbo].[DirArchLib] 
(
	[DirOwnerUserID] ASC,
	[LibOwnerUserID] ASC,
	[FQN] ASC,
	[LibraryName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DuplicateContent]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DuplicateContent](
	[HashID] [nvarchar](50) NULL,
	[ContentUniqueName] [varchar](900) NULL,
	[Occurances] [int] NULL,
	[Guids] [varchar](max) NULL,
	[ContentType] [char](1) NULL,
 CONSTRAINT [UK_Dups] UNIQUE NONCLUSTERED 
(
	[ContentUniqueName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [PKI_HashID] ON [dbo].[DuplicateContent] 
(
	[HashID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DirProfiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DirProfiles](
	[ProfileName] [nvarchar](50) NOT NULL,
	[Parms] [nvarchar](max) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DirectoryTemp]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DirectoryTemp](
	[DirFQN] [nvarchar](300) NOT NULL,
	[CurrUserGuidId] [nvarchar](50) NULL,
	[MachineID] [nvarchar](50) NULL,
	[SkipDir] [char](1) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_DirectoryTemp] ON [dbo].[DirectoryTemp] 
(
	[DirFQN] ASC,
	[CurrUserGuidId] ASC,
	[MachineID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DirectoryGuids]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DirectoryGuids](
	[DirFQN] [varchar](800) NOT NULL,
	[DirGuid] [nchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UK_DirGuid] ON [dbo].[DirectoryGuids] 
(
	[DirFQN] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DirectoryLongName]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DirectoryLongName](
	[DIRHASH] [varchar](50) NOT NULL,
	[DirLongName] [nvarchar](max) NOT NULL,
	[DirLongNameID] [varchar](50) NOT NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [PI01_DirLongName] ON [dbo].[DirectoryLongName] 
(
	[DIRHASH] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_DirLongName] ON [dbo].[DirectoryLongName] 
(
	[DirLongNameID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[DirectoryListenerFiles]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[DirectoryListenerFiles](
	[DirGuid] [nvarchar](50) NOT NULL,
	[SourceFile] [varchar](720) NOT NULL,
	[Archived] [bit] NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[MachineName] [varchar](80) NOT NULL,
	[NameHash] [decimal](15, 8) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[DirectoryListener]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[DirectoryListener](
	[UserID] [nvarchar](50) NOT NULL,
	[AdminDisabled] [bit] NULL,
	[ListenerLoaded] [bit] NULL,
	[ListenerActive] [bit] NULL,
	[ListenerPaused] [bit] NULL,
	[ListenDirectory] [bit] NULL,
	[ListenSubDirectory] [bit] NULL,
	[DirGuid] [uniqueidentifier] NOT NULL,
	[MachineName] [nvarchar](80) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_DirListener] ON [dbo].[DirectoryListener] 
(
	[DirGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[sp_compare]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[sp_compare] (
        @srcdb varchar(92), @destdb varchar(92)
)
AS
/********************************************************************************/
/*	Created BY :	W. Dale Miller				*/
/*	Created ON :	June 6, 2009     			*/
/*	Description:	This stored PROCEDURE generates a simple report that	*/
/*			compares 2 databases ON same server or different servers*/
/*                      1) set concat_null_yields_null off                      */
/*                      2) Column names for identifiers should be made as 128   */
/*                      characters in length                                    */
/********************************************************************************/

IF OBJECT_ID( 'tempdb..objects' ) IS NOT NULL
        DROP TABLE tempdb..objects
IF OBJECT_ID( 'tempdb..columns' ) IS NOT NULL
        DROP TABLE tempdb..columns
IF OBJECT_ID( 'tempdb..changed_tables_cols' ) IS NOT NULL
        DROP TABLE tempdb..changed_tables_cols
DECLARE @db1 varchar(61), @db2 varchar(61),
	@sp1 varchar(92), @sp2 varchar(92),
	@server1 varchar(92), @server2 varchar(92),
	@db1command varchar(255), @db2command varchar(255),
	@objselect varchar(255), @table varchar(32), @sp varchar(62), @colselectsp varchar(62),
	@mesg varchar(255), @count int
SET NOCOUNT ON
-- SQL70 setting to be enabled for proper working of this SP:
-- SET CONCAT_NULL_YIELDS_NULL OFF
SELECT @db1 = CASE WHEN @srcdb LIKE '%.%' 
		THEN reverse(substring(reverse(@srcdb), 1, charindex('.', reverse(@srcdb)) - 1)) 
		ELSE @srcdb
              END ,
	@db2 = CASE WHEN @destdb LIKE '%.%' 
		THEN reverse(substring(reverse(@destdb), 1, charindex('.', reverse(@destdb)) - 1)) 
		ELSE @destdb
	       END ,
	@server1 = CASE WHEN @srcdb LIKE '%.%'
			THEN substring(@srcdb, 1, charindex('.', @srcdb))
			ELSE NULL
	           END ,
	@server2 = CASE WHEN @destdb LIKE '%.%'
			THEN substring(@destdb, 1, charindex('.', @destdb))
			ELSE NULL
	           END,
	@objselect = 'select name, object_type = CASE type WHEN ''U'' THEN ''table'' ' + 
			'when ''P'' THEN ''stored procedure'' when ''V'' then ''view'' END ' +
			'from sysobjects WHERE type IN (''U'', ''V'', ''P'')',
	@sp = 'master..sp_sqlexec',
	@colselectsp = 'exec sp_columns'
SELECT	@db1command = stuff(@objselect, charindex('sysobjects', @objselect), 
				datalength('sysobjects'), @db1 + '..sysobjects'),
	@db2command = stuff(@objselect, charindex('sysobjects', @objselect), 
			datalength('sysobjects'), @db2 + '..sysobjects'),
	@sp1 =	@server1 + @sp, @sp2 = @server2 + @sp
SELECT	@db1command = stuff(@db1command, charindex('name', @db1command),
			datalength('name') , '''' + @srcdb + ''', name'),
	@db2command = stuff(@db2command, charindex('name', @db2command),
				datalength('name') , '''' + @destdb + ''', name')
-- SQL70:
-- CREATE TABLE #objects (db_name varchar(128), name varchar(128), object_type varchar(30))
CREATE TABLE #objects (db_name varchar(61), name varchar(30), object_type varchar(30))
INSERT #objects EXEC @sp1 @db1command
INSERT #objects EXEC @sp2 @db2command
DELETE #objects WHERE name IN ('objects', 'columns', 'changed_tables_cols', 'upgrade_status')
SELECT @mesg = '1. Tables present ONLY IN database: ' + @srcdb
PRINT @mesg
SELECT name FROM #objects
 WHERE object_type = 'table' AND db_name = @srcdb and 
	name NOT IN (select name FROM #objects WHERE object_type = 'table' AND db_name = @destdb)
 ORDER BY name
PRINT ''
SELECT @mesg = '2. Tables present ONLY IN database: ' + @destdb
PRINT @mesg
SELECT name FROM #objects
 WHERE object_type = 'table' AND db_name = @destdb and 
	name NOT IN (select name FROM #objects WHERE object_type = 'table' AND db_name = @srcdb)
 ORDER BY name
PRINT ''
SELECT @mesg = 'Upgrade status table:'
PRINT @mesg
PRINT 'create TABLE upgrade_status'
PRINT '('
PRINT 'name varchar(30) NOT null,'
PRINT 'status varchar(10) NOT NULL
	CHECK (status IN (''INCOMPLETE'', ''COMPLETE'')) DEFAULT ''INCOMPLETE'''
PRINT ')'
PRINT 'go'
PRINT @mesg
SELECT @mesg = 'insert upgrade_status select name, ''INCOMPLETE'' FROM sysobjects ' +
		'where type = ''U'' AND name NOT IN (''upgrade_status'')'
PRINT @mesg
PRINT ''
SELECT @mesg = 'Drop statements FOR the tables IN the database: ' + @destdb
PRINT @mesg
DECLARE drop_tables CURSOR FOR
SELECT name FROM #objects
 WHERE object_type = 'table' AND db_name = @destdb and 
	name NOT IN (select name FROM #objects WHERE object_type = 'table' AND db_name = @srcdb)
 ORDER BY name
OPEN drop_tables
WHILE( 'FETCH IS OK' = 'FETCH IS OK' )
BEGIN
    	FETCH NEXT FROM drop_tables INTO @table
    	IF @@FETCH_STATUS < 0 BREAK
    	SELECT @mesg = 'print ''Dropping TABLE ' + @table + '..'''
    	PRINT @mesg
    	PRINT 'begin tran'
    	SELECT @mesg = 'if EXISTS (select name FROM upgrade_status WHERE name = ''' + @table +
    			''' AND status = ''INCOMPLETE'')'
    	PRINT @mesg
    	PRINT 'begin'
    	SELECT @mesg = ' DROP TABLE ' + @table
    	PRINT @mesg
    	PRINT ' IF @@error <> 0'
    	PRINT ' begin'
    	PRINT ' IF @@trancount > 0'
    	PRINT 'rollback tran'
    	PRINT ' end'
    	PRINT ' else'
    	PRINT ' begin'
    	SELECT @mesg = ' UPDATE upgrade_status SET status = ''COMPLETE'' WHERE name = ''' +
    			@table + ''''
    	PRINT @mesg
    	PRINT ' COMMIT tran'
    	PRINT ' end'
    	PRINT 'end'
    	PRINT ''
END
CLOSE drop_tables
DEALLOCATE drop_tables
PRINT ''
-- goto END_LABEL
SELECT @mesg = '3. Analyzing tables...'
PRINT @mesg
PRINT ''
-- SQL70:
/*
CREATE TABLE #columns (
        TABLE_QUALIFIER	varchar(128) NULL, TABLE_OWNER varchar(128),
        TABLE_NAME varchar(128), COLUMN_NAME varchar(128),
        DATA_TYPE smallint NULL, TYPE_NAME varchar(128), PREC int,
        LENGTH int, SCALE smallint NULL, RADIX smallint NULL,
        NULLABLE smallint, REMARKS varchar(254) NULL,
        COLUMN_DEF varchar(8000) NULL, SQL_DATA_TYPE smallint,
        SQL_DATETIME_SUB smallint NULL, CHAR_OCTET_LENGTH int NULL,
        ORDINAL_POSITION int, IS_NULLABLE varchar(254), SS_DATA_TYPE tinyint
)
*/
CREATE TABLE #columns (
        TABLE_QUALIFIER	varchar(32) NULL, TABLE_OWNER varchar(32),
        TABLE_NAME varchar(32), COLUMN_NAME varchar(32),
        DATA_TYPE smallint  NULL, TYPE_NAME varchar(13), PREC int,
        LENGTH int, SCALE smallint NULL, RADIX smallint NULL,
        NULLABLE smallint, REMARKS varchar(254)  NULL, 
        COLUMN_DEF varchar(254) NULL, SQL_DATA_TYPE smallint,
        SQL_DATETIME_SUB smallint NULL, CHAR_OCTET_LENGTH int NULL,
        ORDINAL_POSITION int, IS_NULLABLE varchar(254), SS_DATA_TYPE tinyint
)
DECLARE common_tables scroll CURSOR FOR
	SELECT name FROM #objects WHERE object_type = 'table'
	GROUP BY name HAVING count(name) = 2
OPEN common_tables
WHILE( 'FETCH IS OK' = 'FETCH IS OK' )
BEGIN
    	FETCH NEXT FROM common_tables INTO @table
        IF @@FETCH_STATUS < 0 BREAK
    	SELECT	@db1command = 'use' + space(1) + @db1 + space(1) + @colselectsp + space(1) + @table,
    		@db2command = 'use' + space(1) + @db2 + space(1) + @colselectsp + space(1) + @table
    	INSERT #columns EXEC @sp1 @db1command
    	INSERT #columns EXEC @sp2 @db2command
END
CLOSE common_tables
DEALLOCATE common_tables
SELECT space(128) AS TABLE_QUALIFIER, TABLE_NAME, COLUMN_NAME, space(128) AS TYPE_NAME 
  INTO #changed_tables_cols
  FROM #columns
 GROUP BY TABLE_NAME, COLUMN_NAME
HAVING COUNT(*) = 1

UPDATE c1
 SET c1.TABLE_QUALIFIER = c2.TABLE_QUALIFIER
FROM #changed_tables_cols c1, #columns c2
WHERE c1.TABLE_NAME = c2.TABLE_NAME AND c1.COLUMN_NAME = c2.COLUMN_NAME

SELECT @count = 1
DECLARE changed_tables CURSOR FOR
	SELECT DISTINCT TABLE_NAME FROM #changed_tables_cols
OPEN changed_tables
WHILE('FETCH IS OK' = 'FETCH IS OK')
BEGIN
    	FETCH NEXT FROM changed_tables INTO @table
    	IF @@fetch_status < 0 BREAK

    	SELECT @count = @count + 1,
    		@mesg = ltrim(str(@count)) + ') Table: ' + @table
    	PRINT @mesg
    	SELECT @mesg = 'Database: ' + @db1
    	IF EXISTS(SELECT COLUMN_NAME FROM #changed_tables_cols
    		   WHERE TABLE_NAME = @table AND TABLE_QUALIFIER = @db1)
    	BEGIN
    		PRINT @mesg
    		SELECT c.COLUMN_NAME, c.TYPE_NAME, c.LENGTH, c.IS_NULLABLE, c.COLUMN_DEF
    		  FROM #columns c, #changed_tables_cols c1
    		 WHERE c1.TABLE_NAME = @table AND c1.TABLE_QUALIFIER = @db1
    			AND c1.TABLE_NAME = c.TABLE_NAME
    			AND c1.TABLE_QUALIFIER = c.TABLE_QUALIFIER
    			AND c1.COLUMN_NAME = c.COLUMN_NAME
    		PRINT ''
    	END
    	SELECT @mesg = 'Database: ' + @db2
    	IF EXISTS(SELECT COLUMN_NAME FROM #changed_tables_cols
    		   WHERE TABLE_NAME = @table AND TABLE_QUALIFIER = @db2)
    	BEGIN
    		PRINT @mesg
    		SELECT c.COLUMN_NAME, c.TYPE_NAME, c.LENGTH, c.IS_NULLABLE, c.COLUMN_DEF
    		FROM #columns c, #changed_tables_cols c1
    		WHERE c1.TABLE_NAME = @table AND c1.TABLE_QUALIFIER = @db2
    			AND c1.TABLE_NAME = c.TABLE_NAME
    			AND c1.TABLE_QUALIFIER = c.TABLE_QUALIFIER
    			AND c1.COLUMN_NAME = c.COLUMN_NAME
    		PRINT ''
    	END
    	FETCH NEXT FROM changed_tables INTO @table
END
CLOSE changed_tables
DEALLOCATE changed_tables
/*
-- get the other datatype changes.
INSERT #changed_tables_cols
SELECT space(32) AS TABLE_QUALIFIER, TABLE_NAME, COLUMN_NAME , 
TYPE_NAME
 FROM #columns GROUP BY TABLE_NAME, COLUMN_NAME, TYPE_NAME HAVING 
COUNT(*) = 1
UPDATE c1
 SET c1.TABLE_QUALIFIER = c2.TABLE_QUALIFIER
FROM #changed_tables_cols c1, #columns c2
WHERE c1.TABLE_NAME = c2.TABLE_NAME AND c1.COLUMN_NAME = c2.COLUMN_NAME 
and
	c1.TYPE_NAME = c2.TYPE_NAME
DELETE #changed_tables_cols WHERE TYPE_NAME IS NOT NULL AND COLUMN_NAME
IN ('mod_date', 'mod_user')
*/
SELECT @mesg = '4. Stored procedures present ONLY IN database: ' + @srcdb
PRINT @mesg
SELECT name FROM #objects
 WHERE object_type = 'stored procedure' AND db_name = @srcdb and 
	name NOT IN (select name FROM #objects
			WHERE object_type = 'stored procedure' AND db_name = @destdb)
PRINT ''
SELECT @mesg = '5. Stored procedures present ONLY IN database: ' + @destdb
PRINT @mesg
SELECT name FROM #objects
 WHERE object_type = 'stored procedure' AND db_name = @destdb and 
	name NOT IN (select name FROM #objects
			WHERE object_type = 'stored procedure' AND db_name = @destdb)
PRINT ''
SELECT * INTO tempdb..objects FROM #objects
SELECT * INTO tempdb..columns FROM #columns
SELECT * INTO tempdb..changed_tables_cols FROM #changed_tables_cols
END_LABEL:
PRINT 'Comparison of the databases completed.'
GO
/****** Object:  Table [dbo].[ArchiveHistContentType]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ArchiveHistContentType](
	[ArchiveID] [nvarchar](50) NOT NULL,
	[Directory] [nvarchar](254) NOT NULL,
	[FileType] [nvarchar](50) NOT NULL,
	[NbrFilesArchived] [int] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK111] PRIMARY KEY NONCLUSTERED 
(
	[ArchiveID] ASC,
	[Directory] ASC,
	[FileType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[License]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[License](
	[Agreement] [nvarchar](2000) NOT NULL,
	[VersionNbr] [int] NOT NULL,
	[ActivationDate] [datetime] NOT NULL,
	[InstallDate] [datetime] NOT NULL,
	[CustomerID] [nvarchar](50) NOT NULL,
	[CustomerName] [nvarchar](254) NOT NULL,
	[LicenseID] [int] IDENTITY(1,1) NOT NULL,
	[XrtNxr1] [nvarchar](50) NULL,
	[ServerIdentifier] [varchar](100) NULL,
	[SqlInstanceIdentifier] [varchar](100) NULL,
	[MachineID] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
	[ServerName] [nvarchar](254) NULL,
	[SqlInstanceName] [nvarchar](254) NULL,
	[SqlServerInstanceName] [nvarchar](254) NULL,
	[SqlServerMachineName] [nvarchar](254) NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE NONCLUSTERED INDEX [PI01_CustID_License] ON [dbo].[License] 
(
	[CustomerID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_License] ON [dbo].[License] 
(
	[LicenseID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [UK_License] ON [dbo].[License] 
(
	[CustomerID] ASC,
	[MachineID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[Inventory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[Inventory](
	[DirFqn] [varchar](720) NULL,
	[FQN] [varchar](100) NULL,
	[FileSize] [int] NULL,
	[ExistInRepo] [bit] NULL,
	[UserLogin] [nvarchar](50) NULL,
	[DirHash] [numeric](18, 5) NULL,
	[FileHash] [numeric](18, 5) NULL,
	[CombinedHash] [varchar](50) NULL,
	[MachineName] [varbinary](80) NULL,
	[Verified] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [PK_Inventory] ON [dbo].[Inventory] 
(
	[DirFqn] ASC,
	[FQN] ASC,
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_Inventory] ON [dbo].[Inventory] 
(
	[UserLogin] ASC,
	[DirHash] ASC,
	[FileHash] ASC,
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_Inventory] ON [dbo].[Inventory] 
(
	[CombinedHash] ASC,
	[MachineName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[OwnerHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[OwnerHistory](
	[PreviousOwnerUserID] [nvarchar](50) NULL,
	[RowId] [int] IDENTITY(1,1) NOT NULL,
	[CurrentOwnerUserID] [nvarchar](50) NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK76] PRIMARY KEY NONCLUSTERED 
(
	[RowId] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RestoreQueueHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[RestoreQueueHistory](
	[ContentGuid] [nvarchar](50) NOT NULL,
	[UseriD] [nvarchar](50) NOT NULL,
	[MachineID] [nvarchar](50) NOT NULL,
	[FQN] [nvarchar](2500) NULL,
	[FileSize] [int] NULL,
	[ContentType] [varchar](15) NOT NULL,
	[Preview] [bit] NULL,
	[Restore] [bit] NULL,
	[ProcessingCompleted] [bit] NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[ProcessedDate] [datetime] NULL,
	[StartDownloadTime] [datetime] NULL,
	[EndDownloadTime] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[RestoreQueue]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING OFF
GO
CREATE TABLE [dbo].[RestoreQueue](
	[ContentGuid] [nvarchar](50) NOT NULL,
	[UseriD] [nvarchar](50) NOT NULL,
	[MachineID] [nvarchar](50) NOT NULL,
	[FQN] [nvarchar](2500) NULL,
	[FileSize] [int] NULL,
	[ContentType] [varchar](15) NOT NULL,
	[Preview] [bit] NULL,
	[Restore] [bit] NULL,
	[ProcessingCompleted] [bit] NOT NULL,
	[EntryDate] [datetime] NOT NULL,
	[ProcessedDate] [datetime] NULL,
	[StartDownloadTime] [datetime] NULL,
	[EndDownloadTime] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UI_RestoreQueue] ON [dbo].[RestoreQueue] 
(
	[ContentGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PI01_RestoreQueue] ON [dbo].[RestoreQueue] 
(
	[ContentGuid] ASC,
	[UseriD] ASC,
	[MachineID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[RestorationHistory]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[RestorationHistory](
	[SourceType] [nvarchar](50) NOT NULL,
	[SourceGuid] [nvarchar](50) NOT NULL,
	[OriginalCrc] [nvarchar](50) NOT NULL,
	[RestoredCrc] [nvarchar](50) NOT NULL,
	[RestorationDate] [nchar](10) NOT NULL,
	[RestorationID] [int] IDENTITY(1,1) NOT NULL,
	[RestoredBy] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI01_RestorationHistoryGuid] ON [dbo].[RestorationHistory] 
(
	[SourceGuid] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI02_RestorationHistory] ON [dbo].[RestorationHistory] 
(
	[RestoredBy] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI03_RestorationHistory] ON [dbo].[RestorationHistory] 
(
	[OriginalCrc] ASC,
	[RestoredCrc] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI04_RestorationHistory] ON [dbo].[RestorationHistory] 
(
	[RestoredBy] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ResponseUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: ResponseUpdProc 
 */

CREATE PROCEDURE [dbo].[ResponseUpdProc]
(
    @Response         nvarchar(max)            = NULL,
    @ResponseDate     datetime,
    @StatusCode       nvarchar(50),
    @ResponseID       int,
    @LastUpdate       datetime                 = NULL,
    @CreateDate       datetime                 = NULL,
    @EMail            nvarchar(100),
    @IssueTitle       nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    UPDATE Response
       SET Response          = @Response,
           ResponseDate      = @ResponseDate,
           StatusCode        = @StatusCode,
           LastUpdate        = @LastUpdate,
           CreateDate        = @CreateDate
     WHERE ResponseID = @ResponseID
       AND EMail      = @EMail
       AND IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ResponseUpdProc: Cannot update  in Response '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ResponseSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: ResponseSelProc 
 */

CREATE PROCEDURE [dbo].[ResponseSelProc]
(
    @ResponseID       int,
    @EMail            nvarchar(100),
    @IssueTitle       nvarchar(400))
AS
BEGIN
    SELECT Response,
           ResponseDate,
           StatusCode,
           ResponseID,
           LastUpdate,
           CreateDate,
           EMail,
           IssueTitle
      FROM Response
     WHERE ResponseID = @ResponseID
       AND EMail      = @EMail
       AND IssueTitle = @IssueTitle

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ResponseInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: ResponseInsProc 
 */

CREATE PROCEDURE [dbo].[ResponseInsProc]
(
    @Response         nvarchar(max)            = NULL,
    @ResponseDate     datetime,
    @StatusCode       nvarchar(50),
    @LastUpdate       datetime                 = NULL,
    @CreateDate       datetime                 = NULL,
    @EMail            nvarchar(100),
    @IssueTitle       nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Response(Response,
                         ResponseDate,
                         StatusCode,
                         LastUpdate,
                         CreateDate,
                         EMail,
                         IssueTitle)
    VALUES(@Response,
           @ResponseDate,
           @StatusCode,
           @LastUpdate,
           @CreateDate,
           @EMail,
           @IssueTitle)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ResponseInsProc: Cannot insert because primary key value not found in Response '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ResponseDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: ResponseDelProc 
 */

CREATE PROCEDURE [dbo].[ResponseDelProc]
(
    @ResponseID       int,
    @EMail            nvarchar(100),
    @IssueTitle       nvarchar(400))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Response
     WHERE ResponseID = @ResponseID
       AND EMail      = @EMail
       AND IssueTitle = @IssueTitle

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ResponseDelProc: Cannot delete because foreign keys still exist in Response '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[Repository]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Repository](
	[ConnectionName] [nvarchar](50) NOT NULL,
	[ConnectionData] [nvarchar](2000) NULL,
	[ConnectionDataThesaurus] [nvarchar](2000) NULL
) ON [PRIMARY]
GO
CREATE UNIQUE CLUSTERED INDEX [PK_Repository] ON [dbo].[Repository] 
(
	[ConnectionName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[reports]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[reports](
	[rptDisplayname] [nvarchar](80) NOT NULL,
	[rptDesc] [nvarchar](1000) NOT NULL,
	[rptFqn] [nvarchar](254) NOT NULL,
	[rptCreatedForCustomerID] [nvarchar](50) NULL,
	[rptFqnDate] [datetime] NULL,
	[rptExists] [bit] NULL,
	[CreateDate] [datetime] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKreports] PRIMARY KEY CLUSTERED 
(
	[rptFqn] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[ContactsArchive]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ContactsArchive](
	[Email1Address] [nvarchar](80) NOT NULL,
	[FullName] [nvarchar](80) NOT NULL,
	[UserID] [nvarchar](50) NOT NULL,
	[Account] [nvarchar](4000) NULL,
	[Anniversary] [nvarchar](4000) NULL,
	[Application] [nvarchar](4000) NULL,
	[AssistantName] [nvarchar](4000) NULL,
	[AssistantTelephoneNumber] [nvarchar](4000) NULL,
	[BillingInformation] [nvarchar](4000) NULL,
	[Birthday] [nvarchar](4000) NULL,
	[Business2TelephoneNumber] [nvarchar](4000) NULL,
	[BusinessAddress] [nvarchar](4000) NULL,
	[BusinessAddressCity] [nvarchar](4000) NULL,
	[BusinessAddressCountry] [nvarchar](4000) NULL,
	[BusinessAddressPostalCode] [nvarchar](4000) NULL,
	[BusinessAddressPostOfficeBox] [nvarchar](4000) NULL,
	[BusinessAddressState] [nvarchar](4000) NULL,
	[BusinessAddressStreet] [nvarchar](4000) NULL,
	[BusinessCardType] [nvarchar](4000) NULL,
	[BusinessFaxNumber] [nvarchar](4000) NULL,
	[BusinessHomePage] [nvarchar](4000) NULL,
	[BusinessTelephoneNumber] [nvarchar](4000) NULL,
	[CallbackTelephoneNumber] [nvarchar](4000) NULL,
	[CarTelephoneNumber] [nvarchar](4000) NULL,
	[Categories] [nvarchar](4000) NULL,
	[Children] [nvarchar](4000) NULL,
	[xClass] [nvarchar](4000) NULL,
	[Companies] [nvarchar](4000) NULL,
	[CompanyName] [nvarchar](4000) NULL,
	[ComputerNetworkName] [nvarchar](4000) NULL,
	[Conflicts] [nvarchar](4000) NULL,
	[ConversationTopic] [nvarchar](4000) NULL,
	[CreationTime] [nvarchar](4000) NULL,
	[CustomerID] [nvarchar](4000) NULL,
	[Department] [nvarchar](4000) NULL,
	[Email1AddressType] [nvarchar](4000) NULL,
	[Email1DisplayName] [nvarchar](4000) NULL,
	[Email1EntryID] [nvarchar](4000) NULL,
	[Email2Address] [nvarchar](4000) NULL,
	[Email2AddressType] [nvarchar](4000) NULL,
	[Email2DisplayName] [nvarchar](4000) NULL,
	[Email2EntryID] [nvarchar](4000) NULL,
	[Email3Address] [nvarchar](4000) NULL,
	[Email3AddressType] [nvarchar](4000) NULL,
	[Email3DisplayName] [nvarchar](4000) NULL,
	[Email3EntryID] [nvarchar](4000) NULL,
	[FileAs] [nvarchar](4000) NULL,
	[FirstName] [nvarchar](4000) NULL,
	[FTPSite] [nvarchar](4000) NULL,
	[Gender] [nvarchar](4000) NULL,
	[GovernmentIDNumber] [nvarchar](4000) NULL,
	[Hobby] [nvarchar](4000) NULL,
	[Home2TelephoneNumber] [nvarchar](4000) NULL,
	[HomeAddress] [nvarchar](4000) NULL,
	[HomeAddressCountry] [nvarchar](4000) NULL,
	[HomeAddressPostalCode] [nvarchar](4000) NULL,
	[HomeAddressPostOfficeBox] [nvarchar](4000) NULL,
	[HomeAddressState] [nvarchar](4000) NULL,
	[HomeAddressStreet] [nvarchar](4000) NULL,
	[HomeFaxNumber] [nvarchar](4000) NULL,
	[HomeTelephoneNumber] [nvarchar](4000) NULL,
	[IMAddress] [nvarchar](4000) NULL,
	[Importance] [nvarchar](4000) NULL,
	[Initials] [nvarchar](4000) NULL,
	[InternetFreeBusyAddress] [nvarchar](4000) NULL,
	[JobTitle] [nvarchar](4000) NULL,
	[Journal] [nvarchar](4000) NULL,
	[Language] [nvarchar](4000) NULL,
	[LastModificationTime] [nvarchar](4000) NULL,
	[LastName] [nvarchar](4000) NULL,
	[LastNameAndFirstName] [nvarchar](4000) NULL,
	[MailingAddress] [nvarchar](4000) NULL,
	[MailingAddressCity] [nvarchar](4000) NULL,
	[MailingAddressCountry] [nvarchar](4000) NULL,
	[MailingAddressPostalCode] [nvarchar](4000) NULL,
	[MailingAddressPostOfficeBox] [nvarchar](4000) NULL,
	[MailingAddressState] [nvarchar](4000) NULL,
	[MailingAddressStreet] [nvarchar](4000) NULL,
	[ManagerName] [nvarchar](4000) NULL,
	[MiddleName] [nvarchar](4000) NULL,
	[Mileage] [nvarchar](4000) NULL,
	[MobileTelephoneNumber] [nvarchar](4000) NULL,
	[NetMeetingAlias] [nvarchar](4000) NULL,
	[NetMeetingServer] [nvarchar](4000) NULL,
	[NickName] [nvarchar](4000) NULL,
	[Title] [nvarchar](4000) NULL,
	[Body] [nvarchar](4000) NULL,
	[OfficeLocation] [nvarchar](4000) NULL,
	[Subject] [nvarchar](4000) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK45] PRIMARY KEY NONCLUSTERED 
(
	[Email1Address] ASC,
	[FullName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[CategoryUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CategoryUpdProc 
 */

CREATE PROCEDURE [dbo].[CategoryUpdProc]
(
    @CategoryName     nvarchar(50),
    @Description      nvarchar(1000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Category
       SET Description       = @Description
     WHERE CategoryName = @CategoryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'CategoryUpdProc: Cannot update  in Category '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CategorySelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CategorySelProc 
 */

CREATE PROCEDURE [dbo].[CategorySelProc]
(
    @CategoryName     nvarchar(50))
AS
BEGIN
    SELECT CategoryName,
           Description
      FROM Category
     WHERE CategoryName = @CategoryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[CategoryInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CategoryInsProc 
 */

CREATE PROCEDURE [dbo].[CategoryInsProc]
(
    @CategoryName     nvarchar(50),
    @Description      nvarchar(1000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Category(CategoryName,
                         Description)
    VALUES(@CategoryName,
           @Description)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'CategoryInsProc: Cannot insert because primary key value not found in Category '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[CategoryDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: CategoryDelProc 
 */

CREATE PROCEDURE [dbo].[CategoryDelProc]
(
    @CategoryName     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Category
     WHERE CategoryName = @CategoryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'CategoryDelProc: Cannot delete because foreign keys still exist in Category '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[SystemParms]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SystemParms](
	[SysParm] [nvarchar](50) NULL,
	[SysParmDesc] [nvarchar](250) NULL,
	[SysParmVal] [nvarchar](250) NULL,
	[flgActive] [nchar](1) NULL,
	[isDirectory] [nchar](1) NULL,
	[isEmailFolder] [nchar](1) NULL,
	[flgAllSubDirs] [nchar](1) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_SystemParms] ON [dbo].[SystemParms] 
(
	[SysParm] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[SystemMessage]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[SystemMessage](
	[UserID] [nvarchar](50) NULL,
	[EntryDate] [datetime] NULL,
	[EntryGuid] [nvarchar](50) NULL,
	[EntryMsg] [nvarchar](max) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE CLUSTERED INDEX [PI01_SystemMessage] ON [dbo].[SystemMessage] 
(
	[EntryDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_02] ON [dbo].[SystemMessage] 
(
	[UserID] ASC,
	[EntryDate] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[AtributeUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AtributeUpdProc 
 */

CREATE PROCEDURE [dbo].[AtributeUpdProc]
(
    @AttributeName         nvarchar(50),
    @AttributeDataType     nvarchar(50)              = NULL,
    @AttributeDesc         nvarchar(2000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Atribute
       SET AttributeDataType      = @AttributeDataType,
           AttributeDesc          = @AttributeDesc
     WHERE AttributeName = @AttributeName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'AtributeUpdProc: Cannot update  in Atribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Table [dbo].[HashDir]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[HashDir](
	[Hash] [decimal](18, 0) NULL,
	[HashedString] [varchar](max) NULL,
	[HashID] [varchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
CREATE UNIQUE CLUSTERED INDEX [UK_HashDir] ON [dbo].[HashDir] 
(
	[HashID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
CREATE NONCLUSTERED INDEX [PI_HashDir] ON [dbo].[HashDir] 
(
	[Hash] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[IncludeImmediate]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
SET ANSI_PADDING ON
GO
CREATE TABLE [dbo].[IncludeImmediate](
	[FromEmailAddr] [nvarchar](254) NOT NULL,
	[SenderName] [varchar](254) NOT NULL,
	[UserID] [varchar](25) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK_IncludeImmediate] PRIMARY KEY NONCLUSTERED 
(
	[FromEmailAddr] ASC,
	[SenderName] ASC,
	[UserID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
SET ANSI_PADDING OFF
GO
/****** Object:  Table [dbo].[UserReassignHist]    Script Date: 05/18/2011 16:17:11 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[UserReassignHist](
	[PrevUserID] [nvarchar](50) NOT NULL,
	[PrevUserName] [nvarchar](50) NULL,
	[PrevEmailAddress] [nvarchar](254) NULL,
	[PrevUserPassword] [nvarchar](254) NULL,
	[PrevAdmin] [nchar](1) NULL,
	[PrevisActive] [nchar](1) NULL,
	[PrevUserLoginID] [nvarchar](50) NOT NULL,
	[ReassignedUserID] [nvarchar](50) NULL,
	[ReassignedUserName] [nvarchar](50) NOT NULL,
	[ReassignedEmailAddress] [nvarchar](254) NULL,
	[ReassignedUserPassword] [nvarchar](254) NULL,
	[ReassignedAdmin] [nchar](1) NULL,
	[ReassignedisActive] [nchar](1) NULL,
	[ReassignedUserLoginID] [nvarchar](50) NULL,
	[ReassignmentDate] [datetime] NOT NULL,
	[RowID] [uniqueidentifier] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AvailFileTypes]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AvailFileTypes](
	[ExtCode] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PKI7] PRIMARY KEY CLUSTERED 
(
	[ExtCode] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Table [dbo].[AvailFileTypesUndefined]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AvailFileTypesUndefined](
	[FileType] [nvarchar](50) NOT NULL,
	[SubstituteType] [nvarchar](50) NULL,
	[Applied] [bit] NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL
) ON [PRIMARY]
GO
CREATE UNIQUE NONCLUSTERED INDEX [PK_AFTU] ON [dbo].[AvailFileTypesUndefined] 
(
	[FileType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, SORT_IN_TEMPDB = OFF, IGNORE_DUP_KEY = OFF, DROP_EXISTING = OFF, ONLINE = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[procGetContentData]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create Procedure [dbo].[procGetContentData]
	@SqlStmt VarChar(4000)
AS
	Exec (@SqlStmt);
GO
/****** Object:  StoredProcedure [dbo].[SourceAttribute_BACKUPInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SourceAttribute_BACKUPInsProc]
(
    @AttributeValue            nvarchar(254)            = NULL,
    @AttributeName             nvarchar(50),
    @SourceGuid                nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceAttribute_BACKUP(AttributeValue,
                                       AttributeName,
                                       SourceGuid,
                                       DataSourceOwnerUserID)
    VALUES(@AttributeValue,
           @AttributeName,
           @SourceGuid,
           @DataSourceOwnerUserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceAttribute_BACKUPInsProc: Cannot insert because primary key value not found in SourceAttribute_BACKUP '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  View [dbo].[vDataTypeStorage]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE VIEW [dbo].[vDataTypeStorage]  AS
SELECT DISTINCT DataSource.SourceTypeCode, SUM(CAST(SourceAttribute.AttributeValue AS INT)) AS FILESIZE
FROM         DataSource INNER JOIN
                      SourceAttribute ON DataSource.SourceGuid = SourceAttribute.SourceGuid
WHERE     (SourceAttribute.AttributeName = N'FILESIZE')
group by DataSource.SourceTypeCode
GO
/****** Object:  StoredProcedure [dbo].[sp_Remove_Expired_Content]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE procedure [dbo].[sp_Remove_Expired_Content]
as
delete from SourceAttribute where SourceGuid in 
(select sourceguid from DataSource where RetentionExpirationDate <= GETDATE())

delete from SourceAttribute where SourceGuid in 
(select sourceguid from DataSource where RetentionExpirationDate <= GETDATE())

delete from DataSource where RetentionExpirationDate <= GETDATE()

delete from EmailAttachment where EmailGuid in 
(select EmailGuid from Email where RetentionExpirationDate <= GETDATE())
GO
/****** Object:  StoredProcedure [dbo].[ECM_HivePerftestV2]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[ECM_HivePerftestV2]
  (@MilliSeconds int output)
  AS
  BEGIN
  	declare @datetime1 datetime
  	declare @datetime2 datetime
  	declare @elapsed_seconds int
  	declare @elapsed_milliseconds int
  	declare @elapsed_time datetime
  	declare @elapsed_days int
  	declare @elapsed_hours int
  	declare @elapsed_minutes int
  	
  	declare @iCount int
  
  	select @datetime1 = GETDATE()
  
  	set @iCount = (select COUNT(*) from datasource where SourceGuid = 'xx')
  	set @iCount = (select COUNT(*) from Email where EmailGuid = 'xx')
  	set @iCount = (select COUNT(*) from EmailAttachment where EmailGuid = 'xx')
  	set @iCount = (select COUNT(*) from SourceAttribute where SourceGuid = 'xx')
  
  	select @datetime2 = GETDATE()
  
  	select @elapsed_time = @datetime2-@datetime1
  	select @elapsed_days = datediff(day,0,@elapsed_time)
  	select @elapsed_hours = datepart(hour,@elapsed_time)
  	select @elapsed_minutes = datepart(minute,@elapsed_time)
  	select @elapsed_seconds = datepart(second,@elapsed_time)
  	select @elapsed_milliseconds = datepart(millisecond,@elapsed_time)
  
  	declare @cr varchar(4), @cr2 varchar(4)
  	select @cr = char(13)+Char(10)
  	select @cr2 = @cr+@cr
  
  /*
  	print	'Elapsed Time: '+convert(varchar(30),@elapsed_time,121)+' ='+@cr+
  		'	 '+convert(varchar(30),@datetime2,121)+
  		' - '+convert(varchar(30),@datetime1,121)+@cr2
  
  	print	'Elapsed Time Parts:'+@cr+
  		' Days         = '+convert(varchar(20),@elapsed_days)+@cr+
  		' Hours        = '+convert(varchar(20),@elapsed_hours)+@cr+
  		' Minutess     = '+convert(varchar(20),@elapsed_minutes)+@cr+
  		' Secondss     = '+convert(varchar(20),@elapsed_seconds)+@cr+
  		' Milliseconds = '+convert(varchar(20), @elapsed_milliseconds)+@cr2+@cr2
  
  		SET @result = @elapsed_milliseconds
  */
  
  	SELECT @MilliSeconds = @elapsed_milliseconds 
  
  END
GO
/****** Object:  StoredProcedure [dbo].[ECM_HivePerftest]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--exec [ECM_HivePerftest]

 CREATE PROCEDURE [dbo].[ECM_HivePerftest]
 AS
 DECLARE @result int
 BEGIN
 	declare @datetime1 datetime
 	declare @datetime2 datetime
 	declare @elapsed_seconds int
 	declare @elapsed_milliseconds int
 	declare @elapsed_time datetime
 	declare @elapsed_days int
 	declare @elapsed_hours int
 	declare @elapsed_minutes int
 	
 	declare @iCount int
 
 	select @datetime1 = GETDATE()
 
 	set @iCount = (select COUNT(*) from datasource where SourceGuid = 'xx')
 	set @iCount = (select COUNT(*) from Email where EmailGuid = 'xx')
 	set @iCount = (select COUNT(*) from EmailAttachment where EmailGuid = 'xx')
 	set @iCount = (select COUNT(*) from SourceAttribute where SourceGuid = 'xx')
 
 	select @datetime2 = GETDATE()
 
 	select @elapsed_time = @datetime2-@datetime1
 	select @elapsed_days = datediff(day,0,@elapsed_time)
 	select @elapsed_hours = datepart(hour,@elapsed_time)
 	select @elapsed_minutes = datepart(minute,@elapsed_time)
 	select @elapsed_seconds = datepart(second,@elapsed_time)
 	select @elapsed_milliseconds = datepart(millisecond,@elapsed_time)
 
 	declare @cr varchar(4), @cr2 varchar(4)
 	select @cr = char(13)+Char(10)
 	select @cr2 = @cr+@cr
 
 /*
 	print	'Elapsed Time: '+convert(varchar(30),@elapsed_time,121)+' ='+@cr+
 		'	 '+convert(varchar(30),@datetime2,121)+
 		' - '+convert(varchar(30),@datetime1,121)+@cr2
 
 	print	'Elapsed Time Parts:'+@cr+
 		' Days         = '+convert(varchar(20),@elapsed_days)+@cr+
 		' Hours        = '+convert(varchar(20),@elapsed_hours)+@cr+
 		' Minutess     = '+convert(varchar(20),@elapsed_minutes)+@cr+
 		' Secondss     = '+convert(varchar(20),@elapsed_seconds)+@cr+
 		' Milliseconds = '+convert(varchar(20), @elapsed_milliseconds)+@cr2+@cr2
 
 		SET @result = @elapsed_milliseconds
 */
 
 	SELECT @elapsed_milliseconds AS Result
 
 END
GO
/****** Object:  Trigger [DataSourceUpdTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: DataSourceUpdTrig 
 */

CREATE TRIGGER [dbo].[DataSourceUpdTrig] ON [dbo].[DataSource]
FOR UPDATE AS
BEGIN
    DECLARE
        @SourceGuid nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: RESTRICT

    IF (UPDATE(SourceGuid))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM SourceAttribute ch, deleted
          WHERE ch.SourceGuid = deleted.SourceGuid) != 0)
        BEGIN
            RAISERROR 30001 'DataSourceUpdTrigCannot update because foreign keys still exist in SourceAttribute'
            ROLLBACK TRAN
        END
    END
-- Child Update: RESTRICT

    IF (UPDATE(SourceTypeCode))
    BEGIN
        IF ((SELECT COUNT(*)
          FROM SourceType pr, inserted
          WHERE pr.SourceTypeCode = inserted.SourceTypeCode) != @Rows)
        BEGIN
            RAISERROR 30001 'DataSourceUpdTrigCannot update because primary key value not found in SourceType'
            ROLLBACK TRAN
        END
    END

END
GO
/****** Object:  Trigger [DataSourceDelTrig]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[DataSourceDelTrig] ON [dbo].[DataSource]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE DataSourceCheckOut
        FROM DataSourceCheckOut ch, deleted
        WHERE ch.SourceGuid = deleted.SourceGuid AND
           ch.DataSourceOwnerUserID = deleted.DataSourceOwnerUserID
-- Parent Delete: CASCADE

    DELETE SourceAttribute
        FROM SourceAttribute ch, deleted
        WHERE ch.DataSourceOwnerUserID = deleted.DataSourceOwnerUserID AND
           ch.SourceGuid = deleted.SourceGuid

END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttributeInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeInsProc 
 */

CREATE PROCEDURE [dbo].[SourceAttributeInsProc]
(
    @AttributeValue     nvarchar(254)            = NULL,
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceAttribute(AttributeValue,
                                AttributeName,
                                SourceGuid)
    VALUES(@AttributeValue,
           @AttributeName,
           @SourceGuid)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceAttributeInsProc: Cannot insert because primary key value not found in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttributeDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeDelProc 
 */

CREATE PROCEDURE [dbo].[SourceAttributeDelProc]
(
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SourceAttribute
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SourceAttributeDelProc: Cannot delete because foreign keys still exist in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [SourceAttribute_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[SourceAttribute_INS]
   ON [dbo].[SourceAttribute]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE SourceAttribute
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM SourceAttribute t
   JOIN inserted i
   ON 
     t.AttributeName = i.AttributeName
     and t.SourceGuid = i.SourceGuid
     and t.DataSourceOwnerUserID = i.DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[SourceAttr_01282009011746007]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeUpdProc 
 */

CREATE PROCEDURE [dbo].[SourceAttr_01282009011746007]
(
    @AttributeValue     nvarchar(254)            = NULL,
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE SourceAttribute
       SET AttributeValue      = @AttributeValue
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SourceAttributeUpdProc: Cannot update  in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttr_01282009011746006]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeSelProc 
 */

CREATE PROCEDURE [dbo].[SourceAttr_01282009011746006]
(
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    SELECT AttributeValue,
           AttributeName,
           SourceGuid
      FROM SourceAttribute
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttr_01282009011746005]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeInsProc 
 */

CREATE PROCEDURE [dbo].[SourceAttr_01282009011746005]
(
    @AttributeValue     nvarchar(254)            = NULL,
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SourceAttribute(AttributeValue,
                                AttributeName,
                                SourceGuid)
    VALUES(@AttributeValue,
           @AttributeName,
           @SourceGuid)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SourceAttributeInsProc: Cannot insert because primary key value not found in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttr_01282009011746004]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeDelProc 
 */

CREATE PROCEDURE [dbo].[SourceAttr_01282009011746004]
(
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM SourceAttribute
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'SourceAttributeDelProc: Cannot delete because foreign keys still exist in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ProcessFileAsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ProcessFileAsUpdProc]
(
    @ExtCode            nvarchar(50),
    @ProcessExtCode     nvarchar(50),
    @Applied            bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE ProcessFileAs
       SET ProcessExtCode      = @ProcessExtCode,
           Applied             = @Applied
     WHERE ExtCode = @ExtCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ProcessFileAsUpdProc: Cannot update  in ProcessFileAs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ProcessFileAsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ProcessFileAsSelProc]
(
    @ExtCode            nvarchar(50))
AS
BEGIN
    SELECT ExtCode,
           ProcessExtCode,
           Applied
      FROM ProcessFileAs
     WHERE ExtCode = @ExtCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ProcessFileAsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ProcessFileAsInsProc]
(
    @ExtCode            nvarchar(50),
    @ProcessExtCode     nvarchar(50),
    @Applied            bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ProcessFileAs(ExtCode,
                              ProcessExtCode,
                              Applied)
    VALUES(@ExtCode,
           @ProcessExtCode,
           @Applied)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ProcessFileAsInsProc: Cannot insert because primary key value not found in ProcessFileAs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ProcessFileAsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ProcessFileAsDelProc]
(
    @ExtCode            nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ProcessFileAs
     WHERE ExtCode = @ExtCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ProcessFileAsDelProc: Cannot delete because foreign keys still exist in ProcessFileAs '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ProcessFileAs_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ProcessFileAs_INS]
   ON [dbo].[ProcessFileAs]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ProcessFileAs
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ProcessFileAs t
   JOIN inserted i
   ON 
     t.ExtCode = i.ExtCode
GO
/****** Object:  StoredProcedure [dbo].[LicenseInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LicenseInsProc]
(
    @Agreement          nvarchar(2000),
    @VersionNbr         int,
    @ActivationDate     datetime,
    @InstallDate        datetime,
    @CustomerID         nvarchar(50),
    @CustomerName       nvarchar(254),
    @XrtNxr1            nvarchar(50)              = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO License(Agreement,
                        VersionNbr,
                        ActivationDate,
                        InstallDate,
                        CustomerID,
                        CustomerName,
                        XrtNxr1)
    VALUES(@Agreement,
           @VersionNbr,
           @ActivationDate,
           @InstallDate,
           @CustomerID,
           @CustomerName,
           @XrtNxr1)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LicenseInsProc: Cannot insert because primary key value not found in License '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AvailFileTypesSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AvailFileTypesSelProc]
(
    @ExtCode     nvarchar(50))
AS
BEGIN
    SELECT ExtCode
      FROM AvailFileTypes
     WHERE ExtCode = @ExtCode

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AvailFileTypesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AvailFileTypesInsProc]
(
    @ExtCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AvailFileTypes(ExtCode)
    VALUES(@ExtCode)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AvailFileTypesInsProc: Cannot insert because primary key value not found in AvailFileTypes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AvailFileTypesDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AvailFileTypesDelProc]
(
    @ExtCode     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM AvailFileTypes
     WHERE ExtCode = @ExtCode

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AvailFileTypesDelProc: Cannot delete because foreign keys still exist in AvailFileTypes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [AvailFileTypes_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[AvailFileTypes_INS]
   ON [dbo].[AvailFileTypes]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE AvailFileTypes
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM AvailFileTypes t
   JOIN inserted i
   ON 
     t.ExtCode = i.ExtCode
GO
/****** Object:  StoredProcedure [dbo].[IncludedFilesSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludedFilesSelProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         nvarchar(254))
AS
BEGIN
    SELECT UserID,
           ExtCode,
           FQN
      FROM IncludedFiles
     WHERE UserID  = @UserID
       AND ExtCode = @ExtCode
       AND FQN     = @FQN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[IncludedFilesInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludedFilesInsProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         nvarchar(254))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO IncludedFiles(UserID,
                              ExtCode,
                              FQN)
    VALUES(@UserID,
           @ExtCode,
           @FQN)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'IncludedFilesInsProc: Cannot insert because primary key value not found in IncludedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[IncludedFilesDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludedFilesDelProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         nvarchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM IncludedFiles
     WHERE UserID  = @UserID
       AND ExtCode = @ExtCode
       AND FQN     = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'IncludedFilesDelProc: Cannot delete because foreign keys still exist in IncludedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [IncludedFiles_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[IncludedFiles_INS]
   ON [dbo].[IncludedFiles]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE IncludedFiles
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM IncludedFiles t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.ExtCode = i.ExtCode
     and t.FQN = i.FQN
GO
/****** Object:  StoredProcedure [dbo].[AvailFileTypesUndefinedInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AvailFileTypesUndefinedInsProc]
(
    @FileType           nvarchar(50),
    @SubstituteType     nvarchar(50)            = NULL,
    @Applied            bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AvailFileTypesUndefined(FileType,
                                        SubstituteType,
                                        Applied)
    VALUES(@FileType,
           @SubstituteType,
           @Applied)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AvailFileTypesUndefinedInsProc: Cannot insert because primary key value not found in AvailFileTypesUndefined '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  View [dbo].[gv_UserReassignHist]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UserReassignHist]
AS
/*
** Select all rows from the UserReassignHist table
** and the lookup expressions defined for associated tables
*/
SELECT [UserReassignHist].* FROM [UserReassignHist]
GO
/****** Object:  StoredProcedure [dbo].[UserReassignHistInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[UserReassignHistInsProc]
(
    @PrevUserID                 nvarchar(50),
    @PrevUserName               nvarchar(50)                = NULL,
    @PrevEmailAddress           nvarchar(254)               = NULL,
    @PrevUserPassword           nvarchar(254)               = NULL,
    @PrevAdmin                  nchar(1)                    = NULL,
    @PrevisActive               nchar(1)                    = NULL,
    @PrevUserLoginID            nvarchar(50),
    @ReassignedUserID           nvarchar(50)                = NULL,
    @ReassignedUserName         nvarchar(50),
    @ReassignedEmailAddress     nvarchar(254)               = NULL,
    @ReassignedUserPassword     nvarchar(254)               = NULL,
    @ReassignedAdmin            nchar(1)                    = NULL,
    @ReassignedisActive         nchar(1)                    = NULL,
    @ReassignedUserLoginID      nvarchar(50)                = NULL,
    @ReassignmentDate           datetime,
    @RowID                      uniqueidentifier            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO UserReassignHist(PrevUserID,
                                 PrevUserName,
                                 PrevEmailAddress,
                                 PrevUserPassword,
                                 PrevAdmin,
                                 PrevisActive,
                                 PrevUserLoginID,
                                 ReassignedUserID,
                                 ReassignedUserName,
                                 ReassignedEmailAddress,
                                 ReassignedUserPassword,
                                 ReassignedAdmin,
                                 ReassignedisActive,
                                 ReassignedUserLoginID,
                                 ReassignmentDate,
                                 RowID)
    VALUES(@PrevUserID,
           @PrevUserName,
           @PrevEmailAddress,
           @PrevUserPassword,
           @PrevAdmin,
           @PrevisActive,
           @PrevUserLoginID,
           @ReassignedUserID,
           @ReassignedUserName,
           @ReassignedEmailAddress,
           @ReassignedUserPassword,
           @ReassignedAdmin,
           @ReassignedisActive,
           @ReassignedUserLoginID,
           @ReassignmentDate,
           @RowID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'UserReassignHistInsProc: Cannot insert because primary key value not found in UserReassignHist '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  View [dbo].[gv_WebSource]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_WebSource]
AS
/*
** Select all rows from the WebSource table
** and the lookup expressions defined for associated tables
*/
SELECT [WebSource].* FROM [WebSource]
GO
/****** Object:  View [dbo].[gv_MyTempTable]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_MyTempTable]
AS
/*
** Select all rows from the MyTempTable table
** and the lookup expressions defined for associated tables
*/
SELECT [MyTempTable].* FROM [MyTempTable]
GO
/****** Object:  View [dbo].[gv_Machine]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Machine]
AS
/*
** Select all rows from the Machine table
** and the lookup expressions defined for associated tables
*/
SELECT [Machine].* FROM [Machine]
GO
/****** Object:  View [dbo].[gv_ExcludedFiles]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ExcludedFiles]
AS
/*
** Select all rows from the ExcludedFiles table
** and the lookup expressions defined for associated tables
*/
SELECT [ExcludedFiles].* FROM [ExcludedFiles]
GO
/****** Object:  View [dbo].[gv_EmailToDelete]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EmailToDelete]
AS
/*
** Select all rows from the EmailToDelete table
** and the lookup expressions defined for associated tables
*/
SELECT [EmailToDelete].* FROM [EmailToDelete]
GO
/****** Object:  View [dbo].[gv_EmailFolder]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EmailFolder]
AS
/*
** Select all rows from the EmailFolder table
** and the lookup expressions defined for associated tables
*/
SELECT [EmailFolder].* FROM [EmailFolder]
GO
/****** Object:  View [dbo].[gv_ContactFrom]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ContactFrom]
AS
/*
** Select all rows from the ContactFrom table
** and the lookup expressions defined for associated tables
*/
SELECT [ContactFrom].* FROM [ContactFrom]
GO
/****** Object:  StoredProcedure [dbo].[ContactsArchiveUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactsArchiveUpdProc]
(
    @Email1Address                    nvarchar(80),
    @FullName                         nvarchar(80),
    @UserID                           char(25),
    @Account                          nvarchar(4000)            = NULL,
    @Anniversary                      nvarchar(4000)            = NULL,
    @Application                      nvarchar(4000)            = NULL,
    @AssistantName                    nvarchar(4000)            = NULL,
    @AssistantTelephoneNumber         nvarchar(4000)            = NULL,
    @BillingInformation               nvarchar(4000)            = NULL,
    @Birthday                         nvarchar(4000)            = NULL,
    @Business2TelephoneNumber         nvarchar(4000)            = NULL,
    @BusinessAddress                  nvarchar(4000)            = NULL,
    @BusinessAddressCity              nvarchar(4000)            = NULL,
    @BusinessAddressCountry           nvarchar(4000)            = NULL,
    @BusinessAddressPostalCode        nvarchar(4000)            = NULL,
    @BusinessAddressPostOfficeBox     nvarchar(4000)            = NULL,
    @BusinessAddressState             nvarchar(4000)            = NULL,
    @BusinessAddressStreet            nvarchar(4000)            = NULL,
    @BusinessCardType                 nvarchar(4000)            = NULL,
    @BusinessFaxNumber                nvarchar(4000)            = NULL,
    @BusinessHomePage                 nvarchar(4000)            = NULL,
    @BusinessTelephoneNumber          nvarchar(4000)            = NULL,
    @CallbackTelephoneNumber          nvarchar(4000)            = NULL,
    @CarTelephoneNumber               nvarchar(4000)            = NULL,
    @Categories                       nvarchar(4000)            = NULL,
    @Children                         nvarchar(4000)            = NULL,
    @xClass                           nvarchar(4000)            = NULL,
    @Companies                        nvarchar(4000)            = NULL,
    @CompanyName                      nvarchar(4000)            = NULL,
    @ComputerNetworkName              nvarchar(4000)            = NULL,
    @Conflicts                        nvarchar(4000)            = NULL,
    @ConversationTopic                nvarchar(4000)            = NULL,
    @CreationTime                     nvarchar(4000)            = NULL,
    @CustomerID                       nvarchar(4000)            = NULL,
    @Department                       nvarchar(4000)            = NULL,
    @Email1AddressType                nvarchar(4000)            = NULL,
    @Email1DisplayName                nvarchar(4000)            = NULL,
    @Email1EntryID                    nvarchar(4000)            = NULL,
    @Email2Address                    nvarchar(4000)            = NULL,
    @Email2AddressType                nvarchar(4000)            = NULL,
    @Email2DisplayName                nvarchar(4000)            = NULL,
    @Email2EntryID                    nvarchar(4000)            = NULL,
    @Email3Address                    nvarchar(4000)            = NULL,
    @Email3AddressType                nvarchar(4000)            = NULL,
    @Email3DisplayName                nvarchar(4000)            = NULL,
    @Email3EntryID                    nvarchar(4000)            = NULL,
    @FileAs                           nvarchar(4000)            = NULL,
    @FirstName                        nvarchar(4000)            = NULL,
    @FTPSite                          nvarchar(4000)            = NULL,
    @Gender                           nvarchar(4000)            = NULL,
    @GovernmentIDNumber               nvarchar(4000)            = NULL,
    @Hobby                            nvarchar(4000)            = NULL,
    @Home2TelephoneNumber             nvarchar(4000)            = NULL,
    @HomeAddress                      nvarchar(4000)            = NULL,
    @HomeAddressCountry               nvarchar(4000)            = NULL,
    @HomeAddressPostalCode            nvarchar(4000)            = NULL,
    @HomeAddressPostOfficeBox         nvarchar(4000)            = NULL,
    @HomeAddressState                 nvarchar(4000)            = NULL,
    @HomeAddressStreet                nvarchar(4000)            = NULL,
    @HomeFaxNumber                    nvarchar(4000)            = NULL,
    @HomeTelephoneNumber              nvarchar(4000)            = NULL,
    @IMAddress                        nvarchar(4000)            = NULL,
    @Importance                       nvarchar(4000)            = NULL,
    @Initials                         nvarchar(4000)            = NULL,
    @InternetFreeBusyAddress          nvarchar(4000)            = NULL,
    @JobTitle                         nvarchar(4000)            = NULL,
    @Journal                          nvarchar(4000)            = NULL,
    @Language                         nvarchar(4000)            = NULL,
    @LastModificationTime             nvarchar(4000)            = NULL,
    @LastName                         nvarchar(4000)            = NULL,
    @LastNameAndFirstName             nvarchar(4000)            = NULL,
    @MailingAddress                   nvarchar(4000)            = NULL,
    @MailingAddressCity               nvarchar(4000)            = NULL,
    @MailingAddressCountry            nvarchar(4000)            = NULL,
    @MailingAddressPostalCode         nvarchar(4000)            = NULL,
    @MailingAddressPostOfficeBox      nvarchar(4000)            = NULL,
    @MailingAddressState              nvarchar(4000)            = NULL,
    @MailingAddressStreet             nvarchar(4000)            = NULL,
    @ManagerName                      nvarchar(4000)            = NULL,
    @MiddleName                       nvarchar(4000)            = NULL,
    @Mileage                          nvarchar(4000)            = NULL,
    @MobileTelephoneNumber            nvarchar(4000)            = NULL,
    @NetMeetingAlias                  nvarchar(4000)            = NULL,
    @NetMeetingServer                 nvarchar(4000)            = NULL,
    @NickName                         nvarchar(4000)            = NULL,
    @Title                            nvarchar(4000)            = NULL,
    @Body                             nvarchar(4000)            = NULL,
    @OfficeLocation                   nvarchar(4000)            = NULL,
    @Subject                          nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE ContactsArchive
       SET Account                           = @Account,
           Anniversary                       = @Anniversary,
           Application                       = @Application,
           AssistantName                     = @AssistantName,
           AssistantTelephoneNumber          = @AssistantTelephoneNumber,
           BillingInformation                = @BillingInformation,
           Birthday                          = @Birthday,
           Business2TelephoneNumber          = @Business2TelephoneNumber,
           BusinessAddress                   = @BusinessAddress,
           BusinessAddressCity               = @BusinessAddressCity,
           BusinessAddressCountry            = @BusinessAddressCountry,
           BusinessAddressPostalCode         = @BusinessAddressPostalCode,
           BusinessAddressPostOfficeBox      = @BusinessAddressPostOfficeBox,
           BusinessAddressState              = @BusinessAddressState,
           BusinessAddressStreet             = @BusinessAddressStreet,
           BusinessCardType                  = @BusinessCardType,
           BusinessFaxNumber                 = @BusinessFaxNumber,
           BusinessHomePage                  = @BusinessHomePage,
           BusinessTelephoneNumber           = @BusinessTelephoneNumber,
           CallbackTelephoneNumber           = @CallbackTelephoneNumber,
           CarTelephoneNumber                = @CarTelephoneNumber,
           Categories                        = @Categories,
           Children                          = @Children,
           xClass                            = @xClass,
           Companies                         = @Companies,
           CompanyName                       = @CompanyName,
           ComputerNetworkName               = @ComputerNetworkName,
           Conflicts                         = @Conflicts,
           ConversationTopic                 = @ConversationTopic,
           CreationTime                      = @CreationTime,
           CustomerID                        = @CustomerID,
           Department                        = @Department,
           Email1AddressType                 = @Email1AddressType,
           Email1DisplayName                 = @Email1DisplayName,
           Email1EntryID                     = @Email1EntryID,
           Email2Address                     = @Email2Address,
           Email2AddressType                 = @Email2AddressType,
           Email2DisplayName                 = @Email2DisplayName,
           Email2EntryID                     = @Email2EntryID,
           Email3Address                     = @Email3Address,
           Email3AddressType                 = @Email3AddressType,
           Email3DisplayName                 = @Email3DisplayName,
           Email3EntryID                     = @Email3EntryID,
           FileAs                            = @FileAs,
           FirstName                         = @FirstName,
           FTPSite                           = @FTPSite,
           Gender                            = @Gender,
           GovernmentIDNumber                = @GovernmentIDNumber,
           Hobby                             = @Hobby,
           Home2TelephoneNumber              = @Home2TelephoneNumber,
           HomeAddress                       = @HomeAddress,
           HomeAddressCountry                = @HomeAddressCountry,
           HomeAddressPostalCode             = @HomeAddressPostalCode,
           HomeAddressPostOfficeBox          = @HomeAddressPostOfficeBox,
           HomeAddressState                  = @HomeAddressState,
           HomeAddressStreet                 = @HomeAddressStreet,
           HomeFaxNumber                     = @HomeFaxNumber,
           HomeTelephoneNumber               = @HomeTelephoneNumber,
           IMAddress                         = @IMAddress,
           Importance                        = @Importance,
           Initials                          = @Initials,
           InternetFreeBusyAddress           = @InternetFreeBusyAddress,
           JobTitle                          = @JobTitle,
           Journal                           = @Journal,
           Language                          = @Language,
           LastModificationTime              = @LastModificationTime,
           LastName                          = @LastName,
           LastNameAndFirstName              = @LastNameAndFirstName,
           MailingAddress                    = @MailingAddress,
           MailingAddressCity                = @MailingAddressCity,
           MailingAddressCountry             = @MailingAddressCountry,
           MailingAddressPostalCode          = @MailingAddressPostalCode,
           MailingAddressPostOfficeBox       = @MailingAddressPostOfficeBox,
           MailingAddressState               = @MailingAddressState,
           MailingAddressStreet              = @MailingAddressStreet,
           ManagerName                       = @ManagerName,
           MiddleName                        = @MiddleName,
           Mileage                           = @Mileage,
           MobileTelephoneNumber             = @MobileTelephoneNumber,
           NetMeetingAlias                   = @NetMeetingAlias,
           NetMeetingServer                  = @NetMeetingServer,
           NickName                          = @NickName,
           Title                             = @Title,
           Body                              = @Body,
           OfficeLocation                    = @OfficeLocation,
           Subject                           = @Subject
     WHERE Email1Address = @Email1Address
       AND FullName      = @FullName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ContactsArchiveUpdProc: Cannot update  in ContactsArchive '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ContactsArchiveSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactsArchiveSelProc]
(
    @Email1Address                    nvarchar(80),
    @FullName                         nvarchar(80),
    @UserID                           char(25))
AS
BEGIN
    SELECT Email1Address,
           FullName,
           UserID,
           Account,
           Anniversary,
           Application,
           AssistantName,
           AssistantTelephoneNumber,
           BillingInformation,
           Birthday,
           Business2TelephoneNumber,
           BusinessAddress,
           BusinessAddressCity,
           BusinessAddressCountry,
           BusinessAddressPostalCode,
           BusinessAddressPostOfficeBox,
           BusinessAddressState,
           BusinessAddressStreet,
           BusinessCardType,
           BusinessFaxNumber,
           BusinessHomePage,
           BusinessTelephoneNumber,
           CallbackTelephoneNumber,
           CarTelephoneNumber,
           Categories,
           Children,
           xClass,
           Companies,
           CompanyName,
           ComputerNetworkName,
           Conflicts,
           ConversationTopic,
           CreationTime,
           CustomerID,
           Department,
           Email1AddressType,
           Email1DisplayName,
           Email1EntryID,
           Email2Address,
           Email2AddressType,
           Email2DisplayName,
           Email2EntryID,
           Email3Address,
           Email3AddressType,
           Email3DisplayName,
           Email3EntryID,
           FileAs,
           FirstName,
           FTPSite,
           Gender,
           GovernmentIDNumber,
           Hobby,
           Home2TelephoneNumber,
           HomeAddress,
           HomeAddressCountry,
           HomeAddressPostalCode,
           HomeAddressPostOfficeBox,
           HomeAddressState,
           HomeAddressStreet,
           HomeFaxNumber,
           HomeTelephoneNumber,
           IMAddress,
           Importance,
           Initials,
           InternetFreeBusyAddress,
           JobTitle,
           Journal,
           Language,
           LastModificationTime,
           LastName,
           LastNameAndFirstName,
           MailingAddress,
           MailingAddressCity,
           MailingAddressCountry,
           MailingAddressPostalCode,
           MailingAddressPostOfficeBox,
           MailingAddressState,
           MailingAddressStreet,
           ManagerName,
           MiddleName,
           Mileage,
           MobileTelephoneNumber,
           NetMeetingAlias,
           NetMeetingServer,
           NickName,
           Title,
           Body,
           OfficeLocation,
           Subject
      FROM ContactsArchive
     WHERE Email1Address = @Email1Address
       AND FullName      = @FullName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ContactsArchiveInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactsArchiveInsProc]
(
    @Email1Address                    nvarchar(80),
    @FullName                         nvarchar(80),
    @UserID                           char(25),
    @Account                          nvarchar(4000)            = NULL,
    @Anniversary                      nvarchar(4000)            = NULL,
    @Application                      nvarchar(4000)            = NULL,
    @AssistantName                    nvarchar(4000)            = NULL,
    @AssistantTelephoneNumber         nvarchar(4000)            = NULL,
    @BillingInformation               nvarchar(4000)            = NULL,
    @Birthday                         nvarchar(4000)            = NULL,
    @Business2TelephoneNumber         nvarchar(4000)            = NULL,
    @BusinessAddress                  nvarchar(4000)            = NULL,
    @BusinessAddressCity              nvarchar(4000)            = NULL,
    @BusinessAddressCountry           nvarchar(4000)            = NULL,
    @BusinessAddressPostalCode        nvarchar(4000)            = NULL,
    @BusinessAddressPostOfficeBox     nvarchar(4000)            = NULL,
    @BusinessAddressState             nvarchar(4000)            = NULL,
    @BusinessAddressStreet            nvarchar(4000)            = NULL,
    @BusinessCardType                 nvarchar(4000)            = NULL,
    @BusinessFaxNumber                nvarchar(4000)            = NULL,
    @BusinessHomePage                 nvarchar(4000)            = NULL,
    @BusinessTelephoneNumber          nvarchar(4000)            = NULL,
    @CallbackTelephoneNumber          nvarchar(4000)            = NULL,
    @CarTelephoneNumber               nvarchar(4000)            = NULL,
    @Categories                       nvarchar(4000)            = NULL,
    @Children                         nvarchar(4000)            = NULL,
    @xClass                           nvarchar(4000)            = NULL,
    @Companies                        nvarchar(4000)            = NULL,
    @CompanyName                      nvarchar(4000)            = NULL,
    @ComputerNetworkName              nvarchar(4000)            = NULL,
    @Conflicts                        nvarchar(4000)            = NULL,
    @ConversationTopic                nvarchar(4000)            = NULL,
    @CreationTime                     nvarchar(4000)            = NULL,
    @CustomerID                       nvarchar(4000)            = NULL,
    @Department                       nvarchar(4000)            = NULL,
    @Email1AddressType                nvarchar(4000)            = NULL,
    @Email1DisplayName                nvarchar(4000)            = NULL,
    @Email1EntryID                    nvarchar(4000)            = NULL,
    @Email2Address                    nvarchar(4000)            = NULL,
    @Email2AddressType                nvarchar(4000)            = NULL,
    @Email2DisplayName                nvarchar(4000)            = NULL,
    @Email2EntryID                    nvarchar(4000)            = NULL,
    @Email3Address                    nvarchar(4000)            = NULL,
    @Email3AddressType                nvarchar(4000)            = NULL,
    @Email3DisplayName                nvarchar(4000)            = NULL,
    @Email3EntryID                    nvarchar(4000)            = NULL,
    @FileAs                           nvarchar(4000)            = NULL,
    @FirstName                        nvarchar(4000)            = NULL,
    @FTPSite                          nvarchar(4000)            = NULL,
    @Gender                           nvarchar(4000)            = NULL,
    @GovernmentIDNumber               nvarchar(4000)            = NULL,
    @Hobby                            nvarchar(4000)            = NULL,
    @Home2TelephoneNumber             nvarchar(4000)            = NULL,
    @HomeAddress                      nvarchar(4000)            = NULL,
    @HomeAddressCountry               nvarchar(4000)            = NULL,
    @HomeAddressPostalCode            nvarchar(4000)            = NULL,
    @HomeAddressPostOfficeBox         nvarchar(4000)            = NULL,
    @HomeAddressState                 nvarchar(4000)            = NULL,
    @HomeAddressStreet                nvarchar(4000)            = NULL,
    @HomeFaxNumber                    nvarchar(4000)            = NULL,
    @HomeTelephoneNumber              nvarchar(4000)            = NULL,
    @IMAddress                        nvarchar(4000)            = NULL,
    @Importance                       nvarchar(4000)            = NULL,
    @Initials                         nvarchar(4000)            = NULL,
    @InternetFreeBusyAddress          nvarchar(4000)            = NULL,
    @JobTitle                         nvarchar(4000)            = NULL,
    @Journal                          nvarchar(4000)            = NULL,
    @Language                         nvarchar(4000)            = NULL,
    @LastModificationTime             nvarchar(4000)            = NULL,
    @LastName                         nvarchar(4000)            = NULL,
    @LastNameAndFirstName             nvarchar(4000)            = NULL,
    @MailingAddress                   nvarchar(4000)            = NULL,
    @MailingAddressCity               nvarchar(4000)            = NULL,
    @MailingAddressCountry            nvarchar(4000)            = NULL,
    @MailingAddressPostalCode         nvarchar(4000)            = NULL,
    @MailingAddressPostOfficeBox      nvarchar(4000)            = NULL,
    @MailingAddressState              nvarchar(4000)            = NULL,
    @MailingAddressStreet             nvarchar(4000)            = NULL,
    @ManagerName                      nvarchar(4000)            = NULL,
    @MiddleName                       nvarchar(4000)            = NULL,
    @Mileage                          nvarchar(4000)            = NULL,
    @MobileTelephoneNumber            nvarchar(4000)            = NULL,
    @NetMeetingAlias                  nvarchar(4000)            = NULL,
    @NetMeetingServer                 nvarchar(4000)            = NULL,
    @NickName                         nvarchar(4000)            = NULL,
    @Title                            nvarchar(4000)            = NULL,
    @Body                             nvarchar(4000)            = NULL,
    @OfficeLocation                   nvarchar(4000)            = NULL,
    @Subject                          nvarchar(4000)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ContactsArchive(Email1Address,
                                FullName,
                                UserID,
                                Account,
                                Anniversary,
                                Application,
                                AssistantName,
                                AssistantTelephoneNumber,
                                BillingInformation,
                                Birthday,
                                Business2TelephoneNumber,
                                BusinessAddress,
                                BusinessAddressCity,
                                BusinessAddressCountry,
                                BusinessAddressPostalCode,
                                BusinessAddressPostOfficeBox,
                                BusinessAddressState,
                                BusinessAddressStreet,
                                BusinessCardType,
                                BusinessFaxNumber,
                                BusinessHomePage,
                                BusinessTelephoneNumber,
                                CallbackTelephoneNumber,
                                CarTelephoneNumber,
                                Categories,
                                Children,
                                xClass,
                                Companies,
                                CompanyName,
                                ComputerNetworkName,
                                Conflicts,
                                ConversationTopic,
                                CreationTime,
                                CustomerID,
                                Department,
                                Email1AddressType,
                                Email1DisplayName,
                                Email1EntryID,
                                Email2Address,
                                Email2AddressType,
                                Email2DisplayName,
                                Email2EntryID,
                                Email3Address,
                                Email3AddressType,
                                Email3DisplayName,
                                Email3EntryID,
                                FileAs,
                                FirstName,
                                FTPSite,
                                Gender,
                                GovernmentIDNumber,
                                Hobby,
                                Home2TelephoneNumber,
                                HomeAddress,
                                HomeAddressCountry,
                                HomeAddressPostalCode,
                                HomeAddressPostOfficeBox,
                                HomeAddressState,
                                HomeAddressStreet,
                                HomeFaxNumber,
                                HomeTelephoneNumber,
                                IMAddress,
                                Importance,
                                Initials,
                                InternetFreeBusyAddress,
                                JobTitle,
                                Journal,
                                Language,
                                LastModificationTime,
                                LastName,
                                LastNameAndFirstName,
                                MailingAddress,
                                MailingAddressCity,
                                MailingAddressCountry,
                                MailingAddressPostalCode,
                                MailingAddressPostOfficeBox,
                                MailingAddressState,
                                MailingAddressStreet,
                                ManagerName,
                                MiddleName,
                                Mileage,
                                MobileTelephoneNumber,
                                NetMeetingAlias,
                                NetMeetingServer,
                                NickName,
                                Title,
                                Body,
                                OfficeLocation,
                                Subject)
    VALUES(@Email1Address,
           @FullName,
           @UserID,
           @Account,
           @Anniversary,
           @Application,
           @AssistantName,
           @AssistantTelephoneNumber,
           @BillingInformation,
           @Birthday,
           @Business2TelephoneNumber,
           @BusinessAddress,
           @BusinessAddressCity,
           @BusinessAddressCountry,
           @BusinessAddressPostalCode,
           @BusinessAddressPostOfficeBox,
           @BusinessAddressState,
           @BusinessAddressStreet,
           @BusinessCardType,
           @BusinessFaxNumber,
           @BusinessHomePage,
           @BusinessTelephoneNumber,
           @CallbackTelephoneNumber,
           @CarTelephoneNumber,
           @Categories,
           @Children,
           @xClass,
           @Companies,
           @CompanyName,
           @ComputerNetworkName,
           @Conflicts,
           @ConversationTopic,
           @CreationTime,
           @CustomerID,
           @Department,
           @Email1AddressType,
           @Email1DisplayName,
           @Email1EntryID,
           @Email2Address,
           @Email2AddressType,
           @Email2DisplayName,
           @Email2EntryID,
           @Email3Address,
           @Email3AddressType,
           @Email3DisplayName,
           @Email3EntryID,
           @FileAs,
           @FirstName,
           @FTPSite,
           @Gender,
           @GovernmentIDNumber,
           @Hobby,
           @Home2TelephoneNumber,
           @HomeAddress,
           @HomeAddressCountry,
           @HomeAddressPostalCode,
           @HomeAddressPostOfficeBox,
           @HomeAddressState,
           @HomeAddressStreet,
           @HomeFaxNumber,
           @HomeTelephoneNumber,
           @IMAddress,
           @Importance,
           @Initials,
           @InternetFreeBusyAddress,
           @JobTitle,
           @Journal,
           @Language,
           @LastModificationTime,
           @LastName,
           @LastNameAndFirstName,
           @MailingAddress,
           @MailingAddressCity,
           @MailingAddressCountry,
           @MailingAddressPostalCode,
           @MailingAddressPostOfficeBox,
           @MailingAddressState,
           @MailingAddressStreet,
           @ManagerName,
           @MiddleName,
           @Mileage,
           @MobileTelephoneNumber,
           @NetMeetingAlias,
           @NetMeetingServer,
           @NickName,
           @Title,
           @Body,
           @OfficeLocation,
           @Subject)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ContactsArchiveInsProc: Cannot insert because primary key value not found in ContactsArchive '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ContactsArchiveDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactsArchiveDelProc]
(
    @Email1Address                    nvarchar(80),
    @FullName                         nvarchar(80),
    @UserID                           char(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ContactsArchive
     WHERE Email1Address = @Email1Address
       AND FullName      = @FullName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ContactsArchiveDelProc: Cannot delete because foreign keys still exist in ContactsArchive '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ContactsArchive_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ContactsArchive_INS]
   ON [dbo].[ContactsArchive]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ContactsArchive
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ContactsArchive t
   JOIN inserted i
   ON 
     t.Email1Address = i.Email1Address
     and t.FullName = i.FullName
     and t.UserID = i.UserID
GO
/****** Object:  Table [dbo].[ArchiveHist]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[ArchiveHist](
	[ArchiveID] [nvarchar](50) NOT NULL,
	[ArchiveDate] [datetime] NULL,
	[NbrFilesArchived] [int] NULL,
	[UserGuid] [nvarchar](50) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK110] PRIMARY KEY CLUSTERED 
(
	[ArchiveID] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ArchiveFromSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ArchiveFromSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID
      FROM ArchiveFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveFromInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ArchiveFromInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ArchiveFrom(FromEmailAddr,
                            SenderName,
                            UserID)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ArchiveFromInsProc: Cannot insert because primary key value not found in ArchiveFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveFromDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ArchiveFromDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ArchiveFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ArchiveFromDelProc: Cannot delete because foreign keys still exist in ArchiveFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ArchiveFrom_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ArchiveFrom_INS]
   ON [dbo].[ArchiveFrom]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ArchiveFrom
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ArchiveFrom t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[OutlookFromUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OutlookFromUpdProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25),
    @Verified          int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE OutlookFrom
       SET Verified           = @Verified
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'OutlookFromUpdProc: Cannot update  in OutlookFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[OutlookFromSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OutlookFromSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID,
           Verified
      FROM OutlookFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[OutlookFromInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OutlookFromInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25),
    @Verified          int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO OutlookFrom(FromEmailAddr,
                            SenderName,
                            UserID,
                            Verified)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID,
           @Verified)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'OutlookFromInsProc: Cannot insert because primary key value not found in OutlookFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[OutlookFromDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OutlookFromDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM OutlookFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'OutlookFromDelProc: Cannot delete because foreign keys still exist in OutlookFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [OutlookFrom_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[OutlookFrom_INS]
   ON [dbo].[OutlookFrom]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE OutlookFrom
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM OutlookFrom t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[DataOwnersUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataOwnersUpdProc]
(
    @PrimaryOwner              bit                     = NULL,
    @OwnerTypeCode             nvarchar(50)            = NULL,
    @FullAccess                bit                     = NULL,
    @ReadOnly                  bit                     = NULL,
    @DeleteAccess              bit                     = NULL,
    @Searchable                bit                     = NULL,
    @SourceGuid                nvarchar(50),
    @UserID                    nvarchar(50),
    @GroupOwnerUserID          nvarchar(50),
    @GroupName                 nvarchar(80),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE DataOwners
       SET PrimaryOwner               = @PrimaryOwner,
           OwnerTypeCode              = @OwnerTypeCode,
           FullAccess                 = @FullAccess,
           ReadOnly                   = @ReadOnly,
           DeleteAccess               = @DeleteAccess,
           Searchable                 = @Searchable
     WHERE SourceGuid            = @SourceGuid
       AND UserID                = @UserID
       AND GroupOwnerUserID      = @GroupOwnerUserID
       AND GroupName             = @GroupName
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataOwnersUpdProc: Cannot update  in DataOwners '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataOwnersSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataOwnersSelProc]
(
    @SourceGuid                nvarchar(50),
    @UserID                    nvarchar(50),
    @GroupOwnerUserID          nvarchar(50),
    @GroupName                 nvarchar(80),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    SELECT PrimaryOwner,
           OwnerTypeCode,
           FullAccess,
           ReadOnly,
           DeleteAccess,
           Searchable,
           SourceGuid,
           UserID,
           GroupOwnerUserID,
           GroupName,
           DataSourceOwnerUserID
      FROM DataOwners
     WHERE SourceGuid            = @SourceGuid
       AND UserID                = @UserID
       AND GroupOwnerUserID      = @GroupOwnerUserID
       AND GroupName             = @GroupName
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataOwnersInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataOwnersInsProc]
(
    @PrimaryOwner              bit                     = NULL,
    @OwnerTypeCode             nvarchar(50)            = NULL,
    @FullAccess                bit                     = NULL,
    @ReadOnly                  bit                     = NULL,
    @DeleteAccess              bit                     = NULL,
    @Searchable                bit                     = NULL,
    @SourceGuid                nvarchar(50),
    @UserID                    nvarchar(50),
    @GroupOwnerUserID          nvarchar(50),
    @GroupName                 nvarchar(80),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataOwners(PrimaryOwner,
                           OwnerTypeCode,
                           FullAccess,
                           ReadOnly,
                           DeleteAccess,
                           Searchable,
                           SourceGuid,
                           UserID,
                           GroupOwnerUserID,
                           GroupName,
                           DataSourceOwnerUserID)
    VALUES(@PrimaryOwner,
           @OwnerTypeCode,
           @FullAccess,
           @ReadOnly,
           @DeleteAccess,
           @Searchable,
           @SourceGuid,
           @UserID,
           @GroupOwnerUserID,
           @GroupName,
           @DataSourceOwnerUserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataOwnersInsProc: Cannot insert because primary key value not found in DataOwners '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataOwnersDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataOwnersDelProc]
(
    @SourceGuid                nvarchar(50),
    @UserID                    nvarchar(50),
    @GroupOwnerUserID          nvarchar(50),
    @GroupName                 nvarchar(80),
    @DataSourceOwnerUserID     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DataOwners
     WHERE SourceGuid            = @SourceGuid
       AND UserID                = @UserID
       AND GroupOwnerUserID      = @GroupOwnerUserID
       AND GroupName             = @GroupName
       AND DataSourceOwnerUserID = @DataSourceOwnerUserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DataOwnersDelProc: Cannot delete because foreign keys still exist in DataOwners '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [DataOwners_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[DataOwners_INS]
   ON [dbo].[DataOwners]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE DataOwners
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM DataOwners t
   JOIN inserted i
   ON 
     t.SourceGuid = i.SourceGuid
     and t.UserID = i.UserID
     and t.GroupOwnerUserID = i.GroupOwnerUserID
     and t.GroupName = i.GroupName
     and t.DataSourceOwnerUserID = i.DataSourceOwnerUserID
GO
/****** Object:  View [dbo].[gv_ContactsArchive]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ContactsArchive]
AS
/*
** Select all rows from the ContactsArchive table
** and the lookup expressions defined for associated tables
*/
SELECT [ContactsArchive].* FROM [ContactsArchive]
GO
/****** Object:  View [dbo].[gv_AvailFileTypesUndefined]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_AvailFileTypesUndefined]
AS
/*
** Select all rows from the AvailFileTypesUndefined table
** and the lookup expressions defined for associated tables
*/
SELECT [AvailFileTypesUndefined].* FROM [AvailFileTypesUndefined]
GO
/****** Object:  View [dbo].[gv_AvailFileTypes]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_AvailFileTypes]
AS
/*
** Select all rows from the AvailFileTypes table
** and the lookup expressions defined for associated tables
*/
SELECT [AvailFileTypes].* FROM [AvailFileTypes]
GO
/****** Object:  StoredProcedure [dbo].[DeleteFromSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DeleteFromSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID
      FROM DeleteFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DeleteFromInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DeleteFromInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DeleteFrom(FromEmailAddr,
                           SenderName,
                           UserID)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DeleteFromInsProc: Cannot insert because primary key value not found in DeleteFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DeleteFromDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DeleteFromDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DeleteFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DeleteFromDelProc: Cannot delete because foreign keys still exist in DeleteFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [DeleteFrom_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[DeleteFrom_INS]
   ON [dbo].[DeleteFrom]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE DeleteFrom
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM DeleteFrom t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[DB_UpdatesUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: DB_UpdatesUpdProc 
 */

CREATE PROCEDURE [dbo].[DB_UpdatesUpdProc]
(
    @SqlStmt            nvarchar(max),
    @CreateDate         datetime,
    @FixID              nvarchar(50),
    @FixDescription     nvarchar(4000)            = NULL,
    @DBName             nvarchar(50)              = NULL,
    @CompanyID          nvarchar(50)              = NULL,
    @MachineName        nvarchar(50)              = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE DB_Updates
       SET SqlStmt             = @SqlStmt,
           CreateDate          = @CreateDate,
           FixDescription      = @FixDescription,
           DBName              = @DBName,
           CompanyID           = @CompanyID,
           MachineName         = @MachineName
     WHERE FixID = @FixID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DB_UpdatesUpdProc: Cannot update  in DB_Updates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DB_UpdatesSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: DB_UpdatesSelProc 
 */

CREATE PROCEDURE [dbo].[DB_UpdatesSelProc]
(
    @FixID              nvarchar(50))
AS
BEGIN
    SELECT SqlStmt,
           CreateDate,
           FixID,
           FixDescription,
           DBName,
           CompanyID,
           MachineName
      FROM DB_Updates
     WHERE FixID = @FixID

    RETURN(0)
END
GO
/****** Object:  Trigger [trigContactsArchive_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigContactsArchive_Update]
   ON [dbo].[ContactsArchive]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ContactsArchive 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ContactsArchive.Email1Address = inserted.Email1Address
     and ContactsArchive.FullName = inserted.FullName
     and ContactsArchive.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigContactFrom_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigContactFrom_Update]
   ON [dbo].[ContactFrom]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ContactFrom 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ContactFrom.FromEmailAddr = inserted.FromEmailAddr
     and ContactFrom.SenderName = inserted.SenderName
     and ContactFrom.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigAvailFileTypes_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigAvailFileTypes_Update]
   ON [dbo].[AvailFileTypes]
         AFTER Update 
   AS
         BEGIN 
         UPDATE AvailFileTypes 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      AvailFileTypes.ExtCode = inserted.ExtCode
 End
GO
/****** Object:  StoredProcedure [dbo].[IncludeImmediateSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludeImmediateSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID
      FROM IncludeImmediate
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[IncludeImmediateInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludeImmediateInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO IncludeImmediate(FromEmailAddr,
                                 SenderName,
                                 UserID)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'IncludeImmediateInsProc: Cannot insert because primary key value not found in IncludeImmediate '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[IncludeImmediateDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[IncludeImmediateDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM IncludeImmediate
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'IncludeImmediateDelProc: Cannot delete because foreign keys still exist in IncludeImmediate '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [IncludeImmediate_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[IncludeImmediate_INS]
   ON [dbo].[IncludeImmediate]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE IncludeImmediate
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM IncludeImmediate t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[PgmTraceInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[PgmTraceInsProc]
(
    @StmtID             nvarchar(50)             = NULL,
    @PgmName            nvarchar(254)            = NULL,
    @Stmt               nvarchar(max),
    @CreateDate         datetime                 = NULL,
    @ConnectiveGuid     nvarchar(50)             = NULL,
    @UserID             nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO PgmTrace(StmtID,
                         PgmName,
                         Stmt,
                         CreateDate,
                         ConnectiveGuid,
                         UserID)
    VALUES(@StmtID,
           @PgmName,
           @Stmt,
           @CreateDate,
           @ConnectiveGuid,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'PgmTraceInsProc: Cannot insert because primary key value not found in PgmTrace '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[OwnerHistoryUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OwnerHistoryUpdProc]
(
    @PreviousOwnerUserID     nvarchar(50)            = NULL,
    @RowId                   int,
    @CurrentOwnerUserID      nvarchar(50)            = NULL,
    @CreateDate              datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE OwnerHistory
       SET PreviousOwnerUserID      = @PreviousOwnerUserID,
           CurrentOwnerUserID       = @CurrentOwnerUserID,
           CreateDate               = @CreateDate
     WHERE RowId = @RowId

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'OwnerHistoryUpdProc: Cannot update  in OwnerHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[OwnerHistorySelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OwnerHistorySelProc]
(
    @RowId                   int)
AS
BEGIN
    SELECT PreviousOwnerUserID,
           RowId,
           CurrentOwnerUserID,
           CreateDate
      FROM OwnerHistory
     WHERE RowId = @RowId

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[OwnerHistoryInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OwnerHistoryInsProc]
(
    @PreviousOwnerUserID     nvarchar(50)            = NULL,
    @CurrentOwnerUserID      nvarchar(50)            = NULL,
    @CreateDate              datetime                = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO OwnerHistory(PreviousOwnerUserID,
                             CurrentOwnerUserID,
                             CreateDate)
    VALUES(@PreviousOwnerUserID,
           @CurrentOwnerUserID,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'OwnerHistoryInsProc: Cannot insert because primary key value not found in OwnerHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[OwnerHistoryDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[OwnerHistoryDelProc]
(
    @RowId                   int)
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM OwnerHistory
     WHERE RowId = @RowId

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'OwnerHistoryDelProc: Cannot delete because foreign keys still exist in OwnerHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [OwnerHistory_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[OwnerHistory_INS]
   ON [dbo].[OwnerHistory]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE OwnerHistory
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM OwnerHistory t
   JOIN inserted i
   ON 
     t.RowId = i.RowId
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveFrom_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveFrom_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the ArchiveFrom table
*/
DELETE FROM [ArchiveFrom] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ArchiveFrom table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[sp_CleanTxTimes]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create procedure [dbo].[sp_CleanTxTimes] as 
DECLARE @BatchSize INT,
       @Criteria DATETIME,
       @RowCount INT
SET @BatchSize = 1000
SET @Criteria = getdate()-60
SET @RowCount = 1000
SET ROWCOUNT @BatchSize
WHILE @RowCount > 0
BEGIN
   DELETE
   FROM txTimes
   WHERE CreateDate < @Criteria
   SELECT @RowCount = @@rowcount
END
SET ROWCOUNT 0
GO
/****** Object:  View [dbo].[vReassignedTable]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE VIEW [dbo].[vReassignedTable]  AS
SELECT [PrevUserName]
,[ReassignedUserName]
      ,[PrevUserLoginID] 
,[ReassignedUserLoginID]
      ,[PrevUserID]
,[ReassignedUserID]
      ,[PrevEmailAddress]
      ,[PrevUserPassword]
      ,[PrevAdmin]
      ,[PrevisActive]          
      ,[ReassignedEmailAddress]
      ,[ReassignedUserPassword]
      ,[ReassignedAdmin]
      ,[ReassignedisActive]      
      ,[ReassignmentDate]
FROM [UserReassignHist]
GO
/****** Object:  StoredProcedure [dbo].[gp_ActiveSearchGuids_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ActiveSearchGuids_Delete]
(
	@UserID nvarchar(50),
	@DocGuid nvarchar(50)
)
AS
/*
** Delete a row from the ActiveSearchGuids table
*/
DELETE FROM [ActiveSearchGuids] WHERE [UserID] = @UserID AND [DocGuid] = @DocGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ActiveSearchGuids table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[GlobalSeachResultsInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[GlobalSeachResultsInsProc]
(
    @ContentTitle         nvarchar(254)            = NULL,
    @ContentAuthor        nvarchar(254)            = NULL,
    @ContentType          nvarchar(50)             = NULL,
    @CreateDate           nvarchar(50)             = NULL,
    @ContentExt           nvarchar(50)             = NULL,
    @ContentGuid          nvarchar(50),
    @UserID               nvarchar(50),
    @FileName             nvarchar(254)            = NULL,
    @FileSize             int                      = NULL,
    @NbrOfAttachments     int                      = NULL,
    @FromEmailAddress     nvarchar(254)            = NULL,
    @AllRecipiants        nvarchar(max)            = NULL,
    @Weight               int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO GlobalSeachResults(ContentTitle,
                                   ContentAuthor,
                                   ContentType,
                                   CreateDate,
                                   ContentExt,
                                   ContentGuid,
                                   UserID,
                                   FileName,
                                   FileSize,
                                   NbrOfAttachments,
                                   FromEmailAddress,
                                   AllRecipiants,
                                   Weight)
    VALUES(@ContentTitle,
           @ContentAuthor,
           @ContentType,
           @CreateDate,
           @ContentExt,
           @ContentGuid,
           @UserID,
           @FileName,
           @FileSize,
           @NbrOfAttachments,
           @FromEmailAddress,
           @AllRecipiants,
           @Weight)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'GlobalSeachResultsInsProc: Cannot insert because primary key value not found in GlobalSeachResults '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EmailToDeleteInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailToDeleteInsProc]
(
    @EmailGuid     nvarchar(50),
    @StoreID       nvarchar(500),
    @UserID        nvarchar(100),
    @MessageID     nchar(100)               = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailToDelete(EmailGuid,
                              StoreID,
                              UserID,
                              MessageID)
    VALUES(@EmailGuid,
           @StoreID,
           @UserID,
           @MessageID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailToDeleteInsProc: Cannot insert because primary key value not found in EmailToDelete '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SP_SDA_LibraryItemsInsert]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
--select top 1000 * from LibraryItems

CREATE PROCEDURE [dbo].[SP_SDA_LibraryItemsInsert]
(
	@SourceGuid nvarchar(50),
	@ItemTitle nvarchar(254),
	@ItemType nvarchar(50),
	@LibraryItemGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80),
	@AddedByUserGuidId nvarchar(50)
)
AS

IF EXISTS(SELECT 1 FROM LibraryItems WHERE SourceGuid = @SourceGuid AND LibraryName = @LibraryName)
BEGIN
	RETURN 0
END


INSERT INTO [LibraryItems]
( [SourceGuid], [ItemTitle], [ItemType], [LibraryItemGuid], [DataSourceOwnerUserID], [LibraryOwnerUserID], [LibraryName], [AddedByUserGuidId]
)
VALUES
( @SourceGuid, @ItemTitle, @ItemType, @LibraryItemGuid, @DataSourceOwnerUserID, @LibraryOwnerUserID, @LibraryName, @AddedByUserGuidId
)

RETURN 1
GO
/****** Object:  StoredProcedure [dbo].[sp_GetMetaData]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROCEDURE [dbo].[sp_GetMetaData] @SourceGuid nvarchar(50)
 AS
 select AttributeName, AttributeValue 
 from SourceAttribute
 where [SourceGuid] = @SourceGuid
 order by [AttributeName]
GO
/****** Object:  Trigger [trigArchiveHistContentType_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigArchiveHistContentType_Update]
   ON [dbo].[ArchiveHistContentType]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ArchiveHistContentType 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ArchiveHistContentType.ArchiveID = inserted.ArchiveID
     and ArchiveHistContentType.Directory = inserted.Directory
     and ArchiveHistContentType.FileType = inserted.FileType
 End
GO
/****** Object:  View [dbo].[gv_ProcessFileAs]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ProcessFileAs]
AS
/*
** Select all rows from the ProcessFileAs table
** and the lookup expressions defined for associated tables
*/
SELECT [ProcessFileAs].* FROM [ProcessFileAs]
GO
/****** Object:  View [dbo].[gv_PgmTrace]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_PgmTrace]
AS
/*
** Select all rows from the PgmTrace table
** and the lookup expressions defined for associated tables
*/
SELECT [PgmTrace].* FROM [PgmTrace]
GO
/****** Object:  View [dbo].[gv_FilesToDelete]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_FilesToDelete]
AS
/*
** Select all rows from the FilesToDelete table
** and the lookup expressions defined for associated tables
*/
SELECT [FilesToDelete].* FROM [FilesToDelete]
GO
/****** Object:  View [dbo].[gv_ExcludeFrom]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ExcludeFrom]
AS
/*
** Select all rows from the ExcludeFrom table
** and the lookup expressions defined for associated tables
*/
SELECT [ExcludeFrom].* FROM [ExcludeFrom]
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistContentTypeUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistContentTypeUpdProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistContentTypeUpdProc]
(
    @ArchiveID            nvarchar(50),
    @Directory            nvarchar(254),
    @FileType             nvarchar(50),
    @NbrFilesArchived     int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE ArchiveHistContentType
       SET NbrFilesArchived      = @NbrFilesArchived
     WHERE ArchiveID = @ArchiveID
       AND Directory = @Directory
       AND FileType  = @FileType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ArchiveHistContentTypeUpdProc: Cannot update  in ArchiveHistContentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistContentTypeSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistContentTypeSelProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistContentTypeSelProc]
(
    @ArchiveID            nvarchar(50),
    @Directory            nvarchar(254),
    @FileType             nvarchar(50))
AS
BEGIN
    SELECT ArchiveID,
           Directory,
           FileType,
           NbrFilesArchived
      FROM ArchiveHistContentType
     WHERE ArchiveID = @ArchiveID
       AND Directory = @Directory
       AND FileType  = @FileType

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistContentTypeInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistContentTypeInsProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistContentTypeInsProc]
(
    @ArchiveID            nvarchar(50),
    @Directory            nvarchar(254),
    @FileType             nvarchar(50),
    @NbrFilesArchived     int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ArchiveHistContentType(ArchiveID,
                                       Directory,
                                       FileType,
                                       NbrFilesArchived)
    VALUES(@ArchiveID,
           @Directory,
           @FileType,
           @NbrFilesArchived)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ArchiveHistContentTypeInsProc: Cannot insert because primary key value not found in ArchiveHistContentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistContentTypeDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistContentTypeDelProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistContentTypeDelProc]
(
    @ArchiveID            nvarchar(50),
    @Directory            nvarchar(254),
    @FileType             nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ArchiveHistContentType
     WHERE ArchiveID = @ArchiveID
       AND Directory = @Directory
       AND FileType  = @FileType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ArchiveHistContentTypeDelProc: Cannot delete because foreign keys still exist in ArchiveHistContentType '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ArchiveHistContentType_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ArchiveHistContentType_INS]
   ON [dbo].[ArchiveHistContentType]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ArchiveHistContentType
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ArchiveHistContentType t
   JOIN inserted i
   ON 
     t.ArchiveID = i.ArchiveID
     and t.Directory = i.Directory
     and t.FileType = i.FileType
GO
/****** Object:  View [dbo].[gv_DataOwners]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DataOwners]
AS
/*
** Select all rows from the DataOwners table
** and the lookup expressions defined for associated tables
*/
SELECT [DataOwners].* FROM [DataOwners]
GO
/****** Object:  View [dbo].[gv_EcmUser]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_EcmUser]
AS
/*
** Select all rows from the EcmUser table
** and the lookup expressions defined for associated tables
*/
SELECT [EcmUser].* FROM [EcmUser]
GO
/****** Object:  View [dbo].[gv_DeleteFrom]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DeleteFrom]
AS
/*
** Select all rows from the DeleteFrom table
** and the lookup expressions defined for associated tables
*/
SELECT [DeleteFrom].* FROM [DeleteFrom]
GO
/****** Object:  View [dbo].[gv_DB_Updates]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DB_Updates]
AS
/*
** Select all rows from the DB_Updates table
** and the lookup expressions defined for associated tables
*/
SELECT [DB_Updates].* FROM [DB_Updates]
GO
/****** Object:  View [dbo].[gv_DB_UpdateHist]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DB_UpdateHist]
AS
/*
** Select all rows from the DB_UpdateHist table
** and the lookup expressions defined for associated tables
*/
SELECT [DB_UpdateHist].* FROM [DB_UpdateHist]
GO
/****** Object:  View [dbo].[gv_DataTypeCodes]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DataTypeCodes]
AS
/*
** Select all rows from the DataTypeCodes table
** and the lookup expressions defined for associated tables
*/
SELECT [DataTypeCodes].* FROM [DataTypeCodes]
GO
/****** Object:  View [dbo].[gv_DataSourceRestoreHistory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_DataSourceRestoreHistory]
AS
/*
** Select all rows from the DataSourceRestoreHistory table
** and the lookup expressions defined for associated tables
*/
SELECT [DataSourceRestoreHistory].* FROM [DataSourceRestoreHistory]
GO
/****** Object:  View [dbo].[gv_SourceAttribute]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SourceAttribute]
AS
/*
** Select all rows from the SourceAttribute table
** and the lookup expressions defined for associated tables
*/
SELECT [SourceAttribute].* FROM [SourceAttribute]
GO
/****** Object:  View [dbo].[gv_RestorationHistory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RestorationHistory]
AS
/*
** Select all rows from the RestorationHistory table
** and the lookup expressions defined for associated tables
*/
SELECT [RestorationHistory].* FROM [RestorationHistory]
GO
/****** Object:  View [dbo].[gv_LibraryItems]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_LibraryItems]
AS
/*
** Select all rows from the LibraryItems table
** and the lookup expressions defined for associated tables
*/
SELECT [LibraryItems].* FROM [LibraryItems]
GO
/****** Object:  View [dbo].[gv_OwnerHistory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_OwnerHistory]
AS
/*
** Select all rows from the OwnerHistory table
** and the lookup expressions defined for associated tables
*/
SELECT [OwnerHistory].* FROM [OwnerHistory]
GO
/****** Object:  View [dbo].[gv_OutlookFrom]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_OutlookFrom]
AS
/*
** Select all rows from the OutlookFrom table
** and the lookup expressions defined for associated tables
*/
SELECT [OutlookFrom].* FROM [OutlookFrom]
GO
/****** Object:  View [dbo].[gv_License]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_License]
AS
/*
** Select all rows from the License table
** and the lookup expressions defined for associated tables
*/
SELECT [License].* FROM [License]
GO
/****** Object:  View [dbo].[gv_IncludeImmediate]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_IncludeImmediate]
AS
/*
** Select all rows from the IncludeImmediate table
** and the lookup expressions defined for associated tables
*/
SELECT [IncludeImmediate].* FROM [IncludeImmediate]
GO
/****** Object:  View [dbo].[gv_IncludedFiles]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_IncludedFiles]
AS
/*
** Select all rows from the IncludedFiles table
** and the lookup expressions defined for associated tables
*/
SELECT [IncludedFiles].* FROM [IncludedFiles]
GO
/****** Object:  View [dbo].[gv_ImageTypeCodes]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ImageTypeCodes]
AS
/*
** Select all rows from the ImageTypeCodes table
** and the lookup expressions defined for associated tables
*/
SELECT [ImageTypeCodes].* FROM [ImageTypeCodes]
GO
/****** Object:  View [dbo].[gv_HelpTextUser]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_HelpTextUser]
AS
/*
** Select all rows from the HelpTextUser table
** and the lookup expressions defined for associated tables
*/
SELECT [HelpTextUser].* FROM [HelpTextUser]
GO
/****** Object:  View [dbo].[gv_QuickDirectory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_QuickDirectory]
AS
/*
** Select all rows from the QuickDirectory table
** and the lookup expressions defined for associated tables
*/
SELECT [QuickDirectory].* FROM [QuickDirectory]
GO
/****** Object:  StoredProcedure [dbo].[gp_WebSource_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_WebSource_Delete]
(
	@SourceGuid nvarchar(50)
)
AS
/*
** Delete a row from the WebSource table
*/
DELETE FROM [WebSource] WHERE [SourceGuid] = @SourceGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the WebSource table', 16, 1)
END
GO
/****** Object:  Trigger [trigArchiveFrom_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigArchiveFrom_Update]
   ON [dbo].[ArchiveFrom]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ArchiveFrom 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ArchiveFrom.FromEmailAddr = inserted.FromEmailAddr
     and ArchiveFrom.SenderName = inserted.SenderName
     and ArchiveFrom.UserID = inserted.UserID
 End
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_Delete]
(
	@SeqNo int
)
AS
/*
** Delete a row from the DataSourceRestoreHistory table
*/
DELETE FROM [DataSourceRestoreHistory] WHERE [SeqNo] = @SeqNo

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DataSourceRestoreHistory table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DataOwners_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataOwners_Delete]
(
	@SourceGuid nvarchar(50),
	@UserID nvarchar(50),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Delete a row from the DataOwners table
*/
DELETE FROM [DataOwners] WHERE [SourceGuid] = @SourceGuid AND [UserID] = @UserID AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DataOwners table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactFrom_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactFrom_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the ContactFrom table
*/
DELETE FROM [ContactFrom] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ContactFrom table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DataTypeCodes_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataTypeCodes_Delete]
(
	@FileType nvarchar(255)
)
AS
/*
** Delete a row from the DataTypeCodes table
*/
DELETE FROM [DataTypeCodes] WHERE [FileType] = @FileType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DataTypeCodes table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_UpdateHist_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_UpdateHist_Delete]
(
	@FixID int,
	@CompanyID nvarchar(50),
	@MachineName nvarchar(50)
)
AS
/*
** Delete a row from the DB_UpdateHist table
*/
DELETE FROM [DB_UpdateHist] WHERE [FixID] = @FixID AND [CompanyID] = @CompanyID AND [MachineName] = @MachineName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DB_UpdateHist table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_Updates_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_Updates_Delete]
(
	@FixID int
)
AS
/*
** Delete a row from the DB_Updates table
*/
DELETE FROM [DB_Updates] WHERE [FixID] = @FixID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DB_Updates table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_DeleteFrom_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DeleteFrom_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the DeleteFrom table
*/
DELETE FROM [DeleteFrom] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the DeleteFrom table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludedFiles_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludedFiles_Delete]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Delete a row from the ExcludedFiles table
*/
DELETE FROM [ExcludedFiles] WHERE [UserID] = @UserID AND [ExtCode] = @ExtCode AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ExcludedFiles table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailFolder_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailFolder_Delete]
(
	@UserID nvarchar(80),
	@FolderID nvarchar(100)
)
AS
/*
** Delete a row from the EmailFolder table
*/
DELETE FROM [EmailFolder] WHERE [UserID] = @UserID AND [FolderID] = @FolderID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the EmailFolder table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_EcmUser_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EcmUser_Delete]
(
	@EMail nvarchar(50)
)
AS
/*
** Delete a row from the EcmUser table
*/
DELETE FROM [EcmUser] WHERE [EMail] = @EMail

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the EcmUser table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludeFrom_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludeFrom_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the ExcludeFrom table
*/
DELETE FROM [ExcludeFrom] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ExcludeFrom table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_FilesToDelete_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FilesToDelete_Delete]
(
	@UserID nvarchar(50),
	@MachineName nvarchar(100),
	@FQN nvarchar(254)
)
AS
/*
** Delete a row from the FilesToDelete table
*/
DELETE FROM [FilesToDelete] WHERE [UserID] = @UserID AND [MachineName] = @MachineName AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the FilesToDelete table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludedFiles_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludedFiles_Delete]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN nvarchar(254)
)
AS
/*
** Delete a row from the IncludedFiles table
*/
DELETE FROM [IncludedFiles] WHERE [UserID] = @UserID AND [ExtCode] = @ExtCode AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the IncludedFiles table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludeImmediate_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludeImmediate_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the IncludeImmediate table
*/
DELETE FROM [IncludeImmediate] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the IncludeImmediate table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryItems_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryItems_Delete]
(
	@LibraryItemGuid nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Delete a row from the LibraryItems table
*/
DELETE FROM [LibraryItems] WHERE [LibraryItemGuid] = @LibraryItemGuid AND [LibraryOwnerUserID] = @LibraryOwnerUserID AND [LibraryName] = @LibraryName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the LibraryItems table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ImageTypeCodes_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ImageTypeCodes_Delete]
(
	@ImageTypeCode nvarchar(50)
)
AS
/*
** Delete a row from the ImageTypeCodes table
*/
DELETE FROM [ImageTypeCodes] WHERE [ImageTypeCode] = @ImageTypeCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ImageTypeCodes table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpText_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpText_Delete]
(
	@ScreenName nvarchar(100),
	@WidgetName nvarchar(100)
)
AS
/*
** Delete a row from the HelpText table
*/
DELETE FROM [HelpText] WHERE [ScreenName] = @ScreenName AND [WidgetName] = @WidgetName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the HelpText table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_GlobalSeachResults_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GlobalSeachResults_Delete]
(
	@ContentGuid nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Delete a row from the GlobalSeachResults table
*/
DELETE FROM [GlobalSeachResults] WHERE [ContentGuid] = @ContentGuid AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the GlobalSeachResults table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_MyTempTable_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_MyTempTable_Delete]
(
	@docid int
)
AS
/*
** Delete a row from the MyTempTable table
*/
DELETE FROM [MyTempTable] WHERE [docid] = @docid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the MyTempTable table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_OutlookFrom_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OutlookFrom_Delete]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Delete a row from the OutlookFrom table
*/
DELETE FROM [OutlookFrom] WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the OutlookFrom table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_Delete]
(
	@RowId int
)
AS
/*
** Delete a row from the OwnerHistory table
*/
DELETE FROM [OwnerHistory] WHERE [RowId] = @RowId

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the OwnerHistory table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickDirectory_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickDirectory_Delete]
(
	@UserID nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Delete a row from the QuickDirectory table
*/
DELETE FROM [QuickDirectory] WHERE [UserID] = @UserID AND [FQN] = @FQN

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the QuickDirectory table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ProcessFileAs_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProcessFileAs_Delete]
(
	@ExtCode nvarchar(50)
)
AS
/*
** Delete a row from the ProcessFileAs table
*/
DELETE FROM [ProcessFileAs] WHERE [ExtCode] = @ExtCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ProcessFileAs table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_Machine_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Machine_Delete]
(
	@MachineName nvarchar(254)
)
AS
/*
** Delete a row from the Machine table
*/
DELETE FROM [Machine] WHERE [MachineName] = @MachineName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Machine table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_License_Delete]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_License_Delete]
(
	@LicenseID int
)
AS
/*
** Delete a row from the License table
*/
DELETE FROM [License] WHERE [LicenseID] = @LicenseID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the License table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SearchHistory_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearchHistory_Delete]
(
	@RowID int
)
AS
/*
** Delete a row from the SearchHistory table
*/
DELETE FROM [SearchHistory] WHERE [RowID] = @RowID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SearchHistory table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceRestoreHistoryUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceRestoreHistoryUpdProc]
(
    @SourceGuid                nvarchar(50),
    @RestoredToMachine         nvarchar(50)             = NULL,
    @RestoreUserName           nvarchar(50)             = NULL,
    @RestoreUserID             nvarchar(50)             = NULL,
    @RestoreUserDomain         nvarchar(254)            = NULL,
    @RestoreDate               datetime                 = NULL,
    @DataSourceOwnerUserID     nvarchar(50),
    @SeqNo                     int,
    @TypeContentCode           nvarchar(50)             = NULL,
    @CreateDate                datetime                 = NULL,
    @DocumentName              nvarchar(254)            = NULL,
    @FQN                       nvarchar(500)            = NULL,
    @VerifiedData              nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE DataSourceRestoreHistory
       SET SourceGuid                 = @SourceGuid,
           RestoredToMachine          = @RestoredToMachine,
           RestoreUserName            = @RestoreUserName,
           RestoreUserID              = @RestoreUserID,
           RestoreUserDomain          = @RestoreUserDomain,
           RestoreDate                = @RestoreDate,
           DataSourceOwnerUserID      = @DataSourceOwnerUserID,
           TypeContentCode            = @TypeContentCode,
           CreateDate                 = @CreateDate,
           DocumentName               = @DocumentName,
           FQN                        = @FQN,
           VerifiedData               = @VerifiedData
     WHERE SeqNo = @SeqNo

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'DataSourceRestoreHistoryUpdProc: Cannot update  in DataSourceRestoreHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceRestoreHistorySelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceRestoreHistorySelProc]
(
    @SeqNo                     int)
AS
BEGIN
    SELECT SourceGuid,
           RestoredToMachine,
           RestoreUserName,
           RestoreUserID,
           RestoreUserDomain,
           RestoreDate,
           DataSourceOwnerUserID,
           SeqNo,
           TypeContentCode,
           CreateDate,
           DocumentName,
           FQN,
           VerifiedData
      FROM DataSourceRestoreHistory
     WHERE SeqNo = @SeqNo

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceRestoreHistoryInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceRestoreHistoryInsProc]
(
    @SourceGuid                nvarchar(50),
    @RestoredToMachine         nvarchar(50)             = NULL,
    @RestoreUserName           nvarchar(50)             = NULL,
    @RestoreUserID             nvarchar(50)             = NULL,
    @RestoreUserDomain         nvarchar(254)            = NULL,
    @RestoreDate               datetime                 = NULL,
    @DataSourceOwnerUserID     nvarchar(50),
    @TypeContentCode           nvarchar(50)             = NULL,
    @CreateDate                datetime                 = NULL,
    @DocumentName              nvarchar(254)            = NULL,
    @FQN                       nvarchar(500)            = NULL,
    @VerifiedData              nchar(1)                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataSourceRestoreHistory(SourceGuid,
                                         RestoredToMachine,
                                         RestoreUserName,
                                         RestoreUserID,
                                         RestoreUserDomain,
                                         RestoreDate,
                                         DataSourceOwnerUserID,
                                         TypeContentCode,
                                         CreateDate,
                                         DocumentName,
                                         FQN,
                                         VerifiedData)
    VALUES(@SourceGuid,
           @RestoredToMachine,
           @RestoreUserName,
           @RestoreUserID,
           @RestoreUserDomain,
           @RestoreDate,
           @DataSourceOwnerUserID,
           @TypeContentCode,
           @CreateDate,
           @DocumentName,
           @FQN,
           @VerifiedData)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataSourceRestoreHistoryInsProc: Cannot insert because primary key value not found in DataSourceRestoreHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataSourceRestoreHistoryDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataSourceRestoreHistoryDelProc]
(
    @SeqNo                     int)
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DataSourceRestoreHistory
     WHERE SeqNo = @SeqNo

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DataSourceRestoreHistoryDelProc: Cannot delete because foreign keys still exist in DataSourceRestoreHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [DataSourceRestoreHistory_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[DataSourceRestoreHistory_INS]
   ON [dbo].[DataSourceRestoreHistory]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE DataSourceRestoreHistory
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM DataSourceRestoreHistory t
   JOIN inserted i
   ON 
     t.SeqNo = i.SeqNo
GO
/****** Object:  StoredProcedure [dbo].[ContactFromUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactFromUpdProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25),
    @Verified          int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE ContactFrom
       SET Verified           = @Verified
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ContactFromUpdProc: Cannot update  in ContactFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ContactFromSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactFromSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID,
           Verified
      FROM ContactFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ContactFromInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactFromInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25),
    @Verified          int                      = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ContactFrom(FromEmailAddr,
                            SenderName,
                            UserID,
                            Verified)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID,
           @Verified)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ContactFromInsProc: Cannot insert because primary key value not found in ContactFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ContactFromDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ContactFromDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ContactFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ContactFromDelProc: Cannot delete because foreign keys still exist in ContactFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ContactFrom_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ContactFrom_INS]
   ON [dbo].[ContactFrom]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ContactFrom
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ContactFrom t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[ActiveSearchGuidsInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ActiveSearchGuidsInsProc]
(
    @UserID      nvarchar(50),
    @DocGuid     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ActiveSearchGuids(UserID,
                                  DocGuid 
                                  )
    VALUES(@UserID,
           @DocGuid 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ActiveSearchGuidsInsProc: Cannot insert because primary key value not found in ActiveSearchGuids '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Table [dbo].[Attributes]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[Attributes](
	[AttributeName] [nvarchar](50) NOT NULL,
	[AttributeDataType] [nvarchar](50) NOT NULL,
	[AttributeDesc] [nvarchar](2000) NULL,
	[AssoApplication] [nvarchar](50) NULL,
	[AllowedValues] [nvarchar](254) NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK36] PRIMARY KEY CLUSTERED 
(
	[AttributeName] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  StoredProcedure [dbo].[ExcludedFilesSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludedFilesSelProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         varchar(254))
AS
BEGIN
    SELECT UserID,
           ExtCode,
           FQN
      FROM ExcludedFiles
     WHERE UserID  = @UserID
       AND ExtCode = @ExtCode
       AND FQN     = @FQN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ExcludedFilesInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludedFilesInsProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         varchar(254))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ExcludedFiles(UserID,
                              ExtCode,
                              FQN)
    VALUES(@UserID,
           @ExtCode,
           @FQN)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ExcludedFilesInsProc: Cannot insert because primary key value not found in ExcludedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ExcludedFilesDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludedFilesDelProc]
(
    @UserID      nvarchar(50),
    @ExtCode     nvarchar(50),
    @FQN         varchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ExcludedFiles
     WHERE UserID  = @UserID
       AND ExtCode = @ExtCode
       AND FQN     = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ExcludedFilesDelProc: Cannot delete because foreign keys still exist in ExcludedFiles '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ExcludedFiles_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ExcludedFiles_INS]
   ON [dbo].[ExcludedFiles]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ExcludedFiles
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ExcludedFiles t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.ExtCode = i.ExtCode
     and t.FQN = i.FQN
GO
/****** Object:  StoredProcedure [dbo].[EcmUserUpdProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmUserUpdProc 
 */

CREATE PROCEDURE [dbo].[EcmUserUpdProc]
(
    @EMail           nvarchar(50),
    @PhoneNumber     nvarchar(20)             = NULL,
    @YourName        nvarchar(100)            = NULL,
    @YourCompany     nvarchar(50)             = NULL,
    @PassWord        nvarchar(50)             = NULL,
    @Authority       nchar(1)                 = NULL,
    @CreateDate      datetime                 = NULL,
    @CompanyID       nvarchar(50)             = NULL,
    @LastUpdate      datetime                 = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE EcmUser
       SET PhoneNumber      = @PhoneNumber,
           YourName         = @YourName,
           YourCompany      = @YourCompany,
           PassWord         = @PassWord,
           Authority        = @Authority,
           CreateDate       = @CreateDate,
           CompanyID        = @CompanyID,
           LastUpdate       = @LastUpdate
     WHERE EMail = @EMail

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'EcmUserUpdProc: Cannot update  in EcmUser '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmUserSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmUserSelProc 
 */

CREATE PROCEDURE [dbo].[EcmUserSelProc]
(
    @EMail           nvarchar(50))
AS
BEGIN
    SELECT EMail,
           PhoneNumber,
           YourName,
           YourCompany,
           PassWord,
           Authority,
           CreateDate,
           CompanyID,
           LastUpdate
      FROM EcmUser
     WHERE EMail = @EMail

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[EcmUserInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmUserInsProc 
 */

CREATE PROCEDURE [dbo].[EcmUserInsProc]
(
    @EMail           nvarchar(50),
    @PhoneNumber     nvarchar(20)             = NULL,
    @YourName        nvarchar(100)            = NULL,
    @YourCompany     nvarchar(50)             = NULL,
    @PassWord        nvarchar(50)             = NULL,
    @Authority       nchar(1)                 = NULL,
    @CreateDate      datetime                 = NULL,
    @CompanyID       nvarchar(50)             = NULL,
    @LastUpdate      datetime                 = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EcmUser(EMail,
                        PhoneNumber,
                        YourName,
                        YourCompany,
                        PassWord,
                        Authority,
                        CreateDate,
                        CompanyID,
                        LastUpdate)
    VALUES(@EMail,
           @PhoneNumber,
           @YourName,
           @YourCompany,
           @PassWord,
           @Authority,
           @CreateDate,
           @CompanyID,
           @LastUpdate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EcmUserInsProc: Cannot insert because primary key value not found in EcmUser '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[EcmUserDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: EcmUserDelProc 
 */

CREATE PROCEDURE [dbo].[EcmUserDelProc]
(
    @EMail           nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM EcmUser
     WHERE EMail = @EMail

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'EcmUserDelProc: Cannot delete because foreign keys still exist in EcmUser '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [EcmUser_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[EcmUser_INS]
   ON [dbo].[EcmUser]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE EcmUser
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM EcmUser t
   JOIN inserted i
   ON 
     t.EMail = i.EMail
GO
/****** Object:  StoredProcedure [dbo].[ExcludeFromSelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludeFromSelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    SELECT FromEmailAddr,
           SenderName,
           UserID
      FROM ExcludeFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ExcludeFromInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludeFromInsProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ExcludeFrom(FromEmailAddr,
                            SenderName,
                            UserID)
    VALUES(@FromEmailAddr,
           @SenderName,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ExcludeFromInsProc: Cannot insert because primary key value not found in ExcludeFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[ExcludeFromDelProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ExcludeFromDelProc]
(
    @FromEmailAddr     nvarchar(254),
    @SenderName        varchar(254),
    @UserID            varchar(25))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ExcludeFrom
     WHERE FromEmailAddr = @FromEmailAddr
       AND SenderName    = @SenderName
       AND UserID        = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ExcludeFromDelProc: Cannot delete because foreign keys still exist in ExcludeFrom '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [ExcludeFrom_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ExcludeFrom_INS]
   ON [dbo].[ExcludeFrom]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ExcludeFrom
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ExcludeFrom t
   JOIN inserted i
   ON 
     t.FromEmailAddr = i.FromEmailAddr
     and t.SenderName = i.SenderName
     and t.UserID = i.UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_Delete]
(
	@ArchiveID nvarchar(50),
	@Directory nvarchar(254),
	@FileType nvarchar(50)
)
AS
/*
** Delete a row from the ArchiveHistContentType table
*/
DELETE FROM [ArchiveHistContentType] WHERE [ArchiveID] = @ArchiveID AND [Directory] = @Directory AND [FileType] = @FileType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ArchiveHistContentType table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveStats_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveStats_Delete]
(
	@StatGuid nvarchar(50)
)
AS
/*
** Delete a row from the ArchiveStats table
*/
DELETE FROM [ArchiveStats] WHERE [StatGuid] = @StatGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ArchiveStats table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_AssignableUserParameters_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AssignableUserParameters_Delete]
(
	@ParmName nchar(50)
)
AS
/*
** Delete a row from the AssignableUserParameters table
*/
DELETE FROM [AssignableUserParameters] WHERE [ParmName] = @ParmName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the AssignableUserParameters table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypes_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypes_Delete]
(
	@ExtCode nvarchar(50)
)
AS
/*
** Delete a row from the AvailFileTypes table
*/
DELETE FROM [AvailFileTypes] WHERE [ExtCode] = @ExtCode

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the AvailFileTypes table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypesUndefined_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypesUndefined_Delete]
(
	@FileType nvarchar(50)
)
AS
/*
** Delete a row from the AvailFileTypesUndefined table
*/
DELETE FROM [AvailFileTypesUndefined] WHERE [FileType] = @FileType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the AvailFileTypesUndefined table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactsArchive_Delete]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactsArchive_Delete]
(
	@Email1Address nvarchar(80),
	@FullName nvarchar(80),
	@UserID char(25)
)
AS
/*
** Delete a row from the ContactsArchive table
*/
DELETE FROM [ContactsArchive] WHERE [Email1Address] = @Email1Address AND [FullName] = @FullName AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ContactsArchive table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[RiskLevelInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: RiskLevelInsProc 
 */

CREATE PROCEDURE [dbo].[RiskLevelInsProc]
(
    @RiskCode        char(10)                  = NULL,
    @Description     nvarchar(4000)            = NULL,
    @CreateDate      datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO RiskLevel(RiskCode,
                          Description,
                          CreateDate)
    VALUES(@RiskCode,
           @Description,
           @CreateDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RiskLevelInsProc: Cannot insert because primary key value not found in RiskLevel '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttributeUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeUpdProc 
 */

CREATE PROCEDURE [dbo].[SourceAttributeUpdProc]
(
    @AttributeValue     nvarchar(254)            = NULL,
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE SourceAttribute
       SET AttributeValue      = @AttributeValue
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'SourceAttributeUpdProc: Cannot update  in SourceAttribute '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SourceAttributeSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: SourceAttributeSelProc 
 */

CREATE PROCEDURE [dbo].[SourceAttributeSelProc]
(
    @AttributeName      nvarchar(50),
    @SourceGuid         nvarchar(50))
AS
BEGIN
    SELECT AttributeValue,
           AttributeName,
           SourceGuid
      FROM SourceAttribute
     WHERE AttributeName = @AttributeName
       AND SourceGuid    = @SourceGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickDirectoryUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickDirectoryUpdProc]
(
    @UserID             nvarchar(50),
    @IncludeSubDirs     char(1)                 = NULL,
    @FQN                varchar(254),
    @DB_ID              nvarchar(50),
    @VersionFiles       char(1)                 = NULL,
    @ckMetaData         nchar(1)                = NULL,
    @ckPublic           nchar(1)                = NULL,
    @ckDisableDir       nchar(1)                = NULL,
    @QuickRefEntry      bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE QuickDirectory
       SET IncludeSubDirs      = @IncludeSubDirs,
           DB_ID               = @DB_ID,
           VersionFiles        = @VersionFiles,
           ckMetaData          = @ckMetaData,
           ckPublic            = @ckPublic,
           ckDisableDir        = @ckDisableDir,
           QuickRefEntry       = @QuickRefEntry
     WHERE UserID = @UserID
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'QuickDirectoryUpdProc: Cannot update  in QuickDirectory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickDirectorySelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickDirectorySelProc]
(
    @UserID             nvarchar(50),
    @FQN                varchar(254))
AS
BEGIN
    SELECT UserID,
           IncludeSubDirs,
           FQN,
           DB_ID,
           VersionFiles,
           ckMetaData,
           ckPublic,
           ckDisableDir,
           QuickRefEntry
      FROM QuickDirectory
     WHERE UserID = @UserID
       AND FQN    = @FQN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[QuickDirectoryInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickDirectoryInsProc]
(
    @UserID             nvarchar(50),
    @IncludeSubDirs     char(1)                 = NULL,
    @FQN                varchar(254),
    @DB_ID              nvarchar(50),
    @VersionFiles       char(1)                 = NULL,
    @ckMetaData         nchar(1)                = NULL,
    @ckPublic           nchar(1)                = NULL,
    @ckDisableDir       nchar(1)                = NULL,
    @QuickRefEntry      bit                     = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO QuickDirectory(UserID,
                               IncludeSubDirs,
                               FQN,
                               DB_ID,
                               VersionFiles,
                               ckMetaData,
                               ckPublic,
                               ckDisableDir,
                               QuickRefEntry)
    VALUES(@UserID,
           @IncludeSubDirs,
           @FQN,
           @DB_ID,
           @VersionFiles,
           @ckMetaData,
           @ckPublic,
           @ckDisableDir,
           @QuickRefEntry)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'QuickDirectoryInsProc: Cannot insert because primary key value not found in QuickDirectory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[QuickDirectoryDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[QuickDirectoryDelProc]
(
    @UserID             nvarchar(50),
    @FQN                varchar(254))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM QuickDirectory
     WHERE UserID = @UserID
       AND FQN    = @FQN

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'QuickDirectoryDelProc: Cannot delete because foreign keys still exist in QuickDirectory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [QuickDirectory_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[QuickDirectory_INS]
   ON [dbo].[QuickDirectory]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE QuickDirectory
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM QuickDirectory t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.FQN = i.FQN
GO
/****** Object:  View [dbo].[gv_UserCurrParm]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UserCurrParm]
AS
/*
** Select all rows from the UserCurrParm table
** and the lookup expressions defined for associated tables
*/
SELECT [UserCurrParm].* FROM [UserCurrParm]
GO
/****** Object:  View [dbo].[gv_UrlRejection]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UrlRejection]
AS
/*
** Select all rows from the UrlRejection table
** and the lookup expressions defined for associated tables
*/
SELECT [UrlRejection].* FROM [UrlRejection]
GO
/****** Object:  View [dbo].[gv_UrlList]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_UrlList]
AS
/*
** Select all rows from the UrlList table
** and the lookup expressions defined for associated tables
*/
SELECT [UrlList].* FROM [UrlList]
GO
/****** Object:  View [dbo].[gv_upgrade_status]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_upgrade_status]
AS
/*
** Select all rows from the upgrade_status table
** and the lookup expressions defined for associated tables
*/
SELECT [upgrade_status].* FROM [upgrade_status]
GO
/****** Object:  StoredProcedure [dbo].[gp_sysdiagrams_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_sysdiagrams_Insert]
(
	@name nvarchar(128),
	@principal_id int,
	@version int,
	@definition varbinary(max)
)
AS
/*
** Add a row to the sysdiagrams table
*/

INSERT INTO [sysdiagrams]
( [name], [principal_id], [version], [definition]
)
VALUES
( @name, @principal_id, @version, @definition
)

/*
** Select the new row
*/
SELECT
	gv_sysdiagrams.*
FROM
	gv_sysdiagrams
WHERE
	[diagram_id] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_sysdiagrams_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_sysdiagrams_Delete]
(
	@diagram_id int
)
AS
/*
** Delete a row from the sysdiagrams table
*/
DELETE FROM [sysdiagrams] WHERE [diagram_id] = @diagram_id

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the sysdiagrams table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceAttribute_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceAttribute_Delete]
(
	@AttributeName nvarchar(50),
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Delete a row from the SourceAttribute table
*/
DELETE FROM [SourceAttribute] WHERE [AttributeName] = @AttributeName AND [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SourceAttribute table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SavedItems_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SavedItems_Delete]
(
	@Userid nvarchar(50),
	@SaveName nvarchar(50),
	@SaveTypeCode nvarchar(50),
	@ValName nvarchar(50)
)
AS
/*
** Delete a row from the SavedItems table
*/
DELETE FROM [SavedItems] WHERE [Userid] = @Userid AND [SaveName] = @SaveName AND [SaveTypeCode] = @SaveTypeCode AND [ValName] = @ValName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SavedItems table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_RunParms_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RunParms_Delete]
(
	@Parm nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Delete a row from the RunParms table
*/
DELETE FROM [RunParms] WHERE [Parm] = @Parm AND [UserID] = @UserID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the RunParms table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_RetentionTemp_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RetentionTemp_Delete]
(
	@ContentGuid nvarchar(50)
)
AS
/*
** Delete a row from the RetentionTemp table
*/
DELETE FROM [RetentionTemp] WHERE [ContentGuid] = @ContentGuid

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the RetentionTemp table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_SystemParms_Delete]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SystemParms_Delete]
(
	@SysParm nvarchar(50)
)
AS
/*
** Delete a row from the SystemParms table
*/
DELETE FROM [SystemParms] WHERE [SysParm] = @SysParm

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the SystemParms table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_sysdiagrams_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_sysdiagrams_Update]
(
	@diagram_idOriginal int,
	@name nvarchar(128),
	@principal_id int,
	@version int,
	@definition varbinary(max)
)
AS
/*
** Update a row in the sysdiagrams table using the primary key
*/
UPDATE [sysdiagrams] SET [name] = @name, [principal_id] = @principal_id, [version] = @version, [definition] = @definition WHERE [diagram_id] = @diagram_idOriginal


/*
** Select the updated row
*/
SELECT
	gv_sysdiagrams.*
FROM
	gv_sysdiagrams
WHERE
	[diagram_id] = @diagram_idOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlRejection_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlRejection_Delete]
(
	@RejectionPattern nvarchar(50)
)
AS
/*
** Delete a row from the UrlRejection table
*/
DELETE FROM [UrlRejection] WHERE [RejectionPattern] = @RejectionPattern

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the UrlRejection table', 16, 1)
END
GO
/****** Object:  View [dbo].[gv_ActiveSearchGuids]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ActiveSearchGuids]
AS
/*
** Select all rows from the ActiveSearchGuids table
** and the lookup expressions defined for associated tables
*/
SELECT [ActiveSearchGuids].* FROM [ActiveSearchGuids]
GO
/****** Object:  View [dbo].[gv_GlobalSeachResults]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_GlobalSeachResults]
AS
/*
** Select all rows from the GlobalSeachResults table
** and the lookup expressions defined for associated tables
*/
SELECT [GlobalSeachResults].* FROM [GlobalSeachResults]
GO
/****** Object:  View [dbo].[gv_HelpText]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_HelpText]
AS
/*
** Select all rows from the HelpText table
** and the lookup expressions defined for associated tables
*/
SELECT [HelpText].* FROM [HelpText]
GO
/****** Object:  StoredProcedure [dbo].[LibraryItemsUpdProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryItemsUpdProc]
(
    @SourceGuid                nvarchar(50)             = NULL,
    @ItemTitle                 nvarchar(254)            = NULL,
    @ItemType                  nvarchar(50)             = NULL,
    @LibraryItemGuid           nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50)             = NULL,
    @LibraryOwnerUserID        nvarchar(50),
    @LibraryName               nvarchar(80),
    @AddedByUserGuidId         nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE LibraryItems
       SET SourceGuid                 = @SourceGuid,
           ItemTitle                  = @ItemTitle,
           ItemType                   = @ItemType,
           DataSourceOwnerUserID      = @DataSourceOwnerUserID,
           AddedByUserGuidId          = @AddedByUserGuidId
     WHERE LibraryItemGuid    = @LibraryItemGuid
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'LibraryItemsUpdProc: Cannot update  in LibraryItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryItemsSelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryItemsSelProc]
(
    @LibraryItemGuid           nvarchar(50),
    @LibraryOwnerUserID        nvarchar(50),
    @LibraryName               nvarchar(80))
AS
BEGIN
    SELECT SourceGuid,
           ItemTitle,
           ItemType,
           LibraryItemGuid,
           DataSourceOwnerUserID,
           LibraryOwnerUserID,
           LibraryName,
           AddedByUserGuidId
      FROM LibraryItems
     WHERE LibraryItemGuid    = @LibraryItemGuid
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[LibraryItemsInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryItemsInsProc]
(
    @SourceGuid                nvarchar(50)             = NULL,
    @ItemTitle                 nvarchar(254)            = NULL,
    @ItemType                  nvarchar(50)             = NULL,
    @LibraryItemGuid           nvarchar(50),
    @DataSourceOwnerUserID     nvarchar(50)             = NULL,
    @LibraryOwnerUserID        nvarchar(50),
    @LibraryName               nvarchar(80),
    @AddedByUserGuidId         nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO LibraryItems(SourceGuid,
                             ItemTitle,
                             ItemType,
                             LibraryItemGuid,
                             DataSourceOwnerUserID,
                             LibraryOwnerUserID,
                             LibraryName,
                             AddedByUserGuidId)
    VALUES(@SourceGuid,
           @ItemTitle,
           @ItemType,
           @LibraryItemGuid,
           @DataSourceOwnerUserID,
           @LibraryOwnerUserID,
           @LibraryName,
           @AddedByUserGuidId)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'LibraryItemsInsProc: Cannot insert because primary key value not found in LibraryItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[LibraryItemsDelProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[LibraryItemsDelProc]
(
    @LibraryItemGuid           nvarchar(50),
    @LibraryOwnerUserID        nvarchar(50),
    @LibraryName               nvarchar(80))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM LibraryItems
     WHERE LibraryItemGuid    = @LibraryItemGuid
       AND LibraryOwnerUserID = @LibraryOwnerUserID
       AND LibraryName        = @LibraryName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'LibraryItemsDelProc: Cannot delete because foreign keys still exist in LibraryItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [LibraryItems_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[LibraryItems_INS]
   ON [dbo].[LibraryItems]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE LibraryItems
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM LibraryItems t
   JOIN inserted i
   ON 
     t.LibraryOwnerUserID = i.LibraryOwnerUserID
     and t.LibraryName = i.LibraryName
     and t.LibraryItemGuid = i.LibraryItemGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlList_Delete]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlList_Delete]
(
	@URL nvarchar(425)
)
AS
/*
** Delete a row from the UrlList table
*/
DELETE FROM [UrlList] WHERE [URL] = @URL

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the UrlList table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[EmailFolderInsProc]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[EmailFolderInsProc]
(
    @UserID                 nvarchar(80),
    @FolderName             nvarchar(254)            = NULL,
    @ParentFolderName       nvarchar(254)            = NULL,
    @FolderID               nvarchar(100),
    @ParentFolderID         nvarchar(100)            = NULL,
    @SelectedForArchive     char(1)                  = NULL,
    @StoreID                nvarchar(500)            = NULL,
    @isSysDefault           bit                      = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO EmailFolder(UserID,
                            FolderName,
                            ParentFolderName,
                            FolderID,
                            ParentFolderID,
                            SelectedForArchive,
                            StoreID,
                            isSysDefault)
    VALUES(@UserID,
           @FolderName,
           @ParentFolderName,
           @FolderID,
           @ParentFolderID,
           @SelectedForArchive,
           @StoreID,
           @isSysDefault)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'EmailFolderInsProc: Cannot insert because primary key value not found in EmailFolder '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  View [dbo].[vExchangeHostPop]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create view [dbo].[vExchangeHostPop] as 
SELECT [HostNameIp],[UserLoginID],[LoginPw],[PortNbr],[DeleteAfterDownload],[RetentionCode], SSL, IMAP, FolderName, LibraryName, isPublic, DaysToHold, strReject, ConvertEmlToMSG FROM [ExchangeHostPop]
GO
/****** Object:  Trigger [trigWebSource_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigWebSource_Update]
   ON [dbo].[WebSource]
         AFTER Update 
   AS
         BEGIN 
         UPDATE WebSource 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      WebSource.SourceGuid = inserted.SourceGuid
 End
GO
/****** Object:  Trigger [trigRunParms_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigRunParms_Update]
   ON [dbo].[RunParms]
         AFTER Update 
   AS
         BEGIN 
         UPDATE RunParms 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      RunParms.UserID = inserted.UserID
     and RunParms.Parm = inserted.Parm
 End
GO
/****** Object:  Trigger [trigEcmUser_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigEcmUser_Update]
   ON [dbo].[EcmUser]
         AFTER Update 
   AS
         BEGIN 
         UPDATE EcmUser 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      EcmUser.EMail = inserted.EMail
 End
GO
/****** Object:  Trigger [trigQuickDirectory_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigQuickDirectory_Update]
   ON [dbo].[QuickDirectory]
         AFTER Update 
   AS
         BEGIN 
         UPDATE QuickDirectory 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      QuickDirectory.UserID = inserted.UserID
     and QuickDirectory.FQN = inserted.FQN
 End
GO
/****** Object:  Trigger [trigProcessFileAs_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigProcessFileAs_Update]
   ON [dbo].[ProcessFileAs]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ProcessFileAs 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ProcessFileAs.ExtCode = inserted.ExtCode
 End
GO
/****** Object:  Trigger [trigOwnerHistory_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigOwnerHistory_Update]
   ON [dbo].[OwnerHistory]
         AFTER Update 
   AS
         BEGIN 
         UPDATE OwnerHistory 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      OwnerHistory.RowId = inserted.RowId
 End
GO
/****** Object:  Trigger [trigOutlookFrom_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigOutlookFrom_Update]
   ON [dbo].[OutlookFrom]
         AFTER Update 
   AS
         BEGIN 
         UPDATE OutlookFrom 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      OutlookFrom.FromEmailAddr = inserted.FromEmailAddr
     and OutlookFrom.SenderName = inserted.SenderName
     and OutlookFrom.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigMyTempTable_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigMyTempTable_Update]
   ON [dbo].[MyTempTable]
         AFTER Update 
   AS
         BEGIN 
         UPDATE MyTempTable 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      MyTempTable.docid = inserted.docid
 End
GO
/****** Object:  Trigger [trigLibraryItems_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigLibraryItems_Update]
   ON [dbo].[LibraryItems]
         AFTER Update 
   AS
         BEGIN 
         UPDATE LibraryItems 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      LibraryItems.LibraryOwnerUserID = inserted.LibraryOwnerUserID
     and LibraryItems.LibraryName = inserted.LibraryName
     and LibraryItems.LibraryItemGuid = inserted.LibraryItemGuid
 End
GO
/****** Object:  Trigger [trigIncludeImmediate_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigIncludeImmediate_Update]
   ON [dbo].[IncludeImmediate]
         AFTER Update 
   AS
         BEGIN 
         UPDATE IncludeImmediate 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      IncludeImmediate.FromEmailAddr = inserted.FromEmailAddr
     and IncludeImmediate.SenderName = inserted.SenderName
     and IncludeImmediate.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigIncludedFiles_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigIncludedFiles_Update]
   ON [dbo].[IncludedFiles]
         AFTER Update 
   AS
         BEGIN 
         UPDATE IncludedFiles 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      IncludedFiles.UserID = inserted.UserID
     and IncludedFiles.ExtCode = inserted.ExtCode
     and IncludedFiles.FQN = inserted.FQN
 End
GO
/****** Object:  Trigger [trigExcludeFrom_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigExcludeFrom_Update]
   ON [dbo].[ExcludeFrom]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ExcludeFrom 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ExcludeFrom.FromEmailAddr = inserted.FromEmailAddr
     and ExcludeFrom.SenderName = inserted.SenderName
     and ExcludeFrom.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigExcludedFiles_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigExcludedFiles_Update]
   ON [dbo].[ExcludedFiles]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ExcludedFiles 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ExcludedFiles.UserID = inserted.UserID
     and ExcludedFiles.ExtCode = inserted.ExtCode
     and ExcludedFiles.FQN = inserted.FQN
 End
GO
/****** Object:  Trigger [trigDeleteFrom_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDeleteFrom_Update]
   ON [dbo].[DeleteFrom]
         AFTER Update 
   AS
         BEGIN 
         UPDATE DeleteFrom 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      DeleteFrom.FromEmailAddr = inserted.FromEmailAddr
     and DeleteFrom.SenderName = inserted.SenderName
     and DeleteFrom.UserID = inserted.UserID
 End
GO
/****** Object:  Trigger [trigDataSourceRestoreHistory_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDataSourceRestoreHistory_Update]
   ON [dbo].[DataSourceRestoreHistory]
         AFTER Update 
   AS
         BEGIN 
         UPDATE DataSourceRestoreHistory 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      DataSourceRestoreHistory.SeqNo = inserted.SeqNo
 End
GO
/****** Object:  Trigger [trigDataOwners_Update]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigDataOwners_Update]
   ON [dbo].[DataOwners]
         AFTER Update 
   AS
         BEGIN 
         UPDATE DataOwners 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      DataOwners.SourceGuid = inserted.SourceGuid
     and DataOwners.UserID = inserted.UserID
     and DataOwners.GroupOwnerUserID = inserted.GroupOwnerUserID
     and DataOwners.GroupName = inserted.GroupName
     and DataOwners.DataSourceOwnerUserID = inserted.DataSourceOwnerUserID
 End
GO
/****** Object:  StoredProcedure [dbo].[ArchiveStatsInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[ArchiveStatsInsProc]
(
    @ArchiveStartDate             datetime                = NULL,
    @Status                       nvarchar(50),
    @Successful                   nchar(1)                = NULL,
    @ArchiveType                  nvarchar(50),
    @TotalEmailsInRepository      int                     = NULL,
    @TotalContentInRepository     int                     = NULL,
    @UserID                       nvarchar(50),
    @ArchiveEndDate               datetime                = NULL,
    @StatGuid                     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ArchiveStats(ArchiveStartDate,
                             Status,
                             Successful,
                             ArchiveType,
                             TotalEmailsInRepository,
                             TotalContentInRepository,
                             UserID,
                             ArchiveEndDate,
                             StatGuid 
                             )
    VALUES(@ArchiveStartDate,
           @Status,
           @Successful,
           @ArchiveType,
           @TotalEmailsInRepository,
           @TotalContentInRepository,
           @UserID,
           @ArchiveEndDate,
           @StatGuid 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ArchiveStatsInsProc: Cannot insert because primary key value not found in ArchiveStats '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AssignableUserParametersInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AssignableUserParametersInsProc]
(
    @ParmName     nchar(50),
    @isPerm       bit                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AssignableUserParameters(ParmName,
                                         isPerm)
    VALUES(@ParmName,
           @isPerm)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AssignableUserParametersInsProc: Cannot insert because primary key value not found in AssignableUserParameters '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [trigSourceAttribute_Update]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigSourceAttribute_Update]
   ON [dbo].[SourceAttribute]
         AFTER Update 
   AS
         BEGIN 
         UPDATE SourceAttribute 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      SourceAttribute.AttributeName = inserted.AttributeName
     and SourceAttribute.SourceGuid = inserted.SourceGuid
     and SourceAttribute.DataSourceOwnerUserID = inserted.DataSourceOwnerUserID
 End
GO
/****** Object:  StoredProcedure [dbo].[MachineInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[MachineInsProc]
(
    @MachineName     nvarchar(254))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Machine(MachineName)
    VALUES(@MachineName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'MachineInsProc: Cannot insert because primary key value not found in Machine '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  View [dbo].[gv_SystemParms]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SystemParms]
AS
/*
** Select all rows from the SystemParms table
** and the lookup expressions defined for associated tables
*/
SELECT [SystemParms].* FROM [SystemParms]
GO
/****** Object:  View [dbo].[gv_ArchiveFrom]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ArchiveFrom]
AS
/*
** Select all rows from the ArchiveFrom table
** and the lookup expressions defined for associated tables
*/
SELECT [ArchiveFrom].* FROM [ArchiveFrom]
GO
/****** Object:  StoredProcedure [dbo].[DB_UpdatesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: DB_UpdatesInsProc 
 */

CREATE PROCEDURE [dbo].[DB_UpdatesInsProc]
(
    @SqlStmt            nvarchar(max),
    @CreateDate         datetime,
    @FixID              nvarchar(50),
    @FixDescription     nvarchar(4000)            = NULL,
    @DBName             nvarchar(50)              = NULL,
    @CompanyID          nvarchar(50)              = NULL,
    @MachineName        nvarchar(50)              = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DB_Updates(SqlStmt,
                           CreateDate,
                           FixID,
                           FixDescription,
                           DBName,
                           CompanyID,
                           MachineName)
    VALUES(@SqlStmt,
           @CreateDate,
           @FixID,
           @FixDescription,
           @DBName,
           @CompanyID,
           @MachineName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DB_UpdatesInsProc: Cannot insert because primary key value not found in DB_Updates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DB_UpdatesDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
/* 
 * PROCEDURE: DB_UpdatesDelProc 
 */

CREATE PROCEDURE [dbo].[DB_UpdatesDelProc]
(
    @FixID              nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM DB_Updates
     WHERE FixID = @FixID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'DB_UpdatesDelProc: Cannot delete because foreign keys still exist in DB_Updates '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[SystemParmsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SystemParmsInsProc]
(
    @SysParm         nvarchar(50)             = NULL,
    @SysParmDesc     nvarchar(250)            = NULL,
    @SysParmVal      nvarchar(250)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SystemParms(SysParm,
                            SysParmDesc,
                            SysParmVal)
    VALUES(@SysParm,
           @SysParmDesc,
           @SysParmVal)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SystemParmsInsProc: Cannot insert because primary key value not found in SystemParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[DataTypeCodesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[DataTypeCodesInsProc]
(
    @FileType       nvarchar(255)            = NULL,
    @VerNbr         nvarchar(255)            = NULL,
    @Publisher      nvarchar(255)            = NULL,
    @Definition     nvarchar(255)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO DataTypeCodes(FileType,
                              VerNbr,
                              Publisher,
                              Definition)
    VALUES(@FileType,
           @VerNbr,
           @Publisher,
           @Definition)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'DataTypeCodesInsProc: Cannot insert because primary key value not found in DataTypeCodes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SearchHistoryInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SearchHistoryInsProc]
(
    @SearchSql      nvarchar(max)            = NULL,
    @SearchDate     datetime                 = NULL,
    @UserID         nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SearchHistory(SearchSql,
                              SearchDate,
                              UserID 
                              )
    VALUES(@SearchSql,
           @SearchDate,
           @UserID 
           )

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SearchHistoryInsProc: Cannot insert because primary key value not found in SearchHistory '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[SavedItemsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[SavedItemsInsProc]
(
    @Userid           nvarchar(50),
    @SaveName         nvarchar(50),
    @SaveTypeCode     nvarchar(50),
    @ValName          nvarchar(50),
    @ValValue         nvarchar(254))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO SavedItems(Userid,
                           SaveName,
                           SaveTypeCode,
                           ValName,
                           ValValue)
    VALUES(@Userid,
           @SaveName,
           @SaveTypeCode,
           @ValName,
           @ValValue)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'SavedItemsInsProc: Cannot insert because primary key value not found in SavedItems '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[RuntimeErrorsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RuntimeErrorsInsProc]
(
    @ErrorMsg           nvarchar(max)            = NULL,
    @StackTrace         nvarchar(max)            = NULL,
    @EntryDate          datetime                 = NULL,
    @IdNbr              nvarchar(50)             = NULL,
    @ConnectiveGuid     nvarchar(50)             = NULL,
    @UserID             nvarchar(50)             = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO RuntimeErrors(ErrorMsg,
                              StackTrace,
                              EntryDate,
                              IdNbr,
                              ConnectiveGuid,
                              UserID)
    VALUES(@ErrorMsg,
           @StackTrace,
           @EntryDate,
           @IdNbr,
           @ConnectiveGuid,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RuntimeErrorsInsProc: Cannot insert because primary key value not found in RuntimeErrors '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[RunParmsUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RunParmsUpdProc]
(
    @Parm          nvarchar(50),
    @ParmValue     nvarchar(50)            = NULL,
    @UserID        nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    UPDATE RunParms
       SET ParmValue      = @ParmValue
     WHERE Parm   = @Parm
       AND UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'RunParmsUpdProc: Cannot update  in RunParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RunParmsSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RunParmsSelProc]
(
    @Parm          nvarchar(50),
    @UserID        nvarchar(50))
AS
BEGIN
    SELECT Parm,
           ParmValue,
           UserID
      FROM RunParms
     WHERE Parm   = @Parm
       AND UserID = @UserID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[RunParmsInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RunParmsInsProc]
(
    @Parm          nvarchar(50),
    @ParmValue     nvarchar(50)            = NULL,
    @UserID        nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO RunParms(Parm,
                         ParmValue,
                         UserID)
    VALUES(@Parm,
           @ParmValue,
           @UserID)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'RunParmsInsProc: Cannot insert because primary key value not found in RunParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[RunParmsDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[RunParmsDelProc]
(
    @Parm          nvarchar(50),
    @UserID        nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM RunParms
     WHERE Parm   = @Parm
       AND UserID = @UserID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'RunParmsDelProc: Cannot delete because foreign keys still exist in RunParms '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [RunParms_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[RunParms_INS]
   ON [dbo].[RunParms]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE RunParms
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM RunParms t
   JOIN inserted i
   ON 
     t.UserID = i.UserID
     and t.Parm = i.Parm
GO
/****** Object:  StoredProcedure [dbo].[HelpTextInsProc]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[HelpTextInsProc]
(
    @ScreenName     nvarchar(100),
    @HelpText       nvarchar(max)            = NULL,
    @WidgetName     nvarchar(100))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO HelpText(ScreenName,
                         HelpText,
                         WidgetName)
    VALUES(@ScreenName,
           @HelpText,
           @WidgetName)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'HelpTextInsProc: Cannot insert because primary key value not found in HelpText '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[WebSourceUpdProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[WebSourceUpdProc]
(
    @SourceGuid                  nvarchar(50),
    @CreateDate                  datetime                  = NULL,
    @SourceName                  nvarchar(254)             = NULL,
    @SourceImage                 image                     = NULL,
    @SourceTypeCode              nvarchar(50),
    @FileLength                  int                       = NULL,
    @LastWriteTime               datetime                  = NULL,
    @RetentionExpirationDate     datetime                  = NULL,
    @Description                 nvarchar(max)             = NULL,
    @KeyWords                    nvarchar(2000)            = NULL,
    @Notes                       nvarchar(2000)            = NULL,
    @CreationDate                datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE WebSource
       SET CreateDate                   = @CreateDate,
           SourceName                   = @SourceName,
           SourceImage                  = @SourceImage,
           SourceTypeCode               = @SourceTypeCode,
           FileLength                   = @FileLength,
           LastWriteTime                = @LastWriteTime,
           RetentionExpirationDate      = @RetentionExpirationDate,
           Description                  = @Description,
           KeyWords                     = @KeyWords,
           Notes                        = @Notes,
           CreationDate                 = @CreationDate
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'WebSourceUpdProc: Cannot update  in WebSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[WebSourceSelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[WebSourceSelProc]
(
    @SourceGuid                  nvarchar(50))
AS
BEGIN
    SELECT SourceGuid,
           CreateDate,
           SourceName,
           SourceImage,
           SourceTypeCode,
           FileLength,
           LastWriteTime,
           RetentionExpirationDate,
           Description,
           KeyWords,
           Notes,
           CreationDate
      FROM WebSource
     WHERE SourceGuid = @SourceGuid

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[WebSourceInsProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[WebSourceInsProc]
(
    @SourceGuid                  nvarchar(50),
    @CreateDate                  datetime                  = NULL,
    @SourceName                  nvarchar(254)             = NULL,
    @SourceImage                 image                     = NULL,
    @SourceTypeCode              nvarchar(50),
    @FileLength                  int                       = NULL,
    @LastWriteTime               datetime                  = NULL,
    @RetentionExpirationDate     datetime                  = NULL,
    @Description                 nvarchar(max)             = NULL,
    @KeyWords                    nvarchar(2000)            = NULL,
    @Notes                       nvarchar(2000)            = NULL,
    @CreationDate                datetime                  = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO WebSource(SourceGuid,
                          CreateDate,
                          SourceName,
                          SourceImage,
                          SourceTypeCode,
                          FileLength,
                          LastWriteTime,
                          RetentionExpirationDate,
                          Description,
                          KeyWords,
                          Notes,
                          CreationDate)
    VALUES(@SourceGuid,
           @CreateDate,
           @SourceName,
           @SourceImage,
           @SourceTypeCode,
           @FileLength,
           @LastWriteTime,
           @RetentionExpirationDate,
           @Description,
           @KeyWords,
           @Notes,
           @CreationDate)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'WebSourceInsProc: Cannot insert because primary key value not found in WebSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[WebSourceDelProc]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[WebSourceDelProc]
(
    @SourceGuid                  nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM WebSource
     WHERE SourceGuid = @SourceGuid

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'WebSourceDelProc: Cannot delete because foreign keys still exist in WebSource '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [WebSource_INS]    Script Date: 05/18/2011 16:17:19 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[WebSource_INS]
   ON [dbo].[WebSource]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE WebSource
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM WebSource t
   JOIN inserted i
   ON 
     t.SourceGuid = i.SourceGuid
GO
/****** Object:  Trigger [MyTempTable_INS]    Script Date: 05/18/2011 16:17:18 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[MyTempTable_INS]
   ON [dbo].[MyTempTable]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE MyTempTable
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM MyTempTable t
   JOIN inserted i
   ON 
     t.docid = i.docid
GO
/****** Object:  View [dbo].[gv_SearhParmsHistory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SearhParmsHistory]
AS
/*
** Select all rows from the SearhParmsHistory table
** and the lookup expressions defined for associated tables
*/
SELECT [SearhParmsHistory].* FROM [SearhParmsHistory]
GO
/****** Object:  View [dbo].[gv_SearchHistory]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SearchHistory]
AS
/*
** Select all rows from the SearchHistory table
** and the lookup expressions defined for associated tables
*/
SELECT [SearchHistory].* FROM [SearchHistory]
GO
/****** Object:  View [dbo].[gv_SavedItems]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_SavedItems]
AS
/*
** Select all rows from the SavedItems table
** and the lookup expressions defined for associated tables
*/
SELECT [SavedItems].* FROM [SavedItems]
GO
/****** Object:  View [dbo].[gv_RuntimeErrors]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RuntimeErrors]
AS
/*
** Select all rows from the RuntimeErrors table
** and the lookup expressions defined for associated tables
*/
SELECT [RuntimeErrors].* FROM [RuntimeErrors]
GO
/****** Object:  View [dbo].[gv_RunParms]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RunParms]
AS
/*
** Select all rows from the RunParms table
** and the lookup expressions defined for associated tables
*/
SELECT [RunParms].* FROM [RunParms]
GO
/****** Object:  View [dbo].[gv_RiskLevel]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RiskLevel]
AS
/*
** Select all rows from the RiskLevel table
** and the lookup expressions defined for associated tables
*/
SELECT [RiskLevel].* FROM [RiskLevel]
GO
/****** Object:  View [dbo].[gv_RetentionTemp]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_RetentionTemp]
AS
/*
** Select all rows from the RetentionTemp table
** and the lookup expressions defined for associated tables
*/
SELECT [RetentionTemp].* FROM [RetentionTemp]
GO
/****** Object:  View [dbo].[gv_AssignableUserParameters]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_AssignableUserParameters]
AS
/*
** Select all rows from the AssignableUserParameters table
** and the lookup expressions defined for associated tables
*/
SELECT [AssignableUserParameters].* FROM [AssignableUserParameters]
GO
/****** Object:  View [dbo].[gv_ArchiveStats]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ArchiveStats]
AS
/*
** Select all rows from the ArchiveStats table
** and the lookup expressions defined for associated tables
*/
SELECT [ArchiveStats].* FROM [ArchiveStats]
GO
/****** Object:  View [dbo].[gv_ArchiveHistContentType]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ArchiveHistContentType]
AS
/*
** Select all rows from the ArchiveHistContentType table
** and the lookup expressions defined for associated tables
*/
SELECT [ArchiveHistContentType].* FROM [ArchiveHistContentType]
GO
/****** Object:  View [dbo].[gv_ArchiveHist]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_ArchiveHist]
AS
/*
** Select all rows from the ArchiveHist table
** and the lookup expressions defined for associated tables
*/
SELECT [ArchiveHist].* FROM [ArchiveHist]
GO
/****** Object:  Trigger [ArchiveHistUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ArchiveHistUpdTrig 
 */

CREATE TRIGGER [dbo].[ArchiveHistUpdTrig] ON [dbo].[ArchiveHist]
FOR UPDATE AS
BEGIN
    DECLARE
        @ArchiveID nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: CASCADE

    IF (UPDATE(ArchiveID))
    BEGIN
        SELECT @ArchiveID = ArchiveID
        FROM inserted

        UPDATE ArchiveHistContentType
          SET ArchiveID = @ArchiveID
        FROM ArchiveHistContentType ch, deleted
        WHERE
            ch.ArchiveID = deleted.ArchiveID
    END

END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistUpdProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistUpdProc]
(
    @ArchiveID            nvarchar(50),
    @ArchiveDate          datetime                = NULL,
    @NbrFilesArchived     int                     = NULL,
    @UserGuid             nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE ArchiveHist
       SET ArchiveDate           = @ArchiveDate,
           NbrFilesArchived      = @NbrFilesArchived,
           UserGuid              = @UserGuid
     WHERE ArchiveID = @ArchiveID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'ArchiveHistUpdProc: Cannot update  in ArchiveHist '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistSelProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistSelProc]
(
    @ArchiveID            nvarchar(50))
AS
BEGIN
    SELECT ArchiveID,
           ArchiveDate,
           NbrFilesArchived,
           UserGuid
      FROM ArchiveHist
     WHERE ArchiveID = @ArchiveID

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistInsProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistInsProc]
(
    @ArchiveID            nvarchar(50),
    @ArchiveDate          datetime                = NULL,
    @NbrFilesArchived     int                     = NULL,
    @UserGuid             nvarchar(50)            = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO ArchiveHist(ArchiveID,
                            ArchiveDate,
                            NbrFilesArchived,
                            UserGuid)
    VALUES(@ArchiveID,
           @ArchiveDate,
           @NbrFilesArchived,
           @UserGuid)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'ArchiveHistInsProc: Cannot insert because primary key value not found in ArchiveHist '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [ArchiveHistDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: ArchiveHistDelTrig 
 */

CREATE TRIGGER [dbo].[ArchiveHistDelTrig] ON [dbo].[ArchiveHist]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE ArchiveHistContentType
        FROM ArchiveHistContentType ch, deleted
        WHERE ch.ArchiveID = deleted.ArchiveID

END
GO
/****** Object:  StoredProcedure [dbo].[ArchiveHistDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: ArchiveHistDelProc 
 */

CREATE PROCEDURE [dbo].[ArchiveHistDelProc]
(
    @ArchiveID            nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM ArchiveHist
     WHERE ArchiveID = @ArchiveID

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'ArchiveHistDelProc: Cannot delete because foreign keys still exist in ArchiveHist '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_UserCurrParm_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserCurrParm_SelectAll]
AS
/*
** Select all rows from the UserCurrParm table
*/

SELECT 
	gv_UserCurrParm.*
FROM
	gv_UserCurrParm
GO
/****** Object:  StoredProcedure [dbo].[gp_UserCurrParm_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserCurrParm_Insert]
(
	@UserID nvarchar(50),
	@ParmName nvarchar(50),
	@ParmVal nvarchar(2000)
)
AS
/*
** Add a row to the UserCurrParm table
*/

INSERT INTO [UserCurrParm]
( [UserID], [ParmName], [ParmVal]
)
VALUES
( @UserID, @ParmName, @ParmVal
)

/*
** Select the new row
*/
SELECT
	gv_UserCurrParm.*
FROM
	gv_UserCurrParm
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlRejection_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlRejection_Update]
(
	@RejectionPatternOriginal nvarchar(50), 
	@RejectionPattern nvarchar(50)
)
AS
/*
** Update a row in the UrlRejection table using the primary key
*/
UPDATE [UrlRejection] SET [RejectionPattern] = @RejectionPattern WHERE [RejectionPattern] = @RejectionPatternOriginal


/*
** Select the updated row
*/
SELECT
	gv_UrlRejection.*
FROM
	gv_UrlRejection
WHERE
	[RejectionPattern] = @RejectionPatternOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlRejection_SelectByRejectionPattern]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlRejection_SelectByRejectionPattern]
(
	@RejectionPattern nvarchar(50)
)
AS
/*
** Select a row from the UrlRejection table by primary key
*/

SELECT 
	gv_UrlRejection.*
FROM
	gv_UrlRejection WHERE [RejectionPattern] = @RejectionPattern
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlRejection_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlRejection_SelectAll]
AS
/*
** Select all rows from the UrlRejection table
*/

SELECT 
	gv_UrlRejection.*
FROM
	gv_UrlRejection
ORDER BY
	[RejectionPattern]
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlRejection_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlRejection_Insert]
(
	@RejectionPattern nvarchar(50)
)
AS
/*
** Add a row to the UrlRejection table
*/

INSERT INTO [UrlRejection]
( [RejectionPattern]
)
VALUES
( @RejectionPattern
)

/*
** Select the new row
*/
SELECT
	gv_UrlRejection.*
FROM
	gv_UrlRejection
WHERE
	[RejectionPattern] = @RejectionPattern
GO
/****** Object:  StoredProcedure [dbo].[gp_UserReassignHist_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserReassignHist_SelectAll]
AS
/*
** Select all rows from the UserReassignHist table
*/

SELECT 
	gv_UserReassignHist.*
FROM
	gv_UserReassignHist
GO
/****** Object:  StoredProcedure [dbo].[gp_UserReassignHist_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UserReassignHist_Insert]
(
	@PrevUserID nvarchar(50),
	@PrevUserName nvarchar(50),
	@PrevEmailAddress nvarchar(254),
	@PrevUserPassword nvarchar(254),
	@PrevAdmin nchar(1),
	@PrevisActive nchar(1),
	@PrevUserLoginID nvarchar(50),
	@ReassignedUserID nvarchar(50),
	@ReassignedUserName nvarchar(50),
	@ReassignedEmailAddress nvarchar(254),
	@ReassignedUserPassword nvarchar(254),
	@ReassignedAdmin nchar(1),
	@ReassignedisActive nchar(1),
	@ReassignedUserLoginID nvarchar(50),
	@ReassignmentDate datetime,
	@RowID uniqueidentifier
)
AS
/*
** Add a row to the UserReassignHist table
*/

INSERT INTO [UserReassignHist]
( [PrevUserID], [PrevUserName], [PrevEmailAddress], [PrevUserPassword], [PrevAdmin], [PrevisActive], [PrevUserLoginID], [ReassignedUserID], [ReassignedUserName], [ReassignedEmailAddress], [ReassignedUserPassword], [ReassignedAdmin], [ReassignedisActive], [ReassignedUserLoginID], [ReassignmentDate]
)
VALUES
( @PrevUserID, @PrevUserName, @PrevEmailAddress, @PrevUserPassword, @PrevAdmin, @PrevisActive, @PrevUserLoginID, @ReassignedUserID, @ReassignedUserName, @ReassignedEmailAddress, @ReassignedUserPassword, @ReassignedAdmin, @ReassignedisActive, @ReassignedUserLoginID, @ReassignmentDate
)

/*
** Select the new row
*/
SELECT
	gv_UserReassignHist.*
FROM
	gv_UserReassignHist
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlList_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlList_Update]
(
	@URLOriginal nvarchar(425), 
	@URL nvarchar(425)
)
AS
/*
** Update a row in the UrlList table using the primary key
*/
UPDATE [UrlList] SET [URL] = @URL WHERE [URL] = @URLOriginal


/*
** Select the updated row
*/
SELECT
	gv_UrlList.*
FROM
	gv_UrlList
WHERE
	[URL] = @URLOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlList_SelectByURL]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlList_SelectByURL]
(
	@URL nvarchar(425)
)
AS
/*
** Select a row from the UrlList table by primary key
*/

SELECT 
	gv_UrlList.*
FROM
	gv_UrlList WHERE [URL] = @URL
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlList_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlList_SelectAll]
AS
/*
** Select all rows from the UrlList table
*/

SELECT 
	gv_UrlList.*
FROM
	gv_UrlList
ORDER BY
	[URL]
GO
/****** Object:  StoredProcedure [dbo].[gp_UrlList_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_UrlList_Insert]
(
	@URL nvarchar(425)
)
AS
/*
** Add a row to the UrlList table
*/

INSERT INTO [UrlList]
( [URL]
)
VALUES
( @URL
)

/*
** Select the new row
*/
SELECT
	gv_UrlList.*
FROM
	gv_UrlList
WHERE
	[URL] = @URL
GO
/****** Object:  StoredProcedure [dbo].[gp_upgrade_status_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_upgrade_status_SelectAll]
AS
/*
** Select all rows from the upgrade_status table
*/

SELECT 
	gv_upgrade_status.*
FROM
	gv_upgrade_status
GO
/****** Object:  StoredProcedure [dbo].[gp_upgrade_status_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_upgrade_status_Insert]
(
	@name varchar(30),
	@status varchar(10)
)
AS
/*
** Add a row to the upgrade_status table
*/

INSERT INTO [upgrade_status]
( [name], [status]
)
VALUES
( @name, @status
)

/*
** Select the new row
*/
SELECT
	gv_upgrade_status.*
FROM
	gv_upgrade_status
GO
/****** Object:  StoredProcedure [dbo].[gp_SystemParms_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SystemParms_Update]
(
	@SysParmOriginal nvarchar(50), 
	@SysParm nvarchar(50),
	@SysParmDesc nvarchar(250),
	@SysParmVal nvarchar(250),
	@flgActive nchar(1),
	@isDirectory nchar(1),
	@isEmailFolder nchar(1),
	@flgAllSubDirs nchar(1)
)
AS
/*
** Update a row in the SystemParms table using the primary key
*/
UPDATE [SystemParms] SET [SysParm] = @SysParm, [SysParmDesc] = @SysParmDesc, [SysParmVal] = @SysParmVal, [flgActive] = @flgActive, [isDirectory] = @isDirectory, [isEmailFolder] = @isEmailFolder, [flgAllSubDirs] = @flgAllSubDirs WHERE [SysParm] = @SysParmOriginal


/*
** Select the updated row
*/
SELECT
	gv_SystemParms.*
FROM
	gv_SystemParms
WHERE
	[SysParm] = @SysParmOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SystemParms_SelectBySysParm]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SystemParms_SelectBySysParm]
(
	@SysParm nvarchar(50)
)
AS
/*
** Select a row from the SystemParms table by primary key
*/

SELECT 
	gv_SystemParms.*
FROM
	gv_SystemParms WHERE [SysParm] = @SysParm
GO
/****** Object:  StoredProcedure [dbo].[gp_SystemParms_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SystemParms_SelectAll]
AS
/*
** Select all rows from the SystemParms table
*/

SELECT 
	gv_SystemParms.*
FROM
	gv_SystemParms
ORDER BY
	[SysParm]
GO
/****** Object:  StoredProcedure [dbo].[gp_SystemParms_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SystemParms_Insert]
(
	@SysParm nvarchar(50),
	@SysParmDesc nvarchar(250),
	@SysParmVal nvarchar(250),
	@flgActive nchar(1),
	@isDirectory nchar(1),
	@isEmailFolder nchar(1),
	@flgAllSubDirs nchar(1)
)
AS
/*
** Add a row to the SystemParms table
*/

INSERT INTO [SystemParms]
( [SysParm], [SysParmDesc], [SysParmVal], [flgActive], [isDirectory], [isEmailFolder], [flgAllSubDirs]
)
VALUES
( @SysParm, @SysParmDesc, @SysParmVal, @flgActive, @isDirectory, @isEmailFolder, @flgAllSubDirs
)

/*
** Select the new row
*/
SELECT
	gv_SystemParms.*
FROM
	gv_SystemParms
WHERE
	[SysParm] = @SysParm
GO
/****** Object:  StoredProcedure [dbo].[gp_SearhParmsHistory_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearhParmsHistory_SelectAll]
AS
/*
** Select all rows from the SearhParmsHistory table
*/

SELECT 
	gv_SearhParmsHistory.*
FROM
	gv_SearhParmsHistory
GO
/****** Object:  StoredProcedure [dbo].[gp_SearhParmsHistory_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearhParmsHistory_Insert]
(
	@UserID nvarchar(50),
	@SearchDate datetime,
	@Screen nvarchar(50),
	@QryParms nvarchar(max)
)
AS
/*
** Add a row to the SearhParmsHistory table
*/

INSERT INTO [SearhParmsHistory]
( [UserID], [SearchDate], [Screen], [QryParms]
)
VALUES
( @UserID, @SearchDate, @Screen, @QryParms
)

/*
** Select the new row
*/
SELECT
	gv_SearhParmsHistory.*
FROM
	gv_SearhParmsHistory
GO
/****** Object:  StoredProcedure [dbo].[gp_SearchHistory_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearchHistory_Update]
(
	@RowIDOriginal int,
	@SearchSql nvarchar(max),
	@SearchDate datetime,
	@UserID nvarchar(50),
	@ReturnedRows int,
	@StartTime datetime,
	@EndTime datetime,
	@CalledFrom nvarchar(50),
	@TypeSearch nvarchar(50)
)
AS
/*
** Update a row in the SearchHistory table using the primary key
*/
UPDATE [SearchHistory] SET [SearchSql] = @SearchSql, [SearchDate] = @SearchDate, [UserID] = @UserID, [ReturnedRows] = @ReturnedRows, [StartTime] = @StartTime, [EndTime] = @EndTime, [CalledFrom] = @CalledFrom, [TypeSearch] = @TypeSearch WHERE [RowID] = @RowIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_SearchHistory.*
FROM
	gv_SearchHistory
WHERE
	[RowID] = @RowIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SearchHistory_SelectByRowID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearchHistory_SelectByRowID]
(
	@RowID int
)
AS
/*
** Select a row from the SearchHistory table by primary key
*/

SELECT 
	gv_SearchHistory.*
FROM
	gv_SearchHistory WHERE [RowID] = @RowID
GO
/****** Object:  StoredProcedure [dbo].[gp_SearchHistory_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearchHistory_SelectAll]
AS
/*
** Select all rows from the SearchHistory table
*/

SELECT 
	gv_SearchHistory.*
FROM
	gv_SearchHistory
ORDER BY
	[RowID]
GO
/****** Object:  StoredProcedure [dbo].[gp_SearchHistory_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SearchHistory_Insert]
(
	@SearchSql nvarchar(max),
	@SearchDate datetime,
	@UserID nvarchar(50),
	@ReturnedRows int,
	@StartTime datetime,
	@EndTime datetime,
	@CalledFrom nvarchar(50),
	@TypeSearch nvarchar(50)
)
AS
/*
** Add a row to the SearchHistory table
*/

INSERT INTO [SearchHistory]
( [SearchSql], [SearchDate], [UserID], [ReturnedRows], [StartTime], [EndTime], [CalledFrom], [TypeSearch]
)
VALUES
( @SearchSql, @SearchDate, @UserID, @ReturnedRows, @StartTime, @EndTime, @CalledFrom, @TypeSearch
)

/*
** Select the new row
*/
SELECT
	gv_SearchHistory.*
FROM
	gv_SearchHistory
WHERE
	[RowID] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceAttribute_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceAttribute_Update]
(
	@AttributeNameOriginal nvarchar(50), 
	@AttributeName nvarchar(50),
	@SourceGuidOriginal nvarchar(50), 
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserIDOriginal nvarchar(50), 
	@DataSourceOwnerUserID nvarchar(50),
	@AttributeValue nvarchar(254),
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Update a row in the SourceAttribute table using the primary key
*/
UPDATE [SourceAttribute] SET [AttributeValue] = @AttributeValue, [AttributeName] = @AttributeName, [SourceGuid] = @SourceGuid, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [SourceTypeCode] = @SourceTypeCode WHERE [AttributeName] = @AttributeNameOriginal AND [SourceGuid] = @SourceGuidOriginal AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_SourceAttribute.*
FROM
	gv_SourceAttribute
WHERE
	[AttributeName] = @AttributeNameOriginal
	AND [SourceGuid] = @SourceGuidOriginal
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceAttribute_SelectByAttributeNameAndSourceGuidAndDataSourceOwnerUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceAttribute_SelectByAttributeNameAndSourceGuidAndDataSourceOwnerUserID]
(
	@AttributeName nvarchar(50),
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Select a row from the SourceAttribute table by primary key
*/

SELECT 
	gv_SourceAttribute.*
FROM
	gv_SourceAttribute WHERE [AttributeName] = @AttributeName AND [SourceGuid] = @SourceGuid AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceAttribute_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceAttribute_SelectAll]
AS
/*
** Select all rows from the SourceAttribute table
*/

SELECT 
	gv_SourceAttribute.*
FROM
	gv_SourceAttribute
ORDER BY
	[AttributeName],
	[SourceGuid],
	[DataSourceOwnerUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_SourceAttribute_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SourceAttribute_Insert]
(
	@AttributeValue nvarchar(254),
	@AttributeName nvarchar(50),
	@SourceGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@SourceTypeCode nvarchar(50)
)
AS
/*
** Add a row to the SourceAttribute table
*/

INSERT INTO [SourceAttribute]
( [AttributeValue], [AttributeName], [SourceGuid], [DataSourceOwnerUserID], [SourceTypeCode]
)
VALUES
( @AttributeValue, @AttributeName, @SourceGuid, @DataSourceOwnerUserID, @SourceTypeCode
)

/*
** Select the new row
*/
SELECT
	gv_SourceAttribute.*
FROM
	gv_SourceAttribute
WHERE
	[AttributeName] = @AttributeName
	AND [SourceGuid] = @SourceGuid
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactsArchive_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactsArchive_Update]
(
	@Email1AddressOriginal nvarchar(80), 
	@Email1Address nvarchar(80),
	@FullNameOriginal nvarchar(80), 
	@FullName nvarchar(80),
	@UserIDOriginal char(25), 
	@UserID char(25),
	@Account nvarchar(4000),
	@Anniversary nvarchar(4000),
	@Application nvarchar(4000),
	@AssistantName nvarchar(4000),
	@AssistantTelephoneNumber nvarchar(4000),
	@BillingInformation nvarchar(4000),
	@Birthday nvarchar(4000),
	@Business2TelephoneNumber nvarchar(4000),
	@BusinessAddress nvarchar(4000),
	@BusinessAddressCity nvarchar(4000),
	@BusinessAddressCountry nvarchar(4000),
	@BusinessAddressPostalCode nvarchar(4000),
	@BusinessAddressPostOfficeBox nvarchar(4000),
	@BusinessAddressState nvarchar(4000),
	@BusinessAddressStreet nvarchar(4000),
	@BusinessCardType nvarchar(4000),
	@BusinessFaxNumber nvarchar(4000),
	@BusinessHomePage nvarchar(4000),
	@BusinessTelephoneNumber nvarchar(4000),
	@CallbackTelephoneNumber nvarchar(4000),
	@CarTelephoneNumber nvarchar(4000),
	@Categories nvarchar(4000),
	@Children nvarchar(4000),
	@xClass nvarchar(4000),
	@Companies nvarchar(4000),
	@CompanyName nvarchar(4000),
	@ComputerNetworkName nvarchar(4000),
	@Conflicts nvarchar(4000),
	@ConversationTopic nvarchar(4000),
	@CreationTime nvarchar(4000),
	@CustomerID nvarchar(4000),
	@Department nvarchar(4000),
	@Email1AddressType nvarchar(4000),
	@Email1DisplayName nvarchar(4000),
	@Email1EntryID nvarchar(4000),
	@Email2Address nvarchar(4000),
	@Email2AddressType nvarchar(4000),
	@Email2DisplayName nvarchar(4000),
	@Email2EntryID nvarchar(4000),
	@Email3Address nvarchar(4000),
	@Email3AddressType nvarchar(4000),
	@Email3DisplayName nvarchar(4000),
	@Email3EntryID nvarchar(4000),
	@FileAs nvarchar(4000),
	@FirstName nvarchar(4000),
	@FTPSite nvarchar(4000),
	@Gender nvarchar(4000),
	@GovernmentIDNumber nvarchar(4000),
	@Hobby nvarchar(4000),
	@Home2TelephoneNumber nvarchar(4000),
	@HomeAddress nvarchar(4000),
	@HomeAddressCountry nvarchar(4000),
	@HomeAddressPostalCode nvarchar(4000),
	@HomeAddressPostOfficeBox nvarchar(4000),
	@HomeAddressState nvarchar(4000),
	@HomeAddressStreet nvarchar(4000),
	@HomeFaxNumber nvarchar(4000),
	@HomeTelephoneNumber nvarchar(4000),
	@IMAddress nvarchar(4000),
	@Importance nvarchar(4000),
	@Initials nvarchar(4000),
	@InternetFreeBusyAddress nvarchar(4000),
	@JobTitle nvarchar(4000),
	@Journal nvarchar(4000),
	@Language nvarchar(4000),
	@LastModificationTime nvarchar(4000),
	@LastName nvarchar(4000),
	@LastNameAndFirstName nvarchar(4000),
	@MailingAddress nvarchar(4000),
	@MailingAddressCity nvarchar(4000),
	@MailingAddressCountry nvarchar(4000),
	@MailingAddressPostalCode nvarchar(4000),
	@MailingAddressPostOfficeBox nvarchar(4000),
	@MailingAddressState nvarchar(4000),
	@MailingAddressStreet nvarchar(4000),
	@ManagerName nvarchar(4000),
	@MiddleName nvarchar(4000),
	@Mileage nvarchar(4000),
	@MobileTelephoneNumber nvarchar(4000),
	@NetMeetingAlias nvarchar(4000),
	@NetMeetingServer nvarchar(4000),
	@NickName nvarchar(4000),
	@Title nvarchar(4000),
	@Body nvarchar(4000),
	@OfficeLocation nvarchar(4000),
	@Subject nvarchar(4000)
)
AS
/*
** Update a row in the ContactsArchive table using the primary key
*/
UPDATE [ContactsArchive] SET [Email1Address] = @Email1Address, [FullName] = @FullName, [UserID] = @UserID, [Account] = @Account, [Anniversary] = @Anniversary, [Application] = @Application, [AssistantName] = @AssistantName, [AssistantTelephoneNumber] = @AssistantTelephoneNumber, [BillingInformation] = @BillingInformation, [Birthday] = @Birthday, [Business2TelephoneNumber] = @Business2TelephoneNumber, [BusinessAddress] = @BusinessAddress, [BusinessAddressCity] = @BusinessAddressCity, [BusinessAddressCountry] = @BusinessAddressCountry, [BusinessAddressPostalCode] = @BusinessAddressPostalCode, [BusinessAddressPostOfficeBox] = @BusinessAddressPostOfficeBox, [BusinessAddressState] = @BusinessAddressState, [BusinessAddressStreet] = @BusinessAddressStreet, [BusinessCardType] = @BusinessCardType, [BusinessFaxNumber] = @BusinessFaxNumber, [BusinessHomePage] = @BusinessHomePage, [BusinessTelephoneNumber] = @BusinessTelephoneNumber, [CallbackTelephoneNumber] = @CallbackTelephoneNumber, [CarTelephoneNumber] = @CarTelephoneNumber, [Categories] = @Categories, [Children] = @Children, [xClass] = @xClass, [Companies] = @Companies, [CompanyName] = @CompanyName, [ComputerNetworkName] = @ComputerNetworkName, [Conflicts] = @Conflicts, [ConversationTopic] = @ConversationTopic, [CreationTime] = @CreationTime, [CustomerID] = @CustomerID, [Department] = @Department, [Email1AddressType] = @Email1AddressType, [Email1DisplayName] = @Email1DisplayName, [Email1EntryID] = @Email1EntryID, [Email2Address] = @Email2Address, [Email2AddressType] = @Email2AddressType, [Email2DisplayName] = @Email2DisplayName, [Email2EntryID] = @Email2EntryID, [Email3Address] = @Email3Address, [Email3AddressType] = @Email3AddressType, [Email3DisplayName] = @Email3DisplayName, [Email3EntryID] = @Email3EntryID, [FileAs] = @FileAs, [FirstName] = @FirstName, [FTPSite] = @FTPSite, [Gender] = @Gender, [GovernmentIDNumber] = @GovernmentIDNumber, [Hobby] = @Hobby, [Home2TelephoneNumber] = @Home2TelephoneNumber, [HomeAddress] = @HomeAddress, [HomeAddressCountry] = @HomeAddressCountry, [HomeAddressPostalCode] = @HomeAddressPostalCode, [HomeAddressPostOfficeBox] = @HomeAddressPostOfficeBox, [HomeAddressState] = @HomeAddressState, [HomeAddressStreet] = @HomeAddressStreet, [HomeFaxNumber] = @HomeFaxNumber, [HomeTelephoneNumber] = @HomeTelephoneNumber, [IMAddress] = @IMAddress, [Importance] = @Importance, [Initials] = @Initials, [InternetFreeBusyAddress] = @InternetFreeBusyAddress, [JobTitle] = @JobTitle, [Journal] = @Journal, [Language] = @Language, [LastModificationTime] = @LastModificationTime, [LastName] = @LastName, [LastNameAndFirstName] = @LastNameAndFirstName, [MailingAddress] = @MailingAddress, [MailingAddressCity] = @MailingAddressCity, [MailingAddressCountry] = @MailingAddressCountry, [MailingAddressPostalCode] = @MailingAddressPostalCode, [MailingAddressPostOfficeBox] = @MailingAddressPostOfficeBox, [MailingAddressState] = @MailingAddressState, [MailingAddressStreet] = @MailingAddressStreet, [ManagerName] = @ManagerName, [MiddleName] = @MiddleName, [Mileage] = @Mileage, [MobileTelephoneNumber] = @MobileTelephoneNumber, [NetMeetingAlias] = @NetMeetingAlias, [NetMeetingServer] = @NetMeetingServer, [NickName] = @NickName, [Title] = @Title, [Body] = @Body, [OfficeLocation] = @OfficeLocation, [Subject] = @Subject WHERE [Email1Address] = @Email1AddressOriginal AND [FullName] = @FullNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ContactsArchive.*
FROM
	gv_ContactsArchive
WHERE
	[Email1Address] = @Email1AddressOriginal
	AND [FullName] = @FullNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactsArchive_SelectByEmail1AddressAndFullNameAndUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactsArchive_SelectByEmail1AddressAndFullNameAndUserID]
(
	@Email1Address nvarchar(80),
	@FullName nvarchar(80),
	@UserID char(25)
)
AS
/*
** Select a row from the ContactsArchive table by primary key
*/

SELECT 
	gv_ContactsArchive.*
FROM
	gv_ContactsArchive WHERE [Email1Address] = @Email1Address AND [FullName] = @FullName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactsArchive_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactsArchive_SelectAll]
AS
/*
** Select all rows from the ContactsArchive table
*/

SELECT 
	gv_ContactsArchive.*
FROM
	gv_ContactsArchive
ORDER BY
	[Email1Address],
	[FullName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactsArchive_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactsArchive_Insert]
(
	@Email1Address nvarchar(80),
	@FullName nvarchar(80),
	@UserID char(25),
	@Account nvarchar(4000),
	@Anniversary nvarchar(4000),
	@Application nvarchar(4000),
	@AssistantName nvarchar(4000),
	@AssistantTelephoneNumber nvarchar(4000),
	@BillingInformation nvarchar(4000),
	@Birthday nvarchar(4000),
	@Business2TelephoneNumber nvarchar(4000),
	@BusinessAddress nvarchar(4000),
	@BusinessAddressCity nvarchar(4000),
	@BusinessAddressCountry nvarchar(4000),
	@BusinessAddressPostalCode nvarchar(4000),
	@BusinessAddressPostOfficeBox nvarchar(4000),
	@BusinessAddressState nvarchar(4000),
	@BusinessAddressStreet nvarchar(4000),
	@BusinessCardType nvarchar(4000),
	@BusinessFaxNumber nvarchar(4000),
	@BusinessHomePage nvarchar(4000),
	@BusinessTelephoneNumber nvarchar(4000),
	@CallbackTelephoneNumber nvarchar(4000),
	@CarTelephoneNumber nvarchar(4000),
	@Categories nvarchar(4000),
	@Children nvarchar(4000),
	@xClass nvarchar(4000),
	@Companies nvarchar(4000),
	@CompanyName nvarchar(4000),
	@ComputerNetworkName nvarchar(4000),
	@Conflicts nvarchar(4000),
	@ConversationTopic nvarchar(4000),
	@CreationTime nvarchar(4000),
	@CustomerID nvarchar(4000),
	@Department nvarchar(4000),
	@Email1AddressType nvarchar(4000),
	@Email1DisplayName nvarchar(4000),
	@Email1EntryID nvarchar(4000),
	@Email2Address nvarchar(4000),
	@Email2AddressType nvarchar(4000),
	@Email2DisplayName nvarchar(4000),
	@Email2EntryID nvarchar(4000),
	@Email3Address nvarchar(4000),
	@Email3AddressType nvarchar(4000),
	@Email3DisplayName nvarchar(4000),
	@Email3EntryID nvarchar(4000),
	@FileAs nvarchar(4000),
	@FirstName nvarchar(4000),
	@FTPSite nvarchar(4000),
	@Gender nvarchar(4000),
	@GovernmentIDNumber nvarchar(4000),
	@Hobby nvarchar(4000),
	@Home2TelephoneNumber nvarchar(4000),
	@HomeAddress nvarchar(4000),
	@HomeAddressCountry nvarchar(4000),
	@HomeAddressPostalCode nvarchar(4000),
	@HomeAddressPostOfficeBox nvarchar(4000),
	@HomeAddressState nvarchar(4000),
	@HomeAddressStreet nvarchar(4000),
	@HomeFaxNumber nvarchar(4000),
	@HomeTelephoneNumber nvarchar(4000),
	@IMAddress nvarchar(4000),
	@Importance nvarchar(4000),
	@Initials nvarchar(4000),
	@InternetFreeBusyAddress nvarchar(4000),
	@JobTitle nvarchar(4000),
	@Journal nvarchar(4000),
	@Language nvarchar(4000),
	@LastModificationTime nvarchar(4000),
	@LastName nvarchar(4000),
	@LastNameAndFirstName nvarchar(4000),
	@MailingAddress nvarchar(4000),
	@MailingAddressCity nvarchar(4000),
	@MailingAddressCountry nvarchar(4000),
	@MailingAddressPostalCode nvarchar(4000),
	@MailingAddressPostOfficeBox nvarchar(4000),
	@MailingAddressState nvarchar(4000),
	@MailingAddressStreet nvarchar(4000),
	@ManagerName nvarchar(4000),
	@MiddleName nvarchar(4000),
	@Mileage nvarchar(4000),
	@MobileTelephoneNumber nvarchar(4000),
	@NetMeetingAlias nvarchar(4000),
	@NetMeetingServer nvarchar(4000),
	@NickName nvarchar(4000),
	@Title nvarchar(4000),
	@Body nvarchar(4000),
	@OfficeLocation nvarchar(4000),
	@Subject nvarchar(4000)
)
AS
/*
** Add a row to the ContactsArchive table
*/

INSERT INTO [ContactsArchive]
( [Email1Address], [FullName], [UserID], [Account], [Anniversary], [Application], [AssistantName], [AssistantTelephoneNumber], [BillingInformation], [Birthday], [Business2TelephoneNumber], [BusinessAddress], [BusinessAddressCity], [BusinessAddressCountry], [BusinessAddressPostalCode], [BusinessAddressPostOfficeBox], [BusinessAddressState], [BusinessAddressStreet], [BusinessCardType], [BusinessFaxNumber], [BusinessHomePage], [BusinessTelephoneNumber], [CallbackTelephoneNumber], [CarTelephoneNumber], [Categories], [Children], [xClass], [Companies], [CompanyName], [ComputerNetworkName], [Conflicts], [ConversationTopic], [CreationTime], [CustomerID], [Department], [Email1AddressType], [Email1DisplayName], [Email1EntryID], [Email2Address], [Email2AddressType], [Email2DisplayName], [Email2EntryID], [Email3Address], [Email3AddressType], [Email3DisplayName], [Email3EntryID], [FileAs], [FirstName], [FTPSite], [Gender], [GovernmentIDNumber], [Hobby], [Home2TelephoneNumber], [HomeAddress], [HomeAddressCountry], [HomeAddressPostalCode], [HomeAddressPostOfficeBox], [HomeAddressState], [HomeAddressStreet], [HomeFaxNumber], [HomeTelephoneNumber], [IMAddress], [Importance], [Initials], [InternetFreeBusyAddress], [JobTitle], [Journal], [Language], [LastModificationTime], [LastName], [LastNameAndFirstName], [MailingAddress], [MailingAddressCity], [MailingAddressCountry], [MailingAddressPostalCode], [MailingAddressPostOfficeBox], [MailingAddressState], [MailingAddressStreet], [ManagerName], [MiddleName], [Mileage], [MobileTelephoneNumber], [NetMeetingAlias], [NetMeetingServer], [NickName], [Title], [Body], [OfficeLocation], [Subject]
)
VALUES
( @Email1Address, @FullName, @UserID, @Account, @Anniversary, @Application, @AssistantName, @AssistantTelephoneNumber, @BillingInformation, @Birthday, @Business2TelephoneNumber, @BusinessAddress, @BusinessAddressCity, @BusinessAddressCountry, @BusinessAddressPostalCode, @BusinessAddressPostOfficeBox, @BusinessAddressState, @BusinessAddressStreet, @BusinessCardType, @BusinessFaxNumber, @BusinessHomePage, @BusinessTelephoneNumber, @CallbackTelephoneNumber, @CarTelephoneNumber, @Categories, @Children, @xClass, @Companies, @CompanyName, @ComputerNetworkName, @Conflicts, @ConversationTopic, @CreationTime, @CustomerID, @Department, @Email1AddressType, @Email1DisplayName, @Email1EntryID, @Email2Address, @Email2AddressType, @Email2DisplayName, @Email2EntryID, @Email3Address, @Email3AddressType, @Email3DisplayName, @Email3EntryID, @FileAs, @FirstName, @FTPSite, @Gender, @GovernmentIDNumber, @Hobby, @Home2TelephoneNumber, @HomeAddress, @HomeAddressCountry, @HomeAddressPostalCode, @HomeAddressPostOfficeBox, @HomeAddressState, @HomeAddressStreet, @HomeFaxNumber, @HomeTelephoneNumber, @IMAddress, @Importance, @Initials, @InternetFreeBusyAddress, @JobTitle, @Journal, @Language, @LastModificationTime, @LastName, @LastNameAndFirstName, @MailingAddress, @MailingAddressCity, @MailingAddressCountry, @MailingAddressPostalCode, @MailingAddressPostOfficeBox, @MailingAddressState, @MailingAddressStreet, @ManagerName, @MiddleName, @Mileage, @MobileTelephoneNumber, @NetMeetingAlias, @NetMeetingServer, @NickName, @Title, @Body, @OfficeLocation, @Subject
)

/*
** Select the new row
*/
SELECT
	gv_ContactsArchive.*
FROM
	gv_ContactsArchive
WHERE
	[Email1Address] = @Email1Address
	AND [FullName] = @FullName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypesUndefined_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypesUndefined_Update]
(
	@FileTypeOriginal nvarchar(50), 
	@FileType nvarchar(50),
	@SubstituteType nvarchar(50),
	@Applied bit
)
AS
/*
** Update a row in the AvailFileTypesUndefined table using the primary key
*/
UPDATE [AvailFileTypesUndefined] SET [FileType] = @FileType, [SubstituteType] = @SubstituteType, [Applied] = @Applied WHERE [FileType] = @FileTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_AvailFileTypesUndefined.*
FROM
	gv_AvailFileTypesUndefined
WHERE
	[FileType] = @FileTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypesUndefined_SelectByFileType]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypesUndefined_SelectByFileType]
(
	@FileType nvarchar(50)
)
AS
/*
** Select a row from the AvailFileTypesUndefined table by primary key
*/

SELECT 
	gv_AvailFileTypesUndefined.*
FROM
	gv_AvailFileTypesUndefined WHERE [FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypesUndefined_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypesUndefined_SelectAll]
AS
/*
** Select all rows from the AvailFileTypesUndefined table
*/

SELECT 
	gv_AvailFileTypesUndefined.*
FROM
	gv_AvailFileTypesUndefined
ORDER BY
	[FileType]
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypesUndefined_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypesUndefined_Insert]
(
	@FileType nvarchar(50),
	@SubstituteType nvarchar(50),
	@Applied bit
)
AS
/*
** Add a row to the AvailFileTypesUndefined table
*/

INSERT INTO [AvailFileTypesUndefined]
( [FileType], [SubstituteType], [Applied]
)
VALUES
( @FileType, @SubstituteType, @Applied
)

/*
** Select the new row
*/
SELECT
	gv_AvailFileTypesUndefined.*
FROM
	gv_AvailFileTypesUndefined
WHERE
	[FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactFrom_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactFrom_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25),
	@Verified int
)
AS
/*
** Update a row in the ContactFrom table using the primary key
*/
UPDATE [ContactFrom] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID, [Verified] = @Verified WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ContactFrom.*
FROM
	gv_ContactFrom
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactFrom_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactFrom_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the ContactFrom table by primary key
*/

SELECT 
	gv_ContactFrom.*
FROM
	gv_ContactFrom WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactFrom_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactFrom_SelectAll]
AS
/*
** Select all rows from the ContactFrom table
*/

SELECT 
	gv_ContactFrom.*
FROM
	gv_ContactFrom
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ContactFrom_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ContactFrom_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25),
	@Verified int
)
AS
/*
** Add a row to the ContactFrom table
*/

INSERT INTO [ContactFrom]
( [FromEmailAddr], [SenderName], [UserID], [Verified]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID, @Verified
)

/*
** Select the new row
*/
SELECT
	gv_ContactFrom.*
FROM
	gv_ContactFrom
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypes_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypes_Update]
(
	@ExtCodeOriginal nvarchar(50), 
	@ExtCode nvarchar(50)
)
AS
/*
** Update a row in the AvailFileTypes table using the primary key
*/
UPDATE [AvailFileTypes] SET [ExtCode] = @ExtCode WHERE [ExtCode] = @ExtCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_AvailFileTypes.*
FROM
	gv_AvailFileTypes
WHERE
	[ExtCode] = @ExtCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypes_SelectByExtCode]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypes_SelectByExtCode]
(
	@ExtCode nvarchar(50)
)
AS
/*
** Select a row from the AvailFileTypes table by primary key
*/

SELECT 
	gv_AvailFileTypes.*
FROM
	gv_AvailFileTypes WHERE [ExtCode] = @ExtCode
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypes_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypes_SelectAll]
AS
/*
** Select all rows from the AvailFileTypes table
*/

SELECT 
	gv_AvailFileTypes.*
FROM
	gv_AvailFileTypes
ORDER BY
	[ExtCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_AvailFileTypes_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AvailFileTypes_Insert]
(
	@ExtCode nvarchar(50)
)
AS
/*
** Add a row to the AvailFileTypes table
*/

INSERT INTO [AvailFileTypes]
( [ExtCode]
)
VALUES
( @ExtCode
)

/*
** Select the new row
*/
SELECT
	gv_AvailFileTypes.*
FROM
	gv_AvailFileTypes
WHERE
	[ExtCode] = @ExtCode
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_Delete]
(
	@AttributeName nvarchar(50)
)
AS
/*
** Delete a row from the Attributes table
*/
DELETE FROM [Attributes] WHERE [AttributeName] = @AttributeName

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the Attributes table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_AssignableUserParameters_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AssignableUserParameters_Update]
(
	@ParmNameOriginal nchar(50), 
	@ParmName nchar(50),
	@isPerm bit
)
AS
/*
** Update a row in the AssignableUserParameters table using the primary key
*/
UPDATE [AssignableUserParameters] SET [ParmName] = @ParmName, [isPerm] = @isPerm WHERE [ParmName] = @ParmNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_AssignableUserParameters.*
FROM
	gv_AssignableUserParameters
WHERE
	[ParmName] = @ParmNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_AssignableUserParameters_SelectByParmName]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AssignableUserParameters_SelectByParmName]
(
	@ParmName nchar(50)
)
AS
/*
** Select a row from the AssignableUserParameters table by primary key
*/

SELECT 
	gv_AssignableUserParameters.*
FROM
	gv_AssignableUserParameters WHERE [ParmName] = @ParmName
GO
/****** Object:  StoredProcedure [dbo].[gp_AssignableUserParameters_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AssignableUserParameters_SelectAll]
AS
/*
** Select all rows from the AssignableUserParameters table
*/

SELECT 
	gv_AssignableUserParameters.*
FROM
	gv_AssignableUserParameters
ORDER BY
	[ParmName]
GO
/****** Object:  StoredProcedure [dbo].[gp_AssignableUserParameters_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AssignableUserParameters_Insert]
(
	@ParmName nchar(50),
	@isPerm bit
)
AS
/*
** Add a row to the AssignableUserParameters table
*/

INSERT INTO [AssignableUserParameters]
( [ParmName], [isPerm]
)
VALUES
( @ParmName, @isPerm
)

/*
** Select the new row
*/
SELECT
	gv_AssignableUserParameters.*
FROM
	gv_AssignableUserParameters
WHERE
	[ParmName] = @ParmName
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveStats_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveStats_Update]
(
	@StatGuidOriginal nvarchar(50), 
	@StatGuid nvarchar(50),
	@ArchiveStartDate datetime,
	@Status nvarchar(50),
	@Successful nchar(1),
	@ArchiveType nvarchar(50),
	@TotalEmailsInRepository int,
	@TotalContentInRepository int,
	@UserID nvarchar(50),
	@ArchiveEndDate datetime,
	@EntrySeq int
)
AS
/*
** Update a row in the ArchiveStats table using the primary key
*/
UPDATE [ArchiveStats] SET [ArchiveStartDate] = @ArchiveStartDate, [Status] = @Status, [Successful] = @Successful, [ArchiveType] = @ArchiveType, [TotalEmailsInRepository] = @TotalEmailsInRepository, [TotalContentInRepository] = @TotalContentInRepository, [UserID] = @UserID, [ArchiveEndDate] = @ArchiveEndDate, [StatGuid] = @StatGuid WHERE [StatGuid] = @StatGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_ArchiveStats.*
FROM
	gv_ArchiveStats
WHERE
	[StatGuid] = @StatGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveStats_SelectByStatGuid]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveStats_SelectByStatGuid]
(
	@StatGuid nvarchar(50)
)
AS
/*
** Select a row from the ArchiveStats table by primary key
*/

SELECT 
	gv_ArchiveStats.*
FROM
	gv_ArchiveStats WHERE [StatGuid] = @StatGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveStats_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveStats_SelectAll]
AS
/*
** Select all rows from the ArchiveStats table
*/

SELECT 
	gv_ArchiveStats.*
FROM
	gv_ArchiveStats
ORDER BY
	[StatGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveStats_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveStats_Insert]
(
	@ArchiveStartDate datetime,
	@Status nvarchar(50),
	@Successful nchar(1),
	@ArchiveType nvarchar(50),
	@TotalEmailsInRepository int,
	@TotalContentInRepository int,
	@UserID nvarchar(50),
	@ArchiveEndDate datetime,
	@StatGuid nvarchar(50)
)
AS
/*
** Add a row to the ArchiveStats table
*/

INSERT INTO [ArchiveStats]
( [ArchiveStartDate], [Status], [Successful], [ArchiveType], [TotalEmailsInRepository], [TotalContentInRepository], [UserID], [ArchiveEndDate], [StatGuid]
)
VALUES
( @ArchiveStartDate, @Status, @Successful, @ArchiveType, @TotalEmailsInRepository, @TotalContentInRepository, @UserID, @ArchiveEndDate, @StatGuid
)

/*
** Select the new row
*/
SELECT
	gv_ArchiveStats.*
FROM
	gv_ArchiveStats
WHERE
	[StatGuid] = @StatGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_Update]
(
	@ArchiveIDOriginal nvarchar(50), 
	@ArchiveID nvarchar(50),
	@DirectoryOriginal nvarchar(254), 
	@Directory nvarchar(254),
	@FileTypeOriginal nvarchar(50), 
	@FileType nvarchar(50),
	@NbrFilesArchived int
)
AS
/*
** Update a row in the ArchiveHistContentType table using the primary key
*/
UPDATE [ArchiveHistContentType] SET [ArchiveID] = @ArchiveID, [Directory] = @Directory, [FileType] = @FileType, [NbrFilesArchived] = @NbrFilesArchived WHERE [ArchiveID] = @ArchiveIDOriginal AND [Directory] = @DirectoryOriginal AND [FileType] = @FileTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_ArchiveHistContentType.*
FROM
	gv_ArchiveHistContentType
WHERE
	[ArchiveID] = @ArchiveIDOriginal
	AND [Directory] = @DirectoryOriginal
	AND [FileType] = @FileTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_SelectByArchiveIDAndDirectoryAndFileType]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_SelectByArchiveIDAndDirectoryAndFileType]
(
	@ArchiveID nvarchar(50),
	@Directory nvarchar(254),
	@FileType nvarchar(50)
)
AS
/*
** Select a row from the ArchiveHistContentType table by primary key
*/

SELECT 
	gv_ArchiveHistContentType.*
FROM
	gv_ArchiveHistContentType WHERE [ArchiveID] = @ArchiveID AND [Directory] = @Directory AND [FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_SelectByArchiveID]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_SelectByArchiveID]
(
	@ArchiveID nvarchar(50)
)
AS
/*
** Select rows from the ArchiveHistContentType table by ArchiveID
*/
SELECT 
	gv_ArchiveHistContentType.*
FROM
	gv_ArchiveHistContentType WHERE [ArchiveID] = @ArchiveID ORDER BY [ArchiveID], [Directory], [FileType]
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_SelectAll]
AS
/*
** Select all rows from the ArchiveHistContentType table
*/

SELECT 
	gv_ArchiveHistContentType.*
FROM
	gv_ArchiveHistContentType
ORDER BY
	[ArchiveID],
	[Directory],
	[FileType]
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHistContentType_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHistContentType_Insert]
(
	@ArchiveID nvarchar(50),
	@Directory nvarchar(254),
	@FileType nvarchar(50),
	@NbrFilesArchived int
)
AS
/*
** Add a row to the ArchiveHistContentType table
*/

INSERT INTO [ArchiveHistContentType]
( [ArchiveID], [Directory], [FileType], [NbrFilesArchived]
)
VALUES
( @ArchiveID, @Directory, @FileType, @NbrFilesArchived
)

/*
** Select the new row
*/
SELECT
	gv_ArchiveHistContentType.*
FROM
	gv_ArchiveHistContentType
WHERE
	[ArchiveID] = @ArchiveID
	AND [Directory] = @Directory
	AND [FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHist_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHist_Delete]
(
	@ArchiveID nvarchar(50)
)
AS
/*
** Delete a row from the ArchiveHist table
*/
DELETE FROM [ArchiveHist] WHERE [ArchiveID] = @ArchiveID

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the ArchiveHist table', 16, 1)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveFrom_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveFrom_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25)
)
AS
/*
** Update a row in the ArchiveFrom table using the primary key
*/
UPDATE [ArchiveFrom] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ArchiveFrom.*
FROM
	gv_ArchiveFrom
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveFrom_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveFrom_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the ArchiveFrom table by primary key
*/

SELECT 
	gv_ArchiveFrom.*
FROM
	gv_ArchiveFrom WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveFrom_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveFrom_SelectAll]
AS
/*
** Select all rows from the ArchiveFrom table
*/

SELECT 
	gv_ArchiveFrom.*
FROM
	gv_ArchiveFrom
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveFrom_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveFrom_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Add a row to the ArchiveFrom table
*/

INSERT INTO [ArchiveFrom]
( [FromEmailAddr], [SenderName], [UserID]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_ArchiveFrom.*
FROM
	gv_ArchiveFrom
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  Trigger [AttributesUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: AttributesUpdTrig 
 */

CREATE TRIGGER [dbo].[AttributesUpdTrig] ON [dbo].[Attributes]
FOR UPDATE AS
BEGIN
    DECLARE
        @AttributeName nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: CASCADE

    IF (UPDATE(AttributeName))
    BEGIN
        SELECT @AttributeName = AttributeName
        FROM inserted

        UPDATE SourceAttribute
          SET AttributeName = @AttributeName
        FROM SourceAttribute ch, deleted
        WHERE
            ch.AttributeName = deleted.AttributeName
    END

END
GO
/****** Object:  StoredProcedure [dbo].[AttributesUpdProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttributesUpdProc 
 */

CREATE PROCEDURE [dbo].[AttributesUpdProc]
(
    @AttributeName         nvarchar(50),
    @AttributeDataType     nvarchar(50),
    @AttributeDesc         nvarchar(2000)            = NULL,
    @AssoApplication       nvarchar(50)              = NULL)
AS
BEGIN
    BEGIN TRAN

    UPDATE Attributes
       SET AttributeDataType      = @AttributeDataType,
           AttributeDesc          = @AttributeDesc,
           AssoApplication        = @AssoApplication
     WHERE AttributeName = @AttributeName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20001 'AttributesUpdProc: Cannot update  in Attributes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AttributesSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttributesSelProc 
 */

CREATE PROCEDURE [dbo].[AttributesSelProc]
(
    @AttributeName         nvarchar(50))
AS
BEGIN
    SELECT AttributeName,
           AttributeDataType,
           AttributeDesc,
           AssoApplication
      FROM Attributes
     WHERE AttributeName = @AttributeName

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AttributesInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttributesInsProc 
 */

CREATE PROCEDURE [dbo].[AttributesInsProc]
(
    @AttributeName         nvarchar(50),
    @AttributeDataType     nvarchar(50),
    @AttributeDesc         nvarchar(2000)            = NULL,
    @AssoApplication       nvarchar(50)              = NULL)
AS
BEGIN
    BEGIN TRAN

    INSERT INTO Attributes(AttributeName,
                           AttributeDataType,
                           AttributeDesc,
                           AssoApplication)
    VALUES(@AttributeName,
           @AttributeDataType,
           @AttributeDesc,
           @AssoApplication)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AttributesInsProc: Cannot insert because primary key value not found in Attributes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  Trigger [AttributesDelTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: AttributesDelTrig 
 */

CREATE TRIGGER [dbo].[AttributesDelTrig] ON [dbo].[Attributes]
FOR DELETE AS
BEGIN
    DECLARE
        @Rows      int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Delete: CASCADE

    DELETE SourceAttribute
        FROM SourceAttribute ch, deleted
        WHERE ch.AttributeName = deleted.AttributeName

END
GO
/****** Object:  StoredProcedure [dbo].[AttributesDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttributesDelProc 
 */

CREATE PROCEDURE [dbo].[AttributesDelProc]
(
    @AttributeName         nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM Attributes
     WHERE AttributeName = @AttributeName

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AttributesDelProc: Cannot delete because foreign keys still exist in Attributes '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  Trigger [Attributes_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[Attributes_INS]
   ON [dbo].[Attributes]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE Attributes
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM Attributes t
   JOIN inserted i
   ON 
     t.AttributeName = i.AttributeName
GO
/****** Object:  StoredProcedure [dbo].[gp_SavedItems_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SavedItems_Update]
(
	@UseridOriginal nvarchar(50), 
	@Userid nvarchar(50),
	@SaveNameOriginal nvarchar(50), 
	@SaveName nvarchar(50),
	@SaveTypeCodeOriginal nvarchar(50), 
	@SaveTypeCode nvarchar(50),
	@ValNameOriginal nvarchar(50), 
	@ValName nvarchar(50),
	@ValValue nvarchar(254)
)
AS
/*
** Update a row in the SavedItems table using the primary key
*/
UPDATE [SavedItems] SET [Userid] = @Userid, [SaveName] = @SaveName, [SaveTypeCode] = @SaveTypeCode, [ValName] = @ValName, [ValValue] = @ValValue WHERE [Userid] = @UseridOriginal AND [SaveName] = @SaveNameOriginal AND [SaveTypeCode] = @SaveTypeCodeOriginal AND [ValName] = @ValNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_SavedItems.*
FROM
	gv_SavedItems
WHERE
	[Userid] = @UseridOriginal
	AND [SaveName] = @SaveNameOriginal
	AND [SaveTypeCode] = @SaveTypeCodeOriginal
	AND [ValName] = @ValNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_SavedItems_SelectByUseridAndSaveNameAndSaveTypeCodeAndValName]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SavedItems_SelectByUseridAndSaveNameAndSaveTypeCodeAndValName]
(
	@Userid nvarchar(50),
	@SaveName nvarchar(50),
	@SaveTypeCode nvarchar(50),
	@ValName nvarchar(50)
)
AS
/*
** Select a row from the SavedItems table by primary key
*/

SELECT 
	gv_SavedItems.*
FROM
	gv_SavedItems WHERE [Userid] = @Userid AND [SaveName] = @SaveName AND [SaveTypeCode] = @SaveTypeCode AND [ValName] = @ValName
GO
/****** Object:  StoredProcedure [dbo].[gp_SavedItems_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SavedItems_SelectAll]
AS
/*
** Select all rows from the SavedItems table
*/

SELECT 
	gv_SavedItems.*
FROM
	gv_SavedItems
ORDER BY
	[Userid],
	[SaveName],
	[SaveTypeCode],
	[ValName]
GO
/****** Object:  StoredProcedure [dbo].[gp_SavedItems_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_SavedItems_Insert]
(
	@Userid nvarchar(50),
	@SaveName nvarchar(50),
	@SaveTypeCode nvarchar(50),
	@ValName nvarchar(50),
	@ValValue nvarchar(254)
)
AS
/*
** Add a row to the SavedItems table
*/

INSERT INTO [SavedItems]
( [Userid], [SaveName], [SaveTypeCode], [ValName], [ValValue]
)
VALUES
( @Userid, @SaveName, @SaveTypeCode, @ValName, @ValValue
)

/*
** Select the new row
*/
SELECT
	gv_SavedItems.*
FROM
	gv_SavedItems
WHERE
	[Userid] = @Userid
	AND [SaveName] = @SaveName
	AND [SaveTypeCode] = @SaveTypeCode
	AND [ValName] = @ValName
GO
/****** Object:  StoredProcedure [dbo].[gp_RuntimeErrors_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RuntimeErrors_SelectAll]
AS
/*
** Select all rows from the RuntimeErrors table
*/

SELECT 
	gv_RuntimeErrors.*
FROM
	gv_RuntimeErrors
GO
/****** Object:  StoredProcedure [dbo].[gp_RuntimeErrors_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RuntimeErrors_Insert]
(
	@ErrorMsg nvarchar(max),
	@StackTrace nvarchar(max),
	@EntryDate datetime,
	@IdNbr nvarchar(50),
	@ConnectiveGuid nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Add a row to the RuntimeErrors table
*/

INSERT INTO [RuntimeErrors]
( [ErrorMsg], [StackTrace], [EntryDate], [IdNbr], [ConnectiveGuid], [UserID]
)
VALUES
( @ErrorMsg, @StackTrace, @EntryDate, @IdNbr, @ConnectiveGuid, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_RuntimeErrors.*
FROM
	gv_RuntimeErrors
GO
/****** Object:  StoredProcedure [dbo].[gp_RunParms_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RunParms_Update]
(
	@ParmOriginal nvarchar(50), 
	@Parm nvarchar(50),
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@ParmValue nvarchar(50)
)
AS
/*
** Update a row in the RunParms table using the primary key
*/
UPDATE [RunParms] SET [Parm] = @Parm, [ParmValue] = @ParmValue, [UserID] = @UserID WHERE [Parm] = @ParmOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_RunParms.*
FROM
	gv_RunParms
WHERE
	[Parm] = @ParmOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_RunParms_SelectByParmAndUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RunParms_SelectByParmAndUserID]
(
	@Parm nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Select a row from the RunParms table by primary key
*/

SELECT 
	gv_RunParms.*
FROM
	gv_RunParms WHERE [Parm] = @Parm AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_RunParms_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RunParms_SelectAll]
AS
/*
** Select all rows from the RunParms table
*/

SELECT 
	gv_RunParms.*
FROM
	gv_RunParms
ORDER BY
	[Parm],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_RunParms_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RunParms_Insert]
(
	@Parm nvarchar(50),
	@ParmValue nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Add a row to the RunParms table
*/

INSERT INTO [RunParms]
( [Parm], [ParmValue], [UserID]
)
VALUES
( @Parm, @ParmValue, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_RunParms.*
FROM
	gv_RunParms
WHERE
	[Parm] = @Parm
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_RiskLevel_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RiskLevel_SelectAll]
AS
/*
** Select all rows from the RiskLevel table
*/

SELECT 
	gv_RiskLevel.*
FROM
	gv_RiskLevel
GO
/****** Object:  StoredProcedure [dbo].[gp_RiskLevel_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RiskLevel_Insert]
(
	@RiskCode char(10),
	@Description nvarchar(4000),
	@CreateDate datetime
)
AS
/*
** Add a row to the RiskLevel table
*/

INSERT INTO [RiskLevel]
( [RiskCode], [Description], [CreateDate]
)
VALUES
( @RiskCode, @Description, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_RiskLevel.*
FROM
	gv_RiskLevel
GO
/****** Object:  StoredProcedure [dbo].[gp_RetentionTemp_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RetentionTemp_Update]
(
	@ContentGuidOriginal nvarchar(50), 
	@ContentGuid nvarchar(50),
	@UserID nvarchar(50),
	@TypeContent nvarchar(50)
)
AS
/*
** Update a row in the RetentionTemp table using the primary key
*/
UPDATE [RetentionTemp] SET [UserID] = @UserID, [ContentGuid] = @ContentGuid, [TypeContent] = @TypeContent WHERE [ContentGuid] = @ContentGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_RetentionTemp.*
FROM
	gv_RetentionTemp
WHERE
	[ContentGuid] = @ContentGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_RetentionTemp_SelectByContentGuid]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RetentionTemp_SelectByContentGuid]
(
	@ContentGuid nvarchar(50)
)
AS
/*
** Select a row from the RetentionTemp table by primary key
*/

SELECT 
	gv_RetentionTemp.*
FROM
	gv_RetentionTemp WHERE [ContentGuid] = @ContentGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_RetentionTemp_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RetentionTemp_SelectAll]
AS
/*
** Select all rows from the RetentionTemp table
*/

SELECT 
	gv_RetentionTemp.*
FROM
	gv_RetentionTemp
ORDER BY
	[ContentGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_RetentionTemp_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RetentionTemp_Insert]
(
	@UserID nvarchar(50),
	@ContentGuid nvarchar(50),
	@TypeContent nvarchar(50)
)
AS
/*
** Add a row to the RetentionTemp table
*/

INSERT INTO [RetentionTemp]
( [UserID], [ContentGuid], [TypeContent]
)
VALUES
( @UserID, @ContentGuid, @TypeContent
)

/*
** Select the new row
*/
SELECT
	gv_RetentionTemp.*
FROM
	gv_RetentionTemp
WHERE
	[ContentGuid] = @ContentGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_RestorationHistory_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RestorationHistory_SelectAll]
AS
/*
** Select all rows from the RestorationHistory table
*/

SELECT 
	gv_RestorationHistory.*
FROM
	gv_RestorationHistory
GO
/****** Object:  StoredProcedure [dbo].[gp_RestorationHistory_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_RestorationHistory_Insert]
(
	@SourceType nvarchar(50),
	@SourceGuid nvarchar(50),
	@OriginalCrc nvarchar(50),
	@RestoredCrc nvarchar(50),
	@RestorationDate nchar(10),
	@RestoredBy nvarchar(50)
)
AS
/*
** Add a row to the RestorationHistory table
*/

INSERT INTO [RestorationHistory]
( [SourceType], [SourceGuid], [OriginalCrc], [RestoredCrc], [RestorationDate], [RestoredBy]
)
VALUES
( @SourceType, @SourceGuid, @OriginalCrc, @RestoredCrc, @RestorationDate, @RestoredBy
)

/*
** Select the new row
*/
SELECT
	gv_RestorationHistory.*
FROM
	gv_RestorationHistory
GO
/****** Object:  StoredProcedure [dbo].[gp_PgmTrace_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_PgmTrace_SelectAll]
AS
/*
** Select all rows from the PgmTrace table
*/

SELECT 
	gv_PgmTrace.*
FROM
	gv_PgmTrace
GO
/****** Object:  StoredProcedure [dbo].[gp_PgmTrace_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_PgmTrace_Insert]
(
	@StmtID nvarchar(50),
	@PgmName nvarchar(254),
	@Stmt nvarchar(max),
	@CreateDate datetime,
	@ConnectiveGuid nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Add a row to the PgmTrace table
*/

INSERT INTO [PgmTrace]
( [StmtID], [PgmName], [Stmt], [CreateDate], [ConnectiveGuid], [UserID]
)
VALUES
( @StmtID, @PgmName, @Stmt, @CreateDate, @ConnectiveGuid, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_PgmTrace.*
FROM
	gv_PgmTrace
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_Update]
(
	@RowIdOriginal int,
	@PreviousOwnerUserID nvarchar(50),
	@CurrentOwnerUserID nvarchar(50),
	@CreateDate datetime
)
AS
/*
** Update a row in the OwnerHistory table using the primary key
*/
UPDATE [OwnerHistory] SET [PreviousOwnerUserID] = @PreviousOwnerUserID, [CurrentOwnerUserID] = @CurrentOwnerUserID, [CreateDate] = @CreateDate WHERE [RowId] = @RowIdOriginal


/*
** Select the updated row
*/
SELECT
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory
WHERE
	[RowId] = @RowIdOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_SelectByRowId]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_SelectByRowId]
(
	@RowId int
)
AS
/*
** Select a row from the OwnerHistory table by primary key
*/

SELECT 
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory WHERE [RowId] = @RowId
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_SelectByPreviousOwnerUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_SelectByPreviousOwnerUserID]
(
	@PreviousOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the OwnerHistory table by PreviousOwnerUserID
*/
SELECT 
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory WHERE [PreviousOwnerUserID] = @PreviousOwnerUserID ORDER BY [RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_SelectByCurrentOwnerUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_SelectByCurrentOwnerUserID]
(
	@CurrentOwnerUserID nvarchar(50)
)
AS
/*
** Select rows from the OwnerHistory table by CurrentOwnerUserID
*/
SELECT 
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory WHERE [CurrentOwnerUserID] = @CurrentOwnerUserID ORDER BY [RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_SelectAll]
AS
/*
** Select all rows from the OwnerHistory table
*/

SELECT 
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory
ORDER BY
	[RowId]
GO
/****** Object:  StoredProcedure [dbo].[gp_OwnerHistory_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OwnerHistory_Insert]
(
	@PreviousOwnerUserID nvarchar(50),
	@CurrentOwnerUserID nvarchar(50),
	@CreateDate datetime
)
AS
/*
** Add a row to the OwnerHistory table
*/

INSERT INTO [OwnerHistory]
( [PreviousOwnerUserID], [CurrentOwnerUserID], [CreateDate]
)
VALUES
( @PreviousOwnerUserID, @CurrentOwnerUserID, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_OwnerHistory.*
FROM
	gv_OwnerHistory
WHERE
	[RowId] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickDirectory_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickDirectory_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@FQNOriginal varchar(254), 
	@FQN varchar(254),
	@IncludeSubDirs char(1),
	@DB_ID nvarchar(50),
	@VersionFiles char(1),
	@ckMetaData nchar(1),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@QuickRefEntry bit
)
AS
/*
** Update a row in the QuickDirectory table using the primary key
*/
UPDATE [QuickDirectory] SET [UserID] = @UserID, [IncludeSubDirs] = @IncludeSubDirs, [FQN] = @FQN, [DB_ID] = @DB_ID, [VersionFiles] = @VersionFiles, [ckMetaData] = @ckMetaData, [ckPublic] = @ckPublic, [ckDisableDir] = @ckDisableDir, [QuickRefEntry] = @QuickRefEntry WHERE [UserID] = @UserIDOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_QuickDirectory.*
FROM
	gv_QuickDirectory
WHERE
	[UserID] = @UserIDOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickDirectory_SelectByUserIDAndFQN]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickDirectory_SelectByUserIDAndFQN]
(
	@UserID nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Select a row from the QuickDirectory table by primary key
*/

SELECT 
	gv_QuickDirectory.*
FROM
	gv_QuickDirectory WHERE [UserID] = @UserID AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickDirectory_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickDirectory_SelectAll]
AS
/*
** Select all rows from the QuickDirectory table
*/

SELECT 
	gv_QuickDirectory.*
FROM
	gv_QuickDirectory
ORDER BY
	[UserID],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_QuickDirectory_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_QuickDirectory_Insert]
(
	@UserID nvarchar(50),
	@IncludeSubDirs char(1),
	@FQN varchar(254),
	@DB_ID nvarchar(50),
	@VersionFiles char(1),
	@ckMetaData nchar(1),
	@ckPublic nchar(1),
	@ckDisableDir nchar(1),
	@QuickRefEntry bit
)
AS
/*
** Add a row to the QuickDirectory table
*/

INSERT INTO [QuickDirectory]
( [UserID], [IncludeSubDirs], [FQN], [DB_ID], [VersionFiles], [ckMetaData], [ckPublic], [ckDisableDir], [QuickRefEntry]
)
VALUES
( @UserID, @IncludeSubDirs, @FQN, @DB_ID, @VersionFiles, @ckMetaData, @ckPublic, @ckDisableDir, @QuickRefEntry
)

/*
** Select the new row
*/
SELECT
	gv_QuickDirectory.*
FROM
	gv_QuickDirectory
WHERE
	[UserID] = @UserID
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_ProcessFileAs_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProcessFileAs_Update]
(
	@ExtCodeOriginal nvarchar(50), 
	@ExtCode nvarchar(50),
	@ProcessExtCode nvarchar(50),
	@Applied bit
)
AS
/*
** Update a row in the ProcessFileAs table using the primary key
*/
UPDATE [ProcessFileAs] SET [ExtCode] = @ExtCode, [ProcessExtCode] = @ProcessExtCode, [Applied] = @Applied WHERE [ExtCode] = @ExtCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_ProcessFileAs.*
FROM
	gv_ProcessFileAs
WHERE
	[ExtCode] = @ExtCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ProcessFileAs_SelectByExtCode]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProcessFileAs_SelectByExtCode]
(
	@ExtCode nvarchar(50)
)
AS
/*
** Select a row from the ProcessFileAs table by primary key
*/

SELECT 
	gv_ProcessFileAs.*
FROM
	gv_ProcessFileAs WHERE [ExtCode] = @ExtCode
GO
/****** Object:  StoredProcedure [dbo].[gp_ProcessFileAs_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProcessFileAs_SelectAll]
AS
/*
** Select all rows from the ProcessFileAs table
*/

SELECT 
	gv_ProcessFileAs.*
FROM
	gv_ProcessFileAs
ORDER BY
	[ExtCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_ProcessFileAs_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ProcessFileAs_Insert]
(
	@ExtCode nvarchar(50),
	@ProcessExtCode nvarchar(50),
	@Applied bit
)
AS
/*
** Add a row to the ProcessFileAs table
*/

INSERT INTO [ProcessFileAs]
( [ExtCode], [ProcessExtCode], [Applied]
)
VALUES
( @ExtCode, @ProcessExtCode, @Applied
)

/*
** Select the new row
*/
SELECT
	gv_ProcessFileAs.*
FROM
	gv_ProcessFileAs
WHERE
	[ExtCode] = @ExtCode
GO
/****** Object:  StoredProcedure [dbo].[gp_OutlookFrom_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OutlookFrom_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25),
	@Verified int
)
AS
/*
** Update a row in the OutlookFrom table using the primary key
*/
UPDATE [OutlookFrom] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID, [Verified] = @Verified WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_OutlookFrom.*
FROM
	gv_OutlookFrom
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_OutlookFrom_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OutlookFrom_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the OutlookFrom table by primary key
*/

SELECT 
	gv_OutlookFrom.*
FROM
	gv_OutlookFrom WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_OutlookFrom_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OutlookFrom_SelectAll]
AS
/*
** Select all rows from the OutlookFrom table
*/

SELECT 
	gv_OutlookFrom.*
FROM
	gv_OutlookFrom
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_OutlookFrom_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_OutlookFrom_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25),
	@Verified int
)
AS
/*
** Add a row to the OutlookFrom table
*/

INSERT INTO [OutlookFrom]
( [FromEmailAddr], [SenderName], [UserID], [Verified]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID, @Verified
)

/*
** Select the new row
*/
SELECT
	gv_OutlookFrom.*
FROM
	gv_OutlookFrom
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_MyTempTable_Update]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_MyTempTable_Update]
(
	@docidOriginal int, 
	@docid int,
	@key nvarchar(100)
)
AS
/*
** Update a row in the MyTempTable table using the primary key
*/
UPDATE [MyTempTable] SET [docid] = @docid, [key] = @key WHERE [docid] = @docidOriginal


/*
** Select the updated row
*/
SELECT
	gv_MyTempTable.*
FROM
	gv_MyTempTable
WHERE
	[docid] = @docidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_MyTempTable_SelectBydocid]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_MyTempTable_SelectBydocid]
(
	@docid int
)
AS
/*
** Select a row from the MyTempTable table by primary key
*/

SELECT 
	gv_MyTempTable.*
FROM
	gv_MyTempTable WHERE [docid] = @docid
GO
/****** Object:  StoredProcedure [dbo].[gp_MyTempTable_SelectAll]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_MyTempTable_SelectAll]
AS
/*
** Select all rows from the MyTempTable table
*/

SELECT 
	gv_MyTempTable.*
FROM
	gv_MyTempTable
ORDER BY
	[docid]
GO
/****** Object:  StoredProcedure [dbo].[gp_MyTempTable_Insert]    Script Date: 05/18/2011 16:17:00 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_MyTempTable_Insert]
(
	@docid int,
	@key nvarchar(100)
)
AS
/*
** Add a row to the MyTempTable table
*/

INSERT INTO [MyTempTable]
( [docid], [key]
)
VALUES
( @docid, @key
)

/*
** Select the new row
*/
SELECT
	gv_MyTempTable.*
FROM
	gv_MyTempTable
WHERE
	[docid] = @docid
GO
/****** Object:  StoredProcedure [dbo].[gp_Machine_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Machine_Update]
(
	@MachineNameOriginal nvarchar(254), 
	@MachineName nvarchar(254)
)
AS
/*
** Update a row in the Machine table using the primary key
*/
UPDATE [Machine] SET [MachineName] = @MachineName WHERE [MachineName] = @MachineNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_Machine.*
FROM
	gv_Machine
WHERE
	[MachineName] = @MachineNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Machine_SelectByMachineName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Machine_SelectByMachineName]
(
	@MachineName nvarchar(254)
)
AS
/*
** Select a row from the Machine table by primary key
*/

SELECT 
	gv_Machine.*
FROM
	gv_Machine WHERE [MachineName] = @MachineName
GO
/****** Object:  StoredProcedure [dbo].[gp_Machine_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Machine_SelectAll]
AS
/*
** Select all rows from the Machine table
*/

SELECT 
	gv_Machine.*
FROM
	gv_Machine
ORDER BY
	[MachineName]
GO
/****** Object:  StoredProcedure [dbo].[gp_Machine_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Machine_Insert]
(
	@MachineName nvarchar(254)
)
AS
/*
** Add a row to the Machine table
*/

INSERT INTO [Machine]
( [MachineName]
)
VALUES
( @MachineName
)

/*
** Select the new row
*/
SELECT
	gv_Machine.*
FROM
	gv_Machine
WHERE
	[MachineName] = @MachineName
GO
/****** Object:  StoredProcedure [dbo].[gp_License_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_License_Update]
(
	@LicenseIDOriginal int,
	@Agreement nvarchar(2000),
	@VersionNbr int,
	@ActivationDate datetime,
	@InstallDate datetime,
	@CustomerID nvarchar(50),
	@CustomerName nvarchar(254),
	@XrtNxr1 nvarchar(50),
	@ServerIdentifier varchar(100),
	@SqlInstanceIdentifier varchar(100)
)
AS
/*
** Update a row in the License table using the primary key
*/
UPDATE [License] SET [Agreement] = @Agreement, [VersionNbr] = @VersionNbr, [ActivationDate] = @ActivationDate, [InstallDate] = @InstallDate, [CustomerID] = @CustomerID, [CustomerName] = @CustomerName, [XrtNxr1] = @XrtNxr1, [ServerIdentifier] = @ServerIdentifier, [SqlInstanceIdentifier] = @SqlInstanceIdentifier WHERE [LicenseID] = @LicenseIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_License.*
FROM
	gv_License
WHERE
	[LicenseID] = @LicenseIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_License_SelectByLicenseID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_License_SelectByLicenseID]
(
	@LicenseID int
)
AS
/*
** Select a row from the License table by primary key
*/

SELECT 
	gv_License.*
FROM
	gv_License WHERE [LicenseID] = @LicenseID
GO
/****** Object:  StoredProcedure [dbo].[gp_License_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_License_SelectAll]
AS
/*
** Select all rows from the License table
*/

SELECT 
	gv_License.*
FROM
	gv_License
ORDER BY
	[LicenseID]
GO
/****** Object:  StoredProcedure [dbo].[gp_License_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_License_Insert]
(
	@Agreement nvarchar(2000),
	@VersionNbr int,
	@ActivationDate datetime,
	@InstallDate datetime,
	@CustomerID nvarchar(50),
	@CustomerName nvarchar(254),
	@XrtNxr1 nvarchar(50),
	@ServerIdentifier varchar(100),
	@SqlInstanceIdentifier varchar(100)
)
AS
/*
** Add a row to the License table
*/

INSERT INTO [License]
( [Agreement], [VersionNbr], [ActivationDate], [InstallDate], [CustomerID], [CustomerName], [XrtNxr1], [ServerIdentifier], [SqlInstanceIdentifier]
)
VALUES
( @Agreement, @VersionNbr, @ActivationDate, @InstallDate, @CustomerID, @CustomerName, @XrtNxr1, @ServerIdentifier, @SqlInstanceIdentifier
)

/*
** Select the new row
*/
SELECT
	gv_License.*
FROM
	gv_License
WHERE
	[LicenseID] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryItems_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryItems_Update]
(
	@LibraryItemGuidOriginal nvarchar(50), 
	@LibraryItemGuid nvarchar(50),
	@LibraryOwnerUserIDOriginal nvarchar(50), 
	@LibraryOwnerUserID nvarchar(50),
	@LibraryNameOriginal nvarchar(80), 
	@LibraryName nvarchar(80),
	@SourceGuid nvarchar(50),
	@ItemTitle nvarchar(254),
	@ItemType nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@AddedByUserGuidId nvarchar(50)
)
AS
/*
** Update a row in the LibraryItems table using the primary key
*/
UPDATE [LibraryItems] SET [SourceGuid] = @SourceGuid, [ItemTitle] = @ItemTitle, [ItemType] = @ItemType, [LibraryItemGuid] = @LibraryItemGuid, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [LibraryOwnerUserID] = @LibraryOwnerUserID, [LibraryName] = @LibraryName, [AddedByUserGuidId] = @AddedByUserGuidId WHERE [LibraryItemGuid] = @LibraryItemGuidOriginal AND [LibraryOwnerUserID] = @LibraryOwnerUserIDOriginal AND [LibraryName] = @LibraryNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_LibraryItems.*
FROM
	gv_LibraryItems
WHERE
	[LibraryItemGuid] = @LibraryItemGuidOriginal
	AND [LibraryOwnerUserID] = @LibraryOwnerUserIDOriginal
	AND [LibraryName] = @LibraryNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryItems_SelectByLibraryItemGuidAndLibraryOwnerUserIDAndLibraryName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryItems_SelectByLibraryItemGuidAndLibraryOwnerUserIDAndLibraryName]
(
	@LibraryItemGuid nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80)
)
AS
/*
** Select a row from the LibraryItems table by primary key
*/

SELECT 
	gv_LibraryItems.*
FROM
	gv_LibraryItems WHERE [LibraryItemGuid] = @LibraryItemGuid AND [LibraryOwnerUserID] = @LibraryOwnerUserID AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryItems_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryItems_SelectAll]
AS
/*
** Select all rows from the LibraryItems table
*/

SELECT 
	gv_LibraryItems.*
FROM
	gv_LibraryItems
ORDER BY
	[LibraryItemGuid],
	[LibraryOwnerUserID],
	[LibraryName]
GO
/****** Object:  StoredProcedure [dbo].[gp_LibraryItems_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_LibraryItems_Insert]
(
	@SourceGuid nvarchar(50),
	@ItemTitle nvarchar(254),
	@ItemType nvarchar(50),
	@LibraryItemGuid nvarchar(50),
	@DataSourceOwnerUserID nvarchar(50),
	@LibraryOwnerUserID nvarchar(50),
	@LibraryName nvarchar(80),
	@AddedByUserGuidId nvarchar(50)
)
AS
/*
** Add a row to the LibraryItems table
*/

INSERT INTO [LibraryItems]
( [SourceGuid], [ItemTitle], [ItemType], [LibraryItemGuid], [DataSourceOwnerUserID], [LibraryOwnerUserID], [LibraryName], [AddedByUserGuidId]
)
VALUES
( @SourceGuid, @ItemTitle, @ItemType, @LibraryItemGuid, @DataSourceOwnerUserID, @LibraryOwnerUserID, @LibraryName, @AddedByUserGuidId
)

/*
** Select the new row
*/
SELECT
	gv_LibraryItems.*
FROM
	gv_LibraryItems
WHERE
	[LibraryItemGuid] = @LibraryItemGuid
	AND [LibraryOwnerUserID] = @LibraryOwnerUserID
	AND [LibraryName] = @LibraryName
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludedFiles_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludedFiles_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@ExtCodeOriginal nvarchar(50), 
	@ExtCode nvarchar(50),
	@FQNOriginal nvarchar(254), 
	@FQN nvarchar(254)
)
AS
/*
** Update a row in the IncludedFiles table using the primary key
*/
UPDATE [IncludedFiles] SET [UserID] = @UserID, [ExtCode] = @ExtCode, [FQN] = @FQN WHERE [UserID] = @UserIDOriginal AND [ExtCode] = @ExtCodeOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_IncludedFiles.*
FROM
	gv_IncludedFiles
WHERE
	[UserID] = @UserIDOriginal
	AND [ExtCode] = @ExtCodeOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludedFiles_SelectByUserIDAndExtCodeAndFQN]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludedFiles_SelectByUserIDAndExtCodeAndFQN]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN nvarchar(254)
)
AS
/*
** Select a row from the IncludedFiles table by primary key
*/

SELECT 
	gv_IncludedFiles.*
FROM
	gv_IncludedFiles WHERE [UserID] = @UserID AND [ExtCode] = @ExtCode AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludedFiles_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludedFiles_SelectAll]
AS
/*
** Select all rows from the IncludedFiles table
*/

SELECT 
	gv_IncludedFiles.*
FROM
	gv_IncludedFiles
ORDER BY
	[UserID],
	[ExtCode],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludedFiles_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludedFiles_Insert]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN nvarchar(254)
)
AS
/*
** Add a row to the IncludedFiles table
*/

INSERT INTO [IncludedFiles]
( [UserID], [ExtCode], [FQN]
)
VALUES
( @UserID, @ExtCode, @FQN
)

/*
** Select the new row
*/
SELECT
	gv_IncludedFiles.*
FROM
	gv_IncludedFiles
WHERE
	[UserID] = @UserID
	AND [ExtCode] = @ExtCode
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_ImageTypeCodes_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ImageTypeCodes_Update]
(
	@ImageTypeCodeOriginal nvarchar(50), 
	@ImageTypeCode nvarchar(50),
	@ImageTypeCodeDesc nvarchar(250)
)
AS
/*
** Update a row in the ImageTypeCodes table using the primary key
*/
UPDATE [ImageTypeCodes] SET [ImageTypeCode] = @ImageTypeCode, [ImageTypeCodeDesc] = @ImageTypeCodeDesc WHERE [ImageTypeCode] = @ImageTypeCodeOriginal


/*
** Select the updated row
*/
SELECT
	gv_ImageTypeCodes.*
FROM
	gv_ImageTypeCodes
WHERE
	[ImageTypeCode] = @ImageTypeCodeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ImageTypeCodes_SelectByImageTypeCode]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ImageTypeCodes_SelectByImageTypeCode]
(
	@ImageTypeCode nvarchar(50)
)
AS
/*
** Select a row from the ImageTypeCodes table by primary key
*/

SELECT 
	gv_ImageTypeCodes.*
FROM
	gv_ImageTypeCodes WHERE [ImageTypeCode] = @ImageTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_ImageTypeCodes_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ImageTypeCodes_SelectAll]
AS
/*
** Select all rows from the ImageTypeCodes table
*/

SELECT 
	gv_ImageTypeCodes.*
FROM
	gv_ImageTypeCodes
ORDER BY
	[ImageTypeCode]
GO
/****** Object:  StoredProcedure [dbo].[gp_ImageTypeCodes_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ImageTypeCodes_Insert]
(
	@ImageTypeCode nvarchar(50),
	@ImageTypeCodeDesc nvarchar(250)
)
AS
/*
** Add a row to the ImageTypeCodes table
*/

INSERT INTO [ImageTypeCodes]
( [ImageTypeCode], [ImageTypeCodeDesc]
)
VALUES
( @ImageTypeCode, @ImageTypeCodeDesc
)

/*
** Select the new row
*/
SELECT
	gv_ImageTypeCodes.*
FROM
	gv_ImageTypeCodes
WHERE
	[ImageTypeCode] = @ImageTypeCode
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpTextUser_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpTextUser_SelectAll]
AS
/*
** Select all rows from the HelpTextUser table
*/

SELECT 
	gv_HelpTextUser.*
FROM
	gv_HelpTextUser
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpTextUser_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpTextUser_Insert]
(
	@UserID nvarchar(50),
	@ScreenName nvarchar(100),
	@HelpText nvarchar(max),
	@WidgetName nvarchar(100),
	@WidgetText nvarchar(254),
	@DisplayHelpText bit,
	@CompanyID nvarchar(50),
	@LastUpdate datetime,
	@CreateDate datetime
)
AS
/*
** Add a row to the HelpTextUser table
*/

INSERT INTO [HelpTextUser]
( [UserID], [ScreenName], [HelpText], [WidgetName], [WidgetText], [DisplayHelpText], [CompanyID], [LastUpdate], [CreateDate]
)
VALUES
( @UserID, @ScreenName, @HelpText, @WidgetName, @WidgetText, @DisplayHelpText, @CompanyID, @LastUpdate, @CreateDate
)

/*
** Select the new row
*/
SELECT
	gv_HelpTextUser.*
FROM
	gv_HelpTextUser
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpText_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpText_Update]
(
	@ScreenNameOriginal nvarchar(100), 
	@ScreenName nvarchar(100),
	@WidgetNameOriginal nvarchar(100), 
	@WidgetName nvarchar(100),
	@HelpText nvarchar(max),
	@WidgetText nvarchar(254),
	@DisplayHelpText bit,
	@LastUpdate datetime,
	@CreateDate datetime,
	@UpdatedBy nvarchar(50)
)
AS
/*
** Update a row in the HelpText table using the primary key
*/
UPDATE [HelpText] SET [ScreenName] = @ScreenName, [HelpText] = @HelpText, [WidgetName] = @WidgetName, [WidgetText] = @WidgetText, [DisplayHelpText] = @DisplayHelpText, [LastUpdate] = @LastUpdate, [CreateDate] = @CreateDate, [UpdatedBy] = @UpdatedBy WHERE [ScreenName] = @ScreenNameOriginal AND [WidgetName] = @WidgetNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_HelpText.*
FROM
	gv_HelpText
WHERE
	[ScreenName] = @ScreenNameOriginal
	AND [WidgetName] = @WidgetNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpText_SelectByScreenNameAndWidgetName]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpText_SelectByScreenNameAndWidgetName]
(
	@ScreenName nvarchar(100),
	@WidgetName nvarchar(100)
)
AS
/*
** Select a row from the HelpText table by primary key
*/

SELECT 
	gv_HelpText.*
FROM
	gv_HelpText WHERE [ScreenName] = @ScreenName AND [WidgetName] = @WidgetName
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpText_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpText_SelectAll]
AS
/*
** Select all rows from the HelpText table
*/

SELECT 
	gv_HelpText.*
FROM
	gv_HelpText
ORDER BY
	[ScreenName],
	[WidgetName]
GO
/****** Object:  StoredProcedure [dbo].[gp_HelpText_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_HelpText_Insert]
(
	@ScreenName nvarchar(100),
	@HelpText nvarchar(max),
	@WidgetName nvarchar(100),
	@WidgetText nvarchar(254),
	@DisplayHelpText bit,
	@LastUpdate datetime,
	@CreateDate datetime,
	@UpdatedBy nvarchar(50)
)
AS
/*
** Add a row to the HelpText table
*/

INSERT INTO [HelpText]
( [ScreenName], [HelpText], [WidgetName], [WidgetText], [DisplayHelpText], [LastUpdate], [CreateDate], [UpdatedBy]
)
VALUES
( @ScreenName, @HelpText, @WidgetName, @WidgetText, @DisplayHelpText, @LastUpdate, @CreateDate, @UpdatedBy
)

/*
** Select the new row
*/
SELECT
	gv_HelpText.*
FROM
	gv_HelpText
WHERE
	[ScreenName] = @ScreenName
	AND [WidgetName] = @WidgetName
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludeFrom_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludeFrom_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25)
)
AS
/*
** Update a row in the ExcludeFrom table using the primary key
*/
UPDATE [ExcludeFrom] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ExcludeFrom.*
FROM
	gv_ExcludeFrom
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludeFrom_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludeFrom_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the ExcludeFrom table by primary key
*/

SELECT 
	gv_ExcludeFrom.*
FROM
	gv_ExcludeFrom WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludeFrom_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludeFrom_SelectAll]
AS
/*
** Select all rows from the ExcludeFrom table
*/

SELECT 
	gv_ExcludeFrom.*
FROM
	gv_ExcludeFrom
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludeFrom_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludeFrom_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Add a row to the ExcludeFrom table
*/

INSERT INTO [ExcludeFrom]
( [FromEmailAddr], [SenderName], [UserID]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_ExcludeFrom.*
FROM
	gv_ExcludeFrom
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludedFiles_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludedFiles_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@ExtCodeOriginal nvarchar(50), 
	@ExtCode nvarchar(50),
	@FQNOriginal varchar(254), 
	@FQN varchar(254)
)
AS
/*
** Update a row in the ExcludedFiles table using the primary key
*/
UPDATE [ExcludedFiles] SET [UserID] = @UserID, [ExtCode] = @ExtCode, [FQN] = @FQN WHERE [UserID] = @UserIDOriginal AND [ExtCode] = @ExtCodeOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_ExcludedFiles.*
FROM
	gv_ExcludedFiles
WHERE
	[UserID] = @UserIDOriginal
	AND [ExtCode] = @ExtCodeOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludedFiles_SelectByUserIDAndExtCodeAndFQN]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludedFiles_SelectByUserIDAndExtCodeAndFQN]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Select a row from the ExcludedFiles table by primary key
*/

SELECT 
	gv_ExcludedFiles.*
FROM
	gv_ExcludedFiles WHERE [UserID] = @UserID AND [ExtCode] = @ExtCode AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludedFiles_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludedFiles_SelectAll]
AS
/*
** Select all rows from the ExcludedFiles table
*/

SELECT 
	gv_ExcludedFiles.*
FROM
	gv_ExcludedFiles
ORDER BY
	[UserID],
	[ExtCode],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_ExcludedFiles_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ExcludedFiles_Insert]
(
	@UserID nvarchar(50),
	@ExtCode nvarchar(50),
	@FQN varchar(254)
)
AS
/*
** Add a row to the ExcludedFiles table
*/

INSERT INTO [ExcludedFiles]
( [UserID], [ExtCode], [FQN]
)
VALUES
( @UserID, @ExtCode, @FQN
)

/*
** Select the new row
*/
SELECT
	gv_ExcludedFiles.*
FROM
	gv_ExcludedFiles
WHERE
	[UserID] = @UserID
	AND [ExtCode] = @ExtCode
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludeImmediate_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludeImmediate_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25)
)
AS
/*
** Update a row in the IncludeImmediate table using the primary key
*/
UPDATE [IncludeImmediate] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_IncludeImmediate.*
FROM
	gv_IncludeImmediate
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludeImmediate_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludeImmediate_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the IncludeImmediate table by primary key
*/

SELECT 
	gv_IncludeImmediate.*
FROM
	gv_IncludeImmediate WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludeImmediate_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludeImmediate_SelectAll]
AS
/*
** Select all rows from the IncludeImmediate table
*/

SELECT 
	gv_IncludeImmediate.*
FROM
	gv_IncludeImmediate
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_IncludeImmediate_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_IncludeImmediate_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Add a row to the IncludeImmediate table
*/

INSERT INTO [IncludeImmediate]
( [FromEmailAddr], [SenderName], [UserID]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_IncludeImmediate.*
FROM
	gv_IncludeImmediate
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_GlobalSeachResults_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GlobalSeachResults_Update]
(
	@ContentGuidOriginal nvarchar(50), 
	@ContentGuid nvarchar(50),
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@ContentTitle nvarchar(254),
	@ContentAuthor nvarchar(254),
	@ContentType nvarchar(50),
	@CreateDate nvarchar(50),
	@ContentExt nvarchar(50),
	@FileName nvarchar(254),
	@FileSize int,
	@NbrOfAttachments int,
	@FromEmailAddress nvarchar(254),
	@AllRecipiants nvarchar(max),
	@Weight int
)
AS
/*
** Update a row in the GlobalSeachResults table using the primary key
*/
UPDATE [GlobalSeachResults] SET [ContentTitle] = @ContentTitle, [ContentAuthor] = @ContentAuthor, [ContentType] = @ContentType, [CreateDate] = @CreateDate, [ContentExt] = @ContentExt, [ContentGuid] = @ContentGuid, [UserID] = @UserID, [FileName] = @FileName, [FileSize] = @FileSize, [NbrOfAttachments] = @NbrOfAttachments, [FromEmailAddress] = @FromEmailAddress, [AllRecipiants] = @AllRecipiants, [Weight] = @Weight WHERE [ContentGuid] = @ContentGuidOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_GlobalSeachResults.*
FROM
	gv_GlobalSeachResults
WHERE
	[ContentGuid] = @ContentGuidOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_GlobalSeachResults_SelectByContentGuidAndUserID]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GlobalSeachResults_SelectByContentGuidAndUserID]
(
	@ContentGuid nvarchar(50),
	@UserID nvarchar(50)
)
AS
/*
** Select a row from the GlobalSeachResults table by primary key
*/

SELECT 
	gv_GlobalSeachResults.*
FROM
	gv_GlobalSeachResults WHERE [ContentGuid] = @ContentGuid AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_GlobalSeachResults_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GlobalSeachResults_SelectAll]
AS
/*
** Select all rows from the GlobalSeachResults table
*/

SELECT 
	gv_GlobalSeachResults.*
FROM
	gv_GlobalSeachResults
ORDER BY
	[ContentGuid],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_GlobalSeachResults_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_GlobalSeachResults_Insert]
(
	@ContentTitle nvarchar(254),
	@ContentAuthor nvarchar(254),
	@ContentType nvarchar(50),
	@CreateDate nvarchar(50),
	@ContentExt nvarchar(50),
	@ContentGuid nvarchar(50),
	@UserID nvarchar(50),
	@FileName nvarchar(254),
	@FileSize int,
	@NbrOfAttachments int,
	@FromEmailAddress nvarchar(254),
	@AllRecipiants nvarchar(max),
	@Weight int
)
AS
/*
** Add a row to the GlobalSeachResults table
*/

INSERT INTO [GlobalSeachResults]
( [ContentTitle], [ContentAuthor], [ContentType], [CreateDate], [ContentExt], [ContentGuid], [UserID], [FileName], [FileSize], [NbrOfAttachments], [FromEmailAddress], [AllRecipiants], [Weight]
)
VALUES
( @ContentTitle, @ContentAuthor, @ContentType, @CreateDate, @ContentExt, @ContentGuid, @UserID, @FileName, @FileSize, @NbrOfAttachments, @FromEmailAddress, @AllRecipiants, @Weight
)

/*
** Select the new row
*/
SELECT
	gv_GlobalSeachResults.*
FROM
	gv_GlobalSeachResults
WHERE
	[ContentGuid] = @ContentGuid
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_FilesToDelete_Update]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FilesToDelete_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@MachineNameOriginal nvarchar(100), 
	@MachineName nvarchar(100),
	@FQNOriginal nvarchar(254), 
	@FQN nvarchar(254),
	@PendingDelete bit
)
AS
/*
** Update a row in the FilesToDelete table using the primary key
*/
UPDATE [FilesToDelete] SET [UserID] = @UserID, [MachineName] = @MachineName, [FQN] = @FQN, [PendingDelete] = @PendingDelete WHERE [UserID] = @UserIDOriginal AND [MachineName] = @MachineNameOriginal AND [FQN] = @FQNOriginal


/*
** Select the updated row
*/
SELECT
	gv_FilesToDelete.*
FROM
	gv_FilesToDelete
WHERE
	[UserID] = @UserIDOriginal
	AND [MachineName] = @MachineNameOriginal
	AND [FQN] = @FQNOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_FilesToDelete_SelectByUserIDAndMachineNameAndFQN]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FilesToDelete_SelectByUserIDAndMachineNameAndFQN]
(
	@UserID nvarchar(50),
	@MachineName nvarchar(100),
	@FQN nvarchar(254)
)
AS
/*
** Select a row from the FilesToDelete table by primary key
*/

SELECT 
	gv_FilesToDelete.*
FROM
	gv_FilesToDelete WHERE [UserID] = @UserID AND [MachineName] = @MachineName AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_FilesToDelete_SelectAll]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FilesToDelete_SelectAll]
AS
/*
** Select all rows from the FilesToDelete table
*/

SELECT 
	gv_FilesToDelete.*
FROM
	gv_FilesToDelete
ORDER BY
	[UserID],
	[MachineName],
	[FQN]
GO
/****** Object:  StoredProcedure [dbo].[gp_FilesToDelete_Insert]    Script Date: 05/18/2011 16:16:59 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_FilesToDelete_Insert]
(
	@UserID nvarchar(50),
	@MachineName nvarchar(100),
	@FQN nvarchar(254),
	@PendingDelete bit
)
AS
/*
** Add a row to the FilesToDelete table
*/

INSERT INTO [FilesToDelete]
( [UserID], [MachineName], [FQN], [PendingDelete]
)
VALUES
( @UserID, @MachineName, @FQN, @PendingDelete
)

/*
** Select the new row
*/
SELECT
	gv_FilesToDelete.*
FROM
	gv_FilesToDelete
WHERE
	[UserID] = @UserID
	AND [MachineName] = @MachineName
	AND [FQN] = @FQN
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailToDelete_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailToDelete_SelectAll]
AS
/*
** Select all rows from the EmailToDelete table
*/

SELECT 
	gv_EmailToDelete.*
FROM
	gv_EmailToDelete
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailToDelete_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailToDelete_Insert]
(
	@EmailGuid nvarchar(50),
	@StoreID nvarchar(500),
	@UserID nvarchar(100),
	@MessageID nchar(100)
)
AS
/*
** Add a row to the EmailToDelete table
*/

INSERT INTO [EmailToDelete]
( [EmailGuid], [StoreID], [UserID], [MessageID]
)
VALUES
( @EmailGuid, @StoreID, @UserID, @MessageID
)

/*
** Select the new row
*/
SELECT
	gv_EmailToDelete.*
FROM
	gv_EmailToDelete
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailFolder_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailFolder_Update]
(
	@UserIDOriginal nvarchar(80), 
	@UserID nvarchar(80),
	@FolderIDOriginal nvarchar(100), 
	@FolderID nvarchar(100),
	@FolderName nvarchar(254),
	@ParentFolderName nvarchar(254),
	@ParentFolderID nvarchar(100),
	@SelectedForArchive char(1),
	@StoreID nvarchar(500),
	@isSysDefault bit
)
AS
/*
** Update a row in the EmailFolder table using the primary key
*/
UPDATE [EmailFolder] SET [UserID] = @UserID, [FolderName] = @FolderName, [ParentFolderName] = @ParentFolderName, [FolderID] = @FolderID, [ParentFolderID] = @ParentFolderID, [SelectedForArchive] = @SelectedForArchive, [StoreID] = @StoreID, [isSysDefault] = @isSysDefault WHERE [UserID] = @UserIDOriginal AND [FolderID] = @FolderIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_EmailFolder.*
FROM
	gv_EmailFolder
WHERE
	[UserID] = @UserIDOriginal
	AND [FolderID] = @FolderIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailFolder_SelectByUserIDAndFolderID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailFolder_SelectByUserIDAndFolderID]
(
	@UserID nvarchar(80),
	@FolderID nvarchar(100)
)
AS
/*
** Select a row from the EmailFolder table by primary key
*/

SELECT 
	gv_EmailFolder.*
FROM
	gv_EmailFolder WHERE [UserID] = @UserID AND [FolderID] = @FolderID
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailFolder_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailFolder_SelectAll]
AS
/*
** Select all rows from the EmailFolder table
*/

SELECT 
	gv_EmailFolder.*
FROM
	gv_EmailFolder
ORDER BY
	[UserID],
	[FolderID]
GO
/****** Object:  StoredProcedure [dbo].[gp_EmailFolder_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EmailFolder_Insert]
(
	@UserID nvarchar(80),
	@FolderName nvarchar(254),
	@ParentFolderName nvarchar(254),
	@FolderID nvarchar(100),
	@ParentFolderID nvarchar(100),
	@SelectedForArchive char(1),
	@StoreID nvarchar(500),
	@isSysDefault bit
)
AS
/*
** Add a row to the EmailFolder table
*/

INSERT INTO [EmailFolder]
( [UserID], [FolderName], [ParentFolderName], [FolderID], [ParentFolderID], [SelectedForArchive], [StoreID], [isSysDefault]
)
VALUES
( @UserID, @FolderName, @ParentFolderName, @FolderID, @ParentFolderID, @SelectedForArchive, @StoreID, @isSysDefault
)

/*
** Select the new row
*/
SELECT
	gv_EmailFolder.*
FROM
	gv_EmailFolder
WHERE
	[UserID] = @UserID
	AND [FolderID] = @FolderID
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_Updates_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_Updates_Update]
(
	@FixIDOriginal int, 
	@FixID int,
	@SqlStmt nvarchar(max),
	@CreateDate datetime,
	@FixDescription nvarchar(4000),
	@DBName nvarchar(50),
	@CompanyID nvarchar(50),
	@MachineName nvarchar(50)
)
AS
/*
** Update a row in the DB_Updates table using the primary key
*/
UPDATE [DB_Updates] SET [SqlStmt] = @SqlStmt, [CreateDate] = @CreateDate, [FixID] = @FixID, [FixDescription] = @FixDescription, [DBName] = @DBName, [CompanyID] = @CompanyID, [MachineName] = @MachineName WHERE [FixID] = @FixIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_DB_Updates.*
FROM
	gv_DB_Updates
WHERE
	[FixID] = @FixIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_Updates_SelectByFixID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_Updates_SelectByFixID]
(
	@FixID int
)
AS
/*
** Select a row from the DB_Updates table by primary key
*/

SELECT 
	gv_DB_Updates.*
FROM
	gv_DB_Updates WHERE [FixID] = @FixID
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_Updates_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_Updates_SelectAll]
AS
/*
** Select all rows from the DB_Updates table
*/

SELECT 
	gv_DB_Updates.*
FROM
	gv_DB_Updates
ORDER BY
	[FixID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_Updates_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_Updates_Insert]
(
	@SqlStmt nvarchar(max),
	@CreateDate datetime,
	@FixID int,
	@FixDescription nvarchar(4000),
	@DBName nvarchar(50),
	@CompanyID nvarchar(50),
	@MachineName nvarchar(50)
)
AS
/*
** Add a row to the DB_Updates table
*/

INSERT INTO [DB_Updates]
( [SqlStmt], [CreateDate], [FixID], [FixDescription], [DBName], [CompanyID], [MachineName]
)
VALUES
( @SqlStmt, @CreateDate, @FixID, @FixDescription, @DBName, @CompanyID, @MachineName
)

/*
** Select the new row
*/
SELECT
	gv_DB_Updates.*
FROM
	gv_DB_Updates
WHERE
	[FixID] = @FixID
GO
/****** Object:  StoredProcedure [dbo].[gp_DeleteFrom_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DeleteFrom_Update]
(
	@FromEmailAddrOriginal nvarchar(254), 
	@FromEmailAddr nvarchar(254),
	@SenderNameOriginal varchar(254), 
	@SenderName varchar(254),
	@UserIDOriginal varchar(25), 
	@UserID varchar(25)
)
AS
/*
** Update a row in the DeleteFrom table using the primary key
*/
UPDATE [DeleteFrom] SET [FromEmailAddr] = @FromEmailAddr, [SenderName] = @SenderName, [UserID] = @UserID WHERE [FromEmailAddr] = @FromEmailAddrOriginal AND [SenderName] = @SenderNameOriginal AND [UserID] = @UserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_DeleteFrom.*
FROM
	gv_DeleteFrom
WHERE
	[FromEmailAddr] = @FromEmailAddrOriginal
	AND [SenderName] = @SenderNameOriginal
	AND [UserID] = @UserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DeleteFrom_SelectByFromEmailAddrAndSenderNameAndUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DeleteFrom_SelectByFromEmailAddrAndSenderNameAndUserID]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Select a row from the DeleteFrom table by primary key
*/

SELECT 
	gv_DeleteFrom.*
FROM
	gv_DeleteFrom WHERE [FromEmailAddr] = @FromEmailAddr AND [SenderName] = @SenderName AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DeleteFrom_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DeleteFrom_SelectAll]
AS
/*
** Select all rows from the DeleteFrom table
*/

SELECT 
	gv_DeleteFrom.*
FROM
	gv_DeleteFrom
ORDER BY
	[FromEmailAddr],
	[SenderName],
	[UserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DeleteFrom_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DeleteFrom_Insert]
(
	@FromEmailAddr nvarchar(254),
	@SenderName varchar(254),
	@UserID varchar(25)
)
AS
/*
** Add a row to the DeleteFrom table
*/

INSERT INTO [DeleteFrom]
( [FromEmailAddr], [SenderName], [UserID]
)
VALUES
( @FromEmailAddr, @SenderName, @UserID
)

/*
** Select the new row
*/
SELECT
	gv_DeleteFrom.*
FROM
	gv_DeleteFrom
WHERE
	[FromEmailAddr] = @FromEmailAddr
	AND [SenderName] = @SenderName
	AND [UserID] = @UserID
GO
/****** Object:  StoredProcedure [dbo].[gp_EcmUser_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EcmUser_Update]
(
	@EMailOriginal nvarchar(50), 
	@EMail nvarchar(50),
	@PhoneNumber nvarchar(20),
	@YourName nvarchar(100),
	@YourCompany nvarchar(50),
	@PassWord nvarchar(50),
	@Authority nchar(1),
	@CreateDate datetime,
	@CompanyID nvarchar(50),
	@LastUpdate datetime
)
AS
/*
** Update a row in the EcmUser table using the primary key
*/
UPDATE [EcmUser] SET [EMail] = @EMail, [PhoneNumber] = @PhoneNumber, [YourName] = @YourName, [YourCompany] = @YourCompany, [PassWord] = @PassWord, [Authority] = @Authority, [CreateDate] = @CreateDate, [CompanyID] = @CompanyID, [LastUpdate] = @LastUpdate WHERE [EMail] = @EMailOriginal


/*
** Select the updated row
*/
SELECT
	gv_EcmUser.*
FROM
	gv_EcmUser
WHERE
	[EMail] = @EMailOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_EcmUser_SelectByEMail]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EcmUser_SelectByEMail]
(
	@EMail nvarchar(50)
)
AS
/*
** Select a row from the EcmUser table by primary key
*/

SELECT 
	gv_EcmUser.*
FROM
	gv_EcmUser WHERE [EMail] = @EMail
GO
/****** Object:  StoredProcedure [dbo].[gp_EcmUser_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EcmUser_SelectAll]
AS
/*
** Select all rows from the EcmUser table
*/

SELECT 
	gv_EcmUser.*
FROM
	gv_EcmUser
ORDER BY
	[EMail]
GO
/****** Object:  StoredProcedure [dbo].[gp_EcmUser_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_EcmUser_Insert]
(
	@EMail nvarchar(50),
	@PhoneNumber nvarchar(20),
	@YourName nvarchar(100),
	@YourCompany nvarchar(50),
	@PassWord nvarchar(50),
	@Authority nchar(1),
	@CreateDate datetime,
	@CompanyID nvarchar(50),
	@LastUpdate datetime
)
AS
/*
** Add a row to the EcmUser table
*/

INSERT INTO [EcmUser]
( [EMail], [PhoneNumber], [YourName], [YourCompany], [PassWord], [Authority], [CreateDate], [CompanyID], [LastUpdate]
)
VALUES
( @EMail, @PhoneNumber, @YourName, @YourCompany, @PassWord, @Authority, @CreateDate, @CompanyID, @LastUpdate
)

/*
** Select the new row
*/
SELECT
	gv_EcmUser.*
FROM
	gv_EcmUser
WHERE
	[EMail] = @EMail
GO
/****** Object:  StoredProcedure [dbo].[gp_DataOwners_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataOwners_Update]
(
	@SourceGuidOriginal nvarchar(50), 
	@SourceGuid nvarchar(50),
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@GroupOwnerUserIDOriginal nvarchar(50), 
	@GroupOwnerUserID nvarchar(50),
	@GroupNameOriginal nvarchar(80), 
	@GroupName nvarchar(80),
	@DataSourceOwnerUserIDOriginal nvarchar(50), 
	@DataSourceOwnerUserID nvarchar(50),
	@PrimaryOwner bit,
	@OwnerTypeCode nvarchar(50),
	@FullAccess bit,
	@ReadOnly bit,
	@DeleteAccess bit,
	@Searchable bit
)
AS
/*
** Update a row in the DataOwners table using the primary key
*/
UPDATE [DataOwners] SET [PrimaryOwner] = @PrimaryOwner, [OwnerTypeCode] = @OwnerTypeCode, [FullAccess] = @FullAccess, [ReadOnly] = @ReadOnly, [DeleteAccess] = @DeleteAccess, [Searchable] = @Searchable, [SourceGuid] = @SourceGuid, [UserID] = @UserID, [GroupOwnerUserID] = @GroupOwnerUserID, [GroupName] = @GroupName, [DataSourceOwnerUserID] = @DataSourceOwnerUserID WHERE [SourceGuid] = @SourceGuidOriginal AND [UserID] = @UserIDOriginal AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal AND [GroupName] = @GroupNameOriginal AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_DataOwners.*
FROM
	gv_DataOwners
WHERE
	[SourceGuid] = @SourceGuidOriginal
	AND [UserID] = @UserIDOriginal
	AND [GroupOwnerUserID] = @GroupOwnerUserIDOriginal
	AND [GroupName] = @GroupNameOriginal
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DataOwners_SelectBySourceGuidAndUserIDAndGroupOwnerUserIDAndGroupNameAndDataSourceOwnerUserID]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataOwners_SelectBySourceGuidAndUserIDAndGroupOwnerUserIDAndGroupNameAndDataSourceOwnerUserID]
(
	@SourceGuid nvarchar(50),
	@UserID nvarchar(50),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Select a row from the DataOwners table by primary key
*/

SELECT 
	gv_DataOwners.*
FROM
	gv_DataOwners WHERE [SourceGuid] = @SourceGuid AND [UserID] = @UserID AND [GroupOwnerUserID] = @GroupOwnerUserID AND [GroupName] = @GroupName AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DataOwners_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataOwners_SelectAll]
AS
/*
** Select all rows from the DataOwners table
*/

SELECT 
	gv_DataOwners.*
FROM
	gv_DataOwners
ORDER BY
	[SourceGuid],
	[UserID],
	[GroupOwnerUserID],
	[GroupName],
	[DataSourceOwnerUserID]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataOwners_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataOwners_Insert]
(
	@PrimaryOwner bit,
	@OwnerTypeCode nvarchar(50),
	@FullAccess bit,
	@ReadOnly bit,
	@DeleteAccess bit,
	@Searchable bit,
	@SourceGuid nvarchar(50),
	@UserID nvarchar(50),
	@GroupOwnerUserID nvarchar(50),
	@GroupName nvarchar(80),
	@DataSourceOwnerUserID nvarchar(50)
)
AS
/*
** Add a row to the DataOwners table
*/

INSERT INTO [DataOwners]
( [PrimaryOwner], [OwnerTypeCode], [FullAccess], [ReadOnly], [DeleteAccess], [Searchable], [SourceGuid], [UserID], [GroupOwnerUserID], [GroupName], [DataSourceOwnerUserID]
)
VALUES
( @PrimaryOwner, @OwnerTypeCode, @FullAccess, @ReadOnly, @DeleteAccess, @Searchable, @SourceGuid, @UserID, @GroupOwnerUserID, @GroupName, @DataSourceOwnerUserID
)

/*
** Select the new row
*/
SELECT
	gv_DataOwners.*
FROM
	gv_DataOwners
WHERE
	[SourceGuid] = @SourceGuid
	AND [UserID] = @UserID
	AND [GroupOwnerUserID] = @GroupOwnerUserID
	AND [GroupName] = @GroupName
	AND [DataSourceOwnerUserID] = @DataSourceOwnerUserID
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_UpdateHist_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_UpdateHist_Update]
(
	@FixIDOriginal int, 
	@FixID int,
	@CompanyIDOriginal nvarchar(50), 
	@CompanyID nvarchar(50),
	@MachineNameOriginal nvarchar(50), 
	@MachineName nvarchar(50),
	@CreateDate datetime,
	@DBName nvarchar(50),
	@Status nvarchar(50)
)
AS
/*
** Update a row in the DB_UpdateHist table using the primary key
*/
UPDATE [DB_UpdateHist] SET [CreateDate] = @CreateDate, [FixID] = @FixID, [DBName] = @DBName, [CompanyID] = @CompanyID, [MachineName] = @MachineName, [Status] = @Status WHERE [FixID] = @FixIDOriginal AND [CompanyID] = @CompanyIDOriginal AND [MachineName] = @MachineNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_DB_UpdateHist.*
FROM
	gv_DB_UpdateHist
WHERE
	[FixID] = @FixIDOriginal
	AND [CompanyID] = @CompanyIDOriginal
	AND [MachineName] = @MachineNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_UpdateHist_SelectByFixIDAndCompanyIDAndMachineName]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_UpdateHist_SelectByFixIDAndCompanyIDAndMachineName]
(
	@FixID int,
	@CompanyID nvarchar(50),
	@MachineName nvarchar(50)
)
AS
/*
** Select a row from the DB_UpdateHist table by primary key
*/

SELECT 
	gv_DB_UpdateHist.*
FROM
	gv_DB_UpdateHist WHERE [FixID] = @FixID AND [CompanyID] = @CompanyID AND [MachineName] = @MachineName
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_UpdateHist_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_UpdateHist_SelectAll]
AS
/*
** Select all rows from the DB_UpdateHist table
*/

SELECT 
	gv_DB_UpdateHist.*
FROM
	gv_DB_UpdateHist
ORDER BY
	[FixID],
	[CompanyID],
	[MachineName]
GO
/****** Object:  StoredProcedure [dbo].[gp_DB_UpdateHist_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DB_UpdateHist_Insert]
(
	@CreateDate datetime,
	@FixID int,
	@DBName nvarchar(50),
	@CompanyID nvarchar(50),
	@MachineName nvarchar(50),
	@Status nvarchar(50)
)
AS
/*
** Add a row to the DB_UpdateHist table
*/

INSERT INTO [DB_UpdateHist]
( [CreateDate], [FixID], [DBName], [CompanyID], [MachineName], [Status]
)
VALUES
( @CreateDate, @FixID, @DBName, @CompanyID, @MachineName, @Status
)

/*
** Select the new row
*/
SELECT
	gv_DB_UpdateHist.*
FROM
	gv_DB_UpdateHist
WHERE
	[FixID] = @FixID
	AND [CompanyID] = @CompanyID
	AND [MachineName] = @MachineName
GO
/****** Object:  StoredProcedure [dbo].[gp_DataTypeCodes_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataTypeCodes_Update]
(
	@FileTypeOriginal nvarchar(255), 
	@FileType nvarchar(255),
	@VerNbr nvarchar(255),
	@Publisher nvarchar(255),
	@Definition nvarchar(255)
)
AS
/*
** Update a row in the DataTypeCodes table using the primary key
*/
UPDATE [DataTypeCodes] SET [FileType] = @FileType, [VerNbr] = @VerNbr, [Publisher] = @Publisher, [Definition] = @Definition WHERE [FileType] = @FileTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_DataTypeCodes.*
FROM
	gv_DataTypeCodes
WHERE
	[FileType] = @FileTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DataTypeCodes_SelectByFileType]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataTypeCodes_SelectByFileType]
(
	@FileType nvarchar(255)
)
AS
/*
** Select a row from the DataTypeCodes table by primary key
*/

SELECT 
	gv_DataTypeCodes.*
FROM
	gv_DataTypeCodes WHERE [FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_DataTypeCodes_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataTypeCodes_SelectAll]
AS
/*
** Select all rows from the DataTypeCodes table
*/

SELECT 
	gv_DataTypeCodes.*
FROM
	gv_DataTypeCodes
ORDER BY
	[FileType]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataTypeCodes_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataTypeCodes_Insert]
(
	@FileType nvarchar(255),
	@VerNbr nvarchar(255),
	@Publisher nvarchar(255),
	@Definition nvarchar(255)
)
AS
/*
** Add a row to the DataTypeCodes table
*/

INSERT INTO [DataTypeCodes]
( [FileType], [VerNbr], [Publisher], [Definition]
)
VALUES
( @FileType, @VerNbr, @Publisher, @Definition
)

/*
** Select the new row
*/
SELECT
	gv_DataTypeCodes.*
FROM
	gv_DataTypeCodes
WHERE
	[FileType] = @FileType
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_Update]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_Update]
(
	@SeqNoOriginal int,
	@SourceGuid nvarchar(50),
	@RestoredToMachine nvarchar(50),
	@RestoreUserName nvarchar(50),
	@RestoreUserID nvarchar(50),
	@RestoreUserDomain nvarchar(254),
	@RestoreDate datetime,
	@DataSourceOwnerUserID nvarchar(50),
	@TypeContentCode nvarchar(50),
	@CreateDate datetime,
	@DocumentName nvarchar(254),
	@FQN nvarchar(500),
	@VerifiedData nchar(1),
	@OrigCrc nvarchar(50),
	@RestoreCrc nvarchar(50)
)
AS
/*
** Update a row in the DataSourceRestoreHistory table using the primary key
*/
UPDATE [DataSourceRestoreHistory] SET [SourceGuid] = @SourceGuid, [RestoredToMachine] = @RestoredToMachine, [RestoreUserName] = @RestoreUserName, [RestoreUserID] = @RestoreUserID, [RestoreUserDomain] = @RestoreUserDomain, [RestoreDate] = @RestoreDate, [DataSourceOwnerUserID] = @DataSourceOwnerUserID, [TypeContentCode] = @TypeContentCode, [CreateDate] = @CreateDate, [DocumentName] = @DocumentName, [FQN] = @FQN, [VerifiedData] = @VerifiedData, [OrigCrc] = @OrigCrc, [RestoreCrc] = @RestoreCrc WHERE [SeqNo] = @SeqNoOriginal


/*
** Select the updated row
*/
SELECT
	gv_DataSourceRestoreHistory.*
FROM
	gv_DataSourceRestoreHistory
WHERE
	[SeqNo] = @SeqNoOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_SelectBySeqNo]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_SelectBySeqNo]
(
	@SeqNo int
)
AS
/*
** Select a row from the DataSourceRestoreHistory table by primary key
*/

SELECT 
	gv_DataSourceRestoreHistory.*
FROM
	gv_DataSourceRestoreHistory WHERE [SeqNo] = @SeqNo
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_SelectByDataSourceOwnerUserIDAndSourceGuid]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_SelectByDataSourceOwnerUserIDAndSourceGuid]
(
	@DataSourceOwnerUserID nvarchar(50),
	@SourceGuid nvarchar(50)
)
AS
/*
** Select rows from the DataSourceRestoreHistory table by DataSourceOwnerUserID and SourceGuid
*/
SELECT 
	gv_DataSourceRestoreHistory.*
FROM
	gv_DataSourceRestoreHistory WHERE [DataSourceOwnerUserID] = @DataSourceOwnerUserID AND [SourceGuid] = @SourceGuid ORDER BY [SeqNo]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_SelectAll]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_SelectAll]
AS
/*
** Select all rows from the DataSourceRestoreHistory table
*/

SELECT 
	gv_DataSourceRestoreHistory.*
FROM
	gv_DataSourceRestoreHistory
ORDER BY
	[SeqNo]
GO
/****** Object:  StoredProcedure [dbo].[gp_DataSourceRestoreHistory_Insert]    Script Date: 05/18/2011 16:16:58 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_DataSourceRestoreHistory_Insert]
(
	@SourceGuid nvarchar(50),
	@RestoredToMachine nvarchar(50),
	@RestoreUserName nvarchar(50),
	@RestoreUserID nvarchar(50),
	@RestoreUserDomain nvarchar(254),
	@RestoreDate datetime,
	@DataSourceOwnerUserID nvarchar(50),
	@TypeContentCode nvarchar(50),
	@CreateDate datetime,
	@DocumentName nvarchar(254),
	@FQN nvarchar(500),
	@VerifiedData nchar(1),
	@OrigCrc nvarchar(50),
	@RestoreCrc nvarchar(50)
)
AS
/*
** Add a row to the DataSourceRestoreHistory table
*/

INSERT INTO [DataSourceRestoreHistory]
( [SourceGuid], [RestoredToMachine], [RestoreUserName], [RestoreUserID], [RestoreUserDomain], [RestoreDate], [DataSourceOwnerUserID], [TypeContentCode], [CreateDate], [DocumentName], [FQN], [VerifiedData], [OrigCrc], [RestoreCrc]
)
VALUES
( @SourceGuid, @RestoredToMachine, @RestoreUserName, @RestoreUserID, @RestoreUserDomain, @RestoreDate, @DataSourceOwnerUserID, @TypeContentCode, @CreateDate, @DocumentName, @FQN, @VerifiedData, @OrigCrc, @RestoreCrc
)

/*
** Select the new row
*/
SELECT
	gv_DataSourceRestoreHistory.*
FROM
	gv_DataSourceRestoreHistory
WHERE
	[SeqNo] = (SELECT SCOPE_IDENTITY())
GO
/****** Object:  StoredProcedure [dbo].[gp_WebSource_Update]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_WebSource_Update]
(
	@SourceGuidOriginal nvarchar(50), 
	@SourceGuid nvarchar(50),
	@CreateDate datetime,
	@SourceName nvarchar(254),
	@SourceImage image,
	@SourceTypeCode nvarchar(50),
	@FileLength int,
	@LastWriteTime datetime,
	@RetentionExpirationDate datetime,
	@Description nvarchar(max),
	@KeyWords nvarchar(2000),
	@Notes nvarchar(2000),
	@CreationDate datetime
)
AS
/*
** Update a row in the WebSource table using the primary key
*/
UPDATE [WebSource] SET [SourceGuid] = @SourceGuid, [CreateDate] = @CreateDate, [SourceName] = @SourceName, [SourceImage] = @SourceImage, [SourceTypeCode] = @SourceTypeCode, [FileLength] = @FileLength, [LastWriteTime] = @LastWriteTime, [RetentionExpirationDate] = @RetentionExpirationDate, [Description] = @Description, [KeyWords] = @KeyWords, [Notes] = @Notes, [CreationDate] = @CreationDate WHERE [SourceGuid] = @SourceGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_WebSource.*
FROM
	gv_WebSource
WHERE
	[SourceGuid] = @SourceGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_WebSource_SelectBySourceGuid]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_WebSource_SelectBySourceGuid]
(
	@SourceGuid nvarchar(50)
)
AS
/*
** Select a row from the WebSource table by primary key
*/

SELECT 
	gv_WebSource.*
FROM
	gv_WebSource WHERE [SourceGuid] = @SourceGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_WebSource_SelectAll]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_WebSource_SelectAll]
AS
/*
** Select all rows from the WebSource table
*/

SELECT 
	gv_WebSource.*
FROM
	gv_WebSource
ORDER BY
	[SourceGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_WebSource_Insert]    Script Date: 05/18/2011 16:17:01 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_WebSource_Insert]
(
	@SourceGuid nvarchar(50),
	@CreateDate datetime,
	@SourceName nvarchar(254),
	@SourceImage image,
	@SourceTypeCode nvarchar(50),
	@FileLength int,
	@LastWriteTime datetime,
	@RetentionExpirationDate datetime,
	@Description nvarchar(max),
	@KeyWords nvarchar(2000),
	@Notes nvarchar(2000),
	@CreationDate datetime
)
AS
/*
** Add a row to the WebSource table
*/

INSERT INTO [WebSource]
( [SourceGuid], [CreateDate], [SourceName], [SourceImage], [SourceTypeCode], [FileLength], [LastWriteTime], [RetentionExpirationDate], [Description], [KeyWords], [Notes], [CreationDate]
)
VALUES
( @SourceGuid, @CreateDate, @SourceName, @SourceImage, @SourceTypeCode, @FileLength, @LastWriteTime, @RetentionExpirationDate, @Description, @KeyWords, @Notes, @CreationDate
)

/*
** Select the new row
*/
SELECT
	gv_WebSource.*
FROM
	gv_WebSource
WHERE
	[SourceGuid] = @SourceGuid
GO
/****** Object:  Trigger [trigArchiveHist_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigArchiveHist_Update]
   ON [dbo].[ArchiveHist]
         AFTER Update 
   AS
         BEGIN 
         UPDATE ArchiveHist 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      ArchiveHist.ArchiveID = inserted.ArchiveID
 End
GO
/****** Object:  StoredProcedure [dbo].[sp_fulltext_load_thesaurus_fileV2]    Script Date: 05/18/2011 16:17:02 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
create PROC [dbo].[sp_fulltext_load_thesaurus_fileV2]
    @lcid int,
    @loadOnlyIfNotLoaded bit = 0
AS
BEGIN
    SET NOCOUNT ON
    SET IMPLICIT_TRANSACTIONS OFF

    -- sp_fulltext_load_thesaurus_files will run under read committed isolation level
    SET TRANSACTION ISOLATION LEVEL READ COMMITTED

    -- CHECK PERMISSIONS (must be serveradmin)
    if (is_srvrolemember('serveradmin') = 0)
    begin
        raiserror(15247,-1,-1)
        return 1
    end

    -- Disallow user transaction on this sp
    --
    if @@trancount > 0
    begin
        raiserror(15002,-1,-1,'sys.sp_fulltext_load_thesaurus_file')
        return 1
    end

    BEGIN TRY

    BEGIN TRAN

    DECLARE @thesaurusFilePath nvarchar(260)
    SELECT @thesaurusFilePath = NULL
    SELECT @thesaurusFilePath = thesaurus_file_path 
    FROM sys.fn_ft_thesaurus_files()
    WHERE lcid = @lcid

    -- raiserror if @filePath is NULL
    --
    IF (@thesaurusFilePath IS NULL)
    BEGIN
        RAISERROR(30048, 16, 1, @lcid) 
    END
 
    -- load the XML thesaurus file into an xml datatype variable, thereby ensuring that the XML is well formed
    -- Note: the XML is not validated against a schema, since there are issues with the Yukon XML files
    --
    DECLARE @thesaurus xml
    DECLARE @sqlString nvarchar(1024)
    SELECT @sqlString=N'SELECT @thesaurusOut=X.root FROM OPENROWSET(BULK N' + QUOTENAME(@thesaurusFilePath, '''') + N', SINGLE_BLOB) AS X(root)'
    EXECUTE sp_executesql @sqlString, N'@thesaurusOut xml OUTPUT', @thesaurusOut = @thesaurus OUTPUT;

    DECLARE @diacritics_sensitive bit
    SELECT @diacritics_sensitive = 0
    SELECT @diacritics_sensitive = Thesaurus.d_s.value('.', 'bit') 
    FROM @thesaurus.nodes(N'declare namespace PD="x-schema:tsSchema.xml";/XML/PD:thesaurus/PD:diacritics_sensitive') AS Thesaurus(d_s)

    -- This takes a lock on the lcid row
    -- All codepaths accessing the state table, phrase table serialize on the lcid row in this table
    BEGIN TRY
       INSERT tempdb.sys.fulltext_thesaurus_metadata_table VALUES(@lcid, @diacritics_sensitive)
    END TRY
    BEGIN CATCH
       DECLARE @error int
       SELECT @error = ERROR_NUMBER()
       IF (@error = 2601)
       BEGIN
          IF (@loadOnlyIfNotLoaded = 0)
          BEGIN
             -- This means this is a user explicitly calling sp_fulltext_load_thesaurus_file and hence we should
             -- load the thesaurus file again
             -- Note that no code path deletes rows from this table, hence there is no race condition here
             -- 
             UPDATE tempdb.sys.fulltext_thesaurus_metadata_table 
             SET diacritics_sensitive=@diacritics_sensitive
             WHERE lcid=@lcid
          END
          ELSE
          BEGIN
             COMMIT TRAN

             -- this means the engine is trying to load the thesaurus file as part of query
             -- and so we dont need to load the thesaurus file again
             RETURN 0
          END
       END
    END CATCH

    -- deleting existing entries for this lcid from phrase table
    --
    DELETE tempdb.sys.fulltext_thesaurus_phrase_table 
    WHERE lcid = @lcid;

    -- insert expansions and replacements
    -- Note the cast to 513 below. The max string we allow is 512 characters. If there is a phrase 
    -- longer than 512 in the file, it will get truncated to 513 length below but the word breaker fn will ex_raise
    -- it. If we make it 512 below, then the string will get silently truncated which we dont want to happen
    -- We can change to nvarchar(max) also below, but I am keeping it nvarchar(513) for perf reasons
    --
    with xmlnamespaces (N'x-schema:tsSchema.xml' as PD)
    INSERT INTO tempdb.sys.fulltext_thesaurus_phrase_table (groupid, isExpansion, isLHSOfReplacement, lcid, terms)
    SELECT X.rowid AS GroupId, 
           X.isexp AS IsExpansion, 
           Sub.Val.value('if (local-name(.) eq "pat") then 1 else 0', 'int') AS isLHSOfReplacement,
           @lcid,
           WordBrokenPhrase.concatenated_terms
    FROM
    (
    SELECT T2.exp.query('.'), 
           T2.exp.value('if (local-name(.) eq "expansion") then 1 else 0', 'int') isexp, 
           row_number() over (order by T3.DummyOrderingColumn) rowid
    FROM @thesaurus.nodes(N'(/XML/PD:thesaurus/PD:expansion, /XML/PD:thesaurus/PD:replacement)') AS T2(exp)
         -- this CROSS APPLY is needed since order by T2.exp is not a supported feature (even though it works)
         -- There is a light weight improvement that exposes ordpaths and when that gets done, one could potentially
         -- directly order by the ordpath above
         --
         CROSS APPLY (SELECT 1 AS DummyOrderingColumn) T3
    ) X(exprep, isexp, rowid)
    CROSS APPLY 
    X.exprep.nodes(N'(/PD:expansion/PD:sub, /PD:replacement/PD:pat, /PD:replacement/PD:sub)') AS Sub(Val)
    CROSS APPLY 
    sys.fn_ft_wordbreaker(@lcid, @diacritics_sensitive, Sub.Val.value('.', 'nvarchar(513)')) AS WordBrokenPhrase

    -- Update state table corresponding to phrase table
    --
    EXEC sys.sp_fulltext_thesaurus_update @lcid

    -- We need to bump up the version of the thesaurus for this lcid --
    -- This will cause a recompile on any query using an older thesaurus version -- 
    DBCC CALLFULLTEXT(23, 1, @lcid)

    COMMIT TRAN

    RETURN 0

    END TRY
    BEGIN CATCH
       IF (XACT_STATE() <> 0)
       BEGIN
          ROLLBACK TRAN
       END
       
       DECLARE @errorNumber int
       EXEC @errorNumber=sys.sp_fulltext_rethrow_error
       RETURN @errorNumber
    END CATCH
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ActiveSearchGuids_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ActiveSearchGuids_Update]
(
	@UserIDOriginal nvarchar(50), 
	@UserID nvarchar(50),
	@DocGuidOriginal nvarchar(50), 
	@DocGuid nvarchar(50),
	@SeqNO int
)
AS
/*
** Update a row in the ActiveSearchGuids table using the primary key
*/
UPDATE [ActiveSearchGuids] SET [UserID] = @UserID, [DocGuid] = @DocGuid WHERE [UserID] = @UserIDOriginal AND [DocGuid] = @DocGuidOriginal


/*
** Select the updated row
*/
SELECT
	gv_ActiveSearchGuids.*
FROM
	gv_ActiveSearchGuids
WHERE
	[UserID] = @UserIDOriginal
	AND [DocGuid] = @DocGuidOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ActiveSearchGuids_SelectByUserIDAndDocGuid]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ActiveSearchGuids_SelectByUserIDAndDocGuid]
(
	@UserID nvarchar(50),
	@DocGuid nvarchar(50)
)
AS
/*
** Select a row from the ActiveSearchGuids table by primary key
*/

SELECT 
	gv_ActiveSearchGuids.*
FROM
	gv_ActiveSearchGuids WHERE [UserID] = @UserID AND [DocGuid] = @DocGuid
GO
/****** Object:  StoredProcedure [dbo].[gp_ActiveSearchGuids_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ActiveSearchGuids_SelectAll]
AS
/*
** Select all rows from the ActiveSearchGuids table
*/

SELECT 
	gv_ActiveSearchGuids.*
FROM
	gv_ActiveSearchGuids
ORDER BY
	[UserID],
	[DocGuid]
GO
/****** Object:  StoredProcedure [dbo].[gp_ActiveSearchGuids_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ActiveSearchGuids_Insert]
(
	@UserID nvarchar(50),
	@DocGuid nvarchar(50)
)
AS
/*
** Add a row to the ActiveSearchGuids table
*/

INSERT INTO [ActiveSearchGuids]
( [UserID], [DocGuid]
)
VALUES
( @UserID, @DocGuid
)

/*
** Select the new row
*/
SELECT
	gv_ActiveSearchGuids.*
FROM
	gv_ActiveSearchGuids
WHERE
	[UserID] = @UserID
	AND [DocGuid] = @DocGuid
GO
/****** Object:  Trigger [trigAttributes_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigAttributes_Update]
   ON [dbo].[Attributes]
         AFTER Update 
   AS
         BEGIN 
         UPDATE Attributes 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      Attributes.AttributeName = inserted.AttributeName
 End
GO
/****** Object:  View [dbo].[gv_Attributes]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_Attributes]
AS
/*
** Select all rows from the Attributes table
** and the lookup expressions defined for associated tables
*/
SELECT [Attributes].* FROM [Attributes]
GO
/****** Object:  Trigger [ArchiveHist_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[ArchiveHist_INS]
   ON [dbo].[ArchiveHist]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE ArchiveHist
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM ArchiveHist t
   JOIN inserted i
   ON 
     t.ArchiveID = i.ArchiveID
GO
/****** Object:  Table [dbo].[AttributeDatatype]    Script Date: 05/18/2011 16:17:10 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TABLE [dbo].[AttributeDatatype](
	[AttributeDataType] [nvarchar](50) NOT NULL,
	[HiveConnectionName] [nvarchar](50) NULL,
	[HiveActive] [bit] NULL,
	[RepoSvrName] [nvarchar](254) NULL,
	[RowCreationDate] [datetime] NULL,
	[RowLastModDate] [datetime] NULL,
 CONSTRAINT [PK109] PRIMARY KEY CLUSTERED 
(
	[AttributeDataType] ASC
)WITH (PAD_INDEX  = OFF, STATISTICS_NORECOMPUTE  = OFF, IGNORE_DUP_KEY = OFF, ALLOW_ROW_LOCKS  = ON, ALLOW_PAGE_LOCKS  = ON, FILLFACTOR = 80) ON [PRIMARY]
) ON [PRIMARY]
GO
/****** Object:  Trigger [AttributeDatatype_INS]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
Create TRIGGER [dbo].[AttributeDatatype_INS]
   ON [dbo].[AttributeDatatype]
   FOR UPDATE 
 AS
   IF ( @@ROWCOUNT = 0 )
                 Return
   IF TRIGGER_NESTLEVEL() > 1
                 Return
   UPDATE AttributeDatatype
   SET RowLastModDate = getdate(),  RowCreationDate = getdate(), [RepoSvrName] = @@SERVERNAME
   FROM AttributeDatatype t
   JOIN inserted i
   ON 
     t.AttributeDataType = i.AttributeDataType
GO
/****** Object:  View [dbo].[gv_AttributeDatatype]    Script Date: 05/18/2011 16:17:16 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE VIEW [dbo].[gv_AttributeDatatype]
AS
/*
** Select all rows from the AttributeDatatype table
** and the lookup expressions defined for associated tables
*/
SELECT [AttributeDatatype].* FROM [AttributeDatatype]
GO
/****** Object:  Trigger [trigAttributeDatatype_Update]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE TRIGGER [dbo].[trigAttributeDatatype_Update]
   ON [dbo].[AttributeDatatype]
         AFTER Update 
   AS
         BEGIN 
         UPDATE AttributeDatatype 
   SET RowLastModDate = GETDATE(), [RepoSvrName] = @@SERVERNAME
         FROM inserted 
   WHERE      AttributeDatatype.AttributeDataType = inserted.AttributeDataType
 End
GO
/****** Object:  StoredProcedure [dbo].[gp_AttributeDatatype_Delete]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttributeDatatype_Delete]
(
	@AttributeDataType nvarchar(50)
)
AS
/*
** Delete a row from the AttributeDatatype table
*/
DELETE FROM [AttributeDatatype] WHERE [AttributeDataType] = @AttributeDataType

IF @@ROWCOUNT = 0
BEGIN
	RAISERROR ('Delete failed: Zero rows were deleted from the AttributeDatatype table', 16, 1)
END
GO
/****** Object:  Trigger [AttributeDatatypeUpdTrig]    Script Date: 05/18/2011 16:17:17 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * TRIGGER: AttributeDatatypeUpdTrig 
 */

CREATE TRIGGER [dbo].[AttributeDatatypeUpdTrig] ON [dbo].[AttributeDatatype]
FOR UPDATE AS
BEGIN
    DECLARE
        @AttributeDataType nvarchar(50),
        @Rows      int,
        @NullRows  int,
        @ValidRows int

    SELECT @Rows = @@rowcount
    IF @Rows = 0
        RETURN

-- Parent Update: CASCADE

    IF (UPDATE(AttributeDataType))
    BEGIN
        SELECT @AttributeDataType = AttributeDataType
        FROM inserted

        UPDATE Attributes
          SET AttributeDataType = @AttributeDataType
        FROM Attributes ch, deleted
        WHERE
            ch.AttributeDataType = deleted.AttributeDataType
    END

END
GO
/****** Object:  StoredProcedure [dbo].[AttributeDatatypeSelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
/* 
 * PROCEDURE: AttributeDatatypeSelProc 
 */

CREATE PROCEDURE [dbo].[AttributeDatatypeSelProc]
(
    @AttributeDataType     nvarchar(50))
AS
BEGIN
    SELECT AttributeDataType
      FROM AttributeDatatype
     WHERE AttributeDataType = @AttributeDataType

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[AttributeDatatypeInsProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AttributeDatatypeInsProc]
(
    @AttributeDataType     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    INSERT INTO AttributeDatatype(AttributeDataType)
    VALUES(@AttributeDataType)

    IF (@@error!=0)
    BEGIN
        RAISERROR  20000 'AttributeDatatypeInsProc: Cannot insert because primary key value not found in AttributeDatatype '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

END
GO
/****** Object:  StoredProcedure [dbo].[AttributeDatatypeDelProc]    Script Date: 05/18/2011 16:16:56 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER OFF
GO
CREATE PROCEDURE [dbo].[AttributeDatatypeDelProc]
(
    @AttributeDataType     nvarchar(50))
AS
BEGIN
    BEGIN TRAN

    DELETE
      FROM AttributeDatatype
     WHERE AttributeDataType = @AttributeDataType

    IF (@@error!=0)
    BEGIN
        RAISERROR  20002 'AttributeDatatypeDelProc: Cannot delete because foreign keys still exist in AttributeDatatype '
        ROLLBACK TRAN
        RETURN(1)
    
    END

    COMMIT TRAN

    RETURN(0)
END
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHist_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHist_Update]
(
	@ArchiveIDOriginal nvarchar(50), 
	@ArchiveID nvarchar(50),
	@ArchiveDate datetime,
	@NbrFilesArchived int,
	@UserGuid nvarchar(50)
)
AS
/*
** Update a row in the ArchiveHist table using the primary key
*/
UPDATE [ArchiveHist] SET [ArchiveID] = @ArchiveID, [ArchiveDate] = @ArchiveDate, [NbrFilesArchived] = @NbrFilesArchived, [UserGuid] = @UserGuid WHERE [ArchiveID] = @ArchiveIDOriginal


/*
** Select the updated row
*/
SELECT
	gv_ArchiveHist.*
FROM
	gv_ArchiveHist
WHERE
	[ArchiveID] = @ArchiveIDOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHist_SelectByArchiveID]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHist_SelectByArchiveID]
(
	@ArchiveID nvarchar(50)
)
AS
/*
** Select a row from the ArchiveHist table by primary key
*/

SELECT 
	gv_ArchiveHist.*
FROM
	gv_ArchiveHist WHERE [ArchiveID] = @ArchiveID
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHist_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHist_SelectAll]
AS
/*
** Select all rows from the ArchiveHist table
*/

SELECT 
	gv_ArchiveHist.*
FROM
	gv_ArchiveHist
ORDER BY
	[ArchiveID]
GO
/****** Object:  StoredProcedure [dbo].[gp_ArchiveHist_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_ArchiveHist_Insert]
(
	@ArchiveID nvarchar(50),
	@ArchiveDate datetime,
	@NbrFilesArchived int,
	@UserGuid nvarchar(50)
)
AS
/*
** Add a row to the ArchiveHist table
*/

INSERT INTO [ArchiveHist]
( [ArchiveID], [ArchiveDate], [NbrFilesArchived], [UserGuid]
)
VALUES
( @ArchiveID, @ArchiveDate, @NbrFilesArchived, @UserGuid
)

/*
** Select the new row
*/
SELECT
	gv_ArchiveHist.*
FROM
	gv_ArchiveHist
WHERE
	[ArchiveID] = @ArchiveID
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_Update]
(
	@AttributeNameOriginal nvarchar(50), 
	@AttributeName nvarchar(50),
	@AttributeDataType nvarchar(50),
	@AttributeDesc nvarchar(2000),
	@AssoApplication nvarchar(50),
	@AllowedValues nvarchar(254)
)
AS
/*
** Update a row in the Attributes table using the primary key
*/
UPDATE [Attributes] SET [AttributeName] = @AttributeName, [AttributeDataType] = @AttributeDataType, [AttributeDesc] = @AttributeDesc, [AssoApplication] = @AssoApplication, [AllowedValues] = @AllowedValues WHERE [AttributeName] = @AttributeNameOriginal


/*
** Select the updated row
*/
SELECT
	gv_Attributes.*
FROM
	gv_Attributes
WHERE
	[AttributeName] = @AttributeNameOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_SelectByAttributeName]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_SelectByAttributeName]
(
	@AttributeName nvarchar(50)
)
AS
/*
** Select a row from the Attributes table by primary key
*/

SELECT 
	gv_Attributes.*
FROM
	gv_Attributes WHERE [AttributeName] = @AttributeName
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_SelectByAttributeDataType]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_SelectByAttributeDataType]
(
	@AttributeDataType nvarchar(50)
)
AS
/*
** Select rows from the Attributes table by AttributeDataType
*/
SELECT 
	gv_Attributes.*
FROM
	gv_Attributes WHERE [AttributeDataType] = @AttributeDataType ORDER BY [AttributeName]
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_SelectAll]
AS
/*
** Select all rows from the Attributes table
*/

SELECT 
	gv_Attributes.*
FROM
	gv_Attributes
ORDER BY
	[AttributeName]
GO
/****** Object:  StoredProcedure [dbo].[gp_Attributes_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_Attributes_Insert]
(
	@AttributeName nvarchar(50),
	@AttributeDataType nvarchar(50),
	@AttributeDesc nvarchar(2000),
	@AssoApplication nvarchar(50),
	@AllowedValues nvarchar(254)
)
AS
/*
** Add a row to the Attributes table
*/

INSERT INTO [Attributes]
( [AttributeName], [AttributeDataType], [AttributeDesc], [AssoApplication], [AllowedValues]
)
VALUES
( @AttributeName, @AttributeDataType, @AttributeDesc, @AssoApplication, @AllowedValues
)

/*
** Select the new row
*/
SELECT
	gv_Attributes.*
FROM
	gv_Attributes
WHERE
	[AttributeName] = @AttributeName
GO
/****** Object:  StoredProcedure [dbo].[gp_AttributeDatatype_Update]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttributeDatatype_Update]
(
	@AttributeDataTypeOriginal nvarchar(50), 
	@AttributeDataType nvarchar(50)
)
AS
/*
** Update a row in the AttributeDatatype table using the primary key
*/
UPDATE [AttributeDatatype] SET [AttributeDataType] = @AttributeDataType WHERE [AttributeDataType] = @AttributeDataTypeOriginal


/*
** Select the updated row
*/
SELECT
	gv_AttributeDatatype.*
FROM
	gv_AttributeDatatype
WHERE
	[AttributeDataType] = @AttributeDataTypeOriginal
GO
/****** Object:  StoredProcedure [dbo].[gp_AttributeDatatype_SelectByAttributeDataType]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttributeDatatype_SelectByAttributeDataType]
(
	@AttributeDataType nvarchar(50)
)
AS
/*
** Select a row from the AttributeDatatype table by primary key
*/

SELECT 
	gv_AttributeDatatype.*
FROM
	gv_AttributeDatatype WHERE [AttributeDataType] = @AttributeDataType
GO
/****** Object:  StoredProcedure [dbo].[gp_AttributeDatatype_SelectAll]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttributeDatatype_SelectAll]
AS
/*
** Select all rows from the AttributeDatatype table
*/

SELECT 
	gv_AttributeDatatype.*
FROM
	gv_AttributeDatatype
ORDER BY
	[AttributeDataType]
GO
/****** Object:  StoredProcedure [dbo].[gp_AttributeDatatype_Insert]    Script Date: 05/18/2011 16:16:57 ******/
SET ANSI_NULLS ON
GO
SET QUOTED_IDENTIFIER ON
GO
CREATE PROCEDURE [dbo].[gp_AttributeDatatype_Insert]
(
	@AttributeDataType nvarchar(50)
)
AS
/*
** Add a row to the AttributeDatatype table
*/

INSERT INTO [AttributeDatatype]
( [AttributeDataType]
)
VALUES
( @AttributeDataType
)

/*
** Select the new row
*/
SELECT
	gv_AttributeDatatype.*
FROM
	gv_AttributeDatatype
WHERE
	[AttributeDataType] = @AttributeDataType
GO
/****** Object:  Default [DF__ArchiveHi__Archi__1D864D1D]    Script Date: 05/18/2011 16:17:10 ******/
ALTER TABLE [dbo].[ArchiveHist] ADD  CONSTRAINT [DF__ArchiveHi__Archi__1D864D1D]  DEFAULT (getdate()) FOR [ArchiveDate]
GO
/****** Object:  Default [DF_AssignableUserParameters_isPerm]    Script Date: 05/18/2011 16:17:10 ******/
ALTER TABLE [dbo].[AssignableUserParameters] ADD  CONSTRAINT [DF_AssignableUserParameters_isPerm]  DEFAULT ((0)) FOR [isPerm]
GO
/****** Object:  Default [DF_AttachmentType_isZipFormat]    Script Date: 05/18/2011 16:17:10 ******/
ALTER TABLE [dbo].[AttachmentType] ADD  CONSTRAINT [DF_AttachmentType_isZipFormat]  DEFAULT ((0)) FOR [isZipFormat]
GO
/****** Object:  Default [DF_Attributes_AttributeDataType]    Script Date: 05/18/2011 16:17:10 ******/
ALTER TABLE [dbo].[Attributes] ADD  CONSTRAINT [DF_Attributes_AttributeDataType]  DEFAULT ('nvarchar') FOR [AttributeDataType]
GO
/****** Object:  Default [DF_AvailFileTypesUndefined_Applied]    Script Date: 05/18/2011 16:17:10 ******/
ALTER TABLE [dbo].[AvailFileTypesUndefined] ADD  CONSTRAINT [DF_AvailFileTypesUndefined_Applied]  DEFAULT ((0)) FOR [Applied]
GO
/****** Object:  Default [DF_CLCState_CLCInstalled]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CLCState] ADD  CONSTRAINT [DF_CLCState_CLCInstalled]  DEFAULT ((0)) FOR [CLCInstalled]
GO
/****** Object:  Default [DF_CLCState_CLCActive]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CLCState] ADD  CONSTRAINT [DF_CLCState_CLCActive]  DEFAULT ((0)) FOR [CLCActive]
GO
/****** Object:  Default [DF_ConnectionStringsSaved_LastArchiveDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ConnectionStringsSaved] ADD  CONSTRAINT [DF_ConnectionStringsSaved_LastArchiveDate]  DEFAULT ('01/01/1920') FOR [LastArchiveDate]
GO
/****** Object:  Default [DF_ContactFrom_Verified]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ContactFrom] ADD  CONSTRAINT [DF_ContactFrom_Verified]  DEFAULT ((1)) FOR [Verified]
GO
/****** Object:  Default [DF__CoOwner__CreateD__36F11965]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CoOwner] ADD  CONSTRAINT [DF__CoOwner__CreateD__36F11965]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_CS_ConnectionType]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CS] ADD  CONSTRAINT [DF_CS_ConnectionType]  DEFAULT ('ECMLIB') FOR [ConnectionType]
GO
/****** Object:  Default [DF__DatabaseF__Creat__63249D2F]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DatabaseFiles] ADD  DEFAULT (getdate()) FOR [CreationDate]
GO
/****** Object:  Default [CURRDATE_04012008185318003]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [CURRDATE_04012008185318003]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_DataSource_VersionNbr]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_VersionNbr]  DEFAULT ((0)) FOR [VersionNbr]
GO
/****** Object:  Default [DF_DataSource_LastAccessDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_LastAccessDate]  DEFAULT (getdate()) FOR [LastAccessDate]
GO
/****** Object:  Default [DF_DataSource_LastWriteTime]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_LastWriteTime]  DEFAULT (getdate()) FOR [LastWriteTime]
GO
/****** Object:  Default [DF_DataSource_Public]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_Public]  DEFAULT ('N') FOR [isPublic]
GO
/****** Object:  Default [DF_DataSource_RetentionExpirationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_RetentionExpirationDate]  DEFAULT (getdate()+(3650)) FOR [RetentionExpirationDate]
GO
/****** Object:  Default [DF_DataSource_isUnavailable]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isUnavailable]  DEFAULT ('Y') FOR [isAvailable]
GO
/****** Object:  Default [DF_DataSource_isContainedWithinZipFile]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isContainedWithinZipFile]  DEFAULT ('N') FOR [isContainedWithinZipFile]
GO
/****** Object:  Default [DF_DataSource_IsZipFile]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_IsZipFile]  DEFAULT ('N') FOR [IsZipFile]
GO
/****** Object:  Default [DF_DataSource_DataVerified]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_DataVerified]  DEFAULT ((0)) FOR [DataVerified]
GO
/****** Object:  Default [DF_DataSource_isPerm]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isPerm]  DEFAULT ('N') FOR [isPerm]
GO
/****** Object:  Default [DF_DataSource_isMaster]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isMaster]  DEFAULT ('N') FOR [isMaster]
GO
/****** Object:  Default [DF_DataSource_CreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
GO
/****** Object:  Default [DF_DataSource_isGraphic]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isGraphic]  DEFAULT ('N') FOR [isGraphic]
GO
/****** Object:  Default [DF_DataSource_isWebPage]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_isWebPage]  DEFAULT ('N') FOR [isWebPage]
GO
/****** Object:  Default [DF_DataSource_RowCreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_RowCreationDate]  DEFAULT (getdate()) FOR [RowCreationDate]
GO
/****** Object:  Default [DF_DataSource_RowLastModDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSource] ADD  CONSTRAINT [DF_DataSource_RowLastModDate]  DEFAULT (getdate()) FOR [RowLastModDate]
GO
/****** Object:  Default [DF__DataSourc__check__74EE4BDE]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceCheckOut] ADD  CONSTRAINT [DF__DataSourc__check__74EE4BDE]  DEFAULT (getdate()) FOR [checkOutDate]
GO
/****** Object:  Default [DF__DataSourc__Resto__7E77B618]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceRestoreHistory] ADD  CONSTRAINT [DF__DataSourc__Resto__7E77B618]  DEFAULT (getdate()) FOR [RestoreDate]
GO
/****** Object:  Default [DF__DataSourc__Creat__7F6BDA51]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceRestoreHistory] ADD  CONSTRAINT [DF__DataSourc__Creat__7F6BDA51]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_DataSourceRestoreHistory_VerifiedData]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceRestoreHistory] ADD  CONSTRAINT [DF_DataSourceRestoreHistory_VerifiedData]  DEFAULT ('N') FOR [VerifiedData]
GO
/****** Object:  Default [DF_Directory_ckMetaData]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory] ADD  CONSTRAINT [DF_Directory_ckMetaData]  DEFAULT ('N') FOR [ckMetaData]
GO
/****** Object:  Default [DF_Directory_ckDisableDir]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory] ADD  CONSTRAINT [DF_Directory_ckDisableDir]  DEFAULT ('N') FOR [ckDisableDir]
GO
/****** Object:  Default [DF_Directory_QuickRefEntry]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory] ADD  CONSTRAINT [DF_Directory_QuickRefEntry]  DEFAULT ((0)) FOR [QuickRefEntry]
GO
/****** Object:  Default [DF_Directory_isSysDefault]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory] ADD  CONSTRAINT [DF_Directory_isSysDefault]  DEFAULT ((0)) FOR [isSysDefault]
GO
/****** Object:  Default [DF__Directory__DirGu__67F40D7A]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory] ADD  DEFAULT (newid()) FOR [DirGuid]
GO
/****** Object:  Default [DF_DirectoryListenerFiles_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DirectoryListenerFiles] ADD  CONSTRAINT [DF_DirectoryListenerFiles_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [UserAuthority]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EcmUser] ADD  CONSTRAINT [UserAuthority]  DEFAULT ('U') FOR [Authority]
GO
/****** Object:  Default [DF_EcmUser_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EcmUser] ADD  CONSTRAINT [DF_EcmUser_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF__EcmUser__LastUpd__31B762FC]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EcmUser] ADD  CONSTRAINT [DF__EcmUser__LastUpd__31B762FC]  DEFAULT (getdate()) FOR [LastUpdate]
GO
/****** Object:  Default [DF_Email_isPublic]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_isPublic]  DEFAULT ('N') FOR [isPublic]
GO
/****** Object:  Default [DF_Email_RetentionExpirationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_RetentionExpirationDate]  DEFAULT (getdate()+(8000)) FOR [RetentionExpirationDate]
GO
/****** Object:  Default [DF_Email_isAvailable]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_isAvailable]  DEFAULT ('Y') FOR [isAvailable]
GO
/****** Object:  Default [DF_Email_isPerm]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_isPerm]  DEFAULT ('N') FOR [isPerm]
GO
/****** Object:  Default [DF_Email_isMaster]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_isMaster]  DEFAULT ('N') FOR [isMaster]
GO
/****** Object:  Default [DF_Email_CreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email] ADD  CONSTRAINT [DF_Email_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
GO
/****** Object:  Default [DF_EmailArchParms_ArchiveOnlyIfRead]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailArchParms] ADD  CONSTRAINT [DF_EmailArchParms_ArchiveOnlyIfRead]  DEFAULT ('N') FOR [ArchiveOnlyIfRead]
GO
/****** Object:  Default [DF_EmailAttachment_AttachmentType]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachment] ADD  CONSTRAINT [DF_EmailAttachment_AttachmentType]  DEFAULT ('.msg') FOR [AttachmentType]
GO
/****** Object:  Default [DF_EmailAttachmentSearchList_RowCreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachmentSearchList] ADD  CONSTRAINT [DF_EmailAttachmentSearchList_RowCreationDate]  DEFAULT (getdate()) FOR [RowCreationDate]
GO
/****** Object:  Default [DF_EmailAttachmentSearchList_RowLastModDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachmentSearchList] ADD  CONSTRAINT [DF_EmailAttachmentSearchList_RowLastModDate]  DEFAULT (getdate()) FOR [RowLastModDate]
GO
/****** Object:  Default [DF_EmailFolder_isSysDefulat]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailFolder] ADD  CONSTRAINT [DF_EmailFolder_isSysDefulat]  DEFAULT ((0)) FOR [isSysDefault]
GO
/****** Object:  Default [DF_ErrorLogs_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ErrorLogs] ADD  CONSTRAINT [DF_ErrorLogs_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_ErrorLogs_Severity]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ErrorLogs] ADD  CONSTRAINT [DF_ErrorLogs_Severity]  DEFAULT (N'ERROR') FOR [Severity]
GO
/****** Object:  Default [DF_ExcgKey_InsertDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ExcgKey] ADD  CONSTRAINT [DF_ExcgKey_InsertDate]  DEFAULT (getdate()) FOR [InsertDate]
GO
/****** Object:  Default [DF_ExchangeHostPop_SSL]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ExchangeHostPop] ADD  CONSTRAINT [DF_ExchangeHostPop_SSL]  DEFAULT ((0)) FOR [SSL]
GO
/****** Object:  Default [DF_ExchangeHostPop_PortNbr]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ExchangeHostPop] ADD  CONSTRAINT [DF_ExchangeHostPop_PortNbr]  DEFAULT ((-1)) FOR [PortNbr]
GO
/****** Object:  Default [DF_ExchangeHostPop_DeleteAfterDownload]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ExchangeHostPop] ADD  CONSTRAINT [DF_ExchangeHostPop_DeleteAfterDownload]  DEFAULT ((0)) FOR [DeleteAfterDownload]
GO
/****** Object:  Default [DF_ExchangeHostPop_IMap]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ExchangeHostPop] ADD  CONSTRAINT [DF_ExchangeHostPop_IMap]  DEFAULT ((0)) FOR [IMap]
GO
/****** Object:  Default [DF_GlobalSeachResults_Weight]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[GlobalSeachResults] ADD  CONSTRAINT [DF_GlobalSeachResults_Weight]  DEFAULT ((0)) FOR [Weight]
GO
/****** Object:  Default [DF_HelpText_DisplayHelpText]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpText] ADD  CONSTRAINT [DF_HelpText_DisplayHelpText]  DEFAULT ((1)) FOR [DisplayHelpText]
GO
/****** Object:  Default [DF_HelpText_LastUpdate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpText] ADD  CONSTRAINT [DF_HelpText_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
GO
/****** Object:  Default [DF_HelpText_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpText] ADD  CONSTRAINT [DF_HelpText_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_HelpText_DisplayHelpTextUsers]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpTextUser] ADD  CONSTRAINT [DF_HelpText_DisplayHelpTextUsers]  DEFAULT ((1)) FOR [DisplayHelpText]
GO
/****** Object:  Default [DF_HelpTextUser_LastUpdate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpTextUser] ADD  CONSTRAINT [DF_HelpTextUser_LastUpdate]  DEFAULT (getdate()) FOR [LastUpdate]
GO
/****** Object:  Default [DF_HelpTextUser_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HelpTextUser] ADD  CONSTRAINT [DF_HelpTextUser_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_HiveServers_LinkedDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[HiveServers] ADD  CONSTRAINT [DF_HiveServers_LinkedDate]  DEFAULT (getdate()) FOR [LinkedDate]
GO
/****** Object:  Default [DF_Library_isPublic]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Library] ADD  CONSTRAINT [DF_Library_isPublic]  DEFAULT ('N') FOR [isPublic]
GO
/****** Object:  Default [DF__LibraryUs__ReadO__1FD8A9E3]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibraryUsers] ADD  CONSTRAINT [DF__LibraryUs__ReadO__1FD8A9E3]  DEFAULT ((0)) FOR [ReadOnly]
GO
/****** Object:  Default [DF__LibraryUs__Creat__20CCCE1C]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibraryUsers] ADD  CONSTRAINT [DF__LibraryUs__Creat__20CCCE1C]  DEFAULT ((0)) FOR [CreateAccess]
GO
/****** Object:  Default [DF__LibraryUs__Updat__21C0F255]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibraryUsers] ADD  CONSTRAINT [DF__LibraryUs__Updat__21C0F255]  DEFAULT ((1)) FOR [UpdateAccess]
GO
/****** Object:  Default [DF__LibraryUs__Delet__22B5168E]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibraryUsers] ADD  CONSTRAINT [DF__LibraryUs__Delet__22B5168E]  DEFAULT ((0)) FOR [DeleteAccess]
GO
/****** Object:  Default [DF_License_ActivationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[License] ADD  CONSTRAINT [DF_License_ActivationDate]  DEFAULT (getdate()) FOR [ActivationDate]
GO
/****** Object:  Default [DF_License_InstallDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[License] ADD  CONSTRAINT [DF_License_InstallDate]  DEFAULT (getdate()) FOR [InstallDate]
GO
/****** Object:  Default [DF_LoginClient_LoginDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LoginClient] ADD  CONSTRAINT [DF_LoginClient_LoginDate]  DEFAULT (getdate()) FOR [LoginDate]
GO
/****** Object:  Default [DF_LoginMachine_LoginDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LoginMachine] ADD  CONSTRAINT [DF_LoginMachine_LoginDate]  DEFAULT (getdate()) FOR [LoginDate]
GO
/****** Object:  Default [DF_LoginUser_LoginDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LoginUser] ADD  CONSTRAINT [DF_LoginUser_LoginDate]  DEFAULT (getdate()) FOR [LoginDate]
GO
/****** Object:  Default [DF_Logs_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Logs] ADD  CONSTRAINT [DF_Logs_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_OutlookFrom_Verified]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[OutlookFrom] ADD  CONSTRAINT [DF_OutlookFrom_Verified]  DEFAULT ((1)) FOR [Verified]
GO
/****** Object:  Default [DF__OwnerHist__Creat__2D67AF2B]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[OwnerHistory] ADD  CONSTRAINT [DF__OwnerHist__Creat__2D67AF2B]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_OwnerHistory_RowCreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[OwnerHistory] ADD  CONSTRAINT [DF_OwnerHistory_RowCreationDate]  DEFAULT (getdate()) FOR [RowCreationDate]
GO
/****** Object:  Default [DF_PgmTrace_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[PgmTrace] ADD  CONSTRAINT [DF_PgmTrace_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [QDF_Directory_ckMetaData]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickDirectory] ADD  CONSTRAINT [QDF_Directory_ckMetaData]  DEFAULT ('N') FOR [ckMetaData]
GO
/****** Object:  Default [QDF_Directory_ckDisableDir]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickDirectory] ADD  CONSTRAINT [QDF_Directory_ckDisableDir]  DEFAULT ('N') FOR [ckDisableDir]
GO
/****** Object:  Default [QDF_Directory_QuickRefEntry]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickDirectory] ADD  CONSTRAINT [QDF_Directory_QuickRefEntry]  DEFAULT ((1)) FOR [QuickRefEntry]
GO
/****** Object:  Default [DF_QuickRefItems_MarkedForDeletion]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickRefItems] ADD  CONSTRAINT [DF_QuickRefItems_MarkedForDeletion]  DEFAULT ((0)) FOR [MarkedForDeletion]
GO
/****** Object:  Default [DF_RestorationHistory_RestorationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[RestorationHistory] ADD  CONSTRAINT [DF_RestorationHistory_RestorationDate]  DEFAULT (getdate()) FOR [RestorationDate]
GO
/****** Object:  Default [DF_RestoreQueue_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[RestoreQueue] ADD  CONSTRAINT [DF_RestoreQueue_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_RestoreQueueHistory_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[RestoreQueueHistory] ADD  CONSTRAINT [DF_RestoreQueueHistory_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_RuntimeErrors_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[RuntimeErrors] ADD  CONSTRAINT [DF_RuntimeErrors_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_SearchHistory_SearchDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SearchHistory] ADD  CONSTRAINT [DF_SearchHistory_SearchDate]  DEFAULT (getdate()) FOR [SearchDate]
GO
/****** Object:  Default [DF_SearchSchedule_NumberOfExecutions]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SearchSchedule] ADD  CONSTRAINT [DF_SearchSchedule_NumberOfExecutions]  DEFAULT ((0)) FOR [NumberOfExecutions]
GO
/****** Object:  Default [DF_SearchSchedule_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SearchSchedule] ADD  CONSTRAINT [DF_SearchSchedule_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_SearchSchedule_LastModDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SearchSchedule] ADD  CONSTRAINT [DF_SearchSchedule_LastModDate]  DEFAULT (getdate()) FOR [LastModDate]
GO
/****** Object:  Default [DF_SearhParmsHistory_SearchDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SearhParmsHistory] ADD  CONSTRAINT [DF_SearhParmsHistory_SearchDate]  DEFAULT (getdate()) FOR [SearchDate]
GO
/****** Object:  Default [DF_SessionVar_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SessionVar] ADD  CONSTRAINT [DF_SessionVar_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF__SourceInj__LastE__57B2EA83]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SourceInjector] ADD  DEFAULT ('01-01-1960') FOR [LastExecDate]
GO
/****** Object:  Default [DF__SourceInj__NbrEx__58A70EBC]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SourceInjector] ADD  DEFAULT ((0)) FOR [NbrExecutions]
GO
/****** Object:  Default [FALSE]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SourceType] ADD  CONSTRAINT [FALSE]  DEFAULT ((0)) FOR [StoreExternal]
GO
/****** Object:  Default [TRUE]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SourceType] ADD  CONSTRAINT [TRUE]  DEFAULT ((1)) FOR [Indexable]
GO
/****** Object:  Default [DF_StagedSQL_EntryTime]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[StagedSQL] ADD  CONSTRAINT [DF_StagedSQL_EntryTime]  DEFAULT (getdate()) FOR [EntryTime]
GO
/****** Object:  Default [DF_SubDir_ckDisableDir]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SubDir] ADD  CONSTRAINT [DF_SubDir_ckDisableDir]  DEFAULT ('N') FOR [ckDisableDir]
GO
/****** Object:  Default [DF_Trace_EntryDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Trace] ADD  CONSTRAINT [DF_Trace_EntryDate]  DEFAULT (getdate()) FOR [EntryDate]
GO
/****** Object:  Default [DF_txTimes_CreateDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[txTimes] ADD  CONSTRAINT [DF_txTimes_CreateDate]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF__upgrade_s__statu__5CCD74E1]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[upgrade_status] ADD  DEFAULT ('INCOMPLETE') FOR [status]
GO
/****** Object:  Default [DF_UserReassignHist_ReassignmentDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[UserReassignHist] ADD  CONSTRAINT [DF_UserReassignHist_ReassignmentDate]  DEFAULT (getdate()) FOR [ReassignmentDate]
GO
/****** Object:  Default [DF_UserReassignHist_RowID]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[UserReassignHist] ADD  CONSTRAINT [DF_UserReassignHist_RowID]  DEFAULT (newid()) FOR [RowID]
GO
/****** Object:  Default [DF_Users_Admin]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_Admin]  DEFAULT ('U') FOR [Admin]
GO
/****** Object:  Default [DF_Users_isActive]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Users] ADD  CONSTRAINT [DF_Users_isActive]  DEFAULT ('Y') FOR [isActive]
GO
/****** Object:  Default [CURRDATE_WebSource]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[WebSource] ADD  CONSTRAINT [CURRDATE_WebSource]  DEFAULT (getdate()) FOR [CreateDate]
GO
/****** Object:  Default [DF_WebSource_RetentionExpirationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[WebSource] ADD  CONSTRAINT [DF_WebSource_RetentionExpirationDate]  DEFAULT (getdate()+(3650)) FOR [RetentionExpirationDate]
GO
/****** Object:  Default [DF_WebSource_CreationDate]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[WebSource] ADD  CONSTRAINT [DF_WebSource_CreationDate]  DEFAULT (getdate()) FOR [CreationDate]
GO
/****** Object:  Check [CK__upgrade_s__statu__5BD950A8]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[upgrade_status]  WITH CHECK ADD CHECK  (([status]='COMPLETE' OR [status]='INCOMPLETE'))
GO
/****** Object:  ForeignKey [RefCorpFunction30]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[BusinessFunctionJargon]  WITH CHECK ADD  CONSTRAINT [RefCorpFunction30] FOREIGN KEY([CorpFuncName], [CorpName])
REFERENCES [dbo].[CorpFunction] ([CorpFuncName], [CorpName])
GO
ALTER TABLE [dbo].[BusinessFunctionJargon] CHECK CONSTRAINT [RefCorpFunction30]
GO
/****** Object:  ForeignKey [RefJargonWords33]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[BusinessFunctionJargon]  WITH CHECK ADD  CONSTRAINT [RefJargonWords33] FOREIGN KEY([JargonCode], [JargonWords_tgtWord])
REFERENCES [dbo].[JargonWords] ([JargonCode], [tgtWord])
GO
ALTER TABLE [dbo].[BusinessFunctionJargon] CHECK CONSTRAINT [RefJargonWords33]
GO
/****** Object:  ForeignKey [RefSourceContainer18]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ContainerStorage]  WITH CHECK ADD  CONSTRAINT [RefSourceContainer18] FOREIGN KEY([ContainerType])
REFERENCES [dbo].[SourceContainer] ([ContainerType])
GO
ALTER TABLE [dbo].[ContainerStorage] CHECK CONSTRAINT [RefSourceContainer18]
GO
/****** Object:  ForeignKey [RefStorage17]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ContainerStorage]  WITH CHECK ADD  CONSTRAINT [RefStorage17] FOREIGN KEY([StoreCode])
REFERENCES [dbo].[Storage] ([StoreCode])
GO
ALTER TABLE [dbo].[ContainerStorage] CHECK CONSTRAINT [RefStorage17]
GO
/****** Object:  ForeignKey [RefCorporation38]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ConvertedDocs]  WITH CHECK ADD  CONSTRAINT [RefCorporation38] FOREIGN KEY([CorpName])
REFERENCES [dbo].[Corporation] ([CorpName])
GO
ALTER TABLE [dbo].[ConvertedDocs] CHECK CONSTRAINT [RefCorporation38]
GO
/****** Object:  ForeignKey [RefUsers86]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CoOwner]  WITH CHECK ADD  CONSTRAINT [RefUsers86] FOREIGN KEY([PreviousOwnerUserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[CoOwner] CHECK CONSTRAINT [RefUsers86]
GO
/****** Object:  ForeignKey [RefUsers87]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CoOwner]  WITH CHECK ADD  CONSTRAINT [RefUsers87] FOREIGN KEY([CurrentOwnerUserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[CoOwner] CHECK CONSTRAINT [RefUsers87]
GO
/****** Object:  ForeignKey [RefCorpFunction24]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CorpContainer]  WITH CHECK ADD  CONSTRAINT [RefCorpFunction24] FOREIGN KEY([CorpFuncName], [CorpName])
REFERENCES [dbo].[CorpFunction] ([CorpFuncName], [CorpName])
GO
ALTER TABLE [dbo].[CorpContainer] CHECK CONSTRAINT [RefCorpFunction24]
GO
/****** Object:  ForeignKey [RefQtyDocs10]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CorpContainer]  WITH CHECK ADD  CONSTRAINT [RefQtyDocs10] FOREIGN KEY([QtyDocCode])
REFERENCES [dbo].[QtyDocs] ([QtyDocCode])
GO
ALTER TABLE [dbo].[CorpContainer] CHECK CONSTRAINT [RefQtyDocs10]
GO
/****** Object:  ForeignKey [RefSourceContainer2]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CorpContainer]  WITH CHECK ADD  CONSTRAINT [RefSourceContainer2] FOREIGN KEY([ContainerType])
REFERENCES [dbo].[SourceContainer] ([ContainerType])
GO
ALTER TABLE [dbo].[CorpContainer] CHECK CONSTRAINT [RefSourceContainer2]
GO
/****** Object:  ForeignKey [RefCorporation37]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[CorpFunction]  WITH CHECK ADD  CONSTRAINT [RefCorporation37] FOREIGN KEY([CorpName])
REFERENCES [dbo].[Corporation] ([CorpName])
GO
ALTER TABLE [dbo].[CorpFunction] CHECK CONSTRAINT [RefCorporation37]
GO
/****** Object:  ForeignKey [RefDataSource89]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceCheckOut]  WITH CHECK ADD  CONSTRAINT [RefDataSource89] FOREIGN KEY([SourceGuid], [DataSourceOwnerUserID])
REFERENCES [dbo].[DataSource] ([SourceGuid], [DataSourceOwnerUserID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[DataSourceCheckOut] CHECK CONSTRAINT [RefDataSource89]
GO
/****** Object:  ForeignKey [RefUsers90]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[DataSourceCheckOut]  WITH CHECK ADD  CONSTRAINT [RefUsers90] FOREIGN KEY([CheckedOutByUserID])
REFERENCES [dbo].[Users] ([UserID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[DataSourceCheckOut] CHECK CONSTRAINT [RefUsers90]
GO
/****** Object:  ForeignKey [RefUsers3]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Directory]  WITH CHECK ADD  CONSTRAINT [RefUsers3] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[Directory] CHECK CONSTRAINT [RefUsers3]
GO
/****** Object:  ForeignKey [RefRetention131]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Email]  WITH CHECK ADD  CONSTRAINT [RefRetention131] FOREIGN KEY([RetentionCode])
REFERENCES [dbo].[Retention] ([RetentionCode])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[Email] CHECK CONSTRAINT [RefRetention131]
GO
/****** Object:  ForeignKey [RefDatabases8]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailArchParms]  WITH CHECK ADD  CONSTRAINT [RefDatabases8] FOREIGN KEY([DB_ID])
REFERENCES [dbo].[Databases] ([DB_ID])
GO
ALTER TABLE [dbo].[EmailArchParms] CHECK CONSTRAINT [RefDatabases8]
GO
/****** Object:  ForeignKey [RefUsers4]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailArchParms]  WITH CHECK ADD  CONSTRAINT [RefUsers4] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[EmailArchParms] CHECK CONSTRAINT [RefUsers4]
GO
/****** Object:  ForeignKey [RefEmail66]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachment]  WITH NOCHECK ADD  CONSTRAINT [RefEmail66] FOREIGN KEY([EmailGuid])
REFERENCES [dbo].[Email] ([EmailGuid])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EmailAttachment] NOCHECK CONSTRAINT [RefEmail66]
GO
/****** Object:  ForeignKey [RefUsers84]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachment]  WITH CHECK ADD  CONSTRAINT [RefUsers84] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EmailAttachment] CHECK CONSTRAINT [RefUsers84]
GO
/****** Object:  ForeignKey [RefEmail69]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachmentSearchList]  WITH CHECK ADD  CONSTRAINT [RefEmail69] FOREIGN KEY([EmailGuid])
REFERENCES [dbo].[Email] ([EmailGuid])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EmailAttachmentSearchList] CHECK CONSTRAINT [RefEmail69]
GO
/****** Object:  ForeignKey [RefUsers82]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[EmailAttachmentSearchList]  WITH CHECK ADD  CONSTRAINT [RefUsers82] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[EmailAttachmentSearchList] CHECK CONSTRAINT [RefUsers82]
GO
/****** Object:  ForeignKey [RefCorpFunction34]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[FUncSkipWords]  WITH CHECK ADD  CONSTRAINT [RefCorpFunction34] FOREIGN KEY([CorpFuncName], [CorpName])
REFERENCES [dbo].[CorpFunction] ([CorpFuncName], [CorpName])
GO
ALTER TABLE [dbo].[FUncSkipWords] CHECK CONSTRAINT [RefCorpFunction34]
GO
/****** Object:  ForeignKey [RefSkipWords35]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[FUncSkipWords]  WITH CHECK ADD  CONSTRAINT [RefSkipWords35] FOREIGN KEY([tgtWord])
REFERENCES [dbo].[SkipWords] ([tgtWord])
GO
ALTER TABLE [dbo].[FUncSkipWords] CHECK CONSTRAINT [RefSkipWords35]
GO
/****** Object:  ForeignKey [RefBusinessJargonCode29]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[FunctionProdJargon]  WITH CHECK ADD  CONSTRAINT [RefBusinessJargonCode29] FOREIGN KEY([JargonCode])
REFERENCES [dbo].[BusinessJargonCode] ([JargonCode])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FunctionProdJargon] CHECK CONSTRAINT [RefBusinessJargonCode29]
GO
/****** Object:  ForeignKey [RefCorpFunction28]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[FunctionProdJargon]  WITH CHECK ADD  CONSTRAINT [RefCorpFunction28] FOREIGN KEY([CorpFuncName], [CorpName])
REFERENCES [dbo].[CorpFunction] ([CorpFuncName], [CorpName])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FunctionProdJargon] CHECK CONSTRAINT [RefCorpFunction28]
GO
/****** Object:  ForeignKey [RefRepeatData15]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[FunctionProdJargon]  WITH CHECK ADD  CONSTRAINT [RefRepeatData15] FOREIGN KEY([RepeatDataCode])
REFERENCES [dbo].[RepeatData] ([RepeatDataCode])
ON UPDATE CASCADE
GO
ALTER TABLE [dbo].[FunctionProdJargon] CHECK CONSTRAINT [RefRepeatData15]
GO
/****** Object:  ForeignKey [LibraryOwnerUserID]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[GroupLibraryAccess]  WITH NOCHECK ADD  CONSTRAINT [LibraryOwnerUserID] FOREIGN KEY([UserID], [LibraryName])
REFERENCES [dbo].[Library] ([UserID], [LibraryName])
GO
ALTER TABLE [dbo].[GroupLibraryAccess] CHECK CONSTRAINT [LibraryOwnerUserID]
GO
/****** Object:  ForeignKey [RefUserGroup64]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[GroupLibraryAccess]  WITH NOCHECK ADD  CONSTRAINT [RefUserGroup64] FOREIGN KEY([GroupOwnerUserID], [GroupName])
REFERENCES [dbo].[UserGroup] ([GroupOwnerUserID], [GroupName])
GO
ALTER TABLE [dbo].[GroupLibraryAccess] CHECK CONSTRAINT [RefUserGroup64]
GO
/****** Object:  ForeignKey [RefUsers52]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[GroupUsers]  WITH CHECK ADD  CONSTRAINT [RefUsers52] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[GroupUsers] CHECK CONSTRAINT [RefUsers52]
GO
/****** Object:  ForeignKey [RefCorpContainer25]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[InformationProduct]  WITH CHECK ADD  CONSTRAINT [RefCorpContainer25] FOREIGN KEY([ContainerType], [CorpFuncName], [CorpName])
REFERENCES [dbo].[CorpContainer] ([ContainerType], [CorpFuncName], [CorpName])
GO
ALTER TABLE [dbo].[InformationProduct] CHECK CONSTRAINT [RefCorpContainer25]
GO
/****** Object:  ForeignKey [RefInformationType36]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[InformationProduct]  WITH CHECK ADD  CONSTRAINT [RefInformationType36] FOREIGN KEY([InfoTypeCode])
REFERENCES [dbo].[InformationType] ([InfoTypeCode])
GO
ALTER TABLE [dbo].[InformationProduct] CHECK CONSTRAINT [RefInformationType36]
GO
/****** Object:  ForeignKey [RefRetention16]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[InformationProduct]  WITH CHECK ADD  CONSTRAINT [RefRetention16] FOREIGN KEY([RetentionCode])
REFERENCES [dbo].[Retention] ([RetentionCode])
GO
ALTER TABLE [dbo].[InformationProduct] CHECK CONSTRAINT [RefRetention16]
GO
/****** Object:  ForeignKey [RefUD_Qty7]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[InformationProduct]  WITH CHECK ADD  CONSTRAINT [RefUD_Qty7] FOREIGN KEY([Code])
REFERENCES [dbo].[UD_Qty] ([Code])
GO
ALTER TABLE [dbo].[InformationProduct] CHECK CONSTRAINT [RefUD_Qty7]
GO
/****** Object:  ForeignKey [RefVolitility19]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[InformationProduct]  WITH CHECK ADD  CONSTRAINT [RefVolitility19] FOREIGN KEY([VolitilityCode])
REFERENCES [dbo].[Volitility] ([VolitilityCode])
GO
ALTER TABLE [dbo].[InformationProduct] CHECK CONSTRAINT [RefVolitility19]
GO
/****** Object:  ForeignKey [RefBusinessJargonCode27]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[JargonWords]  WITH CHECK ADD  CONSTRAINT [RefBusinessJargonCode27] FOREIGN KEY([JargonCode])
REFERENCES [dbo].[BusinessJargonCode] ([JargonCode])
GO
ALTER TABLE [dbo].[JargonWords] CHECK CONSTRAINT [RefBusinessJargonCode27]
GO
/****** Object:  ForeignKey [RefLibrary124]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibDirectory]  WITH NOCHECK ADD  CONSTRAINT [RefLibrary124] FOREIGN KEY([UserID], [LibraryName])
REFERENCES [dbo].[Library] ([UserID], [LibraryName])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LibDirectory] CHECK CONSTRAINT [RefLibrary124]
GO
/****** Object:  ForeignKey [RefLibrary123]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibEmail]  WITH NOCHECK ADD  CONSTRAINT [RefLibrary123] FOREIGN KEY([UserID], [LibraryName])
REFERENCES [dbo].[Library] ([UserID], [LibraryName])
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LibEmail] CHECK CONSTRAINT [RefLibrary123]
GO
/****** Object:  ForeignKey [FK__Library__UserID__1BB31344]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Library]  WITH CHECK ADD  CONSTRAINT [FK__Library__UserID__1BB31344] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[Library] CHECK CONSTRAINT [FK__Library__UserID__1BB31344]
GO
/****** Object:  ForeignKey [RefUsers99]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LibraryUsers]  WITH CHECK ADD  CONSTRAINT [RefUsers99] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[LibraryUsers] CHECK CONSTRAINT [RefUsers99]
GO
/****** Object:  ForeignKey [RefLoadProfile1271]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LoadProfileItem]  WITH CHECK ADD  CONSTRAINT [RefLoadProfile1271] FOREIGN KEY([ProfileName])
REFERENCES [dbo].[LoadProfile] ([ProfileName])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LoadProfileItem] CHECK CONSTRAINT [RefLoadProfile1271]
GO
/****** Object:  ForeignKey [RefSourceType1281]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[LoadProfileItem]  WITH CHECK ADD  CONSTRAINT [RefSourceType1281] FOREIGN KEY([SourceTypeCode])
REFERENCES [dbo].[SourceType] ([SourceTypeCode])
ON UPDATE CASCADE
ON DELETE CASCADE
GO
ALTER TABLE [dbo].[LoadProfileItem] CHECK CONSTRAINT [RefSourceType1281]
GO
/****** Object:  ForeignKey [RefCaptureItems22]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ProdCaptureItems]  WITH CHECK ADD  CONSTRAINT [RefCaptureItems22] FOREIGN KEY([CaptureItemsCode])
REFERENCES [dbo].[CaptureItems] ([CaptureItemsCode])
GO
ALTER TABLE [dbo].[ProdCaptureItems] CHECK CONSTRAINT [RefCaptureItems22]
GO
/****** Object:  ForeignKey [RefInformationProduct21]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ProdCaptureItems]  WITH CHECK ADD  CONSTRAINT [RefInformationProduct21] FOREIGN KEY([ContainerType], [CorpFuncName], [CorpName])
REFERENCES [dbo].[InformationProduct] ([ContainerType], [CorpFuncName], [CorpName])
GO
ALTER TABLE [dbo].[ProdCaptureItems] CHECK CONSTRAINT [RefInformationProduct21]
GO
/****** Object:  ForeignKey [RefUsers112]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickRef]  WITH CHECK ADD  CONSTRAINT [RefUsers112] FOREIGN KEY([UserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[QuickRef] CHECK CONSTRAINT [RefUsers112]
GO
/****** Object:  ForeignKey [RefQuickRef115]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[QuickRefItems]  WITH CHECK ADD  CONSTRAINT [RefQuickRef115] FOREIGN KEY([QuickRefIdNbr])
REFERENCES [dbo].[QuickRef] ([QuickRefIdNbr])
GO
ALTER TABLE [dbo].[QuickRefItems] CHECK CONSTRAINT [RefQuickRef115]
GO
/****** Object:  ForeignKey [RefEmail42]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[Recipients]  WITH NOCHECK ADD  CONSTRAINT [RefEmail42] FOREIGN KEY([EmailGuid])
REFERENCES [dbo].[Email] ([EmailGuid])
GO
ALTER TABLE [dbo].[Recipients] NOCHECK CONSTRAINT [RefEmail42]
GO
/****** Object:  ForeignKey [RefDirectory15]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SubDir]  WITH CHECK ADD  CONSTRAINT [RefDirectory15] FOREIGN KEY([UserID], [FQN])
REFERENCES [dbo].[Directory] ([UserID], [FQN])
GO
ALTER TABLE [dbo].[SubDir] CHECK CONSTRAINT [RefDirectory15]
GO
/****** Object:  ForeignKey [FK__SubLibrary__4BB72C21]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SubLibrary]  WITH CHECK ADD  CONSTRAINT [FK__SubLibrary__4BB72C21] FOREIGN KEY([SubUserID], [SubLibraryName])
REFERENCES [dbo].[Library] ([UserID], [LibraryName])
GO
ALTER TABLE [dbo].[SubLibrary] CHECK CONSTRAINT [FK__SubLibrary__4BB72C21]
GO
/****** Object:  ForeignKey [FK__SubLibrary__4CAB505A]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[SubLibrary]  WITH CHECK ADD  CONSTRAINT [FK__SubLibrary__4CAB505A] FOREIGN KEY([UserID], [LibraryName])
REFERENCES [dbo].[Library] ([UserID], [LibraryName])
GO
ALTER TABLE [dbo].[SubLibrary] CHECK CONSTRAINT [FK__SubLibrary__4CAB505A]
GO
/****** Object:  ForeignKey [FK__UserGroup__Group__2077C861]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[UserGroup]  WITH CHECK ADD  CONSTRAINT [FK__UserGroup__Group__2077C861] FOREIGN KEY([GroupOwnerUserID])
REFERENCES [dbo].[Users] ([UserID])
GO
ALTER TABLE [dbo].[UserGroup] CHECK CONSTRAINT [FK__UserGroup__Group__2077C861]
GO
/****** Object:  ForeignKey [RefDataSource100]    Script Date: 05/18/2011 16:17:11 ******/
ALTER TABLE [dbo].[ZippedFiles]  WITH CHECK ADD  CONSTRAINT [RefDataSource100] FOREIGN KEY([SourceGuid], [DataSourceOwnerUserID])
REFERENCES [dbo].[DataSource] ([SourceGuid], [DataSourceOwnerUserID])
GO
ALTER TABLE [dbo].[ZippedFiles] CHECK CONSTRAINT [RefDataSource100]
GO
