
/*--------------------------------------------------------------------------
-- USe KenticoCMS_Datamart_2
declare @DDL as nvarchar(max) = '' 
exec proc_GenCT_HistProcedure KenticoCMS_2, CMS_Class, BASE_CMS_Class_CTVerHIST, @DDL out
*/
IF EXISTS (SELECT
                  name
                  FROM sys.procedures
                  WHERE name = 'proc_GenCT_HistProcedure') 
    BEGIN
        DROP PROCEDURE
             proc_GenCT_HistProcedure
    END;
GO
CREATE PROCEDURE proc_GenCT_HistProcedure (@InstanceName nvarchar (100) 
   , @TBLNAME nvarchar (100) 
   , @HistTblNAME nvarchar (100) 
   , @DDL nvarchar (max) OUTPUT) 
AS
BEGIN
    DECLARE @HistProcName AS nvarchar (max) = 'proc_BASE_' + @TBLNAME + '_' + @InstanceName + '_CTHIST';
    DECLARE @S AS nvarchar (max) = '';

    if exists (select name from sys.procedures where name = @HistProcName)
    begin

	   set @S = 'drop procedure ' + @HistProcName ;
	   exec (@S) ;
	   end ;
    
    set @s = '' ;
    SET @S = @S + ' create procedure [dbo].[proc_BASE_' + @TBLNAME + '_' + @InstanceName + '_CTHIST] (@InstanceName AS nvarchar (100))' + CHAR (10) ;
    SET @S = @S + ' as ' + CHAR (10) ;
    SET @S = @S + ' begin ' + CHAR (10) ;
    SET @S = @S + '     '  + CHAR (10) ;
    SET @S = @S + '     --Author: W. Dale Miller ' + cast(getdate() as nvarchar(50))  + CHAR (10) ;
    SET @S = @S + '     --Note:   Code Generated by proc_GenCT_HistProcedure on ' + cast(getdate() as nvarchar(50))  + CHAR (10) ;
    SET @S = @S + '     --This procedure finds and saves the LATEST change tracking version for table ' + @TBLNAME + CHAR (10) ;
    SET @S = @S + '     --   located on DBMS ' + @InstanceName + ' and saves it in the HISTORY table.'  + CHAR (10) ;
    SET @S = @S + '     '  + CHAR (10) ;
    SET @S = @S + '     DECLARE @OldChgID TABLE(SYS_CHANGE_VERSION bigint  NOT NULL, DBMS nvarchar(100) PRIMARY KEY ( SYS_CHANGE_VERSION, DBMS)); ' + CHAR (10) ;
    SET @S = @S + '     DECLARE @NewChgID TABLE (SYS_CHANGE_VERSION bigint  NOT NULL, DBMS nvarchar(100) PRIMARY KEY ( SYS_CHANGE_VERSION,DBMS)); ' + CHAR (10) ;
    SET @S = @S + '     INSERT INTO @NewChgID ' + CHAR (10) ;
    SET @S = @S + '         SELECT DISTINCT ' + CHAR (10) ;
    SET @S = @S + '            CT.SYS_CHANGE_VERSION, @InstanceName as DBMS ' + CHAR (10) ;
    SET @S = @S + '               FROM CHANGETABLE (CHANGES '+@InstanceName+'.dbo.' + @TBLNAME + ', NULL) AS CT; ' + CHAR (10) ;
    SET @S = @S + '  ' + CHAR (10) ;
    SET @S = @S + '     INSERT INTO @OldChgID ' + CHAR (10) ;
    SET @S = @S + '         SELECT DISTINCT ' + CHAR (10) ;
    SET @S = @S + '             SYS_CHANGE_VERSION, DBMS ' + CHAR (10) ;
    SET @S = @S + '                FROM ' + @HistTblNAME + '; ' + CHAR (10) ;
    SET @S = @S + '  ' + CHAR (10) ;
    SET @S = @S + ' WITH CTE (SYS_CHANGE_VERSION, DBMS)  ' + CHAR (10) ;
    SET @S = @S + '     AS ( ' + CHAR (10) ;
    SET @S = @S + ' 	   SELECT SYS_CHANGE_VERSION, DBMS FROM @NewChgID ' + CHAR (10) ;
    SET @S = @S + ' 	   EXCEPT ' + CHAR (10) ;
    SET @S = @S + ' 	   SELECT SYS_CHANGE_VERSION, DBMS FROM @OldChgID ' + CHAR (10) ;
    SET @S = @S + ' 	   )  ' + CHAR (10) ;
    SET @S = @S + '     INSERT INTO ' + @HistTblNAME + CHAR (10) ;
    SET @S = @S + ' 	   (SYS_CHANGE_VERSION, DBMS)  ' + CHAR (10) ;
    SET @S = @S + ' 	   SELECT CTE.SYS_CHANGE_VERSION, DBMS FROM CTE; ' + CHAR (10) ;
    SET @S = @S + ' END ;  ' + CHAR (10) ;

    SELECT
           @DDL = @S;
    --PRINT @S;

END;