

go
use KenticoCMS_DataMart

GO

PRINT 'Execute proc_EDW_BuildHAHashkeys.sql';

GO

IF NOT EXISTS (SELECT
                      name
                      FROM sys.indexes
                      WHERE name = 'PI_BuildHAHashkeys00') 
    BEGIN
        CREATE NONCLUSTERED INDEX PI_BuildHAHashkeys00
        ON dbo.FACT_EDW_HFIT_HEALTHASSESMENTUSERSTARTED (HACAMPAIGNNODEGUID, SVR, DBNAME) 
        INCLUDE (USERID, HASTARTEDDT, HACOMPLETEDDT, HASCORE, HAPAPERFLG, HATELEPHONICFLG, HASTARTEDMODE, HACOMPLETEDMODE, ITEMID) 
    END;

GO
--0.23.2015 03:36:42
--0.24.2015 00:08:42 @ 1,000,000 no CT
--0.24.2015 00:05:16 @ 1,000,000 no CT / no DUPS
--0.24.2015 00:04:56 @ 1,000,000 no CT / no DUPS / TEMP TABLE
-- select count(*) from [#EdwHAHashkeys]
-- exec [proc_EDW_BuildHAHashkeys]

IF EXISTS (SELECT
                  name
                  FROM sys.procedures
                  WHERE name = 'proc_EDW_BuildHAHashkeys') 
    BEGIN
        DROP PROCEDURE
             proc_EDW_BuildHAHashkeys;
    END;

GO
-- exec [proc_EDW_BuildHAHashkeys]
CREATE PROCEDURE proc_EDW_BuildHAHashkeys
AS
BEGIN
    DECLARE @st AS DATETIME = GETDATE () ;
    DECLARE @ET AS DATETIME = GETDATE () ;
    DECLARE @CT AS DATETIME = GETDATE () ;
    --0.23.2015 03:36:42
    --DECLARE @HASHKEYS as table

    IF OBJECT_ID ('tempdb..#EdwHAHashkeys') IS NOT NULL
        BEGIN
            EXEC proc_trace 'START Process EdwHAHashkeys', @CT, NULL;
            DROP TABLE
                 #EdwHAHashkeys;
            SET @ET = GETDATE () ;
            EXEC proc_trace 'END Process EdwHAHashkeys', @CT, @ET;
        END;

    CREATE TABLE #EdwHAHashkeys
    (
                 SVR VARCHAR (100) NOT NULL
               , DBNAME VARCHAR (100) NOT NULL
               , HAUSERSTARTED_ITEMID INT  NOT NULL
               , USERGUID UNIQUEIDENTIFIER  NOT NULL
               , HASHCODE VARCHAR (100) NOT NULL
               , PKHASHCODE NVARCHAR (100) NOT NULL
               , CHANGETYPE VARCHAR (10) NULL
               , RowNbr INT IDENTITY (1 , 1) 
                            NOT NULL
                            PRIMARY KEY ( PKHASHCODE ASC, HAUSERSTARTED_ITEMID ASC, USERGUID, HASHCODE , RowNbr) 
    );
    SET @CT = GETDATE () ;
    EXEC proc_trace 'START Process proc_EDW_BuildHAHashkeys', @CT, NULL;
    INSERT INTO #EdwHAHashkeys
    (
           SVR
         , DBNAME
         , HAUSERSTARTED_ITEMID
         , USERGUID
         , HASHCODE
         , PKHASHCODE) 
    SELECT
           HAUSERSTARTED.SVR
         , HAUSERSTARTED.DBNAME
         , HAUSERSTARTED.ITEMID AS HAUSERSTARTED_ITEMID
         , USERGUID
         , CAST ( HASHBYTES ( 'sha1' , ISNULL ( CAST ( HAUSERSTARTED.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( VHAJ.NODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.USERID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( CMSUSER.USERGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( USERSETTINGS.HFITUSERMPINUMBER AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( CMSSITE.SITEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( ACCT.ACCOUNTID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( ACCT.ACCOUNTCD AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( ACCT.ACCOUNTNAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HASTARTEDDT AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HACOMPLETEDDT AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERMODULE.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERMODULE.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERMODULE.HAMODULENODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( VHAJ.NODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.HARISKCATEGORYNODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.HARISKAREANODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( LEFT ( HAQUESTIONSVIEW.TITLE , 1000) , '-') + ISNULL ( CAST ( HAUSERQUESTION.HAQUESTIONNODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.HAQUESTIONNODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.HAANSWERNODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.HAANSWERVALUE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERMODULE.HAMODULESCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.HARISKCATEGORYSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.HARISKAREASCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.HAQUESTIONSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.HAANSWERPOINTS AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTIONGROUPRESULTS.POINTRESULTS AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.UOMCODE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HASCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERMODULE.PREWEIGHTEDSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.PREWEIGHTEDSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.PREWEIGHTEDSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.PREWEIGHTEDSCORE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTIONGROUPRESULTS.CODENAME AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMCREATEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.ISPROFESSIONALLYCOLLECTED AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HAPAPERFLG AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HATELEPHONICFLG AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HASTARTEDMODE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HACOMPLETEDMODE AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HACAMPAIGNNODEGUID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( VHCJ.HACAMPAIGNID AS NVARCHAR (100)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMMODIFIEDWHEN AS NVARCHAR (100)) , '-')) AS VARCHAR (100)) AS HASHCODE
         , CAST ( HASHBYTES ( 'sha1' , ISNULL ( CAST ( HAUSERSTARTED.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( VHAJ.NODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( USERGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( SITEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( ACCT.ACCOUNTID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( ACCOUNTCD AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERMODULE.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAMODULENODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( VHAJ.NODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HARISKCATEGORYNODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.CODENAME AS VARCHAR (100)) , '-') + ISNULL ( CAST ( HARISKCATEGORY.HARISKCATEGORYNODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HARISKAREANODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERRISKAREA.CODENAME AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.HAQUESTIONNODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERQUESTION.CODENAME AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAQUESTIONNODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERANSWERS.ITEMID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAANSWERNODEGUID AS VARCHAR (50)) , '-') + ISNULL ( CAST ( HAUSERSTARTED.HACAMPAIGNNODEGUID AS VARCHAR (50)) , '-')) AS VARCHAR (100)) AS PKHASHCODE
           FROM FACT_EDW_HFIT_HEALTHASSESMENTUSERSTARTED AS HAUSERSTARTED
                    INNER JOIN BASE_CMS_USER AS CMSUSER
                        ON HAUSERSTARTED.USERID = CMSUSER.USERID
                       AND HAUSERSTARTED.svr = CMSUSER.svr
                       AND HAUSERSTARTED.DBNAME = CMSUSER.DBNAME
                    INNER JOIN BASE_CMS_USERSETTINGS AS USERSETTINGS
                        ON USERSETTINGS.USERSETTINGSUSERID = CMSUSER.USERID
                       AND HFITUSERMPINUMBER >= 0
                       AND HFITUSERMPINUMBER IS NOT NULL
                       AND USERSETTINGS.svr = CMSUSER.svr
                       AND USERSETTINGS.DBNAME = CMSUSER.DBNAME
                    INNER JOIN BASE_CMS_USERSITE AS USERSITE
                        ON CMSUSER.USERID = USERSITE.USERID
                       AND CMSUSER.svr = USERSITE.svr
                       AND CMSUSER.DBNAME = USERSITE.DBNAME
                    INNER JOIN DBO.BASE_CMS_SITE AS CMSSITE
                        ON USERSITE.SITEID = CMSSITE.SITEID
                       AND USERSITE.svr = CMSSITE.svr
                       AND USERSITE.DBNAME = CMSSITE.DBNAME
                    INNER JOIN DBO.BASE_HFIT_ACCOUNT AS ACCT
                        ON ACCT.SITEID = CMSSITE.SITEID
                       AND ACCT.svr = CMSSITE.svr
                       AND ACCT.DBNAME = CMSSITE.DBNAME
                    INNER JOIN BASE_HFIT_HEALTHASSESMENTUSERMODULE AS HAUSERMODULE
                        ON HAUSERSTARTED.ITEMID = HAUSERMODULE.HASTARTEDITEMID
                       AND HAUSERSTARTED.svr = HAUSERMODULE.svr
                       AND HAUSERSTARTED.DBNAME = HAUSERMODULE.DBNAME
                    INNER JOIN FACT_EDW_VIEW_HFIT_HACAMPAIGN_JOINED AS VHCJ
                        ON VHCJ.NODEGUID = HAUSERSTARTED.HACAMPAIGNNODEGUID
                       AND VHCJ.NODESITEID = USERSITE.SITEID
                       AND VHCJ.DOCUMENTCULTURE = 'en-US'
                       AND VHCJ.svr = HAUSERSTARTED.svr
                       AND VHCJ.DBNAME = HAUSERSTARTED.DBNAME
                    INNER JOIN FACT_VIEW_HFIT_HEALTHASSESSMENT_JOINED AS VHAJ
                        ON VHAJ.DOCUMENTID = VHCJ.HEALTHASSESSMENTID
                       AND VHAJ.svr = VHCJ.svr
                       AND VHAJ.DBNAME = VHCJ.DBNAME
                    INNER JOIN BASE_HFIT_HEALTHASSESMENTUSERRISKCATEGORY AS HARISKCATEGORY
                        ON HAUSERMODULE.ITEMID = HARISKCATEGORY.HAMODULEITEMID
                       AND HAUSERMODULE.svr = HARISKCATEGORY.svr
                       AND HAUSERMODULE.DBNAME = HARISKCATEGORY.DBNAME
                    INNER JOIN FACT_EDW_HFit_HealthAssesmentUserRiskArea AS HAUSERRISKAREA
                        ON HARISKCATEGORY.ITEMID = HAUSERRISKAREA.HARISKCATEGORYITEMID
                       AND HARISKCATEGORY.svr = HAUSERRISKAREA.svr
                       AND HARISKCATEGORY.DBNAME = HAUSERRISKAREA.DBNAME
                    INNER JOIN FACT_EDW_HFit_HealthAssesmentUserQuestion AS HAUSERQUESTION
                        ON HAUSERRISKAREA.ITEMID = HAUSERQUESTION.HARISKAREAITEMID
                       AND HAUSERRISKAREA.svr = HAUSERQUESTION.svr
                       AND HAUSERRISKAREA.DBNAME = HAUSERQUESTION.DBNAME
                    INNER JOIN FACT_View_EDW_HealthAssesmentQuestions AS HAQUESTIONSVIEW
                        ON HAUSERQUESTION.HAQUESTIONNODEGUID = HAQUESTIONSVIEW.NODEGUID
                       AND HAUSERQUESTION.svr = HAQUESTIONSVIEW.svr
                       AND HAUSERQUESTION.DBNAME = HAQUESTIONSVIEW.DBNAME
                    LEFT OUTER JOIN BASE_HFit_HealthAssesmentUserQuestionGroupResults AS HAUSERQUESTIONGROUPRESULTS
                        ON HAUSERRISKAREA.ITEMID = HAUSERQUESTIONGROUPRESULTS.HARISKAREAITEMID
                       AND HAUSERRISKAREA.svr = HAUSERQUESTIONGROUPRESULTS.svr
                       AND HAUSERRISKAREA.DBNAME = HAUSERQUESTIONGROUPRESULTS.DBNAME
                    INNER JOIN FACT_EDW_HFIT_HealthAssesmentUserAnswers AS HAUSERANSWERS
                        ON HAUSERQUESTION.ITEMID = HAUSERANSWERS.HAQUESTIONITEMID --Add in the change tracking data
                       AND HAUSERQUESTION.svr = HAUSERANSWERS.svr
                       AND HAUSERQUESTION.DBNAME = HAUSERANSWERS.DBNAME

           --LEFT JOIN CHANGETABLE (CHANGES [CMS_USERSETTINGS], NULL) AS [CT_CMS_USERSETTINGS]
           --             ON [USERSETTINGS].[USERSETTINGSID] = [CT_CMS_USERSETTINGS].[USERSETTINGSID]
           --         LEFT JOIN CHANGETABLE (CHANGES [CMS_USER], NULL) AS [CT_CMS_USER]
           --             ON [CMSUSER].[USERID] = [CT_CMS_USER].[USERID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_CMS_SITE], NULL) AS [CT_CMS_SITE]
           --             ON [CMSSITE].[SITEID] = [CT_CMS_SITE].[SITEID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [CMS_USERSITE], NULL) AS [CT_CMS_USERSITE]
           --             ON [USERSITE].[USERSITEID] = [CT_CMS_USERSITE].[USERSITEID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_HFIT_ACCOUNT], NULL) AS [CT_HFIT_ACCOUNT]
           --             ON [ACCT].[ACCOUNTID] = [CT_HFIT_ACCOUNT].[ACCOUNTID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [HFIT_HACAMPAIGN], NULL) AS [CT_HFIT_HACAMPAIGN]
           --             ON [VHCJ].[HACAMPAIGNID] = [CT_HFIT_HACAMPAIGN].[HACAMPAIGNID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_HFit_HealthAssesmentUserAnswers], NULL) AS [CT_HFIT_HealthAssesmentUserAnswers]
           --             ON [HAUSERANSWERS].[ITEMID] = [CT_HFIT_HealthAssesmentUserAnswers].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [HFIT_HEALTHASSESMENTUSERMODULE], NULL) AS [CT_HFIT_HEALTHASSESMENTUSERMODULE]
           --             ON [HAUSERMODULE].[ITEMID] = [CT_HFIT_HEALTHASSESMENTUSERMODULE].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_HFIT_HEALTHASSESMENTUSERQUESTION], NULL) AS [CT_HFIT_HEALTHASSESMENTUSERQUESTION]
           --             ON [HAUSERQUESTION].[ITEMID] = [CT_HFIT_HEALTHASSESMENTUSERQUESTION].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_HFIT_HEALTHASSESMENTUSERQUESTIONGROUPRESULTS], NULL) AS [CT_HFIT_HealthAssesmentUserQuestionGroupResults]
           --             ON [HAUSERQUESTIONGROUPRESULTS].[ITEMID] = [CT_HFIT_HealthAssesmentUserQuestionGroupResults].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [BASE_HFIT_HEALTHASSESMENTUSERRISKAREA], NULL) AS [CT_HFIT_HEALTHASSESMENTUSERRISKAREA]
           --             ON [HAUSERRISKAREA].[ITEMID] = [CT_HFIT_HEALTHASSESMENTUSERRISKAREA].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [HFIT_HEALTHASSESMENTUSERRISKCATEGORY], NULL) AS [CT_HFIT_HEALTHASSESMENTUSERRISKCATEGORY]
           --             ON [HARISKCATEGORY].[ITEMID] = [CT_HFIT_HEALTHASSESMENTUSERRISKCATEGORY].[ITEMID]
           --         LEFT OUTER JOIN CHANGETABLE (CHANGES [HFIT_HEALTHASSESMENTUSERSTARTED], NULL) AS [CT_HFIT_HEALTHASSESMENTUSERSTARTED]
           --             ON [HAUSERSTARTED].[ITEMID] = [CT_HFIT_HEALTHASSESMENTUSERSTARTED].[ITEMID]
           WHERE USERSETTINGS.HFITUSERMPINUMBER NOT IN (
        SELECT
               REJECTMPICODE
               FROM BASE_HFIT_LKP_EDW_REJECTMPI);

    SET @ET = GETDATE () ;
    EXEC proc_trace 'END Process proc_EDW_BuildHAHashkeys', @CT, @ET;
    EXEC proc_trace 'START Process proc_EDW_BuildHAHashkeys - Remove DUPS', @CT, NULL;
    --select * from @HASHKEYS
    DECLARE @ms AS FLOAT = DATEDIFF (ms, @st, GETDATE ()) ;
    DECLARE @secs AS FLOAT = @ms / 1000;
    DECLARE @mins AS FLOAT = @ms / 1000 / 60;
    PRINT '1 - @Secs = ' + CAST (@secs AS NVARCHAR (50)) ;
    PRINT '1 - @mins = ' + CAST (@mins AS NVARCHAR (50)) ;

    WITH CTE (
         SVR
       , DBNAME
       , PKHASHCODE
       , HAUSERSTARTED_ITEMID
       , HASHCODE
       , DuplicateCount) 
        AS (
        SELECT
               SVR
             , DBNAME
             , PKHASHCODE
             , HAUSERSTARTED_ITEMID
             , HASHCODE
             , ROW_NUMBER () OVER ( PARTITION BY PKHASHCODE
                                               , HAUSERSTARTED_ITEMID
                                               , HASHCODE  ORDER BY SVR, DBNAME, PKHASHCODE , HAUSERSTARTED_ITEMID , HASHCODE) AS DuplicateCount
               FROM #EdwHAHashkeys
        ) 
        DELETE
        FROM CTE
        WHERE
              DuplicateCount > 1;
    SET @CT = GETDATE () ;
    EXEC proc_trace 'END Process proc_EDW_BuildHAHashkeys - Remove DUPS', @CT, NULL;
    SET @ET = GETDATE () ;
    EXEC proc_trace 'END proc_EDW_BuildHAHashkeys', @st, @ET;

END;

GO
PRINT 'Executed proc_EDW_BuildHAHashkeys.sql';
--select top 1000 * from [#EdwHAHashkeys] order by RowNbr
GO

    